{"version":3,"sources":["../src/general-novel-style.js"],"names":["defaultOptions","repeat","str","n","String","prototype","call","arr","i","push","join","reporter","context","options","opts","Object","assign","charsLeadingParagraph","noPunctuationAtClosingQuote","spaceAfterMarks","evenNumberEllipsises","evenNumberDashes","appropriateUseOfPunctuation","appropriateUseOfInterpunct","appropriateUseOfChoonpu","appropriateUseOfMinusSign","maxArabicNumeralDigits","helper","RuleHelper","Syntax","RuleError","fixer","report","getSource","Paragraph","node","isChildNode","BlockQuote","Promise","resolve","reject","text","reportMatches","pattern","test","message","indexer","matches","lastIndex","exec","apply","range","index","length","args","concat","fix","indexOf","charAt","insertTextBeforeRange","insertTextAfterRange","s","replaceTextRange","Math","ceil","removeRange","a","b","wide","linter"],"mappings":"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","file":"general-novel-style.js","sourcesContent":["\"use strict\";\n\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport kansuji from \"kansuji\";\n\nconst defaultOptions = {\n    // 各段落の先頭に許可する文字\n    \"chars_leading_paragraph\": \"　「『【〈《（(“\\\"‘'［[〔｛{＜<\",\n    // 閉じ括弧の手前に句読点(。、)を置かない\n    \"no_punctuation_at_closing_quote\": true,\n    // 疑問符(？)と感嘆符(！)の直後にスペースを置く\n    \"space_after_marks\": true,\n    // 連続した三点リーダー(…)の数は偶数にする\n    \"even_number_ellipsises\": true,\n    // 連続したダッシュ(―)の数は偶数にする\n    \"even_number_dashes\": true,\n    // 連続した句読点(。、)を許可しない\n    \"appropriate_use_of_punctuation\": true,\n    // 連続した中黒(・)を許可しない\n    \"appropriate_use_of_interpunct\": true,\n    // 連続した長音符(ー)を許可しない\n    \"appropriate_use_of_choonpu\": true,\n    // マイナス記号(−)は数字の前にしか許可しない\n    \"appropriate_use_of_minus_sign\": true,\n    // アラビア数字の桁数は2桁まで (false: チェックしない)\n    \"max_arabic_numeral_digits\": 2\n};\n\nfunction repeat(str, n) {\n    if (String.prototype.repeat) return String.prototype.repeat.call(str, n);\n    const arr = [];\n    for (let i = 0; i < n; i++) arr.push(str);\n    return arr.join(\"\");\n}\n\nfunction reporter(context, options = {}) {\n    const opts = Object.assign({}, defaultOptions, options);\n    const charsLeadingParagraph = opts[\"chars_leading_paragraph\"] || \"\";\n    const noPunctuationAtClosingQuote = opts[\"no_punctuation_at_closing_quote\"];\n    const spaceAfterMarks = opts[\"space_after_marks\"];\n    const evenNumberEllipsises = opts[\"even_number_ellipsises\"];\n    const evenNumberDashes = opts[\"even_number_dashes\"];\n    const appropriateUseOfPunctuation = opts[\"appropriate_use_of_punctuation\"];\n    const appropriateUseOfInterpunct = opts[\"appropriate_use_of_interpunct\"];\n    const appropriateUseOfChoonpu = opts[\"appropriate_use_of_choonpu\"];\n    const appropriateUseOfMinusSign = opts[\"appropriate_use_of_minus_sign\"];\n    const maxArabicNumeralDigits = opts[\"max_arabic_numeral_digits\"];\n\n    let helper = new RuleHelper(context);\n    let {Syntax, RuleError, fixer, report, getSource} = context;\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n                return;\n            }\n\n            return new Promise((resolve, reject) => {\n                const text = getSource(node);\n\n                const reportMatches = ({pattern, test, message, indexer, fixer}) => {\n                    let matches;\n                    pattern.lastIndex = 0;\n                    while (matches = pattern.exec(text)) {\n                        if (!test || test.apply(null, matches)) {\n                            const range = [matches.index, matches.index + matches[0].length];\n                            const args  = [range].concat(matches);\n                            const index = indexer ? indexer.apply(null, args) : matches.index;\n                            const fix   = fixer ? fixer.apply(null, args) : null;\n                            report(node, new RuleError(message, { index, fix }));\n                        }\n                    }\n                };\n\n                if (charsLeadingParagraph) {\n                    if (charsLeadingParagraph.indexOf(text.charAt(0)) == -1) {\n                        report(node, new RuleError(`段落の先頭に許可されていない文字が存在しています`, {\n                            fix: fixer.insertTextBeforeRange([0, 0], charsLeadingParagraph[0])\n                        }));\n                    }\n                }\n\n                if (spaceAfterMarks) {\n                    reportMatches({\n                        pattern: /[？！](?![　？！」』】〉》）\\)”\"’'］\\]〕｝\\}＞>]|$)/g,\n                        message: \"感嘆符(！)・疑問符(？)の直後にスペースか閉じ括弧が必要です\",\n                        fixer:   (range) => fixer.insertTextAfterRange(range, \"　\"),\n                    });\n                }\n\n                if (evenNumberEllipsises) {\n                    reportMatches({\n                        pattern: /…+/g,\n                        test:    (s) => s.length % 2 == 1,\n                        message: \"連続した三点リーダー(…)の数が偶数ではありません\",\n                        fixer:   (range) => fixer.insertTextAfterRange(range, \"…\"),\n                    });\n                }\n\n                if (evenNumberDashes) {\n                    reportMatches({\n                        pattern: /―+/g,\n                        test:    (s) => s.length % 2 == 1,\n                        message: \"連続したダッシュ(―)の数が偶数ではありません\",\n                        fixer:   (range) => fixer.insertTextAfterRange(range, \"―\"),\n                    });\n                }\n\n                if (appropriateUseOfPunctuation) {\n                    reportMatches({\n                        pattern: /。。+|、、+/g,\n                        message: \"連続した句読点(。、)が使われています\",\n                        fixer:   (range, s) => fixer.replaceTextRange(range, repeat(\"……\", Math.ceil(s.length / 3))),\n                    });\n                }\n\n                if (appropriateUseOfInterpunct) {\n                    reportMatches({\n                        pattern: /・・+/g,\n                        message: \"連続した中黒(・)が使われています\",\n                        fixer:   (range, s) => fixer.replaceTextRange(range, repeat(\"……\", Math.ceil(s.length / 3))),\n                    });\n                }\n\n                if (appropriateUseOfChoonpu) {\n                    reportMatches({\n                        pattern: /ーー+/g,\n                        message: \"連続した長音符(ー)が使われています\",\n                        fixer:   (range, s) => fixer.replaceTextRange(range, repeat(\"――\", Math.ceil(s.length / 2))),\n                    });\n                }\n\n                if (noPunctuationAtClosingQuote && !/\\[.*[。、]+\\]\\(.*\\)/g.test(text)) {\n                    reportMatches({\n                        pattern: /[。、]+(?=[」』】〉》）\\)”\"’'］\\]〕｝\\}＞>])/g,\n                        message: \"句読点(。、)が閉じ括弧の直前に存在しています\",\n                        indexer: (range) => range[1] - 1,\n                        fixer: (range) => fixer.removeRange(range),\n                    });\n                }\n\n                if (appropriateUseOfMinusSign) {\n                    reportMatches({\n                        pattern: /−(?![0-9０１２３４５６７８９〇一二三四五六七八九十])/g,\n                        message: \"マイナス記号(−)の直後が数字ではありません\",\n                        fixer:   (range, s) => fixer.replaceTextRange(range, \"ー\"),\n                    });\n                }\n\n                if (typeof maxArabicNumeralDigits == \"number\") {\n                    reportMatches({\n                        pattern: /([0-9０１２３４５６７８９]+)(?:[\\.．]([0-9０１２３４５６７８９]+))?/g,\n                        test:    (s, a, b) => a.length > maxArabicNumeralDigits || (b && b.length > maxArabicNumeralDigits),\n                        message: `${maxArabicNumeralDigits}桁を超えるアラビア数字が使われています`,\n                        fixer:   (range, s) => fixer.replaceTextRange(range, kansuji(s, { wide: true })),\n                    });\n                }\n\n                resolve();\n            });\n        }\n    };\n}\n\nexport default {\n    linter: reporter,\n    fixer: reporter,\n}\n"]}