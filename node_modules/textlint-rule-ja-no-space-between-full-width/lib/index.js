// LICENSE : MIT
"use strict";
/*
 全角文字と半角文字の間
 全角文字どうしの間にスペースを入れません。
 ただしカタカナ複合語の場合を除きます。
 */

var _textlintRuleHelper = require("textlint-rule-helper");

var _matchIndex = require("match-index");

var _regx = _interopRequireDefault(require("regx"));

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var rx = (0, _regx.default)("g");
var japaneseRegExp = /(?:[々〇〻\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])/;

function reporter(context) {
  var {
    Syntax,
    RuleError,
    report,
    fixer,
    getSource
  } = context;
  var helper = new _textlintRuleHelper.RuleHelper();
  return {
    [Syntax.Str](node) {
      if (!helper.isPlainStrNode(node)) {
        return;
      }

      var text = getSource(node); // 全角同士の間は半角スペースを入れない

      var matchReg = rx(_templateObject || (_templateObject = _taggedTemplateLiteral(["", "( )", ""])), japaneseRegExp, japaneseRegExp);
      var katakakana = /[ァ-ヶ]( )[ァ-ヶ]/;
      (0, _matchIndex.matchAll)(text, matchReg).forEach(match => {
        var {
          input,
          captureGroups
        } = match; // ただしカタカナ複合語の場合を除きます。

        if (katakakana.test(input)) {
          return;
        }

        captureGroups.forEach(captureGroup => {
          var index = captureGroup.index;
          report(node, new RuleError("原則として、全角文字どうしの間にスペースを入れません。", {
            index: index,
            fix: fixer.replaceTextRange([index, index + 1], "")
          }));
        });
      });
    }

  };
}

module.exports = {
  linter: reporter,
  fixer: reporter
};
//# sourceMappingURL=index.js.map