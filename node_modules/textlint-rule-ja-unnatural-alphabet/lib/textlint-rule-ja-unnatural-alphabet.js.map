{"version":3,"sources":["../src/textlint-rule-ja-unnatural-alphabet.js"],"names":["require","matchPatterns","matchCaptureGroupAll","regx","default","japaneseRegExp","alphabetPattern","unnaturalPattern","matchUnnaturalAlphabet","text","isIgnoredRange","matchPatternResults","actual","some","result","startIndex","index","endIndex","builtInCommonAllow","defaultOptions","report","context","options","Syntax","RuleError","getSource","allowAlphabets","allow","allowCommonCase","undefined","concat","Str","node","ignoreMatch","forEach","module","exports"],"mappings":"AAAA;AACA;;;;;;;;eAC0BA,QAAQ,iCAAR,C;IAAlBC,a,YAAAA,a;;AACR,IAAMC,uBAAuBF,QAAQ,aAAR,EAAuBE,oBAApD;AACA,IAAMC,OAAOH,QAAQ,MAAR,EAAgBI,OAA7B;AACA;AACA;AACA,IAAMC,iBAAiB,gHAAvB;AACA;AACA,IAAMC,kBAAkB,kBAAxB;AACA;;;;AAIA,IAAMC,mBAAmBJ,KAAK,GAAL,CAAnB,kBAA+BE,cAA/B,EAAgDC,eAAhD,EAAkED,cAAlE,CAAN;AACA;;;;;AAKA,IAAMG,yBAAyB,SAAzBA,sBAAyB,CAACC,IAAD,EAAU;AACrC,WAAOP,qBAAqBO,IAArB,EAA2BF,gBAA3B,CAAP;AACH,CAFD;;AAIA;;;;;;AAMA,IAAMG,iBAAiB,SAAjBA,cAAiB,CAACC,mBAAD,EAAsBC,MAAtB,EAAiC;AACpD,WAAOD,oBAAoBE,IAApB,CAAyB,kBAAU;AACtC,eAAOC,OAAOC,UAAP,IAAqBH,OAAOI,KAA5B,IAAqCJ,OAAOI,KAAP,IAAgBF,OAAOG,QAAnE;AACH,KAFM,CAAP;AAGH,CAJD;;AAMA;;;;AAIA,IAAMC,qBAAqB,CACvB,oBADuB,EAEvB,cAFuB,EAGvB,aAHuB,EAIvB,SAJuB,CAA3B;AAMA,IAAMC,iBAAiB;AACnB;AACA;AACA;AACA;AACA,aAAS,CACL,GADK,EACA,GADA,EACK,GADL,EACU,GADV,EACe,GADf,EACoB,GADpB,EAEL,SAFK,CALU;AASnB;AACA;AACA,uBAAmB;AAXA,CAAvB;AAaA,IAAMC,SAAS,gBAACC,OAAD,EAA2B;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AAAA,QAC9BC,MAD8B,GACWF,OADX,CAC9BE,MAD8B;AAAA,QACtBC,SADsB,GACWH,OADX,CACtBG,SADsB;AAAA,QACXJ,MADW,GACWC,OADX,CACXD,MADW;AAAA,QACHK,SADG,GACWJ,OADX,CACHI,SADG;;AAEtC,QAAMC,iBAAiBJ,QAAQK,KAAR,IAAiBR,eAAeQ,KAAvD;AACA,QAAMC,kBAAkBN,QAAQM,eAAR,KAA4BC,SAA5B,GAClBP,QAAQM,eADU,GAElBT,eAAeS,eAFrB;AAGA,QAAMD,QAAQC,kBAAkBF,eAAeI,MAAf,CAAsBZ,kBAAtB,CAAlB,GAA8DQ,cAA5E;AACA,+BACKH,OAAOQ,GADZ,YACiBC,IADjB,EACsB;AACd,YAAMvB,OAAOgB,UAAUO,IAAV,CAAb;AACA,YAAMC,cAAchC,cAAcQ,IAAd,EAAoBkB,KAApB,CAApB;AACAnB,+BAAuBC,IAAvB,EAA6ByB,OAA7B,CAAqC,UAACtB,MAAD,EAAY;AAAA,gBACrCH,IADqC,GACrBG,MADqB,CACrCH,IADqC;AAAA,gBAC/BO,KAD+B,GACrBJ,MADqB,CAC/BI,KAD+B;AAE7C;;AACA,gBAAIN,eAAeuB,WAAf,EAA4BrB,MAA5B,CAAJ,EAAyC;AACrC;AACH;AACDQ,mBAAOY,IAAP,EAAa,IAAIR,SAAJ,wGAAmCf,IAAnC,EAA2C;AACpDO;AADoD,aAA3C,CAAb;AAGH,SATD;AAUH,KAdL;AAgBH,CAvBD;;AAyBAmB,OAAOC,OAAP,GAAiBhB,MAAjB","file":"textlint-rule-ja-unnatural-alphabet.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nconst { matchPatterns } = require(\"@textlint/regexp-string-matcher\");\nconst matchCaptureGroupAll = require(\"match-index\").matchCaptureGroupAll;\nconst regx = require(\"regx\").default;\n// IME的に入力されそうな文字列\n// 日本語 + 記号\nconst japaneseRegExp = /(?:[々〇〻\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F]|[\\uFF00-\\uFFEF]|[\\uDC00-\\uDFFF]|[ぁ-んァ-ヶー。、・−])/;\n// 半角/全角のアルファベットの正規表現\nconst alphabetPattern = /([a-zA-Zａ-ｚＡ-Ｚ])/;\n/**\n * 不自然なアルファベットの正規表現\n * @type {RegExp}\n */\nconst unnaturalPattern = regx(\"g\")`${japaneseRegExp}${alphabetPattern}${japaneseRegExp}`;\n/***\n * 不自然なアルファベットのグループを返す\n * @param {string} text\n * @returns {MatchCaptureGroup[]}\n */\nconst matchUnnaturalAlphabet = (text) => {\n    return matchCaptureGroupAll(text, unnaturalPattern);\n};\n\n/**\n * if actual is in the `matchPatternResults`, return true\n * @param {matchPatternResult[]} matchPatternResults\n * @param {MatchCaptureGroup} actual\n * @returns {boolean}\n */\nconst isIgnoredRange = (matchPatternResults, actual) => {\n    return matchPatternResults.some(result => {\n        return result.startIndex <= actual.index && actual.index <= result.endIndex;\n    });\n};\n\n/**\n * ビルトインの無視するリスト\n * @type {[*]}\n */\nconst builtInCommonAllow = [\n    \"/[a-zA-Zａ-ｚＡ-Ｚ]言語/\",\n    \"/[x-zX-Z]座標/\",\n    \"/[x-zX-Z]軸/\",\n    \"/Eメール/i\"\n];\nconst defaultOptions = {\n    // 無視するアルファベット\n    // 例) [\"r\"]\n    // デフォルトでは母音とn、大文字のアルファベットを除外\n    // 単独の大文字のアルファベットは入力ミスでは発生しにくため\n    \"allow\": [\n        \"a\", \"i\", \"u\", \"e\", \"o\", \"n\",\n        \"/[A-Z]/\"\n    ],\n    // ビルトインの典型例を除外するかどうか\n    // 例) C言語\n    \"allowCommonCase\": true\n};\nconst report = (context, options = {}) => {\n    const { Syntax, RuleError, report, getSource } = context;\n    const allowAlphabets = options.allow || defaultOptions.allow;\n    const allowCommonCase = options.allowCommonCase !== undefined\n        ? options.allowCommonCase\n        : defaultOptions.allowCommonCase;\n    const allow = allowCommonCase ? allowAlphabets.concat(builtInCommonAllow) : allowAlphabets;\n    return {\n        [Syntax.Str](node){\n            const text = getSource(node);\n            const ignoreMatch = matchPatterns(text, allow);\n            matchUnnaturalAlphabet(text).forEach((actual) => {\n                const { text, index } = actual;\n                // 無視する単語を含んでいるなら無視\n                if (isIgnoredRange(ignoreMatch, actual)) {\n                    return;\n                }\n                report(node, new RuleError(`不自然なアルファベットがあります: ${text}`, {\n                    index\n                }));\n            });\n        }\n    }\n};\n\nmodule.exports = report;\n"]}