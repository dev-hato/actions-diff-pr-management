// MIT © 2017 azu
"use strict";

var _templateObject = _taggedTemplateLiteral(["", "", "", ""], ["", "", "", ""]);

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _require = require("@textlint/regexp-string-matcher"),
    matchPatterns = _require.matchPatterns;

var matchCaptureGroupAll = require("match-index").matchCaptureGroupAll;
var regx = require("regx").default;
// IME的に入力されそうな文字列
// 日本語 + 記号
var japaneseRegExp = /(?:[々〇〻\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F]|[\uFF00-\uFFEF]|[\uDC00-\uDFFF]|[ぁ-んァ-ヶー。、・−])/;
// 半角/全角のアルファベットの正規表現
var alphabetPattern = /([a-zA-Zａ-ｚＡ-Ｚ])/;
/**
 * 不自然なアルファベットの正規表現
 * @type {RegExp}
 */
var unnaturalPattern = regx("g")(_templateObject, japaneseRegExp, alphabetPattern, japaneseRegExp);
/***
 * 不自然なアルファベットのグループを返す
 * @param {string} text
 * @returns {MatchCaptureGroup[]}
 */
var matchUnnaturalAlphabet = function matchUnnaturalAlphabet(text) {
    return matchCaptureGroupAll(text, unnaturalPattern);
};

/**
 * if actual is in the `matchPatternResults`, return true
 * @param {matchPatternResult[]} matchPatternResults
 * @param {MatchCaptureGroup} actual
 * @returns {boolean}
 */
var isIgnoredRange = function isIgnoredRange(matchPatternResults, actual) {
    return matchPatternResults.some(function (result) {
        return result.startIndex <= actual.index && actual.index <= result.endIndex;
    });
};

/**
 * ビルトインの無視するリスト
 * @type {[*]}
 */
var builtInCommonAllow = ["/[a-zA-Zａ-ｚＡ-Ｚ]言語/", "/[x-zX-Z]座標/", "/[x-zX-Z]軸/", "/Eメール/i"];
var defaultOptions = {
    // 無視するアルファベット
    // 例) ["r"]
    // デフォルトでは母音とn、大文字のアルファベットを除外
    // 単独の大文字のアルファベットは入力ミスでは発生しにくため
    "allow": ["a", "i", "u", "e", "o", "n", "/[A-Z]/"],
    // ビルトインの典型例を除外するかどうか
    // 例) C言語
    "allowCommonCase": true
};
var report = function report(context) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        report = context.report,
        getSource = context.getSource;

    var allowAlphabets = options.allow || defaultOptions.allow;
    var allowCommonCase = options.allowCommonCase !== undefined ? options.allowCommonCase : defaultOptions.allowCommonCase;
    var allow = allowCommonCase ? allowAlphabets.concat(builtInCommonAllow) : allowAlphabets;
    return _defineProperty({}, Syntax.Str, function (node) {
        var text = getSource(node);
        var ignoreMatch = matchPatterns(text, allow);
        matchUnnaturalAlphabet(text).forEach(function (actual) {
            var text = actual.text,
                index = actual.index;
            // 無視する単語を含んでいるなら無視

            if (isIgnoredRange(ignoreMatch, actual)) {
                return;
            }
            report(node, new RuleError("\u4E0D\u81EA\u7136\u306A\u30A2\u30EB\u30D5\u30A1\u30D9\u30C3\u30C8\u304C\u3042\u308A\u307E\u3059: " + text, {
                index: index
            }));
        });
    });
};

module.exports = report;
//# sourceMappingURL=textlint-rule-ja-unnatural-alphabet.js.map