{"version":3,"sources":["../src/textlint-rule-ja-no-abusage.ts"],"names":["reporter","context","Syntax","RuleError","report","fixer","getSource","matcherList","tokenize","dictionaries","dictionaryList","prhLinter","prh","linter","prhStr","ruleContents","Str","node","text","then","results","forEach","result","expected","message","index","fix","replaceTextRange","range"],"mappings":"AAAA;AACA;;;;;;;AACA;;AAEA;;AAGA;;AAEA;;AAEA;;;;AADA;AAGA,IAAMA,QAA8B,GAAIC,OAAD,IAAa;AAChD,MAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,KAA7B;AAAoCC,IAAAA;AAApC,MAAkDL,OAAxD;AACA,MAAMM,WAAW,GAAG,kDAAsB;AACtCC,IAAAA,QAAQ,EAAEA,mBAD4B;AAEtCC,IAAAA,YAAY,EAAEC;AAFwB,GAAtB,CAApB;AAIA,MAAMC,SAAS,GAAGC,yBAAIC,MAAtB;AACA,MAAMC,MAAM,GAAGH,SAAS,CAACV,OAAD,EAAU;AAC9Bc,IAAAA,YAAY,EAAE;AADgB,GAAV,CAAxB;AAKA,SAAO;AACH,KAACb,MAAM,CAACc,GAAR,EAAaC,IAAb,EAAmB;AACf,UAAMC,IAAI,GAAGZ,SAAS,CAACW,IAAD,CAAtB;AACAH,MAAAA,MAAM,CAACZ,MAAM,CAACc,GAAR,CAAN,CAAmBC,IAAnB;AACA,aAAOV,WAAW,CAACW,IAAD,CAAX,CAAkBC,IAAlB,CAAuBC,OAAO,IAAI;AACrCA,QAAAA,OAAO,CAACC,OAAR,CAAgBC,MAAM,IAAI;AACtB,cAAIA,MAAM,CAACC,QAAX,EAAqB;AACjBnB,YAAAA,MAAM,CAACa,IAAD,EAAO,IAAId,SAAJ,CAAcmB,MAAM,CAACE,OAArB,EAA8B;AACvCC,cAAAA,KAAK,EAAEH,MAAM,CAACG,KADyB;AAEvCC,cAAAA,GAAG,EAAErB,KAAK,CAACsB,gBAAN,CAAuBL,MAAM,CAACM,KAA9B,EAAqCN,MAAM,CAACC,QAA5C;AAFkC,aAA9B,CAAP,CAAN;AAIH,WALD,MAKO;AACHnB,YAAAA,MAAM,CAACa,IAAD,EAAO,IAAId,SAAJ,CAAcmB,MAAM,CAACE,OAArB,EAA8B;AACvCC,cAAAA,KAAK,EAAEH,MAAM,CAACG;AADyB,aAA9B,CAAP,CAAN;AAGH;AAEJ,SAZD;AAaH,OAdM,CAAP;AAeH;;AAnBE,GAAP;AAqBH,CAjCD;;eAmCe;AACXZ,EAAAA,MAAM,EAAEb,QADG;AAEXK,EAAAA,KAAK,EAAEL;AAFI,C","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { createTextlintMatcher } from \"morpheme-match-textlint\"\n\nimport path from \"path\";\nimport fs from \"fs\";\n\nimport { tokenize } from \"kuromojin\";\nimport { TextlintRuleReporter } from \"@textlint/types\";\nimport dictionaryList from \"./dictionary\";\n// @ts-ignore\nimport prh from \"textlint-rule-prh\";\n\nconst reporter: TextlintRuleReporter = (context) => {\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    const matcherList = createTextlintMatcher({\n        tokenize: tokenize,\n        dictionaries: dictionaryList\n    });\n    const prhLinter = prh.linter;\n    const prhStr = prhLinter(context, {\n        ruleContents: [\n            fs.readFileSync(path.join(__dirname, \"..\", \"dict\", \"prh.yml\"), \"utf-8\")\n        ]\n    });\n    return {\n        [Syntax.Str](node) {\n            const text = getSource(node);\n            prhStr[Syntax.Str](node);\n            return matcherList(text).then(results => {\n                results.forEach(result => {\n                    if (result.expected) {\n                        report(node, new RuleError(result.message, {\n                            index: result.index,\n                            fix: fixer.replaceTextRange(result.range, result.expected)\n                        }));\n                    } else {\n                        report(node, new RuleError(result.message, {\n                            index: result.index\n                        }));\n                    }\n\n                });\n            });\n        }\n    }\n};\n\nexport default {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"textlint-rule-ja-no-abusage.js"}