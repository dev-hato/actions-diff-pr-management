{"version":3,"file":"2.1.5.js","names":["toZenkaku","string","moji","convert","toString","reporter","context","Syntax","RuleError","fixer","report","getSource","dictRule","prh","ruleContents","originalStrRule","Str","node","isUserWrittenNode","text","matches","matchCaptureGroupAll","forEach","match","index","fix","replaceTextRange","length","module","exports","linter"],"sources":["../src/2.1.5.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.5.カタカナ\nカタカナは「全角」で表記します。\n半角カタカナは特殊な用途を除いて、原則として使いません。\n\nHalfwidth Katakana variants（半角片仮名）\n\\uFF65-\\uFF9F とする\nhttp://www.asahi-net.or.jp/~ax2s-kmtn/ref/unicode/uff00.html\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport prh from \"textlint-rule-prh\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport moji from \"moji\";\n/**\n * 半角カタカナを全角カタカナに変換\n *\n * @param {String} str 変換したい文字列\n */\nfunction toZenkaku(string) {\n    return moji(string).convert(\"HK\", \"ZK\").toString();\n}\n\nfunction reporter(context) {\n    let { Syntax, RuleError, fixer, report, getSource } = context;\n    // 辞書ベースのカタカタ表記のチェックを行う\n    let dictRule = prh.fixer(context, {\n        ruleContents: [fs.readFileSync(path.join(__dirname, \"..\", \"dict\", \"2.1.5.yml\"), \"utf-8\")]\n    });\n    let originalStrRule = dictRule[Syntax.Str];\n    // 半角カタカナの使用をチェックする\n    dictRule[Syntax.Str] = function (node) {\n        originalStrRule(node);\n        if (!isUserWrittenNode(node, context)) {\n            return;\n        }\n        const text = getSource(node);\n        const matches = matchCaptureGroupAll(text, /([\\uFF65-\\uFF9F]+)/g);\n        matches.forEach((match) => {\n            const { index, text } = match;\n            report(\n                node,\n                new RuleError(\"カタカナは「全角」で表記します。\", {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + text.length], toZenkaku(text))\n                })\n            );\n        });\n    };\n    return dictRule;\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;EACvB,OAAO,IAAAC,aAAA,EAAKD,MAAL,EAAaE,OAAb,CAAqB,IAArB,EAA2B,IAA3B,EAAiCC,QAAjC,EAAP;AACH;;AAED,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;EACvB,IAAI;IAAEC,MAAF;IAAUC,SAAV;IAAqBC,KAArB;IAA4BC,MAA5B;IAAoCC;EAApC,IAAkDL,OAAtD,CADuB,CAEvB;;EACA,IAAIM,QAAQ,GAAGC,wBAAA,CAAIJ,KAAJ,CAAUH,OAAV,EAAmB;IAC9BQ,YAAY,EAAE;EADgB,CAAnB,CAAf;;EAGA,IAAIC,eAAe,GAAGH,QAAQ,CAACL,MAAM,CAACS,GAAR,CAA9B,CANuB,CAOvB;;EACAJ,QAAQ,CAACL,MAAM,CAACS,GAAR,CAAR,GAAuB,UAAUC,IAAV,EAAgB;IACnCF,eAAe,CAACE,IAAD,CAAf;;IACA,IAAI,CAAC,IAAAC,2BAAA,EAAkBD,IAAlB,EAAwBX,OAAxB,CAAL,EAAuC;MACnC;IACH;;IACD,IAAMa,IAAI,GAAGR,SAAS,CAACM,IAAD,CAAtB;IACA,IAAMG,OAAO,GAAG,IAAAC,gCAAA,EAAqBF,IAArB,EAA2B,qBAA3B,CAAhB;IACAC,OAAO,CAACE,OAAR,CAAiBC,KAAD,IAAW;MACvB,IAAM;QAAEC,KAAF;QAASL;MAAT,IAAkBI,KAAxB;MACAb,MAAM,CACFO,IADE,EAEF,IAAIT,SAAJ,CAAc,kBAAd,EAAkC;QAC9BgB,KAAK,EAAEA,KADuB;QAE9BC,GAAG,EAAEhB,KAAK,CAACiB,gBAAN,CAAuB,CAACF,KAAD,EAAQA,KAAK,GAAGL,IAAI,CAACQ,MAArB,CAAvB,EAAqD3B,SAAS,CAACmB,IAAD,CAA9D;MAFyB,CAAlC,CAFE,CAAN;IAOH,CATD;EAUH,CAjBD;;EAkBA,OAAOP,QAAP;AACH;;AACDgB,MAAM,CAACC,OAAP,GAAiB;EACbC,MAAM,EAAEzB,QADK;EAEbI,KAAK,EAAEJ;AAFM,CAAjB"}