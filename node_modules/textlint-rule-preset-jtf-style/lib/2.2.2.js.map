{"version":3,"file":"2.2.2.js","names":["matchToReplace","text","pattern","matchFn","match","exec","_num2ja","num","opt","sign","zero","point","zero2nine","ten2thou","suffices","replace","sig","RegExp","$1","int","$2","fract","$3","seisuu","shins","i","length","push","substring","suffix","shin","sens","keta","digits","split","reverse","j","digit","flg","k","suuji","result","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","isUserWrittenNode","toNumber","matchedString","index","expected","all","ja2num","ruleError","fix","replaceTextRange","toKanNumber","with_arabic","ignoreWhenMatched","ignorePatterns","some","p","test","module","exports","linter"],"sources":["../src/2.2.2.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport ja2num from \"japanese-numerals-to-number\";\n\nfunction matchToReplace(text, pattern, matchFn) {\n    var match = pattern.exec(text);\n    if (match) {\n        return matchFn(text, pattern, match);\n    }\n    return null;\n}\n\n// http://www.drk7.jp/MT/archives/001587.html\nfunction _num2ja(num, opt) {\n    var sign = {\n        \"+\": \"\",\n        \"-\": \"−\"\n    };\n    var zero = \"零\";\n    var point = \"点\";\n    var zero2nine = [\"〇\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"];\n    var ten2thou = [\"\", \"十\", \"百\", \"千\"];\n    var suffices = [\n        \"\",\n        \"万\",\n        \"億\",\n        \"兆\",\n        \"京\",\n        \"垓\",\n        \"禾予\",\n        \"穣\",\n        \"溝\",\n        \"澗\",\n        \"正\",\n        \"載,\",\n        \"極\",\n        \"恒河沙\",\n        \"阿僧祇\",\n        \"那由他\",\n        \"不可思議\",\n        \"無量大数\"\n    ];\n\n    num = num.replace(/,/g, \"\");\n    num.match(/([+-])?(\\d+)(?:\\.(\\d+))?/i);\n    var sig = RegExp.$1;\n    var int = RegExp.$2;\n    var fract = RegExp.$3;\n    var seisuu = \"\";\n    var shins = [];\n\n    for (let i = int.length; i > 0; i -= 4) {\n        shins.push(int.substring(i, i - 4));\n    }\n    if (shins.length >= 18) {\n        return suffices[17];\n    }\n\n    var suffix = 0;\n    for (let i = 0; i < shins.length; i++) {\n        var shin = shins[i];\n        if (shin == \"0000\") {\n            suffix++;\n            continue;\n        }\n        var sens = \"\";\n        var keta = 0;\n        var digits = shin.split(\"\").reverse();\n        for (var j = 0; j < digits.length; j++) {\n            var digit = digits[j];\n\n            if (opt[\"fixed4\"] || opt[\"with_arabic\"]) {\n                if (opt[\"with_arabic\"]) {\n                    var flg = 0;\n                    // 余分な 0 を削除する\n                    if (digit == \"0\") {\n                        for (var k = j + 1; k < digits.length; k++) {\n                            flg += digits[k] == \"0\" ? 0 : 1;\n                        }\n                        if (flg == 0) {\n                            digit = \"\";\n                        }\n                    }\n                    sens = digit + sens;\n                } else {\n                    sens = zero2nine[digit] + sens;\n                }\n            } else {\n                var suuji = digit == 1 && !opt[\"p_one\"] && keta > 0 ? \"\" : zero2nine[digit];\n                if (digit != 0) {\n                    sens = suuji + ten2thou[keta] + sens;\n                }\n            }\n            keta++;\n        }\n        seisuu = sens + suffices[suffix++] + seisuu;\n    }\n    var result = (sign[sig] || \"\") + seisuu;\n    result = result || zero;\n    if (fract) {\n        result = result + point + fract;\n    }\n    return result;\n}\n\nfunction reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            // 漢数字 -> 算用数字\n            const toNumber = (text, pattern, match) => {\n                const matchedString = match[0];\n                const index = match.index;\n                const expected = matchedString.replace(pattern, function (all, match) {\n                    return all.replace(match, ja2num(match));\n                });\n                const ruleError = new RuleError(\n                    `${matchedString} => ${expected}\n数量を表現し、数を数えられるものは算用数字を使用します。任意の数に置き換えても通用する語句がこれに該当します。`,\n                    {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + matchedString.length], expected)\n                    }\n                );\n                report(node, ruleError);\n            };\n\n            /**\n             * 算用数字 -> 漢数字\n             * @param {string} text\n             * @param {RegExp} pattern\n             * @param {*[]} match\n             */\n            const toKanNumber = (text, pattern, match) => {\n                const matchedString = match[0];\n                const expected = matchedString.replace(pattern, function (all, match) {\n                    return all.replace(match, _num2ja(match, { with_arabic: false }));\n                });\n                const index = match.index;\n                report(\n                    node,\n                    new RuleError(\n                        `${matchedString} => ${expected}\n慣用的表現、熟語、概数、固有名詞、副詞など、漢数字を使用することが一般的な語句では漢数字を使います。`,\n                        {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + matchedString.length], expected)\n                        }\n                    )\n                );\n            };\n\n            // ignorePatternにマッチしたらmatchFnを呼ばないようにする(エラーを無視する)\n            const ignoreWhenMatched = (ignorePatterns, matchFn) => {\n                return (text, pattern, match) => {\n                    if (ignorePatterns.some((p) => p.test(text))) {\n                        return null;\n                    } else {\n                        return matchFn(text, pattern, match);\n                    }\n                };\n            };\n\n            // ＊数えられる数字は算用数字を使う\n            // 数十万、数百億にマッチしないように\"数\"という文字から始まるものは除外\n            // https://github.com/textlint-ja/textlint-rule-preset-jtf-style/pull/23\n            matchToReplace(\n                text,\n                /([一二三四五六七八九十壱弐参拾百〇]+)[兆億万]/g,\n                ignoreWhenMatched([/(数|何)([一二三四五六七八九十壱弐参拾百〇]+)[兆億万]/g], toNumber)\n            );\n            matchToReplace(\n                text,\n                /([一二三四五六七八九十壱弐参拾百〇]+)つ/g,\n                ignoreWhenMatched(\n                    [\n                        /[一二三四五六七八九]つ(返事|子|ひとつ|星|編|葉|橋|と[無な]い|に一つ)/g,\n                        /(ただ|唯|[女男]手|穴|瓜|馬鹿の)[一二]つ/g\n                    ],\n                    toNumber\n                )\n            );\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)回/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)か月/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)番目/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)進法/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)次元/g, toNumber);\n            matchToReplace(text, /第([一二三四五六七八九十壱弐参拾百〇]+)章/g, toNumber);\n            matchToReplace(text, /第([一二三四五六七八九十壱弐参拾百〇]+)節/g, toNumber);\n            // ＊漢数字を使う\n            // 慣用的表現、熟語、概数、固有名詞、副詞など、漢数字を使用することが一般的な語句では漢数字を使います。\n            matchToReplace(text, /世界(1)/g, toKanNumber);\n            matchToReplace(text, /(1)時的/g, toKanNumber);\n            matchToReplace(text, /(1)部分/g, toKanNumber);\n            matchToReplace(text, /第(3)者/g, toKanNumber);\n            // 1種 -> 一種: 11種類などにはマッチしない\n            matchToReplace(text, /[^\\d](1)種(?!類)/g, toKanNumber);\n            matchToReplace(text, /(1)部の/g, toKanNumber);\n            matchToReplace(text, /(1)番に/g, toKanNumber);\n            matchToReplace(text, /数(10+)倍/g, toKanNumber);\n            matchToReplace(text, /数(10+)[兆億万]/g, toKanNumber);\n            matchToReplace(text, /数(10+)年/g, toKanNumber);\n            matchToReplace(text, /([0-9]+)次関数/g, toKanNumber);\n            matchToReplace(text, /(5)大陸/g, toKanNumber);\n        }\n    };\n}\n\n// 2.2.2. 算用数字と漢数字の使い分け\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"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"}