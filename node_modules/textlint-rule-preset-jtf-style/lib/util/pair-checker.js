// LICENSE : MIT
"use strict";
/**
 * 「と」といったペアがちゃんと閉じられているかをチェックします
 * @param {object} context
 * @param {string} left
 * @param {string} right
 * @returns {object}
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkPair = checkPair;

var _assert = _interopRequireDefault(require("assert"));

var _textlintRuleHelper = require("textlint-rule-helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var flat = array => {
  return [].concat.apply([], array);
};

function checkPair(context, _ref) {
  var {
    left,
    right
  } = _ref;
  (0, _assert.default)(left);
  (0, _assert.default)(right);
  var {
    Syntax,
    RuleError,
    report,
    getSource
  } = context;
  var helper = new _textlintRuleHelper.RuleHelper(context);
  var isInParagraph = false;
  var currentStrInParagraph = [];
  /**
   * `Str` nodeの配列を受け取り、pairが見つからないnodeを返す
   * @param {Object} currentStrInParagraph
   * @returns {{node, index}[]}
   */

  var findAllSymbolLocations = (symbol, text) => {
    var index = 0;
    var symbolLocations = [];

    while (index < text.length) {
      index = text.indexOf(symbol, index);
      if (index < 0) break;
      symbolLocations.push({
        index,
        symbol
      });
      index += 1;
    }

    return symbolLocations;
  };

  var foundMissingPairNodes = currentStrInParagraph => {
    var matchParentheses = flat(currentStrInParagraph.map(node => {
      var text = getSource(node);
      var leftSymbolLocations = findAllSymbolLocations(left, text);
      var rightSymbolLocations = left !== right ? findAllSymbolLocations(right, text) : [];
      var allSymbolLocations = [...leftSymbolLocations, ...rightSymbolLocations].sort((a, b) => a.index - b.index);
      return allSymbolLocations.map(loc => _objectSpread(_objectSpread({}, loc), {}, {
        node
      }));
    }));

    if (left === right) {
      var isCompletedParentheses = matchParentheses.length % 2 == 0;

      if (isCompletedParentheses) {
        return [];
      } else {
        return [matchParentheses[matchParentheses.length - 1]];
      }
    } else {
      var lastUnmatchParences = [];

      while (matchParentheses.length > 0) {
        var item = matchParentheses.shift();

        if (item.symbol == left) {
          lastUnmatchParences.push(item);
        } else {
          // right
          var last = lastUnmatchParences.pop();

          if (last) {
            if (last.symbol == right) {
              lastUnmatchParences.push(last);
              lastUnmatchParences.push(item);
            }
          } else {
            lastUnmatchParences.push(item);
          }
        }
      }

      return lastUnmatchParences;
    }
  };

  return {
    [Syntax.Paragraph](node) {
      if (helper.isChildNode(node, [Syntax.BlockQuote])) {
        return;
      }

      currentStrInParagraph = [];
      isInParagraph = true;
    },

    [Syntax.Str](node) {
      if (!isInParagraph) {
        return;
      }

      currentStrInParagraph.push(node);
    },

    ["".concat(Syntax.Paragraph, ":exit")]() {
      var missingPairList = foundMissingPairNodes(currentStrInParagraph); // 探索おわり

      isInParagraph = false; // 全ての対が見つかったなら配列は空になる

      if (missingPairList.length === 0) {
        return;
      }

      missingPairList.forEach(_ref2 => {
        var {
          index,
          node,
          symbol
        } = _ref2;
        var message = symbol === left ? "".concat(left, "\u306E\u5BFE\u3068\u306A\u308B").concat(right, "\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002").concat(left).concat(right) : "".concat(right, "\u306E\u5BFE\u3068\u306A\u308B").concat(left, "\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002").concat(left).concat(right);
        report(node, new RuleError(message, {
          index
        }));
      });
    }

  };
}
//# sourceMappingURL=pair-checker.js.map