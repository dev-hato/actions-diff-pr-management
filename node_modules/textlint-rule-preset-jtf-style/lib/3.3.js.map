{"version":3,"file":"3.3.js","names":["brackets","leftBrackets","map","bracket","RegExp","rightBrackets","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","isUserWrittenNode","text","forEach","pattern","matchCaptureGroupAll","match","index","fix","replaceTextRange","module","exports","linter"],"sources":["../src/3.3.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n3.3. かっこ類と隣接する文字の間のスペースの有無\nかっこの外側、内側ともにスペースを入れません。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\n\nconst brackets = [\"\\\\[\", \"\\\\]\", \"（\", \"）\", \"［\", \"］\", \"「\", \"」\", \"『\", \"』\"];\n\nconst leftBrackets = brackets.map((bracket) => {\n    return new RegExp(\"([ 　])\" + bracket, \"g\");\n});\nconst rightBrackets = brackets.map((bracket) => {\n    return new RegExp(bracket + \"([ 　])\", \"g\");\n});\nfunction reporter(context) {\n    let { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            // 左にスペース\n            leftBrackets.forEach((pattern) => {\n                matchCaptureGroupAll(text, pattern).forEach((match) => {\n                    const { index } = match;\n                    report(\n                        node,\n                        new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + 1], \"\")\n                        })\n                    );\n                });\n            });\n            // 右にスペース\n            rightBrackets.forEach((pattern) => {\n                matchCaptureGroupAll(text, pattern).forEach((match) => {\n                    const { index, text } = match;\n                    report(\n                        node,\n                        new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + 1], \"\")\n                        })\n                    );\n                });\n            });\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,EAAkD,GAAlD,CAAjB;AAEA,IAAMC,YAAY,GAAGD,QAAQ,CAACE,GAAT,CAAcC,OAAD,IAAa;EAC3C,OAAO,IAAIC,MAAJ,CAAW,WAAWD,OAAtB,EAA+B,GAA/B,CAAP;AACH,CAFoB,CAArB;AAGA,IAAME,aAAa,GAAGL,QAAQ,CAACE,GAAT,CAAcC,OAAD,IAAa;EAC5C,OAAO,IAAIC,MAAJ,CAAWD,OAAO,GAAG,QAArB,EAA+B,GAA/B,CAAP;AACH,CAFqB,CAAtB;;AAGA,SAASG,QAAT,CAAkBC,OAAlB,EAA2B;EACvB,IAAI;IAAEC,MAAF;IAAUC,SAAV;IAAqBC,MAArB;IAA6BC,KAA7B;IAAoCC;EAApC,IAAkDL,OAAtD;EACA,OAAO;IACH,CAACC,MAAM,CAACK,GAAR,EAAaC,IAAb,EAAmB;MACf,IAAI,CAAC,IAAAC,2BAAA,EAAkBD,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;QACnC;MACH;;MACD,IAAMS,IAAI,GAAGJ,SAAS,CAACE,IAAD,CAAtB,CAJe,CAKf;;MACAb,YAAY,CAACgB,OAAb,CAAsBC,OAAD,IAAa;QAC9B,IAAAC,gCAAA,EAAqBH,IAArB,EAA2BE,OAA3B,EAAoCD,OAApC,CAA6CG,KAAD,IAAW;UACnD,IAAM;YAAEC;UAAF,IAAYD,KAAlB;UACAV,MAAM,CACFI,IADE,EAEF,IAAIL,SAAJ,CAAc,yBAAd,EAAyC;YACrCY,KAAK,EAAEA,KAD8B;YAErCC,GAAG,EAAEX,KAAK,CAACY,gBAAN,CAAuB,CAACF,KAAD,EAAQA,KAAK,GAAG,CAAhB,CAAvB,EAA2C,EAA3C;UAFgC,CAAzC,CAFE,CAAN;QAOH,CATD;MAUH,CAXD,EANe,CAkBf;;MACAhB,aAAa,CAACY,OAAd,CAAuBC,OAAD,IAAa;QAC/B,IAAAC,gCAAA,EAAqBH,IAArB,EAA2BE,OAA3B,EAAoCD,OAApC,CAA6CG,KAAD,IAAW;UACnD,IAAM;YAAEC,KAAF;YAASL;UAAT,IAAkBI,KAAxB;UACAV,MAAM,CACFI,IADE,EAEF,IAAIL,SAAJ,CAAc,yBAAd,EAAyC;YACrCY,KAAK,EAAEA,KAD8B;YAErCC,GAAG,EAAEX,KAAK,CAACY,gBAAN,CAAuB,CAACF,KAAD,EAAQA,KAAK,GAAG,CAAhB,CAAvB,EAA2C,EAA3C;UAFgC,CAAzC,CAFE,CAAN;QAOH,CATD;MAUH,CAXD;IAYH;;EAhCE,CAAP;AAkCH;;AACDG,MAAM,CAACC,OAAP,GAAiB;EACbC,MAAM,EAAEpB,QADK;EAEbK,KAAK,EAAEL;AAFM,CAAjB"}