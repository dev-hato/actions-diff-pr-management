{"version":3,"sources":["../src/analyze.js"],"names":[],"mappings":";AACA;;;;;;QAwDgB;QAgBA;AAtEhB,IAAM,gBAAgB,iBAAhB;AACN,IAAM,oBAAoB,uDAApB;;AAEN,IAAM,mBAAmB,sBAAnB;AACN,IAAM,uBAAuB,oCAAvB;;;;;;;AAON,SAAS,iBAAT,CAA2B,IAA3B,EAAiC,GAAjC,EAAsC;AAClC,QAAI,UAAU,EAAV,CAD8B;AAElC,QAAI,oBAAJ,CAFkC;AAGlC,WAAO,CAAC,WAAW,IAAI,IAAJ,CAAS,IAAT,CAAX,CAAD,IAA+B,IAA/B,EAAqC;AACxC,gBAAQ,IAAR,CAAa;AACT,mBAAO,SAAS,CAAT,CAAP;AACA,wBAAY,CAAZ;AACA,yBAAa,IAAI,SAAJ,GAAgB,SAAS,CAAT,EAAY,MAAZ;SAHjC,EADwC;KAA5C;AAOA,WAAO,OAAP,CAVkC;CAAtC;;;;;;;AAkBA,SAAS,oBAAT,CAA8B,IAA9B,EAAoC,GAApC,EAAyC;AACrC,QAAI,QAAQ,KAAK,KAAL,CAAW,2BAAX,CAAR,CADiC;AAErC,QAAI,UAAU,EAAV,CAFiC;AAGrC,UAAM,OAAN,CAAc,UAAC,IAAD,EAAO,KAAP,EAAiB;AAC3B,YAAI,QAAQ,KAAK,KAAL,CAAW,GAAX,CAAR,CADuB;AAE3B,YAAI,CAAC,KAAD,EAAQ;AACR,mBADQ;SAAZ;;AAF2B,eAM3B,CAAQ,IAAR,CAAa;AACT,mBAAO,MAAM,CAAN,CAAP;AACA,wBAAY,IAAI,KAAJ;AACZ,yBAAa,MAAM,KAAN;SAHjB,EAN2B;KAAjB,CAAd,CAHqC;AAerC,WAAO,OAAP,CAfqC;CAAzC;;;;;;;;;AAyBO,SAAS,eAAT,CAAyB,IAAzB,EAAqE;QAAtC,gEAAU,EAAC,oBAAoB,IAApB,kBAA2B;QACnE,qBAAsB,QAAtB,mBADmE;;AAExE,QAAI,CAAC,kBAAD,EAAqB;AACrB,eAAO,qBAAqB,IAArB,EAA2B,oBAA3B,CAAP,CADqB;KAAzB;AAGA,QAAI,cAAc,kBAAkB,IAAlB,EAAwB,gBAAxB,CAAd,CALoE;AAMxE,QAAI,iBAAiB,qBAAqB,IAArB,EAA2B,oBAA3B,CAAjB,CANoE;AAOxE,WAAO,YAAY,MAAZ,CAAmB,cAAnB,CAAP,CAPwE;CAArE;;;;;;;;AAgBA,SAAS,YAAT,CAAsB,IAAtB,EAAkE;QAAtC,gEAAU,EAAC,oBAAoB,IAApB,kBAA2B;QAChE,qBAAsB,QAAtB,mBADgE;;AAErE,QAAI,CAAC,kBAAD,EAAqB;AACrB,eAAO,qBAAqB,IAArB,EAA2B,iBAA3B,CAAP,CADqB;KAAzB;AAGA,QAAI,WAAW,kBAAkB,IAAlB,EAAwB,aAAxB,CAAX,CALiE;AAMrE,QAAI,cAAc,qBAAqB,IAArB,EAA2B,iBAA3B,CAAd,CANiE;AAOrE,WAAO,SAAS,MAAT,CAAgB,WAAhB,CAAP,CAPqE;CAAlE","file":"analyze.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n// This RegExp are based of https://github.com/recruit-tech/redpen/blob/master/redpen-core/src/main/java/cc/redpen/validator/sentence/JapaneseStyleValidator.java\nconst DEARU_PATTERN = /のだが|ないかと|であるから/g;\nconst DEARU_END_PATTERN = /(だ|である|った|ではない｜ないか|しろ|しなさい|いただきたい|いただく|ならない|あろう|られる)。/;\n\nconst DESUMASU_PATTERN = /でしたが|でしたので|ですので|ですが/g;\nconst DESUMASU_END_PATTERN = /(です|ます|ました|ません|ですね|でしょうか|ください|ませ)。/;\n/**\n *\n * @param text\n * @param reg\n * @returns {{value:string, columnIndex: number, lineNumber:number}}[]\n */\nfunction countMatchContent(text, reg) {\n    let matches = [];\n    let tmpMatch;\n    while ((tmpMatch = reg.exec(text)) != null) {\n        matches.push({\n            value: tmpMatch[0],\n            lineNumber: 1,\n            columnIndex: reg.lastIndex - tmpMatch[0].length\n        });\n    }\n    return matches;\n}\n/**\n *\n * @param text\n * @param reg\n * @returns {{value:string, columnIndex: number, lineNumber:number}}[]\n */\nfunction countMatchContentEnd(text, reg) {\n    let lines = text.split(/\\r\\n|\\r|\\n|\\u2028|\\u2029/g);\n    let matches = [];\n    lines.forEach((line, index) => {\n        var match = line.match(reg);\n        if (!match) {\n            return;\n        }\n        // adjust line number\n        matches.push({\n            value: match[0],\n            lineNumber: 1 + index,\n            columnIndex: match.index\n        });\n    });\n    return matches;\n}\n/**\n * `text` の敬体(ですます調)について解析します\n * @param {string} text\n * @param {object} options\n * @param {boolean} options.analyzeConjunction 接続詞を解析するかどうか default: true\n * @returns {{value:string, columnIndex: number, lineNumber:number}}[]\n */\n\nexport function analyzeDesumasu(text, options = {analyzeConjunction: true}) {\n    let {analyzeConjunction} = options;\n    if (!analyzeConjunction) {\n        return countMatchContentEnd(text, DESUMASU_END_PATTERN);\n    }\n    let retDesumasu = countMatchContent(text, DESUMASU_PATTERN);\n    let retDesumasuEnd = countMatchContentEnd(text, DESUMASU_END_PATTERN);\n    return retDesumasu.concat(retDesumasuEnd)\n}\n/**\n * `text` の常体(である調)について解析します\n * @param {string} text\n * @param {object} options\n * @param {boolean} options.analyzeConjunction 接続詞を解析するかどうか default: true\n * @returns {{value:string, columnIndex: number, lineNumber:number}}[]\n */\nexport function analyzeDearu(text, options = {analyzeConjunction: true}) {\n    let {analyzeConjunction} = options;\n    if (!analyzeConjunction) {\n        return countMatchContentEnd(text, DEARU_END_PATTERN);\n    }\n    let retDearu = countMatchContent(text, DEARU_PATTERN);\n    let retDearuEnd = countMatchContentEnd(text, DEARU_END_PATTERN);\n    return retDearu.concat(retDearuEnd)\n}\n"]}