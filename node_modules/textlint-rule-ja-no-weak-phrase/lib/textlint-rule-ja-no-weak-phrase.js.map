{"version":3,"sources":["../src/textlint-rule-ja-no-weak-phrase.js"],"names":["matchAll","dictionaryList","context","Syntax","RuleError","report","getSource","Str","node","text","then","currentTokens","matchResults","forEach","matchResult","firstToken","tokens","lastToken","length","firstWordIndex","Math","max","word_position","message","dict","index"],"mappings":"AAAA;AACA;;;;;;;AACA;;AACA;;AACA;;;;AACA,IAAMA,QAAQ,GAAG,qCAAcC,aAAd,CAAjB;;AACe,kBAAUC,OAAV,EAAmB;AAC9B,MAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA;AAA7B,MAA2CJ,OAAjD;AACA,SAAO;AACH,KAACC,MAAM,CAACI,GAAR,EAAaC,IAAb,EAAmB;AACf,UAAMC,IAAI,GAAGH,SAAS,CAACE,IAAD,CAAtB;AACA,aAAO,yBAASC,IAAT,EAAeC,IAAf,CAAoBC,aAAa,IAAI;AACxC;AAChB;AACA;AACgB,YAAMC,YAAY,GAAGZ,QAAQ,CAACW,aAAD,CAA7B;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqBC,WAAW,IAAI;AAChC,cAAMC,UAAU,GAAGD,WAAW,CAACE,MAAZ,CAAmB,CAAnB,CAAnB;AACA,cAAMC,SAAS,GAAGH,WAAW,CAACE,MAAZ,CAAmBF,WAAW,CAACE,MAAZ,CAAmBE,MAAnB,GAA4B,CAA/C,CAAlB;AACA,cAAMC,cAAc,GAAGC,IAAI,CAACC,GAAL,CAASN,UAAU,CAACO,aAAX,GAA2B,CAApC,EAAuC,CAAvC,CAAvB,CAHgC,CAIhC;;AACA,cAAMC,OAAO,GAAGT,WAAW,CAACU,IAAZ,CAAiBD,OAAjC;AACAlB,UAAAA,MAAM,CAACG,IAAD,EAAO,IAAIJ,SAAJ,CAAcmB,OAAd,EAAuB;AAChCE,YAAAA,KAAK,EAAEN;AADyB,WAAvB,CAAP,CAAN;AAGH,SATD;AAUH,OAfM,CAAP;AAgBH;;AAnBE,GAAP;AAqBH;;AAAA","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { tokenize } from \"kuromojin\";\nimport dictionaryList from \"./dict\";\nimport { createMatcher } from \"morpheme-match-all\";\nconst matchAll = createMatcher(dictionaryList);\nexport default function (context) {\n    const { Syntax, RuleError, report, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            const text = getSource(node);\n            return tokenize(text).then(currentTokens => {\n                /**\n                 * @type {MatchResult[]}\n                 */\n                const matchResults = matchAll(currentTokens);\n                matchResults.forEach(matchResult => {\n                    const firstToken = matchResult.tokens[0];\n                    const lastToken = matchResult.tokens[matchResult.tokens.length - 1];\n                    const firstWordIndex = Math.max(firstToken.word_position - 1, 0);\n                    // replace $1\n                    const message = matchResult.dict.message;\n                    report(node, new RuleError(message, {\n                        index: firstWordIndex\n                    }));\n                });\n            });\n        }\n    }\n};\n"],"file":"textlint-rule-ja-no-weak-phrase.js"}