// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _kuromojin = require("kuromojin");

var _dict = _interopRequireDefault(require("./dict"));

var _morphemeMatchAll = require("morpheme-match-all");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var matchAll = (0, _morphemeMatchAll.createMatcher)(_dict.default);

function _default(context) {
  var {
    Syntax,
    RuleError,
    report,
    getSource
  } = context;
  return {
    [Syntax.Str](node) {
      var text = getSource(node);
      return (0, _kuromojin.tokenize)(text).then(currentTokens => {
        /**
         * @type {MatchResult[]}
         */
        var matchResults = matchAll(currentTokens);
        matchResults.forEach(matchResult => {
          var firstToken = matchResult.tokens[0];
          var lastToken = matchResult.tokens[matchResult.tokens.length - 1];
          var firstWordIndex = Math.max(firstToken.word_position - 1, 0); // replace $1

          var message = matchResult.dict.message;
          report(node, new RuleError(message, {
            index: firstWordIndex
          }));
        });
      });
    }

  };
}

;
//# sourceMappingURL=textlint-rule-ja-no-weak-phrase.js.map