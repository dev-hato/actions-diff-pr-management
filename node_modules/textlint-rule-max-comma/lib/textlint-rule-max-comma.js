// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _unistUtilFilter = _interopRequireDefault(require("unist-util-filter"));

var _sentenceSplitter = require("sentence-splitter");

var _textlintUtilToString = require("textlint-util-to-string");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function countOfComma(text) {
  return text.split(",").length - 1;
}

var defaultOptions = {
  // default: allowed command count
  max: 4
};

function _default(context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  var maxComma = options.max || defaultOptions.max;
  var {
    Syntax,
    RuleError,
    report,
    getSource
  } = context;
  return {
    [Syntax.Paragraph](node) {
      var _paragraphSentenceWit, _paragraphSentenceWit2;

      var paragraphSentence = (0, _sentenceSplitter.splitAST)(node); // Remove Code node for avoiding false-positive in `CODE`

      var paragraphSentenceWithoutNode = (0, _unistUtilFilter.default)(paragraphSentence, node => {
        return node.type !== Syntax.Code;
      });

      if (!paragraphSentenceWithoutNode) {
        return;
      } // This `sum(0,1,2,3,4,5,6,7,8,9,10)` is ok
      // â†’ This  is ok


      var sentencesWithoutCode = (_paragraphSentenceWit = paragraphSentenceWithoutNode === null || paragraphSentenceWithoutNode === void 0 ? void 0 : (_paragraphSentenceWit2 = paragraphSentenceWithoutNode.children) === null || _paragraphSentenceWit2 === void 0 ? void 0 : _paragraphSentenceWit2.filter(node => node.type === _sentenceSplitter.Syntax.Sentence)) !== null && _paragraphSentenceWit !== void 0 ? _paragraphSentenceWit : [];
      sentencesWithoutCode.forEach(sentence => {
        var source = new _textlintUtilToString.StringSource(sentence);
        var sentenceValue = source.toString();
        var count = countOfComma(sentenceValue);

        if (count > maxComma) {
          var lastCommandIndex = sentenceValue.lastIndexOf(",");
          report(node, new RuleError("This sentence exceeds the maximum count of comma. Maximum is ".concat(maxComma, "."), {
            index: source.originalIndexFromIndex(lastCommandIndex)
          }));
        }
      });
    }

  };
}
//# sourceMappingURL=textlint-rule-max-comma.js.map