{"version":3,"sources":["../src/textlint-rule-max-comma.js"],"names":["countOfComma","text","split","length","defaultOptions","max","context","options","maxComma","Syntax","RuleError","report","getSource","Paragraph","node","paragraphSentence","paragraphSentenceWithoutNode","type","Code","sentencesWithoutCode","children","filter","SentenceSyntax","Sentence","forEach","sentence","source","StringSource","sentenceValue","toString","count","lastCommandIndex","lastIndexOf","index","originalIndexFromIndex"],"mappings":"AAAA;AACA;;;;;;;AACA;;AACA;;AACA;;;;AAEA,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,SAAOA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgBC,MAAhB,GAAyB,CAAhC;AACH;;AAED,IAAMC,cAAc,GAAG;AACnB;AACAC,EAAAA,GAAG,EAAE;AAFc,CAAvB;;AAIe,kBAAUC,OAAV,EAA6C;AAAA,MAA1BC,OAA0B,uEAAhBH,cAAgB;AACxD,MAAMI,QAAQ,GAAGD,OAAO,CAACF,GAAR,IAAeD,cAAc,CAACC,GAA/C;AACA,MAAM;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA;AAA7B,MAA2CN,OAAjD;AACA,SAAO;AACH,KAACG,MAAM,CAACI,SAAR,EAAmBC,IAAnB,EAAyB;AAAA;;AACrB,UAAMC,iBAAiB,GAAG,gCAASD,IAAT,CAA1B,CADqB,CAErB;;AACA,UAAME,4BAA4B,GAAG,8BAAOD,iBAAP,EAA2BD,IAAD,IAAU;AACrE,eAAOA,IAAI,CAACG,IAAL,KAAcR,MAAM,CAACS,IAA5B;AACH,OAFoC,CAArC;;AAGA,UAAI,CAACF,4BAAL,EAAmC;AAC/B;AACH,OARoB,CASrB;AACA;;;AACA,UAAMG,oBAAoB,4BAAGH,4BAAH,aAAGA,4BAAH,iDAAGA,4BAA4B,CACnDI,QADoB,2DAAG,uBAEvBC,MAFuB,CAEhBP,IAAI,IAAIA,IAAI,CAACG,IAAL,KAAcK,yBAAeC,QAFrB,CAAH,yEAEqC,EAF/D;AAGAJ,MAAAA,oBAAoB,CAACK,OAArB,CAA6BC,QAAQ,IAAI;AACrC,YAAMC,MAAM,GAAG,IAAIC,kCAAJ,CAAiBF,QAAjB,CAAf;AACA,YAAMG,aAAa,GAAGF,MAAM,CAACG,QAAP,EAAtB;AACA,YAAMC,KAAK,GAAG9B,YAAY,CAAC4B,aAAD,CAA1B;;AACA,YAAIE,KAAK,GAAGtB,QAAZ,EAAsB;AAClB,cAAMuB,gBAAgB,GAAGH,aAAa,CAACI,WAAd,CAA0B,GAA1B,CAAzB;AACArB,UAAAA,MAAM,CAACG,IAAD,EAAO,IAAIJ,SAAJ,wEAA8EF,QAA9E,QAA2F;AACpGyB,YAAAA,KAAK,EAAEP,MAAM,CAACQ,sBAAP,CAA8BH,gBAA9B;AAD6F,WAA3F,CAAP,CAAN;AAGH;AACJ,OAVD;AAWH;;AA1BE,GAAP;AA4BH","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport filter from \"unist-util-filter\";\nimport { splitAST, Syntax as SentenceSyntax } from \"sentence-splitter\";\nimport { StringSource } from \"textlint-util-to-string\"\n\nfunction countOfComma(text) {\n    return text.split(\",\").length - 1;\n}\n\nconst defaultOptions = {\n    // default: allowed command count\n    max: 4\n};\nexport default function (context, options = defaultOptions) {\n    const maxComma = options.max || defaultOptions.max;\n    const { Syntax, RuleError, report, getSource } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            const paragraphSentence = splitAST(node)\n            // Remove Code node for avoiding false-positive in `CODE`\n            const paragraphSentenceWithoutNode = filter(paragraphSentence, (node) => {\n                return node.type !== Syntax.Code;\n            });\n            if (!paragraphSentenceWithoutNode) {\n                return;\n            }\n            // This `sum(0,1,2,3,4,5,6,7,8,9,10)` is ok\n            // â†’ This  is ok\n            const sentencesWithoutCode = paragraphSentenceWithoutNode\n                ?.children\n                ?.filter(node => node.type === SentenceSyntax.Sentence) ?? [];\n            sentencesWithoutCode.forEach(sentence => {\n                const source = new StringSource(sentence);\n                const sentenceValue = source.toString();\n                const count = countOfComma(sentenceValue);\n                if (count > maxComma) {\n                    const lastCommandIndex = sentenceValue.lastIndexOf(\",\");\n                    report(node, new RuleError(`This sentence exceeds the maximum count of comma. Maximum is ${maxComma}.`, {\n                        index: source.originalIndexFromIndex(lastCommandIndex)\n                    }));\n                }\n            });\n        }\n    }\n}\n"],"file":"textlint-rule-max-comma.js"}