{"version":3,"sources":["../src/kuromojin.js"],"names":["getTokenizer","tokenize","path","require","kuromoji","deferred","Deferred","getNodeModuleDirPath","process","env","KUROMOJIN_DIC_PATH","window","kuromojin","dicPath","kuromojiDir","dirname","resolve","join","_tokenizer","isLoading","options","Promise","promise","builder","build","err","tokenizer","reject","text","then","tokenizeForSentence"],"mappings":"AAAA;AACA;;;;;;;;QA6BgBA,Y,GAAAA,Y;QAmBAC,Q,GAAAA,Q;;AA7ChB;;;;;;AAFA,IAAMC,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;;;AAGA,IAAME,WAAW,IAAIC,kBAAJ,EAAjB;AACA,IAAMC,uBAAuB,SAAvBA,oBAAuB,GAAM;AAC/B;AACA,QAAI,OAAOC,OAAP,KAAmB,WAAnB,IACG,QAAOA,QAAQC,GAAf,MAAuB,QAD1B,IAEGD,QAAQC,GAAR,CAAYC,kBAFnB,EAEuC;AACnC,eAAOF,QAAQC,GAAR,CAAYC,kBAAnB;AACH;AACD;AACA,QACI,OAAOC,MAAP,KAAkB,WAAlB,IACA,QAAOA,OAAOC,SAAd,MAA4B,QAD5B,IAEA,OAAOD,OAAOC,SAAP,CAAiBC,OAAxB,KAAoC,QAHxC,EAIE;AACE,eAAOF,OAAOC,SAAP,CAAiBC,OAAxB;AACH;AACD,QAAMC,cAAcZ,KAAKa,OAAL,CAAaZ,QAAQa,OAAR,CAAgB,UAAhB,CAAb,CAApB;AACA,WAAOd,KAAKe,IAAL,CAAUH,WAAV,EAAuB,IAAvB,EAA6B,MAA7B,CAAP;AACH,CAjBD;AAkBA;AACA,IAAII,aAAa,IAAjB;AACA;AACA,IAAIC,YAAY,KAAhB;;AAEO,SAASnB,YAAT,GAAqE;AAAA,QAA/CoB,OAA+C,uEAArC,EAAEP,SAASN,sBAAX,EAAqC;;AACxE,QAAIW,UAAJ,EAAgB;AACZ,eAAOG,QAAQL,OAAR,CAAgBE,UAAhB,CAAP;AACH;AACD,QAAIC,SAAJ,EAAe;AACX,eAAOd,SAASiB,OAAhB;AACH;AACDH,gBAAY,IAAZ;AACA;AACAf,aAASmB,OAAT,CAAiBH,OAAjB,EAA0BI,KAA1B,CAAgC,UAASC,GAAT,EAAcC,SAAd,EAAyB;AACrD,YAAID,GAAJ,EAAS;AACL,mBAAOpB,SAASsB,MAAT,CAAgBF,GAAhB,CAAP;AACH;AACDP,qBAAaQ,SAAb;AACArB,iBAASW,OAAT,CAAiBU,SAAjB;AACH,KAND;AAOA,WAAOrB,SAASiB,OAAhB;AACH;;AAEM,SAASrB,QAAT,CAAkB2B,IAAlB,EAAwB;AAC3B,WAAO5B,eAAe6B,IAAf,CAAoB,qBAAa;AACpC,eAAOH,UAAUI,mBAAV,CAA8BF,IAA9B,CAAP;AACH,KAFM,CAAP;AAGH","file":"kuromojin.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst path = require(\"path\");\nconst kuromoji = require(\"kuromoji\");\nimport Deferred from \"./Deferred\";\n\nconst deferred = new Deferred();\nconst getNodeModuleDirPath = () => {\n    // Node\n    if (typeof process !== \"undefined\"\n        && typeof process.env === \"object\"\n        && process.env.KUROMOJIN_DIC_PATH) {\n        return process.env.KUROMOJIN_DIC_PATH;\n    }\n    // if window.kuromojin.dicPath is defined, use it as default dict path.\n    if (\n        typeof window !== \"undefined\" &&\n        typeof window.kuromojin === \"object\" &&\n        typeof window.kuromojin.dicPath === \"string\"\n    ) {\n        return window.kuromojin.dicPath;\n    }\n    const kuromojiDir = path.dirname(require.resolve(\"kuromoji\"));\n    return path.join(kuromojiDir, \"..\", \"dict\");\n};\n// cache for tokenizer\nlet _tokenizer = null;\n// lock boolean\nlet isLoading = false;\n\nexport function getTokenizer(options = { dicPath: getNodeModuleDirPath() }) {\n    if (_tokenizer) {\n        return Promise.resolve(_tokenizer);\n    }\n    if (isLoading) {\n        return deferred.promise;\n    }\n    isLoading = true;\n    // load dict\n    kuromoji.builder(options).build(function(err, tokenizer) {\n        if (err) {\n            return deferred.reject(err);\n        }\n        _tokenizer = tokenizer;\n        deferred.resolve(tokenizer);\n    });\n    return deferred.promise;\n}\n\nexport function tokenize(text) {\n    return getTokenizer().then(tokenizer => {\n        return tokenizer.tokenizeForSentence(text);\n    });\n}\n"]}