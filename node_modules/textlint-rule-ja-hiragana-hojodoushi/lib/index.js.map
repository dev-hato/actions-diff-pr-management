{"version":3,"sources":["../src/index.js"],"names":["fs","require","kuromojin","createMatcher","yaml","data","safeLoad","readFileSync","__dirname","dictionaries","dict","forEach","item","form","tokens","token","surface_form","push","message","expected","fix","matchAll","reporter","context","options","Syntax","RuleError","report","getSource","fixer","Str","node","text","then","actualTokens","results","length","result","tokenIndex","index","getIndexFromTokens","replaceFrom","replaceTo","replaceTextRange","ruleError","i","module","exports","linter"],"mappings":"AAAA;;;;AAEA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,YAAYD,QAAQ,WAAR,CAAlB;AACA,IAAME,gBAAgBF,QAAQ,oBAAR,CAAtB;AACA,IAAMG,OAAOH,QAAQ,SAAR,CAAb;AACA,IAAMI,OAAOD,KAAKE,QAAL,CAAcN,GAAGO,YAAH,CAAgBC,YAAY,yBAA5B,EAAuD,MAAvD,CAAd,CAAb;;AAEA,IAAMC,eAAe,EAArB;;AAEAJ,KAAKK,IAAL,CAAUC,OAAV,CAAkB,UAASC,IAAT,EAAe;AAC/B,MAAIC,OAAO,EAAX;AACAD,OAAKE,MAAL,CAAYH,OAAZ,CAAoB,UAASI,KAAT,EAAgB;AAClCF,YAAQE,MAAMC,YAAd;AACD,GAFD;AAGAP,eAAaQ,IAAb,CAAkB;AAChBC,aAASb,KAAKa,OAAL,GAAe,MAAf,GAAwBL,IAAxB,GAA+B,UAA/B,GAA4CD,KAAKO,QAAjD,GAA4D,IADrD;AAEhBC,SAAKR,KAAKO,QAFM;AAGhBL,YAAQF,KAAKE;AAHG,GAAlB;AAKD,CAVD;;AAYA,IAAMO,WAAWlB,cAAcM,YAAd,CAAjB;;AAEA,SAASa,QAAT,CAAkBC,OAAlB,EAAyC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAAA,MAErCC,MAFqC,GAOnCF,OAPmC,CAErCE,MAFqC;AAAA,MAGrCC,SAHqC,GAOnCH,OAPmC,CAGrCG,SAHqC;AAAA,MAIrCC,MAJqC,GAOnCJ,OAPmC,CAIrCI,MAJqC;AAAA,MAKrCC,SALqC,GAOnCL,OAPmC,CAKrCK,SALqC;AAAA,MAMrCC,KANqC,GAOnCN,OAPmC,CAMrCM,KANqC;;AAQvC,6BACGJ,OAAOK,GADV,YACeC,IADf,EACqB;AAAE;AACnB,QAAMC,OAAOJ,UAAUG,IAAV,CAAb,CADiB,CACa;AAC9B,WAAO7B,UAAU8B,IAAV,EAAgBC,IAAhB,CAAqB,UAACC,YAAD,EAAkB;AAC5C,UAAMC,UAAUd,SAASa,YAAT,CAAhB;;AAEA,UAAIC,QAAQC,MAAR,IAAkB,CAAtB,EAAyB;AACvB;AACD;;AAEDD,cAAQxB,OAAR,CAAgB,UAAS0B,MAAT,EAAiB;AAC/B,YAAMC,aAAaD,OAAOE,KAA1B;AACA,YAAMA,QAAQC,mBAAmBF,UAAnB,EAA+BJ,YAA/B,CAAd;AACA,YAAIO,cAAc,EAAlB;AACAJ,eAAOvB,MAAP,CAAcH,OAAd,CAAsB,UAASI,KAAT,EAAgB;AACpC0B,yBAAe1B,MAAMC,YAArB;AACD,SAFD;AAGA,YAAM0B,YAAYb,MAAMc,gBAAN,CAAuB,CAACJ,KAAD,EAAQA,QAAQE,YAAYL,MAA5B,CAAvB,EAA4DC,OAAO3B,IAAP,CAAYU,GAAxE,CAAlB;AACA,YAAMwB,YAAY,IAAIlB,SAAJ,CAAcW,OAAO3B,IAAP,CAAYQ,OAA1B,EAAmC;AACnDqB,iBAAOA,KAD4C;AAEnDnB,eAAKsB,SAF8C,CAEpC;AAFoC,SAAnC,CAAlB;AAIAf,eAAOI,IAAP,EAAaa,SAAb;AACD,OAbD;AAcD,KArBM,CAAP;AAsBD,GAzBH;AA2BD;;AAED,SAASJ,kBAAT,CAA4BF,UAA5B,EAAwCJ,YAAxC,EAAsD;AACpD,MAAIK,QAAQ,CAAZ;AACA,OAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIP,UAApB,EAAgCO,GAAhC,EAAqC;AACnCN,aAASL,aAAaW,CAAb,EAAgB7B,YAAhB,CAA6BoB,MAAtC;AACD;AACD,SAAOG,KAAP;AACD;;AAEDO,OAAOC,OAAP,GAAiB;AACfC,UAAQ1B,QADO;AAEfO,SAAOP;AAFQ,CAAjB","file":"index.js","sourcesContent":["\"use strict\";\n\nconst fs = require(\"fs\");\nconst kuromojin = require(\"kuromojin\");\nconst createMatcher = require(\"morpheme-match-all\");\nconst yaml = require(\"js-yaml\");\nconst data = yaml.safeLoad(fs.readFileSync(__dirname + \"/../dict/hojodoushi.yml\", \"utf8\"));\n\nconst dictionaries = [];\n\ndata.dict.forEach(function(item) {\n  var form = \"\";\n  item.tokens.forEach(function(token) {\n    form += token.surface_form;\n  });\n  dictionaries.push({\n    message: data.message + \": \\\"\" + form + \"\\\" => \\\"\" + item.expected + \"\\\"\",\n    fix: item.expected,\n    tokens: item.tokens\n  });\n});\n\nconst matchAll = createMatcher(dictionaries);\n\nfunction reporter(context, options = {}) {\n  const {\n    Syntax,\n    RuleError,\n    report,\n    getSource,\n    fixer\n  } = context;\n  return {\n    [Syntax.Str](node) { // \"Str\" node\n      const text = getSource(node); // Get text\n      return kuromojin(text).then((actualTokens) => {\n        const results = matchAll(actualTokens);\n\n        if (results.length == 0) {\n          return;\n        }\n\n        results.forEach(function(result) {\n          const tokenIndex = result.index;\n          const index = getIndexFromTokens(tokenIndex, actualTokens);\n          let replaceFrom = \"\";\n          result.tokens.forEach(function(token) {\n            replaceFrom += token.surface_form;\n          });\n          const replaceTo = fixer.replaceTextRange([index, index + replaceFrom.length], result.dict.fix);\n          const ruleError = new RuleError(result.dict.message, {\n            index: index,\n            fix: replaceTo // https://github.com/textlint/textlint/blob/master/docs/rule-fixable.md\n          });\n          report(node, ruleError);\n        });\n      });\n    }\n  };\n}\n\nfunction getIndexFromTokens(tokenIndex, actualTokens) {\n  let index = 0;\n  for (let i = 0; i < tokenIndex; i++) {\n    index += actualTokens[i].surface_form.length;\n  }\n  return index;\n}\n\nmodule.exports = {\n  linter: reporter,\n  fixer: reporter\n};"]}