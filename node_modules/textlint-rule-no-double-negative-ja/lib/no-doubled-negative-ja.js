// LICENSE : MIT
"use strict"; // tokens -> event emitter -> return check

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _kuromojin = require("kuromojin");

var _nakuhaNai = _interopRequireDefault(require("./rules/nakuha-nai"));

var _naidemoNai = _interopRequireDefault(require("./rules/naidemo-nai"));

var _naimonodehaNai = _interopRequireDefault(require("./rules/naimonodeha-nai"));

var _naikotohaNai = _interopRequireDefault(require("./rules/naikotoha-nai"));

var _naiwakedehaNai = _interopRequireDefault(require("./rules/naiwakedeha-nai"));

var _naitohaiikireNai = _interopRequireDefault(require("./rules/naitohaiikire-nai"));

var _naitohakagiraNai = _interopRequireDefault(require("./rules/naitohakagira-nai"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(context) {
  var {
    Syntax,
    getSource,
    report,
    RuleError
  } = context; // initialize each rules

  var ruleなくもない = (0, _nakuhaNai.default)(context);
  var ruleないでもない = (0, _naidemoNai.default)(context);
  var ruleないものではない = (0, _naimonodehaNai.default)(context);
  var ruleないことはない = (0, _naikotohaNai.default)(context);
  var ruleないわけではない = (0, _naiwakedehaNai.default)(context);
  var ruleないとはいいきれない = (0, _naitohaiikireNai.default)(context);
  var ruleないとはかぎらない = (0, _naitohakagiraNai.default)(context);
  return {
    [Syntax.Str](node) {
      var text = getSource(node);
      var results = [];

      var pushError = error => {
        if (error) {
          results.push(error);
        }
      };

      return (0, _kuromojin.tokenize)(text).then(tokens => {
        tokens.forEach(token => {
          pushError(ruleなくもない(token));
          pushError(ruleないでもない(token));
          pushError(ruleないものではない(token));
          pushError(ruleないことはない(token));
          pushError(ruleないわけではない(token));
          pushError(ruleないとはいいきれない(token));
          pushError(ruleないとはかぎらない(token));
        });
      }).then(() => {
        results.forEach(error => {
          report(node, error);
        });
      });
    }

  };
}
//# sourceMappingURL=no-doubled-negative-ja.js.map