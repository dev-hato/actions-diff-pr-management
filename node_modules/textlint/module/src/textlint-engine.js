"use strict";
import { createFormatter } from "@textlint/linter-formatter";
import { AbstractTextLintEngine } from "./engine/textlint-engine-core";
/**
 * TextLintEngine a adapter for TextLintEngineCore.
 * It aim to pull the whole look together. (TextLintEngine and TextFixEngine)
 */
export class TextLintEngine extends AbstractTextLintEngine {
    constructor() {
        super(...arguments);
        /**
         * @param {TextLintCore} textlintCore
         * @returns {function()}
         */
        this.onFile = (textlintCore) => {
            /**
             * Executes the current configuration on an array of file and directory names.
             * TextLintEngine#executeOnFile
             * @param {String} file An array of file and directory names.
             * @returns {TextlintResult[]} The results for all files that were linted.
             */
            return function executeOnFile(file) {
                return textlintCore.lintFile(file);
            };
        };
        /**
         * @param {TextLintCore} textlintCore
         * @returns {function()}
         */
        this.onText = (textlintCore) => {
            /**
             * lint text, and return TextlintResult[]
             * TextLintEngine#executeOnText
             * @param {string} text linting text content
             * @param {string} ext ext is a type for linting. default: ".txt"
             * @returns {TextlintResult[]}
             */
            return function executeOnText(text, ext) {
                return textlintCore.lintText(text, ext);
            };
        };
        /**
         * @param {TextLintFormatterOption} formatterConfig
         */
        this.onFormat = (formatterConfig) => {
            return createFormatter(formatterConfig);
        };
    }
}
//# sourceMappingURL=textlint-engine.js.map