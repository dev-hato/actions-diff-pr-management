{"version":3,"sources":["../src/ng-word.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;qBAEE,UAAS,OAAO,EAAgB;MAAd,OAAO,yDAAG,EAAE;;AAC3C,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;;MAE7B,MAAM,GAAkC,OAAO,CAA/C,MAAM;MAAE,SAAS,GAAuB,OAAO,CAAvC,SAAS;MAAE,MAAM,GAAe,OAAO,CAA5B,MAAM;MAAE,SAAS,GAAI,OAAO,CAApB,SAAS;;AAEzC,6BACG,MAAM,CAAC,QAAQ,EAAC,UAAC,IAAI,EAAE;AACtB,WAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,UAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;;AAE7B,WAAK,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AACpB,YAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAC7B,gBAAM,CAAC,IAAI,EAAE,IAAI,SAAS,iCAA+B,IAAI,QAAK,CAAC,CAAC;SACrE;OACF,CAAC,CAAC;;AAEH,aAAO,EAAE,CAAC;KACX,CAAC,CAAC;GACJ,EACF;CACF","file":"ng-word.js","sourcesContent":["'use strict';\n\nexport default function(context, options = {}) {\n  const words = options.words || [];\n\n  let {Syntax, getSource, report, RuleError} = context;\n\n  return {\n    [Syntax.Document](node) {\n      return new Promise((resolve, reject) => {\n        const text = getSource(node);\n\n        words.forEach(word => {\n          if (text.indexOf(word) !== -1) {\n            report(node, new RuleError(`Document contains NG word \"${word}\".`));\n          }\n        });\n\n        resolve();\n      });\n    }\n  }\n}\n"]}