"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryDownloadDb = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const rest_1 = require("@octokit/rest");
const got_1 = __importDefault(require("got"));
const stream_1 = require("stream");
const util_1 = require("util");
const osv_offline_db_1 = require("@jamiemagee/osv-offline-db");
const path_1 = __importDefault(require("path"));
const luxon_1 = require("luxon");
const adm_zip_1 = __importDefault(require("adm-zip"));
const pipeline = (0, util_1.promisify)(stream_1.Stream.pipeline);
const baseParameters = {
    owner: 'JamieMagee',
    repo: 'osv-offline',
};
async function tryDownloadDb() {
    await fs_extra_1.default.ensureDir(osv_offline_db_1.OsvOfflineDb.rootDirectory);
    // if local database exists and is less than a day old, don't do any network requests
    let stats;
    try {
        stats = await fs_extra_1.default.stat(path_1.default.join(osv_offline_db_1.OsvOfflineDb.rootDirectory, `osv-offline.zip`));
    }
    catch (err) {
        // ignored
    }
    if (stats !== undefined &&
        luxon_1.DateTime.utc().diff(luxon_1.DateTime.fromJSDate(stats.mtime)).as('days') < 1) {
        return true;
    }
    const latestRelease = (await new rest_1.Octokit().repos.listReleases({
        ...baseParameters,
    })).data[0];
    const asset = latestRelease.assets.find((asset) => asset.name === 'osv-offline.zip');
    // if local database is the same size as remote database, don't download again
    if (asset?.size === stats?.size) {
        return true;
    }
    if (asset !== undefined) {
        // only download databases if local databases are missing or remote is newer
        try {
            const stream = got_1.default.stream(asset.browser_download_url);
            const zipPath = path_1.default.join(osv_offline_db_1.OsvOfflineDb.rootDirectory, asset.name);
            const writeStream = fs_extra_1.default.createWriteStream(zipPath);
            await pipeline(stream, writeStream);
            const zip = new adm_zip_1.default(zipPath);
            zip.extractAllTo(osv_offline_db_1.OsvOfflineDb.rootDirectory);
        }
        catch (err) {
            return false;
        }
    }
    return true;
}
exports.tryDownloadDb = tryDownloadDb;
