"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sentenceSplitter = require("sentence-splitter");

var _textlintUtilToString = require("textlint-util-to-string");

var _textlintRuleHelper = require("textlint-rule-helper");

var _regexpStringMatcher = require("@textlint/regexp-string-matcher");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function removeRangeFromString(text, regExpStrings) {
  var patterns = regExpStrings.map(pattern => {
    return (0, _regexpStringMatcher.createRegExp)(pattern);
  });
  var result = text;
  patterns.forEach(pattern => {
    result = result.replace(pattern, "");
  });
  return result;
}

var defaultOptions = {
  max: 100,
  skipPatterns: [],
  skipUrlStringLink: true,

  /**
   * @deprecated
   */
  exclusionPatterns: []
};

var reporter = function reporter(context) {
  var _options$max, _ref, _options$skipPatterns, _options$skipUrlStrin;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var maxLength = (_options$max = options.max) !== null && _options$max !== void 0 ? _options$max : defaultOptions.max;
  var skipPatterns = (_ref = (_options$skipPatterns = options.skipPatterns) !== null && _options$skipPatterns !== void 0 ? _options$skipPatterns : options.exclusionPatterns) !== null && _ref !== void 0 ? _ref : defaultOptions.skipPatterns;
  var skipUrlStringLink = (_options$skipUrlStrin = options.skipUrlStringLink) !== null && _options$skipUrlStrin !== void 0 ? _options$skipUrlStrin : defaultOptions.skipUrlStringLink;
  var helper = new _textlintRuleHelper.RuleHelper(context);
  var {
    Syntax,
    RuleError,
    report
  } = context;

  var isUrlStringLink = node => {
    if (node.type !== Syntax.Link) {
      return false;
    }

    var linkNode = node;
    var nodeText = new _textlintUtilToString.StringSource(linkNode).toString();
    return node.url === nodeText;
  }; // toPlainText


  return {
    [Syntax.Paragraph](node) {
      if (helper.isChildNode(node, [Syntax.BlockQuote])) {
        return;
      } // If a single Link node in the paragraph node, should be ignore the link length


      var isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;

      if (isChildrenSingleLinkNode) {
        return;
      } // empty break line == split sentence


      var paragraph = (0, _sentenceSplitter.splitAST)(node);
      paragraph.children.filter(sentence => sentence.type === _sentenceSplitter.Syntax.Sentence).forEach(sentence => {
        var filteredSentence = skipUrlStringLink ? _objectSpread(_objectSpread({}, sentence), {}, {
          children: sentence.children.filter(sentenceChildNode => {
            return !isUrlStringLink(sentenceChildNode);
          })
        }) : sentence; // @ts-expect-error: wrong types

        var source = new _textlintUtilToString.StringSource(filteredSentence);
        var actualText = source.toString();
        var sentenceText = removeRangeFromString(actualText, skipPatterns); // larger than > 100

        var actualTextLength = actualText.length;
        var sentenceLength = sentenceText.length;

        if (sentenceLength > maxLength) {
          var startLine = filteredSentence.loc.start.line;
          report(filteredSentence, new RuleError("Line ".concat(startLine, " sentence length(").concat(sentenceLength !== actualTextLength ? "".concat(sentenceLength, ", original:").concat(actualTextLength) : sentenceLength, ") exceeds the maximum sentence length of ").concat(maxLength, ".\nOver ").concat(sentenceLength - maxLength, " characters.")));
        }
      });
    }

  };
};

var _default = reporter;
exports.default = _default;
//# sourceMappingURL=sentence-length.js.map