{"version":3,"sources":["../src/no-dead-link.js"],"names":["DEFAULT_OPTIONS","checkRelative","baseURI","ignore","preferGET","retry","concurrency","interval","intervalCap","keepAlive","userAgent","maxRetryTime","URI_REGEXP","isHttp","uri","protocol","URL","parse","isRelative","host","isLocal","isRedirect","code","isIgnored","some","pattern","waitTimeMs","ms","Promise","resolve","setTimeout","keepAliveAgents","http","Agent","https","createFetchWithRuleDefaults","ruleOptions","getAgent","parsedURL","fetchOptions","compress","headers","agent","createCheckAliveURL","fetchWithDefaults","method","maxRetryCount","currentRetryCount","opts","redirect","res","status","redirectedUrl","get","finalRes","hash","ok","redirected","redirectTo","url","message","statusText","isAliveURI","retrySeconds","retryWaitTimeMs","maxRetryTimeMs","ex","isAliveLocalFile","filePath","fs","access","replace","reporter","context","options","Syntax","getSource","report","RuleError","fixer","getFilePath","helper","RuleHelper","memorizedIsAliveURI","maxAge","lint","node","index","base","filter","origin","length","result","ignoreRedirects","lintMessage","fix","replaceTextRange","URIs","Str","isChildNode","BlockQuote","Link","text","push","raw","indexOf","Document","queue","PQueue","linkTasks","map","item","addAll","linter"],"mappings":"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","sourcesContent":["import { RuleHelper } from 'textlint-rule-helper';\nimport fetch from 'node-fetch';\nimport URL from 'url';\nimport fs from 'fs-extra';\nimport minimatch from 'minimatch';\nimport { isAbsolute } from 'path';\nimport { getURLOrigin } from 'get-url-origin';\nimport pMemoize from 'p-memoize';\nimport PQueue from 'p-queue';\nimport * as http from 'http';\nimport * as https from 'https';\n\nconst DEFAULT_OPTIONS = {\n  checkRelative: true, // {boolean} `false` disables the checks for relative URIs.\n  baseURI: null, // {String|null} a base URI to resolve relative URIs.\n  ignore: [], // {Array<String>} URIs to be skipped from availability checks.\n  preferGET: [], // {Array<String>} origins to prefer GET over HEAD.\n  retry: 3, // {number} Max retry count\n  concurrency: 8, // {number} Concurrency count of linting link [Experimental]\n  interval: 500, // The length of time in milliseconds before the interval count resets. Must be finite. [Experimental]\n  intervalCap: 8, // The max number of runs in the given interval of time. [Experimental]\n  keepAlive: false, // {boolean} if it is true, use keepAlive for checking request [Experimental]\n  userAgent: 'textlint-rule-no-dead-link/1.0', // {String} a UserAgent,\n  maxRetryTime: 10, // (number) The max of waiting seconds for retry, if response returns `After-Retry` header.\n};\n\n// Adopted from http://stackoverflow.com/a/3809435/951517\nconst URI_REGEXP = /(?:https?:)?\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b(?:[-a-zA-Z0-9@:%_+.~#?&//=]*)/g;\n\n/**\n * Returns `true` if a given URI is https? url.\n * @param {string} uri\n * @return {boolean}\n */\nfunction isHttp(uri) {\n  const { protocol } = URL.parse(uri);\n  return protocol === 'http:' || protocol === 'https:';\n}\n\n/**\n * Returns `true` if a given URI is relative.\n * @param {string} uri\n * @return {boolean}\n * @see https://github.com/panosoft/is-local-path\n */\nfunction isRelative(uri) {\n  const { host } = URL.parse(uri);\n  return host === null || host === '';\n}\n\n/**\n * Returns if a given URI indicates a local file.\n * @param {string} uri\n * @return {boolean}\n * @see https://nodejs.org/api/path.html#path_path_isabsolute_path\n */\nfunction isLocal(uri) {\n  if (isAbsolute(uri)) {\n    return true;\n  }\n  return isRelative(uri);\n}\n\n/**\n * Return `true` if the `code` is redirect status code.\n * @see https://fetch.spec.whatwg.org/#redirect-status\n * @param {number} code\n * @returns {boolean}\n */\nfunction isRedirect(code) {\n  return (\n    code === 301 || code === 302 || code === 303 || code === 307 || code === 308\n  );\n}\n\nfunction isIgnored(uri, ignore = []) {\n  return ignore.some((pattern) => minimatch(uri, pattern));\n}\n\n/**\n * wait for ms and resolve the promise\n * @param ms\n * @returns {Promise<any>}\n */\nfunction waitTimeMs(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\nconst keepAliveAgents = {\n  http: new http.Agent({ keepAlive: true }),\n  https: new https.Agent({ keepAlive: true }),\n};\n\nconst createFetchWithRuleDefaults = (ruleOptions) => {\n  /**\n   * Use library agent, avoid to use global.http(s)Agent\n   * Want to avoid Socket hang up\n   * @param parsedURL\n   * @returns {module:http.Agent|null|module:https.Agent}\n   */\n  const getAgent = (parsedURL) => {\n    if (!ruleOptions.keepAlive) {\n      return null;\n    }\n    if (parsedURL.protocol === 'http:') {\n      return keepAliveAgents.http;\n    }\n    return keepAliveAgents.https;\n  };\n\n  return (uri, fetchOptions) => {\n    const { host } = URL.parse(uri);\n    return fetch(uri, {\n      ...fetchOptions,\n      // Disable gzip compression in Node.js\n      // to avoid the zlib's \"unexpected end of file\" error\n      // https://github.com/request/request/issues/2045\n      compress: false,\n      // Some website require UserAgent and Accept header\n      // to avoid ECONNRESET error\n      // https://github.com/textlint-rule/textlint-rule-no-dead-link/issues/111\n      headers: {\n        'User-Agent': ruleOptions.userAgent,\n        'Accept': '*/*',\n        // Same host for target url\n        // https://github.com/textlint-rule/textlint-rule-no-dead-link/issues/111\n        'Host': host,\n      },\n      // custom http(s).agent\n      agent: getAgent,\n    });\n  };\n};\n/**\n * Create isAliveURI function with ruleOptions\n * @param {object} ruleOptions\n * @returns {isAliveURI}\n */\nconst createCheckAliveURL = (ruleOptions) => {\n  // Create fetch function for this rule\n  const fetchWithDefaults = createFetchWithRuleDefaults(ruleOptions);\n  /**\n   * Checks if a given URI is alive or not.\n   *\n   * Normally, this method following strategiry about retry\n   *\n   * 1. Head\n   * 2. Get\n   * 3. Get\n   *\n   * @param {string} uri\n   * @param {string} method\n   * @param {number} maxRetryCount\n   * @param {number} currentRetryCount\n   * @return {{ ok: boolean, redirect?: string, message: string }}\n   */\n  return async function isAliveURI(uri, method = 'HEAD', maxRetryCount = 3, currentRetryCount = 0) {\n    const opts = {\n      method,\n      // Use `manual` redirect behaviour to get HTTP redirect status code\n      // and see what kind of redirect is occurring\n      redirect: 'manual',\n    };\n    try {\n      const res = await fetchWithDefaults(uri, opts);\n      // redirected\n      if (isRedirect(res.status)) {\n        const redirectedUrl = res.headers.get('Location');\n        const finalRes = await fetchWithDefaults(\n          redirectedUrl,\n          { ...opts, redirect: 'follow' },\n        );\n        const { hash } = URL.parse(uri);\n        return {\n          ok: finalRes.ok,\n          redirected: true,\n          redirectTo: hash !== null ? `${finalRes.url}${hash}` : finalRes.url,\n          message: `${res.status} ${res.statusText}`,\n        };\n      }\n      // retry if it is not ok when use head request\n      if (!res.ok && method === 'HEAD' && currentRetryCount < maxRetryCount) {\n        return isAliveURI(uri, 'GET', maxRetryCount, currentRetryCount + 1);\n      }\n\n      // try to fetch again if not reach max retry count\n      if (currentRetryCount < maxRetryCount) {\n        const retrySeconds = res.headers.get('Retry-After');\n        // If the response has `Retry-After` header, prefer it\n        // else exponential retry: 0ms -> 100ms -> 200ms -> 400ms -> 800ms ...\n        const retryWaitTimeMs = retrySeconds !== null ? retrySeconds * 1000 : currentRetryCount ** 2 * 100;\n        const maxRetryTimeMs = ruleOptions.maxRetryTime * 1000;\n        if (retryWaitTimeMs <= maxRetryTimeMs) {\n          await waitTimeMs(retryWaitTimeMs);\n        }\n        return isAliveURI(uri, 'GET', maxRetryCount, currentRetryCount + 1);\n      }\n\n      return {\n        ok: res.ok,\n        message: `${res.status} ${res.statusText}`,\n      };\n    } catch (ex) {\n      // Retry with `GET` method if the request failed\n      // as some servers don't accept `HEAD` requests but are OK with `GET` requests.\n      // https://github.com/textlint-rule/textlint-rule-no-dead-link/pull/86\n      if (method === 'HEAD' && currentRetryCount < maxRetryCount) {\n        return isAliveURI(uri, 'GET', maxRetryCount, currentRetryCount + 1);\n      }\n\n      return {\n        ok: false,\n        message: ex.message,\n      };\n    }\n  };\n\n};\n\n/**\n * Check if a given file exists\n */\nasync function isAliveLocalFile(filePath) {\n  try {\n    await fs.access(filePath.replace(/[?#].*?$/, ''));\n\n    return {\n      ok: true,\n    };\n  } catch (ex) {\n    return {\n      ok: false,\n      message: ex.message,\n    };\n  }\n}\n\nfunction reporter(context, options = {}) {\n  const { Syntax, getSource, report, RuleError, fixer, getFilePath } = context;\n  const helper = new RuleHelper(context);\n  const ruleOptions = { ...DEFAULT_OPTIONS, ...options };\n  const isAliveURI = createCheckAliveURL(ruleOptions);\n  // 30sec memorized\n  const memorizedIsAliveURI = pMemoize(isAliveURI, {\n    maxAge: 30 * 1000,\n  });\n  /**\n   * Checks a given URI's availability and report if it is dead.\n   * @param {TextLintNode} node TextLintNode the URI belongs to.\n   * @param {string} uri a URI string to be linted.\n   * @param {number} index column number the URI is located at.\n   * @param {number} maxRetryCount retry count of linting\n   */\n  const lint = async ({ node, uri, index }, maxRetryCount) => {\n    if (isIgnored(uri, ruleOptions.ignore)) {\n      return;\n    }\n\n    if (isRelative(uri)) {\n      if (!ruleOptions.checkRelative) {\n        return;\n      }\n\n      const filePath = getFilePath();\n      const base = ruleOptions.baseURI || filePath;\n      if (!base) {\n        const message =\n          'Unable to resolve the relative URI. Please check if the base URI is correctly specified.';\n\n        report(node, new RuleError(message, { index }));\n        return;\n      }\n\n      // eslint-disable-next-line no-param-reassign\n      uri = URL.resolve(base, uri);\n    }\n\n    // Ignore non http external link\n    // https://github.com/textlint-rule/textlint-rule-no-dead-link/issues/112\n    if (!isLocal(uri) && !isHttp(uri)) {\n      return;\n    }\n\n    const method =\n      ruleOptions.preferGET.filter(\n        (origin) => getURLOrigin(uri) === getURLOrigin(origin),\n      ).length > 0\n        ? 'GET'\n        : 'HEAD';\n\n    const result = isLocal(uri)\n      ? await isAliveLocalFile(uri)\n      : await memorizedIsAliveURI(uri, method, maxRetryCount);\n    const { ok, redirected, redirectTo, message } = result;\n    // When ignoreRedirects is true, redirected should be ignore\n    if (redirected && ruleOptions.ignoreRedirects) {\n      return;\n    }\n    if (!ok) {\n      const lintMessage = `${uri} is dead. (${message})`;\n      report(node, new RuleError(lintMessage, { index }));\n    } else if (redirected) {\n      const lintMessage = `${uri} is redirected to ${redirectTo}. (${message})`;\n      const fix = fixer.replaceTextRange(\n        [index, index + uri.length],\n        redirectTo,\n      );\n      report(node, new RuleError(lintMessage, { fix, index }));\n    }\n  };\n\n  /**\n   * URIs to be checked.\n   * @type {Array<{ node: TextLintNode, uri: string, index: number }>}\n   */\n  const URIs = [];\n\n  return {\n    [Syntax.Str](node) {\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return;\n      }\n\n      // prevent double checks\n      if (helper.isChildNode(node, [Syntax.Link])) {\n        return;\n      }\n\n      const text = getSource(node);\n\n      // Use `String#replace` instead of `RegExp#exec` to allow us\n      // perform RegExp matches in an iterate and immutable manner\n      text.replace(URI_REGEXP, (uri, index) => {\n        URIs.push({ node, uri, index });\n      });\n    },\n\n    [Syntax.Link](node) {\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return;\n      }\n\n      // Ignore HTML5 place holder link.\n      // Ex) <a>Placeholder Link</a>\n      if (typeof node.url === 'undefined') {\n        return;\n      }\n\n      // [text](http://example.com)\n      //       ^\n      const index = node.raw.indexOf(node.url) || 0;\n\n      URIs.push({\n        node,\n        uri: node.url,\n        index,\n      });\n    },\n\n    [`${context.Syntax.Document}:exit`]() {\n      const queue = new PQueue({\n        concurrency: ruleOptions.concurrency,\n        intervalCap: ruleOptions.intervalCap,\n        interval: ruleOptions.interval,\n      });\n      const linkTasks = URIs.map((item) => () => lint(item, ruleOptions.retry));\n      return queue.addAll(linkTasks);\n    },\n  };\n}\n\nexport default {\n  linter: reporter,\n  fixer: reporter,\n};\n"],"file":"no-dead-link.js"}