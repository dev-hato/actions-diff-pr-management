{"version":3,"sources":["../../src/parser/PairMaker.js"],"names":["PAIR_MARKS","key","start","end","PairMaker","mark","sourceCode","string","read","isInContext","pair","find","leaveContext","enterContext"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,IAAMA,UAAU,GAAG,CACf;AACIC,EAAAA,GAAG,EAAE,cADT;AAEIC,EAAAA,KAAK,MAFT;AAGIC,EAAAA,GAAG;AAHP,CADe,EAMf;AACIF,EAAAA,GAAG,EAAE,kBADT;AAEIC,EAAAA,KAAK,KAFT;AAGIC,EAAAA,GAAG;AAHP,CANe,EAWf;AACIF,EAAAA,GAAG,EAAE,iBADT;AAEIC,EAAAA,KAAK,KAFT;AAGIC,EAAAA,GAAG;AAHP,CAXe,EAgBf;AACIF,EAAAA,GAAG,EAAE,eADT;AAEIC,EAAAA,KAAK,KAFT;AAGIC,EAAAA,GAAG;AAHP,CAhBe,EAqBf;AACIF,EAAAA,GAAG,EAAE,QADT;AAEIC,EAAAA,KAAK,UAFT;AAGIC,EAAAA,GAAG;AAHP,CArBe,EA0Bf;AACIF,EAAAA,GAAG,EAAE,OADT;AAEIC,EAAAA,KAAK,UAFT;AAGIC,EAAAA,GAAG;AAHP,CA1Be,EA+Bf;AACIF,EAAAA,GAAG,EAAE,UADT;AAEIC,EAAAA,KAAK,UAFT;AAGIC,EAAAA,GAAG;AAHP,CA/Be,EAoCf;AACIF,EAAAA,GAAG,EAAE,OADT;AAEIC,EAAAA,KAAK,UAFT;AAGIC,EAAAA,GAAG;AAHP,CApCe,EAyCf;AACIF,EAAAA,GAAG,EAAE,OADT;AAEIC,EAAAA,KAAK,UAFT;AAGIC,EAAAA,GAAG;AAHP,CAzCe,EA8Cf;AACIF,EAAAA,GAAG,EAAE,QADT;AAEIC,EAAAA,KAAK,UAFT;AAGIC,EAAAA,GAAG;AAHP,CA9Ce,EAmDf;AACIF,EAAAA,GAAG,EAAE,SADT;AAEIC,EAAAA,KAAK,UAFT;AAGIC,EAAAA,GAAG;AAHP,CAnDe,CAAnB,C,CA0DA;AACA;;AACO,MAAMC,SAAN,CAAgB;AACnBC,EAAAA,IAAI,CAACC,UAAD,EAAa;AACb,QAAMC,MAAM,GAAGD,UAAU,CAACE,IAAX,EAAf;;AACA,QAAI,CAACD,MAAL,EAAa;AACT;AACH,KAJY,CAKb;AACA;;;AACA,QAAID,UAAU,CAACG,WAAX,EAAJ,EAA8B;AAC1B;AACA,UAAMC,IAAI,GAAGV,UAAU,CAACW,IAAX,CAAgBD,IAAI,IAAIA,IAAI,CAACP,GAAL,KAAaI,MAArC,CAAb;;AACA,UAAIG,IAAJ,EAAU;AACNJ,QAAAA,UAAU,CAACM,YAAX,CAAwBF,IAAxB;AACH;AACJ,KAND,MAMO;AACH,UAAMA,KAAI,GAAGV,UAAU,CAACW,IAAX,CAAgBD,IAAI,IAAIA,IAAI,CAACR,KAAL,KAAeK,MAAvC,CAAb;;AACA,UAAIG,KAAJ,EAAU;AACNJ,QAAAA,UAAU,CAACO,YAAX,CAAwBH,KAAxB;AACH;AACJ;AACJ;;AApBkB","sourcesContent":["/**\n * Mark pair character\n * PairMarker aim to mark pair string as a single sentence.\n *\n * For example, Following sentence has two period(。). but it should treat a single sentence\n *\n * > I hear \"I'm back to home.\" from radio.\n *\n * https://ja.wikipedia.org/wiki/%E6%8B%AC%E5%BC%A7\n */\n/**\n * @typedef {{key:string,start:string,end:string}[]} PairMark\n */\nconst PAIR_MARKS = [\n    {\n        key: \"double quote\",\n        start: `\"`,\n        end: `\"`\n    },\n    {\n        key: \"angled bracket[]\",\n        start: `[`,\n        end: `]`\n    },\n    {\n        key: \"round bracket()\",\n        start: `(`,\n        end: `)`\n    },\n    {\n        key: \"curly brace{}\",\n        start: `{`,\n        end: `}`\n    },\n    {\n        key: \"かぎ括弧「」\",\n        start: `「`,\n        end: `」`\n    },\n    {\n        key: \"丸括弧（）\",\n        start: `（`,\n        end: `）`\n    },\n    {\n        key: \"二重かぎ括弧『』\",\n        start: `『`,\n        end: `』`\n    },\n    {\n        key: \"波括弧｛｝\",\n        start: `｛`,\n        end: `｝`\n    },\n    {\n        key: \"角括弧［］\",\n        start: `［`,\n        end: `］`\n    },\n    {\n        key: \"重角括弧〚〛\",\n        start: `〚`,\n        end: `〛`\n    },\n    {\n        key: \"隅付き括弧【】\",\n        start: `【`,\n        end: `】`\n    }\n];\n\n// For readme\n// console.log(PAIR_MARKS.map(pair => `- ${pair.key}: \\`${pair.start}\\` and \\`${pair.end}\\``).join(\"\\n\"));\nexport class PairMaker {\n    mark(sourceCode) {\n        const string = sourceCode.read();\n        if (!string) {\n            return;\n        }\n        // if current is in a context, should not start other context.\n        // PairMaker does not support nest context by design.\n        if (sourceCode.isInContext()) {\n            // check that string is end mark?\n            const pair = PAIR_MARKS.find(pair => pair.end === string);\n            if (pair) {\n                sourceCode.leaveContext(pair);\n            }\n        } else {\n            const pair = PAIR_MARKS.find(pair => pair.start === string);\n            if (pair) {\n                sourceCode.enterContext(pair);\n            }\n        }\n    }\n}\n"],"file":"PairMaker.js"}