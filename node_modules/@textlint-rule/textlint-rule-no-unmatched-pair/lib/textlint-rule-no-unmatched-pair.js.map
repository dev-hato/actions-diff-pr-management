{"version":3,"sources":["../src/textlint-rule-no-unmatched-pair.js"],"names":["report","context","Syntax","RuleError","ignoreNodeManager","IgnoreNodeManager","Paragraph","node","sentences","ignoreChildrenByTypes","CodeBlock","Code","Link","Strong","Emphasis","BlockQuote","Comment","children","filter","type","SentenceSyntax","Sentence","forEach","sentence","source","SourceCode","raw","pairMaker","PairMaker","sentenceIndex","range","canRead","characterIndex","index","isIgnoredIndex","mark","peek","contextLocations","contextLocation","pairMark","start","end","key","module","exports"],"mappings":";;AACA;;AACA;;AACA;;AACA;;AAJA;AAMA,IAAMA,MAAM,GAAGC,OAAO,IAAI;AACtB,MAAM;AAAEC,IAAAA,MAAF;AAAUF,IAAAA,MAAV;AAAkBG,IAAAA;AAAlB,MAAgCF,OAAtC;AACA,MAAMG,iBAAiB,GAAG,IAAIC,qCAAJ,EAA1B;AACA,SAAO;AACH,KAACH,MAAM,CAACI,SAAR,EAAmBC,IAAnB,EAAyB;AACrB,UAAMC,SAAS,GAAG,gCAASD,IAAT,CAAlB;AACAH,MAAAA,iBAAiB,CAACK,qBAAlB,CAAwCF,IAAxC,EAA8C,CAC1CL,MAAM,CAACQ,SADmC,EAE1CR,MAAM,CAACS,IAFmC,EAG1CT,MAAM,CAACU,IAHmC,EAI1CV,MAAM,CAACW,MAJmC,EAK1CX,MAAM,CAACY,QALmC,EAM1CZ,MAAM,CAACa,UANmC,EAO1Cb,MAAM,CAACc,OAPmC,CAA9C;AASAR,MAAAA,SAAS,CAACS,QAAV,CAAmBC,MAAnB,CAA0BX,IAAI,IAAIA,IAAI,CAACY,IAAL,KAAcC,yBAAeC,QAA/D,EAAyEC,OAAzE,CAAiFC,QAAQ,IAAI;AACzF,YAAMC,MAAM,GAAG,IAAIC,sBAAJ,CAAeF,QAAQ,CAACG,GAAxB,CAAf;AACA,YAAMC,SAAS,GAAG,IAAIC,oBAAJ,EAAlB;AACA,YAAMC,aAAa,GAAGN,QAAQ,CAACO,KAAT,CAAe,CAAf,CAAtB;;AACA,eAAON,MAAM,CAACO,OAAd,EAAuB;AACnB;AACA,cAAMC,cAAc,GAAGH,aAAa,GAAGL,MAAM,CAACS,KAA9C,CAFmB,CAGnB;;AACA,cAAI,CAAC7B,iBAAiB,CAAC8B,cAAlB,CAAiCF,cAAjC,CAAL,EAAuD;AACnDL,YAAAA,SAAS,CAACQ,IAAV,CAAeX,MAAf;AACH;;AACDA,UAAAA,MAAM,CAACY,IAAP;AACH,SAZwF,CAazF;;;AACAZ,QAAAA,MAAM,CAACa,gBAAP,CAAwBf,OAAxB,CAAiCgB,eAAD,IAAqB;AACjDtC,UAAAA,MAAM,CAACO,IAAD,EAAO,IAAIJ,SAAJ,wCAA8CmC,eAAe,CAACC,QAAhB,CAAyBC,KAAvE,0EAEKF,eAAe,CAACC,QAAhB,CAAyBE,GAF9B,yCAGNH,eAAe,CAACC,QAAhB,CAAyBG,GAHnB,QAG2B;AACpCT,YAAAA,KAAK,EAAGJ,aAAa,GAAGtB,IAAI,CAACuB,KAAL,CAAW,CAAX,CAAjB,GAAkCQ,eAAe,CAACL;AADrB,WAH3B,CAAP,CAAN;AAMH,SAPD;AAQH,OAtBD;AAuBH;;AAnCE,GAAP;AAqCH,CAxCD;;AA0CAU,MAAM,CAACC,OAAP,GAAiB5C,MAAjB","sourcesContent":["// MIT Â© 2018 azu\nimport { splitAST, Syntax as SentenceSyntax } from \"sentence-splitter\";\nimport { PairMaker } from \"./parser/PairMaker.js\";\nimport { SourceCode } from \"./parser/SourceCode.js\";\nimport { IgnoreNodeManager } from \"textlint-rule-helper\";\n\nconst report = context => {\n    const { Syntax, report, RuleError } = context;\n    const ignoreNodeManager = new IgnoreNodeManager();\n    return {\n        [Syntax.Paragraph](node) {\n            const sentences = splitAST(node);\n            ignoreNodeManager.ignoreChildrenByTypes(node, [\n                Syntax.CodeBlock,\n                Syntax.Code,\n                Syntax.Link,\n                Syntax.Strong,\n                Syntax.Emphasis,\n                Syntax.BlockQuote,\n                Syntax.Comment\n            ]);\n            sentences.children.filter(node => node.type === SentenceSyntax.Sentence).forEach(sentence => {\n                const source = new SourceCode(sentence.raw);\n                const pairMaker = new PairMaker();\n                const sentenceIndex = sentence.range[0];\n                while (source.canRead) {\n                    // If the character is in ignored range, skip it\n                    const characterIndex = sentenceIndex + source.index;\n                    // console.log(characterIndex, source.text[source.index], ignoreNodeManager.isIgnoredIndex(characterIndex));\n                    if (!ignoreNodeManager.isIgnoredIndex(characterIndex)) {\n                        pairMaker.mark(source);\n                    }\n                    source.peek();\n                }\n                // Report Error for each existing context keys\n                source.contextLocations.forEach((contextLocation) => {\n                    report(node, new RuleError(`Not found pair character for ${contextLocation.pairMark.start}.\n                    \nYou should close this sentence with ${contextLocation.pairMark.end}.\nThis pair mark is called ${contextLocation.pairMark.key}.`, {\n                        index: (sentenceIndex - node.range[0]) + contextLocation.index\n                    }));\n                });\n            });\n        }\n    };\n};\n\nmodule.exports = report;\n"],"file":"textlint-rule-no-unmatched-pair.js"}