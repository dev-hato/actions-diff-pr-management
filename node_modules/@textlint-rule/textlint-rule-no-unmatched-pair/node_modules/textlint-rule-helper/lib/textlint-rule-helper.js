// LICENSE : MIT
"use strict";
/**
 * RuleHelper is helper class for textlint.
 * @class RuleHelper
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RuleHelper =
/*#__PURE__*/
function () {
  /**
   * Initialize RuleHelper with RuleContext object.
   * @param {RuleContext} ruleContext the ruleContext is context object of the rule.
   */
  function RuleHelper(ruleContext) {
    _classCallCheck(this, RuleHelper);

    this.ruleContext = ruleContext;
  }
  /**
   * Get parents of node.
   * The parent nodes are returned in order from the closest parent to the outer ones.
   * {@link node} is not contained in the results.
   * @param {TxtNode} node the node is start point.
   * @returns {TxtNode[]}
   */


  _createClass(RuleHelper, [{
    key: "getParents",
    value: function getParents(node) {
      var result = [];
      var parent = node.parent;

      while (parent != null) {
        result.push(parent);
        parent = parent.parent;
      }

      return result;
    }
    /**
     * Return true if `node` is wrapped any one of node {@link types}.
     * @param {TxtNode} node is target node
     * @param {string[]} types are wrapped target node
     * @returns {boolean}
     */

  }, {
    key: "isChildNode",
    value: function isChildNode(node, types) {
      var parents = this.getParents(node);
      var parentsTypes = parents.map(function (parent) {
        return parent.type;
      });
      return types.some(function (type) {
        return parentsTypes.some(function (parentType) {
          return parentType === type;
        });
      });
    }
  }]);

  return RuleHelper;
}();

exports.default = RuleHelper;
//# sourceMappingURL=textlint-rule-helper.js.map