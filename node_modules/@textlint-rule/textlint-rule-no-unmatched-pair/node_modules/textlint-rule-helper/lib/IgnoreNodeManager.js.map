{"version":3,"sources":["../src/IgnoreNodeManager.js"],"names":["visit","require","IgnoreNodeManager","_ignoredRangeList","index","some","range","start","end","aRange","isIgnoredIndex","node","ignoreRange","push","targetNode","ignoredNodeTypes","visitedNode","indexOf","type","ignore"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB;AACA;;;;;;IAIqBC,iB;;;AACjB,+BAAc;AAAA;;AACV;;;;AAIA,SAAKC,iBAAL,GAAyB,EAAzB;AACH;AAED;;;;;;;;AAOA;;;;;;;;;;;mCAWeC,K,EAAO;AAClB,aAAO,KAAKD,iBAAL,CAAuBE,IAAvB,CAA4B,UAAAC,KAAK,EAAI;AAAA,oCACnBA,KADmB;AAAA,YACjCC,KADiC;AAAA,YAC1BC,GAD0B;;AAExC,eAAOD,KAAK,IAAIH,KAAT,IAAkBA,KAAK,GAAGI,GAAjC;AACH,OAHM,CAAP;AAIH;AAED;;;;;;;mCAIeC,M,EAAQ;AACnB,UAAML,KAAK,GAAGK,MAAM,CAAC,CAAD,CAApB;AACA,aAAO,KAAKC,cAAL,CAAoBN,KAApB,CAAP;AACH;AAED;;;;;;;8BAIUO,I,EAAM;AACZ,UAAMP,KAAK,GAAGO,IAAI,CAACP,KAAnB;AACA,aAAO,KAAKM,cAAL,CAAoBN,KAApB,CAAP;AACH;AAED;;;;;;;2BAIOO,I,EAAM;AACT,WAAKC,WAAL,CAAiBD,IAAI,CAACL,KAAtB;AACH;AAED;;;;;;;gCAIYA,K,EAAO;AACf,WAAKH,iBAAL,CAAuBU,IAAvB,CAA4BP,KAA5B;AACH;AAED;;;;;;;;;0CAMsBQ,U,EAAYC,gB,EAAkB;AAAA;;AAChDf,MAAAA,KAAK,CAACc,UAAD,EAAa,UAAAE,WAAW,EAAI;AAC7B,YAAID,gBAAgB,CAACE,OAAjB,CAAyBD,WAAW,CAACE,IAArC,MAA+C,CAAC,CAApD,EAAuD;AACnD,UAAA,KAAI,CAACC,MAAL,CAAYH,WAAZ;AACH;AACJ,OAJI,CAAL;AAKH;;;wBApEmB;AAChB,aAAO,KAAKb,iBAAZ;AACH","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst visit = require('unist-util-visit');\n/**\n * Ignore node manager that manager ignored ranges.\n *\n */\nexport default class IgnoreNodeManager {\n    constructor() {\n        /**\n         * @type {[number,number][]}\n         * @private\n         */\n        this._ignoredRangeList = []\n    }\n\n    /**\n     * @returns {(number)[][]}\n     */\n    get ignoredRanges() {\n        return this._ignoredRangeList;\n    }\n\n    /**\n     * |.......|\n     * ^       ^\n     * Ignored Range\n     *\n     *    |........|\n     *    ^\n     *  index\n     * @param {number} index\n     * @returns {boolean}\n     */\n    isIgnoredIndex(index) {\n        return this._ignoredRangeList.some(range => {\n            const [start, end] = range;\n            return start <= index && index < end;\n        })\n    }\n\n    /**\n     * @param {[number, number]} aRange\n     * @returns {boolean}\n     */\n    isIgnoredRange(aRange) {\n        const index = aRange[0];\n        return this.isIgnoredIndex(index);\n    }\n\n    /**\n     * @param {Object} node\n     * @returns {boolean}\n     */\n    isIgnored(node) {\n        const index = node.index;\n        return this.isIgnoredIndex(index);\n    }\n\n    /**\n     * add node to ignore range list\n     * @param {TxtNode} node\n     */\n    ignore(node) {\n        this.ignoreRange(node.range);\n    }\n\n    /**\n     * add range to ignore range list\n     * @param {[number, number]} range\n     */\n    ignoreRange(range) {\n        this._ignoredRangeList.push(range);\n    }\n\n    /**\n     * ignore children node of `node`,\n     * if the children node has the type that is included in `ignoredNodeTypes`.\n     * @param {TxtNode} targetNode\n     * @param {string[]} ignoredNodeTypes\n     */\n    ignoreChildrenByTypes(targetNode, ignoredNodeTypes) {\n        visit(targetNode, visitedNode => {\n            if (ignoredNodeTypes.indexOf(visitedNode.type) !== -1) {\n                this.ignore(visitedNode);\n            }\n        });\n    }\n}\n"],"file":"IgnoreNodeManager.js"}