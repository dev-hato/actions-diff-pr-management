{"version":3,"sources":["../src/textlint-rule-helper.js"],"names":["RuleHelper","ruleContext","node","result","parent","push","types","parents","getParents","parentsTypes","map","type","some","parentType"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;IAIqBA,U;;;AACjB;;;;AAIA,sBAAYC,WAAZ,EAAyB;AAAA;;AACrB,SAAKA,WAAL,GAAmBA,WAAnB;AACH;AAED;;;;;;;;;;;+BAOWC,I,EAAM;AACb,UAAMC,MAAM,GAAG,EAAf;AACA,UAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB;;AACA,aAAOA,MAAM,IAAI,IAAjB,EAAuB;AACnBD,QAAAA,MAAM,CAACE,IAAP,CAAYD,MAAZ;AACAA,QAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACH;;AACD,aAAOD,MAAP;AACH;AAED;;;;;;;;;gCAMYD,I,EAAMI,K,EAAO;AACrB,UAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBN,IAAhB,CAAhB;AACA,UAAMO,YAAY,GAAGF,OAAO,CAACG,GAAR,CAAY,UAASN,MAAT,EAAiB;AAC9C,eAAOA,MAAM,CAACO,IAAd;AACH,OAFoB,CAArB;AAGA,aAAOL,KAAK,CAACM,IAAN,CAAW,UAAUD,IAAV,EAAgB;AAC9B,eAAOF,YAAY,CAACG,IAAb,CAAkB,UAAUC,UAAV,EAAsB;AAC3C,iBAAOA,UAAU,KAAKF,IAAtB;AACH,SAFM,CAAP;AAGH,OAJM,CAAP;AAKH","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/**\n * RuleHelper is helper class for textlint.\n * @class RuleHelper\n */\nexport default class RuleHelper {\n    /**\n     * Initialize RuleHelper with RuleContext object.\n     * @param {RuleContext} ruleContext the ruleContext is context object of the rule.\n     */\n    constructor(ruleContext) {\n        this.ruleContext = ruleContext;\n    }\n\n    /**\n     * Get parents of node.\n     * The parent nodes are returned in order from the closest parent to the outer ones.\n     * {@link node} is not contained in the results.\n     * @param {TxtNode} node the node is start point.\n     * @returns {TxtNode[]}\n     */\n    getParents(node) {\n        const result = [];\n        let parent = node.parent;\n        while (parent != null) {\n            result.push(parent);\n            parent = parent.parent;\n        }\n        return result;\n    }\n\n    /**\n     * Return true if `node` is wrapped any one of node {@link types}.\n     * @param {TxtNode} node is target node\n     * @param {string[]} types are wrapped target node\n     * @returns {boolean}\n     */\n    isChildNode(node, types) {\n        const parents = this.getParents(node);\n        const parentsTypes = parents.map(function(parent) {\n            return parent.type;\n        });\n        return types.some(function (type) {\n            return parentsTypes.some(function (parentType) {\n                return parentType === type;\n            });\n        });\n    }\n}\n"],"file":"textlint-rule-helper.js"}