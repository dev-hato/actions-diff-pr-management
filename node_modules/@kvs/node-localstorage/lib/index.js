"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.kvsLocalStorage = void 0;
const path_1 = __importDefault(require("path"));
const storage_1 = require("@kvs/storage");
// @ts-ignore
const node_localstorage_1 = require("node-localstorage");
// @ts-ignore
const app_root_path_1 = __importDefault(require("app-root-path"));
// @ts-ignore
const mkdirp_1 = __importDefault(require("mkdirp"));
const kvsLocalStorage = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const defaultCacheDir = path_1.default.join(app_root_path_1.default.toString(), ".cache");
    if (!options.storeFilePath) {
        yield mkdirp_1.default(defaultCacheDir);
    }
    const saveFilePath = options.storeFilePath
        ? options.storeFilePath
        : path_1.default.join(defaultCacheDir, "kvs-node-localstorage");
    return storage_1.kvsStorage(Object.assign(Object.assign({}, options), { storage: new node_localstorage_1.LocalStorage(saveFilePath) }));
});
exports.kvsLocalStorage = kvsLocalStorage;
//# sourceMappingURL=index.js.map