// LICENSE : MIT
"use strict";

var _textlintRuleHelper = require("textlint-rule-helper");

var _matchIndex = require("match-index");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var KanjiRegExp = /((?:[々〇〻\u3400-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF])+)/g;
var defaultOptions = {
    // 連続できる最大の文字数
    // If {current} > max(5), report Error.
    max: 5,
    // 許可する単語のリスト
    allow: []
};

module.exports = function reporter(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? defaultOptions : arguments[1];
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var fixer = context.fixer;
    var getSource = context.getSource;

    var helper = new _textlintRuleHelper.RuleHelper(context);
    var maxLength = options.max || defaultOptions.max;
    var allowWords = options.allow || defaultOptions.allow;
    return _defineProperty({}, Syntax.Str, function (node) {
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        var text = getSource(node);
        (0, _matchIndex.matchCaptureGroupAll)(text, KanjiRegExp).forEach(function (_ref) {
            var text = _ref.text;
            var index = _ref.index;

            // max以下であるなら無視する
            if (text.length <= maxLength) {
                return;
            }
            // 辞書にある単語は無視する
            if (allowWords.indexOf(text) !== -1) {
                return;
            }
            // maxより長い場合はエラーとなる
            var ruleError = new RuleError("漢字が" + (maxLength + 1) + "つ以上連続しています: " + text, {
                index: index
            });
            report(node, ruleError);
        });
    });
};
//# sourceMappingURL=textlint-rule-max-kanji-continuous-len.js.map