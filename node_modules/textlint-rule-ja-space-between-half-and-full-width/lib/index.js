// LICENSE : MIT
"use strict";

var _textlintRuleHelper = require("textlint-rule-helper");

var _matchIndex = require("match-index");

var assert = require("assert");
/*
 全角文字と半角文字の間にスペースを入れるかどうか
 */


var PunctuationRegExp = /[。、]/;
var defaultOptions = {
  // スペースを入れるかどうか
  // "never" or "always"
  space: "never",
  // [。、,.]を例外とするかどうか
  exceptPunctuation: true,
  // プレーンテキスト以外を対象とするか See https://github.com/textlint/textlint-rule-helper#rulehelperisplainstrnodenode-boolean
  lintStyledNode: false
};

function reporter(context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var {
    Syntax,
    RuleError,
    report,
    fixer,
    getSource
  } = context;
  var helper = new _textlintRuleHelper.RuleHelper();
  var spaceOption = options.space || defaultOptions.space;
  var exceptPunctuation = options.exceptPunctuation !== undefined ? options.exceptPunctuation : defaultOptions.exceptPunctuation;
  var lintStyledNode = options.lintStyledNode !== undefined ? options.lintStyledNode : defaultOptions.lintStyledNode;
  assert(spaceOption === "always" || spaceOption === "never", "\"space\" options should be \"always\" or \"never\".");
  /**
   * `text`を対象に例外オプションを取り除くfilter関数を返す
   * @param {string} text テスト対象のテキスト全体
   * @param {number} padding +1 or -1
   * @returns {function(*, *)}
   */

  var createFilter = (text, padding) => {
    /**
     * `exceptPunctuation`で指定された例外を取り除く
     * @param {Object} match
     * @returns {boolean}
     */
    return match => {
      var targetChar = text[match.index + padding];

      if (!targetChar) {
        return false;
      }

      if (exceptPunctuation && PunctuationRegExp.test(targetChar)) {
        return false;
      }

      return true;
    };
  }; // Never: アルファベットと全角の間はスペースを入れない


  var noSpaceBetween = (node, text) => {
    var betweenHanAndZen = (0, _matchIndex.matchCaptureGroupAll)(text, /[A-Za-z0-9]([ 　])(?:[、。]|[\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])/);
    var betweenZenAndHan = (0, _matchIndex.matchCaptureGroupAll)(text, /(?:[、。]|[\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])([ 　])[A-Za-z0-9]/);

    var reportMatch = match => {
      var {
        index
      } = match;
      report(node, new RuleError("原則として、全角文字と半角文字の間にスペースを入れません。", {
        index: match.index,
        fix: fixer.replaceTextRange([index, index + 1], "")
      }));
    };

    betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);
    betweenZenAndHan.filter(createFilter(text, -1)).forEach(reportMatch);
  }; // Always: アルファベットと全角の間はスペースを入れる


  var needSpaceBetween = (node, text) => {
    var betweenHanAndZen = (0, _matchIndex.matchCaptureGroupAll)(text, /([A-Za-z0-9])(?:[、。]|[\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])/);
    var betweenZenAndHan = (0, _matchIndex.matchCaptureGroupAll)(text, /([、。]|[\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])[A-Za-z0-9]/);

    var reportMatch = match => {
      var {
        index
      } = match;
      report(node, new RuleError("原則として、全角文字と半角文字の間にスペースを入れます。", {
        index: match.index,
        fix: fixer.replaceTextRange([index + 1, index + 1], " ")
      }));
    };

    betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);
    betweenZenAndHan.filter(createFilter(text, 0)).forEach(reportMatch);
  };

  return {
    [Syntax.Str](node) {
      if (!lintStyledNode && !helper.isPlainStrNode(node)) {
        return;
      }

      var text = getSource(node);

      if (spaceOption === "always") {
        needSpaceBetween(node, text);
      } else if (spaceOption === "never") {
        noSpaceBetween(node, text);
      }
    }

  };
}

module.exports = {
  linter: reporter,
  fixer: reporter
};
//# sourceMappingURL=index.js.map