{"version":3,"sources":["../src/index.js"],"names":["assert","require","PunctuationRegExp","defaultOptions","space","exceptPunctuation","lintStyledNode","reporter","context","options","Syntax","RuleError","report","fixer","getSource","helper","RuleHelper","spaceOption","undefined","createFilter","text","padding","match","targetChar","index","test","noSpaceBetween","node","betweenHanAndZen","betweenZenAndHan","reportMatch","fix","replaceTextRange","filter","forEach","needSpaceBetween","Str","isPlainStrNode","module","exports","linter"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\n/*\n 全角文字と半角文字の間にスペースを入れるかどうか\n */\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport {matchCaptureGroupAll} from \"match-index\";\nconst PunctuationRegExp = /[。、]/;\nconst defaultOptions = {\n    // スペースを入れるかどうか\n    // \"never\" or \"always\"\n    space: \"never\",\n    // [。、,.]を例外とするかどうか\n    exceptPunctuation: true,\n    // プレーンテキスト以外を対象とするか See https://github.com/textlint/textlint-rule-helper#rulehelperisplainstrnodenode-boolean\n    lintStyledNode: false,\n};\nfunction reporter(context, options = {}) {\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const helper = new RuleHelper();\n    const spaceOption = options.space || defaultOptions.space;\n    const exceptPunctuation = options.exceptPunctuation !== undefined\n        ? options.exceptPunctuation\n        : defaultOptions.exceptPunctuation;\n    const lintStyledNode = options.lintStyledNode !== undefined\n        ? options.lintStyledNode\n        : defaultOptions.lintStyledNode;\n    assert(spaceOption === \"always\" || spaceOption === \"never\", `\"space\" options should be \"always\" or \"never\".`);\n    /**\n     * `text`を対象に例外オプションを取り除くfilter関数を返す\n     * @param {string} text テスト対象のテキスト全体\n     * @param {number} padding +1 or -1\n     * @returns {function(*, *)}\n     */\n    const createFilter = (text, padding) => {\n        /**\n         * `exceptPunctuation`で指定された例外を取り除く\n         * @param {Object} match\n         * @returns {boolean}\n         */\n        return (match) => {\n            const targetChar = text[match.index + padding];\n            if (!targetChar) {\n                return false;\n            }\n            if (exceptPunctuation && PunctuationRegExp.test(targetChar)) {\n                return false;\n            }\n            return true;\n        }\n    };\n    // Never: アルファベットと全角の間はスペースを入れない\n    const noSpaceBetween = (node, text) => {\n        const betweenHanAndZen = matchCaptureGroupAll(text, /[A-Za-z0-9]([ 　])(?:[、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])/);\n        const betweenZenAndHan = matchCaptureGroupAll(text, /(?:[、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])([ 　])[A-Za-z0-9]/);\n        const reportMatch = (match) => {\n            const {index} = match;\n            report(node, new RuleError(\"原則として、全角文字と半角文字の間にスペースを入れません。\", {\n                index: match.index,\n                fix: fixer.replaceTextRange([index, index + 1], \"\")\n            }));\n        };\n        betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);\n        betweenZenAndHan.filter(createFilter(text, -1)).forEach(reportMatch);\n    };\n\n    // Always: アルファベットと全角の間はスペースを入れる\n    const needSpaceBetween = (node, text) => {\n        const betweenHanAndZen = matchCaptureGroupAll(text, /([A-Za-z0-9])(?:[、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])/);\n        const betweenZenAndHan = matchCaptureGroupAll(text, /([、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])[A-Za-z0-9]/);\n        const reportMatch = (match) => {\n            const {index} = match;\n            report(node, new RuleError(\"原則として、全角文字と半角文字の間にスペースを入れます。\", {\n                index: match.index,\n                fix: fixer.replaceTextRange([index + 1, index + 1], \" \")\n            }));\n        };\n        betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);\n        betweenZenAndHan.filter(createFilter(text, 0)).forEach(reportMatch);\n    };\n    return {\n        [Syntax.Str](node){\n            if (!lintStyledNode && !helper.isPlainStrNode(node)) {\n                return;\n            }\n            const text = getSource(node);\n\n            if (spaceOption === \"always\") {\n                needSpaceBetween(node, text)\n            } else if (spaceOption === \"never\") {\n                noSpaceBetween(node, text);\n            }\n\n        }\n    }\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"index.js"}