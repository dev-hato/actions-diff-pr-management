{"version":3,"sources":["../src/index.js"],"names":["isJapaneseChar","text","test","defaultOptions","reporter","context","options","Syntax","RuleError","report","fixer","getSource","allowBeforeSpace","before","allowAfterSpace","after","Code","node","nodeText","textWithPadding","beforeChar","beforeBeforeChar","existBeforeChar","afterChar","length","afterAfterChar","existAfterChar","index","fix","insertTextBeforeRange","replaceTextRange","insertTextAfterRange","module","exports","linter"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst isJapaneseChar = (text) => {\n    return /^(?:[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])$/.test(text);\n};\nconst defaultOptions = {\n    \"before\": false,\n    \"after\": false\n};\nfunction reporter(context, options) {\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const allowBeforeSpace = options.before || defaultOptions.before;\n    const allowAfterSpace = options.after || defaultOptions.after;\n    return {\n        [Syntax.Code](node){\n            const nodeText = getSource(node);\n            // |  `code`  |\n            // InlineCodeの前後2文字文を取得\n            // スペース + 前後の文字を取るため\n            // 文字が日本語以外はチェック対象にしないようにするため\n            const textWithPadding = getSource(node, 2, 2);\n            if (!textWithPadding) {\n                return;\n            }\n            const beforeChar = textWithPadding[1];\n            const beforeBeforeChar = textWithPadding[0];\n            const existBeforeChar = nodeText[0] !== beforeChar;\n            const afterChar = textWithPadding[textWithPadding.length - 2];\n            const afterAfterChar = textWithPadding[textWithPadding.length - 1];\n            const existAfterChar = nodeText[textWithPadding.length - 1] !== afterChar;\n            // InlineCodeの前に文字が存在している時のみチェック\n            if (existBeforeChar) {\n                if (allowBeforeSpace) {\n                    if (beforeChar !== \" \" && isJapaneseChar(beforeChar)) {\n                        report(node, new RuleError(\"インラインコードの前にスペースを入れてください。\", {\n                            index: -1,// before `\n                            fix: fixer.insertTextBeforeRange([0, 0], \" \")\n                        }));\n                    }\n                } else {\n                    if (beforeChar === \" \" && isJapaneseChar(beforeBeforeChar)) {\n                        report(node, new RuleError(\"インラインコードの前にスペースを入れません。\", {\n                            index: -1, // before `\n                            fix: fixer.replaceTextRange([-1, 0], \"\")\n                        }));\n                    }\n                }\n            }\n            // InlineCodeの後に文字が存在している時のみチェック\n            if (existAfterChar) {\n                if (allowAfterSpace) {\n                    if (afterChar !== \" \" && isJapaneseChar(afterChar)) {\n                        report(node, new RuleError(\"インラインコードの後にスペースを入れてください。\", {\n                            index: nodeText.length,\n                            fix: fixer.insertTextAfterRange([0, nodeText.length], \" \")\n                        }));\n                    }\n                } else {\n                    if (afterChar === \" \" && isJapaneseChar(afterAfterChar)) {\n                        report(node, new RuleError(\"インラインコードの後にスペースを入れません。\", {\n                            index: nodeText.length + 1,\n                            fix: fixer.replaceTextRange([nodeText.length, nodeText.length + 1], \"\")\n                        }));\n                    }\n                }\n            }\n        }\n    }\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};"],"file":"index.js"}