// LICENSE : MIT
"use strict";

var isJapaneseChar = text => {
  return /^(?:[\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])$/.test(text);
};

var defaultOptions = {
  "before": false,
  "after": false
};

function reporter(context, options) {
  var {
    Syntax,
    RuleError,
    report,
    fixer,
    getSource
  } = context;
  var allowBeforeSpace = options.before || defaultOptions.before;
  var allowAfterSpace = options.after || defaultOptions.after;
  return {
    [Syntax.Code](node) {
      var nodeText = getSource(node); // |  `code`  |
      // InlineCodeの前後2文字文を取得
      // スペース + 前後の文字を取るため
      // 文字が日本語以外はチェック対象にしないようにするため

      var textWithPadding = getSource(node, 2, 2);

      if (!textWithPadding) {
        return;
      }

      var beforeChar = textWithPadding[1];
      var beforeBeforeChar = textWithPadding[0];
      var existBeforeChar = nodeText[0] !== beforeChar;
      var afterChar = textWithPadding[textWithPadding.length - 2];
      var afterAfterChar = textWithPadding[textWithPadding.length - 1];
      var existAfterChar = nodeText[textWithPadding.length - 1] !== afterChar; // InlineCodeの前に文字が存在している時のみチェック

      if (existBeforeChar) {
        if (allowBeforeSpace) {
          if (beforeChar !== " " && isJapaneseChar(beforeChar)) {
            report(node, new RuleError("インラインコードの前にスペースを入れてください。", {
              index: -1,
              // before `
              fix: fixer.insertTextBeforeRange([0, 0], " ")
            }));
          }
        } else {
          if (beforeChar === " " && isJapaneseChar(beforeBeforeChar)) {
            report(node, new RuleError("インラインコードの前にスペースを入れません。", {
              index: -1,
              // before `
              fix: fixer.replaceTextRange([-1, 0], "")
            }));
          }
        }
      } // InlineCodeの後に文字が存在している時のみチェック


      if (existAfterChar) {
        if (allowAfterSpace) {
          if (afterChar !== " " && isJapaneseChar(afterChar)) {
            report(node, new RuleError("インラインコードの後にスペースを入れてください。", {
              index: nodeText.length,
              fix: fixer.insertTextAfterRange([0, nodeText.length], " ")
            }));
          }
        } else {
          if (afterChar === " " && isJapaneseChar(afterAfterChar)) {
            report(node, new RuleError("インラインコードの後にスペースを入れません。", {
              index: nodeText.length + 1,
              fix: fixer.replaceTextRange([nodeText.length, nodeText.length + 1], "")
            }));
          }
        }
      }
    }

  };
}

module.exports = {
  linter: reporter,
  fixer: reporter
};
//# sourceMappingURL=index.js.map