// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _textlintRuleHelper = require("textlint-rule-helper");

var _kuromojin = require("kuromojin");

function isTargetVerb(token) {
  return token.pos == "動詞" && token.pos_detail_1 == "自立" && token.conjugated_type == "一段" && token.conjugated_form == "未然形";
}

function isRaWord(token) {
  return token.pos == "動詞" && token.pos_detail_1 == "接尾" && token.basic_form == "れる";
}

function isSpecialCases(token) {
  // Due to kuromoji.js's behavior, some dropping-ra words will be tokenized as one.
  // See also https://github.com/takuyaa/kuromoji.js/issues/28
  return token.pos == "動詞" && (token.basic_form == "来れる" || token.basic_form == "見れる");
}

function _default(context) {
  var helper = new _textlintRuleHelper.RuleHelper(context);
  var {
    Syntax,
    report,
    getSource,
    RuleError
  } = context;
  return {
    [Syntax.Str](node) {
      if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
        return;
      }

      var text = getSource(node);
      return (0, _kuromojin.tokenize)(text).then(tokens => {
        tokens.forEach(token => {
          if (isSpecialCases(token)) {
            report(node, new RuleError("ら抜き言葉を使用しています。", {
              index: token.word_position
            }));
          }
        }); // tokenのペアがない場合は無視する

        if (tokens.length <= 1) {
          return;
        }

        tokens.reduce((prev, current) => {
          if (isTargetVerb(prev) && isRaWord(current)) {
            report(node, new RuleError("ら抜き言葉を使用しています。", {
              index: current.word_position - 1
            }));
          }

          return current;
        });
      });
    }

  };
}

;
//# sourceMappingURL=no-dropping-the-ra.js.map