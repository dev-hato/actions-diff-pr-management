{"version":3,"sources":["../src/textlint-rule-no-nfd.ts"],"names":["unorm","require","reporter","context","Syntax","RuleError","report","fixer","getSource","helper","RuleHelper","Str","node","isChildNode","Link","Image","BlockQuote","Emphasis","text","forEach","index","dakutenChars","slice","nfdlized","replace","expectedText","nfc","ruleError","fix","replaceTextRange","module","exports","linter"],"mappings":"AAAA;AACA;;AACA;;AACA;;AAGA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,QAA8B,GAAG,SAAjCA,QAAiC,CAAUC,OAAV,EAAmB;AACtD,MAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,SAAT;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA,KAA5B;AAAmCC,IAAAA;AAAnC,MAAgDL,OAAtD;AACA,MAAMM,MAAM,GAAG,IAAIC,8BAAJ,CAAeP,OAAf,CAAf;AACA,SAAO;AACH,KAACC,MAAM,CAACO,GAAR,EAAaC,IAAb,EAAmB;AACf,UAAIH,MAAM,CAACI,WAAP,CAAmBD,IAAnB,EAAyB,CAACR,MAAM,CAACU,IAAR,EAAcV,MAAM,CAACW,KAArB,EAA4BX,MAAM,CAACY,UAAnC,EAA+CZ,MAAM,CAACa,QAAtD,CAAzB,CAAJ,EAA+F;AAC3F;AACH;;AACD,UAAMC,IAAI,GAAGV,SAAS,CAACI,IAAD,CAAtB;AACA,4CAAqBM,IAArB,EAA2B,+BAA3B,EAA4DC,OAA5D,CAAoE,UAAa;AAAA,YAAZ;AAACC,UAAAA;AAAD,SAAY;;AAC7E,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACb;AACH,SAH4E,CAI7E;;;AACA,YAAMC,YAAY,GAAGH,IAAI,CAACI,KAAL,CAAWF,KAAK,GAAG,CAAnB,EAAsBA,KAAK,GAAG,CAA9B,CAArB;AACA,YAAMG,QAAQ,GAAGF,YAAY,CAACG,OAAb,CAAqB,QAArB,EAA+B,QAA/B,EAAyCA,OAAzC,CAAiD,QAAjD,EAA2D,QAA3D,CAAjB;AACA,YAAMC,YAAY,GAAGzB,KAAK,CAAC0B,GAAN,CAAUH,QAAV,CAArB;AACA,YAAMI,SAAS,GAAG,IAAItB,SAAJ,uEAAkEgB,YAAlE,qBAAuFI,YAAvF,SAAwG;AACtHL,UAAAA,KADsH;AAEtHQ,UAAAA,GAAG,EAAErB,KAAK,CAACsB,gBAAN,CAAuB,CAACT,KAAK,GAAG,CAAT,EAAYA,KAAK,GAAG,CAApB,CAAvB,EAA+CK,YAA/C;AAFiH,SAAxG,CAAlB;AAIAnB,QAAAA,MAAM,CAACM,IAAD,EAAOe,SAAP,CAAN;AACH,OAbD;AAcH;;AApBE,GAAP;AAsBH,CAzBD;;AA2BAG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAE9B,QADK;AAEbK,EAAAA,KAAK,EAAEL;AAFM,CAAjB","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {matchCaptureGroupAll} from \"match-index\"\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport {TextlintRuleReporter} from \"@textlint/types\";\n\nconst unorm = require(\"unorm\");\n\nconst reporter: TextlintRuleReporter = function (context) {\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const helper = new RuleHelper(context);\n    return {\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            matchCaptureGroupAll(text, /([\\u309b\\u309c\\u309a\\u3099])/g).forEach(({index}) => {\n                if (index === 0) {\n                    return;\n                }\n                // \\u309b\\u309c => \\u309a\\u3099\n                const dakutenChars = text.slice(index - 1, index + 1);\n                const nfdlized = dakutenChars.replace(\"\\u309B\", \"\\u3099\").replace(\"\\u309C\", \"\\u309A\");\n                const expectedText = unorm.nfc(nfdlized);\n                const ruleError = new RuleError(`Disallow to use NFD(well-known as UTF8-MAC 濁点): \"${dakutenChars}\" => \"${expectedText}\"`, {\n                    index,\n                    fix: fixer.replaceTextRange([index - 1, index + 1], expectedText)\n                });\n                report(node, ruleError);\n            });\n        }\n    }\n};\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"textlint-rule-no-nfd.js"}