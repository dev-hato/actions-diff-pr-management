{"version":3,"file":"targetPattern.js","sourceRoot":"","sources":["targetPattern.ts"],"names":[],"mappings":";;AAAA,yCAAwF;AAGxF;IAGI,uBAAY,GAA+B;QACvC,IAAI,CAAC,GAAG,EAAE;YACN,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACtC;QACD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YACzB,IAAI,CAAC,OAAO,GAAG,0BAAiB,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,2BAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;YAC7E,IAAI,CAAC,OAAO,GAAG,wBAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC7C,OAAO;SACV;aAAM;YACH,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;aAC1C;YACD,IAAI,CAAC,OAAO,GAAG,0BAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,wBAAe,CAAC,IAAI,MAAM,CAAC,2BAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC9G,IAAI,CAAC,OAAO,GAAG,wBAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAChD;IACL,CAAC;IAED,6BAAK,GAAL;QACI,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,8BAAM,GAAN;QACI,IAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,KAAK,IAAM,GAAG,IAAI,IAAI,EAAE;YACpB,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACxB,SAAS;aACZ;YACD,IAAM,KAAK,GAAS,IAAK,CAAC,GAAG,CAAC,CAAC;YAC/B,IAAI,KAAK,YAAY,MAAM,EAAE;gBACzB,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;gBAC5B,SAAS;aACZ;YACD,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACpB;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IACL,oBAAC;AAAD,CAAC,AAvCD,IAuCC;AAvCY,sCAAa","sourcesContent":["import { parseRegExpString, addDefaultFlags, escapeSpecialChars } from \"./utils/regexp\";\nimport * as raw from \"./raw\";\n\nexport class TargetPattern {\n    pattern: RegExp;\n\n    constructor(src: string | raw.TargetPattern) {\n        if (!src) {\n            throw new Error(\"src is requried\");\n        }\n        if (typeof src === \"string\") {\n            this.pattern = parseRegExpString(src) || new RegExp(escapeSpecialChars(src));\n            this.pattern = addDefaultFlags(this.pattern);\n            return;\n        } else {\n            if (!src.pattern) {\n                throw new Error(\"pattern is requried\");\n            }\n            this.pattern = parseRegExpString(src.pattern) || addDefaultFlags(new RegExp(escapeSpecialChars(src.pattern)));\n            this.pattern = addDefaultFlags(this.pattern);\n        }\n    }\n\n    reset() {\n        this.pattern.lastIndex = 0;\n    }\n\n    toJSON() {\n        const alt: any = {};\n        for (const key in this) {\n            if (key.indexOf(\"_\") === 0) {\n                continue;\n            }\n            const value = (<any>this)[key];\n            if (value instanceof RegExp) {\n                alt[key] = value.toString();\n                continue;\n            }\n            alt[key] = value;\n        }\n        return alt;\n    }\n}\n"]}