{"version":3,"file":"regexp.js","sourceRoot":"","sources":["regexp.ts"],"names":[],"mappings":";;AAAA,IAAM,YAAY,GAAG,qBAAqB,CAAC;AAE3C,IAAM,eAAe,GAAG,gEAAgE,CAAC;AACzF,IAAM,eAAe,GAAG,gEAAgE,CAAC;AAE5E,QAAA,wBAAwB,GAAG,CAAC;IACrC,IAAI;QACA,IAAI,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QACpB,OAAO,IAAI,CAAC;KACf;IAAC,OAAO,CAAC,EAAE;QACR,OAAO,KAAK,CAAC;KAChB;AACL,CAAC,CAAC,EAAE,CAAC;AAEL,yDAAyD;AAC5C,QAAA,MAAM,GAAG,OAAO,CAAC;AACjB,QAAA,MAAM,GAAG,OAAO,CAAC;AAC9B,6BAA6B;AAChB,QAAA,OAAO,GAAG,oEAAoE,CAAC;AAC/E,QAAA,MAAM,GAAG,OAAO,CAAC,CAAC,cAAM,EAAE,cAAM,EAAE,eAAO,CAAC,CAAC,CAAC;AAEzD,IAAM,kBAAkB,GAAG,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AAExD,SAAgB,MAAM,CAAC,IAAyB,EAAE,KAAc;IAC5D,IAAI,SAAS,GAAG,KAAK,IAAI,EAAE,CAAC;IAC5B,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAS,UAAC,CAAC,EAAE,CAAC;QACpC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,CAAC;SAChB;aAAM,IAAI,CAAC,YAAY,MAAM,EAAE;YAC5B,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YACzB,IAAM,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvD,IAAI,WAAW,EAAE;gBACb,IAAI,SAAS,KAAK,YAAY,EAAE;oBAC5B,MAAM,IAAI,KAAK,CAAC,+BAA6B,SAAS,aAAQ,YAAY,uBAChF,CAAC,6CAA0C,CAAC,CAAC;iBAC1C;aACJ;YACD,SAAS,GAAG,YAAY,CAAC;YACzB,WAAW,GAAG,IAAI,CAAC;YACnB,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;SACvB;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,mBAAiB,CAAG,CAAC,CAAC;SACzC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACzC,CAAC;AAvBD,wBAuBC;AAED,SAAgB,OAAO,CAAC,IAAyB,EAAE,KAAc;IAC7D,IAAI,SAAS,GAAG,KAAK,IAAI,EAAE,CAAC;IAC5B,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG;QACvB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YACzB,OAAO,GAAG,CAAC;SACd;aAAM,IAAI,GAAG,YAAY,MAAM,EAAE;YAC9B,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC3B,IAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACzD,IAAI,WAAW,EAAE;gBACb,IAAI,SAAS,KAAK,YAAY,EAAE;oBAC5B,MAAM,IAAI,KAAK,CAAC,+BAA6B,SAAS,aAAQ,YAAY,uBAChF,GAAG,6CAA0C,CAAC,CAAC;iBAC5C;aACJ;YACD,SAAS,GAAG,YAAY,CAAC;YACzB,WAAW,GAAG,IAAI,CAAC;YACnB,OAAO,GAAG,CAAC,MAAM,CAAC;SACrB;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,mBAAiB,GAAK,CAAC,CAAC;SAC3C;IACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACb,OAAO,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAC1E,CAAC;AAvBD,0BAuBC;AAED,SAAgB,WAAW,CAAC,GAAoB;IAC5C,IAAI,MAAc,CAAC;IACnB,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QACzB,MAAM,GAAG,GAAG,CAAC;KAChB;SAAM,IAAI,GAAG,YAAY,MAAM,EAAE;QAC9B,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;QACpB,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;KACrB;SAAM;QACH,MAAM,IAAI,KAAK,CAAC,mBAAiB,GAAK,CAAC,CAAC;KAC3C;IACD,OAAO,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;AACjD,CAAC;AAZD,kCAYC;AAED,SAAgB,iBAAiB,CAAC,GAAW;IACzC,IAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IACvC,IAAI,CAAC,MAAM,EAAE;QACT,OAAO,IAAI,CAAC;KACf;IACD,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC;AAND,8CAMC;AAED,SAAgB,cAAc,CAAC,GAAW;IACtC,IAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;QAC9B,IAAM,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;QACzD,IAAM,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;QACzD,IAAI,OAAO,KAAK,CAAC,CAAC,IAAI,OAAO,KAAK,CAAC,CAAC,EAAE;YAClC,gBAAgB;YAChB,OAAO,CAAC,CAAC;SACZ;aAAM,IAAI,OAAO,KAAK,OAAO,EAAE;YAC5B,MAAM;YACN,OAAO,MAAI,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,MAAG,CAAC;SACrD;aAAM;YACH,OAAO,MAAI,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,GAAG,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,MAAG,CAAC;SACvH;IACL,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACZ,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;AAC9B,CAAC;AAfD,wCAeC;AAED,SAAgB,eAAe,CAAC,MAAc;IAC1C,IAAI,KAAK,GAAG,IAAI,CAAC;IACjB,IAAI,gCAAwB,EAAE;QAC1B,KAAK,IAAI,GAAG,CAAC;KAChB;IACD,IAAI,MAAM,CAAC,UAAU,EAAE;QACnB,KAAK,IAAI,GAAG,CAAC;KAChB;IACD,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAC5C,CAAC;AATD,0CASC;AAED,SAAgB,kBAAkB,CAAC,GAAW;IAC1C,kBAAkB,CAAC,OAAO,CAAC,UAAA,IAAI;QAC3B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,OAAK,IAAM,EAAE,GAAG,CAAC,EAAE,OAAK,IAAM,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACf,CAAC;AALD,gDAKC;AAED,SAAgB,UAAU,CAAC,MAAc,EAAE,GAAW;IAClD,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACzC;IACD,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACzC;IACD,IAAM,UAAU,GAAsB,EAAE,CAAC;IACzC,IAAI,MAA8B,CAAC;IACnC,GAAG;QACC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAI,MAAM,EAAE;YACR,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC3B;KACJ,QAAQ,MAAM,EAAE;IAEjB,OAAO,UAAU,CAAC;AACtB,CAAC;AAjBD,gCAiBC;AAED,SAAgB,MAAM,CAAC,CAAS,EAAE,CAAS;IACvC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;QACvB,OAAO,KAAK,CAAC;KAChB;IACD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;QACvB,OAAO,KAAK,CAAC;KAChB;IACD,IAAI,CAAC,CAAC,UAAU,KAAK,CAAC,CAAC,UAAU,EAAE;QAC/B,OAAO,KAAK,CAAC;KAChB;IACD,IAAI,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,SAAS,EAAE;QAC7B,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAfD,wBAeC","sourcesContent":["const regexpRegexp = /^\\/(.*)\\/([gimy]*)$/;\n\nconst hankakuAlphaNum = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\nconst zenkakuAlphaNum = \"ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ０１２３４５６７８９\";\n\nexport const supportRegExpUnicodeFlag = (() => {\n    try {\n        new RegExp(\"\", \"u\");\n        return true;\n    } catch (e) {\n        return false;\n    }\n})();\n\n// http://www.tamasoft.co.jp/ja/general-info/unicode.html\nexport const jpHira = /[ぁ-ゖ]/;\nexport const jpKana = /[ァ-ヺ]/;\n// http://tama-san.com/?p=196\nexport const jpKanji = /(?:[々〇〻\\u3400-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF])/;\nexport const jpChar = combine([jpHira, jpKana, jpKanji]);\n\nconst regexpSpecialChars = \"¥*+.?{}()[]^$-|/\".split(\"\");\n\nexport function concat(args: (string | RegExp)[], flags?: string): RegExp {\n    let prevFlags = flags || \"\";\n    let foundRegExp = false;\n    const result = args.reduce<string>((p, c) => {\n        if (typeof c === \"string\") {\n            return p + c;\n        } else if (c instanceof RegExp) {\n            c.flags.split(\"\").sort();\n            const currentFlags = c.flags.split(\"\").sort().join(\"\");\n            if (foundRegExp) {\n                if (prevFlags !== currentFlags) {\n                    throw new Error(`combining different flags ${prevFlags} and ${currentFlags}.\nThe pattern ${c} has different flag with other patterns.`);\n                }\n            }\n            prevFlags = currentFlags;\n            foundRegExp = true;\n            return p + c.source;\n        } else {\n            throw new Error(`unknown type: ${c}`);\n        }\n    }, \"\");\n    return new RegExp(result, prevFlags);\n}\n\nexport function combine(args: (string | RegExp)[], flags?: string): RegExp {\n    let prevFlags = flags || \"\";\n    let foundRegExp = false;\n    const result = args.map(arg => {\n        if (typeof arg === \"string\") {\n            return arg;\n        } else if (arg instanceof RegExp) {\n            arg.flags.split(\"\").sort();\n            const currentFlags = arg.flags.split(\"\").sort().join(\"\");\n            if (foundRegExp) {\n                if (prevFlags !== currentFlags) {\n                    throw new Error(`combining different flags ${prevFlags} and ${currentFlags}.\nThe pattern ${arg} has different flag with other patterns.`);\n                }\n            }\n            prevFlags = currentFlags;\n            foundRegExp = true;\n            return arg.source;\n        } else {\n            throw new Error(`unknown type: ${arg}`);\n        }\n    }).join(\"|\");\n    return concat([\"(?:\", result, \")\"], foundRegExp ? prevFlags : void 0);\n}\n\nexport function addBoundary(arg: string | RegExp): RegExp {\n    let result: string;\n    let flags = \"\";\n    if (typeof arg === \"string\") {\n        result = arg;\n    } else if (arg instanceof RegExp) {\n        result = arg.source;\n        flags = arg.flags;\n    } else {\n        throw new Error(`unknown type: ${arg}`);\n    }\n    return concat([\"\\\\b\", result, \"\\\\b\"], flags);\n}\n\nexport function parseRegExpString(str: string): RegExp | null {\n    const result = str.match(regexpRegexp);\n    if (!result) {\n        return null;\n    }\n    return new RegExp(result[1], result[2]);\n}\n\nexport function spreadAlphaNum(str: string): RegExp {\n    const result = str.split(\"\").map(v => {\n        const tmpIdx1 = hankakuAlphaNum.indexOf(v.toUpperCase());\n        const tmpIdx2 = hankakuAlphaNum.indexOf(v.toLowerCase());\n        if (tmpIdx1 === -1 && tmpIdx2 === -1) {\n            // not alpha num\n            return v;\n        } else if (tmpIdx1 === tmpIdx2) {\n            // num\n            return `[${v}${zenkakuAlphaNum.charAt(tmpIdx1)}]`;\n        } else {\n            return `[${v.toUpperCase()}${v.toLowerCase()}${zenkakuAlphaNum.charAt(tmpIdx1)}${zenkakuAlphaNum.charAt(tmpIdx2)}]`;\n        }\n    }).join(\"\");\n    return new RegExp(result);\n}\n\nexport function addDefaultFlags(regexp: RegExp) {\n    let flags = \"gm\";\n    if (supportRegExpUnicodeFlag) {\n        flags += \"u\";\n    }\n    if (regexp.ignoreCase) {\n        flags += \"i\";\n    }\n    return new RegExp(regexp.source, flags);\n}\n\nexport function escapeSpecialChars(str: string): string {\n    regexpSpecialChars.forEach(char => {\n        str = str.replace(new RegExp(`\\\\${char}`, \"g\"), `\\\\${char}`);\n    });\n    return str;\n}\n\nexport function collectAll(regexp: RegExp, src: string) {\n    if (!regexp.global) {\n        throw new Error(\"g flag is required\");\n    }\n    if (!regexp.source) {\n        throw new Error(\"source is required\");\n    }\n    const resultList: RegExpExecArray[] = [];\n    let result: RegExpExecArray | null;\n    do {\n        result = regexp.exec(src);\n        if (result) {\n            resultList.push(result);\n        }\n    } while (result);\n\n    return resultList;\n}\n\nexport function equals(a: RegExp, b: RegExp) {\n    if (a.source !== b.source) {\n        return false;\n    }\n    if (a.global !== b.global) {\n        return false;\n    }\n    if (a.ignoreCase !== b.ignoreCase) {\n        return false;\n    }\n    if (a.multiline !== b.multiline) {\n        return false;\n    }\n\n    return true;\n}\n"]}