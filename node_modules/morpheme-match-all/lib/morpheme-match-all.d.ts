import { ExpectedDictionary } from "./Expector";
import { ExpectedToken, Token } from "morpheme-match";
export declare type ExpectedDictionaries<T extends ExpectedToken, Dictionary extends ExpectedDictionary<T>> = Dictionary[];
export { ExpectedDictionary };
export declare type MatchResult<T extends ExpectedToken, Dictionary extends ExpectedDictionary<T>> = {
    tokens: Token[];
    index: number;
    skipped: boolean[];
    dict: Dictionary & ExpectedDictionary<T>;
};
/**
 * Create Matcher function for match all multiple tokens
 */
export declare function createMatcher<T extends Partial<ExpectedToken>, Dictionary extends Partial<ExpectedDictionary<T>>>(dictionaries: ExpectedDictionaries<T & ExpectedToken, Dictionary & ExpectedDictionary<T>>): (tokens: Token[]) => MatchResult<T & ExpectedToken, Dictionary & ExpectedDictionary<T>>[];
