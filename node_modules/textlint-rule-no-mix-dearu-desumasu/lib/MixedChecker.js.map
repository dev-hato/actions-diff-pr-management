{"version":3,"sources":["../src/MixedChecker.js"],"names":["MixedChecker","constructor","context","options","dearuCount","desumasuCount","dearuHitList","desumasuHitList","_queue","Promise","resolve","check","node","text","then","analyzeOptions","ignoreConjunction","isStrict","results","retDearu","filter","isDearu","retDesumasu","isDesumasu","length","push","matches","checkout","ignoreManger","isOver","RuleError","report","overType","getOverType","overHitList","forEach","lastHitNode","token","hitIndex","range","index","isIgnoredIndex","ruleError","outputMessage","preferDearu","preferDesumasu","value"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { analyze, isDearu, isDesumasu } from \"analyze-desumasu-dearu\";\nexport default class MixedChecker {\n    /**\n     * @param context\n     * @param {{preferDearu:boolean, preferDesumasu: boolean}} options\n     */\n    constructor(context, options) {\n        this.context = context;\n        /**\n         * 明示的な優先するタイプの指定\n         * @type {{preferDearu: boolean, preferDesumasu: boolean, isStrict: boolean}}\n         */\n        this.options = options;\n        this.dearuCount = 0;\n        this.desumasuCount = 0;\n        this.dearuHitList = [];\n        this.desumasuHitList = [];\n        this._queue = Promise.resolve();\n    }\n\n    check(node, text) {\n        this._queue = this._queue.then(() => {\n            const analyzeOptions = {\n                ignoreConjunction: !this.options.isStrict\n            };\n            return analyze(text, analyzeOptions).then((results) => {\n                const retDearu = results.filter(isDearu);\n                const retDesumasu = results.filter(isDesumasu);\n                const dearuCount = this.dearuCount + retDearu.length;\n                const desumasuCount = this.desumasuCount + retDesumasu.length;\n                if (this.dearuCount !== dearuCount) {\n                    this.dearuCount = dearuCount;\n                    this.dearuHitList.push({\n                        node,\n                        matches: retDearu\n                    });\n                }\n                if (this.desumasuCount !== desumasuCount) {\n                    this.desumasuCount = desumasuCount;\n                    this.desumasuHitList.push({\n                        node,\n                        matches: retDesumasu\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * @param {IgnoreManger}ignoreManger\n     * @returns {Promise.<TResult>}\n     */\n    checkout(ignoreManger) {\n        return this._queue.then(() => {\n            if (!this.isOver()) {\n                return;\n            }\n            const RuleError = this.context.RuleError;\n            const report = this.context.report;\n            const overType = this.getOverType();\n            const overHitList = this.overHitList(overType);\n            // List\n            overHitList.forEach(({ node, matches }) => {\n                // Node\n                const lastHitNode = node;\n                // Tokens\n                matches.forEach((token) => {\n                    const hitIndex = node.range[0] + token.index;\n                    if (ignoreManger.isIgnoredIndex(hitIndex)) {\n                        return;\n                    }\n\n                    const ruleError = new RuleError(this.outputMessage(token), {\n                        index: token.index\n                    });\n                    report(lastHitNode, ruleError);\n                });\n            });\n        });\n    }\n\n    isOver() {\n        return this.dearuCount !== 0 && this.desumasuCount !== 0;\n    }\n\n    /**\n     * 優先するtypeを返します。\n     * @returns {*}\n     */\n    getOverType() {\n        if (this.options.preferDearu) {\n            return \"である\";\n        } else if (this.options.preferDesumasu) {\n            return \"ですます\";\n        }\n        if (this.dearuCount > this.desumasuCount) {\n            return \"である\";\n        } else {\n            return \"ですます\";\n        }\n    }\n\n    /**\n     * hist node list\n     * @param overType\n     * @returns {Array}\n     */\n    overHitList(overType) {\n        if (overType === \"である\") {\n            return this.desumasuHitList;\n        } else if (overType === \"ですます\") {\n            return this.dearuHitList;\n        }\n    }\n\n    /**\n     * create message string\n     * @param token\n     * @returns {string}\n     */\n    outputMessage(token) {\n        const overType = this.getOverType();\n        if (overType === \"である\") {\n            // である優先 => 最後の\"ですます\"を表示\n            return `\"である\"調 と \"ですます\"調 が混在\n=> \"である\"調 の文体に、次の \"ですます\"調 の箇所があります: \"${token.value}\"\nTotal:\nである  : ${this.dearuCount}\nですます: ${this.desumasuCount}\n`;\n        } else if (overType === \"ですます\") {\n            // ですます優先 => 最後の\"である\"を表示\n            return `\"である\"調 と \"ですます\"調 が混在\n=> \"ですます\"調 の文体に、次の \"である\"調 の箇所があります: \"${token.value}\"\nTotal:\nである  : ${this.dearuCount}\nですます: ${this.desumasuCount}\n`;\n        }\n    }\n}\n"],"file":"MixedChecker.js"}