// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _analyzeDesumasuDearu = require("analyze-desumasu-dearu");

class MixedChecker {
  /**
   * @param context
   * @param {{preferDearu:boolean, preferDesumasu: boolean}} options
   */
  constructor(context, options) {
    this.context = context;
    /**
     * 明示的な優先するタイプの指定
     * @type {{preferDearu: boolean, preferDesumasu: boolean, isStrict: boolean}}
     */

    this.options = options;
    this.dearuCount = 0;
    this.desumasuCount = 0;
    this.dearuHitList = [];
    this.desumasuHitList = [];
    this._queue = Promise.resolve();
  }

  check(node, text) {
    this._queue = this._queue.then(() => {
      var analyzeOptions = {
        ignoreConjunction: !this.options.isStrict
      };
      return (0, _analyzeDesumasuDearu.analyze)(text, analyzeOptions).then(results => {
        var retDearu = results.filter(_analyzeDesumasuDearu.isDearu);
        var retDesumasu = results.filter(_analyzeDesumasuDearu.isDesumasu);
        var dearuCount = this.dearuCount + retDearu.length;
        var desumasuCount = this.desumasuCount + retDesumasu.length;

        if (this.dearuCount !== dearuCount) {
          this.dearuCount = dearuCount;
          this.dearuHitList.push({
            node,
            matches: retDearu
          });
        }

        if (this.desumasuCount !== desumasuCount) {
          this.desumasuCount = desumasuCount;
          this.desumasuHitList.push({
            node,
            matches: retDesumasu
          });
        }
      });
    });
  }
  /**
   * @param {IgnoreManger}ignoreManger
   * @returns {Promise.<TResult>}
   */


  checkout(ignoreManger) {
    return this._queue.then(() => {
      if (!this.isOver()) {
        return;
      }

      var RuleError = this.context.RuleError;
      var report = this.context.report;
      var overType = this.getOverType();
      var overHitList = this.overHitList(overType); // List

      overHitList.forEach((_ref) => {
        var {
          node,
          matches
        } = _ref;
        // Node
        var lastHitNode = node; // Tokens

        matches.forEach(token => {
          var hitIndex = node.range[0] + token.index;

          if (ignoreManger.isIgnoredIndex(hitIndex)) {
            return;
          }

          var ruleError = new RuleError(this.outputMessage(token), {
            index: token.index
          });
          report(lastHitNode, ruleError);
        });
      });
    });
  }

  isOver() {
    return this.dearuCount !== 0 && this.desumasuCount !== 0;
  }
  /**
   * 優先するtypeを返します。
   * @returns {*}
   */


  getOverType() {
    if (this.options.preferDearu) {
      return "である";
    } else if (this.options.preferDesumasu) {
      return "ですます";
    }

    if (this.dearuCount > this.desumasuCount) {
      return "である";
    } else {
      return "ですます";
    }
  }
  /**
   * hist node list
   * @param overType
   * @returns {Array}
   */


  overHitList(overType) {
    if (overType === "である") {
      return this.desumasuHitList;
    } else if (overType === "ですます") {
      return this.dearuHitList;
    }
  }
  /**
   * create message string
   * @param token
   * @returns {string}
   */


  outputMessage(token) {
    var overType = this.getOverType();

    if (overType === "である") {
      // である優先 => 最後の"ですます"を表示
      return "\"\u3067\u3042\u308B\"\u8ABF \u3068 \"\u3067\u3059\u307E\u3059\"\u8ABF \u304C\u6DF7\u5728\n=> \"\u3067\u3042\u308B\"\u8ABF \u306E\u6587\u4F53\u306B\u3001\u6B21\u306E \"\u3067\u3059\u307E\u3059\"\u8ABF \u306E\u7B87\u6240\u304C\u3042\u308A\u307E\u3059: \"".concat(token.value, "\"\nTotal:\n\u3067\u3042\u308B  : ").concat(this.dearuCount, "\n\u3067\u3059\u307E\u3059: ").concat(this.desumasuCount, "\n");
    } else if (overType === "ですます") {
      // ですます優先 => 最後の"である"を表示
      return "\"\u3067\u3042\u308B\"\u8ABF \u3068 \"\u3067\u3059\u307E\u3059\"\u8ABF \u304C\u6DF7\u5728\n=> \"\u3067\u3059\u307E\u3059\"\u8ABF \u306E\u6587\u4F53\u306B\u3001\u6B21\u306E \"\u3067\u3042\u308B\"\u8ABF \u306E\u7B87\u6240\u304C\u3042\u308A\u307E\u3059: \"".concat(token.value, "\"\nTotal:\n\u3067\u3042\u308B  : ").concat(this.dearuCount, "\n\u3067\u3059\u307E\u3059: ").concat(this.desumasuCount, "\n");
    }
  }

}

exports.default = MixedChecker;
//# sourceMappingURL=MixedChecker.js.map