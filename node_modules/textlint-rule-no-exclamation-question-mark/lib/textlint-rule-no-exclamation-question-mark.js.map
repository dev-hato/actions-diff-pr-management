{"version":3,"sources":["../src/textlint-rule-no-exclamation-question-mark.js"],"names":["isIgnoredRange","matchPatternResults","actual","some","result","startIndex","index","endIndex","BUILTIN_ALLOW_LIST","defaultOptions","allow","allowHalfWidthExclamation","allowFullWidthExclamation","allowHalfWidthQuestion","allowFullWidthQuestion","Mark","HalfWidthExclamation","FullWidthExclamation","HalfWidthQuestion","FullWidthQuestion","module","exports","context","options","Syntax","RuleError","report","getSource","helper","RuleHelper","concat","Str","node","isChildNode","Link","Image","BlockQuote","Emphasis","text","reportIfIncludeMark","markRegExp","ignoreMatch","forEach"],"mappings":"AAAA;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAMA,IAAMA,cAAc,GAAG,CAACC,mBAAD,EAAsBC,MAAtB,KAAiC;AACpD,SAAOD,mBAAmB,CAACE,IAApB,CAA0BC,MAAD,IAAY;AACxC,WAAOA,MAAM,CAACC,UAAP,IAAqBH,MAAM,CAACI,KAA5B,IAAqCJ,MAAM,CAACI,KAAP,IAAgBF,MAAM,CAACG,QAAnE;AACH,GAFM,CAAP;AAGH,CAJD;;AAMA,IAAMC,kBAAkB,GAAG,CAAC,QAAD,CAA3B;AACA,IAAMC,cAAc,GAAG;AACnB;AACAC,EAAAA,KAAK,EAAE,EAFY;AAGnB;AACAC,EAAAA,yBAAyB,EAAE,KAJR;AAKnB;AACAC,EAAAA,yBAAyB,EAAE,KANR;AAOnB;AACAC,EAAAA,sBAAsB,EAAE,KARL;AASnB;AACAC,EAAAA,sBAAsB,EAAE;AAVL,CAAvB;AAYA,IAAMC,IAAI,GAAG;AACTC,EAAAA,oBAAoB,EAAE,KADb;AAETC,EAAAA,oBAAoB,EAAE,KAFb;AAGTC,EAAAA,iBAAiB,EAAE,MAHV;AAITC,EAAAA,iBAAiB,EAAE;AAJV,CAAb;;AAOAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAA6C;AAAA,MAA1BC,OAA0B,uEAAhBd,cAAgB;AAC1D,MAAM;AAAEe,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA;AAA7B,MAA2CL,OAAjD;AACA,MAAMM,MAAM,GAAG,IAAIC,8BAAJ,CAAeP,OAAf,CAAf;AACA,MAAMZ,KAAK,GAAG,CAACa,OAAO,CAACb,KAAR,IAAiBD,cAAc,CAACC,KAAjC,EAAwCoB,MAAxC,CAA+CtB,kBAA/C,CAAd;AACA,MAAMG,yBAAyB,GAAGY,OAAO,CAACZ,yBAAR,IAAqCF,cAAc,CAACE,yBAAtF;AACA,MAAMC,yBAAyB,GAAGW,OAAO,CAACX,yBAAR,IAAqCH,cAAc,CAACG,yBAAtF;AACA,MAAMC,sBAAsB,GAAGU,OAAO,CAACV,sBAAR,IAAkCJ,cAAc,CAACI,sBAAhF;AACA,MAAMC,sBAAsB,GAAGS,OAAO,CAACT,sBAAR,IAAkCL,cAAc,CAACK,sBAAhF;AAEA,SAAO;AACH,KAACU,MAAM,CAACO,GAAR,EAAaC,IAAb,EAAmB;AACf,UAAIJ,MAAM,CAACK,WAAP,CAAmBD,IAAnB,EAAyB,CAACR,MAAM,CAACU,IAAR,EAAcV,MAAM,CAACW,KAArB,EAA4BX,MAAM,CAACY,UAAnC,EAA+CZ,MAAM,CAACa,QAAtD,CAAzB,CAAJ,EAA+F;AAC3F;AACH;;AACD,UAAMC,IAAI,GAAGX,SAAS,CAACK,IAAD,CAAtB;AACA;;;;;;AAKA,UAAMO,mBAAmB,GAAG,CAACD,IAAD,EAAOE,UAAP,KAAsB;AAC9C,YAAMC,WAAW,GAAG,wCAAcH,IAAd,EAAoB5B,KAApB,CAApB;AACA,8CAAqB4B,IAArB,EAA2BE,UAA3B,EAAuCE,OAAvC,CAAgDxC,MAAD,IAAY;AACvD,cAAM;AAAEoC,YAAAA,IAAF;AAAQhC,YAAAA;AAAR,cAAkBJ,MAAxB,CADuD,CAGvD;;AACA,cAAIF,cAAc,CAACyC,WAAD,EAAcvC,MAAd,CAAlB,EAAyC;AACrC;AACH;;AAEDwB,UAAAA,MAAM,CACFM,IADE,EAEF,IAAIP,SAAJ,6BAAkCa,IAAlC,UAA4C;AACxChC,YAAAA;AADwC,WAA5C,CAFE,CAAN;AAMH,SAdD;AAeH,OAjBD,CAVe,CA4Bf;;;AACA,UAAI,CAACK,yBAAL,EAAgC;AAC5B4B,QAAAA,mBAAmB,CAACD,IAAD,EAAOvB,IAAI,CAACC,oBAAZ,CAAnB;AACH;;AACD,UAAI,CAACH,sBAAL,EAA6B;AACzB0B,QAAAA,mBAAmB,CAACD,IAAD,EAAOvB,IAAI,CAACG,iBAAZ,CAAnB;AACH;;AACD,UAAI,CAACN,yBAAL,EAAgC;AAC5B2B,QAAAA,mBAAmB,CAACD,IAAD,EAAOvB,IAAI,CAACE,oBAAZ,CAAnB;AACH;;AACD,UAAI,CAACH,sBAAL,EAA6B;AACzByB,QAAAA,mBAAmB,CAACD,IAAD,EAAOvB,IAAI,CAACI,iBAAZ,CAAnB;AACH;AACJ;;AA1CE,GAAP;AA4CH,CArDD","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { matchPatterns } from \"@textlint/regexp-string-matcher\";\nimport { matchCaptureGroupAll } from \"match-index\";\n\n/**\n * if actual is in the `matchPatternResults`, return true\n * @param {matchPatternResult[]} matchPatternResults\n * @param {MatchCaptureGroup} actual\n * @returns {boolean}\n */\nconst isIgnoredRange = (matchPatternResults, actual) => {\n    return matchPatternResults.some((result) => {\n        return result.startIndex <= actual.index && actual.index <= result.endIndex;\n    });\n};\n\nconst BUILTIN_ALLOW_LIST = [\"Yahoo!\"];\nconst defaultOptions = {\n    // allow words\n    allow: [],\n    // allow to use !\n    allowHalfWidthExclamation: false,\n    // allow to use ！\n    allowFullWidthExclamation: false,\n    // allow to use ?\n    allowHalfWidthQuestion: false,\n    // allow to use ？\n    allowFullWidthQuestion: false\n};\nconst Mark = {\n    HalfWidthExclamation: /(!)/,\n    FullWidthExclamation: /(！)/,\n    HalfWidthQuestion: /(\\?)/,\n    FullWidthQuestion: /(？)/\n};\n\nmodule.exports = function (context, options = defaultOptions) {\n    const { Syntax, RuleError, report, getSource } = context;\n    const helper = new RuleHelper(context);\n    const allow = (options.allow || defaultOptions.allow).concat(BUILTIN_ALLOW_LIST);\n    const allowHalfWidthExclamation = options.allowHalfWidthExclamation || defaultOptions.allowHalfWidthExclamation;\n    const allowFullWidthExclamation = options.allowFullWidthExclamation || defaultOptions.allowFullWidthExclamation;\n    const allowHalfWidthQuestion = options.allowHalfWidthQuestion || defaultOptions.allowHalfWidthQuestion;\n    const allowFullWidthQuestion = options.allowFullWidthQuestion || defaultOptions.allowFullWidthQuestion;\n\n    return {\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            /**\n             * report if match the markRegExp\n             * @param {string} text\n             * @param {RegExp} markRegExp\n             */\n            const reportIfIncludeMark = (text, markRegExp) => {\n                const ignoreMatch = matchPatterns(text, allow);\n                matchCaptureGroupAll(text, markRegExp).forEach((actual) => {\n                    const { text, index } = actual;\n\n                    // 無視する単語を含んでいるなら無視\n                    if (isIgnoredRange(ignoreMatch, actual)) {\n                        return;\n                    }\n\n                    report(\n                        node,\n                        new RuleError(`Disallow to use \"${text}\".`, {\n                            index\n                        })\n                    );\n                });\n            };\n            // Check\n            if (!allowHalfWidthExclamation) {\n                reportIfIncludeMark(text, Mark.HalfWidthExclamation);\n            }\n            if (!allowHalfWidthQuestion) {\n                reportIfIncludeMark(text, Mark.HalfWidthQuestion);\n            }\n            if (!allowFullWidthExclamation) {\n                reportIfIncludeMark(text, Mark.FullWidthExclamation);\n            }\n            if (!allowFullWidthQuestion) {\n                reportIfIncludeMark(text, Mark.FullWidthQuestion);\n            }\n        }\n    };\n};\n"],"file":"textlint-rule-no-exclamation-question-mark.js"}