// LICENSE : MIT
"use strict";

var _textlintRuleHelper = require("textlint-rule-helper");

var _regexpStringMatcher = require("@textlint/regexp-string-matcher");

var _matchIndex = require("match-index");

/**
 * if actual is in the `matchPatternResults`, return true
 * @param {matchPatternResult[]} matchPatternResults
 * @param {MatchCaptureGroup} actual
 * @returns {boolean}
 */
var isIgnoredRange = (matchPatternResults, actual) => {
  return matchPatternResults.some(result => {
    return result.startIndex <= actual.index && actual.index <= result.endIndex;
  });
};

var BUILTIN_ALLOW_LIST = ["Yahoo!"];
var defaultOptions = {
  // allow words
  allow: [],
  // allow to use !
  allowHalfWidthExclamation: false,
  // allow to use ！
  allowFullWidthExclamation: false,
  // allow to use ?
  allowHalfWidthQuestion: false,
  // allow to use ？
  allowFullWidthQuestion: false
};
var Mark = {
  HalfWidthExclamation: /(!)/,
  FullWidthExclamation: /(！)/,
  HalfWidthQuestion: /(\?)/,
  FullWidthQuestion: /(？)/
};

module.exports = function (context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  var {
    Syntax,
    RuleError,
    report,
    getSource
  } = context;
  var helper = new _textlintRuleHelper.RuleHelper(context);
  var allow = (options.allow || defaultOptions.allow).concat(BUILTIN_ALLOW_LIST);
  var allowHalfWidthExclamation = options.allowHalfWidthExclamation || defaultOptions.allowHalfWidthExclamation;
  var allowFullWidthExclamation = options.allowFullWidthExclamation || defaultOptions.allowFullWidthExclamation;
  var allowHalfWidthQuestion = options.allowHalfWidthQuestion || defaultOptions.allowHalfWidthQuestion;
  var allowFullWidthQuestion = options.allowFullWidthQuestion || defaultOptions.allowFullWidthQuestion;
  return {
    [Syntax.Str](node) {
      if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
        return;
      }

      var text = getSource(node);
      /**
       * report if match the markRegExp
       * @param {string} text
       * @param {RegExp} markRegExp
       */

      var reportIfIncludeMark = (text, markRegExp) => {
        var ignoreMatch = (0, _regexpStringMatcher.matchPatterns)(text, allow);
        (0, _matchIndex.matchCaptureGroupAll)(text, markRegExp).forEach(actual => {
          var {
            text,
            index
          } = actual; // 無視する単語を含んでいるなら無視

          if (isIgnoredRange(ignoreMatch, actual)) {
            return;
          }

          report(node, new RuleError("Disallow to use \"".concat(text, "\"."), {
            index
          }));
        });
      }; // Check


      if (!allowHalfWidthExclamation) {
        reportIfIncludeMark(text, Mark.HalfWidthExclamation);
      }

      if (!allowHalfWidthQuestion) {
        reportIfIncludeMark(text, Mark.HalfWidthQuestion);
      }

      if (!allowFullWidthExclamation) {
        reportIfIncludeMark(text, Mark.FullWidthExclamation);
      }

      if (!allowFullWidthQuestion) {
        reportIfIncludeMark(text, Mark.FullWidthQuestion);
      }
    }

  };
};
//# sourceMappingURL=textlint-rule-no-exclamation-question-mark.js.map