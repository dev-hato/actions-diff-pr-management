{"version":3,"sources":["../src/index.js"],"names":["fs","require","kuromojin","createMatcher","yaml","path","untildify","defaultOptions","rulePath","__dirname","loadDictionaries","baseDir","expandedRulePath","dictionaries","data","safeLoad","readFileSync","resolve","dict","forEach","item","form","tokens","token","surface_form","push","message","expected","fix","reporter","context","userOptions","options","Object","assign","matchAll","getConfigBaseDir","Syntax","RuleError","report","getSource","fixer","Str","node","text","tokenize","then","actualTokens","results","length","result","tokenIndex","index","getIndexFromTokens","replaceFrom","replaceTo","replaceTextRange","ruleError","i","process","cwd","textlintRcFilePath","config","configFile","dirname","module","exports","linter"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\nconst fs = require(\"fs\");\nconst kuromojin = require(\"kuromojin\");\nconst createMatcher = require(\"morpheme-match-all\");\nconst yaml = require(\"js-yaml\");\n\nconst path = require(\"path\");\nconst untildify = require(\"untildify\");\n\nconst defaultOptions = {\n  rulePath: __dirname + \"/../dict/fukushi.yml\"\n};\n\nfunction loadDictionaries(rulePath, baseDir) {\n  if (typeof rulePath === \"undefined\" || rulePath ===\"\") {\n    return null;\n  }\n  const expandedRulePath = untildify(rulePath);\n  const dictionaries = [];\n  const data = yaml.safeLoad(fs.readFileSync(path.resolve(baseDir, expandedRulePath), \"utf8\"));\n\n  data.dict.forEach(function (item) {\n    var form = \"\";\n    item.tokens.forEach(function (token) {\n      form += token.surface_form;\n    });\n    dictionaries.push({\n      message: data.message + \": \\\"\" + form + \"\\\" => \\\"\" + item.expected + \"\\\"\",\n      fix: item.expected,\n      tokens: item.tokens\n    });\n  });\n\n  return dictionaries;\n}\n\nfunction reporter(context, userOptions = {}) {\n  const options = Object.assign(defaultOptions, userOptions);\n  const matchAll = createMatcher(loadDictionaries(options.rulePath, getConfigBaseDir(context)));\n  const {Syntax, RuleError, report, getSource, fixer} = context;\n  return {\n    [Syntax.Str](node){ // \"Str\" node\n      const text = getSource(node); // Get text\n      return kuromojin.tokenize(text).then((actualTokens) => {\n        const results = matchAll(actualTokens);\n\n        if (results.length == 0) {\n          return;\n        }\n\n        results.forEach(function (result) {\n          const tokenIndex = result.index;\n          const index = getIndexFromTokens(tokenIndex, actualTokens);\n          let replaceFrom = \"\";\n          result.tokens.forEach(function(token){\n            replaceFrom += token.surface_form;\n          });\n          const replaceTo = fixer.replaceTextRange([index, index + replaceFrom.length], result.dict.fix);\n          const ruleError = new RuleError(result.dict.message, {\n            index: index,\n            fix:   replaceTo // https://github.com/textlint/textlint/blob/master/docs/rule-fixable.md\n          });\n          report(node, ruleError);\n        });\n      });\n    }\n  };\n}\n\nfunction getIndexFromTokens(tokenIndex, actualTokens) {\n  let index = 0;\n  for ( let i = 0; i < tokenIndex; i++) {\n    index += actualTokens[i].surface_form.length;\n  }\n  return index;\n}\n\n// from https://github.com/textlint-rule/textlint-rule-prh/blob/master/src/textlint-rule-prh.js#L147\nconst getConfigBaseDir = context => {\n  if (typeof context.getConfigBaseDir === \"function\") {\n    return context.getConfigBaseDir() || process.cwd();\n  }\n  const textlintRcFilePath = context.config ? context.config.configFile : null;\n  return textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n};\n\nmodule.exports = {\n  linter: reporter,\n  fixer: reporter\n};\n\n"]}