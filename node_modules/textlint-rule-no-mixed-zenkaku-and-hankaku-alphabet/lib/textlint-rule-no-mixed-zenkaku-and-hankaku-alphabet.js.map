{"version":3,"sources":["../src/textlint-rule-no-mixed-zenkaku-and-hankaku-alphabet.js"],"names":["RuleHelper","require","matchCaptureGroupAll","moji","toHankaku","string","convert","toString","toZenakaku","defaultOptions","zenkakuOnly","report","RuleError","fixer","checkZenkaku","node","text","matchRegExp","forEach","index","match","fix","replaceTextRange","length","hankakuOnly","reporter","context","options","Syntax","getSource","prefer","helper","checkText","Str","isChildNode","Link","Image","BlockQuote","Emphasis","module","exports","linter"],"mappings":"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","file":"textlint-rule-no-mixed-zenkaku-and-hankaku-alphabet.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nconst RuleHelper = require(\"textlint-rule-helper\").RuleHelper;\nconst matchCaptureGroupAll = require(\"match-index\").matchCaptureGroupAll;\nconst moji = require(\"moji\");\nfunction toHankaku(string) {\n    return moji(string).convert('ZE', 'HE').toString();\n}\nfunction toZenakaku(string) {\n    return moji(string).convert('HE', 'ZE').toString();\n}\nconst defaultOptions = {\n    // \"全角\" or \"半角\"\n    \"prefer\": \"半角\"\n};\n\nconst zenkakuOnly = ({report, RuleError, fixer}) => {\n    return function checkZenkaku(node, text) {\n        const matchRegExp = /([a-zA-Z]+)/;\n        matchCaptureGroupAll(text, matchRegExp).forEach(match => {\n            const {index, text} = match;\n            report(node, new RuleError(\"アルファベットは「全角」で表記します。\", {\n                index: index,\n                fix: fixer.replaceTextRange([index, index + text.length], toZenakaku(text))\n            }));\n        });\n    };\n};\nconst hankakuOnly = ({report, RuleError, fixer}) => {\n    return function checkZenkaku(node, text) {\n        const matchRegExp = /([ａ-ｚＡ-Ｚ]+)/;\n        matchCaptureGroupAll(text, matchRegExp).forEach(match => {\n            const {index, text} = match;\n            report(node, new RuleError(\"アルファベットは「半角」で表記します。\", {\n                index: index,\n                fix: fixer.replaceTextRange([index, index + text.length], toHankaku(text))\n            }));\n        });\n    };\n};\nfunction reporter(context, options = {}) {\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const prefer = options.prefer || defaultOptions.prefer;\n    const helper = new RuleHelper(context);\n    const checkText = prefer === \"半角\" ? hankakuOnly({report, RuleError, fixer}) : zenkakuOnly({report, RuleError, fixer});\n    return {\n        [Syntax.Str](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            checkText(node, text);\n        }\n    }\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};"]}