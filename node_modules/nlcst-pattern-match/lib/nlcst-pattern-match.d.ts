import { Root } from "nlcst-types";
import { Node } from "unist-types";
import { PatternNode, TagNode } from "./NodeTypes";
import { MatchCSTResult, MatchResult } from "./matcher";
export declare type NodeTypes = TagNode | PatternNode | Node;
export interface PatternMatcherArgs {
    parser: {
        parse(text: string): Root;
    };
}
/**
 * tag function result
 */
export declare type TagPatterns = NodeTypes[];
export declare class PatternMatcher {
    private parser;
    constructor(args: PatternMatcherArgs);
    /**
     * Return true If test is passed
     */
    test(text: string, patterns: TagPatterns): boolean;
    match(text: string, patterns: TagPatterns): MatchResult[];
    testCST(cst: Root, patterns: TagPatterns): boolean;
    matchCST(cst: Root, patterns: TagPatterns): MatchCSTResult[];
    /**
     * Template tag function.
     * Return pattern objects that are used for `matcher.match` method.
     */
    tag(strings: TemplateStringsArray, ...values: NodeTypes[]): TagPatterns;
}
