{"version":3,"sources":["../src/check-ends-with-period.js"],"names":["find","require","endWith","emojiRegExp","exceptionMarkRegExp","checkEndsWithPeriod","lineText","periodMarks","allowExceptionMark","allowEmoji","characters","lastCharacterIndex","length","periodMark","test","match","whiteSpaces","valid","index","matchMark","mark","module","exports"],"mappings":"AAAA;AACA;;;;;;AACA,IAAMA,OAAOC,QAAQ,sBAAR,CAAb;AACA,IAAMC,UAAUD,QAAQ,UAAR,CAAhB;AACA,IAAME,cAAcF,QAAQ,aAAR,GAApB;AACA,IAAMG,sBAAsB,aAA5B;;AAEA;;;;;;;;;;;;;AAaA,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAASC,QAAT,EAIpB;AAAA,mFAAJ,EAAI;AAAA,gCAHJC,WAGI;AAAA,QAHJA,WAGI,oCAHU,CAAC,GAAD,EAAM,GAAN,CAGV;AAAA,qCAFJC,kBAEI;AAAA,QAFJA,kBAEI,yCAFiB,IAEjB;AAAA,+BADJC,UACI;AAAA,QADJA,UACI,mCADS,KACT;;AACJ;AACA,QAAMC,0CAAiBJ,QAAjB,EAAN;AACA,QAAMK,qBAAqBD,WAAWE,MAAX,GAAoB,CAA/C;AACA,QAAMC,aAAaH,WAAWC,kBAAX,CAAnB;AACA,QAAI,KAAKG,IAAL,CAAUD,UAAV,CAAJ,EAA2B;AAAA,8BACDP,SAASS,KAAT,CAAe,MAAf,CADC;AAAA;AAAA,YAChBC,WADgB;;AAEvB,eAAO;AACHC,mBAAO,KADJ;AAEHJ,wBAAYG,WAFT;AAGHE,mBAAOP,sBAAsBK,YAAYJ,MAAZ,GAAqB,CAA3C;AAHJ,SAAP;AAKH;AACD;AACA,QAAIJ,sBAAsBJ,oBAAoBU,IAApB,CAAyBD,UAAzB,CAA1B,EAAgE;AAC5D,eAAO;AACHI,mBAAO,IADJ;AAEHJ,kCAFG;AAGHK,mBAAOP;AAHJ,SAAP;AAKH;AACD;AACA,QAAIF,cAAcN,YAAYW,IAAZ,CAAiBD,UAAjB,CAAlB,EAAgD;AAC5C,eAAO;AACHI,mBAAO,IADJ;AAEHJ,kCAFG;AAGHK,mBAAOP;AAHJ,SAAP;AAKH;AACD;;;AAGA,QAAMQ,YAAYnB,KAAKO,WAAL,EAAkB,UAACa,IAAD,EAAU;AAC1C,eAAOlB,QAAQI,QAAR,EAAkBc,IAAlB,CAAP;AACH,KAFiB,CAAlB;AAGA,QAAID,SAAJ,EAAe;AACX,eAAO;AACHF,mBAAO,IADJ;AAEHJ,wBAAYM,SAFT;AAGHD,mBAAOZ,SAASM,MAAT,GAAkBO,UAAUP;AAHhC,SAAP;AAKH;AACD,WAAO;AACHK,eAAO,KADJ;AAEHJ,8BAFG;AAGHK,eAAOP;AAHJ,KAAP;AAKH,CAnDD;AAoDAU,OAAOC,OAAP,GAAiBjB,mBAAjB","file":"check-ends-with-period.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nconst find = require(\"array.prototype.find\");\nconst endWith = require(\"end-with\");\nconst emojiRegExp = require(\"emoji-regex\")();\nconst exceptionMarkRegExp = /[!?！？\\)）」』]/;\n\n/**\n * Check ends with period.\n * @param {string} lineText\n * @param {string[]} periodMarks\n * @param {boolean} allowExceptionMark often used at end.\n * @param {boolean} allowEmoji\n * @returns {{valid: boolean, periodMark: string, index: number}}\n *\n * `index` is index value of last character.\n * If last character is a parts of periodMarks, `index` is the position of periodMark.\n * If last character is not a parts of periodMarks, `index` is the position of the last character.\n * If last character is white space, `index` is the position of starting of white space on the end.\n */\nconst checkEndsWithPeriod = function(lineText, {\n    periodMarks = [\"。\", \".\"],\n    allowExceptionMark = true,\n    allowEmoji = false,\n} = {}) {\n    // サロゲートペアを考慮した文字列長・文字アクセス\n    const characters = [...lineText];\n    const lastCharacterIndex = characters.length - 1;\n    const periodMark = characters[lastCharacterIndex];\n    if (/\\s/.test(periodMark)) {\n        const [whiteSpaces] = lineText.match(/\\s+$/);\n        return {\n            valid: false,\n            periodMark: whiteSpaces,\n            index: lastCharacterIndex - (whiteSpaces.length - 1)\n        };\n    }\n    // allo exclamation mark and serif symbol\n    if (allowExceptionMark && exceptionMarkRegExp.test(periodMark)) {\n        return {\n            valid: true,\n            periodMark,\n            index: lastCharacterIndex\n        };\n    }\n    // allow emoji\n    if (allowEmoji && emojiRegExp.test(periodMark)) {\n        return {\n            valid: true,\n            periodMark,\n            index: lastCharacterIndex\n        };\n    }\n    /**\n     * @type {string|undefined}\n     */\n    const matchMark = find(periodMarks, (mark) => {\n        return endWith(lineText, mark);\n    });\n    if (matchMark) {\n        return {\n            valid: true,\n            periodMark: matchMark,\n            index: lineText.length - matchMark.length\n        };\n    }\n    return {\n        valid: false,\n        periodMark,\n        index: lastCharacterIndex\n    };\n};\nmodule.exports = checkEndsWithPeriod;"]}