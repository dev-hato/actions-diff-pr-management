"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _TextlintRuleNoZeroWidthSpacesError = require("./TextlintRuleNoZeroWidthSpacesError");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var reporter = context => {
  var {
    fixer,
    getSource,
    report,
    RuleError,
    Syntax
  } = context;
  return {
    [Syntax.Str](node) {
      return _asyncToGenerator(function* () {
        var text = getSource(node);
        [...text.matchAll(/\u200b/g)].forEach(match => {
          if (match.index === undefined) {
            throw new _TextlintRuleNoZeroWidthSpacesError.TextlintRuleNoZeroWidthSpacesError();
          }

          var ruleError = new RuleError("Zero width space is disallowed.", {
            index: match.index,
            fix: fixer.replaceTextRange([match.index, match.index + "\u200b".length], "")
          });
          report(node, ruleError);
        });
      })();
    }

  };
};

var _module = {
  fixer: reporter,
  linter: reporter
};
var _default = _module;
exports.default = _default;
//# sourceMappingURL=index.js.map