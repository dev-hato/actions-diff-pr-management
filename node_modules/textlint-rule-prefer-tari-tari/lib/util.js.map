{"version":3,"sources":["../src/util.js"],"names":["require","IgnoreNodeManager","StringSource","paragraphReporter","node","ignoreNodeTypes","context","originalText","getSource","source","text","toString","ignoreNodeManager","ignoreChildrenByTypes","index","originalIndexFromIndex","result","endIndex","match","length","range","isIgnoredRange"],"mappings":"AAAA;AACA;;;;;;eAC8BA,QAAQ,sBAAR,C;IAAtBC,iB,YAAAA,iB;;AACR,IAAMC,eAAeF,QAAQ,yBAAR,CAArB;AACO,IAAMG,gDAAoB,SAApBA,iBAAoB,OAAwC;AAAA,QAArCC,IAAqC,QAArCA,IAAqC;AAAA,QAA/BC,eAA+B,QAA/BA,eAA+B;AAAA,QAAdC,OAAc,QAAdA,OAAc;;AACrE,QAAMC,eAAeD,QAAQE,SAAR,CAAkBJ,IAAlB,CAArB;AACA,QAAMK,SAAS,IAAIP,YAAJ,CAAiBE,IAAjB,CAAf;AACA,QAAMM,OAAOD,OAAOE,QAAP,EAAb;AACA,QAAMC,oBAAoB,IAAIX,iBAAJ,EAA1B;AACA;AACA;AACAW,sBAAkBC,qBAAlB,CAAwCT,IAAxC,EAA8CC,eAA9C;AACA,QAAMS,QAAQL,OAAOM,sBAAP,CAA8BC,OAAOF,KAArC,CAAd;AACA,QAAMG,WAAWR,OAAOM,sBAAP,CAA8BC,OAAOF,KAAP,GAAeE,OAAOE,KAAP,CAAaC,MAA1D,CAAjB;AACA,QAAMC,QAAQ,CAACN,KAAD,EAAQG,QAAR,CAAd;AACA;AACA,QAAIL,kBAAkBS,cAAlB,CAAiCD,KAAjC,CAAJ,EAA6C;AACzC;AACH;AACJ,CAfM","file":"util.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nconst { IgnoreNodeManager } = require(\"textlint-rule-helper\");\nconst StringSource = require(\"textlint-util-to-string\");\nexport const paragraphReporter = ({ node, ignoreNodeTypes, context }) => {\n    const originalText = context.getSource(node);\n    const source = new StringSource(node);\n    const text = source.toString();\n    const ignoreNodeManager = new IgnoreNodeManager();\n    // Ignore following pattern\n    // Paragraph > Link Code Html ...\n    ignoreNodeManager.ignoreChildrenByTypes(node, ignoreNodeTypes);\n    const index = source.originalIndexFromIndex(result.index);\n    const endIndex = source.originalIndexFromIndex(result.index + result.match.length);\n    const range = [index, endIndex];\n    // if the error is ignored, don't report\n    if (ignoreNodeManager.isIgnoredRange(range)) {\n        return;\n    }\n};\n"]}