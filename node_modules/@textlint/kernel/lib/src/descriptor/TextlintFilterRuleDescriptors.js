// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextlintFilterRuleDescriptors = void 0;
const DescriptorUtil_1 = require("./DescriptorUtil");
/**
 * The collection class of TextlintFilterRuleDescriptor
 */
class TextlintFilterRuleDescriptors {
    constructor(ruleDescriptorList = []) {
        this.ruleDescriptorList = ruleDescriptorList;
    }
    /**
     * Convert this to TextlintKernel rules format
     * @returns {Array}
     */
    toKernelFilterRulesFormat() {
        return this.withoutDuplicated().descriptors.map((descriptor) => {
            return descriptor.toKernel();
        });
    }
    /**
     * Return enabled descriptors
     */
    get descriptors() {
        return this.ruleDescriptorList.filter((descriptor) => {
            return descriptor.enabled;
        });
    }
    /**
     * Return all descriptors that include disabled descriptors
     */
    get allDescriptors() {
        return this.ruleDescriptorList;
    }
    /**
     * filter duplicated descriptors
     */
    withoutDuplicated() {
        // remove last duplicated item
        const newDescriptorList = (0, DescriptorUtil_1.filterDuplicateDescriptor)(this.ruleDescriptorList);
        return new TextlintFilterRuleDescriptors(newDescriptorList);
    }
}
exports.TextlintFilterRuleDescriptors = TextlintFilterRuleDescriptors;
//# sourceMappingURL=TextlintFilterRuleDescriptors.js.map