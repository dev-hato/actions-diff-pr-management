// LICENSE : MIT
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextlintLintableRuleDescriptor = void 0;
const rule_creator_helper_1 = require("./rule-creator-helper");
const deep_equal_1 = __importDefault(require("deep-equal"));
/**
 * Textlint Rule Descriptor.
 * It handle RuleCreator and RuleOption.
 */
class TextlintLintableRuleDescriptor {
    constructor(textlintKernelRule) {
        this.textlintKernelRule = textlintKernelRule;
        (0, rule_creator_helper_1.assertRuleShape)(textlintKernelRule.rule, textlintKernelRule.ruleId);
    }
    get id() {
        return this.textlintKernelRule.ruleId;
    }
    /**
     * Rule module-self
     */
    get rule() {
        return this.textlintKernelRule.rule;
    }
    /**
     * Return true if this rule is enabled.
     */
    get enabled() {
        return this.rawOptions !== false;
    }
    /**
     * Return linter function
     * You should check hasLiner before call this.
     */
    get linter() {
        return (0, rule_creator_helper_1.getLinter)(this.rule);
    }
    /**
     * Return normalized rule option object.
     * If the rule have not option, return `true` by default.
     */
    get normalizedOptions() {
        // default: { ruleName: true }
        const DefaultRuleConfigValue = {};
        if (typeof this.textlintKernelRule.options === "boolean" || this.textlintKernelRule.options === undefined) {
            return DefaultRuleConfigValue;
        }
        else {
            return this.textlintKernelRule.options;
        }
    }
    get rawOptions() {
        return this.textlintKernelRule.options;
    }
    /**
     * Return true if descriptor is same
     */
    equals(descriptor) {
        return (this.rule === descriptor.rule &&
            (0, deep_equal_1.default)(this.normalizedOptions, descriptor.normalizedOptions, {
                strict: true
            }));
    }
    toKernel() {
        return this.textlintKernelRule;
    }
}
exports.TextlintLintableRuleDescriptor = TextlintLintableRuleDescriptor;
//# sourceMappingURL=TextlintLintableRuleDescriptor.js.map