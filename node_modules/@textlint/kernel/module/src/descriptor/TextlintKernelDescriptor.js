import { createTextlintFilterRuleDescriptors, createTextlintPluginDescriptors, createTextlintRuleDescriptors } from "./DescriptorsFactory";
export class TextlintKernelDescriptor {
    constructor(args) {
        this.args = args;
        this.rule = createTextlintRuleDescriptors(args.rules);
        this.filterRule = createTextlintFilterRuleDescriptors(args.filterRules);
        this.plugin = createTextlintPluginDescriptors(args.plugins);
    }
    /**
     * Return available extensions of plugins
     */
    get availableExtensions() {
        return this.plugin.availableExtensions;
    }
    /**
     * Merge constructor args and partialArgs
     * It shallow merge partialArgs.
     * It means that overwrite root properties by partialArgs.
     */
    shallowMerge(partialArgs) {
        return new TextlintKernelDescriptor(Object.assign(Object.assign({}, this.args), partialArgs));
    }
    /**
     * find PluginDescriptor with extension.
     * This is forward match.
     *
     * If following config of textlint, this method prefer to select MarkdownA for markdown.
     *
     * {
     *     "plugins": [MarkdownA, MarkdownB]
     * }
     */
    findPluginDescriptorWithExt(ext) {
        return this.plugin.findPluginDescriptorWithExt(ext);
    }
}
//# sourceMappingURL=TextlintKernelDescriptor.js.map