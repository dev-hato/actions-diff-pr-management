// LICENSE : MIT
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as assert from "assert";
import FixerTask from "../task/fixer-task";
import TaskRunner from "../task/task-runner";
import { TextlintSourceCodeImpl } from "../context/TextlintSourceCodeImpl";
import _debug from "debug";
import { applyFixesToSourceCode } from "@textlint/source-code-fixer";
import { isPluginParsedObject } from "../util/isPluginParsedObject";
const debug = _debug("textlint:fixer-processor");
export default class FixerProcessor {
    /**
     * @param {Processor} processor
     * @param {MessageProcessManager} messageProcessManager
     */
    constructor(processor, messageProcessManager) {
        this.processor = processor;
        this.messageProcessManager = messageProcessManager;
    }
    /**
     * Run fixer process
     * @param {Config} config
     * @param {string} [configBaseDir]
     * @param {TextlintKernelRule[]} [rules]
     * @param {TextlintKernelFilterRule[]} [filterRules]
     * @param {SourceCode} sourceCode
     * @returns {Promise.<TextlintFixResult>}
     */
    process({ config, configBaseDir, ruleDescriptors, filterRules, sourceCode }) {
        assert.ok(sourceCode);
        const { preProcess, postProcess } = this.processor.processor(sourceCode.ext);
        // messages
        let resultFilePath = sourceCode.filePath;
        // applied fixing messages
        // Revert = Sequentially apply applied message to applied output
        // SourceCodeFixer.sequentiallyApplyFixes(fixedOutput, result.applyingMessages);
        const applyingMessages = [];
        // not applied fixing messages
        const remainingMessages = [];
        // original means original for applyingMessages and remainingMessages
        // pre-applyingMessages + remainingMessages
        const originalMessages = [];
        const fixerProcessList = ruleDescriptors.fixableDescriptors.map((ruleDescriptor) => {
            return (sourceText) => __awaiter(this, void 0, void 0, function* () {
                // create new SourceCode object
                const preProcessResult = yield Promise.resolve(preProcess(sourceText, sourceCode.filePath));
                const isParsedObject = isPluginParsedObject(preProcessResult);
                const textForAST = isParsedObject ? preProcessResult.text : sourceText;
                const ast = isParsedObject ? preProcessResult.ast : preProcessResult;
                const newSourceCode = new TextlintSourceCodeImpl({
                    text: textForAST,
                    ast,
                    filePath: resultFilePath,
                    ext: sourceCode.ext
                });
                // create new Task
                const task = new FixerTask({
                    config,
                    fixableRuleDescriptor: ruleDescriptor,
                    filterRuleDescriptors: filterRules,
                    sourceCode: newSourceCode,
                    configBaseDir
                });
                return yield TaskRunner.process(task).then((messages) => __awaiter(this, void 0, void 0, function* () {
                    const result = yield Promise.resolve(postProcess(messages, sourceCode.filePath));
                    const filteredResult = {
                        messages: this.messageProcessManager.process(result.messages),
                        filePath: result.filePath ? result.filePath : `<Unkown${sourceCode.ext}>`
                    };
                    // TODO: should be removed resultFilePath
                    resultFilePath = filteredResult.filePath;
                    const applied = applyFixesToSourceCode(newSourceCode, filteredResult.messages);
                    // add messages
                    Array.prototype.push.apply(applyingMessages, applied.applyingMessages);
                    Array.prototype.push.apply(remainingMessages, applied.remainingMessages);
                    Array.prototype.push.apply(originalMessages, applied.messages);
                    // if not fixed, still use current sourceText
                    if (!applied.fixed) {
                        return sourceText;
                    }
                    // if fixed, use fixed text at next
                    return applied.output;
                }));
            });
        });
        const promiseTask = fixerProcessList.reduce((promise, fixerProcess) => {
            return promise.then((sourceText) => {
                return fixerProcess(sourceText);
            });
        }, Promise.resolve(sourceCode.text));
        return promiseTask.then((output) => {
            debug(`Finish Processing: ${resultFilePath}`);
            debug(`applyingMessages: ${applyingMessages.length}`);
            debug(`remainingMessages: ${remainingMessages.length}`);
            return {
                filePath: resultFilePath ? resultFilePath : `<Unkown${sourceCode.ext}>`,
                output,
                messages: originalMessages,
                applyingMessages,
                remainingMessages
            };
        });
    }
}
//# sourceMappingURL=fixer-processor.js.map