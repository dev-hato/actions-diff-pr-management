import type { StringTree, TreeType } from '../parser/types';
import { AltMatcher, ManyMatcher, OpMatcher, SeqMatcher, SymMatcher } from './matchers';
import { AnchorMatcher } from './matchers/anchor-matcher';
import { CommentMatcher } from './matchers/comment-matcher';
import { NumMatcher } from './matchers/num-matcher';
import { StrContentMatcherHandler, StrNodeMatcher } from './matchers/str-matcher';
import { TreeMatcher } from './matchers/tree-matcher';
import type { CommentMatcherHandler, CommentMatcherOptions, CommentMatcherValue, Matcher, NodeHandler, NumMatcherHandler, NumMatcherOptions, NumMatcherValue, OpMatcherHandler, OpMatcherOptions, OpMatcherValue, QueryBuilder, SymMatcherHandler, SymMatcherOptions, SymMatcherValue, TreeOptionsBase } from './types';
declare abstract class TerminalBuilder<Ctx> implements QueryBuilder<Ctx> {
    abstract build(): Matcher<Ctx>;
}
declare abstract class AbstractBuilder<Ctx> extends TerminalBuilder<Ctx> {
    sym(): SeqBuilder<Ctx>;
    sym(value: SymMatcherValue): SeqBuilder<Ctx>;
    sym(handler: SymMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    sym(value: SymMatcherValue, handler: SymMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    sym(opts: SymMatcherOptions<Ctx>): SeqBuilder<Ctx>;
    op(): SeqBuilder<Ctx>;
    op(value: OpMatcherValue): SeqBuilder<Ctx>;
    op(handler: OpMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    op(value: OpMatcherValue, handler: OpMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    op(opts: OpMatcherOptions<Ctx>): SeqBuilder<Ctx>;
    comment(): SeqBuilder<Ctx>;
    comment(value: CommentMatcherValue): SeqBuilder<Ctx>;
    comment(handler: CommentMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    comment(value: CommentMatcherValue, handler: CommentMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    comment(opts: CommentMatcherOptions<Ctx>): SeqBuilder<Ctx>;
    num(): SeqBuilder<Ctx>;
    num(value: NumMatcherValue): SeqBuilder<Ctx>;
    num(handler: NumMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    num(value: NumMatcherValue, handler: NumMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    num(opts: NumMatcherOptions<Ctx>): SeqBuilder<Ctx>;
    many(builder: QueryBuilder<Ctx>): SeqBuilder<Ctx>;
    many(builder: QueryBuilder<Ctx>, min: number, max: number): SeqBuilder<Ctx>;
    opt(innerBuilder: QueryBuilder<Ctx>): SeqBuilder<Ctx>;
    alt(...alts: QueryBuilder<Ctx>[]): SeqBuilder<Ctx>;
    tree(): SeqBuilder<Ctx>;
    tree(type: TreeType): SeqBuilder<Ctx>;
    tree(opts: TreeBuilderOptions<Ctx>): SeqBuilder<Ctx>;
    str(): SeqBuilder<Ctx>;
    str(handler: StrContentMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    str(exact: string, handler?: StrContentMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    str(pattern: RegExp, handler?: StrContentMatcherHandler<Ctx>): SeqBuilder<Ctx>;
    str(opts: StrTreeBuilderOptions<Ctx>): SeqBuilder<Ctx>;
    end(): EndBuilder<Ctx>;
}
declare class BeginBuilder<Ctx> extends AbstractBuilder<Ctx> {
    build(): AnchorMatcher<Ctx>;
}
declare class EndBuilder<Ctx> extends TerminalBuilder<Ctx> {
    private readonly builder;
    constructor(builder: QueryBuilder<Ctx>);
    build(): SeqMatcher<Ctx>;
}
export declare function begin<Ctx>(): BeginBuilder<Ctx>;
declare class SeqBuilder<Ctx> extends AbstractBuilder<Ctx> {
    private readonly builders;
    constructor(prev: QueryBuilder<Ctx>, next: QueryBuilder<Ctx>);
    build(): SeqMatcher<Ctx>;
}
declare class SymBuilder<Ctx> extends AbstractBuilder<Ctx> {
    private opts;
    constructor(opts: SymMatcherOptions<Ctx>);
    build(): SymMatcher<Ctx>;
}
export declare function sym<Ctx>(): SymBuilder<Ctx>;
export declare function sym<Ctx>(value: SymMatcherValue): SymBuilder<Ctx>;
export declare function sym<Ctx>(handler: SymMatcherHandler<Ctx>): SymBuilder<Ctx>;
export declare function sym<Ctx>(value: SymMatcherValue, handler: SymMatcherHandler<Ctx>): SymBuilder<Ctx>;
export declare function sym<Ctx>(opts: SymMatcherOptions<Ctx>): SymBuilder<Ctx>;
declare class OpBuilder<Ctx> extends AbstractBuilder<Ctx> {
    private opts;
    constructor(opts: OpMatcherOptions<Ctx>);
    build(): OpMatcher<Ctx>;
}
export declare function op<Ctx>(): OpBuilder<Ctx>;
export declare function op<Ctx>(value: OpMatcherValue): OpBuilder<Ctx>;
export declare function op<Ctx>(handler: OpMatcherHandler<Ctx>): OpBuilder<Ctx>;
export declare function op<Ctx>(value: OpMatcherValue, handler: OpMatcherHandler<Ctx>): OpBuilder<Ctx>;
export declare function op<Ctx>(opts: OpMatcherOptions<Ctx>): OpBuilder<Ctx>;
declare class CommentBuilder<Ctx> extends AbstractBuilder<Ctx> {
    private opts;
    constructor(opts: CommentMatcherOptions<Ctx>);
    build(): CommentMatcher<Ctx>;
}
export declare function comment<Ctx>(): CommentBuilder<Ctx>;
export declare function comment<Ctx>(value: CommentMatcherValue): CommentBuilder<Ctx>;
export declare function comment<Ctx>(handler: CommentMatcherHandler<Ctx>): CommentBuilder<Ctx>;
export declare function comment<Ctx>(value: CommentMatcherValue, handler: CommentMatcherHandler<Ctx>): CommentBuilder<Ctx>;
export declare function comment<Ctx>(opts: CommentMatcherOptions<Ctx>): CommentBuilder<Ctx>;
declare class NumBuilder<Ctx> extends AbstractBuilder<Ctx> {
    private opts;
    constructor(opts: NumMatcherOptions<Ctx>);
    build(): NumMatcher<Ctx>;
}
export declare function num<Ctx>(): NumBuilder<Ctx>;
export declare function num<Ctx>(value: NumMatcherValue): NumBuilder<Ctx>;
export declare function num<Ctx>(handler: NumMatcherHandler<Ctx>): NumBuilder<Ctx>;
export declare function num<Ctx>(value: NumMatcherValue, handler: NumMatcherHandler<Ctx>): NumBuilder<Ctx>;
export declare function num<Ctx>(opts: NumMatcherOptions<Ctx>): NumBuilder<Ctx>;
export interface ManyBuilderOpts<Ctx> {
    builder: QueryBuilder<Ctx>;
    min: number;
    max: number | null;
}
declare class ManyBuilder<Ctx> extends AbstractBuilder<Ctx> {
    private opts;
    constructor(opts: ManyBuilderOpts<Ctx>);
    build(): ManyMatcher<Ctx>;
}
export declare function many<Ctx>(builder: QueryBuilder<Ctx>): ManyBuilder<Ctx>;
export declare function many<Ctx>(builder: QueryBuilder<Ctx>, min: number, max: number): ManyBuilder<Ctx>;
export declare function opt<Ctx>(builder: QueryBuilder<Ctx>): ManyBuilder<Ctx>;
declare class AltBuilder<Ctx> extends AbstractBuilder<Ctx> {
    private builders;
    constructor(builders: QueryBuilder<Ctx>[]);
    build(): AltMatcher<Ctx>;
}
export declare function alt<Ctx>(...builders: QueryBuilder<Ctx>[]): AltBuilder<Ctx>;
export interface TreeBuilderOptions<Ctx> extends TreeOptionsBase<Ctx> {
    search?: QueryBuilder<Ctx> | null;
}
declare class TreeBuilder<Ctx> extends AbstractBuilder<Ctx> {
    private opts;
    constructor(opts: TreeBuilderOptions<Ctx>);
    build(): TreeMatcher<Ctx>;
}
export declare function tree<Ctx>(): TreeBuilder<Ctx>;
export declare function tree<Ctx>(type: TreeType): TreeBuilder<Ctx>;
export declare function tree<Ctx>(opts: TreeBuilderOptions<Ctx>): TreeBuilder<Ctx>;
export interface StrContentBuilderOptionsBase<Ctx> {
    match?: string | RegExp | null;
    handler?: StrContentMatcherHandler<Ctx> | null;
}
export interface StrTreeBuilderOptionsBase<Ctx> {
    match?: (string | RegExp | QueryBuilder<Ctx>)[] | null;
    preHandler?: NodeHandler<Ctx, StringTree> | null;
    postHandler?: NodeHandler<Ctx, StringTree> | null;
}
export declare type StrBuilderOptionsBase<Ctx> = StrContentBuilderOptionsBase<Ctx> | StrTreeBuilderOptionsBase<Ctx>;
export interface StrContentBuilderOptions<Ctx> extends StrContentBuilderOptionsBase<Ctx> {
    type: 'str-content';
}
export interface StrTreeBuilderOptions<Ctx> extends StrTreeBuilderOptionsBase<Ctx> {
    type: 'str-tree';
}
export declare type StrBuilderOptions<Ctx> = StrContentBuilderOptions<Ctx> | StrTreeBuilderOptions<Ctx>;
declare class StrBuilder<Ctx> extends AbstractBuilder<Ctx> {
    private opts;
    constructor(opts: StrBuilderOptions<Ctx>);
    build(): StrNodeMatcher<Ctx>;
}
export declare function str<Ctx>(): StrBuilder<Ctx>;
export declare function str<Ctx>(handler: StrContentMatcherHandler<Ctx>): StrBuilder<Ctx>;
export declare function str<Ctx>(exact: string, handler?: StrContentMatcherHandler<Ctx>): StrBuilder<Ctx>;
export declare function str<Ctx>(pattern: RegExp, handler?: StrContentMatcherHandler<Ctx>): StrBuilder<Ctx>;
export declare function str<Ctx>(opts: StrTreeBuilderOptionsBase<Ctx>): StrBuilder<Ctx>;
export declare function buildRoot<Ctx>(builder: QueryBuilder<Ctx>): Matcher<Ctx>;
export {};
//# sourceMappingURL=builder.d.ts.map