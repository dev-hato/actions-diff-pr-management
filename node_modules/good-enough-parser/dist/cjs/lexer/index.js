"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLexer = exports.configureLexerRules = void 0;
const moo_1 = require("moo");
const bracket_1 = require("./bracket");
const comment_1 = require("./comment");
const number_1 = require("./number");
const operator_1 = require("./operator");
const rules_1 = require("./rules");
const string_1 = require("./string");
const symbol_1 = require("./symbol");
const token_1 = require("./token");
__exportStar(require("./token"), exports);
__exportStar(require("./types"), exports);
function configureLexerRules(lexerConfig) {
    const whitespace = lexerConfig.joinLines
        ? {
            t: 'regex',
            match: new RegExp(`(?:${lexerConfig.joinLines}\\r?\\n|[ \\t\\r])+`),
            lineBreaks: true,
        }
        : { t: 'regex', match: /[ \t\r]+/ };
    let result = {
        $: {
            whitespace,
            newline: { t: 'regex', match: /\r?\n/, lineBreaks: true },
            _: rules_1.fallbackRule,
        },
    };
    const { comments, symbols, operators, brackets, strings, numbers } = lexerConfig;
    result = (0, comment_1.configComments)(result, comments);
    result = (0, symbol_1.configSymbols)(result, { match: symbols });
    result = (0, operator_1.configOperators)(result, operators);
    result = (0, bracket_1.configBrackets)(result, brackets);
    result = (0, string_1.configStrings)(result, strings);
    result = (0, number_1.configNumbers)(result, { match: numbers });
    return result;
}
exports.configureLexerRules = configureLexerRules;
function createLexer(options) {
    const rules = configureLexerRules(options);
    const mooLexer = (0, moo_1.states)(rules);
    const result = {
        reset(input) {
            if (typeof input === 'undefined' || input === null) {
                mooLexer.reset();
            }
            else {
                mooLexer.reset(input);
            }
            return result;
        },
        [Symbol.iterator]() {
            const mooIter = mooLexer[Symbol.iterator]();
            const next = () => {
                const nextElem = mooIter.next();
                if (nextElem.done) {
                    return { done: true, value: null };
                }
                else {
                    const value = (0, token_1.coerceToken)(nextElem.value);
                    return { done: false, value };
                }
            };
            return { next };
        },
    };
    return result;
}
exports.createLexer = createLexer;
//# sourceMappingURL=index.js.map