"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyStateDefinition = exports.sortStatesMap = exports.sortStateRules = exports.fallbackRule = void 0;
const moo_1 = require("moo");
exports.fallbackRule = { t: 'fallback', ...moo_1.fallback };
function compareLexerRules(x, y) {
    if (x.t === 'string' && y.t === 'string') {
        const xMatch = x.match;
        const yMatch = y.match;
        if (yMatch.startsWith(xMatch)) {
            return 1;
        }
        else if (xMatch.startsWith(yMatch)) {
            return -1;
        }
        else if (yMatch < xMatch) {
            return -1;
        }
        else if (xMatch < yMatch) {
            return 1;
        }
    }
    return 0;
}
function sortStateRules(state) {
    const entries = Object.entries(state);
    if (entries.length < 2) {
        return state;
    }
    const stringEntries = entries
        .filter(([, { t }]) => t === 'string')
        .sort(([, x], [, y]) => compareLexerRules(x, y));
    const regexEntries = entries.filter(([, { t }]) => t === 'regex');
    const fallbackEntries = entries.filter(([, { t }]) => t === 'fallback');
    return Object.fromEntries([
        ...stringEntries,
        ...regexEntries,
        ...fallbackEntries,
    ]);
}
exports.sortStateRules = sortStateRules;
function sortStatesMap(statesMap) {
    const result = { ...statesMap };
    Object.entries(result).forEach(([key, val]) => {
        result[key] = sortStateRules(val);
    });
    return result;
}
exports.sortStatesMap = sortStatesMap;
function copyStateDefinition(state) {
    const result = { ...state };
    Object.entries(result).forEach(([key, val]) => {
        result[key] = { ...val };
    });
    return result;
}
exports.copyStateDefinition = copyStateDefinition;
//# sourceMappingURL=rules.js.map