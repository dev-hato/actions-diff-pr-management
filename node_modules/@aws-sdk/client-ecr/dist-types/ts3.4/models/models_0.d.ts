import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { ECRServiceException as __BaseException } from "./ECRServiceException";
export interface BatchCheckLayerAvailabilityRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    layerDigests: string[] | undefined;
}
export declare namespace BatchCheckLayerAvailabilityRequest {
    
    const filterSensitiveLog: (obj: BatchCheckLayerAvailabilityRequest) => any;
}
export declare enum LayerFailureCode {
    InvalidLayerDigest = "InvalidLayerDigest",
    MissingLayerDigest = "MissingLayerDigest"
}

export interface LayerFailure {
    
    layerDigest?: string;
    
    failureCode?: LayerFailureCode | string;
    
    failureReason?: string;
}
export declare namespace LayerFailure {
    
    const filterSensitiveLog: (obj: LayerFailure) => any;
}
export declare enum LayerAvailability {
    AVAILABLE = "AVAILABLE",
    UNAVAILABLE = "UNAVAILABLE"
}

export interface Layer {
    
    layerDigest?: string;
    
    layerAvailability?: LayerAvailability | string;
    
    layerSize?: number;
    
    mediaType?: string;
}
export declare namespace Layer {
    
    const filterSensitiveLog: (obj: Layer) => any;
}
export interface BatchCheckLayerAvailabilityResponse {
    
    layers?: Layer[];
    
    failures?: LayerFailure[];
}
export declare namespace BatchCheckLayerAvailabilityResponse {
    
    const filterSensitiveLog: (obj: BatchCheckLayerAvailabilityResponse) => any;
}

export declare class InvalidParameterException extends __BaseException {
    readonly name: "InvalidParameterException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
}

export declare class RepositoryNotFoundException extends __BaseException {
    readonly name: "RepositoryNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<RepositoryNotFoundException, __BaseException>);
}

export declare class ServerException extends __BaseException {
    readonly name: "ServerException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<ServerException, __BaseException>);
}

export interface ImageIdentifier {
    
    imageDigest?: string;
    
    imageTag?: string;
}
export declare namespace ImageIdentifier {
    
    const filterSensitiveLog: (obj: ImageIdentifier) => any;
}

export interface BatchDeleteImageRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    imageIds: ImageIdentifier[] | undefined;
}
export declare namespace BatchDeleteImageRequest {
    
    const filterSensitiveLog: (obj: BatchDeleteImageRequest) => any;
}
export declare enum ImageFailureCode {
    ImageNotFound = "ImageNotFound",
    ImageReferencedByManifestList = "ImageReferencedByManifestList",
    ImageTagDoesNotMatchDigest = "ImageTagDoesNotMatchDigest",
    InvalidImageDigest = "InvalidImageDigest",
    InvalidImageTag = "InvalidImageTag",
    KmsError = "KmsError",
    MissingDigestAndTag = "MissingDigestAndTag"
}

export interface ImageFailure {
    
    imageId?: ImageIdentifier;
    
    failureCode?: ImageFailureCode | string;
    
    failureReason?: string;
}
export declare namespace ImageFailure {
    
    const filterSensitiveLog: (obj: ImageFailure) => any;
}
export interface BatchDeleteImageResponse {
    
    imageIds?: ImageIdentifier[];
    
    failures?: ImageFailure[];
}
export declare namespace BatchDeleteImageResponse {
    
    const filterSensitiveLog: (obj: BatchDeleteImageResponse) => any;
}
export interface BatchGetImageRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    imageIds: ImageIdentifier[] | undefined;
    
    acceptedMediaTypes?: string[];
}
export declare namespace BatchGetImageRequest {
    
    const filterSensitiveLog: (obj: BatchGetImageRequest) => any;
}

export interface Image {
    
    registryId?: string;
    
    repositoryName?: string;
    
    imageId?: ImageIdentifier;
    
    imageManifest?: string;
    
    imageManifestMediaType?: string;
}
export declare namespace Image {
    
    const filterSensitiveLog: (obj: Image) => any;
}
export interface BatchGetImageResponse {
    
    images?: Image[];
    
    failures?: ImageFailure[];
}
export declare namespace BatchGetImageResponse {
    
    const filterSensitiveLog: (obj: BatchGetImageResponse) => any;
}
export interface BatchGetRepositoryScanningConfigurationRequest {
    
    repositoryNames: string[] | undefined;
}
export declare namespace BatchGetRepositoryScanningConfigurationRequest {
    
    const filterSensitiveLog: (obj: BatchGetRepositoryScanningConfigurationRequest) => any;
}
export declare enum ScanningConfigurationFailureCode {
    REPOSITORY_NOT_FOUND = "REPOSITORY_NOT_FOUND"
}

export interface RepositoryScanningConfigurationFailure {
    
    repositoryName?: string;
    
    failureCode?: ScanningConfigurationFailureCode | string;
    
    failureReason?: string;
}
export declare namespace RepositoryScanningConfigurationFailure {
    
    const filterSensitiveLog: (obj: RepositoryScanningConfigurationFailure) => any;
}
export declare enum ScanningRepositoryFilterType {
    WILDCARD = "WILDCARD"
}

export interface ScanningRepositoryFilter {
    
    filter: string | undefined;
    
    filterType: ScanningRepositoryFilterType | string | undefined;
}
export declare namespace ScanningRepositoryFilter {
    
    const filterSensitiveLog: (obj: ScanningRepositoryFilter) => any;
}
export declare enum ScanFrequency {
    CONTINUOUS_SCAN = "CONTINUOUS_SCAN",
    MANUAL = "MANUAL",
    SCAN_ON_PUSH = "SCAN_ON_PUSH"
}

export interface RepositoryScanningConfiguration {
    
    repositoryArn?: string;
    
    repositoryName?: string;
    
    scanOnPush?: boolean;
    
    scanFrequency?: ScanFrequency | string;
    
    appliedScanFilters?: ScanningRepositoryFilter[];
}
export declare namespace RepositoryScanningConfiguration {
    
    const filterSensitiveLog: (obj: RepositoryScanningConfiguration) => any;
}
export interface BatchGetRepositoryScanningConfigurationResponse {
    
    scanningConfigurations?: RepositoryScanningConfiguration[];
    
    failures?: RepositoryScanningConfigurationFailure[];
}
export declare namespace BatchGetRepositoryScanningConfigurationResponse {
    
    const filterSensitiveLog: (obj: BatchGetRepositoryScanningConfigurationResponse) => any;
}

export declare class ValidationException extends __BaseException {
    readonly name: "ValidationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
}
export interface CompleteLayerUploadRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    uploadId: string | undefined;
    
    layerDigests: string[] | undefined;
}
export declare namespace CompleteLayerUploadRequest {
    
    const filterSensitiveLog: (obj: CompleteLayerUploadRequest) => any;
}
export interface CompleteLayerUploadResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    uploadId?: string;
    
    layerDigest?: string;
}
export declare namespace CompleteLayerUploadResponse {
    
    const filterSensitiveLog: (obj: CompleteLayerUploadResponse) => any;
}

export declare class EmptyUploadException extends __BaseException {
    readonly name: "EmptyUploadException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<EmptyUploadException, __BaseException>);
}

export declare class InvalidLayerException extends __BaseException {
    readonly name: "InvalidLayerException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidLayerException, __BaseException>);
}

export declare class KmsException extends __BaseException {
    readonly name: "KmsException";
    readonly $fault: "client";
    
    kmsError?: string;
    
    constructor(opts: __ExceptionOptionType<KmsException, __BaseException>);
}

export declare class LayerAlreadyExistsException extends __BaseException {
    readonly name: "LayerAlreadyExistsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LayerAlreadyExistsException, __BaseException>);
}

export declare class LayerPartTooSmallException extends __BaseException {
    readonly name: "LayerPartTooSmallException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LayerPartTooSmallException, __BaseException>);
}

export declare class UploadNotFoundException extends __BaseException {
    readonly name: "UploadNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UploadNotFoundException, __BaseException>);
}
export interface CreatePullThroughCacheRuleRequest {
    
    ecrRepositoryPrefix: string | undefined;
    
    upstreamRegistryUrl: string | undefined;
    
    registryId?: string;
}
export declare namespace CreatePullThroughCacheRuleRequest {
    
    const filterSensitiveLog: (obj: CreatePullThroughCacheRuleRequest) => any;
}
export interface CreatePullThroughCacheRuleResponse {
    
    ecrRepositoryPrefix?: string;
    
    upstreamRegistryUrl?: string;
    
    createdAt?: Date;
    
    registryId?: string;
}
export declare namespace CreatePullThroughCacheRuleResponse {
    
    const filterSensitiveLog: (obj: CreatePullThroughCacheRuleResponse) => any;
}

export declare class LimitExceededException extends __BaseException {
    readonly name: "LimitExceededException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
}

export declare class PullThroughCacheRuleAlreadyExistsException extends __BaseException {
    readonly name: "PullThroughCacheRuleAlreadyExistsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<PullThroughCacheRuleAlreadyExistsException, __BaseException>);
}

export declare class UnsupportedUpstreamRegistryException extends __BaseException {
    readonly name: "UnsupportedUpstreamRegistryException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedUpstreamRegistryException, __BaseException>);
}
export declare enum EncryptionType {
    AES256 = "AES256",
    KMS = "KMS"
}

export interface EncryptionConfiguration {
    
    encryptionType: EncryptionType | string | undefined;
    
    kmsKey?: string;
}
export declare namespace EncryptionConfiguration {
    
    const filterSensitiveLog: (obj: EncryptionConfiguration) => any;
}

export interface ImageScanningConfiguration {
    
    scanOnPush?: boolean;
}
export declare namespace ImageScanningConfiguration {
    
    const filterSensitiveLog: (obj: ImageScanningConfiguration) => any;
}
export declare enum ImageTagMutability {
    IMMUTABLE = "IMMUTABLE",
    MUTABLE = "MUTABLE"
}

export interface Tag {
    
    Key?: string;
    
    Value?: string;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}
export interface CreateRepositoryRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    tags?: Tag[];
    
    imageTagMutability?: ImageTagMutability | string;
    
    imageScanningConfiguration?: ImageScanningConfiguration;
    
    encryptionConfiguration?: EncryptionConfiguration;
}
export declare namespace CreateRepositoryRequest {
    
    const filterSensitiveLog: (obj: CreateRepositoryRequest) => any;
}

export interface Repository {
    
    repositoryArn?: string;
    
    registryId?: string;
    
    repositoryName?: string;
    
    repositoryUri?: string;
    
    createdAt?: Date;
    
    imageTagMutability?: ImageTagMutability | string;
    
    imageScanningConfiguration?: ImageScanningConfiguration;
    
    encryptionConfiguration?: EncryptionConfiguration;
}
export declare namespace Repository {
    
    const filterSensitiveLog: (obj: Repository) => any;
}
export interface CreateRepositoryResponse {
    
    repository?: Repository;
}
export declare namespace CreateRepositoryResponse {
    
    const filterSensitiveLog: (obj: CreateRepositoryResponse) => any;
}

export declare class InvalidTagParameterException extends __BaseException {
    readonly name: "InvalidTagParameterException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidTagParameterException, __BaseException>);
}

export declare class RepositoryAlreadyExistsException extends __BaseException {
    readonly name: "RepositoryAlreadyExistsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<RepositoryAlreadyExistsException, __BaseException>);
}

export declare class TooManyTagsException extends __BaseException {
    readonly name: "TooManyTagsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
}
export interface DeleteLifecyclePolicyRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
}
export declare namespace DeleteLifecyclePolicyRequest {
    
    const filterSensitiveLog: (obj: DeleteLifecyclePolicyRequest) => any;
}
export interface DeleteLifecyclePolicyResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    lifecyclePolicyText?: string;
    
    lastEvaluatedAt?: Date;
}
export declare namespace DeleteLifecyclePolicyResponse {
    
    const filterSensitiveLog: (obj: DeleteLifecyclePolicyResponse) => any;
}

export declare class LifecyclePolicyNotFoundException extends __BaseException {
    readonly name: "LifecyclePolicyNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LifecyclePolicyNotFoundException, __BaseException>);
}
export interface DeletePullThroughCacheRuleRequest {
    
    ecrRepositoryPrefix: string | undefined;
    
    registryId?: string;
}
export declare namespace DeletePullThroughCacheRuleRequest {
    
    const filterSensitiveLog: (obj: DeletePullThroughCacheRuleRequest) => any;
}
export interface DeletePullThroughCacheRuleResponse {
    
    ecrRepositoryPrefix?: string;
    
    upstreamRegistryUrl?: string;
    
    createdAt?: Date;
    
    registryId?: string;
}
export declare namespace DeletePullThroughCacheRuleResponse {
    
    const filterSensitiveLog: (obj: DeletePullThroughCacheRuleResponse) => any;
}

export declare class PullThroughCacheRuleNotFoundException extends __BaseException {
    readonly name: "PullThroughCacheRuleNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<PullThroughCacheRuleNotFoundException, __BaseException>);
}
export interface DeleteRegistryPolicyRequest {
}
export declare namespace DeleteRegistryPolicyRequest {
    
    const filterSensitiveLog: (obj: DeleteRegistryPolicyRequest) => any;
}
export interface DeleteRegistryPolicyResponse {
    
    registryId?: string;
    
    policyText?: string;
}
export declare namespace DeleteRegistryPolicyResponse {
    
    const filterSensitiveLog: (obj: DeleteRegistryPolicyResponse) => any;
}

export declare class RegistryPolicyNotFoundException extends __BaseException {
    readonly name: "RegistryPolicyNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<RegistryPolicyNotFoundException, __BaseException>);
}
export interface DeleteRepositoryRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    force?: boolean;
}
export declare namespace DeleteRepositoryRequest {
    
    const filterSensitiveLog: (obj: DeleteRepositoryRequest) => any;
}
export interface DeleteRepositoryResponse {
    
    repository?: Repository;
}
export declare namespace DeleteRepositoryResponse {
    
    const filterSensitiveLog: (obj: DeleteRepositoryResponse) => any;
}

export declare class RepositoryNotEmptyException extends __BaseException {
    readonly name: "RepositoryNotEmptyException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<RepositoryNotEmptyException, __BaseException>);
}
export interface DeleteRepositoryPolicyRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
}
export declare namespace DeleteRepositoryPolicyRequest {
    
    const filterSensitiveLog: (obj: DeleteRepositoryPolicyRequest) => any;
}
export interface DeleteRepositoryPolicyResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    policyText?: string;
}
export declare namespace DeleteRepositoryPolicyResponse {
    
    const filterSensitiveLog: (obj: DeleteRepositoryPolicyResponse) => any;
}

export declare class RepositoryPolicyNotFoundException extends __BaseException {
    readonly name: "RepositoryPolicyNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<RepositoryPolicyNotFoundException, __BaseException>);
}
export interface DescribeImageReplicationStatusRequest {
    
    repositoryName: string | undefined;
    
    imageId: ImageIdentifier | undefined;
    
    registryId?: string;
}
export declare namespace DescribeImageReplicationStatusRequest {
    
    const filterSensitiveLog: (obj: DescribeImageReplicationStatusRequest) => any;
}
export declare enum ReplicationStatus {
    COMPLETE = "COMPLETE",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS"
}

export interface ImageReplicationStatus {
    
    region?: string;
    
    registryId?: string;
    
    status?: ReplicationStatus | string;
    
    failureCode?: string;
}
export declare namespace ImageReplicationStatus {
    
    const filterSensitiveLog: (obj: ImageReplicationStatus) => any;
}
export interface DescribeImageReplicationStatusResponse {
    
    repositoryName?: string;
    
    imageId?: ImageIdentifier;
    
    replicationStatuses?: ImageReplicationStatus[];
}
export declare namespace DescribeImageReplicationStatusResponse {
    
    const filterSensitiveLog: (obj: DescribeImageReplicationStatusResponse) => any;
}

export declare class ImageNotFoundException extends __BaseException {
    readonly name: "ImageNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ImageNotFoundException, __BaseException>);
}
export declare enum TagStatus {
    ANY = "ANY",
    TAGGED = "TAGGED",
    UNTAGGED = "UNTAGGED"
}

export interface DescribeImagesFilter {
    
    tagStatus?: TagStatus | string;
}
export declare namespace DescribeImagesFilter {
    
    const filterSensitiveLog: (obj: DescribeImagesFilter) => any;
}
export interface DescribeImagesRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    imageIds?: ImageIdentifier[];
    
    nextToken?: string;
    
    maxResults?: number;
    
    filter?: DescribeImagesFilter;
}
export declare namespace DescribeImagesRequest {
    
    const filterSensitiveLog: (obj: DescribeImagesRequest) => any;
}
export declare enum FindingSeverity {
    CRITICAL = "CRITICAL",
    HIGH = "HIGH",
    INFORMATIONAL = "INFORMATIONAL",
    LOW = "LOW",
    MEDIUM = "MEDIUM",
    UNDEFINED = "UNDEFINED"
}

export interface ImageScanFindingsSummary {
    
    imageScanCompletedAt?: Date;
    
    vulnerabilitySourceUpdatedAt?: Date;
    
    findingSeverityCounts?: Record<string, number>;
}
export declare namespace ImageScanFindingsSummary {
    
    const filterSensitiveLog: (obj: ImageScanFindingsSummary) => any;
}
export declare enum ScanStatus {
    ACTIVE = "ACTIVE",
    COMPLETE = "COMPLETE",
    FAILED = "FAILED",
    FINDINGS_UNAVAILABLE = "FINDINGS_UNAVAILABLE",
    IN_PROGRESS = "IN_PROGRESS",
    PENDING = "PENDING",
    SCAN_ELIGIBILITY_EXPIRED = "SCAN_ELIGIBILITY_EXPIRED",
    UNSUPPORTED_IMAGE = "UNSUPPORTED_IMAGE"
}

export interface ImageScanStatus {
    
    status?: ScanStatus | string;
    
    description?: string;
}
export declare namespace ImageScanStatus {
    
    const filterSensitiveLog: (obj: ImageScanStatus) => any;
}

export interface ImageDetail {
    
    registryId?: string;
    
    repositoryName?: string;
    
    imageDigest?: string;
    
    imageTags?: string[];
    
    imageSizeInBytes?: number;
    
    imagePushedAt?: Date;
    
    imageScanStatus?: ImageScanStatus;
    
    imageScanFindingsSummary?: ImageScanFindingsSummary;
    
    imageManifestMediaType?: string;
    
    artifactMediaType?: string;
    
    lastRecordedPullTime?: Date;
}
export declare namespace ImageDetail {
    
    const filterSensitiveLog: (obj: ImageDetail) => any;
}
export interface DescribeImagesResponse {
    
    imageDetails?: ImageDetail[];
    
    nextToken?: string;
}
export declare namespace DescribeImagesResponse {
    
    const filterSensitiveLog: (obj: DescribeImagesResponse) => any;
}
export interface DescribeImageScanFindingsRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    imageId: ImageIdentifier | undefined;
    
    nextToken?: string;
    
    maxResults?: number;
}
export declare namespace DescribeImageScanFindingsRequest {
    
    const filterSensitiveLog: (obj: DescribeImageScanFindingsRequest) => any;
}

export interface CvssScore {
    
    baseScore?: number;
    
    scoringVector?: string;
    
    source?: string;
    
    version?: string;
}
export declare namespace CvssScore {
    
    const filterSensitiveLog: (obj: CvssScore) => any;
}

export interface VulnerablePackage {
    
    arch?: string;
    
    epoch?: number;
    
    filePath?: string;
    
    name?: string;
    
    packageManager?: string;
    
    release?: string;
    
    sourceLayerHash?: string;
    
    version?: string;
}
export declare namespace VulnerablePackage {
    
    const filterSensitiveLog: (obj: VulnerablePackage) => any;
}

export interface PackageVulnerabilityDetails {
    
    cvss?: CvssScore[];
    
    referenceUrls?: string[];
    
    relatedVulnerabilities?: string[];
    
    source?: string;
    
    sourceUrl?: string;
    
    vendorCreatedAt?: Date;
    
    vendorSeverity?: string;
    
    vendorUpdatedAt?: Date;
    
    vulnerabilityId?: string;
    
    vulnerablePackages?: VulnerablePackage[];
}
export declare namespace PackageVulnerabilityDetails {
    
    const filterSensitiveLog: (obj: PackageVulnerabilityDetails) => any;
}

export interface Recommendation {
    
    url?: string;
    
    text?: string;
}
export declare namespace Recommendation {
    
    const filterSensitiveLog: (obj: Recommendation) => any;
}

export interface Remediation {
    
    recommendation?: Recommendation;
}
export declare namespace Remediation {
    
    const filterSensitiveLog: (obj: Remediation) => any;
}

export interface AwsEcrContainerImageDetails {
    
    architecture?: string;
    
    author?: string;
    
    imageHash?: string;
    
    imageTags?: string[];
    
    platform?: string;
    
    pushedAt?: Date;
    
    registry?: string;
    
    repositoryName?: string;
}
export declare namespace AwsEcrContainerImageDetails {
    
    const filterSensitiveLog: (obj: AwsEcrContainerImageDetails) => any;
}

export interface ResourceDetails {
    
    awsEcrContainerImage?: AwsEcrContainerImageDetails;
}
export declare namespace ResourceDetails {
    
    const filterSensitiveLog: (obj: ResourceDetails) => any;
}

export interface Resource {
    
    details?: ResourceDetails;
    
    id?: string;
    
    tags?: Record<string, string>;
    
    type?: string;
}
export declare namespace Resource {
    
    const filterSensitiveLog: (obj: Resource) => any;
}

export interface CvssScoreAdjustment {
    
    metric?: string;
    
    reason?: string;
}
export declare namespace CvssScoreAdjustment {
    
    const filterSensitiveLog: (obj: CvssScoreAdjustment) => any;
}

export interface CvssScoreDetails {
    
    adjustments?: CvssScoreAdjustment[];
    
    score?: number;
    
    scoreSource?: string;
    
    scoringVector?: string;
    
    version?: string;
}
export declare namespace CvssScoreDetails {
    
    const filterSensitiveLog: (obj: CvssScoreDetails) => any;
}

export interface ScoreDetails {
    
    cvss?: CvssScoreDetails;
}
export declare namespace ScoreDetails {
    
    const filterSensitiveLog: (obj: ScoreDetails) => any;
}

export interface EnhancedImageScanFinding {
    
    awsAccountId?: string;
    
    description?: string;
    
    findingArn?: string;
    
    firstObservedAt?: Date;
    
    lastObservedAt?: Date;
    
    packageVulnerabilityDetails?: PackageVulnerabilityDetails;
    
    remediation?: Remediation;
    
    resources?: Resource[];
    
    score?: number;
    
    scoreDetails?: ScoreDetails;
    
    severity?: string;
    
    status?: string;
    
    title?: string;
    
    type?: string;
    
    updatedAt?: Date;
}
export declare namespace EnhancedImageScanFinding {
    
    const filterSensitiveLog: (obj: EnhancedImageScanFinding) => any;
}

export interface Attribute {
    
    key: string | undefined;
    
    value?: string;
}
export declare namespace Attribute {
    
    const filterSensitiveLog: (obj: Attribute) => any;
}

export interface ImageScanFinding {
    
    name?: string;
    
    description?: string;
    
    uri?: string;
    
    severity?: FindingSeverity | string;
    
    attributes?: Attribute[];
}
export declare namespace ImageScanFinding {
    
    const filterSensitiveLog: (obj: ImageScanFinding) => any;
}

export interface ImageScanFindings {
    
    imageScanCompletedAt?: Date;
    
    vulnerabilitySourceUpdatedAt?: Date;
    
    findingSeverityCounts?: Record<string, number>;
    
    findings?: ImageScanFinding[];
    
    enhancedFindings?: EnhancedImageScanFinding[];
}
export declare namespace ImageScanFindings {
    
    const filterSensitiveLog: (obj: ImageScanFindings) => any;
}
export interface DescribeImageScanFindingsResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    imageId?: ImageIdentifier;
    
    imageScanStatus?: ImageScanStatus;
    
    imageScanFindings?: ImageScanFindings;
    
    nextToken?: string;
}
export declare namespace DescribeImageScanFindingsResponse {
    
    const filterSensitiveLog: (obj: DescribeImageScanFindingsResponse) => any;
}

export declare class ScanNotFoundException extends __BaseException {
    readonly name: "ScanNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ScanNotFoundException, __BaseException>);
}
export interface DescribePullThroughCacheRulesRequest {
    
    registryId?: string;
    
    ecrRepositoryPrefixes?: string[];
    
    nextToken?: string;
    
    maxResults?: number;
}
export declare namespace DescribePullThroughCacheRulesRequest {
    
    const filterSensitiveLog: (obj: DescribePullThroughCacheRulesRequest) => any;
}

export interface PullThroughCacheRule {
    
    ecrRepositoryPrefix?: string;
    
    upstreamRegistryUrl?: string;
    
    createdAt?: Date;
    
    registryId?: string;
}
export declare namespace PullThroughCacheRule {
    
    const filterSensitiveLog: (obj: PullThroughCacheRule) => any;
}
export interface DescribePullThroughCacheRulesResponse {
    
    pullThroughCacheRules?: PullThroughCacheRule[];
    
    nextToken?: string;
}
export declare namespace DescribePullThroughCacheRulesResponse {
    
    const filterSensitiveLog: (obj: DescribePullThroughCacheRulesResponse) => any;
}
export interface DescribeRegistryRequest {
}
export declare namespace DescribeRegistryRequest {
    
    const filterSensitiveLog: (obj: DescribeRegistryRequest) => any;
}

export interface ReplicationDestination {
    
    region: string | undefined;
    
    registryId: string | undefined;
}
export declare namespace ReplicationDestination {
    
    const filterSensitiveLog: (obj: ReplicationDestination) => any;
}
export declare enum RepositoryFilterType {
    PREFIX_MATCH = "PREFIX_MATCH"
}

export interface RepositoryFilter {
    
    filter: string | undefined;
    
    filterType: RepositoryFilterType | string | undefined;
}
export declare namespace RepositoryFilter {
    
    const filterSensitiveLog: (obj: RepositoryFilter) => any;
}

export interface ReplicationRule {
    
    destinations: ReplicationDestination[] | undefined;
    
    repositoryFilters?: RepositoryFilter[];
}
export declare namespace ReplicationRule {
    
    const filterSensitiveLog: (obj: ReplicationRule) => any;
}

export interface ReplicationConfiguration {
    
    rules: ReplicationRule[] | undefined;
}
export declare namespace ReplicationConfiguration {
    
    const filterSensitiveLog: (obj: ReplicationConfiguration) => any;
}
export interface DescribeRegistryResponse {
    
    registryId?: string;
    
    replicationConfiguration?: ReplicationConfiguration;
}
export declare namespace DescribeRegistryResponse {
    
    const filterSensitiveLog: (obj: DescribeRegistryResponse) => any;
}
export interface DescribeRepositoriesRequest {
    
    registryId?: string;
    
    repositoryNames?: string[];
    
    nextToken?: string;
    
    maxResults?: number;
}
export declare namespace DescribeRepositoriesRequest {
    
    const filterSensitiveLog: (obj: DescribeRepositoriesRequest) => any;
}
export interface DescribeRepositoriesResponse {
    
    repositories?: Repository[];
    
    nextToken?: string;
}
export declare namespace DescribeRepositoriesResponse {
    
    const filterSensitiveLog: (obj: DescribeRepositoriesResponse) => any;
}
export interface GetAuthorizationTokenRequest {
    
    registryIds?: string[];
}
export declare namespace GetAuthorizationTokenRequest {
    
    const filterSensitiveLog: (obj: GetAuthorizationTokenRequest) => any;
}

export interface AuthorizationData {
    
    authorizationToken?: string;
    
    expiresAt?: Date;
    
    proxyEndpoint?: string;
}
export declare namespace AuthorizationData {
    
    const filterSensitiveLog: (obj: AuthorizationData) => any;
}
export interface GetAuthorizationTokenResponse {
    
    authorizationData?: AuthorizationData[];
}
export declare namespace GetAuthorizationTokenResponse {
    
    const filterSensitiveLog: (obj: GetAuthorizationTokenResponse) => any;
}
export interface GetDownloadUrlForLayerRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    layerDigest: string | undefined;
}
export declare namespace GetDownloadUrlForLayerRequest {
    
    const filterSensitiveLog: (obj: GetDownloadUrlForLayerRequest) => any;
}
export interface GetDownloadUrlForLayerResponse {
    
    downloadUrl?: string;
    
    layerDigest?: string;
}
export declare namespace GetDownloadUrlForLayerResponse {
    
    const filterSensitiveLog: (obj: GetDownloadUrlForLayerResponse) => any;
}

export declare class LayerInaccessibleException extends __BaseException {
    readonly name: "LayerInaccessibleException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LayerInaccessibleException, __BaseException>);
}

export declare class LayersNotFoundException extends __BaseException {
    readonly name: "LayersNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LayersNotFoundException, __BaseException>);
}
export interface GetLifecyclePolicyRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
}
export declare namespace GetLifecyclePolicyRequest {
    
    const filterSensitiveLog: (obj: GetLifecyclePolicyRequest) => any;
}
export interface GetLifecyclePolicyResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    lifecyclePolicyText?: string;
    
    lastEvaluatedAt?: Date;
}
export declare namespace GetLifecyclePolicyResponse {
    
    const filterSensitiveLog: (obj: GetLifecyclePolicyResponse) => any;
}

export interface LifecyclePolicyPreviewFilter {
    
    tagStatus?: TagStatus | string;
}
export declare namespace LifecyclePolicyPreviewFilter {
    
    const filterSensitiveLog: (obj: LifecyclePolicyPreviewFilter) => any;
}
export interface GetLifecyclePolicyPreviewRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    imageIds?: ImageIdentifier[];
    
    nextToken?: string;
    
    maxResults?: number;
    
    filter?: LifecyclePolicyPreviewFilter;
}
export declare namespace GetLifecyclePolicyPreviewRequest {
    
    const filterSensitiveLog: (obj: GetLifecyclePolicyPreviewRequest) => any;
}
export declare enum ImageActionType {
    EXPIRE = "EXPIRE"
}

export interface LifecyclePolicyRuleAction {
    
    type?: ImageActionType | string;
}
export declare namespace LifecyclePolicyRuleAction {
    
    const filterSensitiveLog: (obj: LifecyclePolicyRuleAction) => any;
}

export interface LifecyclePolicyPreviewResult {
    
    imageTags?: string[];
    
    imageDigest?: string;
    
    imagePushedAt?: Date;
    
    action?: LifecyclePolicyRuleAction;
    
    appliedRulePriority?: number;
}
export declare namespace LifecyclePolicyPreviewResult {
    
    const filterSensitiveLog: (obj: LifecyclePolicyPreviewResult) => any;
}
export declare enum LifecyclePolicyPreviewStatus {
    COMPLETE = "COMPLETE",
    EXPIRED = "EXPIRED",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS"
}

export interface LifecyclePolicyPreviewSummary {
    
    expiringImageTotalCount?: number;
}
export declare namespace LifecyclePolicyPreviewSummary {
    
    const filterSensitiveLog: (obj: LifecyclePolicyPreviewSummary) => any;
}
export interface GetLifecyclePolicyPreviewResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    lifecyclePolicyText?: string;
    
    status?: LifecyclePolicyPreviewStatus | string;
    
    nextToken?: string;
    
    previewResults?: LifecyclePolicyPreviewResult[];
    
    summary?: LifecyclePolicyPreviewSummary;
}
export declare namespace GetLifecyclePolicyPreviewResponse {
    
    const filterSensitiveLog: (obj: GetLifecyclePolicyPreviewResponse) => any;
}

export declare class LifecyclePolicyPreviewNotFoundException extends __BaseException {
    readonly name: "LifecyclePolicyPreviewNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LifecyclePolicyPreviewNotFoundException, __BaseException>);
}
export interface GetRegistryPolicyRequest {
}
export declare namespace GetRegistryPolicyRequest {
    
    const filterSensitiveLog: (obj: GetRegistryPolicyRequest) => any;
}
export interface GetRegistryPolicyResponse {
    
    registryId?: string;
    
    policyText?: string;
}
export declare namespace GetRegistryPolicyResponse {
    
    const filterSensitiveLog: (obj: GetRegistryPolicyResponse) => any;
}
export interface GetRegistryScanningConfigurationRequest {
}
export declare namespace GetRegistryScanningConfigurationRequest {
    
    const filterSensitiveLog: (obj: GetRegistryScanningConfigurationRequest) => any;
}

export interface RegistryScanningRule {
    
    scanFrequency: ScanFrequency | string | undefined;
    
    repositoryFilters: ScanningRepositoryFilter[] | undefined;
}
export declare namespace RegistryScanningRule {
    
    const filterSensitiveLog: (obj: RegistryScanningRule) => any;
}
export declare enum ScanType {
    BASIC = "BASIC",
    ENHANCED = "ENHANCED"
}

export interface RegistryScanningConfiguration {
    
    scanType?: ScanType | string;
    
    rules?: RegistryScanningRule[];
}
export declare namespace RegistryScanningConfiguration {
    
    const filterSensitiveLog: (obj: RegistryScanningConfiguration) => any;
}
export interface GetRegistryScanningConfigurationResponse {
    
    registryId?: string;
    
    scanningConfiguration?: RegistryScanningConfiguration;
}
export declare namespace GetRegistryScanningConfigurationResponse {
    
    const filterSensitiveLog: (obj: GetRegistryScanningConfigurationResponse) => any;
}
export interface GetRepositoryPolicyRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
}
export declare namespace GetRepositoryPolicyRequest {
    
    const filterSensitiveLog: (obj: GetRepositoryPolicyRequest) => any;
}
export interface GetRepositoryPolicyResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    policyText?: string;
}
export declare namespace GetRepositoryPolicyResponse {
    
    const filterSensitiveLog: (obj: GetRepositoryPolicyResponse) => any;
}
export interface InitiateLayerUploadRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
}
export declare namespace InitiateLayerUploadRequest {
    
    const filterSensitiveLog: (obj: InitiateLayerUploadRequest) => any;
}
export interface InitiateLayerUploadResponse {
    
    uploadId?: string;
    
    partSize?: number;
}
export declare namespace InitiateLayerUploadResponse {
    
    const filterSensitiveLog: (obj: InitiateLayerUploadResponse) => any;
}

export interface ListImagesFilter {
    
    tagStatus?: TagStatus | string;
}
export declare namespace ListImagesFilter {
    
    const filterSensitiveLog: (obj: ListImagesFilter) => any;
}
export interface ListImagesRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    nextToken?: string;
    
    maxResults?: number;
    
    filter?: ListImagesFilter;
}
export declare namespace ListImagesRequest {
    
    const filterSensitiveLog: (obj: ListImagesRequest) => any;
}
export interface ListImagesResponse {
    
    imageIds?: ImageIdentifier[];
    
    nextToken?: string;
}
export declare namespace ListImagesResponse {
    
    const filterSensitiveLog: (obj: ListImagesResponse) => any;
}
export interface ListTagsForResourceRequest {
    
    resourceArn: string | undefined;
}
export declare namespace ListTagsForResourceRequest {
    
    const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
}
export interface ListTagsForResourceResponse {
    
    tags?: Tag[];
}
export declare namespace ListTagsForResourceResponse {
    
    const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
}

export declare class ImageAlreadyExistsException extends __BaseException {
    readonly name: "ImageAlreadyExistsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ImageAlreadyExistsException, __BaseException>);
}

export declare class ImageDigestDoesNotMatchException extends __BaseException {
    readonly name: "ImageDigestDoesNotMatchException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ImageDigestDoesNotMatchException, __BaseException>);
}

export declare class ImageTagAlreadyExistsException extends __BaseException {
    readonly name: "ImageTagAlreadyExistsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ImageTagAlreadyExistsException, __BaseException>);
}
export interface PutImageRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    imageManifest: string | undefined;
    
    imageManifestMediaType?: string;
    
    imageTag?: string;
    
    imageDigest?: string;
}
export declare namespace PutImageRequest {
    
    const filterSensitiveLog: (obj: PutImageRequest) => any;
}
export interface PutImageResponse {
    
    image?: Image;
}
export declare namespace PutImageResponse {
    
    const filterSensitiveLog: (obj: PutImageResponse) => any;
}

export declare class ReferencedImagesNotFoundException extends __BaseException {
    readonly name: "ReferencedImagesNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ReferencedImagesNotFoundException, __BaseException>);
}
export interface PutImageScanningConfigurationRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    imageScanningConfiguration: ImageScanningConfiguration | undefined;
}
export declare namespace PutImageScanningConfigurationRequest {
    
    const filterSensitiveLog: (obj: PutImageScanningConfigurationRequest) => any;
}
export interface PutImageScanningConfigurationResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    imageScanningConfiguration?: ImageScanningConfiguration;
}
export declare namespace PutImageScanningConfigurationResponse {
    
    const filterSensitiveLog: (obj: PutImageScanningConfigurationResponse) => any;
}
export interface PutImageTagMutabilityRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    imageTagMutability: ImageTagMutability | string | undefined;
}
export declare namespace PutImageTagMutabilityRequest {
    
    const filterSensitiveLog: (obj: PutImageTagMutabilityRequest) => any;
}
export interface PutImageTagMutabilityResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    imageTagMutability?: ImageTagMutability | string;
}
export declare namespace PutImageTagMutabilityResponse {
    
    const filterSensitiveLog: (obj: PutImageTagMutabilityResponse) => any;
}
export interface PutLifecyclePolicyRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    lifecyclePolicyText: string | undefined;
}
export declare namespace PutLifecyclePolicyRequest {
    
    const filterSensitiveLog: (obj: PutLifecyclePolicyRequest) => any;
}
export interface PutLifecyclePolicyResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    lifecyclePolicyText?: string;
}
export declare namespace PutLifecyclePolicyResponse {
    
    const filterSensitiveLog: (obj: PutLifecyclePolicyResponse) => any;
}
export interface PutRegistryPolicyRequest {
    
    policyText: string | undefined;
}
export declare namespace PutRegistryPolicyRequest {
    
    const filterSensitiveLog: (obj: PutRegistryPolicyRequest) => any;
}
export interface PutRegistryPolicyResponse {
    
    registryId?: string;
    
    policyText?: string;
}
export declare namespace PutRegistryPolicyResponse {
    
    const filterSensitiveLog: (obj: PutRegistryPolicyResponse) => any;
}
export interface PutRegistryScanningConfigurationRequest {
    
    scanType?: ScanType | string;
    
    rules?: RegistryScanningRule[];
}
export declare namespace PutRegistryScanningConfigurationRequest {
    
    const filterSensitiveLog: (obj: PutRegistryScanningConfigurationRequest) => any;
}
export interface PutRegistryScanningConfigurationResponse {
    
    registryScanningConfiguration?: RegistryScanningConfiguration;
}
export declare namespace PutRegistryScanningConfigurationResponse {
    
    const filterSensitiveLog: (obj: PutRegistryScanningConfigurationResponse) => any;
}
export interface PutReplicationConfigurationRequest {
    
    replicationConfiguration: ReplicationConfiguration | undefined;
}
export declare namespace PutReplicationConfigurationRequest {
    
    const filterSensitiveLog: (obj: PutReplicationConfigurationRequest) => any;
}
export interface PutReplicationConfigurationResponse {
    
    replicationConfiguration?: ReplicationConfiguration;
}
export declare namespace PutReplicationConfigurationResponse {
    
    const filterSensitiveLog: (obj: PutReplicationConfigurationResponse) => any;
}
export interface SetRepositoryPolicyRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    policyText: string | undefined;
    
    force?: boolean;
}
export declare namespace SetRepositoryPolicyRequest {
    
    const filterSensitiveLog: (obj: SetRepositoryPolicyRequest) => any;
}
export interface SetRepositoryPolicyResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    policyText?: string;
}
export declare namespace SetRepositoryPolicyResponse {
    
    const filterSensitiveLog: (obj: SetRepositoryPolicyResponse) => any;
}
export interface StartImageScanRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    imageId: ImageIdentifier | undefined;
}
export declare namespace StartImageScanRequest {
    
    const filterSensitiveLog: (obj: StartImageScanRequest) => any;
}
export interface StartImageScanResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    imageId?: ImageIdentifier;
    
    imageScanStatus?: ImageScanStatus;
}
export declare namespace StartImageScanResponse {
    
    const filterSensitiveLog: (obj: StartImageScanResponse) => any;
}

export declare class UnsupportedImageTypeException extends __BaseException {
    readonly name: "UnsupportedImageTypeException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedImageTypeException, __BaseException>);
}

export declare class LifecyclePolicyPreviewInProgressException extends __BaseException {
    readonly name: "LifecyclePolicyPreviewInProgressException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LifecyclePolicyPreviewInProgressException, __BaseException>);
}
export interface StartLifecyclePolicyPreviewRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    lifecyclePolicyText?: string;
}
export declare namespace StartLifecyclePolicyPreviewRequest {
    
    const filterSensitiveLog: (obj: StartLifecyclePolicyPreviewRequest) => any;
}
export interface StartLifecyclePolicyPreviewResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    lifecyclePolicyText?: string;
    
    status?: LifecyclePolicyPreviewStatus | string;
}
export declare namespace StartLifecyclePolicyPreviewResponse {
    
    const filterSensitiveLog: (obj: StartLifecyclePolicyPreviewResponse) => any;
}
export interface TagResourceRequest {
    
    resourceArn: string | undefined;
    
    tags: Tag[] | undefined;
}
export declare namespace TagResourceRequest {
    
    const filterSensitiveLog: (obj: TagResourceRequest) => any;
}
export interface TagResourceResponse {
}
export declare namespace TagResourceResponse {
    
    const filterSensitiveLog: (obj: TagResourceResponse) => any;
}
export interface UntagResourceRequest {
    
    resourceArn: string | undefined;
    
    tagKeys: string[] | undefined;
}
export declare namespace UntagResourceRequest {
    
    const filterSensitiveLog: (obj: UntagResourceRequest) => any;
}
export interface UntagResourceResponse {
}
export declare namespace UntagResourceResponse {
    
    const filterSensitiveLog: (obj: UntagResourceResponse) => any;
}

export declare class InvalidLayerPartException extends __BaseException {
    readonly name: "InvalidLayerPartException";
    readonly $fault: "client";
    
    registryId?: string;
    
    repositoryName?: string;
    
    uploadId?: string;
    
    lastValidByteReceived?: number;
    
    constructor(opts: __ExceptionOptionType<InvalidLayerPartException, __BaseException>);
}
export interface UploadLayerPartRequest {
    
    registryId?: string;
    
    repositoryName: string | undefined;
    
    uploadId: string | undefined;
    
    partFirstByte: number | undefined;
    
    partLastByte: number | undefined;
    
    layerPartBlob: Uint8Array | undefined;
}
export declare namespace UploadLayerPartRequest {
    
    const filterSensitiveLog: (obj: UploadLayerPartRequest) => any;
}
export interface UploadLayerPartResponse {
    
    registryId?: string;
    
    repositoryName?: string;
    
    uploadId?: string;
    
    lastByteReceived?: number;
}
export declare namespace UploadLayerPartResponse {
    
    const filterSensitiveLog: (obj: UploadLayerPartResponse) => any;
}
