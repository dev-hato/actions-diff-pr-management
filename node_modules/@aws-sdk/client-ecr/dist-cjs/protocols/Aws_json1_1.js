"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_json1_1DeletePullThroughCacheRuleCommand = exports.deserializeAws_json1_1DeleteLifecyclePolicyCommand = exports.deserializeAws_json1_1CreateRepositoryCommand = exports.deserializeAws_json1_1CreatePullThroughCacheRuleCommand = exports.deserializeAws_json1_1CompleteLayerUploadCommand = exports.deserializeAws_json1_1BatchGetRepositoryScanningConfigurationCommand = exports.deserializeAws_json1_1BatchGetImageCommand = exports.deserializeAws_json1_1BatchDeleteImageCommand = exports.deserializeAws_json1_1BatchCheckLayerAvailabilityCommand = exports.serializeAws_json1_1UploadLayerPartCommand = exports.serializeAws_json1_1UntagResourceCommand = exports.serializeAws_json1_1TagResourceCommand = exports.serializeAws_json1_1StartLifecyclePolicyPreviewCommand = exports.serializeAws_json1_1StartImageScanCommand = exports.serializeAws_json1_1SetRepositoryPolicyCommand = exports.serializeAws_json1_1PutReplicationConfigurationCommand = exports.serializeAws_json1_1PutRegistryScanningConfigurationCommand = exports.serializeAws_json1_1PutRegistryPolicyCommand = exports.serializeAws_json1_1PutLifecyclePolicyCommand = exports.serializeAws_json1_1PutImageTagMutabilityCommand = exports.serializeAws_json1_1PutImageScanningConfigurationCommand = exports.serializeAws_json1_1PutImageCommand = exports.serializeAws_json1_1ListTagsForResourceCommand = exports.serializeAws_json1_1ListImagesCommand = exports.serializeAws_json1_1InitiateLayerUploadCommand = exports.serializeAws_json1_1GetRepositoryPolicyCommand = exports.serializeAws_json1_1GetRegistryScanningConfigurationCommand = exports.serializeAws_json1_1GetRegistryPolicyCommand = exports.serializeAws_json1_1GetLifecyclePolicyPreviewCommand = exports.serializeAws_json1_1GetLifecyclePolicyCommand = exports.serializeAws_json1_1GetDownloadUrlForLayerCommand = exports.serializeAws_json1_1GetAuthorizationTokenCommand = exports.serializeAws_json1_1DescribeRepositoriesCommand = exports.serializeAws_json1_1DescribeRegistryCommand = exports.serializeAws_json1_1DescribePullThroughCacheRulesCommand = exports.serializeAws_json1_1DescribeImageScanFindingsCommand = exports.serializeAws_json1_1DescribeImagesCommand = exports.serializeAws_json1_1DescribeImageReplicationStatusCommand = exports.serializeAws_json1_1DeleteRepositoryPolicyCommand = exports.serializeAws_json1_1DeleteRepositoryCommand = exports.serializeAws_json1_1DeleteRegistryPolicyCommand = exports.serializeAws_json1_1DeletePullThroughCacheRuleCommand = exports.serializeAws_json1_1DeleteLifecyclePolicyCommand = exports.serializeAws_json1_1CreateRepositoryCommand = exports.serializeAws_json1_1CreatePullThroughCacheRuleCommand = exports.serializeAws_json1_1CompleteLayerUploadCommand = exports.serializeAws_json1_1BatchGetRepositoryScanningConfigurationCommand = exports.serializeAws_json1_1BatchGetImageCommand = exports.serializeAws_json1_1BatchDeleteImageCommand = exports.serializeAws_json1_1BatchCheckLayerAvailabilityCommand = void 0;
exports.deserializeAws_json1_1UploadLayerPartCommand = exports.deserializeAws_json1_1UntagResourceCommand = exports.deserializeAws_json1_1TagResourceCommand = exports.deserializeAws_json1_1StartLifecyclePolicyPreviewCommand = exports.deserializeAws_json1_1StartImageScanCommand = exports.deserializeAws_json1_1SetRepositoryPolicyCommand = exports.deserializeAws_json1_1PutReplicationConfigurationCommand = exports.deserializeAws_json1_1PutRegistryScanningConfigurationCommand = exports.deserializeAws_json1_1PutRegistryPolicyCommand = exports.deserializeAws_json1_1PutLifecyclePolicyCommand = exports.deserializeAws_json1_1PutImageTagMutabilityCommand = exports.deserializeAws_json1_1PutImageScanningConfigurationCommand = exports.deserializeAws_json1_1PutImageCommand = exports.deserializeAws_json1_1ListTagsForResourceCommand = exports.deserializeAws_json1_1ListImagesCommand = exports.deserializeAws_json1_1InitiateLayerUploadCommand = exports.deserializeAws_json1_1GetRepositoryPolicyCommand = exports.deserializeAws_json1_1GetRegistryScanningConfigurationCommand = exports.deserializeAws_json1_1GetRegistryPolicyCommand = exports.deserializeAws_json1_1GetLifecyclePolicyPreviewCommand = exports.deserializeAws_json1_1GetLifecyclePolicyCommand = exports.deserializeAws_json1_1GetDownloadUrlForLayerCommand = exports.deserializeAws_json1_1GetAuthorizationTokenCommand = exports.deserializeAws_json1_1DescribeRepositoriesCommand = exports.deserializeAws_json1_1DescribeRegistryCommand = exports.deserializeAws_json1_1DescribePullThroughCacheRulesCommand = exports.deserializeAws_json1_1DescribeImageScanFindingsCommand = exports.deserializeAws_json1_1DescribeImagesCommand = exports.deserializeAws_json1_1DescribeImageReplicationStatusCommand = exports.deserializeAws_json1_1DeleteRepositoryPolicyCommand = exports.deserializeAws_json1_1DeleteRepositoryCommand = exports.deserializeAws_json1_1DeleteRegistryPolicyCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const ECRServiceException_1 = require("../models/ECRServiceException");
const models_0_1 = require("../models/models_0");
const serializeAws_json1_1BatchCheckLayerAvailabilityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchCheckLayerAvailabilityRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchCheckLayerAvailabilityCommand = serializeAws_json1_1BatchCheckLayerAvailabilityCommand;
const serializeAws_json1_1BatchDeleteImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchDeleteImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchDeleteImageCommand = serializeAws_json1_1BatchDeleteImageCommand;
const serializeAws_json1_1BatchGetImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.BatchGetImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchGetImageCommand = serializeAws_json1_1BatchGetImageCommand;
const serializeAws_json1_1BatchGetRepositoryScanningConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.BatchGetRepositoryScanningConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetRepositoryScanningConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1BatchGetRepositoryScanningConfigurationCommand = serializeAws_json1_1BatchGetRepositoryScanningConfigurationCommand;
const serializeAws_json1_1CompleteLayerUploadCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CompleteLayerUploadRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CompleteLayerUploadCommand = serializeAws_json1_1CompleteLayerUploadCommand;
const serializeAws_json1_1CreatePullThroughCacheRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreatePullThroughCacheRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreatePullThroughCacheRuleCommand = serializeAws_json1_1CreatePullThroughCacheRuleCommand;
const serializeAws_json1_1CreateRepositoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.CreateRepository",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateRepositoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateRepositoryCommand = serializeAws_json1_1CreateRepositoryCommand;
const serializeAws_json1_1DeleteLifecyclePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteLifecyclePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteLifecyclePolicyCommand = serializeAws_json1_1DeleteLifecyclePolicyCommand;
const serializeAws_json1_1DeletePullThroughCacheRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DeletePullThroughCacheRule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeletePullThroughCacheRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeletePullThroughCacheRuleCommand = serializeAws_json1_1DeletePullThroughCacheRuleCommand;
const serializeAws_json1_1DeleteRegistryPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteRegistryPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteRegistryPolicyCommand = serializeAws_json1_1DeleteRegistryPolicyCommand;
const serializeAws_json1_1DeleteRepositoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DeleteRepository",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteRepositoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteRepositoryCommand = serializeAws_json1_1DeleteRepositoryCommand;
const serializeAws_json1_1DeleteRepositoryPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteRepositoryPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteRepositoryPolicyCommand = serializeAws_json1_1DeleteRepositoryPolicyCommand;
const serializeAws_json1_1DescribeImageReplicationStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DescribeImageReplicationStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeImageReplicationStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeImageReplicationStatusCommand = serializeAws_json1_1DescribeImageReplicationStatusCommand;
const serializeAws_json1_1DescribeImagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DescribeImages",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeImagesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeImagesCommand = serializeAws_json1_1DescribeImagesCommand;
const serializeAws_json1_1DescribeImageScanFindingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeImageScanFindingsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeImageScanFindingsCommand = serializeAws_json1_1DescribeImageScanFindingsCommand;
const serializeAws_json1_1DescribePullThroughCacheRulesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DescribePullThroughCacheRules",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribePullThroughCacheRulesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribePullThroughCacheRulesCommand = serializeAws_json1_1DescribePullThroughCacheRulesCommand;
const serializeAws_json1_1DescribeRegistryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DescribeRegistry",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeRegistryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeRegistryCommand = serializeAws_json1_1DescribeRegistryCommand;
const serializeAws_json1_1DescribeRepositoriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.DescribeRepositories",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeRepositoriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeRepositoriesCommand = serializeAws_json1_1DescribeRepositoriesCommand;
const serializeAws_json1_1GetAuthorizationTokenCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetAuthorizationTokenRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetAuthorizationTokenCommand = serializeAws_json1_1GetAuthorizationTokenCommand;
const serializeAws_json1_1GetDownloadUrlForLayerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetDownloadUrlForLayerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetDownloadUrlForLayerCommand = serializeAws_json1_1GetDownloadUrlForLayerCommand;
const serializeAws_json1_1GetLifecyclePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetLifecyclePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetLifecyclePolicyCommand = serializeAws_json1_1GetLifecyclePolicyCommand;
const serializeAws_json1_1GetLifecyclePolicyPreviewCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetLifecyclePolicyPreviewRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetLifecyclePolicyPreviewCommand = serializeAws_json1_1GetLifecyclePolicyPreviewCommand;
const serializeAws_json1_1GetRegistryPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetRegistryPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetRegistryPolicyCommand = serializeAws_json1_1GetRegistryPolicyCommand;
const serializeAws_json1_1GetRegistryScanningConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.GetRegistryScanningConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetRegistryScanningConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetRegistryScanningConfigurationCommand = serializeAws_json1_1GetRegistryScanningConfigurationCommand;
const serializeAws_json1_1GetRepositoryPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetRepositoryPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetRepositoryPolicyCommand = serializeAws_json1_1GetRepositoryPolicyCommand;
const serializeAws_json1_1InitiateLayerUploadCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1InitiateLayerUploadRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1InitiateLayerUploadCommand = serializeAws_json1_1InitiateLayerUploadCommand;
const serializeAws_json1_1ListImagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.ListImages",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListImagesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListImagesCommand = serializeAws_json1_1ListImagesCommand;
const serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTagsForResourceCommand = serializeAws_json1_1ListTagsForResourceCommand;
const serializeAws_json1_1PutImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.PutImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1PutImageCommand = serializeAws_json1_1PutImageCommand;
const serializeAws_json1_1PutImageScanningConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutImageScanningConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1PutImageScanningConfigurationCommand = serializeAws_json1_1PutImageScanningConfigurationCommand;
const serializeAws_json1_1PutImageTagMutabilityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutImageTagMutabilityRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1PutImageTagMutabilityCommand = serializeAws_json1_1PutImageTagMutabilityCommand;
const serializeAws_json1_1PutLifecyclePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutLifecyclePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1PutLifecyclePolicyCommand = serializeAws_json1_1PutLifecyclePolicyCommand;
const serializeAws_json1_1PutRegistryPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutRegistryPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1PutRegistryPolicyCommand = serializeAws_json1_1PutRegistryPolicyCommand;
const serializeAws_json1_1PutRegistryScanningConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.PutRegistryScanningConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutRegistryScanningConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1PutRegistryScanningConfigurationCommand = serializeAws_json1_1PutRegistryScanningConfigurationCommand;
const serializeAws_json1_1PutReplicationConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutReplicationConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1PutReplicationConfigurationCommand = serializeAws_json1_1PutReplicationConfigurationCommand;
const serializeAws_json1_1SetRepositoryPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SetRepositoryPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1SetRepositoryPolicyCommand = serializeAws_json1_1SetRepositoryPolicyCommand;
const serializeAws_json1_1StartImageScanCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.StartImageScan",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartImageScanRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartImageScanCommand = serializeAws_json1_1StartImageScanCommand;
const serializeAws_json1_1StartLifecyclePolicyPreviewCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartLifecyclePolicyPreviewRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartLifecyclePolicyPreviewCommand = serializeAws_json1_1StartLifecyclePolicyPreviewCommand;
const serializeAws_json1_1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.TagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1TagResourceCommand = serializeAws_json1_1TagResourceCommand;
const serializeAws_json1_1UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.UntagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UntagResourceCommand = serializeAws_json1_1UntagResourceCommand;
const serializeAws_json1_1UploadLayerPartCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerRegistry_V20150921.UploadLayerPart",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UploadLayerPartRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UploadLayerPartCommand = serializeAws_json1_1UploadLayerPartCommand;
const deserializeAws_json1_1BatchCheckLayerAvailabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchCheckLayerAvailabilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchCheckLayerAvailabilityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchCheckLayerAvailabilityCommand = deserializeAws_json1_1BatchCheckLayerAvailabilityCommand;
const deserializeAws_json1_1BatchCheckLayerAvailabilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1BatchDeleteImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchDeleteImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchDeleteImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchDeleteImageCommand = deserializeAws_json1_1BatchDeleteImageCommand;
const deserializeAws_json1_1BatchDeleteImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1BatchGetImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchGetImageCommand = deserializeAws_json1_1BatchGetImageCommand;
const deserializeAws_json1_1BatchGetImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1BatchGetRepositoryScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetRepositoryScanningConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetRepositoryScanningConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1BatchGetRepositoryScanningConfigurationCommand = deserializeAws_json1_1BatchGetRepositoryScanningConfigurationCommand;
const deserializeAws_json1_1BatchGetRepositoryScanningConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1CompleteLayerUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CompleteLayerUploadCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CompleteLayerUploadResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CompleteLayerUploadCommand = deserializeAws_json1_1CompleteLayerUploadCommand;
const deserializeAws_json1_1CompleteLayerUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EmptyUploadException":
        case "com.amazonaws.ecr#EmptyUploadException":
            throw await deserializeAws_json1_1EmptyUploadExceptionResponse(parsedOutput, context);
        case "InvalidLayerException":
        case "com.amazonaws.ecr#InvalidLayerException":
            throw await deserializeAws_json1_1InvalidLayerExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await deserializeAws_json1_1KmsExceptionResponse(parsedOutput, context);
        case "LayerAlreadyExistsException":
        case "com.amazonaws.ecr#LayerAlreadyExistsException":
            throw await deserializeAws_json1_1LayerAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LayerPartTooSmallException":
        case "com.amazonaws.ecr#LayerPartTooSmallException":
            throw await deserializeAws_json1_1LayerPartTooSmallExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "UploadNotFoundException":
        case "com.amazonaws.ecr#UploadNotFoundException":
            throw await deserializeAws_json1_1UploadNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1CreatePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreatePullThroughCacheRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreatePullThroughCacheRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreatePullThroughCacheRuleCommand = deserializeAws_json1_1CreatePullThroughCacheRuleCommand;
const deserializeAws_json1_1CreatePullThroughCacheRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "PullThroughCacheRuleAlreadyExistsException":
        case "com.amazonaws.ecr#PullThroughCacheRuleAlreadyExistsException":
            throw await deserializeAws_json1_1PullThroughCacheRuleAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "UnsupportedUpstreamRegistryException":
        case "com.amazonaws.ecr#UnsupportedUpstreamRegistryException":
            throw await deserializeAws_json1_1UnsupportedUpstreamRegistryExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1CreateRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateRepositoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateRepositoryCommand = deserializeAws_json1_1CreateRepositoryCommand;
const deserializeAws_json1_1CreateRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidTagParameterException":
        case "com.amazonaws.ecr#InvalidTagParameterException":
            throw await deserializeAws_json1_1InvalidTagParameterExceptionResponse(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await deserializeAws_json1_1KmsExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "RepositoryAlreadyExistsException":
        case "com.amazonaws.ecr#RepositoryAlreadyExistsException":
            throw await deserializeAws_json1_1RepositoryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.ecr#TooManyTagsException":
            throw await deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DeleteLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteLifecyclePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteLifecyclePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteLifecyclePolicyCommand = deserializeAws_json1_1DeleteLifecyclePolicyCommand;
const deserializeAws_json1_1DeleteLifecyclePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LifecyclePolicyNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyNotFoundException":
            throw await deserializeAws_json1_1LifecyclePolicyNotFoundExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DeletePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeletePullThroughCacheRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeletePullThroughCacheRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeletePullThroughCacheRuleCommand = deserializeAws_json1_1DeletePullThroughCacheRuleCommand;
const deserializeAws_json1_1DeletePullThroughCacheRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "PullThroughCacheRuleNotFoundException":
        case "com.amazonaws.ecr#PullThroughCacheRuleNotFoundException":
            throw await deserializeAws_json1_1PullThroughCacheRuleNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DeleteRegistryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteRegistryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteRegistryPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteRegistryPolicyCommand = deserializeAws_json1_1DeleteRegistryPolicyCommand;
const deserializeAws_json1_1DeleteRegistryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RegistryPolicyNotFoundException":
        case "com.amazonaws.ecr#RegistryPolicyNotFoundException":
            throw await deserializeAws_json1_1RegistryPolicyNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DeleteRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteRepositoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteRepositoryCommand = deserializeAws_json1_1DeleteRepositoryCommand;
const deserializeAws_json1_1DeleteRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await deserializeAws_json1_1KmsExceptionResponse(parsedOutput, context);
        case "RepositoryNotEmptyException":
        case "com.amazonaws.ecr#RepositoryNotEmptyException":
            throw await deserializeAws_json1_1RepositoryNotEmptyExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DeleteRepositoryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteRepositoryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteRepositoryPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteRepositoryPolicyCommand = deserializeAws_json1_1DeleteRepositoryPolicyCommand;
const deserializeAws_json1_1DeleteRepositoryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "RepositoryPolicyNotFoundException":
        case "com.amazonaws.ecr#RepositoryPolicyNotFoundException":
            throw await deserializeAws_json1_1RepositoryPolicyNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribeImageReplicationStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeImageReplicationStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeImageReplicationStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeImageReplicationStatusCommand = deserializeAws_json1_1DescribeImageReplicationStatusCommand;
const deserializeAws_json1_1DescribeImageReplicationStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageNotFoundException":
        case "com.amazonaws.ecr#ImageNotFoundException":
            throw await deserializeAws_json1_1ImageNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribeImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeImagesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeImagesCommand = deserializeAws_json1_1DescribeImagesCommand;
const deserializeAws_json1_1DescribeImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageNotFoundException":
        case "com.amazonaws.ecr#ImageNotFoundException":
            throw await deserializeAws_json1_1ImageNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribeImageScanFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeImageScanFindingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeImageScanFindingsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeImageScanFindingsCommand = deserializeAws_json1_1DescribeImageScanFindingsCommand;
const deserializeAws_json1_1DescribeImageScanFindingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageNotFoundException":
        case "com.amazonaws.ecr#ImageNotFoundException":
            throw await deserializeAws_json1_1ImageNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ScanNotFoundException":
        case "com.amazonaws.ecr#ScanNotFoundException":
            throw await deserializeAws_json1_1ScanNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribePullThroughCacheRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePullThroughCacheRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribePullThroughCacheRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribePullThroughCacheRulesCommand = deserializeAws_json1_1DescribePullThroughCacheRulesCommand;
const deserializeAws_json1_1DescribePullThroughCacheRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "PullThroughCacheRuleNotFoundException":
        case "com.amazonaws.ecr#PullThroughCacheRuleNotFoundException":
            throw await deserializeAws_json1_1PullThroughCacheRuleNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribeRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeRegistryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeRegistryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeRegistryCommand = deserializeAws_json1_1DescribeRegistryCommand;
const deserializeAws_json1_1DescribeRegistryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribeRepositoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeRepositoriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeRepositoriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeRepositoriesCommand = deserializeAws_json1_1DescribeRepositoriesCommand;
const deserializeAws_json1_1DescribeRepositoriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1GetAuthorizationTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAuthorizationTokenCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetAuthorizationTokenResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetAuthorizationTokenCommand = deserializeAws_json1_1GetAuthorizationTokenCommand;
const deserializeAws_json1_1GetAuthorizationTokenCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1GetDownloadUrlForLayerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDownloadUrlForLayerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetDownloadUrlForLayerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetDownloadUrlForLayerCommand = deserializeAws_json1_1GetDownloadUrlForLayerCommand;
const deserializeAws_json1_1GetDownloadUrlForLayerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LayerInaccessibleException":
        case "com.amazonaws.ecr#LayerInaccessibleException":
            throw await deserializeAws_json1_1LayerInaccessibleExceptionResponse(parsedOutput, context);
        case "LayersNotFoundException":
        case "com.amazonaws.ecr#LayersNotFoundException":
            throw await deserializeAws_json1_1LayersNotFoundExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1GetLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetLifecyclePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetLifecyclePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetLifecyclePolicyCommand = deserializeAws_json1_1GetLifecyclePolicyCommand;
const deserializeAws_json1_1GetLifecyclePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LifecyclePolicyNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyNotFoundException":
            throw await deserializeAws_json1_1LifecyclePolicyNotFoundExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1GetLifecyclePolicyPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetLifecyclePolicyPreviewCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetLifecyclePolicyPreviewResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetLifecyclePolicyPreviewCommand = deserializeAws_json1_1GetLifecyclePolicyPreviewCommand;
const deserializeAws_json1_1GetLifecyclePolicyPreviewCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LifecyclePolicyPreviewNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyPreviewNotFoundException":
            throw await deserializeAws_json1_1LifecyclePolicyPreviewNotFoundExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1GetRegistryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetRegistryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetRegistryPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetRegistryPolicyCommand = deserializeAws_json1_1GetRegistryPolicyCommand;
const deserializeAws_json1_1GetRegistryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RegistryPolicyNotFoundException":
        case "com.amazonaws.ecr#RegistryPolicyNotFoundException":
            throw await deserializeAws_json1_1RegistryPolicyNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1GetRegistryScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetRegistryScanningConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetRegistryScanningConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetRegistryScanningConfigurationCommand = deserializeAws_json1_1GetRegistryScanningConfigurationCommand;
const deserializeAws_json1_1GetRegistryScanningConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1GetRepositoryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetRepositoryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetRepositoryPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetRepositoryPolicyCommand = deserializeAws_json1_1GetRepositoryPolicyCommand;
const deserializeAws_json1_1GetRepositoryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "RepositoryPolicyNotFoundException":
        case "com.amazonaws.ecr#RepositoryPolicyNotFoundException":
            throw await deserializeAws_json1_1RepositoryPolicyNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1InitiateLayerUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1InitiateLayerUploadCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1InitiateLayerUploadResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1InitiateLayerUploadCommand = deserializeAws_json1_1InitiateLayerUploadCommand;
const deserializeAws_json1_1InitiateLayerUploadCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await deserializeAws_json1_1KmsExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1ListImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListImagesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListImagesCommand = deserializeAws_json1_1ListImagesCommand;
const deserializeAws_json1_1ListImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTagsForResourceCommand = deserializeAws_json1_1ListTagsForResourceCommand;
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1PutImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1PutImageCommand = deserializeAws_json1_1PutImageCommand;
const deserializeAws_json1_1PutImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageAlreadyExistsException":
        case "com.amazonaws.ecr#ImageAlreadyExistsException":
            throw await deserializeAws_json1_1ImageAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ImageDigestDoesNotMatchException":
        case "com.amazonaws.ecr#ImageDigestDoesNotMatchException":
            throw await deserializeAws_json1_1ImageDigestDoesNotMatchExceptionResponse(parsedOutput, context);
        case "ImageTagAlreadyExistsException":
        case "com.amazonaws.ecr#ImageTagAlreadyExistsException":
            throw await deserializeAws_json1_1ImageTagAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await deserializeAws_json1_1KmsExceptionResponse(parsedOutput, context);
        case "LayersNotFoundException":
        case "com.amazonaws.ecr#LayersNotFoundException":
            throw await deserializeAws_json1_1LayersNotFoundExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ReferencedImagesNotFoundException":
        case "com.amazonaws.ecr#ReferencedImagesNotFoundException":
            throw await deserializeAws_json1_1ReferencedImagesNotFoundExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1PutImageScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutImageScanningConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutImageScanningConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1PutImageScanningConfigurationCommand = deserializeAws_json1_1PutImageScanningConfigurationCommand;
const deserializeAws_json1_1PutImageScanningConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1PutImageTagMutabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutImageTagMutabilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutImageTagMutabilityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1PutImageTagMutabilityCommand = deserializeAws_json1_1PutImageTagMutabilityCommand;
const deserializeAws_json1_1PutImageTagMutabilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1PutLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutLifecyclePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutLifecyclePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1PutLifecyclePolicyCommand = deserializeAws_json1_1PutLifecyclePolicyCommand;
const deserializeAws_json1_1PutLifecyclePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1PutRegistryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutRegistryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutRegistryPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1PutRegistryPolicyCommand = deserializeAws_json1_1PutRegistryPolicyCommand;
const deserializeAws_json1_1PutRegistryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1PutRegistryScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutRegistryScanningConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutRegistryScanningConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1PutRegistryScanningConfigurationCommand = deserializeAws_json1_1PutRegistryScanningConfigurationCommand;
const deserializeAws_json1_1PutRegistryScanningConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1PutReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutReplicationConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutReplicationConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1PutReplicationConfigurationCommand = deserializeAws_json1_1PutReplicationConfigurationCommand;
const deserializeAws_json1_1PutReplicationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1SetRepositoryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SetRepositoryPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1SetRepositoryPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1SetRepositoryPolicyCommand = deserializeAws_json1_1SetRepositoryPolicyCommand;
const deserializeAws_json1_1SetRepositoryPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StartImageScanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartImageScanCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartImageScanResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartImageScanCommand = deserializeAws_json1_1StartImageScanCommand;
const deserializeAws_json1_1StartImageScanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ImageNotFoundException":
        case "com.amazonaws.ecr#ImageNotFoundException":
            throw await deserializeAws_json1_1ImageNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "UnsupportedImageTypeException":
        case "com.amazonaws.ecr#UnsupportedImageTypeException":
            throw await deserializeAws_json1_1UnsupportedImageTypeExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StartLifecyclePolicyPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartLifecyclePolicyPreviewCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartLifecyclePolicyPreviewResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartLifecyclePolicyPreviewCommand = deserializeAws_json1_1StartLifecyclePolicyPreviewCommand;
const deserializeAws_json1_1StartLifecyclePolicyPreviewCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LifecyclePolicyNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyNotFoundException":
            throw await deserializeAws_json1_1LifecyclePolicyNotFoundExceptionResponse(parsedOutput, context);
        case "LifecyclePolicyPreviewInProgressException":
        case "com.amazonaws.ecr#LifecyclePolicyPreviewInProgressException":
            throw await deserializeAws_json1_1LifecyclePolicyPreviewInProgressExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1TagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1TagResourceCommand = deserializeAws_json1_1TagResourceCommand;
const deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidTagParameterException":
        case "com.amazonaws.ecr#InvalidTagParameterException":
            throw await deserializeAws_json1_1InvalidTagParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.ecr#TooManyTagsException":
            throw await deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UntagResourceCommand = deserializeAws_json1_1UntagResourceCommand;
const deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidTagParameterException":
        case "com.amazonaws.ecr#InvalidTagParameterException":
            throw await deserializeAws_json1_1InvalidTagParameterExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.ecr#TooManyTagsException":
            throw await deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1UploadLayerPartCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UploadLayerPartCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UploadLayerPartResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UploadLayerPartCommand = deserializeAws_json1_1UploadLayerPartCommand;
const deserializeAws_json1_1UploadLayerPartCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLayerPartException":
        case "com.amazonaws.ecr#InvalidLayerPartException":
            throw await deserializeAws_json1_1InvalidLayerPartExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await deserializeAws_json1_1KmsExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await deserializeAws_json1_1RepositoryNotFoundExceptionResponse(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await deserializeAws_json1_1ServerExceptionResponse(parsedOutput, context);
        case "UploadNotFoundException":
        case "com.amazonaws.ecr#UploadNotFoundException":
            throw await deserializeAws_json1_1UploadNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            response = new ECRServiceException_1.ECRServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1EmptyUploadExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1EmptyUploadException(body, context);
    const exception = new models_0_1.EmptyUploadException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ImageAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ImageAlreadyExistsException(body, context);
    const exception = new models_0_1.ImageAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ImageDigestDoesNotMatchExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ImageDigestDoesNotMatchException(body, context);
    const exception = new models_0_1.ImageDigestDoesNotMatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ImageNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ImageNotFoundException(body, context);
    const exception = new models_0_1.ImageNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ImageTagAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ImageTagAlreadyExistsException(body, context);
    const exception = new models_0_1.ImageTagAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidLayerExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidLayerException(body, context);
    const exception = new models_0_1.InvalidLayerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidLayerPartExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidLayerPartException(body, context);
    const exception = new models_0_1.InvalidLayerPartException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidParameterExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
    const exception = new models_0_1.InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidTagParameterExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidTagParameterException(body, context);
    const exception = new models_0_1.InvalidTagParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1KmsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1KmsException(body, context);
    const exception = new models_0_1.KmsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LayerAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LayerAlreadyExistsException(body, context);
    const exception = new models_0_1.LayerAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LayerInaccessibleExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LayerInaccessibleException(body, context);
    const exception = new models_0_1.LayerInaccessibleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LayerPartTooSmallExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LayerPartTooSmallException(body, context);
    const exception = new models_0_1.LayerPartTooSmallException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LayersNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LayersNotFoundException(body, context);
    const exception = new models_0_1.LayersNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LifecyclePolicyNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LifecyclePolicyNotFoundException(body, context);
    const exception = new models_0_1.LifecyclePolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LifecyclePolicyPreviewInProgressExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LifecyclePolicyPreviewInProgressException(body, context);
    const exception = new models_0_1.LifecyclePolicyPreviewInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LifecyclePolicyPreviewNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LifecyclePolicyPreviewNotFoundException(body, context);
    const exception = new models_0_1.LifecyclePolicyPreviewNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1PullThroughCacheRuleAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1PullThroughCacheRuleAlreadyExistsException(body, context);
    const exception = new models_0_1.PullThroughCacheRuleAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1PullThroughCacheRuleNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1PullThroughCacheRuleNotFoundException(body, context);
    const exception = new models_0_1.PullThroughCacheRuleNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ReferencedImagesNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ReferencedImagesNotFoundException(body, context);
    const exception = new models_0_1.ReferencedImagesNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1RegistryPolicyNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1RegistryPolicyNotFoundException(body, context);
    const exception = new models_0_1.RegistryPolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1RepositoryAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1RepositoryAlreadyExistsException(body, context);
    const exception = new models_0_1.RepositoryAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1RepositoryNotEmptyExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1RepositoryNotEmptyException(body, context);
    const exception = new models_0_1.RepositoryNotEmptyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1RepositoryNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1RepositoryNotFoundException(body, context);
    const exception = new models_0_1.RepositoryNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1RepositoryPolicyNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1RepositoryPolicyNotFoundException(body, context);
    const exception = new models_0_1.RepositoryPolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ScanNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ScanNotFoundException(body, context);
    const exception = new models_0_1.ScanNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ServerExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ServerException(body, context);
    const exception = new models_0_1.ServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1TooManyTagsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TooManyTagsException(body, context);
    const exception = new models_0_1.TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1UnsupportedImageTypeExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1UnsupportedImageTypeException(body, context);
    const exception = new models_0_1.UnsupportedImageTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1UnsupportedUpstreamRegistryExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1UnsupportedUpstreamRegistryException(body, context);
    const exception = new models_0_1.UnsupportedUpstreamRegistryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1UploadNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1UploadNotFoundException(body, context);
    const exception = new models_0_1.UploadNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ValidationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ValidationException(body, context);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const serializeAws_json1_1BatchCheckLayerAvailabilityRequest = (input, context) => {
    return {
        ...(input.layerDigests !== undefined &&
            input.layerDigests !== null && {
            layerDigests: serializeAws_json1_1BatchedOperationLayerDigestList(input.layerDigests, context),
        }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1BatchDeleteImageRequest = (input, context) => {
    return {
        ...(input.imageIds !== undefined &&
            input.imageIds !== null && { imageIds: serializeAws_json1_1ImageIdentifierList(input.imageIds, context) }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1BatchedOperationLayerDigestList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1BatchGetImageRequest = (input, context) => {
    return {
        ...(input.acceptedMediaTypes !== undefined &&
            input.acceptedMediaTypes !== null && {
            acceptedMediaTypes: serializeAws_json1_1MediaTypeList(input.acceptedMediaTypes, context),
        }),
        ...(input.imageIds !== undefined &&
            input.imageIds !== null && { imageIds: serializeAws_json1_1ImageIdentifierList(input.imageIds, context) }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1BatchGetRepositoryScanningConfigurationRequest = (input, context) => {
    return {
        ...(input.repositoryNames !== undefined &&
            input.repositoryNames !== null && {
            repositoryNames: serializeAws_json1_1ScanningConfigurationRepositoryNameList(input.repositoryNames, context),
        }),
    };
};
const serializeAws_json1_1CompleteLayerUploadRequest = (input, context) => {
    return {
        ...(input.layerDigests !== undefined &&
            input.layerDigests !== null && {
            layerDigests: serializeAws_json1_1LayerDigestList(input.layerDigests, context),
        }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
        ...(input.uploadId !== undefined && input.uploadId !== null && { uploadId: input.uploadId }),
    };
};
const serializeAws_json1_1CreatePullThroughCacheRuleRequest = (input, context) => {
    return {
        ...(input.ecrRepositoryPrefix !== undefined &&
            input.ecrRepositoryPrefix !== null && { ecrRepositoryPrefix: input.ecrRepositoryPrefix }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.upstreamRegistryUrl !== undefined &&
            input.upstreamRegistryUrl !== null && { upstreamRegistryUrl: input.upstreamRegistryUrl }),
    };
};
const serializeAws_json1_1CreateRepositoryRequest = (input, context) => {
    return {
        ...(input.encryptionConfiguration !== undefined &&
            input.encryptionConfiguration !== null && {
            encryptionConfiguration: serializeAws_json1_1EncryptionConfiguration(input.encryptionConfiguration, context),
        }),
        ...(input.imageScanningConfiguration !== undefined &&
            input.imageScanningConfiguration !== null && {
            imageScanningConfiguration: serializeAws_json1_1ImageScanningConfiguration(input.imageScanningConfiguration, context),
        }),
        ...(input.imageTagMutability !== undefined &&
            input.imageTagMutability !== null && { imageTagMutability: input.imageTagMutability }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
        ...(input.tags !== undefined && input.tags !== null && { tags: serializeAws_json1_1TagList(input.tags, context) }),
    };
};
const serializeAws_json1_1DeleteLifecyclePolicyRequest = (input, context) => {
    return {
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1DeletePullThroughCacheRuleRequest = (input, context) => {
    return {
        ...(input.ecrRepositoryPrefix !== undefined &&
            input.ecrRepositoryPrefix !== null && { ecrRepositoryPrefix: input.ecrRepositoryPrefix }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
    };
};
const serializeAws_json1_1DeleteRegistryPolicyRequest = (input, context) => {
    return {};
};
const serializeAws_json1_1DeleteRepositoryPolicyRequest = (input, context) => {
    return {
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1DeleteRepositoryRequest = (input, context) => {
    return {
        ...(input.force !== undefined && input.force !== null && { force: input.force }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1DescribeImageReplicationStatusRequest = (input, context) => {
    return {
        ...(input.imageId !== undefined &&
            input.imageId !== null && { imageId: serializeAws_json1_1ImageIdentifier(input.imageId, context) }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1DescribeImageScanFindingsRequest = (input, context) => {
    return {
        ...(input.imageId !== undefined &&
            input.imageId !== null && { imageId: serializeAws_json1_1ImageIdentifier(input.imageId, context) }),
        ...(input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults }),
        ...(input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1DescribeImagesFilter = (input, context) => {
    return {
        ...(input.tagStatus !== undefined && input.tagStatus !== null && { tagStatus: input.tagStatus }),
    };
};
const serializeAws_json1_1DescribeImagesRequest = (input, context) => {
    return {
        ...(input.filter !== undefined &&
            input.filter !== null && { filter: serializeAws_json1_1DescribeImagesFilter(input.filter, context) }),
        ...(input.imageIds !== undefined &&
            input.imageIds !== null && { imageIds: serializeAws_json1_1ImageIdentifierList(input.imageIds, context) }),
        ...(input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults }),
        ...(input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1DescribePullThroughCacheRulesRequest = (input, context) => {
    return {
        ...(input.ecrRepositoryPrefixes !== undefined &&
            input.ecrRepositoryPrefixes !== null && {
            ecrRepositoryPrefixes: serializeAws_json1_1PullThroughCacheRuleRepositoryPrefixList(input.ecrRepositoryPrefixes, context),
        }),
        ...(input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults }),
        ...(input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
    };
};
const serializeAws_json1_1DescribeRegistryRequest = (input, context) => {
    return {};
};
const serializeAws_json1_1DescribeRepositoriesRequest = (input, context) => {
    return {
        ...(input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults }),
        ...(input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryNames !== undefined &&
            input.repositoryNames !== null && {
            repositoryNames: serializeAws_json1_1RepositoryNameList(input.repositoryNames, context),
        }),
    };
};
const serializeAws_json1_1EncryptionConfiguration = (input, context) => {
    return {
        ...(input.encryptionType !== undefined &&
            input.encryptionType !== null && { encryptionType: input.encryptionType }),
        ...(input.kmsKey !== undefined && input.kmsKey !== null && { kmsKey: input.kmsKey }),
    };
};
const serializeAws_json1_1GetAuthorizationTokenRegistryIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1GetAuthorizationTokenRequest = (input, context) => {
    return {
        ...(input.registryIds !== undefined &&
            input.registryIds !== null && {
            registryIds: serializeAws_json1_1GetAuthorizationTokenRegistryIdList(input.registryIds, context),
        }),
    };
};
const serializeAws_json1_1GetDownloadUrlForLayerRequest = (input, context) => {
    return {
        ...(input.layerDigest !== undefined && input.layerDigest !== null && { layerDigest: input.layerDigest }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1GetLifecyclePolicyPreviewRequest = (input, context) => {
    return {
        ...(input.filter !== undefined &&
            input.filter !== null && { filter: serializeAws_json1_1LifecyclePolicyPreviewFilter(input.filter, context) }),
        ...(input.imageIds !== undefined &&
            input.imageIds !== null && { imageIds: serializeAws_json1_1ImageIdentifierList(input.imageIds, context) }),
        ...(input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults }),
        ...(input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1GetLifecyclePolicyRequest = (input, context) => {
    return {
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1GetRegistryPolicyRequest = (input, context) => {
    return {};
};
const serializeAws_json1_1GetRegistryScanningConfigurationRequest = (input, context) => {
    return {};
};
const serializeAws_json1_1GetRepositoryPolicyRequest = (input, context) => {
    return {
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1ImageIdentifier = (input, context) => {
    return {
        ...(input.imageDigest !== undefined && input.imageDigest !== null && { imageDigest: input.imageDigest }),
        ...(input.imageTag !== undefined && input.imageTag !== null && { imageTag: input.imageTag }),
    };
};
const serializeAws_json1_1ImageIdentifierList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ImageIdentifier(entry, context);
    });
};
const serializeAws_json1_1ImageScanningConfiguration = (input, context) => {
    return {
        ...(input.scanOnPush !== undefined && input.scanOnPush !== null && { scanOnPush: input.scanOnPush }),
    };
};
const serializeAws_json1_1InitiateLayerUploadRequest = (input, context) => {
    return {
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1LayerDigestList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1LifecyclePolicyPreviewFilter = (input, context) => {
    return {
        ...(input.tagStatus !== undefined && input.tagStatus !== null && { tagStatus: input.tagStatus }),
    };
};
const serializeAws_json1_1ListImagesFilter = (input, context) => {
    return {
        ...(input.tagStatus !== undefined && input.tagStatus !== null && { tagStatus: input.tagStatus }),
    };
};
const serializeAws_json1_1ListImagesRequest = (input, context) => {
    return {
        ...(input.filter !== undefined &&
            input.filter !== null && { filter: serializeAws_json1_1ListImagesFilter(input.filter, context) }),
        ...(input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults }),
        ...(input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1ListTagsForResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn !== undefined && input.resourceArn !== null && { resourceArn: input.resourceArn }),
    };
};
const serializeAws_json1_1MediaTypeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1PullThroughCacheRuleRepositoryPrefixList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1PutImageRequest = (input, context) => {
    return {
        ...(input.imageDigest !== undefined && input.imageDigest !== null && { imageDigest: input.imageDigest }),
        ...(input.imageManifest !== undefined && input.imageManifest !== null && { imageManifest: input.imageManifest }),
        ...(input.imageManifestMediaType !== undefined &&
            input.imageManifestMediaType !== null && { imageManifestMediaType: input.imageManifestMediaType }),
        ...(input.imageTag !== undefined && input.imageTag !== null && { imageTag: input.imageTag }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1PutImageScanningConfigurationRequest = (input, context) => {
    return {
        ...(input.imageScanningConfiguration !== undefined &&
            input.imageScanningConfiguration !== null && {
            imageScanningConfiguration: serializeAws_json1_1ImageScanningConfiguration(input.imageScanningConfiguration, context),
        }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1PutImageTagMutabilityRequest = (input, context) => {
    return {
        ...(input.imageTagMutability !== undefined &&
            input.imageTagMutability !== null && { imageTagMutability: input.imageTagMutability }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1PutLifecyclePolicyRequest = (input, context) => {
    return {
        ...(input.lifecyclePolicyText !== undefined &&
            input.lifecyclePolicyText !== null && { lifecyclePolicyText: input.lifecyclePolicyText }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1PutRegistryPolicyRequest = (input, context) => {
    return {
        ...(input.policyText !== undefined && input.policyText !== null && { policyText: input.policyText }),
    };
};
const serializeAws_json1_1PutRegistryScanningConfigurationRequest = (input, context) => {
    return {
        ...(input.rules !== undefined &&
            input.rules !== null && { rules: serializeAws_json1_1RegistryScanningRuleList(input.rules, context) }),
        ...(input.scanType !== undefined && input.scanType !== null && { scanType: input.scanType }),
    };
};
const serializeAws_json1_1PutReplicationConfigurationRequest = (input, context) => {
    return {
        ...(input.replicationConfiguration !== undefined &&
            input.replicationConfiguration !== null && {
            replicationConfiguration: serializeAws_json1_1ReplicationConfiguration(input.replicationConfiguration, context),
        }),
    };
};
const serializeAws_json1_1RegistryScanningRule = (input, context) => {
    return {
        ...(input.repositoryFilters !== undefined &&
            input.repositoryFilters !== null && {
            repositoryFilters: serializeAws_json1_1ScanningRepositoryFilterList(input.repositoryFilters, context),
        }),
        ...(input.scanFrequency !== undefined && input.scanFrequency !== null && { scanFrequency: input.scanFrequency }),
    };
};
const serializeAws_json1_1RegistryScanningRuleList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1RegistryScanningRule(entry, context);
    });
};
const serializeAws_json1_1ReplicationConfiguration = (input, context) => {
    return {
        ...(input.rules !== undefined &&
            input.rules !== null && { rules: serializeAws_json1_1ReplicationRuleList(input.rules, context) }),
    };
};
const serializeAws_json1_1ReplicationDestination = (input, context) => {
    return {
        ...(input.region !== undefined && input.region !== null && { region: input.region }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
    };
};
const serializeAws_json1_1ReplicationDestinationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ReplicationDestination(entry, context);
    });
};
const serializeAws_json1_1ReplicationRule = (input, context) => {
    return {
        ...(input.destinations !== undefined &&
            input.destinations !== null && {
            destinations: serializeAws_json1_1ReplicationDestinationList(input.destinations, context),
        }),
        ...(input.repositoryFilters !== undefined &&
            input.repositoryFilters !== null && {
            repositoryFilters: serializeAws_json1_1RepositoryFilterList(input.repositoryFilters, context),
        }),
    };
};
const serializeAws_json1_1ReplicationRuleList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ReplicationRule(entry, context);
    });
};
const serializeAws_json1_1RepositoryFilter = (input, context) => {
    return {
        ...(input.filter !== undefined && input.filter !== null && { filter: input.filter }),
        ...(input.filterType !== undefined && input.filterType !== null && { filterType: input.filterType }),
    };
};
const serializeAws_json1_1RepositoryFilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1RepositoryFilter(entry, context);
    });
};
const serializeAws_json1_1RepositoryNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ScanningConfigurationRepositoryNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ScanningRepositoryFilter = (input, context) => {
    return {
        ...(input.filter !== undefined && input.filter !== null && { filter: input.filter }),
        ...(input.filterType !== undefined && input.filterType !== null && { filterType: input.filterType }),
    };
};
const serializeAws_json1_1ScanningRepositoryFilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ScanningRepositoryFilter(entry, context);
    });
};
const serializeAws_json1_1SetRepositoryPolicyRequest = (input, context) => {
    return {
        ...(input.force !== undefined && input.force !== null && { force: input.force }),
        ...(input.policyText !== undefined && input.policyText !== null && { policyText: input.policyText }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1StartImageScanRequest = (input, context) => {
    return {
        ...(input.imageId !== undefined &&
            input.imageId !== null && { imageId: serializeAws_json1_1ImageIdentifier(input.imageId, context) }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1StartLifecyclePolicyPreviewRequest = (input, context) => {
    return {
        ...(input.lifecyclePolicyText !== undefined &&
            input.lifecyclePolicyText !== null && { lifecyclePolicyText: input.lifecyclePolicyText }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
    };
};
const serializeAws_json1_1Tag = (input, context) => {
    return {
        ...(input.Key !== undefined && input.Key !== null && { Key: input.Key }),
        ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
    };
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1Tag(entry, context);
    });
};
const serializeAws_json1_1TagResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn !== undefined && input.resourceArn !== null && { resourceArn: input.resourceArn }),
        ...(input.tags !== undefined && input.tags !== null && { tags: serializeAws_json1_1TagList(input.tags, context) }),
    };
};
const serializeAws_json1_1UntagResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn !== undefined && input.resourceArn !== null && { resourceArn: input.resourceArn }),
        ...(input.tagKeys !== undefined &&
            input.tagKeys !== null && { tagKeys: serializeAws_json1_1TagKeyList(input.tagKeys, context) }),
    };
};
const serializeAws_json1_1UploadLayerPartRequest = (input, context) => {
    return {
        ...(input.layerPartBlob !== undefined &&
            input.layerPartBlob !== null && { layerPartBlob: context.base64Encoder(input.layerPartBlob) }),
        ...(input.partFirstByte !== undefined && input.partFirstByte !== null && { partFirstByte: input.partFirstByte }),
        ...(input.partLastByte !== undefined && input.partLastByte !== null && { partLastByte: input.partLastByte }),
        ...(input.registryId !== undefined && input.registryId !== null && { registryId: input.registryId }),
        ...(input.repositoryName !== undefined &&
            input.repositoryName !== null && { repositoryName: input.repositoryName }),
        ...(input.uploadId !== undefined && input.uploadId !== null && { uploadId: input.uploadId }),
    };
};
const deserializeAws_json1_1Attribute = (output, context) => {
    return {
        key: (0, smithy_client_1.expectString)(output.key),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const deserializeAws_json1_1AttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Attribute(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AuthorizationData = (output, context) => {
    return {
        authorizationToken: (0, smithy_client_1.expectString)(output.authorizationToken),
        expiresAt: output.expiresAt !== undefined && output.expiresAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.expiresAt)))
            : undefined,
        proxyEndpoint: (0, smithy_client_1.expectString)(output.proxyEndpoint),
    };
};
const deserializeAws_json1_1AuthorizationDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AuthorizationData(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AwsEcrContainerImageDetails = (output, context) => {
    return {
        architecture: (0, smithy_client_1.expectString)(output.architecture),
        author: (0, smithy_client_1.expectString)(output.author),
        imageHash: (0, smithy_client_1.expectString)(output.imageHash),
        imageTags: output.imageTags !== undefined && output.imageTags !== null
            ? deserializeAws_json1_1ImageTagsList(output.imageTags, context)
            : undefined,
        platform: (0, smithy_client_1.expectString)(output.platform),
        pushedAt: output.pushedAt !== undefined && output.pushedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.pushedAt)))
            : undefined,
        registry: (0, smithy_client_1.expectString)(output.registry),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1BatchCheckLayerAvailabilityResponse = (output, context) => {
    return {
        failures: output.failures !== undefined && output.failures !== null
            ? deserializeAws_json1_1LayerFailureList(output.failures, context)
            : undefined,
        layers: output.layers !== undefined && output.layers !== null
            ? deserializeAws_json1_1LayerList(output.layers, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchDeleteImageResponse = (output, context) => {
    return {
        failures: output.failures !== undefined && output.failures !== null
            ? deserializeAws_json1_1ImageFailureList(output.failures, context)
            : undefined,
        imageIds: output.imageIds !== undefined && output.imageIds !== null
            ? deserializeAws_json1_1ImageIdentifierList(output.imageIds, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetImageResponse = (output, context) => {
    return {
        failures: output.failures !== undefined && output.failures !== null
            ? deserializeAws_json1_1ImageFailureList(output.failures, context)
            : undefined,
        images: output.images !== undefined && output.images !== null
            ? deserializeAws_json1_1ImageList(output.images, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetRepositoryScanningConfigurationResponse = (output, context) => {
    return {
        failures: output.failures !== undefined && output.failures !== null
            ? deserializeAws_json1_1RepositoryScanningConfigurationFailureList(output.failures, context)
            : undefined,
        scanningConfigurations: output.scanningConfigurations !== undefined && output.scanningConfigurations !== null
            ? deserializeAws_json1_1RepositoryScanningConfigurationList(output.scanningConfigurations, context)
            : undefined,
    };
};
const deserializeAws_json1_1CompleteLayerUploadResponse = (output, context) => {
    return {
        layerDigest: (0, smithy_client_1.expectString)(output.layerDigest),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
        uploadId: (0, smithy_client_1.expectString)(output.uploadId),
    };
};
const deserializeAws_json1_1CreatePullThroughCacheRuleResponse = (output, context) => {
    return {
        createdAt: output.createdAt !== undefined && output.createdAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt)))
            : undefined,
        ecrRepositoryPrefix: (0, smithy_client_1.expectString)(output.ecrRepositoryPrefix),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        upstreamRegistryUrl: (0, smithy_client_1.expectString)(output.upstreamRegistryUrl),
    };
};
const deserializeAws_json1_1CreateRepositoryResponse = (output, context) => {
    return {
        repository: output.repository !== undefined && output.repository !== null
            ? deserializeAws_json1_1Repository(output.repository, context)
            : undefined,
    };
};
const deserializeAws_json1_1CvssScore = (output, context) => {
    return {
        baseScore: (0, smithy_client_1.limitedParseDouble)(output.baseScore),
        scoringVector: (0, smithy_client_1.expectString)(output.scoringVector),
        source: (0, smithy_client_1.expectString)(output.source),
        version: (0, smithy_client_1.expectString)(output.version),
    };
};
const deserializeAws_json1_1CvssScoreAdjustment = (output, context) => {
    return {
        metric: (0, smithy_client_1.expectString)(output.metric),
        reason: (0, smithy_client_1.expectString)(output.reason),
    };
};
const deserializeAws_json1_1CvssScoreAdjustmentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CvssScoreAdjustment(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1CvssScoreDetails = (output, context) => {
    return {
        adjustments: output.adjustments !== undefined && output.adjustments !== null
            ? deserializeAws_json1_1CvssScoreAdjustmentList(output.adjustments, context)
            : undefined,
        score: (0, smithy_client_1.limitedParseDouble)(output.score),
        scoreSource: (0, smithy_client_1.expectString)(output.scoreSource),
        scoringVector: (0, smithy_client_1.expectString)(output.scoringVector),
        version: (0, smithy_client_1.expectString)(output.version),
    };
};
const deserializeAws_json1_1CvssScoreList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CvssScore(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DeleteLifecyclePolicyResponse = (output, context) => {
    return {
        lastEvaluatedAt: output.lastEvaluatedAt !== undefined && output.lastEvaluatedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastEvaluatedAt)))
            : undefined,
        lifecyclePolicyText: (0, smithy_client_1.expectString)(output.lifecyclePolicyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1DeletePullThroughCacheRuleResponse = (output, context) => {
    return {
        createdAt: output.createdAt !== undefined && output.createdAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt)))
            : undefined,
        ecrRepositoryPrefix: (0, smithy_client_1.expectString)(output.ecrRepositoryPrefix),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        upstreamRegistryUrl: (0, smithy_client_1.expectString)(output.upstreamRegistryUrl),
    };
};
const deserializeAws_json1_1DeleteRegistryPolicyResponse = (output, context) => {
    return {
        policyText: (0, smithy_client_1.expectString)(output.policyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
    };
};
const deserializeAws_json1_1DeleteRepositoryPolicyResponse = (output, context) => {
    return {
        policyText: (0, smithy_client_1.expectString)(output.policyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1DeleteRepositoryResponse = (output, context) => {
    return {
        repository: output.repository !== undefined && output.repository !== null
            ? deserializeAws_json1_1Repository(output.repository, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeImageReplicationStatusResponse = (output, context) => {
    return {
        imageId: output.imageId !== undefined && output.imageId !== null
            ? deserializeAws_json1_1ImageIdentifier(output.imageId, context)
            : undefined,
        replicationStatuses: output.replicationStatuses !== undefined && output.replicationStatuses !== null
            ? deserializeAws_json1_1ImageReplicationStatusList(output.replicationStatuses, context)
            : undefined,
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1DescribeImageScanFindingsResponse = (output, context) => {
    return {
        imageId: output.imageId !== undefined && output.imageId !== null
            ? deserializeAws_json1_1ImageIdentifier(output.imageId, context)
            : undefined,
        imageScanFindings: output.imageScanFindings !== undefined && output.imageScanFindings !== null
            ? deserializeAws_json1_1ImageScanFindings(output.imageScanFindings, context)
            : undefined,
        imageScanStatus: output.imageScanStatus !== undefined && output.imageScanStatus !== null
            ? deserializeAws_json1_1ImageScanStatus(output.imageScanStatus, context)
            : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1DescribeImagesResponse = (output, context) => {
    return {
        imageDetails: output.imageDetails !== undefined && output.imageDetails !== null
            ? deserializeAws_json1_1ImageDetailList(output.imageDetails, context)
            : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const deserializeAws_json1_1DescribePullThroughCacheRulesResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        pullThroughCacheRules: output.pullThroughCacheRules !== undefined && output.pullThroughCacheRules !== null
            ? deserializeAws_json1_1PullThroughCacheRuleList(output.pullThroughCacheRules, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeRegistryResponse = (output, context) => {
    return {
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        replicationConfiguration: output.replicationConfiguration !== undefined && output.replicationConfiguration !== null
            ? deserializeAws_json1_1ReplicationConfiguration(output.replicationConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeRepositoriesResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        repositories: output.repositories !== undefined && output.repositories !== null
            ? deserializeAws_json1_1RepositoryList(output.repositories, context)
            : undefined,
    };
};
const deserializeAws_json1_1EmptyUploadException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1EncryptionConfiguration = (output, context) => {
    return {
        encryptionType: (0, smithy_client_1.expectString)(output.encryptionType),
        kmsKey: (0, smithy_client_1.expectString)(output.kmsKey),
    };
};
const deserializeAws_json1_1EnhancedImageScanFinding = (output, context) => {
    return {
        awsAccountId: (0, smithy_client_1.expectString)(output.awsAccountId),
        description: (0, smithy_client_1.expectString)(output.description),
        findingArn: (0, smithy_client_1.expectString)(output.findingArn),
        firstObservedAt: output.firstObservedAt !== undefined && output.firstObservedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.firstObservedAt)))
            : undefined,
        lastObservedAt: output.lastObservedAt !== undefined && output.lastObservedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastObservedAt)))
            : undefined,
        packageVulnerabilityDetails: output.packageVulnerabilityDetails !== undefined && output.packageVulnerabilityDetails !== null
            ? deserializeAws_json1_1PackageVulnerabilityDetails(output.packageVulnerabilityDetails, context)
            : undefined,
        remediation: output.remediation !== undefined && output.remediation !== null
            ? deserializeAws_json1_1Remediation(output.remediation, context)
            : undefined,
        resources: output.resources !== undefined && output.resources !== null
            ? deserializeAws_json1_1ResourceList(output.resources, context)
            : undefined,
        score: (0, smithy_client_1.limitedParseDouble)(output.score),
        scoreDetails: output.scoreDetails !== undefined && output.scoreDetails !== null
            ? deserializeAws_json1_1ScoreDetails(output.scoreDetails, context)
            : undefined,
        severity: (0, smithy_client_1.expectString)(output.severity),
        status: (0, smithy_client_1.expectString)(output.status),
        title: (0, smithy_client_1.expectString)(output.title),
        type: (0, smithy_client_1.expectString)(output.type),
        updatedAt: output.updatedAt !== undefined && output.updatedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.updatedAt)))
            : undefined,
    };
};
const deserializeAws_json1_1EnhancedImageScanFindingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EnhancedImageScanFinding(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FindingSeverityCounts = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.expectInt32)(value),
        };
    }, {});
};
const deserializeAws_json1_1GetAuthorizationTokenResponse = (output, context) => {
    return {
        authorizationData: output.authorizationData !== undefined && output.authorizationData !== null
            ? deserializeAws_json1_1AuthorizationDataList(output.authorizationData, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetDownloadUrlForLayerResponse = (output, context) => {
    return {
        downloadUrl: (0, smithy_client_1.expectString)(output.downloadUrl),
        layerDigest: (0, smithy_client_1.expectString)(output.layerDigest),
    };
};
const deserializeAws_json1_1GetLifecyclePolicyPreviewResponse = (output, context) => {
    return {
        lifecyclePolicyText: (0, smithy_client_1.expectString)(output.lifecyclePolicyText),
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        previewResults: output.previewResults !== undefined && output.previewResults !== null
            ? deserializeAws_json1_1LifecyclePolicyPreviewResultList(output.previewResults, context)
            : undefined,
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
        status: (0, smithy_client_1.expectString)(output.status),
        summary: output.summary !== undefined && output.summary !== null
            ? deserializeAws_json1_1LifecyclePolicyPreviewSummary(output.summary, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetLifecyclePolicyResponse = (output, context) => {
    return {
        lastEvaluatedAt: output.lastEvaluatedAt !== undefined && output.lastEvaluatedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastEvaluatedAt)))
            : undefined,
        lifecyclePolicyText: (0, smithy_client_1.expectString)(output.lifecyclePolicyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1GetRegistryPolicyResponse = (output, context) => {
    return {
        policyText: (0, smithy_client_1.expectString)(output.policyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
    };
};
const deserializeAws_json1_1GetRegistryScanningConfigurationResponse = (output, context) => {
    return {
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        scanningConfiguration: output.scanningConfiguration !== undefined && output.scanningConfiguration !== null
            ? deserializeAws_json1_1RegistryScanningConfiguration(output.scanningConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetRepositoryPolicyResponse = (output, context) => {
    return {
        policyText: (0, smithy_client_1.expectString)(output.policyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1Image = (output, context) => {
    return {
        imageId: output.imageId !== undefined && output.imageId !== null
            ? deserializeAws_json1_1ImageIdentifier(output.imageId, context)
            : undefined,
        imageManifest: (0, smithy_client_1.expectString)(output.imageManifest),
        imageManifestMediaType: (0, smithy_client_1.expectString)(output.imageManifestMediaType),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1ImageAlreadyExistsException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ImageDetail = (output, context) => {
    return {
        artifactMediaType: (0, smithy_client_1.expectString)(output.artifactMediaType),
        imageDigest: (0, smithy_client_1.expectString)(output.imageDigest),
        imageManifestMediaType: (0, smithy_client_1.expectString)(output.imageManifestMediaType),
        imagePushedAt: output.imagePushedAt !== undefined && output.imagePushedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.imagePushedAt)))
            : undefined,
        imageScanFindingsSummary: output.imageScanFindingsSummary !== undefined && output.imageScanFindingsSummary !== null
            ? deserializeAws_json1_1ImageScanFindingsSummary(output.imageScanFindingsSummary, context)
            : undefined,
        imageScanStatus: output.imageScanStatus !== undefined && output.imageScanStatus !== null
            ? deserializeAws_json1_1ImageScanStatus(output.imageScanStatus, context)
            : undefined,
        imageSizeInBytes: (0, smithy_client_1.expectLong)(output.imageSizeInBytes),
        imageTags: output.imageTags !== undefined && output.imageTags !== null
            ? deserializeAws_json1_1ImageTagList(output.imageTags, context)
            : undefined,
        lastRecordedPullTime: output.lastRecordedPullTime !== undefined && output.lastRecordedPullTime !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastRecordedPullTime)))
            : undefined,
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1ImageDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ImageDetail(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ImageDigestDoesNotMatchException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ImageFailure = (output, context) => {
    return {
        failureCode: (0, smithy_client_1.expectString)(output.failureCode),
        failureReason: (0, smithy_client_1.expectString)(output.failureReason),
        imageId: output.imageId !== undefined && output.imageId !== null
            ? deserializeAws_json1_1ImageIdentifier(output.imageId, context)
            : undefined,
    };
};
const deserializeAws_json1_1ImageFailureList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ImageFailure(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ImageIdentifier = (output, context) => {
    return {
        imageDigest: (0, smithy_client_1.expectString)(output.imageDigest),
        imageTag: (0, smithy_client_1.expectString)(output.imageTag),
    };
};
const deserializeAws_json1_1ImageIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ImageIdentifier(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ImageList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Image(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ImageNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ImageReplicationStatus = (output, context) => {
    return {
        failureCode: (0, smithy_client_1.expectString)(output.failureCode),
        region: (0, smithy_client_1.expectString)(output.region),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const deserializeAws_json1_1ImageReplicationStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ImageReplicationStatus(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ImageScanFinding = (output, context) => {
    return {
        attributes: output.attributes !== undefined && output.attributes !== null
            ? deserializeAws_json1_1AttributeList(output.attributes, context)
            : undefined,
        description: (0, smithy_client_1.expectString)(output.description),
        name: (0, smithy_client_1.expectString)(output.name),
        severity: (0, smithy_client_1.expectString)(output.severity),
        uri: (0, smithy_client_1.expectString)(output.uri),
    };
};
const deserializeAws_json1_1ImageScanFindingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ImageScanFinding(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ImageScanFindings = (output, context) => {
    return {
        enhancedFindings: output.enhancedFindings !== undefined && output.enhancedFindings !== null
            ? deserializeAws_json1_1EnhancedImageScanFindingList(output.enhancedFindings, context)
            : undefined,
        findingSeverityCounts: output.findingSeverityCounts !== undefined && output.findingSeverityCounts !== null
            ? deserializeAws_json1_1FindingSeverityCounts(output.findingSeverityCounts, context)
            : undefined,
        findings: output.findings !== undefined && output.findings !== null
            ? deserializeAws_json1_1ImageScanFindingList(output.findings, context)
            : undefined,
        imageScanCompletedAt: output.imageScanCompletedAt !== undefined && output.imageScanCompletedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.imageScanCompletedAt)))
            : undefined,
        vulnerabilitySourceUpdatedAt: output.vulnerabilitySourceUpdatedAt !== undefined && output.vulnerabilitySourceUpdatedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.vulnerabilitySourceUpdatedAt)))
            : undefined,
    };
};
const deserializeAws_json1_1ImageScanFindingsSummary = (output, context) => {
    return {
        findingSeverityCounts: output.findingSeverityCounts !== undefined && output.findingSeverityCounts !== null
            ? deserializeAws_json1_1FindingSeverityCounts(output.findingSeverityCounts, context)
            : undefined,
        imageScanCompletedAt: output.imageScanCompletedAt !== undefined && output.imageScanCompletedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.imageScanCompletedAt)))
            : undefined,
        vulnerabilitySourceUpdatedAt: output.vulnerabilitySourceUpdatedAt !== undefined && output.vulnerabilitySourceUpdatedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.vulnerabilitySourceUpdatedAt)))
            : undefined,
    };
};
const deserializeAws_json1_1ImageScanningConfiguration = (output, context) => {
    return {
        scanOnPush: (0, smithy_client_1.expectBoolean)(output.scanOnPush),
    };
};
const deserializeAws_json1_1ImageScanStatus = (output, context) => {
    return {
        description: (0, smithy_client_1.expectString)(output.description),
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const deserializeAws_json1_1ImageTagAlreadyExistsException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ImageTagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ImageTagsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1InitiateLayerUploadResponse = (output, context) => {
    return {
        partSize: (0, smithy_client_1.expectLong)(output.partSize),
        uploadId: (0, smithy_client_1.expectString)(output.uploadId),
    };
};
const deserializeAws_json1_1InvalidLayerException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1InvalidLayerPartException = (output, context) => {
    return {
        lastValidByteReceived: (0, smithy_client_1.expectLong)(output.lastValidByteReceived),
        message: (0, smithy_client_1.expectString)(output.message),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
        uploadId: (0, smithy_client_1.expectString)(output.uploadId),
    };
};
const deserializeAws_json1_1InvalidParameterException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1InvalidTagParameterException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1KmsException = (output, context) => {
    return {
        kmsError: (0, smithy_client_1.expectString)(output.kmsError),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1Layer = (output, context) => {
    return {
        layerAvailability: (0, smithy_client_1.expectString)(output.layerAvailability),
        layerDigest: (0, smithy_client_1.expectString)(output.layerDigest),
        layerSize: (0, smithy_client_1.expectLong)(output.layerSize),
        mediaType: (0, smithy_client_1.expectString)(output.mediaType),
    };
};
const deserializeAws_json1_1LayerAlreadyExistsException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1LayerFailure = (output, context) => {
    return {
        failureCode: (0, smithy_client_1.expectString)(output.failureCode),
        failureReason: (0, smithy_client_1.expectString)(output.failureReason),
        layerDigest: (0, smithy_client_1.expectString)(output.layerDigest),
    };
};
const deserializeAws_json1_1LayerFailureList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1LayerFailure(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1LayerInaccessibleException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1LayerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Layer(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1LayerPartTooSmallException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1LayersNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1LifecyclePolicyNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1LifecyclePolicyPreviewInProgressException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1LifecyclePolicyPreviewNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1LifecyclePolicyPreviewResult = (output, context) => {
    return {
        action: output.action !== undefined && output.action !== null
            ? deserializeAws_json1_1LifecyclePolicyRuleAction(output.action, context)
            : undefined,
        appliedRulePriority: (0, smithy_client_1.expectInt32)(output.appliedRulePriority),
        imageDigest: (0, smithy_client_1.expectString)(output.imageDigest),
        imagePushedAt: output.imagePushedAt !== undefined && output.imagePushedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.imagePushedAt)))
            : undefined,
        imageTags: output.imageTags !== undefined && output.imageTags !== null
            ? deserializeAws_json1_1ImageTagList(output.imageTags, context)
            : undefined,
    };
};
const deserializeAws_json1_1LifecyclePolicyPreviewResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1LifecyclePolicyPreviewResult(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1LifecyclePolicyPreviewSummary = (output, context) => {
    return {
        expiringImageTotalCount: (0, smithy_client_1.expectInt32)(output.expiringImageTotalCount),
    };
};
const deserializeAws_json1_1LifecyclePolicyRuleAction = (output, context) => {
    return {
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const deserializeAws_json1_1LimitExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ListImagesResponse = (output, context) => {
    return {
        imageIds: output.imageIds !== undefined && output.imageIds !== null
            ? deserializeAws_json1_1ImageIdentifierList(output.imageIds, context)
            : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const deserializeAws_json1_1ListTagsForResourceResponse = (output, context) => {
    return {
        tags: output.tags !== undefined && output.tags !== null
            ? deserializeAws_json1_1TagList(output.tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1PackageVulnerabilityDetails = (output, context) => {
    return {
        cvss: output.cvss !== undefined && output.cvss !== null
            ? deserializeAws_json1_1CvssScoreList(output.cvss, context)
            : undefined,
        referenceUrls: output.referenceUrls !== undefined && output.referenceUrls !== null
            ? deserializeAws_json1_1ReferenceUrlsList(output.referenceUrls, context)
            : undefined,
        relatedVulnerabilities: output.relatedVulnerabilities !== undefined && output.relatedVulnerabilities !== null
            ? deserializeAws_json1_1RelatedVulnerabilitiesList(output.relatedVulnerabilities, context)
            : undefined,
        source: (0, smithy_client_1.expectString)(output.source),
        sourceUrl: (0, smithy_client_1.expectString)(output.sourceUrl),
        vendorCreatedAt: output.vendorCreatedAt !== undefined && output.vendorCreatedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.vendorCreatedAt)))
            : undefined,
        vendorSeverity: (0, smithy_client_1.expectString)(output.vendorSeverity),
        vendorUpdatedAt: output.vendorUpdatedAt !== undefined && output.vendorUpdatedAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.vendorUpdatedAt)))
            : undefined,
        vulnerabilityId: (0, smithy_client_1.expectString)(output.vulnerabilityId),
        vulnerablePackages: output.vulnerablePackages !== undefined && output.vulnerablePackages !== null
            ? deserializeAws_json1_1VulnerablePackagesList(output.vulnerablePackages, context)
            : undefined,
    };
};
const deserializeAws_json1_1PullThroughCacheRule = (output, context) => {
    return {
        createdAt: output.createdAt !== undefined && output.createdAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt)))
            : undefined,
        ecrRepositoryPrefix: (0, smithy_client_1.expectString)(output.ecrRepositoryPrefix),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        upstreamRegistryUrl: (0, smithy_client_1.expectString)(output.upstreamRegistryUrl),
    };
};
const deserializeAws_json1_1PullThroughCacheRuleAlreadyExistsException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1PullThroughCacheRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PullThroughCacheRule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PullThroughCacheRuleNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1PutImageResponse = (output, context) => {
    return {
        image: output.image !== undefined && output.image !== null
            ? deserializeAws_json1_1Image(output.image, context)
            : undefined,
    };
};
const deserializeAws_json1_1PutImageScanningConfigurationResponse = (output, context) => {
    return {
        imageScanningConfiguration: output.imageScanningConfiguration !== undefined && output.imageScanningConfiguration !== null
            ? deserializeAws_json1_1ImageScanningConfiguration(output.imageScanningConfiguration, context)
            : undefined,
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1PutImageTagMutabilityResponse = (output, context) => {
    return {
        imageTagMutability: (0, smithy_client_1.expectString)(output.imageTagMutability),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1PutLifecyclePolicyResponse = (output, context) => {
    return {
        lifecyclePolicyText: (0, smithy_client_1.expectString)(output.lifecyclePolicyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1PutRegistryPolicyResponse = (output, context) => {
    return {
        policyText: (0, smithy_client_1.expectString)(output.policyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
    };
};
const deserializeAws_json1_1PutRegistryScanningConfigurationResponse = (output, context) => {
    return {
        registryScanningConfiguration: output.registryScanningConfiguration !== undefined && output.registryScanningConfiguration !== null
            ? deserializeAws_json1_1RegistryScanningConfiguration(output.registryScanningConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1PutReplicationConfigurationResponse = (output, context) => {
    return {
        replicationConfiguration: output.replicationConfiguration !== undefined && output.replicationConfiguration !== null
            ? deserializeAws_json1_1ReplicationConfiguration(output.replicationConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1Recommendation = (output, context) => {
    return {
        text: (0, smithy_client_1.expectString)(output.text),
        url: (0, smithy_client_1.expectString)(output.url),
    };
};
const deserializeAws_json1_1ReferencedImagesNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ReferenceUrlsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1RegistryPolicyNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1RegistryScanningConfiguration = (output, context) => {
    return {
        rules: output.rules !== undefined && output.rules !== null
            ? deserializeAws_json1_1RegistryScanningRuleList(output.rules, context)
            : undefined,
        scanType: (0, smithy_client_1.expectString)(output.scanType),
    };
};
const deserializeAws_json1_1RegistryScanningRule = (output, context) => {
    return {
        repositoryFilters: output.repositoryFilters !== undefined && output.repositoryFilters !== null
            ? deserializeAws_json1_1ScanningRepositoryFilterList(output.repositoryFilters, context)
            : undefined,
        scanFrequency: (0, smithy_client_1.expectString)(output.scanFrequency),
    };
};
const deserializeAws_json1_1RegistryScanningRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RegistryScanningRule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RelatedVulnerabilitiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Remediation = (output, context) => {
    return {
        recommendation: output.recommendation !== undefined && output.recommendation !== null
            ? deserializeAws_json1_1Recommendation(output.recommendation, context)
            : undefined,
    };
};
const deserializeAws_json1_1ReplicationConfiguration = (output, context) => {
    return {
        rules: output.rules !== undefined && output.rules !== null
            ? deserializeAws_json1_1ReplicationRuleList(output.rules, context)
            : undefined,
    };
};
const deserializeAws_json1_1ReplicationDestination = (output, context) => {
    return {
        region: (0, smithy_client_1.expectString)(output.region),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
    };
};
const deserializeAws_json1_1ReplicationDestinationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ReplicationDestination(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ReplicationRule = (output, context) => {
    return {
        destinations: output.destinations !== undefined && output.destinations !== null
            ? deserializeAws_json1_1ReplicationDestinationList(output.destinations, context)
            : undefined,
        repositoryFilters: output.repositoryFilters !== undefined && output.repositoryFilters !== null
            ? deserializeAws_json1_1RepositoryFilterList(output.repositoryFilters, context)
            : undefined,
    };
};
const deserializeAws_json1_1ReplicationRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ReplicationRule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Repository = (output, context) => {
    return {
        createdAt: output.createdAt !== undefined && output.createdAt !== null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt)))
            : undefined,
        encryptionConfiguration: output.encryptionConfiguration !== undefined && output.encryptionConfiguration !== null
            ? deserializeAws_json1_1EncryptionConfiguration(output.encryptionConfiguration, context)
            : undefined,
        imageScanningConfiguration: output.imageScanningConfiguration !== undefined && output.imageScanningConfiguration !== null
            ? deserializeAws_json1_1ImageScanningConfiguration(output.imageScanningConfiguration, context)
            : undefined,
        imageTagMutability: (0, smithy_client_1.expectString)(output.imageTagMutability),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryArn: (0, smithy_client_1.expectString)(output.repositoryArn),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
        repositoryUri: (0, smithy_client_1.expectString)(output.repositoryUri),
    };
};
const deserializeAws_json1_1RepositoryAlreadyExistsException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1RepositoryFilter = (output, context) => {
    return {
        filter: (0, smithy_client_1.expectString)(output.filter),
        filterType: (0, smithy_client_1.expectString)(output.filterType),
    };
};
const deserializeAws_json1_1RepositoryFilterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RepositoryFilter(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RepositoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Repository(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RepositoryNotEmptyException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1RepositoryNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1RepositoryPolicyNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1RepositoryScanningConfiguration = (output, context) => {
    return {
        appliedScanFilters: output.appliedScanFilters !== undefined && output.appliedScanFilters !== null
            ? deserializeAws_json1_1ScanningRepositoryFilterList(output.appliedScanFilters, context)
            : undefined,
        repositoryArn: (0, smithy_client_1.expectString)(output.repositoryArn),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
        scanFrequency: (0, smithy_client_1.expectString)(output.scanFrequency),
        scanOnPush: (0, smithy_client_1.expectBoolean)(output.scanOnPush),
    };
};
const deserializeAws_json1_1RepositoryScanningConfigurationFailure = (output, context) => {
    return {
        failureCode: (0, smithy_client_1.expectString)(output.failureCode),
        failureReason: (0, smithy_client_1.expectString)(output.failureReason),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1RepositoryScanningConfigurationFailureList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RepositoryScanningConfigurationFailure(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RepositoryScanningConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RepositoryScanningConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Resource = (output, context) => {
    return {
        details: output.details !== undefined && output.details !== null
            ? deserializeAws_json1_1ResourceDetails(output.details, context)
            : undefined,
        id: (0, smithy_client_1.expectString)(output.id),
        tags: output.tags !== undefined && output.tags !== null ? deserializeAws_json1_1Tags(output.tags, context) : undefined,
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const deserializeAws_json1_1ResourceDetails = (output, context) => {
    return {
        awsEcrContainerImage: output.awsEcrContainerImage !== undefined && output.awsEcrContainerImage !== null
            ? deserializeAws_json1_1AwsEcrContainerImageDetails(output.awsEcrContainerImage, context)
            : undefined,
    };
};
const deserializeAws_json1_1ResourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Resource(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ScanningRepositoryFilter = (output, context) => {
    return {
        filter: (0, smithy_client_1.expectString)(output.filter),
        filterType: (0, smithy_client_1.expectString)(output.filterType),
    };
};
const deserializeAws_json1_1ScanningRepositoryFilterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ScanningRepositoryFilter(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ScanNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ScoreDetails = (output, context) => {
    return {
        cvss: output.cvss !== undefined && output.cvss !== null
            ? deserializeAws_json1_1CvssScoreDetails(output.cvss, context)
            : undefined,
    };
};
const deserializeAws_json1_1ServerException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1SetRepositoryPolicyResponse = (output, context) => {
    return {
        policyText: (0, smithy_client_1.expectString)(output.policyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1StartImageScanResponse = (output, context) => {
    return {
        imageId: output.imageId !== undefined && output.imageId !== null
            ? deserializeAws_json1_1ImageIdentifier(output.imageId, context)
            : undefined,
        imageScanStatus: output.imageScanStatus !== undefined && output.imageScanStatus !== null
            ? deserializeAws_json1_1ImageScanStatus(output.imageScanStatus, context)
            : undefined,
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
    };
};
const deserializeAws_json1_1StartLifecyclePolicyPreviewResponse = (output, context) => {
    return {
        lifecyclePolicyText: (0, smithy_client_1.expectString)(output.lifecyclePolicyText),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const deserializeAws_json1_1Tag = (output, context) => {
    return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value),
    };
};
const deserializeAws_json1_1TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1Tags = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.expectString)(value),
        };
    }, {});
};
const deserializeAws_json1_1TooManyTagsException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1UnsupportedImageTypeException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1UnsupportedUpstreamRegistryException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1UntagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1UploadLayerPartResponse = (output, context) => {
    return {
        lastByteReceived: (0, smithy_client_1.expectLong)(output.lastByteReceived),
        registryId: (0, smithy_client_1.expectString)(output.registryId),
        repositoryName: (0, smithy_client_1.expectString)(output.repositoryName),
        uploadId: (0, smithy_client_1.expectString)(output.uploadId),
    };
};
const deserializeAws_json1_1UploadNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1ValidationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeAws_json1_1VulnerablePackage = (output, context) => {
    return {
        arch: (0, smithy_client_1.expectString)(output.arch),
        epoch: (0, smithy_client_1.expectInt32)(output.epoch),
        filePath: (0, smithy_client_1.expectString)(output.filePath),
        name: (0, smithy_client_1.expectString)(output.name),
        packageManager: (0, smithy_client_1.expectString)(output.packageManager),
        release: (0, smithy_client_1.expectString)(output.release),
        sourceLayerHash: (0, smithy_client_1.expectString)(output.sourceLayerHash),
        version: (0, smithy_client_1.expectString)(output.version),
    };
};
const deserializeAws_json1_1VulnerablePackagesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1VulnerablePackage(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
