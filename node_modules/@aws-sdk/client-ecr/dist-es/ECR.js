import { __extends } from "tslib";
import { BatchCheckLayerAvailabilityCommand, } from "./commands/BatchCheckLayerAvailabilityCommand";
import { BatchDeleteImageCommand, } from "./commands/BatchDeleteImageCommand";
import { BatchGetImageCommand, } from "./commands/BatchGetImageCommand";
import { BatchGetRepositoryScanningConfigurationCommand, } from "./commands/BatchGetRepositoryScanningConfigurationCommand";
import { CompleteLayerUploadCommand, } from "./commands/CompleteLayerUploadCommand";
import { CreatePullThroughCacheRuleCommand, } from "./commands/CreatePullThroughCacheRuleCommand";
import { CreateRepositoryCommand, } from "./commands/CreateRepositoryCommand";
import { DeleteLifecyclePolicyCommand, } from "./commands/DeleteLifecyclePolicyCommand";
import { DeletePullThroughCacheRuleCommand, } from "./commands/DeletePullThroughCacheRuleCommand";
import { DeleteRegistryPolicyCommand, } from "./commands/DeleteRegistryPolicyCommand";
import { DeleteRepositoryCommand, } from "./commands/DeleteRepositoryCommand";
import { DeleteRepositoryPolicyCommand, } from "./commands/DeleteRepositoryPolicyCommand";
import { DescribeImageReplicationStatusCommand, } from "./commands/DescribeImageReplicationStatusCommand";
import { DescribeImageScanFindingsCommand, } from "./commands/DescribeImageScanFindingsCommand";
import { DescribeImagesCommand, } from "./commands/DescribeImagesCommand";
import { DescribePullThroughCacheRulesCommand, } from "./commands/DescribePullThroughCacheRulesCommand";
import { DescribeRegistryCommand, } from "./commands/DescribeRegistryCommand";
import { DescribeRepositoriesCommand, } from "./commands/DescribeRepositoriesCommand";
import { GetAuthorizationTokenCommand, } from "./commands/GetAuthorizationTokenCommand";
import { GetDownloadUrlForLayerCommand, } from "./commands/GetDownloadUrlForLayerCommand";
import { GetLifecyclePolicyCommand, } from "./commands/GetLifecyclePolicyCommand";
import { GetLifecyclePolicyPreviewCommand, } from "./commands/GetLifecyclePolicyPreviewCommand";
import { GetRegistryPolicyCommand, } from "./commands/GetRegistryPolicyCommand";
import { GetRegistryScanningConfigurationCommand, } from "./commands/GetRegistryScanningConfigurationCommand";
import { GetRepositoryPolicyCommand, } from "./commands/GetRepositoryPolicyCommand";
import { InitiateLayerUploadCommand, } from "./commands/InitiateLayerUploadCommand";
import { ListImagesCommand } from "./commands/ListImagesCommand";
import { ListTagsForResourceCommand, } from "./commands/ListTagsForResourceCommand";
import { PutImageCommand } from "./commands/PutImageCommand";
import { PutImageScanningConfigurationCommand, } from "./commands/PutImageScanningConfigurationCommand";
import { PutImageTagMutabilityCommand, } from "./commands/PutImageTagMutabilityCommand";
import { PutLifecyclePolicyCommand, } from "./commands/PutLifecyclePolicyCommand";
import { PutRegistryPolicyCommand, } from "./commands/PutRegistryPolicyCommand";
import { PutRegistryScanningConfigurationCommand, } from "./commands/PutRegistryScanningConfigurationCommand";
import { PutReplicationConfigurationCommand, } from "./commands/PutReplicationConfigurationCommand";
import { SetRepositoryPolicyCommand, } from "./commands/SetRepositoryPolicyCommand";
import { StartImageScanCommand, } from "./commands/StartImageScanCommand";
import { StartLifecyclePolicyPreviewCommand, } from "./commands/StartLifecyclePolicyPreviewCommand";
import { TagResourceCommand } from "./commands/TagResourceCommand";
import { UntagResourceCommand, } from "./commands/UntagResourceCommand";
import { UploadLayerPartCommand, } from "./commands/UploadLayerPartCommand";
import { ECRClient } from "./ECRClient";
var ECR = (function (_super) {
    __extends(ECR, _super);
    function ECR() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ECR.prototype.batchCheckLayerAvailability = function (args, optionsOrCb, cb) {
        var command = new BatchCheckLayerAvailabilityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.batchDeleteImage = function (args, optionsOrCb, cb) {
        var command = new BatchDeleteImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.batchGetImage = function (args, optionsOrCb, cb) {
        var command = new BatchGetImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.batchGetRepositoryScanningConfiguration = function (args, optionsOrCb, cb) {
        var command = new BatchGetRepositoryScanningConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.completeLayerUpload = function (args, optionsOrCb, cb) {
        var command = new CompleteLayerUploadCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.createPullThroughCacheRule = function (args, optionsOrCb, cb) {
        var command = new CreatePullThroughCacheRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.createRepository = function (args, optionsOrCb, cb) {
        var command = new CreateRepositoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.deleteLifecyclePolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteLifecyclePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.deletePullThroughCacheRule = function (args, optionsOrCb, cb) {
        var command = new DeletePullThroughCacheRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.deleteRegistryPolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteRegistryPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.deleteRepository = function (args, optionsOrCb, cb) {
        var command = new DeleteRepositoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.deleteRepositoryPolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteRepositoryPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.describeImageReplicationStatus = function (args, optionsOrCb, cb) {
        var command = new DescribeImageReplicationStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.describeImages = function (args, optionsOrCb, cb) {
        var command = new DescribeImagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.describeImageScanFindings = function (args, optionsOrCb, cb) {
        var command = new DescribeImageScanFindingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.describePullThroughCacheRules = function (args, optionsOrCb, cb) {
        var command = new DescribePullThroughCacheRulesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.describeRegistry = function (args, optionsOrCb, cb) {
        var command = new DescribeRegistryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.describeRepositories = function (args, optionsOrCb, cb) {
        var command = new DescribeRepositoriesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.getAuthorizationToken = function (args, optionsOrCb, cb) {
        var command = new GetAuthorizationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.getDownloadUrlForLayer = function (args, optionsOrCb, cb) {
        var command = new GetDownloadUrlForLayerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.getLifecyclePolicy = function (args, optionsOrCb, cb) {
        var command = new GetLifecyclePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.getLifecyclePolicyPreview = function (args, optionsOrCb, cb) {
        var command = new GetLifecyclePolicyPreviewCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.getRegistryPolicy = function (args, optionsOrCb, cb) {
        var command = new GetRegistryPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.getRegistryScanningConfiguration = function (args, optionsOrCb, cb) {
        var command = new GetRegistryScanningConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.getRepositoryPolicy = function (args, optionsOrCb, cb) {
        var command = new GetRepositoryPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.initiateLayerUpload = function (args, optionsOrCb, cb) {
        var command = new InitiateLayerUploadCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.listImages = function (args, optionsOrCb, cb) {
        var command = new ListImagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.listTagsForResource = function (args, optionsOrCb, cb) {
        var command = new ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.putImage = function (args, optionsOrCb, cb) {
        var command = new PutImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.putImageScanningConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutImageScanningConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.putImageTagMutability = function (args, optionsOrCb, cb) {
        var command = new PutImageTagMutabilityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.putLifecyclePolicy = function (args, optionsOrCb, cb) {
        var command = new PutLifecyclePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.putRegistryPolicy = function (args, optionsOrCb, cb) {
        var command = new PutRegistryPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.putRegistryScanningConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutRegistryScanningConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.putReplicationConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutReplicationConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.setRepositoryPolicy = function (args, optionsOrCb, cb) {
        var command = new SetRepositoryPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.startImageScan = function (args, optionsOrCb, cb) {
        var command = new StartImageScanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.startLifecyclePolicyPreview = function (args, optionsOrCb, cb) {
        var command = new StartLifecyclePolicyPreviewCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.tagResource = function (args, optionsOrCb, cb) {
        var command = new TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.untagResource = function (args, optionsOrCb, cb) {
        var command = new UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ECR.prototype.uploadLayerPart = function (args, optionsOrCb, cb) {
        var command = new UploadLayerPartCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return ECR;
}(ECRClient));
export { ECR };
