import { __assign, __awaiter, __generator, __read, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, parseBoolean as __parseBoolean, parseRfc3339DateTime as __parseRfc3339DateTime, serializeFloat as __serializeFloat, strictParseFloat as __strictParseFloat, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, } from "@aws-sdk/smithy-client";
import { decodeHTML } from "entities";
import { parse as xmlParse } from "fast-xml-parser";
import { v4 as generateIdempotencyToken } from "uuid";
import { EC2ServiceException as __BaseException } from "../models/EC2ServiceException";
export var serializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AcceptReservedInstancesExchangeQuoteRequest(input, context)), { Action: "AcceptReservedInstancesExchangeQuote", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsRequest(input, context)), { Action: "AcceptTransitGatewayMulticastDomainAssociations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AcceptTransitGatewayPeeringAttachmentRequest(input, context)), { Action: "AcceptTransitGatewayPeeringAttachment", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AcceptTransitGatewayVpcAttachmentRequest(input, context)), { Action: "AcceptTransitGatewayVpcAttachment", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AcceptVpcEndpointConnectionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AcceptVpcEndpointConnectionsRequest(input, context)), { Action: "AcceptVpcEndpointConnections", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AcceptVpcPeeringConnectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AcceptVpcPeeringConnectionRequest(input, context)), { Action: "AcceptVpcPeeringConnection", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AdvertiseByoipCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AdvertiseByoipCidrRequest(input, context)), { Action: "AdvertiseByoipCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AllocateAddressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AllocateAddressRequest(input, context)), { Action: "AllocateAddress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AllocateHostsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AllocateHostsRequest(input, context)), { Action: "AllocateHosts", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AllocateIpamPoolCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AllocateIpamPoolCidrRequest(input, context)), { Action: "AllocateIpamPoolCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest(input, context)), { Action: "ApplySecurityGroupsToClientVpnTargetNetwork", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssignIpv6AddressesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssignIpv6AddressesRequest(input, context)), { Action: "AssignIpv6Addresses", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssignPrivateIpAddressesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssignPrivateIpAddressesRequest(input, context)), { Action: "AssignPrivateIpAddresses", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateAddressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateAddressRequest(input, context)), { Action: "AssociateAddress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateClientVpnTargetNetworkCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateClientVpnTargetNetworkRequest(input, context)), { Action: "AssociateClientVpnTargetNetwork", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateDhcpOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateDhcpOptionsRequest(input, context)), { Action: "AssociateDhcpOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateEnclaveCertificateIamRoleRequest(input, context)), { Action: "AssociateEnclaveCertificateIamRole", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateIamInstanceProfileCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateIamInstanceProfileRequest(input, context)), { Action: "AssociateIamInstanceProfile", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateInstanceEventWindowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateInstanceEventWindowRequest(input, context)), { Action: "AssociateInstanceEventWindow", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateRouteTableCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateRouteTableRequest(input, context)), { Action: "AssociateRouteTable", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateSubnetCidrBlockCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateSubnetCidrBlockRequest(input, context)), { Action: "AssociateSubnetCidrBlock", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateTransitGatewayMulticastDomainRequest(input, context)), { Action: "AssociateTransitGatewayMulticastDomain", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateTransitGatewayRouteTableCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateTransitGatewayRouteTableRequest(input, context)), { Action: "AssociateTransitGatewayRouteTable", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateTrunkInterfaceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateTrunkInterfaceRequest(input, context)), { Action: "AssociateTrunkInterface", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AssociateVpcCidrBlockCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AssociateVpcCidrBlockRequest(input, context)), { Action: "AssociateVpcCidrBlock", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AttachClassicLinkVpcCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AttachClassicLinkVpcRequest(input, context)), { Action: "AttachClassicLinkVpc", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AttachInternetGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AttachInternetGatewayRequest(input, context)), { Action: "AttachInternetGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AttachNetworkInterfaceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AttachNetworkInterfaceRequest(input, context)), { Action: "AttachNetworkInterface", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AttachVolumeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AttachVolumeRequest(input, context)), { Action: "AttachVolume", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AttachVpnGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AttachVpnGatewayRequest(input, context)), { Action: "AttachVpnGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AuthorizeClientVpnIngressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AuthorizeClientVpnIngressRequest(input, context)), { Action: "AuthorizeClientVpnIngress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AuthorizeSecurityGroupEgressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AuthorizeSecurityGroupEgressRequest(input, context)), { Action: "AuthorizeSecurityGroupEgress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2AuthorizeSecurityGroupIngressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2AuthorizeSecurityGroupIngressRequest(input, context)), { Action: "AuthorizeSecurityGroupIngress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2BundleInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2BundleInstanceRequest(input, context)), { Action: "BundleInstance", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CancelBundleTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CancelBundleTaskRequest(input, context)), { Action: "CancelBundleTask", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CancelCapacityReservationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CancelCapacityReservationRequest(input, context)), { Action: "CancelCapacityReservation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CancelCapacityReservationFleetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CancelCapacityReservationFleetsRequest(input, context)), { Action: "CancelCapacityReservationFleets", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CancelConversionTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CancelConversionRequest(input, context)), { Action: "CancelConversionTask", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CancelExportTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CancelExportTaskRequest(input, context)), { Action: "CancelExportTask", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CancelImportTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CancelImportTaskRequest(input, context)), { Action: "CancelImportTask", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CancelReservedInstancesListingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CancelReservedInstancesListingRequest(input, context)), { Action: "CancelReservedInstancesListing", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CancelSpotFleetRequestsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CancelSpotFleetRequestsRequest(input, context)), { Action: "CancelSpotFleetRequests", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CancelSpotInstanceRequestsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CancelSpotInstanceRequestsRequest(input, context)), { Action: "CancelSpotInstanceRequests", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ConfirmProductInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ConfirmProductInstanceRequest(input, context)), { Action: "ConfirmProductInstance", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CopyFpgaImageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CopyFpgaImageRequest(input, context)), { Action: "CopyFpgaImage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CopyImageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CopyImageRequest(input, context)), { Action: "CopyImage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CopySnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CopySnapshotRequest(input, context)), { Action: "CopySnapshot", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateCapacityReservationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateCapacityReservationRequest(input, context)), { Action: "CreateCapacityReservation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateCapacityReservationFleetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateCapacityReservationFleetRequest(input, context)), { Action: "CreateCapacityReservationFleet", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateCarrierGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateCarrierGatewayRequest(input, context)), { Action: "CreateCarrierGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateClientVpnEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateClientVpnEndpointRequest(input, context)), { Action: "CreateClientVpnEndpoint", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateClientVpnRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateClientVpnRouteRequest(input, context)), { Action: "CreateClientVpnRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateCustomerGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateCustomerGatewayRequest(input, context)), { Action: "CreateCustomerGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateDefaultSubnetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateDefaultSubnetRequest(input, context)), { Action: "CreateDefaultSubnet", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateDefaultVpcCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateDefaultVpcRequest(input, context)), { Action: "CreateDefaultVpc", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateDhcpOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateDhcpOptionsRequest(input, context)), { Action: "CreateDhcpOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateEgressOnlyInternetGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateEgressOnlyInternetGatewayRequest(input, context)), { Action: "CreateEgressOnlyInternetGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateFleetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateFleetRequest(input, context)), { Action: "CreateFleet", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateFlowLogsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateFlowLogsRequest(input, context)), { Action: "CreateFlowLogs", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateFpgaImageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateFpgaImageRequest(input, context)), { Action: "CreateFpgaImage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateImageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateImageRequest(input, context)), { Action: "CreateImage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateInstanceEventWindowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateInstanceEventWindowRequest(input, context)), { Action: "CreateInstanceEventWindow", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateInstanceExportTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateInstanceExportTaskRequest(input, context)), { Action: "CreateInstanceExportTask", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateInternetGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateInternetGatewayRequest(input, context)), { Action: "CreateInternetGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateIpamCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateIpamRequest(input, context)), { Action: "CreateIpam", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateIpamPoolCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateIpamPoolRequest(input, context)), { Action: "CreateIpamPool", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateIpamScopeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateIpamScopeRequest(input, context)), { Action: "CreateIpamScope", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateKeyPairCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateKeyPairRequest(input, context)), { Action: "CreateKeyPair", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateLaunchTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateLaunchTemplateRequest(input, context)), { Action: "CreateLaunchTemplate", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateLaunchTemplateVersionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateLaunchTemplateVersionRequest(input, context)), { Action: "CreateLaunchTemplateVersion", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateLocalGatewayRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateLocalGatewayRouteRequest(input, context)), { Action: "CreateLocalGatewayRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationRequest(input, context)), { Action: "CreateLocalGatewayRouteTableVpcAssociation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateManagedPrefixListCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateManagedPrefixListRequest(input, context)), { Action: "CreateManagedPrefixList", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateNatGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateNatGatewayRequest(input, context)), { Action: "CreateNatGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateNetworkAclCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateNetworkAclRequest(input, context)), { Action: "CreateNetworkAcl", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateNetworkAclEntryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateNetworkAclEntryRequest(input, context)), { Action: "CreateNetworkAclEntry", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateNetworkInsightsAccessScopeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateNetworkInsightsAccessScopeRequest(input, context)), { Action: "CreateNetworkInsightsAccessScope", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateNetworkInsightsPathCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateNetworkInsightsPathRequest(input, context)), { Action: "CreateNetworkInsightsPath", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateNetworkInterfaceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateNetworkInterfaceRequest(input, context)), { Action: "CreateNetworkInterface", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateNetworkInterfacePermissionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateNetworkInterfacePermissionRequest(input, context)), { Action: "CreateNetworkInterfacePermission", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreatePlacementGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreatePlacementGroupRequest(input, context)), { Action: "CreatePlacementGroup", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreatePublicIpv4PoolCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreatePublicIpv4PoolRequest(input, context)), { Action: "CreatePublicIpv4Pool", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateReplaceRootVolumeTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateReplaceRootVolumeTaskRequest(input, context)), { Action: "CreateReplaceRootVolumeTask", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateReservedInstancesListingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateReservedInstancesListingRequest(input, context)), { Action: "CreateReservedInstancesListing", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateRestoreImageTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateRestoreImageTaskRequest(input, context)), { Action: "CreateRestoreImageTask", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateRouteRequest(input, context)), { Action: "CreateRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateRouteTableCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateRouteTableRequest(input, context)), { Action: "CreateRouteTable", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateSecurityGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateSecurityGroupRequest(input, context)), { Action: "CreateSecurityGroup", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateSnapshotRequest(input, context)), { Action: "CreateSnapshot", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateSnapshotsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateSnapshotsRequest(input, context)), { Action: "CreateSnapshots", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateSpotDatafeedSubscriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateSpotDatafeedSubscriptionRequest(input, context)), { Action: "CreateSpotDatafeedSubscription", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateStoreImageTaskCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateStoreImageTaskRequest(input, context)), { Action: "CreateStoreImageTask", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateSubnetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateSubnetRequest(input, context)), { Action: "CreateSubnet", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateSubnetCidrReservationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateSubnetCidrReservationRequest(input, context)), { Action: "CreateSubnetCidrReservation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTagsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTagsRequest(input, context)), { Action: "CreateTags", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTrafficMirrorFilterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTrafficMirrorFilterRequest(input, context)), { Action: "CreateTrafficMirrorFilter", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTrafficMirrorFilterRuleCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTrafficMirrorFilterRuleRequest(input, context)), { Action: "CreateTrafficMirrorFilterRule", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTrafficMirrorSessionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTrafficMirrorSessionRequest(input, context)), { Action: "CreateTrafficMirrorSession", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTrafficMirrorTargetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTrafficMirrorTargetRequest(input, context)), { Action: "CreateTrafficMirrorTarget", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTransitGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTransitGatewayRequest(input, context)), { Action: "CreateTransitGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTransitGatewayConnectCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTransitGatewayConnectRequest(input, context)), { Action: "CreateTransitGatewayConnect", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTransitGatewayConnectPeerCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTransitGatewayConnectPeerRequest(input, context)), { Action: "CreateTransitGatewayConnectPeer", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTransitGatewayMulticastDomainCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTransitGatewayMulticastDomainRequest(input, context)), { Action: "CreateTransitGatewayMulticastDomain", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequest(input, context)), { Action: "CreateTransitGatewayPeeringAttachment", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTransitGatewayPrefixListReferenceRequest(input, context)), { Action: "CreateTransitGatewayPrefixListReference", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTransitGatewayRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTransitGatewayRouteRequest(input, context)), { Action: "CreateTransitGatewayRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTransitGatewayRouteTableCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTransitGatewayRouteTableRequest(input, context)), { Action: "CreateTransitGatewayRouteTable", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateTransitGatewayVpcAttachmentRequest(input, context)), { Action: "CreateTransitGatewayVpcAttachment", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateVolumeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateVolumeRequest(input, context)), { Action: "CreateVolume", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateVpcCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateVpcRequest(input, context)), { Action: "CreateVpc", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateVpcEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateVpcEndpointRequest(input, context)), { Action: "CreateVpcEndpoint", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateVpcEndpointConnectionNotificationRequest(input, context)), { Action: "CreateVpcEndpointConnectionNotification", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateVpcEndpointServiceConfigurationRequest(input, context)), { Action: "CreateVpcEndpointServiceConfiguration", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateVpcPeeringConnectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateVpcPeeringConnectionRequest(input, context)), { Action: "CreateVpcPeeringConnection", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateVpnConnectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateVpnConnectionRequest(input, context)), { Action: "CreateVpnConnection", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateVpnConnectionRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateVpnConnectionRouteRequest(input, context)), { Action: "CreateVpnConnectionRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2CreateVpnGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2CreateVpnGatewayRequest(input, context)), { Action: "CreateVpnGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteCarrierGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteCarrierGatewayRequest(input, context)), { Action: "DeleteCarrierGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteClientVpnEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteClientVpnEndpointRequest(input, context)), { Action: "DeleteClientVpnEndpoint", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteClientVpnRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteClientVpnRouteRequest(input, context)), { Action: "DeleteClientVpnRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteCustomerGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteCustomerGatewayRequest(input, context)), { Action: "DeleteCustomerGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteDhcpOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteDhcpOptionsRequest(input, context)), { Action: "DeleteDhcpOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteEgressOnlyInternetGatewayRequest(input, context)), { Action: "DeleteEgressOnlyInternetGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteFleetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteFleetsRequest(input, context)), { Action: "DeleteFleets", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteFlowLogsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteFlowLogsRequest(input, context)), { Action: "DeleteFlowLogs", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteFpgaImageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteFpgaImageRequest(input, context)), { Action: "DeleteFpgaImage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteInstanceEventWindowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteInstanceEventWindowRequest(input, context)), { Action: "DeleteInstanceEventWindow", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteInternetGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteInternetGatewayRequest(input, context)), { Action: "DeleteInternetGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteIpamCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteIpamRequest(input, context)), { Action: "DeleteIpam", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteIpamPoolCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteIpamPoolRequest(input, context)), { Action: "DeleteIpamPool", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteIpamScopeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteIpamScopeRequest(input, context)), { Action: "DeleteIpamScope", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteKeyPairCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteKeyPairRequest(input, context)), { Action: "DeleteKeyPair", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteLaunchTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteLaunchTemplateRequest(input, context)), { Action: "DeleteLaunchTemplate", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteLaunchTemplateVersionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteLaunchTemplateVersionsRequest(input, context)), { Action: "DeleteLaunchTemplateVersions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteLocalGatewayRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteLocalGatewayRouteRequest(input, context)), { Action: "DeleteLocalGatewayRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationRequest(input, context)), { Action: "DeleteLocalGatewayRouteTableVpcAssociation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteManagedPrefixListCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteManagedPrefixListRequest(input, context)), { Action: "DeleteManagedPrefixList", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteNatGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteNatGatewayRequest(input, context)), { Action: "DeleteNatGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteNetworkAclCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteNetworkAclRequest(input, context)), { Action: "DeleteNetworkAcl", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteNetworkAclEntryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteNetworkAclEntryRequest(input, context)), { Action: "DeleteNetworkAclEntry", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteNetworkInsightsAccessScopeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteNetworkInsightsAccessScopeRequest(input, context)), { Action: "DeleteNetworkInsightsAccessScope", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisRequest(input, context)), { Action: "DeleteNetworkInsightsAccessScopeAnalysis", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteNetworkInsightsAnalysisCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteNetworkInsightsAnalysisRequest(input, context)), { Action: "DeleteNetworkInsightsAnalysis", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteNetworkInsightsPathCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteNetworkInsightsPathRequest(input, context)), { Action: "DeleteNetworkInsightsPath", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteNetworkInterfaceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteNetworkInterfaceRequest(input, context)), { Action: "DeleteNetworkInterface", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteNetworkInterfacePermissionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteNetworkInterfacePermissionRequest(input, context)), { Action: "DeleteNetworkInterfacePermission", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeletePlacementGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeletePlacementGroupRequest(input, context)), { Action: "DeletePlacementGroup", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeletePublicIpv4PoolCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeletePublicIpv4PoolRequest(input, context)), { Action: "DeletePublicIpv4Pool", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteQueuedReservedInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteQueuedReservedInstancesRequest(input, context)), { Action: "DeleteQueuedReservedInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteRouteRequest(input, context)), { Action: "DeleteRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteRouteTableCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteRouteTableRequest(input, context)), { Action: "DeleteRouteTable", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteSecurityGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteSecurityGroupRequest(input, context)), { Action: "DeleteSecurityGroup", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteSnapshotRequest(input, context)), { Action: "DeleteSnapshot", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteSpotDatafeedSubscriptionRequest(input, context)), { Action: "DeleteSpotDatafeedSubscription", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteSubnetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteSubnetRequest(input, context)), { Action: "DeleteSubnet", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteSubnetCidrReservationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteSubnetCidrReservationRequest(input, context)), { Action: "DeleteSubnetCidrReservation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTagsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTagsRequest(input, context)), { Action: "DeleteTags", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTrafficMirrorFilterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTrafficMirrorFilterRequest(input, context)), { Action: "DeleteTrafficMirrorFilter", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTrafficMirrorFilterRuleRequest(input, context)), { Action: "DeleteTrafficMirrorFilterRule", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTrafficMirrorSessionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTrafficMirrorSessionRequest(input, context)), { Action: "DeleteTrafficMirrorSession", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTrafficMirrorTargetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTrafficMirrorTargetRequest(input, context)), { Action: "DeleteTrafficMirrorTarget", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTransitGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTransitGatewayRequest(input, context)), { Action: "DeleteTransitGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTransitGatewayConnectCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTransitGatewayConnectRequest(input, context)), { Action: "DeleteTransitGatewayConnect", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTransitGatewayConnectPeerCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTransitGatewayConnectPeerRequest(input, context)), { Action: "DeleteTransitGatewayConnectPeer", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTransitGatewayMulticastDomainRequest(input, context)), { Action: "DeleteTransitGatewayMulticastDomain", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTransitGatewayPeeringAttachmentRequest(input, context)), { Action: "DeleteTransitGatewayPeeringAttachment", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTransitGatewayPrefixListReferenceRequest(input, context)), { Action: "DeleteTransitGatewayPrefixListReference", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTransitGatewayRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTransitGatewayRouteRequest(input, context)), { Action: "DeleteTransitGatewayRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTransitGatewayRouteTableCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTransitGatewayRouteTableRequest(input, context)), { Action: "DeleteTransitGatewayRouteTable", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteTransitGatewayVpcAttachmentRequest(input, context)), { Action: "DeleteTransitGatewayVpcAttachment", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteVolumeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteVolumeRequest(input, context)), { Action: "DeleteVolume", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteVpcCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteVpcRequest(input, context)), { Action: "DeleteVpc", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteVpcEndpointConnectionNotificationsRequest(input, context)), { Action: "DeleteVpcEndpointConnectionNotifications", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteVpcEndpointsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteVpcEndpointsRequest(input, context)), { Action: "DeleteVpcEndpoints", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteVpcEndpointServiceConfigurationsRequest(input, context)), { Action: "DeleteVpcEndpointServiceConfigurations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteVpcPeeringConnectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteVpcPeeringConnectionRequest(input, context)), { Action: "DeleteVpcPeeringConnection", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteVpnConnectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteVpnConnectionRequest(input, context)), { Action: "DeleteVpnConnection", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteVpnConnectionRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteVpnConnectionRouteRequest(input, context)), { Action: "DeleteVpnConnectionRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeleteVpnGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeleteVpnGatewayRequest(input, context)), { Action: "DeleteVpnGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeprovisionByoipCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeprovisionByoipCidrRequest(input, context)), { Action: "DeprovisionByoipCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeprovisionIpamPoolCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeprovisionIpamPoolCidrRequest(input, context)), { Action: "DeprovisionIpamPoolCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeprovisionPublicIpv4PoolCidrRequest(input, context)), { Action: "DeprovisionPublicIpv4PoolCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeregisterImageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeregisterImageRequest(input, context)), { Action: "DeregisterImage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeregisterInstanceEventNotificationAttributesRequest(input, context)), { Action: "DeregisterInstanceEventNotificationAttributes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersRequest(input, context)), { Action: "DeregisterTransitGatewayMulticastGroupMembers", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesRequest(input, context)), { Action: "DeregisterTransitGatewayMulticastGroupSources", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeAccountAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeAccountAttributesRequest(input, context)), { Action: "DescribeAccountAttributes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeAddressesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeAddressesRequest(input, context)), { Action: "DescribeAddresses", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeAddressesAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeAddressesAttributeRequest(input, context)), { Action: "DescribeAddressesAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeAggregateIdFormatCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeAggregateIdFormatRequest(input, context)), { Action: "DescribeAggregateIdFormat", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeAvailabilityZonesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeAvailabilityZonesRequest(input, context)), { Action: "DescribeAvailabilityZones", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeBundleTasksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeBundleTasksRequest(input, context)), { Action: "DescribeBundleTasks", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeByoipCidrsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeByoipCidrsRequest(input, context)), { Action: "DescribeByoipCidrs", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeCapacityReservationFleetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeCapacityReservationFleetsRequest(input, context)), { Action: "DescribeCapacityReservationFleets", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeCapacityReservationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeCapacityReservationsRequest(input, context)), { Action: "DescribeCapacityReservations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeCarrierGatewaysCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeCarrierGatewaysRequest(input, context)), { Action: "DescribeCarrierGateways", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeClassicLinkInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeClassicLinkInstancesRequest(input, context)), { Action: "DescribeClassicLinkInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeClientVpnAuthorizationRulesRequest(input, context)), { Action: "DescribeClientVpnAuthorizationRules", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeClientVpnConnectionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeClientVpnConnectionsRequest(input, context)), { Action: "DescribeClientVpnConnections", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeClientVpnEndpointsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeClientVpnEndpointsRequest(input, context)), { Action: "DescribeClientVpnEndpoints", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeClientVpnRoutesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeClientVpnRoutesRequest(input, context)), { Action: "DescribeClientVpnRoutes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeClientVpnTargetNetworksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeClientVpnTargetNetworksRequest(input, context)), { Action: "DescribeClientVpnTargetNetworks", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeCoipPoolsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeCoipPoolsRequest(input, context)), { Action: "DescribeCoipPools", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeConversionTasksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeConversionTasksRequest(input, context)), { Action: "DescribeConversionTasks", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeCustomerGatewaysCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeCustomerGatewaysRequest(input, context)), { Action: "DescribeCustomerGateways", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeDhcpOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeDhcpOptionsRequest(input, context)), { Action: "DescribeDhcpOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeEgressOnlyInternetGatewaysRequest(input, context)), { Action: "DescribeEgressOnlyInternetGateways", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeElasticGpusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeElasticGpusRequest(input, context)), { Action: "DescribeElasticGpus", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeExportImageTasksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeExportImageTasksRequest(input, context)), { Action: "DescribeExportImageTasks", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeExportTasksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeExportTasksRequest(input, context)), { Action: "DescribeExportTasks", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeFastLaunchImagesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeFastLaunchImagesRequest(input, context)), { Action: "DescribeFastLaunchImages", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeFastSnapshotRestoresCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeFastSnapshotRestoresRequest(input, context)), { Action: "DescribeFastSnapshotRestores", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeFleetHistoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeFleetHistoryRequest(input, context)), { Action: "DescribeFleetHistory", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeFleetInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeFleetInstancesRequest(input, context)), { Action: "DescribeFleetInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeFleetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeFleetsRequest(input, context)), { Action: "DescribeFleets", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeFlowLogsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeFlowLogsRequest(input, context)), { Action: "DescribeFlowLogs", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeFpgaImageAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeFpgaImageAttributeRequest(input, context)), { Action: "DescribeFpgaImageAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeFpgaImagesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeFpgaImagesRequest(input, context)), { Action: "DescribeFpgaImages", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeHostReservationOfferingsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeHostReservationOfferingsRequest(input, context)), { Action: "DescribeHostReservationOfferings", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeHostReservationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeHostReservationsRequest(input, context)), { Action: "DescribeHostReservations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeHostsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeHostsRequest(input, context)), { Action: "DescribeHosts", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeIamInstanceProfileAssociationsRequest(input, context)), { Action: "DescribeIamInstanceProfileAssociations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeIdentityIdFormatCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeIdentityIdFormatRequest(input, context)), { Action: "DescribeIdentityIdFormat", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeIdFormatCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeIdFormatRequest(input, context)), { Action: "DescribeIdFormat", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeImageAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeImageAttributeRequest(input, context)), { Action: "DescribeImageAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeImagesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeImagesRequest(input, context)), { Action: "DescribeImages", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeImportImageTasksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeImportImageTasksRequest(input, context)), { Action: "DescribeImportImageTasks", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeImportSnapshotTasksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeImportSnapshotTasksRequest(input, context)), { Action: "DescribeImportSnapshotTasks", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeInstanceAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeInstanceAttributeRequest(input, context)), { Action: "DescribeInstanceAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeInstanceCreditSpecificationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeInstanceCreditSpecificationsRequest(input, context)), { Action: "DescribeInstanceCreditSpecifications", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeInstanceEventNotificationAttributesRequest(input, context)), { Action: "DescribeInstanceEventNotificationAttributes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeInstanceEventWindowsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeInstanceEventWindowsRequest(input, context)), { Action: "DescribeInstanceEventWindows", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeInstancesRequest(input, context)), { Action: "DescribeInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeInstanceStatusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeInstanceStatusRequest(input, context)), { Action: "DescribeInstanceStatus", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeInstanceTypeOfferingsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeInstanceTypeOfferingsRequest(input, context)), { Action: "DescribeInstanceTypeOfferings", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeInstanceTypesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeInstanceTypesRequest(input, context)), { Action: "DescribeInstanceTypes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeInternetGatewaysCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeInternetGatewaysRequest(input, context)), { Action: "DescribeInternetGateways", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeIpamPoolsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeIpamPoolsRequest(input, context)), { Action: "DescribeIpamPools", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeIpamsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeIpamsRequest(input, context)), { Action: "DescribeIpams", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeIpamScopesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeIpamScopesRequest(input, context)), { Action: "DescribeIpamScopes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeIpv6PoolsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeIpv6PoolsRequest(input, context)), { Action: "DescribeIpv6Pools", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeKeyPairsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeKeyPairsRequest(input, context)), { Action: "DescribeKeyPairs", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeLaunchTemplatesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeLaunchTemplatesRequest(input, context)), { Action: "DescribeLaunchTemplates", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeLaunchTemplateVersionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeLaunchTemplateVersionsRequest(input, context)), { Action: "DescribeLaunchTemplateVersions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeLocalGatewayRouteTablesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeLocalGatewayRouteTablesRequest(input, context)), { Action: "DescribeLocalGatewayRouteTables", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(input, context)), { Action: "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest(input, context)), { Action: "DescribeLocalGatewayRouteTableVpcAssociations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeLocalGatewaysCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeLocalGatewaysRequest(input, context)), { Action: "DescribeLocalGateways", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest(input, context)), { Action: "DescribeLocalGatewayVirtualInterfaceGroups", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeLocalGatewayVirtualInterfacesRequest(input, context)), { Action: "DescribeLocalGatewayVirtualInterfaces", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeManagedPrefixListsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeManagedPrefixListsRequest(input, context)), { Action: "DescribeManagedPrefixLists", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeMovingAddressesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeMovingAddressesRequest(input, context)), { Action: "DescribeMovingAddresses", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeNatGatewaysCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeNatGatewaysRequest(input, context)), { Action: "DescribeNatGateways", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeNetworkAclsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeNetworkAclsRequest(input, context)), { Action: "DescribeNetworkAcls", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesRequest(input, context)), { Action: "DescribeNetworkInsightsAccessScopeAnalyses", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeNetworkInsightsAccessScopesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeNetworkInsightsAccessScopesRequest(input, context)), { Action: "DescribeNetworkInsightsAccessScopes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeNetworkInsightsAnalysesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeNetworkInsightsAnalysesRequest(input, context)), { Action: "DescribeNetworkInsightsAnalyses", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeNetworkInsightsPathsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeNetworkInsightsPathsRequest(input, context)), { Action: "DescribeNetworkInsightsPaths", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeNetworkInterfaceAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeNetworkInterfaceAttributeRequest(input, context)), { Action: "DescribeNetworkInterfaceAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeNetworkInterfacePermissionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeNetworkInterfacePermissionsRequest(input, context)), { Action: "DescribeNetworkInterfacePermissions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeNetworkInterfacesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeNetworkInterfacesRequest(input, context)), { Action: "DescribeNetworkInterfaces", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribePlacementGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribePlacementGroupsRequest(input, context)), { Action: "DescribePlacementGroups", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribePrefixListsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribePrefixListsRequest(input, context)), { Action: "DescribePrefixLists", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribePrincipalIdFormatCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribePrincipalIdFormatRequest(input, context)), { Action: "DescribePrincipalIdFormat", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribePublicIpv4PoolsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribePublicIpv4PoolsRequest(input, context)), { Action: "DescribePublicIpv4Pools", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeRegionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeRegionsRequest(input, context)), { Action: "DescribeRegions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeReplaceRootVolumeTasksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeReplaceRootVolumeTasksRequest(input, context)), { Action: "DescribeReplaceRootVolumeTasks", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeReservedInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeReservedInstancesRequest(input, context)), { Action: "DescribeReservedInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeReservedInstancesListingsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeReservedInstancesListingsRequest(input, context)), { Action: "DescribeReservedInstancesListings", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeReservedInstancesModificationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeReservedInstancesModificationsRequest(input, context)), { Action: "DescribeReservedInstancesModifications", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeReservedInstancesOfferingsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeReservedInstancesOfferingsRequest(input, context)), { Action: "DescribeReservedInstancesOfferings", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeRouteTablesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeRouteTablesRequest(input, context)), { Action: "DescribeRouteTables", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeScheduledInstanceAvailabilityRequest(input, context)), { Action: "DescribeScheduledInstanceAvailability", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeScheduledInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeScheduledInstancesRequest(input, context)), { Action: "DescribeScheduledInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSecurityGroupReferencesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSecurityGroupReferencesRequest(input, context)), { Action: "DescribeSecurityGroupReferences", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSecurityGroupRulesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSecurityGroupRulesRequest(input, context)), { Action: "DescribeSecurityGroupRules", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSecurityGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSecurityGroupsRequest(input, context)), { Action: "DescribeSecurityGroups", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSnapshotAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSnapshotAttributeRequest(input, context)), { Action: "DescribeSnapshotAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSnapshotsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSnapshotsRequest(input, context)), { Action: "DescribeSnapshots", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSnapshotTierStatusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSnapshotTierStatusRequest(input, context)), { Action: "DescribeSnapshotTierStatus", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSpotDatafeedSubscriptionRequest(input, context)), { Action: "DescribeSpotDatafeedSubscription", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSpotFleetInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSpotFleetInstancesRequest(input, context)), { Action: "DescribeSpotFleetInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSpotFleetRequestHistoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSpotFleetRequestHistoryRequest(input, context)), { Action: "DescribeSpotFleetRequestHistory", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSpotFleetRequestsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSpotFleetRequestsRequest(input, context)), { Action: "DescribeSpotFleetRequests", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSpotInstanceRequestsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSpotInstanceRequestsRequest(input, context)), { Action: "DescribeSpotInstanceRequests", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSpotPriceHistoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSpotPriceHistoryRequest(input, context)), { Action: "DescribeSpotPriceHistory", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeStaleSecurityGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeStaleSecurityGroupsRequest(input, context)), { Action: "DescribeStaleSecurityGroups", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeStoreImageTasksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeStoreImageTasksRequest(input, context)), { Action: "DescribeStoreImageTasks", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeSubnetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeSubnetsRequest(input, context)), { Action: "DescribeSubnets", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTagsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTagsRequest(input, context)), { Action: "DescribeTags", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTrafficMirrorFiltersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTrafficMirrorFiltersRequest(input, context)), { Action: "DescribeTrafficMirrorFilters", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTrafficMirrorSessionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTrafficMirrorSessionsRequest(input, context)), { Action: "DescribeTrafficMirrorSessions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTrafficMirrorTargetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTrafficMirrorTargetsRequest(input, context)), { Action: "DescribeTrafficMirrorTargets", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTransitGatewayAttachmentsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTransitGatewayAttachmentsRequest(input, context)), { Action: "DescribeTransitGatewayAttachments", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTransitGatewayConnectPeersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTransitGatewayConnectPeersRequest(input, context)), { Action: "DescribeTransitGatewayConnectPeers", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTransitGatewayConnectsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTransitGatewayConnectsRequest(input, context)), { Action: "DescribeTransitGatewayConnects", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTransitGatewayMulticastDomainsRequest(input, context)), { Action: "DescribeTransitGatewayMulticastDomains", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsRequest(input, context)), { Action: "DescribeTransitGatewayPeeringAttachments", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTransitGatewayRouteTablesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTransitGatewayRouteTablesRequest(input, context)), { Action: "DescribeTransitGatewayRouteTables", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTransitGatewaysCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTransitGatewaysRequest(input, context)), { Action: "DescribeTransitGateways", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTransitGatewayVpcAttachmentsRequest(input, context)), { Action: "DescribeTransitGatewayVpcAttachments", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeTrunkInterfaceAssociationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeTrunkInterfaceAssociationsRequest(input, context)), { Action: "DescribeTrunkInterfaceAssociations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVolumeAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVolumeAttributeRequest(input, context)), { Action: "DescribeVolumeAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVolumesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVolumesRequest(input, context)), { Action: "DescribeVolumes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVolumesModificationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVolumesModificationsRequest(input, context)), { Action: "DescribeVolumesModifications", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVolumeStatusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVolumeStatusRequest(input, context)), { Action: "DescribeVolumeStatus", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcAttributeRequest(input, context)), { Action: "DescribeVpcAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcClassicLinkCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcClassicLinkRequest(input, context)), { Action: "DescribeVpcClassicLink", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcClassicLinkDnsSupportRequest(input, context)), { Action: "DescribeVpcClassicLinkDnsSupport", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcEndpointConnectionNotificationsRequest(input, context)), { Action: "DescribeVpcEndpointConnectionNotifications", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcEndpointConnectionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcEndpointConnectionsRequest(input, context)), { Action: "DescribeVpcEndpointConnections", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcEndpointsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcEndpointsRequest(input, context)), { Action: "DescribeVpcEndpoints", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcEndpointServiceConfigurationsRequest(input, context)), { Action: "DescribeVpcEndpointServiceConfigurations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcEndpointServicePermissionsRequest(input, context)), { Action: "DescribeVpcEndpointServicePermissions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcEndpointServicesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcEndpointServicesRequest(input, context)), { Action: "DescribeVpcEndpointServices", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcPeeringConnectionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcPeeringConnectionsRequest(input, context)), { Action: "DescribeVpcPeeringConnections", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpcsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpcsRequest(input, context)), { Action: "DescribeVpcs", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpnConnectionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpnConnectionsRequest(input, context)), { Action: "DescribeVpnConnections", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DescribeVpnGatewaysCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DescribeVpnGatewaysRequest(input, context)), { Action: "DescribeVpnGateways", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DetachClassicLinkVpcCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DetachClassicLinkVpcRequest(input, context)), { Action: "DetachClassicLinkVpc", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DetachInternetGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DetachInternetGatewayRequest(input, context)), { Action: "DetachInternetGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DetachNetworkInterfaceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DetachNetworkInterfaceRequest(input, context)), { Action: "DetachNetworkInterface", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DetachVolumeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DetachVolumeRequest(input, context)), { Action: "DetachVolume", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DetachVpnGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DetachVpnGatewayRequest(input, context)), { Action: "DetachVpnGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableEbsEncryptionByDefaultCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableEbsEncryptionByDefaultRequest(input, context)), { Action: "DisableEbsEncryptionByDefault", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableFastLaunchCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableFastLaunchRequest(input, context)), { Action: "DisableFastLaunch", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableFastSnapshotRestoresCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableFastSnapshotRestoresRequest(input, context)), { Action: "DisableFastSnapshotRestores", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableImageDeprecationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableImageDeprecationRequest(input, context)), { Action: "DisableImageDeprecation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableIpamOrganizationAdminAccountCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableIpamOrganizationAdminAccountRequest(input, context)), { Action: "DisableIpamOrganizationAdminAccount", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableSerialConsoleAccessCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableSerialConsoleAccessRequest(input, context)), { Action: "DisableSerialConsoleAccess", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableTransitGatewayRouteTablePropagationRequest(input, context)), { Action: "DisableTransitGatewayRouteTablePropagation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableVgwRoutePropagationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableVgwRoutePropagationRequest(input, context)), { Action: "DisableVgwRoutePropagation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableVpcClassicLinkCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableVpcClassicLinkRequest(input, context)), { Action: "DisableVpcClassicLink", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisableVpcClassicLinkDnsSupportRequest(input, context)), { Action: "DisableVpcClassicLinkDnsSupport", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateAddressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateAddressRequest(input, context)), { Action: "DisassociateAddress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateClientVpnTargetNetworkCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateClientVpnTargetNetworkRequest(input, context)), { Action: "DisassociateClientVpnTargetNetwork", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateEnclaveCertificateIamRoleRequest(input, context)), { Action: "DisassociateEnclaveCertificateIamRole", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateIamInstanceProfileCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateIamInstanceProfileRequest(input, context)), { Action: "DisassociateIamInstanceProfile", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateInstanceEventWindowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateInstanceEventWindowRequest(input, context)), { Action: "DisassociateInstanceEventWindow", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateRouteTableCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateRouteTableRequest(input, context)), { Action: "DisassociateRouteTable", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateSubnetCidrBlockCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateSubnetCidrBlockRequest(input, context)), { Action: "DisassociateSubnetCidrBlock", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateTransitGatewayMulticastDomainRequest(input, context)), { Action: "DisassociateTransitGatewayMulticastDomain", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateTransitGatewayRouteTableCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateTransitGatewayRouteTableRequest(input, context)), { Action: "DisassociateTransitGatewayRouteTable", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateTrunkInterfaceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateTrunkInterfaceRequest(input, context)), { Action: "DisassociateTrunkInterface", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2DisassociateVpcCidrBlockCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2DisassociateVpcCidrBlockRequest(input, context)), { Action: "DisassociateVpcCidrBlock", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableEbsEncryptionByDefaultCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableEbsEncryptionByDefaultRequest(input, context)), { Action: "EnableEbsEncryptionByDefault", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableFastLaunchCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableFastLaunchRequest(input, context)), { Action: "EnableFastLaunch", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableFastSnapshotRestoresCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableFastSnapshotRestoresRequest(input, context)), { Action: "EnableFastSnapshotRestores", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableImageDeprecationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableImageDeprecationRequest(input, context)), { Action: "EnableImageDeprecation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableIpamOrganizationAdminAccountCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableIpamOrganizationAdminAccountRequest(input, context)), { Action: "EnableIpamOrganizationAdminAccount", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableSerialConsoleAccessCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableSerialConsoleAccessRequest(input, context)), { Action: "EnableSerialConsoleAccess", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableTransitGatewayRouteTablePropagationRequest(input, context)), { Action: "EnableTransitGatewayRouteTablePropagation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableVgwRoutePropagationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableVgwRoutePropagationRequest(input, context)), { Action: "EnableVgwRoutePropagation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableVolumeIOCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableVolumeIORequest(input, context)), { Action: "EnableVolumeIO", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableVpcClassicLinkCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableVpcClassicLinkRequest(input, context)), { Action: "EnableVpcClassicLink", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2EnableVpcClassicLinkDnsSupportRequest(input, context)), { Action: "EnableVpcClassicLinkDnsSupport", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ExportClientVpnClientCertificateRevocationListRequest(input, context)), { Action: "ExportClientVpnClientCertificateRevocationList", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ExportClientVpnClientConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ExportClientVpnClientConfigurationRequest(input, context)), { Action: "ExportClientVpnClientConfiguration", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ExportImageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ExportImageRequest(input, context)), { Action: "ExportImage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ExportTransitGatewayRoutesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ExportTransitGatewayRoutesRequest(input, context)), { Action: "ExportTransitGatewayRoutes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesRequest(input, context)), { Action: "GetAssociatedEnclaveCertificateIamRoles", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetAssociatedIpv6PoolCidrsRequest(input, context)), { Action: "GetAssociatedIpv6PoolCidrs", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetCapacityReservationUsageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetCapacityReservationUsageRequest(input, context)), { Action: "GetCapacityReservationUsage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetCoipPoolUsageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetCoipPoolUsageRequest(input, context)), { Action: "GetCoipPoolUsage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetConsoleOutputCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetConsoleOutputRequest(input, context)), { Action: "GetConsoleOutput", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetConsoleScreenshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetConsoleScreenshotRequest(input, context)), { Action: "GetConsoleScreenshot", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetDefaultCreditSpecificationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetDefaultCreditSpecificationRequest(input, context)), { Action: "GetDefaultCreditSpecification", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetEbsDefaultKmsKeyIdCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetEbsDefaultKmsKeyIdRequest(input, context)), { Action: "GetEbsDefaultKmsKeyId", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetEbsEncryptionByDefaultCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetEbsEncryptionByDefaultRequest(input, context)), { Action: "GetEbsEncryptionByDefault", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetFlowLogsIntegrationTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetFlowLogsIntegrationTemplateRequest(input, context)), { Action: "GetFlowLogsIntegrationTemplate", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetGroupsForCapacityReservationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetGroupsForCapacityReservationRequest(input, context)), { Action: "GetGroupsForCapacityReservation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetHostReservationPurchasePreviewCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetHostReservationPurchasePreviewRequest(input, context)), { Action: "GetHostReservationPurchasePreview", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetInstanceTypesFromInstanceRequirementsRequest(input, context)), { Action: "GetInstanceTypesFromInstanceRequirements", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetInstanceUefiDataCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetInstanceUefiDataRequest(input, context)), { Action: "GetInstanceUefiData", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetIpamAddressHistoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetIpamAddressHistoryRequest(input, context)), { Action: "GetIpamAddressHistory", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetIpamPoolAllocationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetIpamPoolAllocationsRequest(input, context)), { Action: "GetIpamPoolAllocations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetIpamPoolCidrsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetIpamPoolCidrsRequest(input, context)), { Action: "GetIpamPoolCidrs", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetIpamResourceCidrsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetIpamResourceCidrsRequest(input, context)), { Action: "GetIpamResourceCidrs", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetLaunchTemplateDataCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetLaunchTemplateDataRequest(input, context)), { Action: "GetLaunchTemplateData", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetManagedPrefixListAssociationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetManagedPrefixListAssociationsRequest(input, context)), { Action: "GetManagedPrefixListAssociations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetManagedPrefixListEntriesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetManagedPrefixListEntriesRequest(input, context)), { Action: "GetManagedPrefixListEntries", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsRequest(input, context)), { Action: "GetNetworkInsightsAccessScopeAnalysisFindings", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetNetworkInsightsAccessScopeContentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetNetworkInsightsAccessScopeContentRequest(input, context)), { Action: "GetNetworkInsightsAccessScopeContent", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetPasswordDataCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetPasswordDataRequest(input, context)), { Action: "GetPasswordData", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetReservedInstancesExchangeQuoteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetReservedInstancesExchangeQuoteRequest(input, context)), { Action: "GetReservedInstancesExchangeQuote", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetSerialConsoleAccessStatusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetSerialConsoleAccessStatusRequest(input, context)), { Action: "GetSerialConsoleAccessStatus", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetSpotPlacementScoresCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetSpotPlacementScoresRequest(input, context)), { Action: "GetSpotPlacementScores", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetSubnetCidrReservationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetSubnetCidrReservationsRequest(input, context)), { Action: "GetSubnetCidrReservations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetTransitGatewayAttachmentPropagationsRequest(input, context)), { Action: "GetTransitGatewayAttachmentPropagations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsRequest(input, context)), { Action: "GetTransitGatewayMulticastDomainAssociations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetTransitGatewayPrefixListReferencesRequest(input, context)), { Action: "GetTransitGatewayPrefixListReferences", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetTransitGatewayRouteTableAssociationsRequest(input, context)), { Action: "GetTransitGatewayRouteTableAssociations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetTransitGatewayRouteTablePropagationsRequest(input, context)), { Action: "GetTransitGatewayRouteTablePropagations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationRequest(input, context)), { Action: "GetVpnConnectionDeviceSampleConfiguration", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2GetVpnConnectionDeviceTypesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2GetVpnConnectionDeviceTypesRequest(input, context)), { Action: "GetVpnConnectionDeviceTypes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ImportClientVpnClientCertificateRevocationListRequest(input, context)), { Action: "ImportClientVpnClientCertificateRevocationList", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ImportImageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ImportImageRequest(input, context)), { Action: "ImportImage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ImportInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ImportInstanceRequest(input, context)), { Action: "ImportInstance", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ImportKeyPairCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ImportKeyPairRequest(input, context)), { Action: "ImportKeyPair", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ImportSnapshotCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ImportSnapshotRequest(input, context)), { Action: "ImportSnapshot", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ImportVolumeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ImportVolumeRequest(input, context)), { Action: "ImportVolume", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ListImagesInRecycleBinCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ListImagesInRecycleBinRequest(input, context)), { Action: "ListImagesInRecycleBin", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ListSnapshotsInRecycleBinCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ListSnapshotsInRecycleBinRequest(input, context)), { Action: "ListSnapshotsInRecycleBin", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyAddressAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyAddressAttributeRequest(input, context)), { Action: "ModifyAddressAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyAvailabilityZoneGroupCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyAvailabilityZoneGroupRequest(input, context)), { Action: "ModifyAvailabilityZoneGroup", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyCapacityReservationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyCapacityReservationRequest(input, context)), { Action: "ModifyCapacityReservation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyCapacityReservationFleetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyCapacityReservationFleetRequest(input, context)), { Action: "ModifyCapacityReservationFleet", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyClientVpnEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyClientVpnEndpointRequest(input, context)), { Action: "ModifyClientVpnEndpoint", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyDefaultCreditSpecificationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyDefaultCreditSpecificationRequest(input, context)), { Action: "ModifyDefaultCreditSpecification", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyEbsDefaultKmsKeyIdRequest(input, context)), { Action: "ModifyEbsDefaultKmsKeyId", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyFleetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyFleetRequest(input, context)), { Action: "ModifyFleet", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyFpgaImageAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyFpgaImageAttributeRequest(input, context)), { Action: "ModifyFpgaImageAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyHostsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyHostsRequest(input, context)), { Action: "ModifyHosts", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyIdentityIdFormatCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyIdentityIdFormatRequest(input, context)), { Action: "ModifyIdentityIdFormat", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyIdFormatCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyIdFormatRequest(input, context)), { Action: "ModifyIdFormat", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyImageAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyImageAttributeRequest(input, context)), { Action: "ModifyImageAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyInstanceAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyInstanceAttributeRequest(input, context)), { Action: "ModifyInstanceAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyInstanceCapacityReservationAttributesRequest(input, context)), { Action: "ModifyInstanceCapacityReservationAttributes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyInstanceCreditSpecificationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyInstanceCreditSpecificationRequest(input, context)), { Action: "ModifyInstanceCreditSpecification", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyInstanceEventStartTimeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyInstanceEventStartTimeRequest(input, context)), { Action: "ModifyInstanceEventStartTime", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyInstanceEventWindowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyInstanceEventWindowRequest(input, context)), { Action: "ModifyInstanceEventWindow", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyInstanceMaintenanceOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyInstanceMaintenanceOptionsRequest(input, context)), { Action: "ModifyInstanceMaintenanceOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyInstanceMetadataOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyInstanceMetadataOptionsRequest(input, context)), { Action: "ModifyInstanceMetadataOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyInstancePlacementCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyInstancePlacementRequest(input, context)), { Action: "ModifyInstancePlacement", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyIpamCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyIpamRequest(input, context)), { Action: "ModifyIpam", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyIpamPoolCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyIpamPoolRequest(input, context)), { Action: "ModifyIpamPool", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyIpamResourceCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyIpamResourceCidrRequest(input, context)), { Action: "ModifyIpamResourceCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyIpamScopeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyIpamScopeRequest(input, context)), { Action: "ModifyIpamScope", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyLaunchTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyLaunchTemplateRequest(input, context)), { Action: "ModifyLaunchTemplate", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyManagedPrefixListCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyManagedPrefixListRequest(input, context)), { Action: "ModifyManagedPrefixList", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyNetworkInterfaceAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyNetworkInterfaceAttributeRequest(input, context)), { Action: "ModifyNetworkInterfaceAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyPrivateDnsNameOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyPrivateDnsNameOptionsRequest(input, context)), { Action: "ModifyPrivateDnsNameOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyReservedInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyReservedInstancesRequest(input, context)), { Action: "ModifyReservedInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifySecurityGroupRulesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifySecurityGroupRulesRequest(input, context)), { Action: "ModifySecurityGroupRules", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifySnapshotAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifySnapshotAttributeRequest(input, context)), { Action: "ModifySnapshotAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifySnapshotTierCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifySnapshotTierRequest(input, context)), { Action: "ModifySnapshotTier", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifySpotFleetRequestCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifySpotFleetRequestRequest(input, context)), { Action: "ModifySpotFleetRequest", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifySubnetAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifySubnetAttributeRequest(input, context)), { Action: "ModifySubnetAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesRequest(input, context)), { Action: "ModifyTrafficMirrorFilterNetworkServices", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyTrafficMirrorFilterRuleRequest(input, context)), { Action: "ModifyTrafficMirrorFilterRule", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyTrafficMirrorSessionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyTrafficMirrorSessionRequest(input, context)), { Action: "ModifyTrafficMirrorSession", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyTransitGatewayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyTransitGatewayRequest(input, context)), { Action: "ModifyTransitGateway", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyTransitGatewayPrefixListReferenceRequest(input, context)), { Action: "ModifyTransitGatewayPrefixListReference", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequest(input, context)), { Action: "ModifyTransitGatewayVpcAttachment", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVolumeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVolumeRequest(input, context)), { Action: "ModifyVolume", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVolumeAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVolumeAttributeRequest(input, context)), { Action: "ModifyVolumeAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpcAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpcAttributeRequest(input, context)), { Action: "ModifyVpcAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpcEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpcEndpointRequest(input, context)), { Action: "ModifyVpcEndpoint", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpcEndpointConnectionNotificationRequest(input, context)), { Action: "ModifyVpcEndpointConnectionNotification", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpcEndpointServiceConfigurationRequest(input, context)), { Action: "ModifyVpcEndpointServiceConfiguration", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityRequest(input, context)), { Action: "ModifyVpcEndpointServicePayerResponsibility", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpcEndpointServicePermissionsRequest(input, context)), { Action: "ModifyVpcEndpointServicePermissions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpcPeeringConnectionOptionsRequest(input, context)), { Action: "ModifyVpcPeeringConnectionOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpcTenancyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpcTenancyRequest(input, context)), { Action: "ModifyVpcTenancy", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpnConnectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpnConnectionRequest(input, context)), { Action: "ModifyVpnConnection", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpnConnectionOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpnConnectionOptionsRequest(input, context)), { Action: "ModifyVpnConnectionOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpnTunnelCertificateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpnTunnelCertificateRequest(input, context)), { Action: "ModifyVpnTunnelCertificate", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ModifyVpnTunnelOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ModifyVpnTunnelOptionsRequest(input, context)), { Action: "ModifyVpnTunnelOptions", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2MonitorInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2MonitorInstancesRequest(input, context)), { Action: "MonitorInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2MoveAddressToVpcCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2MoveAddressToVpcRequest(input, context)), { Action: "MoveAddressToVpc", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2MoveByoipCidrToIpamCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2MoveByoipCidrToIpamRequest(input, context)), { Action: "MoveByoipCidrToIpam", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ProvisionByoipCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ProvisionByoipCidrRequest(input, context)), { Action: "ProvisionByoipCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ProvisionIpamPoolCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ProvisionIpamPoolCidrRequest(input, context)), { Action: "ProvisionIpamPoolCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ProvisionPublicIpv4PoolCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ProvisionPublicIpv4PoolCidrRequest(input, context)), { Action: "ProvisionPublicIpv4PoolCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2PurchaseHostReservationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2PurchaseHostReservationRequest(input, context)), { Action: "PurchaseHostReservation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2PurchaseReservedInstancesOfferingCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2PurchaseReservedInstancesOfferingRequest(input, context)), { Action: "PurchaseReservedInstancesOffering", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2PurchaseScheduledInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2PurchaseScheduledInstancesRequest(input, context)), { Action: "PurchaseScheduledInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RebootInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RebootInstancesRequest(input, context)), { Action: "RebootInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RegisterImageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RegisterImageRequest(input, context)), { Action: "RegisterImage", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RegisterInstanceEventNotificationAttributesRequest(input, context)), { Action: "RegisterInstanceEventNotificationAttributes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersRequest(input, context)), { Action: "RegisterTransitGatewayMulticastGroupMembers", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesRequest(input, context)), { Action: "RegisterTransitGatewayMulticastGroupSources", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsRequest(input, context)), { Action: "RejectTransitGatewayMulticastDomainAssociations", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RejectTransitGatewayPeeringAttachmentRequest(input, context)), { Action: "RejectTransitGatewayPeeringAttachment", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RejectTransitGatewayVpcAttachmentRequest(input, context)), { Action: "RejectTransitGatewayVpcAttachment", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RejectVpcEndpointConnectionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RejectVpcEndpointConnectionsRequest(input, context)), { Action: "RejectVpcEndpointConnections", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RejectVpcPeeringConnectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RejectVpcPeeringConnectionRequest(input, context)), { Action: "RejectVpcPeeringConnection", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReleaseAddressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReleaseAddressRequest(input, context)), { Action: "ReleaseAddress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReleaseHostsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReleaseHostsRequest(input, context)), { Action: "ReleaseHosts", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReleaseIpamPoolAllocationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReleaseIpamPoolAllocationRequest(input, context)), { Action: "ReleaseIpamPoolAllocation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReplaceIamInstanceProfileAssociationRequest(input, context)), { Action: "ReplaceIamInstanceProfileAssociation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReplaceNetworkAclAssociationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReplaceNetworkAclAssociationRequest(input, context)), { Action: "ReplaceNetworkAclAssociation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReplaceNetworkAclEntryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReplaceNetworkAclEntryRequest(input, context)), { Action: "ReplaceNetworkAclEntry", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReplaceRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReplaceRouteRequest(input, context)), { Action: "ReplaceRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReplaceRouteTableAssociationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReplaceRouteTableAssociationRequest(input, context)), { Action: "ReplaceRouteTableAssociation", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReplaceTransitGatewayRouteCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReplaceTransitGatewayRouteRequest(input, context)), { Action: "ReplaceTransitGatewayRoute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ReportInstanceStatusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ReportInstanceStatusRequest(input, context)), { Action: "ReportInstanceStatus", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RequestSpotFleetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RequestSpotFleetRequest(input, context)), { Action: "RequestSpotFleet", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RequestSpotInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RequestSpotInstancesRequest(input, context)), { Action: "RequestSpotInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ResetAddressAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ResetAddressAttributeRequest(input, context)), { Action: "ResetAddressAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ResetEbsDefaultKmsKeyIdRequest(input, context)), { Action: "ResetEbsDefaultKmsKeyId", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ResetFpgaImageAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ResetFpgaImageAttributeRequest(input, context)), { Action: "ResetFpgaImageAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ResetImageAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ResetImageAttributeRequest(input, context)), { Action: "ResetImageAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ResetInstanceAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ResetInstanceAttributeRequest(input, context)), { Action: "ResetInstanceAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ResetNetworkInterfaceAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ResetNetworkInterfaceAttributeRequest(input, context)), { Action: "ResetNetworkInterfaceAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2ResetSnapshotAttributeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2ResetSnapshotAttributeRequest(input, context)), { Action: "ResetSnapshotAttribute", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RestoreAddressToClassicCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RestoreAddressToClassicRequest(input, context)), { Action: "RestoreAddressToClassic", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RestoreImageFromRecycleBinCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RestoreImageFromRecycleBinRequest(input, context)), { Action: "RestoreImageFromRecycleBin", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RestoreManagedPrefixListVersionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RestoreManagedPrefixListVersionRequest(input, context)), { Action: "RestoreManagedPrefixListVersion", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RestoreSnapshotFromRecycleBinCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RestoreSnapshotFromRecycleBinRequest(input, context)), { Action: "RestoreSnapshotFromRecycleBin", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RestoreSnapshotTierCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RestoreSnapshotTierRequest(input, context)), { Action: "RestoreSnapshotTier", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RevokeClientVpnIngressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RevokeClientVpnIngressRequest(input, context)), { Action: "RevokeClientVpnIngress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RevokeSecurityGroupEgressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RevokeSecurityGroupEgressRequest(input, context)), { Action: "RevokeSecurityGroupEgress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RevokeSecurityGroupIngressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RevokeSecurityGroupIngressRequest(input, context)), { Action: "RevokeSecurityGroupIngress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RunInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RunInstancesRequest(input, context)), { Action: "RunInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2RunScheduledInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2RunScheduledInstancesRequest(input, context)), { Action: "RunScheduledInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2SearchLocalGatewayRoutesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2SearchLocalGatewayRoutesRequest(input, context)), { Action: "SearchLocalGatewayRoutes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2SearchTransitGatewayMulticastGroupsRequest(input, context)), { Action: "SearchTransitGatewayMulticastGroups", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2SearchTransitGatewayRoutesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2SearchTransitGatewayRoutesRequest(input, context)), { Action: "SearchTransitGatewayRoutes", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2SendDiagnosticInterruptCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2SendDiagnosticInterruptRequest(input, context)), { Action: "SendDiagnosticInterrupt", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2StartInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2StartInstancesRequest(input, context)), { Action: "StartInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisRequest(input, context)), { Action: "StartNetworkInsightsAccessScopeAnalysis", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2StartNetworkInsightsAnalysisCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2StartNetworkInsightsAnalysisRequest(input, context)), { Action: "StartNetworkInsightsAnalysis", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationRequest(input, context)), { Action: "StartVpcEndpointServicePrivateDnsVerification", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2StopInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2StopInstancesRequest(input, context)), { Action: "StopInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2TerminateClientVpnConnectionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2TerminateClientVpnConnectionsRequest(input, context)), { Action: "TerminateClientVpnConnections", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2TerminateInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2TerminateInstancesRequest(input, context)), { Action: "TerminateInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2UnassignIpv6AddressesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2UnassignIpv6AddressesRequest(input, context)), { Action: "UnassignIpv6Addresses", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2UnassignPrivateIpAddressesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2UnassignPrivateIpAddressesRequest(input, context)), { Action: "UnassignPrivateIpAddresses", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2UnmonitorInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2UnmonitorInstancesRequest(input, context)), { Action: "UnmonitorInstances", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressRequest(input, context)), { Action: "UpdateSecurityGroupRuleDescriptionsEgress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressRequest(input, context)), { Action: "UpdateSecurityGroupRuleDescriptionsIngress", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_ec2WithdrawByoipCidrCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-www-form-urlencoded",
        };
        body = buildFormUrlencodedString(__assign(__assign({}, serializeAws_ec2WithdrawByoipCidrRequest(input, context)), { Action: "WithdrawByoipCidr", Version: "2016-11-15" }));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AcceptReservedInstancesExchangeQuoteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AcceptTransitGatewayVpcAttachmentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AcceptVpcEndpointConnectionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AcceptVpcEndpointConnectionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AcceptVpcEndpointConnectionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AcceptVpcEndpointConnectionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AcceptVpcPeeringConnectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AcceptVpcPeeringConnectionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AcceptVpcPeeringConnectionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AcceptVpcPeeringConnectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AdvertiseByoipCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AdvertiseByoipCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AdvertiseByoipCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AdvertiseByoipCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AllocateAddressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AllocateAddressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AllocateAddressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AllocateAddressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AllocateHostsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AllocateHostsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AllocateHostsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AllocateHostsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AllocateIpamPoolCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AllocateIpamPoolCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AllocateIpamPoolCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AllocateIpamPoolCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssignIpv6AddressesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssignIpv6AddressesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssignIpv6AddressesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssignIpv6AddressesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssignPrivateIpAddressesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssignPrivateIpAddressesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssignPrivateIpAddressesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssignPrivateIpAddressesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateAddressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateAddressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateAddressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateAddressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateClientVpnTargetNetworkCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateClientVpnTargetNetworkCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateClientVpnTargetNetworkResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateClientVpnTargetNetworkCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateDhcpOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateDhcpOptionsCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateDhcpOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateEnclaveCertificateIamRoleResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateIamInstanceProfileCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateIamInstanceProfileCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateIamInstanceProfileResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateIamInstanceProfileCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateInstanceEventWindowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateInstanceEventWindowCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateInstanceEventWindowResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateInstanceEventWindowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateRouteTableCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateRouteTableCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateRouteTableResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateRouteTableCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateSubnetCidrBlockCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateSubnetCidrBlockCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateSubnetCidrBlockResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateSubnetCidrBlockCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateTransitGatewayMulticastDomainResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateTransitGatewayRouteTableCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateTransitGatewayRouteTableCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateTransitGatewayRouteTableResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateTransitGatewayRouteTableCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateTrunkInterfaceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateTrunkInterfaceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateTrunkInterfaceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateTrunkInterfaceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AssociateVpcCidrBlockCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AssociateVpcCidrBlockCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AssociateVpcCidrBlockResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AssociateVpcCidrBlockCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AttachClassicLinkVpcCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AttachClassicLinkVpcCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AttachClassicLinkVpcResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AttachClassicLinkVpcCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AttachInternetGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AttachInternetGatewayCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AttachInternetGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AttachNetworkInterfaceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AttachNetworkInterfaceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AttachNetworkInterfaceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AttachNetworkInterfaceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AttachVolumeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AttachVolumeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2VolumeAttachment(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AttachVolumeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AttachVpnGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AttachVpnGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AttachVpnGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AttachVpnGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AuthorizeClientVpnIngressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AuthorizeClientVpnIngressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AuthorizeClientVpnIngressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AuthorizeClientVpnIngressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AuthorizeSecurityGroupEgressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AuthorizeSecurityGroupEgressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AuthorizeSecurityGroupEgressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AuthorizeSecurityGroupEgressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2AuthorizeSecurityGroupIngressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2AuthorizeSecurityGroupIngressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2AuthorizeSecurityGroupIngressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2AuthorizeSecurityGroupIngressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2BundleInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2BundleInstanceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2BundleInstanceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2BundleInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CancelBundleTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CancelBundleTaskCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CancelBundleTaskResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CancelBundleTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CancelCapacityReservationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CancelCapacityReservationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CancelCapacityReservationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CancelCapacityReservationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CancelCapacityReservationFleetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CancelCapacityReservationFleetsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CancelCapacityReservationFleetsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CancelCapacityReservationFleetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CancelConversionTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CancelConversionTaskCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CancelConversionTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CancelExportTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CancelExportTaskCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CancelExportTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CancelImportTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CancelImportTaskCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CancelImportTaskResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CancelImportTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CancelReservedInstancesListingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CancelReservedInstancesListingCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CancelReservedInstancesListingResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CancelReservedInstancesListingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CancelSpotFleetRequestsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CancelSpotFleetRequestsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CancelSpotFleetRequestsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CancelSpotFleetRequestsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CancelSpotInstanceRequestsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CancelSpotInstanceRequestsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CancelSpotInstanceRequestsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CancelSpotInstanceRequestsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ConfirmProductInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ConfirmProductInstanceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ConfirmProductInstanceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ConfirmProductInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CopyFpgaImageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CopyFpgaImageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CopyFpgaImageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CopyFpgaImageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CopyImageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CopyImageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CopyImageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CopyImageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CopySnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CopySnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CopySnapshotResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CopySnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateCapacityReservationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateCapacityReservationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateCapacityReservationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateCapacityReservationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateCapacityReservationFleetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateCapacityReservationFleetCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateCapacityReservationFleetResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateCapacityReservationFleetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateCarrierGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateCarrierGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateCarrierGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateCarrierGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateClientVpnEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateClientVpnEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateClientVpnEndpointResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateClientVpnEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateClientVpnRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateClientVpnRouteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateClientVpnRouteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateClientVpnRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateCustomerGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateCustomerGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateCustomerGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateCustomerGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateDefaultSubnetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateDefaultSubnetCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateDefaultSubnetResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateDefaultSubnetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateDefaultVpcCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateDefaultVpcCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateDefaultVpcResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateDefaultVpcCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateDhcpOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateDhcpOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateDhcpOptionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateDhcpOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateEgressOnlyInternetGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateEgressOnlyInternetGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateEgressOnlyInternetGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateEgressOnlyInternetGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateFleetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateFleetCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateFleetResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateFleetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateFlowLogsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateFlowLogsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateFlowLogsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateFlowLogsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateFpgaImageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateFpgaImageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateFpgaImageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateFpgaImageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateImageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateImageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateImageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateImageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateInstanceEventWindowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateInstanceEventWindowCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateInstanceEventWindowResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateInstanceEventWindowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateInstanceExportTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateInstanceExportTaskCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateInstanceExportTaskResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateInstanceExportTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateInternetGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateInternetGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateInternetGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateInternetGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateIpamCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateIpamCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateIpamResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateIpamCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateIpamPoolCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateIpamPoolCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateIpamPoolResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateIpamPoolCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateIpamScopeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateIpamScopeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateIpamScopeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateIpamScopeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateKeyPairCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateKeyPairCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2KeyPair(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateKeyPairCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateLaunchTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateLaunchTemplateCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateLaunchTemplateResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateLaunchTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateLaunchTemplateVersionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateLaunchTemplateVersionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateLaunchTemplateVersionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateLaunchTemplateVersionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateLocalGatewayRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateLocalGatewayRouteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateLocalGatewayRouteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateLocalGatewayRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateManagedPrefixListCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateManagedPrefixListCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateManagedPrefixListResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateManagedPrefixListCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateNatGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateNatGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateNatGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateNatGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateNetworkAclCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateNetworkAclCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateNetworkAclResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateNetworkAclCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateNetworkAclEntryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateNetworkAclEntryCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateNetworkAclEntryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateNetworkInsightsAccessScopeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateNetworkInsightsAccessScopeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateNetworkInsightsAccessScopeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateNetworkInsightsAccessScopeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateNetworkInsightsPathCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateNetworkInsightsPathCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateNetworkInsightsPathResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateNetworkInsightsPathCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateNetworkInterfaceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateNetworkInterfaceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateNetworkInterfaceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateNetworkInterfaceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateNetworkInterfacePermissionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateNetworkInterfacePermissionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateNetworkInterfacePermissionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateNetworkInterfacePermissionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreatePlacementGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreatePlacementGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreatePlacementGroupResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreatePlacementGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreatePublicIpv4PoolCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreatePublicIpv4PoolCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreatePublicIpv4PoolResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreatePublicIpv4PoolCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateReplaceRootVolumeTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateReplaceRootVolumeTaskCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateReplaceRootVolumeTaskResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateReplaceRootVolumeTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateReservedInstancesListingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateReservedInstancesListingCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateReservedInstancesListingResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateReservedInstancesListingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateRestoreImageTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateRestoreImageTaskCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateRestoreImageTaskResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateRestoreImageTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateRouteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateRouteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateRouteTableCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateRouteTableCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateRouteTableResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateRouteTableCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateSecurityGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateSecurityGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateSecurityGroupResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateSecurityGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2Snapshot(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateSnapshotsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateSnapshotsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateSnapshotsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateSnapshotsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateSpotDatafeedSubscriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateSpotDatafeedSubscriptionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateSpotDatafeedSubscriptionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateSpotDatafeedSubscriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateStoreImageTaskCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateStoreImageTaskCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateStoreImageTaskResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateStoreImageTaskCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateSubnetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateSubnetCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateSubnetResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateSubnetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateSubnetCidrReservationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateSubnetCidrReservationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateSubnetCidrReservationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateSubnetCidrReservationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTagsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTagsCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTagsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTrafficMirrorFilterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTrafficMirrorFilterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTrafficMirrorFilterResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTrafficMirrorFilterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTrafficMirrorFilterRuleCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTrafficMirrorFilterRuleCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTrafficMirrorFilterRuleResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTrafficMirrorFilterRuleCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTrafficMirrorSessionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTrafficMirrorSessionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTrafficMirrorSessionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTrafficMirrorSessionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTrafficMirrorTargetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTrafficMirrorTargetCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTrafficMirrorTargetResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTrafficMirrorTargetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTransitGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTransitGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTransitGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTransitGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTransitGatewayConnectCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTransitGatewayConnectCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTransitGatewayConnectResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTransitGatewayConnectCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTransitGatewayConnectPeerCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTransitGatewayConnectPeerCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTransitGatewayConnectPeerResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTransitGatewayConnectPeerCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTransitGatewayMulticastDomainCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTransitGatewayMulticastDomainCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTransitGatewayMulticastDomainResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTransitGatewayMulticastDomainCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTransitGatewayPeeringAttachmentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTransitGatewayPrefixListReferenceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTransitGatewayRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTransitGatewayRouteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTransitGatewayRouteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTransitGatewayRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTransitGatewayRouteTableCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTransitGatewayRouteTableCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTransitGatewayRouteTableResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTransitGatewayRouteTableCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateTransitGatewayVpcAttachmentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateVolumeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateVolumeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2Volume(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateVolumeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateVpcCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateVpcCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateVpcResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateVpcCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateVpcEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateVpcEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateVpcEndpointResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateVpcEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateVpcEndpointConnectionNotificationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateVpcEndpointServiceConfigurationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateVpcPeeringConnectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateVpcPeeringConnectionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateVpcPeeringConnectionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateVpcPeeringConnectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateVpnConnectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateVpnConnectionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateVpnConnectionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateVpnConnectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateVpnConnectionRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateVpnConnectionRouteCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateVpnConnectionRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2CreateVpnGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2CreateVpnGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2CreateVpnGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2CreateVpnGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteCarrierGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteCarrierGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteCarrierGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteCarrierGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteClientVpnEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteClientVpnEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteClientVpnEndpointResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteClientVpnEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteClientVpnRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteClientVpnRouteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteClientVpnRouteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteClientVpnRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteCustomerGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteCustomerGatewayCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteCustomerGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteDhcpOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteDhcpOptionsCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteDhcpOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteEgressOnlyInternetGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteFleetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteFleetsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteFleetsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteFleetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteFlowLogsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteFlowLogsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteFlowLogsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteFlowLogsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteFpgaImageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteFpgaImageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteFpgaImageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteFpgaImageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteInstanceEventWindowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteInstanceEventWindowCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteInstanceEventWindowResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteInstanceEventWindowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteInternetGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteInternetGatewayCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteInternetGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteIpamCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteIpamCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteIpamResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteIpamCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteIpamPoolCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteIpamPoolCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteIpamPoolResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteIpamPoolCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteIpamScopeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteIpamScopeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteIpamScopeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteIpamScopeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteKeyPairCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteKeyPairCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteKeyPairCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteLaunchTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteLaunchTemplateCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteLaunchTemplateResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteLaunchTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteLaunchTemplateVersionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteLaunchTemplateVersionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteLaunchTemplateVersionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteLaunchTemplateVersionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteLocalGatewayRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteLocalGatewayRouteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteLocalGatewayRouteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteLocalGatewayRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteManagedPrefixListCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteManagedPrefixListCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteManagedPrefixListResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteManagedPrefixListCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteNatGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteNatGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteNatGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteNatGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteNetworkAclCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteNetworkAclCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteNetworkAclCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteNetworkAclEntryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteNetworkAclEntryCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteNetworkAclEntryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteNetworkInsightsAccessScopeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteNetworkInsightsAnalysisCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteNetworkInsightsAnalysisCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteNetworkInsightsAnalysisResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteNetworkInsightsAnalysisCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteNetworkInsightsPathCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteNetworkInsightsPathCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteNetworkInsightsPathResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteNetworkInsightsPathCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteNetworkInterfaceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteNetworkInterfaceCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteNetworkInterfaceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteNetworkInterfacePermissionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteNetworkInterfacePermissionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteNetworkInterfacePermissionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteNetworkInterfacePermissionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeletePlacementGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeletePlacementGroupCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeletePlacementGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeletePublicIpv4PoolCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeletePublicIpv4PoolCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeletePublicIpv4PoolResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeletePublicIpv4PoolCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteQueuedReservedInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteQueuedReservedInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteQueuedReservedInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteQueuedReservedInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteRouteCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteRouteTableCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteRouteTableCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteRouteTableCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteSecurityGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteSecurityGroupCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteSecurityGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteSnapshotCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteSubnetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteSubnetCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteSubnetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteSubnetCidrReservationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteSubnetCidrReservationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteSubnetCidrReservationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteSubnetCidrReservationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTagsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTagsCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTagsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTrafficMirrorFilterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTrafficMirrorFilterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTrafficMirrorFilterResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTrafficMirrorFilterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTrafficMirrorFilterRuleResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTrafficMirrorSessionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTrafficMirrorSessionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTrafficMirrorSessionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTrafficMirrorSessionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTrafficMirrorTargetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTrafficMirrorTargetCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTrafficMirrorTargetResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTrafficMirrorTargetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTransitGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTransitGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTransitGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTransitGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTransitGatewayConnectCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTransitGatewayConnectCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTransitGatewayConnectResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTransitGatewayConnectCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTransitGatewayConnectPeerCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTransitGatewayConnectPeerCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTransitGatewayConnectPeerResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTransitGatewayConnectPeerCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTransitGatewayMulticastDomainResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTransitGatewayRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTransitGatewayRouteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTransitGatewayRouteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTransitGatewayRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTransitGatewayRouteTableCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTransitGatewayRouteTableCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTransitGatewayRouteTableResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTransitGatewayRouteTableCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteTransitGatewayVpcAttachmentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteVolumeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteVolumeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteVolumeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteVpcCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteVpcCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteVpcCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteVpcEndpointsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteVpcEndpointsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteVpcEndpointsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteVpcEndpointsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteVpcPeeringConnectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteVpcPeeringConnectionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeleteVpcPeeringConnectionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteVpcPeeringConnectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteVpnConnectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteVpnConnectionCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteVpnConnectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteVpnConnectionRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteVpnConnectionRouteCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteVpnConnectionRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeleteVpnGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeleteVpnGatewayCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeleteVpnGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeprovisionByoipCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeprovisionByoipCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeprovisionByoipCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeprovisionByoipCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeprovisionIpamPoolCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeprovisionIpamPoolCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeprovisionIpamPoolCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeprovisionIpamPoolCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeprovisionPublicIpv4PoolCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeregisterImageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeregisterImageCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeregisterImageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeregisterInstanceEventNotificationAttributesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeAccountAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeAccountAttributesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeAccountAttributesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeAccountAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeAddressesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeAddressesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeAddressesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeAddressesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeAddressesAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeAddressesAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeAddressesAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeAddressesAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeAggregateIdFormatCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeAggregateIdFormatCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeAggregateIdFormatResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeAggregateIdFormatCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeAvailabilityZonesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeAvailabilityZonesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeAvailabilityZonesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeAvailabilityZonesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeBundleTasksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeBundleTasksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeBundleTasksResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeBundleTasksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeByoipCidrsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeByoipCidrsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeByoipCidrsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeByoipCidrsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeCapacityReservationFleetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeCapacityReservationFleetsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeCapacityReservationFleetsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeCapacityReservationFleetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeCapacityReservationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeCapacityReservationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeCapacityReservationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeCapacityReservationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeCarrierGatewaysCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeCarrierGatewaysCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeCarrierGatewaysResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeCarrierGatewaysCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeClassicLinkInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeClassicLinkInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeClassicLinkInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeClassicLinkInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeClientVpnAuthorizationRulesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeClientVpnConnectionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeClientVpnConnectionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeClientVpnConnectionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeClientVpnConnectionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeClientVpnEndpointsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeClientVpnEndpointsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeClientVpnEndpointsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeClientVpnEndpointsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeClientVpnRoutesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeClientVpnRoutesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeClientVpnRoutesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeClientVpnRoutesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeClientVpnTargetNetworksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeClientVpnTargetNetworksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeClientVpnTargetNetworksResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeClientVpnTargetNetworksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeCoipPoolsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeCoipPoolsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeCoipPoolsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeCoipPoolsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeConversionTasksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeConversionTasksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeConversionTasksResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeConversionTasksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeCustomerGatewaysCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeCustomerGatewaysCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeCustomerGatewaysResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeCustomerGatewaysCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeDhcpOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeDhcpOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeDhcpOptionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeDhcpOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeEgressOnlyInternetGatewaysResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeElasticGpusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeElasticGpusCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeElasticGpusResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeElasticGpusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeExportImageTasksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeExportImageTasksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeExportImageTasksResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeExportImageTasksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeExportTasksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeExportTasksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeExportTasksResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeExportTasksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeFastLaunchImagesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeFastLaunchImagesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeFastLaunchImagesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeFastLaunchImagesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeFastSnapshotRestoresCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeFastSnapshotRestoresCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeFastSnapshotRestoresResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeFastSnapshotRestoresCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeFleetHistoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeFleetHistoryCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeFleetHistoryResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeFleetHistoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeFleetInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeFleetInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeFleetInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeFleetInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeFleetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeFleetsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeFleetsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeFleetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeFlowLogsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeFlowLogsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeFlowLogsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeFlowLogsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeFpgaImageAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeFpgaImageAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeFpgaImageAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeFpgaImageAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeFpgaImagesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeFpgaImagesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeFpgaImagesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeFpgaImagesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeHostReservationOfferingsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeHostReservationOfferingsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeHostReservationOfferingsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeHostReservationOfferingsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeHostReservationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeHostReservationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeHostReservationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeHostReservationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeHostsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeHostsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeHostsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeHostsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeIamInstanceProfileAssociationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeIdentityIdFormatCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeIdentityIdFormatCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeIdentityIdFormatResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeIdentityIdFormatCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeIdFormatCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeIdFormatCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeIdFormatResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeIdFormatCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeImageAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeImageAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ImageAttribute(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeImageAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeImagesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeImagesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeImagesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeImagesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeImportImageTasksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeImportImageTasksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeImportImageTasksResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeImportImageTasksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeImportSnapshotTasksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeImportSnapshotTasksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeImportSnapshotTasksResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeImportSnapshotTasksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeInstanceAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeInstanceAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2InstanceAttribute(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeInstanceAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeInstanceCreditSpecificationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeInstanceCreditSpecificationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeInstanceCreditSpecificationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeInstanceCreditSpecificationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeInstanceEventNotificationAttributesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeInstanceEventWindowsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeInstanceEventWindowsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeInstanceEventWindowsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeInstanceEventWindowsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeInstanceStatusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeInstanceStatusCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeInstanceStatusResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeInstanceStatusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeInstanceTypeOfferingsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeInstanceTypeOfferingsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeInstanceTypeOfferingsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeInstanceTypeOfferingsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeInstanceTypesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeInstanceTypesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeInstanceTypesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeInstanceTypesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeInternetGatewaysCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeInternetGatewaysCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeInternetGatewaysResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeInternetGatewaysCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeIpamPoolsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeIpamPoolsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeIpamPoolsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeIpamPoolsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeIpamsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeIpamsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeIpamsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeIpamsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeIpamScopesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeIpamScopesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeIpamScopesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeIpamScopesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeIpv6PoolsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeIpv6PoolsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeIpv6PoolsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeIpv6PoolsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeKeyPairsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeKeyPairsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeKeyPairsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeKeyPairsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeLaunchTemplatesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeLaunchTemplatesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeLaunchTemplatesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeLaunchTemplatesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeLaunchTemplateVersionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeLaunchTemplateVersionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeLaunchTemplateVersionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeLaunchTemplateVersionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeLocalGatewayRouteTablesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeLocalGatewayRouteTablesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeLocalGatewayRouteTablesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeLocalGatewayRouteTablesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeLocalGatewaysCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeLocalGatewaysCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeLocalGatewaysResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeLocalGatewaysCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeManagedPrefixListsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeManagedPrefixListsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeManagedPrefixListsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeManagedPrefixListsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeMovingAddressesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeMovingAddressesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeMovingAddressesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeMovingAddressesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeNatGatewaysCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeNatGatewaysCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeNatGatewaysResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeNatGatewaysCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeNetworkAclsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeNetworkAclsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeNetworkAclsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeNetworkAclsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeNetworkInsightsAccessScopesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeNetworkInsightsAnalysesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeNetworkInsightsAnalysesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeNetworkInsightsAnalysesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeNetworkInsightsAnalysesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeNetworkInsightsPathsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeNetworkInsightsPathsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeNetworkInsightsPathsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeNetworkInsightsPathsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeNetworkInterfaceAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeNetworkInterfaceAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeNetworkInterfaceAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeNetworkInterfaceAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeNetworkInterfacePermissionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeNetworkInterfacePermissionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeNetworkInterfacePermissionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeNetworkInterfacePermissionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeNetworkInterfacesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeNetworkInterfacesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeNetworkInterfacesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeNetworkInterfacesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribePlacementGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribePlacementGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribePlacementGroupsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribePlacementGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribePrefixListsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribePrefixListsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribePrefixListsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribePrefixListsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribePrincipalIdFormatCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribePrincipalIdFormatCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribePrincipalIdFormatResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribePrincipalIdFormatCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribePublicIpv4PoolsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribePublicIpv4PoolsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribePublicIpv4PoolsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribePublicIpv4PoolsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeRegionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeRegionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeRegionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeRegionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeReplaceRootVolumeTasksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeReplaceRootVolumeTasksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeReplaceRootVolumeTasksResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeReplaceRootVolumeTasksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeReservedInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeReservedInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeReservedInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeReservedInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeReservedInstancesListingsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeReservedInstancesListingsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeReservedInstancesListingsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeReservedInstancesListingsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeReservedInstancesModificationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeReservedInstancesModificationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeReservedInstancesModificationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeReservedInstancesModificationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeReservedInstancesOfferingsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeReservedInstancesOfferingsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeReservedInstancesOfferingsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeReservedInstancesOfferingsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeRouteTablesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeRouteTablesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeRouteTablesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeRouteTablesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeScheduledInstanceAvailabilityResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeScheduledInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeScheduledInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeScheduledInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeScheduledInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSecurityGroupReferencesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSecurityGroupReferencesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSecurityGroupReferencesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSecurityGroupReferencesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSecurityGroupRulesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSecurityGroupRulesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSecurityGroupRulesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSecurityGroupRulesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSecurityGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSecurityGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSecurityGroupsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSecurityGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSnapshotAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSnapshotAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSnapshotAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSnapshotAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSnapshotsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSnapshotsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSnapshotsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSnapshotsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSnapshotTierStatusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSnapshotTierStatusCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSnapshotTierStatusResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSnapshotTierStatusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSpotDatafeedSubscriptionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSpotFleetInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSpotFleetInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSpotFleetInstancesResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSpotFleetInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSpotFleetRequestHistoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSpotFleetRequestHistoryCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSpotFleetRequestHistoryResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSpotFleetRequestHistoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSpotFleetRequestsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSpotFleetRequestsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSpotFleetRequestsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSpotFleetRequestsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSpotInstanceRequestsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSpotInstanceRequestsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSpotInstanceRequestsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSpotInstanceRequestsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSpotPriceHistoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSpotPriceHistoryCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSpotPriceHistoryResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSpotPriceHistoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeStaleSecurityGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeStaleSecurityGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeStaleSecurityGroupsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeStaleSecurityGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeStoreImageTasksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeStoreImageTasksCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeStoreImageTasksResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeStoreImageTasksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeSubnetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeSubnetsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeSubnetsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeSubnetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTagsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTagsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTagsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTagsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTrafficMirrorFiltersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTrafficMirrorFiltersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTrafficMirrorFiltersResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTrafficMirrorFiltersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTrafficMirrorSessionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTrafficMirrorSessionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTrafficMirrorSessionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTrafficMirrorSessionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTrafficMirrorTargetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTrafficMirrorTargetsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTrafficMirrorTargetsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTrafficMirrorTargetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTransitGatewayAttachmentsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTransitGatewayAttachmentsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTransitGatewayAttachmentsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTransitGatewayAttachmentsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTransitGatewayConnectPeersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTransitGatewayConnectPeersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTransitGatewayConnectPeersResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTransitGatewayConnectPeersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTransitGatewayConnectsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTransitGatewayConnectsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTransitGatewayConnectsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTransitGatewayConnectsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTransitGatewayMulticastDomainsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTransitGatewayRouteTablesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTransitGatewayRouteTablesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTransitGatewayRouteTablesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTransitGatewayRouteTablesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTransitGatewaysCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTransitGatewaysCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTransitGatewaysResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTransitGatewaysCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeTrunkInterfaceAssociationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVolumeAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVolumeAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVolumeAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVolumeAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVolumesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVolumesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVolumesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVolumesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVolumesModificationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVolumesModificationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVolumesModificationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVolumesModificationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVolumeStatusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVolumeStatusCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVolumeStatusResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVolumeStatusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcClassicLinkCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcClassicLinkCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcClassicLinkResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcClassicLinkCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcClassicLinkDnsSupportResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcEndpointConnectionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcEndpointConnectionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcEndpointConnectionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcEndpointConnectionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcEndpointsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcEndpointsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcEndpointsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcEndpointsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcEndpointServicePermissionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcEndpointServicesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcEndpointServicesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcEndpointServicesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcEndpointServicesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcPeeringConnectionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcPeeringConnectionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcPeeringConnectionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcPeeringConnectionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpcsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpcsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpcsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpcsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpnConnectionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpnConnectionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpnConnectionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpnConnectionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DescribeVpnGatewaysCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DescribeVpnGatewaysCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DescribeVpnGatewaysResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DescribeVpnGatewaysCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DetachClassicLinkVpcCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DetachClassicLinkVpcCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DetachClassicLinkVpcResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DetachClassicLinkVpcCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DetachInternetGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DetachInternetGatewayCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DetachInternetGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DetachNetworkInterfaceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DetachNetworkInterfaceCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DetachNetworkInterfaceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DetachVolumeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DetachVolumeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2VolumeAttachment(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DetachVolumeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DetachVpnGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DetachVpnGatewayCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DetachVpnGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableEbsEncryptionByDefaultCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableEbsEncryptionByDefaultCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisableEbsEncryptionByDefaultResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableEbsEncryptionByDefaultCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableFastLaunchCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableFastLaunchCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisableFastLaunchResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableFastLaunchCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableFastSnapshotRestoresCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableFastSnapshotRestoresCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisableFastSnapshotRestoresResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableFastSnapshotRestoresCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableImageDeprecationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableImageDeprecationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisableImageDeprecationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableImageDeprecationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableIpamOrganizationAdminAccountCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableIpamOrganizationAdminAccountCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisableIpamOrganizationAdminAccountResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableIpamOrganizationAdminAccountCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableSerialConsoleAccessCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableSerialConsoleAccessCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisableSerialConsoleAccessResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableSerialConsoleAccessCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisableTransitGatewayRouteTablePropagationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableVgwRoutePropagationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableVgwRoutePropagationCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableVgwRoutePropagationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableVpcClassicLinkCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableVpcClassicLinkCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisableVpcClassicLinkResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableVpcClassicLinkCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisableVpcClassicLinkDnsSupportResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateAddressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateAddressCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateAddressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateClientVpnTargetNetworkCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateClientVpnTargetNetworkCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisassociateClientVpnTargetNetworkResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateClientVpnTargetNetworkCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisassociateEnclaveCertificateIamRoleResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateIamInstanceProfileCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateIamInstanceProfileCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisassociateIamInstanceProfileResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateIamInstanceProfileCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateInstanceEventWindowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateInstanceEventWindowCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisassociateInstanceEventWindowResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateInstanceEventWindowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateRouteTableCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateRouteTableCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateRouteTableCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateSubnetCidrBlockCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateSubnetCidrBlockCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisassociateSubnetCidrBlockResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateSubnetCidrBlockCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisassociateTransitGatewayMulticastDomainResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateTransitGatewayRouteTableCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateTransitGatewayRouteTableCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisassociateTransitGatewayRouteTableResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateTransitGatewayRouteTableCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateTrunkInterfaceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateTrunkInterfaceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisassociateTrunkInterfaceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateTrunkInterfaceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2DisassociateVpcCidrBlockCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2DisassociateVpcCidrBlockCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2DisassociateVpcCidrBlockResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2DisassociateVpcCidrBlockCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableEbsEncryptionByDefaultCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableEbsEncryptionByDefaultCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2EnableEbsEncryptionByDefaultResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableEbsEncryptionByDefaultCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableFastLaunchCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableFastLaunchCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2EnableFastLaunchResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableFastLaunchCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableFastSnapshotRestoresCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableFastSnapshotRestoresCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2EnableFastSnapshotRestoresResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableFastSnapshotRestoresCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableImageDeprecationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableImageDeprecationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2EnableImageDeprecationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableImageDeprecationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableIpamOrganizationAdminAccountCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableIpamOrganizationAdminAccountCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2EnableIpamOrganizationAdminAccountResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableIpamOrganizationAdminAccountCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableSerialConsoleAccessCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableSerialConsoleAccessCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2EnableSerialConsoleAccessResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableSerialConsoleAccessCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2EnableTransitGatewayRouteTablePropagationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableVgwRoutePropagationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableVgwRoutePropagationCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableVgwRoutePropagationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableVolumeIOCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableVolumeIOCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableVolumeIOCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableVpcClassicLinkCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableVpcClassicLinkCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2EnableVpcClassicLinkResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableVpcClassicLinkCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2EnableVpcClassicLinkDnsSupportResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ExportClientVpnClientCertificateRevocationListResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ExportClientVpnClientConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ExportClientVpnClientConfigurationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ExportClientVpnClientConfigurationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ExportClientVpnClientConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ExportImageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ExportImageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ExportImageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ExportImageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ExportTransitGatewayRoutesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ExportTransitGatewayRoutesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ExportTransitGatewayRoutesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ExportTransitGatewayRoutesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetAssociatedIpv6PoolCidrsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetCapacityReservationUsageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetCapacityReservationUsageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetCapacityReservationUsageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetCapacityReservationUsageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetCoipPoolUsageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetCoipPoolUsageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetCoipPoolUsageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetCoipPoolUsageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetConsoleOutputCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetConsoleOutputCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetConsoleOutputResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetConsoleOutputCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetConsoleScreenshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetConsoleScreenshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetConsoleScreenshotResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetConsoleScreenshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetDefaultCreditSpecificationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetDefaultCreditSpecificationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetDefaultCreditSpecificationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetDefaultCreditSpecificationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetEbsDefaultKmsKeyIdCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetEbsDefaultKmsKeyIdCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetEbsDefaultKmsKeyIdResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetEbsDefaultKmsKeyIdCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetEbsEncryptionByDefaultCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetEbsEncryptionByDefaultCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetEbsEncryptionByDefaultResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetEbsEncryptionByDefaultCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetFlowLogsIntegrationTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetFlowLogsIntegrationTemplateCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetFlowLogsIntegrationTemplateResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetFlowLogsIntegrationTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetGroupsForCapacityReservationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetGroupsForCapacityReservationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetGroupsForCapacityReservationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetGroupsForCapacityReservationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetHostReservationPurchasePreviewCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetHostReservationPurchasePreviewCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetHostReservationPurchasePreviewResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetHostReservationPurchasePreviewCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetInstanceUefiDataCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetInstanceUefiDataCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetInstanceUefiDataResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetInstanceUefiDataCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetIpamAddressHistoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetIpamAddressHistoryCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetIpamAddressHistoryResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetIpamAddressHistoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetIpamPoolAllocationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetIpamPoolAllocationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetIpamPoolAllocationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetIpamPoolAllocationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetIpamPoolCidrsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetIpamPoolCidrsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetIpamPoolCidrsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetIpamPoolCidrsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetIpamResourceCidrsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetIpamResourceCidrsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetIpamResourceCidrsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetIpamResourceCidrsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetLaunchTemplateDataCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetLaunchTemplateDataCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetLaunchTemplateDataResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetLaunchTemplateDataCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetManagedPrefixListAssociationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetManagedPrefixListAssociationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetManagedPrefixListAssociationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetManagedPrefixListAssociationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetManagedPrefixListEntriesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetManagedPrefixListEntriesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetManagedPrefixListEntriesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetManagedPrefixListEntriesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetNetworkInsightsAccessScopeContentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetPasswordDataCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetPasswordDataCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetPasswordDataResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetPasswordDataCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetReservedInstancesExchangeQuoteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetReservedInstancesExchangeQuoteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetReservedInstancesExchangeQuoteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetReservedInstancesExchangeQuoteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetSerialConsoleAccessStatusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetSerialConsoleAccessStatusCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetSerialConsoleAccessStatusResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetSerialConsoleAccessStatusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetSpotPlacementScoresCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetSpotPlacementScoresCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetSpotPlacementScoresResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetSpotPlacementScoresCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetSubnetCidrReservationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetSubnetCidrReservationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetSubnetCidrReservationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetSubnetCidrReservationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetTransitGatewayAttachmentPropagationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetTransitGatewayPrefixListReferencesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetTransitGatewayRouteTableAssociationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetTransitGatewayRouteTablePropagationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2GetVpnConnectionDeviceTypesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2GetVpnConnectionDeviceTypesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2GetVpnConnectionDeviceTypesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2GetVpnConnectionDeviceTypesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ImportClientVpnClientCertificateRevocationListResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ImportImageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ImportImageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ImportImageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ImportImageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ImportInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ImportInstanceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ImportInstanceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ImportInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ImportKeyPairCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ImportKeyPairCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ImportKeyPairResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ImportKeyPairCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ImportSnapshotCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ImportSnapshotCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ImportSnapshotResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ImportSnapshotCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ImportVolumeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ImportVolumeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ImportVolumeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ImportVolumeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ListImagesInRecycleBinCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ListImagesInRecycleBinCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ListImagesInRecycleBinResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ListImagesInRecycleBinCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ListSnapshotsInRecycleBinCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ListSnapshotsInRecycleBinCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ListSnapshotsInRecycleBinResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ListSnapshotsInRecycleBinCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyAddressAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyAddressAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyAddressAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyAddressAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyAvailabilityZoneGroupCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyAvailabilityZoneGroupCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyAvailabilityZoneGroupResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyAvailabilityZoneGroupCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyCapacityReservationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyCapacityReservationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyCapacityReservationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyCapacityReservationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyCapacityReservationFleetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyCapacityReservationFleetCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyCapacityReservationFleetResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyCapacityReservationFleetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyClientVpnEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyClientVpnEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyClientVpnEndpointResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyClientVpnEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyDefaultCreditSpecificationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyDefaultCreditSpecificationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyDefaultCreditSpecificationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyDefaultCreditSpecificationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyEbsDefaultKmsKeyIdResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyFleetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyFleetCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyFleetResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyFleetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyFpgaImageAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyFpgaImageAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyFpgaImageAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyFpgaImageAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyHostsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyHostsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyHostsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyHostsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyIdentityIdFormatCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyIdentityIdFormatCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyIdentityIdFormatCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyIdFormatCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyIdFormatCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyIdFormatCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyImageAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyImageAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyImageAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyInstanceAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyInstanceAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyInstanceAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyInstanceCapacityReservationAttributesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyInstanceCreditSpecificationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyInstanceCreditSpecificationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyInstanceCreditSpecificationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyInstanceCreditSpecificationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyInstanceEventStartTimeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyInstanceEventStartTimeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyInstanceEventStartTimeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyInstanceEventStartTimeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyInstanceEventWindowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyInstanceEventWindowCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyInstanceEventWindowResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyInstanceEventWindowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyInstanceMaintenanceOptionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyInstanceMetadataOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyInstanceMetadataOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyInstanceMetadataOptionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyInstanceMetadataOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyInstancePlacementCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyInstancePlacementCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyInstancePlacementResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyInstancePlacementCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyIpamCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyIpamCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyIpamResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyIpamCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyIpamPoolCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyIpamPoolCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyIpamPoolResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyIpamPoolCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyIpamResourceCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyIpamResourceCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyIpamResourceCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyIpamResourceCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyIpamScopeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyIpamScopeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyIpamScopeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyIpamScopeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyLaunchTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyLaunchTemplateCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyLaunchTemplateResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyLaunchTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyManagedPrefixListCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyManagedPrefixListCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyManagedPrefixListResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyManagedPrefixListCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyNetworkInterfaceAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyNetworkInterfaceAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyNetworkInterfaceAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyPrivateDnsNameOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyPrivateDnsNameOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyPrivateDnsNameOptionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyPrivateDnsNameOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyReservedInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyReservedInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyReservedInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyReservedInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifySecurityGroupRulesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifySecurityGroupRulesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifySecurityGroupRulesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifySecurityGroupRulesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifySnapshotAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifySnapshotAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifySnapshotAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifySnapshotTierCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifySnapshotTierCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifySnapshotTierResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifySnapshotTierCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifySpotFleetRequestCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifySpotFleetRequestCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifySpotFleetRequestResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifySpotFleetRequestCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifySubnetAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifySubnetAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifySubnetAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyTrafficMirrorFilterRuleResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyTrafficMirrorSessionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyTrafficMirrorSessionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyTrafficMirrorSessionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyTrafficMirrorSessionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyTransitGatewayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyTransitGatewayCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyTransitGatewayResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyTransitGatewayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyTransitGatewayVpcAttachmentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVolumeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVolumeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVolumeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVolumeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVolumeAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVolumeAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVolumeAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpcAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpcAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpcAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpcEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpcEndpointCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpcEndpointResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpcEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpcEndpointConnectionNotificationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpcEndpointServiceConfigurationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpcEndpointServicePermissionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpcPeeringConnectionOptionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpcTenancyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpcTenancyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpcTenancyResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpcTenancyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpnConnectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpnConnectionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpnConnectionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpnConnectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpnConnectionOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpnConnectionOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpnConnectionOptionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpnConnectionOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpnTunnelCertificateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpnTunnelCertificateCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpnTunnelCertificateResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpnTunnelCertificateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ModifyVpnTunnelOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ModifyVpnTunnelOptionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ModifyVpnTunnelOptionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ModifyVpnTunnelOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2MonitorInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2MonitorInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2MonitorInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2MonitorInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2MoveAddressToVpcCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2MoveAddressToVpcCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2MoveAddressToVpcResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2MoveAddressToVpcCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2MoveByoipCidrToIpamCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2MoveByoipCidrToIpamCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2MoveByoipCidrToIpamResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2MoveByoipCidrToIpamCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ProvisionByoipCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ProvisionByoipCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ProvisionByoipCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ProvisionByoipCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ProvisionIpamPoolCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ProvisionIpamPoolCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ProvisionIpamPoolCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ProvisionIpamPoolCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ProvisionPublicIpv4PoolCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2PurchaseHostReservationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2PurchaseHostReservationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2PurchaseHostReservationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2PurchaseHostReservationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2PurchaseReservedInstancesOfferingCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2PurchaseReservedInstancesOfferingCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2PurchaseReservedInstancesOfferingResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2PurchaseReservedInstancesOfferingCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2PurchaseScheduledInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2PurchaseScheduledInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2PurchaseScheduledInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2PurchaseScheduledInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RebootInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RebootInstancesCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RebootInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RegisterImageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RegisterImageCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RegisterImageResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RegisterImageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RegisterInstanceEventNotificationAttributesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RejectTransitGatewayPeeringAttachmentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RejectTransitGatewayVpcAttachmentResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RejectVpcEndpointConnectionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RejectVpcEndpointConnectionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RejectVpcEndpointConnectionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RejectVpcEndpointConnectionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RejectVpcPeeringConnectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RejectVpcPeeringConnectionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RejectVpcPeeringConnectionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RejectVpcPeeringConnectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReleaseAddressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReleaseAddressCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReleaseAddressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReleaseHostsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReleaseHostsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ReleaseHostsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReleaseHostsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReleaseIpamPoolAllocationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReleaseIpamPoolAllocationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ReleaseIpamPoolAllocationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReleaseIpamPoolAllocationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ReplaceIamInstanceProfileAssociationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReplaceNetworkAclAssociationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReplaceNetworkAclAssociationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ReplaceNetworkAclAssociationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReplaceNetworkAclAssociationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReplaceNetworkAclEntryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReplaceNetworkAclEntryCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReplaceNetworkAclEntryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReplaceRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReplaceRouteCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReplaceRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReplaceRouteTableAssociationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReplaceRouteTableAssociationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ReplaceRouteTableAssociationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReplaceRouteTableAssociationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReplaceTransitGatewayRouteCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReplaceTransitGatewayRouteCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ReplaceTransitGatewayRouteResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReplaceTransitGatewayRouteCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ReportInstanceStatusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ReportInstanceStatusCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ReportInstanceStatusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RequestSpotFleetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RequestSpotFleetCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RequestSpotFleetResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RequestSpotFleetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RequestSpotInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RequestSpotInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RequestSpotInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RequestSpotInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ResetAddressAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ResetAddressAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ResetAddressAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ResetAddressAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ResetEbsDefaultKmsKeyIdResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ResetFpgaImageAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ResetFpgaImageAttributeCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2ResetFpgaImageAttributeResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ResetFpgaImageAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ResetImageAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ResetImageAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ResetImageAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ResetInstanceAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ResetInstanceAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ResetInstanceAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ResetNetworkInterfaceAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ResetNetworkInterfaceAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ResetNetworkInterfaceAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2ResetSnapshotAttributeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2ResetSnapshotAttributeCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2ResetSnapshotAttributeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RestoreAddressToClassicCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RestoreAddressToClassicCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RestoreAddressToClassicResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RestoreAddressToClassicCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RestoreImageFromRecycleBinCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RestoreImageFromRecycleBinCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RestoreImageFromRecycleBinResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RestoreImageFromRecycleBinCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RestoreManagedPrefixListVersionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RestoreManagedPrefixListVersionCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RestoreManagedPrefixListVersionResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RestoreManagedPrefixListVersionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RestoreSnapshotFromRecycleBinCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RestoreSnapshotFromRecycleBinCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RestoreSnapshotFromRecycleBinResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RestoreSnapshotFromRecycleBinCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RestoreSnapshotTierCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RestoreSnapshotTierCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RestoreSnapshotTierResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RestoreSnapshotTierCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RevokeClientVpnIngressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RevokeClientVpnIngressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RevokeClientVpnIngressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RevokeClientVpnIngressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RevokeSecurityGroupEgressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RevokeSecurityGroupEgressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RevokeSecurityGroupEgressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RevokeSecurityGroupEgressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RevokeSecurityGroupIngressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RevokeSecurityGroupIngressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RevokeSecurityGroupIngressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RevokeSecurityGroupIngressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RunInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RunInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2Reservation(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RunInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2RunScheduledInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2RunScheduledInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2RunScheduledInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2RunScheduledInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2SearchLocalGatewayRoutesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2SearchLocalGatewayRoutesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2SearchLocalGatewayRoutesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2SearchLocalGatewayRoutesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2SearchTransitGatewayMulticastGroupsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2SearchTransitGatewayRoutesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2SearchTransitGatewayRoutesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2SearchTransitGatewayRoutesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2SearchTransitGatewayRoutesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2SendDiagnosticInterruptCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2SendDiagnosticInterruptCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2SendDiagnosticInterruptCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2StartInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2StartInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2StartInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2StartInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2StartNetworkInsightsAnalysisCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2StartNetworkInsightsAnalysisCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2StartNetworkInsightsAnalysisResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2StartNetworkInsightsAnalysisCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2StopInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2StopInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2StopInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2StopInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2TerminateClientVpnConnectionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2TerminateClientVpnConnectionsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2TerminateClientVpnConnectionsResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2TerminateClientVpnConnectionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2TerminateInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2TerminateInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2TerminateInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2TerminateInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2UnassignIpv6AddressesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2UnassignIpv6AddressesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2UnassignIpv6AddressesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2UnassignIpv6AddressesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2UnassignPrivateIpAddressesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2UnassignPrivateIpAddressesCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2UnassignPrivateIpAddressesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2UnmonitorInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2UnmonitorInstancesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2UnmonitorInstancesResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2UnmonitorInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
export var deserializeAws_ec2WithdrawByoipCidrCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_ec2WithdrawByoipCidrCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_ec2WithdrawByoipCidrResult(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_ec2WithdrawByoipCidrCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = "UnknownError";
                errorCode = loadEc2ErrorCode(output, parsedOutput.body);
                switch (errorCode) {
                    default:
                        parsedBody = parsedOutput.body;
                        response = new __BaseException({
                            name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                            $fault: "client",
                            $metadata: deserializeMetadata(output),
                        });
                        throw __decorateServiceException(response, parsedBody.Errors.Error);
                }
                return [2];
        }
    });
}); };
var serializeAws_ec2AcceleratorCount = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2AcceleratorCountRequest = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2AcceleratorManufacturerSet = function (input, context) {
    var e_1, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return entries;
};
var serializeAws_ec2AcceleratorNameSet = function (input, context) {
    var e_2, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
            var entry = input_2_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return entries;
};
var serializeAws_ec2AcceleratorTotalMemoryMiB = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2AcceleratorTotalMemoryMiBRequest = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2AcceleratorTypeSet = function (input, context) {
    var e_3, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_3 = __values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
            var entry = input_3_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (input_3_1 && !input_3_1.done && (_a = input_3.return)) _a.call(input_3);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return entries;
};
var serializeAws_ec2AcceptReservedInstancesExchangeQuoteRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReservedInstanceIds !== undefined && input.ReservedInstanceIds !== null) {
        var memberEntries = serializeAws_ec2ReservedInstanceIdSet(input.ReservedInstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReservedInstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TargetConfigurations !== undefined && input.TargetConfigurations !== null) {
        var memberEntries = serializeAws_ec2TargetConfigurationRequestSet(input.TargetConfigurations, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TargetConfiguration.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SubnetIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AcceptTransitGatewayPeeringAttachmentRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AcceptTransitGatewayVpcAttachmentRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AcceptVpcEndpointConnectionsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcEndpointId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2AcceptVpcPeeringConnectionRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
var serializeAws_ec2AccessScopePathListRequest = function (input, context) {
    var e_4, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_4 = __values(input), input_4_1 = input_4.next(); !input_4_1.done; input_4_1 = input_4.next()) {
            var entry = input_4_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2AccessScopePathRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (input_4_1 && !input_4_1.done && (_a = input_4.return)) _a.call(input_4);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return entries;
};
var serializeAws_ec2AccessScopePathRequest = function (input, context) {
    var entries = {};
    if (input.Source !== undefined && input.Source !== null) {
        var memberEntries = serializeAws_ec2PathStatementRequest(input.Source, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Source.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Destination !== undefined && input.Destination !== null) {
        var memberEntries = serializeAws_ec2PathStatementRequest(input.Destination, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Destination.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ThroughResources !== undefined && input.ThroughResources !== null) {
        var memberEntries = serializeAws_ec2ThroughResourcesStatementRequestList(input.ThroughResources, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ThroughResource.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2AccountAttributeNameStringList = function (input, context) {
    var e_5, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_5 = __values(input), input_5_1 = input_5.next(); !input_5_1.done; input_5_1 = input_5.next()) {
            var entry = input_5_1.value;
            if (entry === null) {
                continue;
            }
            entries["AttributeName.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (input_5_1 && !input_5_1.done && (_a = input_5.return)) _a.call(input_5);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return entries;
};
var serializeAws_ec2AddIpamOperatingRegion = function (input, context) {
    var entries = {};
    if (input.RegionName !== undefined && input.RegionName !== null) {
        entries["RegionName"] = input.RegionName;
    }
    return entries;
};
var serializeAws_ec2AddIpamOperatingRegionSet = function (input, context) {
    var e_6, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_6 = __values(input), input_6_1 = input_6.next(); !input_6_1.done; input_6_1 = input_6.next()) {
            var entry = input_6_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2AddIpamOperatingRegion(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Member.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (input_6_1 && !input_6_1.done && (_a = input_6.return)) _a.call(input_6);
        }
        finally { if (e_6) throw e_6.error; }
    }
    return entries;
};
var serializeAws_ec2AddPrefixListEntries = function (input, context) {
    var e_7, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_7 = __values(input), input_7_1 = input_7.next(); !input_7_1.done; input_7_1 = input_7.next()) {
            var entry = input_7_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2AddPrefixListEntry(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Member.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (input_7_1 && !input_7_1.done && (_a = input_7.return)) _a.call(input_7);
        }
        finally { if (e_7) throw e_7.error; }
    }
    return entries;
};
var serializeAws_ec2AddPrefixListEntry = function (input, context) {
    var entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
var serializeAws_ec2AdvertiseByoipCidrRequest = function (input, context) {
    var entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AllocateAddressRequest = function (input, context) {
    var entries = {};
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.Address !== undefined && input.Address !== null) {
        entries["Address"] = input.Address;
    }
    if (input.PublicIpv4Pool !== undefined && input.PublicIpv4Pool !== null) {
        entries["PublicIpv4Pool"] = input.PublicIpv4Pool;
    }
    if (input.NetworkBorderGroup !== undefined && input.NetworkBorderGroup !== null) {
        entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
    }
    if (input.CustomerOwnedIpv4Pool !== undefined && input.CustomerOwnedIpv4Pool !== null) {
        entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2AllocateHostsRequest = function (input, context) {
    var entries = {};
    if (input.AutoPlacement !== undefined && input.AutoPlacement !== null) {
        entries["AutoPlacement"] = input.AutoPlacement;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    if (input.Quantity !== undefined && input.Quantity !== null) {
        entries["Quantity"] = input.Quantity;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.HostRecovery !== undefined && input.HostRecovery !== null) {
        entries["HostRecovery"] = input.HostRecovery;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    return entries;
};
var serializeAws_ec2AllocateIpamPoolCidrRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.NetmaskLength !== undefined && input.NetmaskLength !== null) {
        entries["NetmaskLength"] = input.NetmaskLength;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.PreviewNextCidr !== undefined && input.PreviewNextCidr !== null) {
        entries["PreviewNextCidr"] = input.PreviewNextCidr;
    }
    if (input.DisallowedCidrs !== undefined && input.DisallowedCidrs !== null) {
        var memberEntries = serializeAws_ec2IpamPoolAllocationDisallowedCidrs(input.DisallowedCidrs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DisallowedCidr.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2AllocationIdList = function (input, context) {
    var e_8, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_8 = __values(input), input_8_1 = input_8.next(); !input_8_1.done; input_8_1 = input_8.next()) {
            var entry = input_8_1.value;
            if (entry === null) {
                continue;
            }
            entries["AllocationId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (input_8_1 && !input_8_1.done && (_a = input_8.return)) _a.call(input_8);
        }
        finally { if (e_8) throw e_8.error; }
    }
    return entries;
};
var serializeAws_ec2AllocationIds = function (input, context) {
    var e_9, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_9 = __values(input), input_9_1 = input_9.next(); !input_9_1.done; input_9_1 = input_9.next()) {
            var entry = input_9_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_9_1) { e_9 = { error: e_9_1 }; }
    finally {
        try {
            if (input_9_1 && !input_9_1.done && (_a = input_9.return)) _a.call(input_9);
        }
        finally { if (e_9) throw e_9.error; }
    }
    return entries;
};
var serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ArchitectureTypeSet = function (input, context) {
    var e_10, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_10 = __values(input), input_10_1 = input_10.next(); !input_10_1.done; input_10_1 = input_10.next()) {
            var entry = input_10_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_10_1) { e_10 = { error: e_10_1 }; }
    finally {
        try {
            if (input_10_1 && !input_10_1.done && (_a = input_10.return)) _a.call(input_10);
        }
        finally { if (e_10) throw e_10.error; }
    }
    return entries;
};
var serializeAws_ec2ArnList = function (input, context) {
    var e_11, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_11 = __values(input), input_11_1 = input_11.next(); !input_11_1.done; input_11_1 = input_11.next()) {
            var entry = input_11_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_11_1) { e_11 = { error: e_11_1 }; }
    finally {
        try {
            if (input_11_1 && !input_11_1.done && (_a = input_11.return)) _a.call(input_11);
        }
        finally { if (e_11) throw e_11.error; }
    }
    return entries;
};
var serializeAws_ec2AssignIpv6AddressesRequest = function (input, context) {
    var entries = {};
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        var memberEntries = serializeAws_ec2Ipv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Addresses.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount !== undefined && input.Ipv6PrefixCount !== null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        var memberEntries = serializeAws_ec2IpPrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
var serializeAws_ec2AssignPrivateIpAddressesRequest = function (input, context) {
    var entries = {};
    if (input.AllowReassignment !== undefined && input.AllowReassignment !== null) {
        entries["AllowReassignment"] = input.AllowReassignment;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        var memberEntries = serializeAws_ec2PrivateIpAddressStringList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrivateIpAddress.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        var memberEntries = serializeAws_ec2IpPrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv4Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount !== undefined && input.Ipv4PrefixCount !== null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    return entries;
};
var serializeAws_ec2AssociateAddressRequest = function (input, context) {
    var entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.AllowReassociation !== undefined && input.AllowReassociation !== null) {
        entries["AllowReassociation"] = input.AllowReassociation;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    return entries;
};
var serializeAws_ec2AssociateClientVpnTargetNetworkRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AssociateDhcpOptionsRequest = function (input, context) {
    var entries = {};
    if (input.DhcpOptionsId !== undefined && input.DhcpOptionsId !== null) {
        entries["DhcpOptionsId"] = input.DhcpOptionsId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AssociateEnclaveCertificateIamRoleRequest = function (input, context) {
    var entries = {};
    if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AssociateIamInstanceProfileRequest = function (input, context) {
    var entries = {};
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        var memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IamInstanceProfile.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
var serializeAws_ec2AssociateInstanceEventWindowRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceEventWindowId !== undefined && input.InstanceEventWindowId !== null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    if (input.AssociationTarget !== undefined && input.AssociationTarget !== null) {
        var memberEntries = serializeAws_ec2InstanceEventWindowAssociationRequest(input.AssociationTarget, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AssociationTarget.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2AssociateRouteTableRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    return entries;
};
var serializeAws_ec2AssociateSubnetCidrBlockRequest = function (input, context) {
    var entries = {};
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    return entries;
};
var serializeAws_ec2AssociateTransitGatewayMulticastDomainRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SubnetIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AssociateTransitGatewayRouteTableRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AssociateTrunkInterfaceRequest = function (input, context) {
    var entries = {};
    if (input.BranchInterfaceId !== undefined && input.BranchInterfaceId !== null) {
        entries["BranchInterfaceId"] = input.BranchInterfaceId;
    }
    if (input.TrunkInterfaceId !== undefined && input.TrunkInterfaceId !== null) {
        entries["TrunkInterfaceId"] = input.TrunkInterfaceId;
    }
    if (input.VlanId !== undefined && input.VlanId !== null) {
        entries["VlanId"] = input.VlanId;
    }
    if (input.GreKey !== undefined && input.GreKey !== null) {
        entries["GreKey"] = input.GreKey;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AssociateVpcCidrBlockRequest = function (input, context) {
    var entries = {};
    if (input.AmazonProvidedIpv6CidrBlock !== undefined && input.AmazonProvidedIpv6CidrBlock !== null) {
        entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
    }
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.Ipv6CidrBlockNetworkBorderGroup !== undefined && input.Ipv6CidrBlockNetworkBorderGroup !== null) {
        entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
    }
    if (input.Ipv6Pool !== undefined && input.Ipv6Pool !== null) {
        entries["Ipv6Pool"] = input.Ipv6Pool;
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.Ipv4IpamPoolId !== undefined && input.Ipv4IpamPoolId !== null) {
        entries["Ipv4IpamPoolId"] = input.Ipv4IpamPoolId;
    }
    if (input.Ipv4NetmaskLength !== undefined && input.Ipv4NetmaskLength !== null) {
        entries["Ipv4NetmaskLength"] = input.Ipv4NetmaskLength;
    }
    if (input.Ipv6IpamPoolId !== undefined && input.Ipv6IpamPoolId !== null) {
        entries["Ipv6IpamPoolId"] = input.Ipv6IpamPoolId;
    }
    if (input.Ipv6NetmaskLength !== undefined && input.Ipv6NetmaskLength !== null) {
        entries["Ipv6NetmaskLength"] = input.Ipv6NetmaskLength;
    }
    return entries;
};
var serializeAws_ec2AssociationIdList = function (input, context) {
    var e_12, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_12 = __values(input), input_12_1 = input_12.next(); !input_12_1.done; input_12_1 = input_12.next()) {
            var entry = input_12_1.value;
            if (entry === null) {
                continue;
            }
            entries["AssociationId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_12_1) { e_12 = { error: e_12_1 }; }
    finally {
        try {
            if (input_12_1 && !input_12_1.done && (_a = input_12.return)) _a.call(input_12);
        }
        finally { if (e_12) throw e_12.error; }
    }
    return entries;
};
var serializeAws_ec2AthenaIntegration = function (input, context) {
    var entries = {};
    if (input.IntegrationResultS3DestinationArn !== undefined && input.IntegrationResultS3DestinationArn !== null) {
        entries["IntegrationResultS3DestinationArn"] = input.IntegrationResultS3DestinationArn;
    }
    if (input.PartitionLoadFrequency !== undefined && input.PartitionLoadFrequency !== null) {
        entries["PartitionLoadFrequency"] = input.PartitionLoadFrequency;
    }
    if (input.PartitionStartDate !== undefined && input.PartitionStartDate !== null) {
        entries["PartitionStartDate"] = input.PartitionStartDate.toISOString().split(".")[0] + "Z";
    }
    if (input.PartitionEndDate !== undefined && input.PartitionEndDate !== null) {
        entries["PartitionEndDate"] = input.PartitionEndDate.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
var serializeAws_ec2AthenaIntegrationsSet = function (input, context) {
    var e_13, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_13 = __values(input), input_13_1 = input_13.next(); !input_13_1.done; input_13_1 = input_13.next()) {
            var entry = input_13_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2AthenaIntegration(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_13_1) { e_13 = { error: e_13_1 }; }
    finally {
        try {
            if (input_13_1 && !input_13_1.done && (_a = input_13.return)) _a.call(input_13);
        }
        finally { if (e_13) throw e_13.error; }
    }
    return entries;
};
var serializeAws_ec2AttachClassicLinkVpcRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        var memberEntries = serializeAws_ec2GroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2AttachInternetGatewayRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayId !== undefined && input.InternetGatewayId !== null) {
        entries["InternetGatewayId"] = input.InternetGatewayId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2AttachNetworkInterfaceRequest = function (input, context) {
    var entries = {};
    if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.NetworkCardIndex !== undefined && input.NetworkCardIndex !== null) {
        entries["NetworkCardIndex"] = input.NetworkCardIndex;
    }
    return entries;
};
var serializeAws_ec2AttachVolumeRequest = function (input, context) {
    var entries = {};
    if (input.Device !== undefined && input.Device !== null) {
        entries["Device"] = input.Device;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AttachVpnGatewayRequest = function (input, context) {
    var entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AttributeBooleanValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2AttributeValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2AuthorizeClientVpnIngressRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.TargetNetworkCidr !== undefined && input.TargetNetworkCidr !== null) {
        entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
    }
    if (input.AccessGroupId !== undefined && input.AccessGroupId !== null) {
        entries["AccessGroupId"] = input.AccessGroupId;
    }
    if (input.AuthorizeAllGroups !== undefined && input.AuthorizeAllGroups !== null) {
        entries["AuthorizeAllGroups"] = input.AuthorizeAllGroups;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2AuthorizeSecurityGroupEgressRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        var memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpPermissions.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    return entries;
};
var serializeAws_ec2AuthorizeSecurityGroupIngressRequest = function (input, context) {
    var entries = {};
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        var memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpPermissions.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2AvailabilityZoneStringList = function (input, context) {
    var e_14, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_14 = __values(input), input_14_1 = input_14.next(); !input_14_1.done; input_14_1 = input_14.next()) {
            var entry = input_14_1.value;
            if (entry === null) {
                continue;
            }
            entries["AvailabilityZone.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_14_1) { e_14 = { error: e_14_1 }; }
    finally {
        try {
            if (input_14_1 && !input_14_1.done && (_a = input_14.return)) _a.call(input_14);
        }
        finally { if (e_14) throw e_14.error; }
    }
    return entries;
};
var serializeAws_ec2BaselineEbsBandwidthMbps = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2BaselineEbsBandwidthMbpsRequest = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2BillingProductList = function (input, context) {
    var e_15, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_15 = __values(input), input_15_1 = input_15.next(); !input_15_1.done; input_15_1 = input_15.next()) {
            var entry = input_15_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_15_1) { e_15 = { error: e_15_1 }; }
    finally {
        try {
            if (input_15_1 && !input_15_1.done && (_a = input_15.return)) _a.call(input_15);
        }
        finally { if (e_15) throw e_15.error; }
    }
    return entries;
};
var serializeAws_ec2BlobAttributeValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = context.base64Encoder(input.Value);
    }
    return entries;
};
var serializeAws_ec2BlockDeviceMapping = function (input, context) {
    var entries = {};
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.VirtualName !== undefined && input.VirtualName !== null) {
        entries["VirtualName"] = input.VirtualName;
    }
    if (input.Ebs !== undefined && input.Ebs !== null) {
        var memberEntries = serializeAws_ec2EbsBlockDevice(input.Ebs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ebs.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.NoDevice !== undefined && input.NoDevice !== null) {
        entries["NoDevice"] = input.NoDevice;
    }
    return entries;
};
var serializeAws_ec2BlockDeviceMappingList = function (input, context) {
    var e_16, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_16 = __values(input), input_16_1 = input_16.next(); !input_16_1.done; input_16_1 = input_16.next()) {
            var entry = input_16_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2BlockDeviceMapping(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_16_1) { e_16 = { error: e_16_1 }; }
    finally {
        try {
            if (input_16_1 && !input_16_1.done && (_a = input_16.return)) _a.call(input_16);
        }
        finally { if (e_16) throw e_16.error; }
    }
    return entries;
};
var serializeAws_ec2BlockDeviceMappingRequestList = function (input, context) {
    var e_17, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_17 = __values(input), input_17_1 = input_17.next(); !input_17_1.done; input_17_1 = input_17.next()) {
            var entry = input_17_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2BlockDeviceMapping(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["BlockDeviceMapping.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_17_1) { e_17 = { error: e_17_1 }; }
    finally {
        try {
            if (input_17_1 && !input_17_1.done && (_a = input_17.return)) _a.call(input_17);
        }
        finally { if (e_17) throw e_17.error; }
    }
    return entries;
};
var serializeAws_ec2BundleIdStringList = function (input, context) {
    var e_18, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_18 = __values(input), input_18_1 = input_18.next(); !input_18_1.done; input_18_1 = input_18.next()) {
            var entry = input_18_1.value;
            if (entry === null) {
                continue;
            }
            entries["BundleId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_18_1) { e_18 = { error: e_18_1 }; }
    finally {
        try {
            if (input_18_1 && !input_18_1.done && (_a = input_18.return)) _a.call(input_18);
        }
        finally { if (e_18) throw e_18.error; }
    }
    return entries;
};
var serializeAws_ec2BundleInstanceRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.Storage !== undefined && input.Storage !== null) {
        var memberEntries = serializeAws_ec2Storage(input.Storage, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Storage.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CancelBundleTaskRequest = function (input, context) {
    var entries = {};
    if (input.BundleId !== undefined && input.BundleId !== null) {
        entries["BundleId"] = input.BundleId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CancelCapacityReservationFleetsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.CapacityReservationFleetIds !== undefined && input.CapacityReservationFleetIds !== null) {
        var memberEntries = serializeAws_ec2CapacityReservationFleetIdSet(input.CapacityReservationFleetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityReservationFleetId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CancelCapacityReservationRequest = function (input, context) {
    var entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CancelConversionRequest = function (input, context) {
    var entries = {};
    if (input.ConversionTaskId !== undefined && input.ConversionTaskId !== null) {
        entries["ConversionTaskId"] = input.ConversionTaskId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReasonMessage !== undefined && input.ReasonMessage !== null) {
        entries["ReasonMessage"] = input.ReasonMessage;
    }
    return entries;
};
var serializeAws_ec2CancelExportTaskRequest = function (input, context) {
    var entries = {};
    if (input.ExportTaskId !== undefined && input.ExportTaskId !== null) {
        entries["ExportTaskId"] = input.ExportTaskId;
    }
    return entries;
};
var serializeAws_ec2CancelImportTaskRequest = function (input, context) {
    var entries = {};
    if (input.CancelReason !== undefined && input.CancelReason !== null) {
        entries["CancelReason"] = input.CancelReason;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ImportTaskId !== undefined && input.ImportTaskId !== null) {
        entries["ImportTaskId"] = input.ImportTaskId;
    }
    return entries;
};
var serializeAws_ec2CancelReservedInstancesListingRequest = function (input, context) {
    var entries = {};
    if (input.ReservedInstancesListingId !== undefined && input.ReservedInstancesListingId !== null) {
        entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
    }
    return entries;
};
var serializeAws_ec2CancelSpotFleetRequestsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotFleetRequestIds !== undefined && input.SpotFleetRequestIds !== null) {
        var memberEntries = serializeAws_ec2SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SpotFleetRequestId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TerminateInstances !== undefined && input.TerminateInstances !== null) {
        entries["TerminateInstances"] = input.TerminateInstances;
    }
    return entries;
};
var serializeAws_ec2CancelSpotInstanceRequestsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotInstanceRequestIds !== undefined && input.SpotInstanceRequestIds !== null) {
        var memberEntries = serializeAws_ec2SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SpotInstanceRequestId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CapacityReservationFleetIdSet = function (input, context) {
    var e_19, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_19 = __values(input), input_19_1 = input_19.next(); !input_19_1.done; input_19_1 = input_19.next()) {
            var entry = input_19_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_19_1) { e_19 = { error: e_19_1 }; }
    finally {
        try {
            if (input_19_1 && !input_19_1.done && (_a = input_19.return)) _a.call(input_19);
        }
        finally { if (e_19) throw e_19.error; }
    }
    return entries;
};
var serializeAws_ec2CapacityReservationIdSet = function (input, context) {
    var e_20, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_20 = __values(input), input_20_1 = input_20.next(); !input_20_1.done; input_20_1 = input_20.next()) {
            var entry = input_20_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_20_1) { e_20 = { error: e_20_1 }; }
    finally {
        try {
            if (input_20_1 && !input_20_1.done && (_a = input_20.return)) _a.call(input_20);
        }
        finally { if (e_20) throw e_20.error; }
    }
    return entries;
};
var serializeAws_ec2CapacityReservationOptionsRequest = function (input, context) {
    var entries = {};
    if (input.UsageStrategy !== undefined && input.UsageStrategy !== null) {
        entries["UsageStrategy"] = input.UsageStrategy;
    }
    return entries;
};
var serializeAws_ec2CapacityReservationSpecification = function (input, context) {
    var entries = {};
    if (input.CapacityReservationPreference !== undefined && input.CapacityReservationPreference !== null) {
        entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
    }
    if (input.CapacityReservationTarget !== undefined && input.CapacityReservationTarget !== null) {
        var memberEntries = serializeAws_ec2CapacityReservationTarget(input.CapacityReservationTarget, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityReservationTarget.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CapacityReservationTarget = function (input, context) {
    var entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.CapacityReservationResourceGroupArn !== undefined && input.CapacityReservationResourceGroupArn !== null) {
        entries["CapacityReservationResourceGroupArn"] = input.CapacityReservationResourceGroupArn;
    }
    return entries;
};
var serializeAws_ec2CarrierGatewayIdSet = function (input, context) {
    var e_21, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_21 = __values(input), input_21_1 = input_21.next(); !input_21_1.done; input_21_1 = input_21.next()) {
            var entry = input_21_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_21_1) { e_21 = { error: e_21_1 }; }
    finally {
        try {
            if (input_21_1 && !input_21_1.done && (_a = input_21.return)) _a.call(input_21);
        }
        finally { if (e_21) throw e_21.error; }
    }
    return entries;
};
var serializeAws_ec2CertificateAuthenticationRequest = function (input, context) {
    var entries = {};
    if (input.ClientRootCertificateChainArn !== undefined && input.ClientRootCertificateChainArn !== null) {
        entries["ClientRootCertificateChainArn"] = input.ClientRootCertificateChainArn;
    }
    return entries;
};
var serializeAws_ec2CidrAuthorizationContext = function (input, context) {
    var entries = {};
    if (input.Message !== undefined && input.Message !== null) {
        entries["Message"] = input.Message;
    }
    if (input.Signature !== undefined && input.Signature !== null) {
        entries["Signature"] = input.Signature;
    }
    return entries;
};
var serializeAws_ec2ClassicLoadBalancer = function (input, context) {
    var entries = {};
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
var serializeAws_ec2ClassicLoadBalancers = function (input, context) {
    var e_22, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_22 = __values(input), input_22_1 = input_22.next(); !input_22_1.done; input_22_1 = input_22.next()) {
            var entry = input_22_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ClassicLoadBalancer(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_22_1) { e_22 = { error: e_22_1 }; }
    finally {
        try {
            if (input_22_1 && !input_22_1.done && (_a = input_22.return)) _a.call(input_22);
        }
        finally { if (e_22) throw e_22.error; }
    }
    return entries;
};
var serializeAws_ec2ClassicLoadBalancersConfig = function (input, context) {
    var entries = {};
    if (input.ClassicLoadBalancers !== undefined && input.ClassicLoadBalancers !== null) {
        var memberEntries = serializeAws_ec2ClassicLoadBalancers(input.ClassicLoadBalancers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ClassicLoadBalancers.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ClientConnectOptions = function (input, context) {
    var entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {
        entries["LambdaFunctionArn"] = input.LambdaFunctionArn;
    }
    return entries;
};
var serializeAws_ec2ClientData = function (input, context) {
    var entries = {};
    if (input.Comment !== undefined && input.Comment !== null) {
        entries["Comment"] = input.Comment;
    }
    if (input.UploadEnd !== undefined && input.UploadEnd !== null) {
        entries["UploadEnd"] = input.UploadEnd.toISOString().split(".")[0] + "Z";
    }
    if (input.UploadSize !== undefined && input.UploadSize !== null) {
        entries["UploadSize"] = __serializeFloat(input.UploadSize);
    }
    if (input.UploadStart !== undefined && input.UploadStart !== null) {
        entries["UploadStart"] = input.UploadStart.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
var serializeAws_ec2ClientLoginBannerOptions = function (input, context) {
    var entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.BannerText !== undefined && input.BannerText !== null) {
        entries["BannerText"] = input.BannerText;
    }
    return entries;
};
var serializeAws_ec2ClientVpnAuthenticationRequest = function (input, context) {
    var entries = {};
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.ActiveDirectory !== undefined && input.ActiveDirectory !== null) {
        var memberEntries = serializeAws_ec2DirectoryServiceAuthenticationRequest(input.ActiveDirectory, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ActiveDirectory.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MutualAuthentication !== undefined && input.MutualAuthentication !== null) {
        var memberEntries = serializeAws_ec2CertificateAuthenticationRequest(input.MutualAuthentication, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MutualAuthentication.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.FederatedAuthentication !== undefined && input.FederatedAuthentication !== null) {
        var memberEntries = serializeAws_ec2FederatedAuthenticationRequest(input.FederatedAuthentication, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "FederatedAuthentication.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ClientVpnAuthenticationRequestList = function (input, context) {
    var e_23, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_23 = __values(input), input_23_1 = input_23.next(); !input_23_1.done; input_23_1 = input_23.next()) {
            var entry = input_23_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ClientVpnAuthenticationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Member.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_23_1) { e_23 = { error: e_23_1 }; }
    finally {
        try {
            if (input_23_1 && !input_23_1.done && (_a = input_23.return)) _a.call(input_23);
        }
        finally { if (e_23) throw e_23.error; }
    }
    return entries;
};
var serializeAws_ec2ClientVpnEndpointIdList = function (input, context) {
    var e_24, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_24 = __values(input), input_24_1 = input_24.next(); !input_24_1.done; input_24_1 = input_24.next()) {
            var entry = input_24_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_24_1) { e_24 = { error: e_24_1 }; }
    finally {
        try {
            if (input_24_1 && !input_24_1.done && (_a = input_24.return)) _a.call(input_24);
        }
        finally { if (e_24) throw e_24.error; }
    }
    return entries;
};
var serializeAws_ec2ClientVpnSecurityGroupIdSet = function (input, context) {
    var e_25, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_25 = __values(input), input_25_1 = input_25.next(); !input_25_1.done; input_25_1 = input_25.next()) {
            var entry = input_25_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_25_1) { e_25 = { error: e_25_1 }; }
    finally {
        try {
            if (input_25_1 && !input_25_1.done && (_a = input_25.return)) _a.call(input_25);
        }
        finally { if (e_25) throw e_25.error; }
    }
    return entries;
};
var serializeAws_ec2CoipPoolIdSet = function (input, context) {
    var e_26, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_26 = __values(input), input_26_1 = input_26.next(); !input_26_1.done; input_26_1 = input_26.next()) {
            var entry = input_26_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_26_1) { e_26 = { error: e_26_1 }; }
    finally {
        try {
            if (input_26_1 && !input_26_1.done && (_a = input_26.return)) _a.call(input_26);
        }
        finally { if (e_26) throw e_26.error; }
    }
    return entries;
};
var serializeAws_ec2ConfirmProductInstanceRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.ProductCode !== undefined && input.ProductCode !== null) {
        entries["ProductCode"] = input.ProductCode;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ConnectionLogOptions = function (input, context) {
    var entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.CloudwatchLogGroup !== undefined && input.CloudwatchLogGroup !== null) {
        entries["CloudwatchLogGroup"] = input.CloudwatchLogGroup;
    }
    if (input.CloudwatchLogStream !== undefined && input.CloudwatchLogStream !== null) {
        entries["CloudwatchLogStream"] = input.CloudwatchLogStream;
    }
    return entries;
};
var serializeAws_ec2ConnectionNotificationIdsList = function (input, context) {
    var e_27, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_27 = __values(input), input_27_1 = input_27.next(); !input_27_1.done; input_27_1 = input_27.next()) {
            var entry = input_27_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_27_1) { e_27 = { error: e_27_1 }; }
    finally {
        try {
            if (input_27_1 && !input_27_1.done && (_a = input_27.return)) _a.call(input_27);
        }
        finally { if (e_27) throw e_27.error; }
    }
    return entries;
};
var serializeAws_ec2ConversionIdStringList = function (input, context) {
    var e_28, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_28 = __values(input), input_28_1 = input_28.next(); !input_28_1.done; input_28_1 = input_28.next()) {
            var entry = input_28_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_28_1) { e_28 = { error: e_28_1 }; }
    finally {
        try {
            if (input_28_1 && !input_28_1.done && (_a = input_28.return)) _a.call(input_28);
        }
        finally { if (e_28) throw e_28.error; }
    }
    return entries;
};
var serializeAws_ec2CopyFpgaImageRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SourceFpgaImageId !== undefined && input.SourceFpgaImageId !== null) {
        entries["SourceFpgaImageId"] = input.SourceFpgaImageId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.SourceRegion !== undefined && input.SourceRegion !== null) {
        entries["SourceRegion"] = input.SourceRegion;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CopyImageRequest = function (input, context) {
    var entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.SourceImageId !== undefined && input.SourceImageId !== null) {
        entries["SourceImageId"] = input.SourceImageId;
    }
    if (input.SourceRegion !== undefined && input.SourceRegion !== null) {
        entries["SourceRegion"] = input.SourceRegion;
    }
    if (input.DestinationOutpostArn !== undefined && input.DestinationOutpostArn !== null) {
        entries["DestinationOutpostArn"] = input.DestinationOutpostArn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CopySnapshotRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DestinationOutpostArn !== undefined && input.DestinationOutpostArn !== null) {
        entries["DestinationOutpostArn"] = input.DestinationOutpostArn;
    }
    if (input.DestinationRegion !== undefined && input.DestinationRegion !== null) {
        entries["DestinationRegion"] = input.DestinationRegion;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PresignedUrl !== undefined && input.PresignedUrl !== null) {
        entries["PresignedUrl"] = input.PresignedUrl;
    }
    if (input.SourceRegion !== undefined && input.SourceRegion !== null) {
        entries["SourceRegion"] = input.SourceRegion;
    }
    if (input.SourceSnapshotId !== undefined && input.SourceSnapshotId !== null) {
        entries["SourceSnapshotId"] = input.SourceSnapshotId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CpuManufacturerSet = function (input, context) {
    var e_29, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_29 = __values(input), input_29_1 = input_29.next(); !input_29_1.done; input_29_1 = input_29.next()) {
            var entry = input_29_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_29_1) { e_29 = { error: e_29_1 }; }
    finally {
        try {
            if (input_29_1 && !input_29_1.done && (_a = input_29.return)) _a.call(input_29);
        }
        finally { if (e_29) throw e_29.error; }
    }
    return entries;
};
var serializeAws_ec2CpuOptionsRequest = function (input, context) {
    var entries = {};
    if (input.CoreCount !== undefined && input.CoreCount !== null) {
        entries["CoreCount"] = input.CoreCount;
    }
    if (input.ThreadsPerCore !== undefined && input.ThreadsPerCore !== null) {
        entries["ThreadsPerCore"] = input.ThreadsPerCore;
    }
    return entries;
};
var serializeAws_ec2CreateCapacityReservationFleetRequest = function (input, context) {
    var entries = {};
    if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceTypeSpecifications !== undefined && input.InstanceTypeSpecifications !== null) {
        var memberEntries = serializeAws_ec2ReservationFleetInstanceSpecificationList(input.InstanceTypeSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceTypeSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.TotalTargetCapacity !== undefined && input.TotalTargetCapacity !== null) {
        entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
    }
    if (input.EndDate !== undefined && input.EndDate !== null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceMatchCriteria !== undefined && input.InstanceMatchCriteria !== null) {
        entries["InstanceMatchCriteria"] = input.InstanceMatchCriteria;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateCapacityReservationRequest = function (input, context) {
    var entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstancePlatform !== undefined && input.InstancePlatform !== null) {
        entries["InstancePlatform"] = input.InstancePlatform;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AvailabilityZoneId !== undefined && input.AvailabilityZoneId !== null) {
        entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.EphemeralStorage !== undefined && input.EphemeralStorage !== null) {
        entries["EphemeralStorage"] = input.EphemeralStorage;
    }
    if (input.EndDate !== undefined && input.EndDate !== null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.EndDateType !== undefined && input.EndDateType !== null) {
        entries["EndDateType"] = input.EndDateType;
    }
    if (input.InstanceMatchCriteria !== undefined && input.InstanceMatchCriteria !== null) {
        entries["InstanceMatchCriteria"] = input.InstanceMatchCriteria;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecifications.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.PlacementGroupArn !== undefined && input.PlacementGroupArn !== null) {
        entries["PlacementGroupArn"] = input.PlacementGroupArn;
    }
    return entries;
};
var serializeAws_ec2CreateCarrierGatewayRequest = function (input, context) {
    var entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateClientVpnEndpointRequest = function (input, context) {
    var entries = {};
    if (input.ClientCidrBlock !== undefined && input.ClientCidrBlock !== null) {
        entries["ClientCidrBlock"] = input.ClientCidrBlock;
    }
    if (input.ServerCertificateArn !== undefined && input.ServerCertificateArn !== null) {
        entries["ServerCertificateArn"] = input.ServerCertificateArn;
    }
    if (input.AuthenticationOptions !== undefined && input.AuthenticationOptions !== null) {
        var memberEntries = serializeAws_ec2ClientVpnAuthenticationRequestList(input.AuthenticationOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Authentication.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ConnectionLogOptions !== undefined && input.ConnectionLogOptions !== null) {
        var memberEntries = serializeAws_ec2ConnectionLogOptions(input.ConnectionLogOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ConnectionLogOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DnsServers !== undefined && input.DnsServers !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.DnsServers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DnsServers.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TransportProtocol !== undefined && input.TransportProtocol !== null) {
        entries["TransportProtocol"] = input.TransportProtocol;
    }
    if (input.VpnPort !== undefined && input.VpnPort !== null) {
        entries["VpnPort"] = input.VpnPort;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.SplitTunnel !== undefined && input.SplitTunnel !== null) {
        entries["SplitTunnel"] = input.SplitTunnel;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SelfServicePortal !== undefined && input.SelfServicePortal !== null) {
        entries["SelfServicePortal"] = input.SelfServicePortal;
    }
    if (input.ClientConnectOptions !== undefined && input.ClientConnectOptions !== null) {
        var memberEntries = serializeAws_ec2ClientConnectOptions(input.ClientConnectOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ClientConnectOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.SessionTimeoutHours !== undefined && input.SessionTimeoutHours !== null) {
        entries["SessionTimeoutHours"] = input.SessionTimeoutHours;
    }
    if (input.ClientLoginBannerOptions !== undefined && input.ClientLoginBannerOptions !== null) {
        var memberEntries = serializeAws_ec2ClientLoginBannerOptions(input.ClientLoginBannerOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ClientLoginBannerOptions.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateClientVpnRouteRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.TargetVpcSubnetId !== undefined && input.TargetVpcSubnetId !== null) {
        entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateCustomerGatewayRequest = function (input, context) {
    var entries = {};
    if (input.BgpAsn !== undefined && input.BgpAsn !== null) {
        entries["BgpAsn"] = input.BgpAsn;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["IpAddress"] = input.PublicIp;
    }
    if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateDefaultSubnetRequest = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Ipv6Native !== undefined && input.Ipv6Native !== null) {
        entries["Ipv6Native"] = input.Ipv6Native;
    }
    return entries;
};
var serializeAws_ec2CreateDefaultVpcRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateDhcpOptionsRequest = function (input, context) {
    var entries = {};
    if (input.DhcpConfigurations !== undefined && input.DhcpConfigurations !== null) {
        var memberEntries = serializeAws_ec2NewDhcpConfigurationList(input.DhcpConfigurations, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DhcpConfiguration.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateEgressOnlyInternetGatewayRequest = function (input, context) {
    var entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateFleetRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.SpotOptions !== undefined && input.SpotOptions !== null) {
        var memberEntries = serializeAws_ec2SpotOptionsRequest(input.SpotOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SpotOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.OnDemandOptions !== undefined && input.OnDemandOptions !== null) {
        var memberEntries = serializeAws_ec2OnDemandOptionsRequest(input.OnDemandOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "OnDemandOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
        var memberEntries = serializeAws_ec2FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateConfigs.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TargetCapacitySpecification !== undefined && input.TargetCapacitySpecification !== null) {
        var memberEntries = serializeAws_ec2TargetCapacitySpecificationRequest(input.TargetCapacitySpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TargetCapacitySpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.TerminateInstancesWithExpiration !== undefined && input.TerminateInstancesWithExpiration !== null) {
        entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.ValidFrom !== undefined && input.ValidFrom !== null) {
        entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.ReplaceUnhealthyInstances !== undefined && input.ReplaceUnhealthyInstances !== null) {
        entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Context !== undefined && input.Context !== null) {
        entries["Context"] = input.Context;
    }
    return entries;
};
var serializeAws_ec2CreateFlowLogsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DeliverLogsPermissionArn !== undefined && input.DeliverLogsPermissionArn !== null) {
        entries["DeliverLogsPermissionArn"] = input.DeliverLogsPermissionArn;
    }
    if (input.LogGroupName !== undefined && input.LogGroupName !== null) {
        entries["LogGroupName"] = input.LogGroupName;
    }
    if (input.ResourceIds !== undefined && input.ResourceIds !== null) {
        var memberEntries = serializeAws_ec2FlowLogResourceIds(input.ResourceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ResourceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.TrafficType !== undefined && input.TrafficType !== null) {
        entries["TrafficType"] = input.TrafficType;
    }
    if (input.LogDestinationType !== undefined && input.LogDestinationType !== null) {
        entries["LogDestinationType"] = input.LogDestinationType;
    }
    if (input.LogDestination !== undefined && input.LogDestination !== null) {
        entries["LogDestination"] = input.LogDestination;
    }
    if (input.LogFormat !== undefined && input.LogFormat !== null) {
        entries["LogFormat"] = input.LogFormat;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxAggregationInterval !== undefined && input.MaxAggregationInterval !== null) {
        entries["MaxAggregationInterval"] = input.MaxAggregationInterval;
    }
    if (input.DestinationOptions !== undefined && input.DestinationOptions !== null) {
        var memberEntries = serializeAws_ec2DestinationOptionsRequest(input.DestinationOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DestinationOptions.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateFpgaImageRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InputStorageLocation !== undefined && input.InputStorageLocation !== null) {
        var memberEntries = serializeAws_ec2StorageLocation(input.InputStorageLocation, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InputStorageLocation.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.LogsStorageLocation !== undefined && input.LogsStorageLocation !== null) {
        var memberEntries = serializeAws_ec2StorageLocation(input.LogsStorageLocation, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LogsStorageLocation.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateImageRequest = function (input, context) {
    var entries = {};
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        var memberEntries = serializeAws_ec2BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BlockDeviceMapping.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.NoReboot !== undefined && input.NoReboot !== null) {
        entries["NoReboot"] = input.NoReboot;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateInstanceEventWindowRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.TimeRanges !== undefined && input.TimeRanges !== null) {
        var memberEntries = serializeAws_ec2InstanceEventWindowTimeRangeRequestSet(input.TimeRanges, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TimeRange.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.CronExpression !== undefined && input.CronExpression !== null) {
        entries["CronExpression"] = input.CronExpression;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateInstanceExportTaskRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.ExportToS3Task !== undefined && input.ExportToS3Task !== null) {
        var memberEntries = serializeAws_ec2ExportToS3TaskSpecification(input.ExportToS3Task, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExportToS3.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.TargetEnvironment !== undefined && input.TargetEnvironment !== null) {
        entries["TargetEnvironment"] = input.TargetEnvironment;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateInternetGatewayRequest = function (input, context) {
    var entries = {};
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateIpamPoolRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.Locale !== undefined && input.Locale !== null) {
        entries["Locale"] = input.Locale;
    }
    if (input.SourceIpamPoolId !== undefined && input.SourceIpamPoolId !== null) {
        entries["SourceIpamPoolId"] = input.SourceIpamPoolId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.AddressFamily !== undefined && input.AddressFamily !== null) {
        entries["AddressFamily"] = input.AddressFamily;
    }
    if (input.AutoImport !== undefined && input.AutoImport !== null) {
        entries["AutoImport"] = input.AutoImport;
    }
    if (input.PubliclyAdvertisable !== undefined && input.PubliclyAdvertisable !== null) {
        entries["PubliclyAdvertisable"] = input.PubliclyAdvertisable;
    }
    if (input.AllocationMinNetmaskLength !== undefined && input.AllocationMinNetmaskLength !== null) {
        entries["AllocationMinNetmaskLength"] = input.AllocationMinNetmaskLength;
    }
    if (input.AllocationMaxNetmaskLength !== undefined && input.AllocationMaxNetmaskLength !== null) {
        entries["AllocationMaxNetmaskLength"] = input.AllocationMaxNetmaskLength;
    }
    if (input.AllocationDefaultNetmaskLength !== undefined && input.AllocationDefaultNetmaskLength !== null) {
        entries["AllocationDefaultNetmaskLength"] = input.AllocationDefaultNetmaskLength;
    }
    if (input.AllocationResourceTags !== undefined && input.AllocationResourceTags !== null) {
        var memberEntries = serializeAws_ec2RequestIpamResourceTagList(input.AllocationResourceTags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AllocationResourceTag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.AwsService !== undefined && input.AwsService !== null) {
        entries["AwsService"] = input.AwsService;
    }
    return entries;
};
var serializeAws_ec2CreateIpamRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.OperatingRegions !== undefined && input.OperatingRegions !== null) {
        var memberEntries = serializeAws_ec2AddIpamOperatingRegionSet(input.OperatingRegions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "OperatingRegion.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateIpamScopeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId !== undefined && input.IpamId !== null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateKeyPairRequest = function (input, context) {
    var entries = {};
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.KeyType !== undefined && input.KeyType !== null) {
        entries["KeyType"] = input.KeyType;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.KeyFormat !== undefined && input.KeyFormat !== null) {
        entries["KeyFormat"] = input.KeyFormat;
    }
    return entries;
};
var serializeAws_ec2CreateLaunchTemplateRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.VersionDescription !== undefined && input.VersionDescription !== null) {
        entries["VersionDescription"] = input.VersionDescription;
    }
    if (input.LaunchTemplateData !== undefined && input.LaunchTemplateData !== null) {
        var memberEntries = serializeAws_ec2RequestLaunchTemplateData(input.LaunchTemplateData, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateData.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateLaunchTemplateVersionRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.SourceVersion !== undefined && input.SourceVersion !== null) {
        entries["SourceVersion"] = input.SourceVersion;
    }
    if (input.VersionDescription !== undefined && input.VersionDescription !== null) {
        entries["VersionDescription"] = input.VersionDescription;
    }
    if (input.LaunchTemplateData !== undefined && input.LaunchTemplateData !== null) {
        var memberEntries = serializeAws_ec2RequestLaunchTemplateData(input.LaunchTemplateData, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateData.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateLocalGatewayRouteRequest = function (input, context) {
    var entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.LocalGatewayVirtualInterfaceGroupId !== undefined && input.LocalGatewayVirtualInterfaceGroupId !== null) {
        entries["LocalGatewayVirtualInterfaceGroupId"] = input.LocalGatewayVirtualInterfaceGroupId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationRequest = function (input, context) {
    var entries = {};
    if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateManagedPrefixListRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListName !== undefined && input.PrefixListName !== null) {
        entries["PrefixListName"] = input.PrefixListName;
    }
    if (input.Entries !== undefined && input.Entries !== null) {
        var memberEntries = serializeAws_ec2AddPrefixListEntries(input.Entries, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Entry.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxEntries !== undefined && input.MaxEntries !== null) {
        entries["MaxEntries"] = input.MaxEntries;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AddressFamily !== undefined && input.AddressFamily !== null) {
        entries["AddressFamily"] = input.AddressFamily;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateNatGatewayRequest = function (input, context) {
    var entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ConnectivityType !== undefined && input.ConnectivityType !== null) {
        entries["ConnectivityType"] = input.ConnectivityType;
    }
    return entries;
};
var serializeAws_ec2CreateNetworkAclEntryRequest = function (input, context) {
    var entries = {};
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Egress !== undefined && input.Egress !== null) {
        entries["Egress"] = input.Egress;
    }
    if (input.IcmpTypeCode !== undefined && input.IcmpTypeCode !== null) {
        var memberEntries = serializeAws_ec2IcmpTypeCode(input.IcmpTypeCode, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Icmp.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    if (input.PortRange !== undefined && input.PortRange !== null) {
        var memberEntries = serializeAws_ec2PortRange(input.PortRange, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PortRange.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.RuleAction !== undefined && input.RuleAction !== null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    return entries;
};
var serializeAws_ec2CreateNetworkAclRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateNetworkInsightsAccessScopeRequest = function (input, context) {
    var entries = {};
    if (input.MatchPaths !== undefined && input.MatchPaths !== null) {
        var memberEntries = serializeAws_ec2AccessScopePathListRequest(input.MatchPaths, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MatchPath.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ExcludePaths !== undefined && input.ExcludePaths !== null) {
        var memberEntries = serializeAws_ec2AccessScopePathListRequest(input.ExcludePaths, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExcludePath.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateNetworkInsightsPathRequest = function (input, context) {
    var entries = {};
    if (input.SourceIp !== undefined && input.SourceIp !== null) {
        entries["SourceIp"] = input.SourceIp;
    }
    if (input.DestinationIp !== undefined && input.DestinationIp !== null) {
        entries["DestinationIp"] = input.DestinationIp;
    }
    if (input.Source !== undefined && input.Source !== null) {
        entries["Source"] = input.Source;
    }
    if (input.Destination !== undefined && input.Destination !== null) {
        entries["Destination"] = input.Destination;
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.DestinationPort !== undefined && input.DestinationPort !== null) {
        entries["DestinationPort"] = input.DestinationPort;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateNetworkInterfacePermissionRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.AwsAccountId !== undefined && input.AwsAccountId !== null) {
        entries["AwsAccountId"] = input.AwsAccountId;
    }
    if (input.AwsService !== undefined && input.AwsService !== null) {
        entries["AwsService"] = input.AwsService;
    }
    if (input.Permission !== undefined && input.Permission !== null) {
        entries["Permission"] = input.Permission;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateNetworkInterfaceRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        var memberEntries = serializeAws_ec2InstanceIpv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Addresses.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        var memberEntries = serializeAws_ec2PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrivateIpAddresses.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        var memberEntries = serializeAws_ec2Ipv4PrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv4Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount !== undefined && input.Ipv4PrefixCount !== null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        var memberEntries = serializeAws_ec2Ipv6PrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount !== undefined && input.Ipv6PrefixCount !== null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    if (input.InterfaceType !== undefined && input.InterfaceType !== null) {
        entries["InterfaceType"] = input.InterfaceType;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreatePlacementGroupRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Strategy !== undefined && input.Strategy !== null) {
        entries["Strategy"] = input.Strategy;
    }
    if (input.PartitionCount !== undefined && input.PartitionCount !== null) {
        entries["PartitionCount"] = input.PartitionCount;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreatePublicIpv4PoolRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateReplaceRootVolumeTaskRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateReservedInstancesListingRequest = function (input, context) {
    var entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.PriceSchedules !== undefined && input.PriceSchedules !== null) {
        var memberEntries = serializeAws_ec2PriceScheduleSpecificationList(input.PriceSchedules, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PriceSchedules.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ReservedInstancesId !== undefined && input.ReservedInstancesId !== null) {
        entries["ReservedInstancesId"] = input.ReservedInstancesId;
    }
    return entries;
};
var serializeAws_ec2CreateRestoreImageTaskRequest = function (input, context) {
    var entries = {};
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.ObjectKey !== undefined && input.ObjectKey !== null) {
        entries["ObjectKey"] = input.ObjectKey;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateRouteRequest = function (input, context) {
    var entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DestinationIpv6CidrBlock !== undefined && input.DestinationIpv6CidrBlock !== null) {
        entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
    }
    if (input.DestinationPrefixListId !== undefined && input.DestinationPrefixListId !== null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.EgressOnlyInternetGatewayId !== undefined && input.EgressOnlyInternetGatewayId !== null) {
        entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
    }
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.NatGatewayId !== undefined && input.NatGatewayId !== null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.LocalGatewayId !== undefined && input.LocalGatewayId !== null) {
        entries["LocalGatewayId"] = input.LocalGatewayId;
    }
    if (input.CarrierGatewayId !== undefined && input.CarrierGatewayId !== null) {
        entries["CarrierGatewayId"] = input.CarrierGatewayId;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    if (input.CoreNetworkArn !== undefined && input.CoreNetworkArn !== null) {
        entries["CoreNetworkArn"] = input.CoreNetworkArn;
    }
    return entries;
};
var serializeAws_ec2CreateRouteTableRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateSecurityGroupRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["GroupDescription"] = input.Description;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateSnapshotRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateSnapshotsRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.InstanceSpecification !== undefined && input.InstanceSpecification !== null) {
        var memberEntries = serializeAws_ec2InstanceSpecification(input.InstanceSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.CopyTagsFromSource !== undefined && input.CopyTagsFromSource !== null) {
        entries["CopyTagsFromSource"] = input.CopyTagsFromSource;
    }
    return entries;
};
var serializeAws_ec2CreateSpotDatafeedSubscriptionRequest = function (input, context) {
    var entries = {};
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Prefix !== undefined && input.Prefix !== null) {
        entries["Prefix"] = input.Prefix;
    }
    return entries;
};
var serializeAws_ec2CreateStoreImageTaskRequest = function (input, context) {
    var entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.S3ObjectTags !== undefined && input.S3ObjectTags !== null) {
        var memberEntries = serializeAws_ec2S3ObjectTagList(input.S3ObjectTags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "S3ObjectTag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateSubnetCidrReservationRequest = function (input, context) {
    var entries = {};
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.ReservationType !== undefined && input.ReservationType !== null) {
        entries["ReservationType"] = input.ReservationType;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateSubnetRequest = function (input, context) {
    var entries = {};
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AvailabilityZoneId !== undefined && input.AvailabilityZoneId !== null) {
        entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
    }
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Ipv6Native !== undefined && input.Ipv6Native !== null) {
        entries["Ipv6Native"] = input.Ipv6Native;
    }
    return entries;
};
var serializeAws_ec2CreateTagsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Resources !== undefined && input.Resources !== null) {
        var memberEntries = serializeAws_ec2ResourceIdList(input.Resources, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ResourceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateTrafficMirrorFilterRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateTrafficMirrorFilterRuleRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.TrafficDirection !== undefined && input.TrafficDirection !== null) {
        entries["TrafficDirection"] = input.TrafficDirection;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    if (input.RuleAction !== undefined && input.RuleAction !== null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.DestinationPortRange !== undefined && input.DestinationPortRange !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DestinationPortRange.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.SourcePortRange !== undefined && input.SourcePortRange !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourcePortRange.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.SourceCidrBlock !== undefined && input.SourceCidrBlock !== null) {
        entries["SourceCidrBlock"] = input.SourceCidrBlock;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateTrafficMirrorSessionRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.TrafficMirrorTargetId !== undefined && input.TrafficMirrorTargetId !== null) {
        entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
    }
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.PacketLength !== undefined && input.PacketLength !== null) {
        entries["PacketLength"] = input.PacketLength;
    }
    if (input.SessionNumber !== undefined && input.SessionNumber !== null) {
        entries["SessionNumber"] = input.SessionNumber;
    }
    if (input.VirtualNetworkId !== undefined && input.VirtualNetworkId !== null) {
        entries["VirtualNetworkId"] = input.VirtualNetworkId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateTrafficMirrorTargetRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.NetworkLoadBalancerArn !== undefined && input.NetworkLoadBalancerArn !== null) {
        entries["NetworkLoadBalancerArn"] = input.NetworkLoadBalancerArn;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.GatewayLoadBalancerEndpointId !== undefined && input.GatewayLoadBalancerEndpointId !== null) {
        entries["GatewayLoadBalancerEndpointId"] = input.GatewayLoadBalancerEndpointId;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayConnectPeerRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.TransitGatewayAddress !== undefined && input.TransitGatewayAddress !== null) {
        entries["TransitGatewayAddress"] = input.TransitGatewayAddress;
    }
    if (input.PeerAddress !== undefined && input.PeerAddress !== null) {
        entries["PeerAddress"] = input.PeerAddress;
    }
    if (input.BgpOptions !== undefined && input.BgpOptions !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayConnectRequestBgpOptions(input.BgpOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BgpOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InsideCidrBlocks !== undefined && input.InsideCidrBlocks !== null) {
        var memberEntries = serializeAws_ec2InsideCidrBlocksStringList(input.InsideCidrBlocks, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InsideCidrBlocks.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayConnectRequest = function (input, context) {
    var entries = {};
    if (input.TransportTransitGatewayAttachmentId !== undefined && input.TransportTransitGatewayAttachmentId !== null) {
        entries["TransportTransitGatewayAttachmentId"] = input.TransportTransitGatewayAttachmentId;
    }
    if (input.Options !== undefined && input.Options !== null) {
        var memberEntries = serializeAws_ec2CreateTransitGatewayConnectRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Options.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayConnectRequestOptions = function (input, context) {
    var entries = {};
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayMulticastDomainRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.Options !== undefined && input.Options !== null) {
        var memberEntries = serializeAws_ec2CreateTransitGatewayMulticastDomainRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Options.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayMulticastDomainRequestOptions = function (input, context) {
    var entries = {};
    if (input.Igmpv2Support !== undefined && input.Igmpv2Support !== null) {
        entries["Igmpv2Support"] = input.Igmpv2Support;
    }
    if (input.StaticSourcesSupport !== undefined && input.StaticSourcesSupport !== null) {
        entries["StaticSourcesSupport"] = input.StaticSourcesSupport;
    }
    if (input.AutoAcceptSharedAssociations !== undefined && input.AutoAcceptSharedAssociations !== null) {
        entries["AutoAcceptSharedAssociations"] = input.AutoAcceptSharedAssociations;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.PeerTransitGatewayId !== undefined && input.PeerTransitGatewayId !== null) {
        entries["PeerTransitGatewayId"] = input.PeerTransitGatewayId;
    }
    if (input.PeerAccountId !== undefined && input.PeerAccountId !== null) {
        entries["PeerAccountId"] = input.PeerAccountId;
    }
    if (input.PeerRegion !== undefined && input.PeerRegion !== null) {
        entries["PeerRegion"] = input.PeerRegion;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayPrefixListReferenceRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole !== undefined && input.Blackhole !== null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Options !== undefined && input.Options !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Options.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayRouteRequest = function (input, context) {
    var entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole !== undefined && input.Blackhole !== null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayRouteTableRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecifications.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayVpcAttachmentRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SubnetIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Options !== undefined && input.Options !== null) {
        var memberEntries = serializeAws_ec2CreateTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Options.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecifications.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreateTransitGatewayVpcAttachmentRequestOptions = function (input, context) {
    var entries = {};
    if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.Ipv6Support !== undefined && input.Ipv6Support !== null) {
        entries["Ipv6Support"] = input.Ipv6Support;
    }
    if (input.ApplianceModeSupport !== undefined && input.ApplianceModeSupport !== null) {
        entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
    }
    return entries;
};
var serializeAws_ec2CreateVolumePermission = function (input, context) {
    var entries = {};
    if (input.Group !== undefined && input.Group !== null) {
        entries["Group"] = input.Group;
    }
    if (input.UserId !== undefined && input.UserId !== null) {
        entries["UserId"] = input.UserId;
    }
    return entries;
};
var serializeAws_ec2CreateVolumePermissionList = function (input, context) {
    var e_30, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_30 = __values(input), input_30_1 = input_30.next(); !input_30_1.done; input_30_1 = input_30.next()) {
            var entry = input_30_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2CreateVolumePermission(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_30_1) { e_30 = { error: e_30_1 }; }
    finally {
        try {
            if (input_30_1 && !input_30_1.done && (_a = input_30.return)) _a.call(input_30);
        }
        finally { if (e_30) throw e_30.error; }
    }
    return entries;
};
var serializeAws_ec2CreateVolumePermissionModifications = function (input, context) {
    var entries = {};
    if (input.Add !== undefined && input.Add !== null) {
        var memberEntries = serializeAws_ec2CreateVolumePermissionList(input.Add, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Add.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Remove !== undefined && input.Remove !== null) {
        var memberEntries = serializeAws_ec2CreateVolumePermissionList(input.Remove, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Remove.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateVolumeRequest = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.Size !== undefined && input.Size !== null) {
        entries["Size"] = input.Size;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MultiAttachEnabled !== undefined && input.MultiAttachEnabled !== null) {
        entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
    }
    if (input.Throughput !== undefined && input.Throughput !== null) {
        entries["Throughput"] = input.Throughput;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateVpcEndpointConnectionNotificationRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.ConnectionNotificationArn !== undefined && input.ConnectionNotificationArn !== null) {
        entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
    }
    if (input.ConnectionEvents !== undefined && input.ConnectionEvents !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.ConnectionEvents, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ConnectionEvents.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2CreateVpcEndpointRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointType !== undefined && input.VpcEndpointType !== null) {
        entries["VpcEndpointType"] = input.VpcEndpointType;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.ServiceName !== undefined && input.ServiceName !== null) {
        entries["ServiceName"] = input.ServiceName;
    }
    if (input.PolicyDocument !== undefined && input.PolicyDocument !== null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.RouteTableIds !== undefined && input.RouteTableIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointRouteTableIdList(input.RouteTableIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RouteTableId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointSubnetIdList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SubnetId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointSecurityGroupIdList(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.IpAddressType !== undefined && input.IpAddressType !== null) {
        entries["IpAddressType"] = input.IpAddressType;
    }
    if (input.DnsOptions !== undefined && input.DnsOptions !== null) {
        var memberEntries = serializeAws_ec2DnsOptionsSpecification(input.DnsOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DnsOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.PrivateDnsEnabled !== undefined && input.PrivateDnsEnabled !== null) {
        entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateVpcEndpointServiceConfigurationRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.AcceptanceRequired !== undefined && input.AcceptanceRequired !== null) {
        entries["AcceptanceRequired"] = input.AcceptanceRequired;
    }
    if (input.PrivateDnsName !== undefined && input.PrivateDnsName !== null) {
        entries["PrivateDnsName"] = input.PrivateDnsName;
    }
    if (input.NetworkLoadBalancerArns !== undefined && input.NetworkLoadBalancerArns !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.NetworkLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkLoadBalancerArn.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.GatewayLoadBalancerArns !== undefined && input.GatewayLoadBalancerArns !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.GatewayLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GatewayLoadBalancerArn.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SupportedIpAddressTypes !== undefined && input.SupportedIpAddressTypes !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.SupportedIpAddressTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SupportedIpAddressType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateVpcPeeringConnectionRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PeerOwnerId !== undefined && input.PeerOwnerId !== null) {
        entries["PeerOwnerId"] = input.PeerOwnerId;
    }
    if (input.PeerVpcId !== undefined && input.PeerVpcId !== null) {
        entries["PeerVpcId"] = input.PeerVpcId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.PeerRegion !== undefined && input.PeerRegion !== null) {
        entries["PeerRegion"] = input.PeerRegion;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateVpcRequest = function (input, context) {
    var entries = {};
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.AmazonProvidedIpv6CidrBlock !== undefined && input.AmazonProvidedIpv6CidrBlock !== null) {
        entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
    }
    if (input.Ipv6Pool !== undefined && input.Ipv6Pool !== null) {
        entries["Ipv6Pool"] = input.Ipv6Pool;
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.Ipv4IpamPoolId !== undefined && input.Ipv4IpamPoolId !== null) {
        entries["Ipv4IpamPoolId"] = input.Ipv4IpamPoolId;
    }
    if (input.Ipv4NetmaskLength !== undefined && input.Ipv4NetmaskLength !== null) {
        entries["Ipv4NetmaskLength"] = input.Ipv4NetmaskLength;
    }
    if (input.Ipv6IpamPoolId !== undefined && input.Ipv6IpamPoolId !== null) {
        entries["Ipv6IpamPoolId"] = input.Ipv6IpamPoolId;
    }
    if (input.Ipv6NetmaskLength !== undefined && input.Ipv6NetmaskLength !== null) {
        entries["Ipv6NetmaskLength"] = input.Ipv6NetmaskLength;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTenancy !== undefined && input.InstanceTenancy !== null) {
        entries["InstanceTenancy"] = input.InstanceTenancy;
    }
    if (input.Ipv6CidrBlockNetworkBorderGroup !== undefined && input.Ipv6CidrBlockNetworkBorderGroup !== null) {
        entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateVpnConnectionRequest = function (input, context) {
    var entries = {};
    if (input.CustomerGatewayId !== undefined && input.CustomerGatewayId !== null) {
        entries["CustomerGatewayId"] = input.CustomerGatewayId;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Options !== undefined && input.Options !== null) {
        var memberEntries = serializeAws_ec2VpnConnectionOptionsSpecification(input.Options, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Options.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2CreateVpnConnectionRouteRequest = function (input, context) {
    var entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    return entries;
};
var serializeAws_ec2CreateVpnGatewayRequest = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AmazonSideAsn !== undefined && input.AmazonSideAsn !== null) {
        entries["AmazonSideAsn"] = input.AmazonSideAsn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2CreditSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.CpuCredits !== undefined && input.CpuCredits !== null) {
        entries["CpuCredits"] = input.CpuCredits;
    }
    return entries;
};
var serializeAws_ec2CustomerGatewayIdStringList = function (input, context) {
    var e_31, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_31 = __values(input), input_31_1 = input_31.next(); !input_31_1.done; input_31_1 = input_31.next()) {
            var entry = input_31_1.value;
            if (entry === null) {
                continue;
            }
            entries["CustomerGatewayId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_31_1) { e_31 = { error: e_31_1 }; }
    finally {
        try {
            if (input_31_1 && !input_31_1.done && (_a = input_31.return)) _a.call(input_31);
        }
        finally { if (e_31) throw e_31.error; }
    }
    return entries;
};
var serializeAws_ec2DedicatedHostIdList = function (input, context) {
    var e_32, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_32 = __values(input), input_32_1 = input_32.next(); !input_32_1.done; input_32_1 = input_32.next()) {
            var entry = input_32_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_32_1) { e_32 = { error: e_32_1 }; }
    finally {
        try {
            if (input_32_1 && !input_32_1.done && (_a = input_32.return)) _a.call(input_32);
        }
        finally { if (e_32) throw e_32.error; }
    }
    return entries;
};
var serializeAws_ec2DeleteCarrierGatewayRequest = function (input, context) {
    var entries = {};
    if (input.CarrierGatewayId !== undefined && input.CarrierGatewayId !== null) {
        entries["CarrierGatewayId"] = input.CarrierGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteClientVpnEndpointRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteClientVpnRouteRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.TargetVpcSubnetId !== undefined && input.TargetVpcSubnetId !== null) {
        entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteCustomerGatewayRequest = function (input, context) {
    var entries = {};
    if (input.CustomerGatewayId !== undefined && input.CustomerGatewayId !== null) {
        entries["CustomerGatewayId"] = input.CustomerGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteDhcpOptionsRequest = function (input, context) {
    var entries = {};
    if (input.DhcpOptionsId !== undefined && input.DhcpOptionsId !== null) {
        entries["DhcpOptionsId"] = input.DhcpOptionsId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteEgressOnlyInternetGatewayRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EgressOnlyInternetGatewayId !== undefined && input.EgressOnlyInternetGatewayId !== null) {
        entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
    }
    return entries;
};
var serializeAws_ec2DeleteFleetsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FleetIds !== undefined && input.FleetIds !== null) {
        var memberEntries = serializeAws_ec2FleetIdSet(input.FleetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "FleetId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TerminateInstances !== undefined && input.TerminateInstances !== null) {
        entries["TerminateInstances"] = input.TerminateInstances;
    }
    return entries;
};
var serializeAws_ec2DeleteFlowLogsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FlowLogIds !== undefined && input.FlowLogIds !== null) {
        var memberEntries = serializeAws_ec2FlowLogIdList(input.FlowLogIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "FlowLogId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DeleteFpgaImageRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    return entries;
};
var serializeAws_ec2DeleteInstanceEventWindowRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ForceDelete !== undefined && input.ForceDelete !== null) {
        entries["ForceDelete"] = input.ForceDelete;
    }
    if (input.InstanceEventWindowId !== undefined && input.InstanceEventWindowId !== null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    return entries;
};
var serializeAws_ec2DeleteInternetGatewayRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayId !== undefined && input.InternetGatewayId !== null) {
        entries["InternetGatewayId"] = input.InternetGatewayId;
    }
    return entries;
};
var serializeAws_ec2DeleteIpamPoolRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    return entries;
};
var serializeAws_ec2DeleteIpamRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId !== undefined && input.IpamId !== null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.Cascade !== undefined && input.Cascade !== null) {
        entries["Cascade"] = input.Cascade;
    }
    return entries;
};
var serializeAws_ec2DeleteIpamScopeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    return entries;
};
var serializeAws_ec2DeleteKeyPairRequest = function (input, context) {
    var entries = {};
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.KeyPairId !== undefined && input.KeyPairId !== null) {
        entries["KeyPairId"] = input.KeyPairId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteLaunchTemplateRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    return entries;
};
var serializeAws_ec2DeleteLaunchTemplateVersionsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Versions !== undefined && input.Versions !== null) {
        var memberEntries = serializeAws_ec2VersionStringList(input.Versions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateVersion.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DeleteLocalGatewayRouteRequest = function (input, context) {
    var entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationRequest = function (input, context) {
    var entries = {};
    if (input.LocalGatewayRouteTableVpcAssociationId !== undefined &&
        input.LocalGatewayRouteTableVpcAssociationId !== null) {
        entries["LocalGatewayRouteTableVpcAssociationId"] = input.LocalGatewayRouteTableVpcAssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteManagedPrefixListRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    return entries;
};
var serializeAws_ec2DeleteNatGatewayRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NatGatewayId !== undefined && input.NatGatewayId !== null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    return entries;
};
var serializeAws_ec2DeleteNetworkAclEntryRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Egress !== undefined && input.Egress !== null) {
        entries["Egress"] = input.Egress;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    return entries;
};
var serializeAws_ec2DeleteNetworkAclRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    return entries;
};
var serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInsightsAccessScopeAnalysisId !== undefined && input.NetworkInsightsAccessScopeAnalysisId !== null) {
        entries["NetworkInsightsAccessScopeAnalysisId"] = input.NetworkInsightsAccessScopeAnalysisId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteNetworkInsightsAccessScopeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInsightsAccessScopeId !== undefined && input.NetworkInsightsAccessScopeId !== null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    return entries;
};
var serializeAws_ec2DeleteNetworkInsightsAnalysisRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInsightsAnalysisId !== undefined && input.NetworkInsightsAnalysisId !== null) {
        entries["NetworkInsightsAnalysisId"] = input.NetworkInsightsAnalysisId;
    }
    return entries;
};
var serializeAws_ec2DeleteNetworkInsightsPathRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInsightsPathId !== undefined && input.NetworkInsightsPathId !== null) {
        entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
    }
    return entries;
};
var serializeAws_ec2DeleteNetworkInterfacePermissionRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInterfacePermissionId !== undefined && input.NetworkInterfacePermissionId !== null) {
        entries["NetworkInterfacePermissionId"] = input.NetworkInterfacePermissionId;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteNetworkInterfaceRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
var serializeAws_ec2DeletePlacementGroupRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    return entries;
};
var serializeAws_ec2DeletePublicIpv4PoolRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    return entries;
};
var serializeAws_ec2DeleteQueuedReservedInstancesIdList = function (input, context) {
    var e_33, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_33 = __values(input), input_33_1 = input_33.next(); !input_33_1.done; input_33_1 = input_33.next()) {
            var entry = input_33_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_33_1) { e_33 = { error: e_33_1 }; }
    finally {
        try {
            if (input_33_1 && !input_33_1.done && (_a = input_33.return)) _a.call(input_33);
        }
        finally { if (e_33) throw e_33.error; }
    }
    return entries;
};
var serializeAws_ec2DeleteQueuedReservedInstancesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReservedInstancesIds !== undefined && input.ReservedInstancesIds !== null) {
        var memberEntries = serializeAws_ec2DeleteQueuedReservedInstancesIdList(input.ReservedInstancesIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReservedInstancesId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DeleteRouteRequest = function (input, context) {
    var entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DestinationIpv6CidrBlock !== undefined && input.DestinationIpv6CidrBlock !== null) {
        entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
    }
    if (input.DestinationPrefixListId !== undefined && input.DestinationPrefixListId !== null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    return entries;
};
var serializeAws_ec2DeleteRouteTableRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    return entries;
};
var serializeAws_ec2DeleteSecurityGroupRequest = function (input, context) {
    var entries = {};
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteSnapshotRequest = function (input, context) {
    var entries = {};
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteSpotDatafeedSubscriptionRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteSubnetCidrReservationRequest = function (input, context) {
    var entries = {};
    if (input.SubnetCidrReservationId !== undefined && input.SubnetCidrReservationId !== null) {
        entries["SubnetCidrReservationId"] = input.SubnetCidrReservationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteSubnetRequest = function (input, context) {
    var entries = {};
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTagsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Resources !== undefined && input.Resources !== null) {
        var memberEntries = serializeAws_ec2ResourceIdList(input.Resources, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ResourceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DeleteTrafficMirrorFilterRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTrafficMirrorFilterRuleRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorFilterRuleId !== undefined && input.TrafficMirrorFilterRuleId !== null) {
        entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTrafficMirrorSessionRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorSessionId !== undefined && input.TrafficMirrorSessionId !== null) {
        entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTrafficMirrorTargetRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorTargetId !== undefined && input.TrafficMirrorTargetId !== null) {
        entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTransitGatewayConnectPeerRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayConnectPeerId !== undefined && input.TransitGatewayConnectPeerId !== null) {
        entries["TransitGatewayConnectPeerId"] = input.TransitGatewayConnectPeerId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTransitGatewayConnectRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTransitGatewayMulticastDomainRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTransitGatewayPeeringAttachmentRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTransitGatewayPrefixListReferenceRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTransitGatewayRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTransitGatewayRouteRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTransitGatewayRouteTableRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteTransitGatewayVpcAttachmentRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteVolumeRequest = function (input, context) {
    var entries = {};
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteVpcEndpointConnectionNotificationsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ConnectionNotificationIds !== undefined && input.ConnectionNotificationIds !== null) {
        var memberEntries = serializeAws_ec2ConnectionNotificationIdsList(input.ConnectionNotificationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ConnectionNotificationId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DeleteVpcEndpointServiceConfigurationsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceIds !== undefined && input.ServiceIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointServiceIdList(input.ServiceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ServiceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DeleteVpcEndpointsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcEndpointId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DeleteVpcPeeringConnectionRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
var serializeAws_ec2DeleteVpcRequest = function (input, context) {
    var entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteVpnConnectionRequest = function (input, context) {
    var entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeleteVpnConnectionRouteRequest = function (input, context) {
    var entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    return entries;
};
var serializeAws_ec2DeleteVpnGatewayRequest = function (input, context) {
    var entries = {};
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeprovisionByoipCidrRequest = function (input, context) {
    var entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeprovisionIpamPoolCidrRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
var serializeAws_ec2DeprovisionPublicIpv4PoolCidrRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
var serializeAws_ec2DeregisterImageRequest = function (input, context) {
    var entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeregisterInstanceEventNotificationAttributesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTagAttribute !== undefined && input.InstanceTagAttribute !== null) {
        var memberEntries = serializeAws_ec2DeregisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceTagAttribute.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DeregisterInstanceTagAttributeRequest = function (input, context) {
    var entries = {};
    if (input.IncludeAllTagsOfInstance !== undefined && input.IncludeAllTagsOfInstance !== null) {
        entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
    }
    if (input.InstanceTagKeys !== undefined && input.InstanceTagKeys !== null) {
        var memberEntries = serializeAws_ec2InstanceTagKeySet(input.InstanceTagKeys, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceTagKey.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterfaceIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterfaceIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeAccountAttributesRequest = function (input, context) {
    var entries = {};
    if (input.AttributeNames !== undefined && input.AttributeNames !== null) {
        var memberEntries = serializeAws_ec2AccountAttributeNameStringList(input.AttributeNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AttributeName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeAddressesAttributeRequest = function (input, context) {
    var entries = {};
    if (input.AllocationIds !== undefined && input.AllocationIds !== null) {
        var memberEntries = serializeAws_ec2AllocationIds(input.AllocationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AllocationId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeAddressesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.PublicIps !== undefined && input.PublicIps !== null) {
        var memberEntries = serializeAws_ec2PublicIpStringList(input.PublicIps, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PublicIp.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AllocationIds !== undefined && input.AllocationIds !== null) {
        var memberEntries = serializeAws_ec2AllocationIdList(input.AllocationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AllocationId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeAggregateIdFormatRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeAvailabilityZonesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ZoneNames !== undefined && input.ZoneNames !== null) {
        var memberEntries = serializeAws_ec2ZoneNameStringList(input.ZoneNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ZoneName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ZoneIds !== undefined && input.ZoneIds !== null) {
        var memberEntries = serializeAws_ec2ZoneIdStringList(input.ZoneIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ZoneId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AllAvailabilityZones !== undefined && input.AllAvailabilityZones !== null) {
        entries["AllAvailabilityZones"] = input.AllAvailabilityZones;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeBundleTasksRequest = function (input, context) {
    var entries = {};
    if (input.BundleIds !== undefined && input.BundleIds !== null) {
        var memberEntries = serializeAws_ec2BundleIdStringList(input.BundleIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BundleId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeByoipCidrsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeCapacityReservationFleetsRequest = function (input, context) {
    var entries = {};
    if (input.CapacityReservationFleetIds !== undefined && input.CapacityReservationFleetIds !== null) {
        var memberEntries = serializeAws_ec2CapacityReservationFleetIdSet(input.CapacityReservationFleetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityReservationFleetId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeCapacityReservationsRequest = function (input, context) {
    var entries = {};
    if (input.CapacityReservationIds !== undefined && input.CapacityReservationIds !== null) {
        var memberEntries = serializeAws_ec2CapacityReservationIdSet(input.CapacityReservationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityReservationId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeCarrierGatewaysRequest = function (input, context) {
    var entries = {};
    if (input.CarrierGatewayIds !== undefined && input.CarrierGatewayIds !== null) {
        var memberEntries = serializeAws_ec2CarrierGatewayIdSet(input.CarrierGatewayIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CarrierGatewayId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeClassicLinkInstancesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeClientVpnAuthorizationRulesRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeClientVpnConnectionsRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeClientVpnEndpointsRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointIds !== undefined && input.ClientVpnEndpointIds !== null) {
        var memberEntries = serializeAws_ec2ClientVpnEndpointIdList(input.ClientVpnEndpointIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ClientVpnEndpointId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeClientVpnRoutesRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeClientVpnTargetNetworksRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.AssociationIds !== undefined && input.AssociationIds !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.AssociationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AssociationIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeCoipPoolsRequest = function (input, context) {
    var entries = {};
    if (input.PoolIds !== undefined && input.PoolIds !== null) {
        var memberEntries = serializeAws_ec2CoipPoolIdSet(input.PoolIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PoolId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeConversionTasksRequest = function (input, context) {
    var entries = {};
    if (input.ConversionTaskIds !== undefined && input.ConversionTaskIds !== null) {
        var memberEntries = serializeAws_ec2ConversionIdStringList(input.ConversionTaskIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ConversionTaskId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeCustomerGatewaysRequest = function (input, context) {
    var entries = {};
    if (input.CustomerGatewayIds !== undefined && input.CustomerGatewayIds !== null) {
        var memberEntries = serializeAws_ec2CustomerGatewayIdStringList(input.CustomerGatewayIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CustomerGatewayId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeDhcpOptionsRequest = function (input, context) {
    var entries = {};
    if (input.DhcpOptionsIds !== undefined && input.DhcpOptionsIds !== null) {
        var memberEntries = serializeAws_ec2DhcpOptionsIdStringList(input.DhcpOptionsIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DhcpOptionsId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeEgressOnlyInternetGatewaysRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EgressOnlyInternetGatewayIds !== undefined && input.EgressOnlyInternetGatewayIds !== null) {
        var memberEntries = serializeAws_ec2EgressOnlyInternetGatewayIdList(input.EgressOnlyInternetGatewayIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EgressOnlyInternetGatewayId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeElasticGpusRequest = function (input, context) {
    var entries = {};
    if (input.ElasticGpuIds !== undefined && input.ElasticGpuIds !== null) {
        var memberEntries = serializeAws_ec2ElasticGpuIdSet(input.ElasticGpuIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ElasticGpuId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeExportImageTasksRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ExportImageTaskIds !== undefined && input.ExportImageTaskIds !== null) {
        var memberEntries = serializeAws_ec2ExportImageTaskIdList(input.ExportImageTaskIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExportImageTaskId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeExportTasksRequest = function (input, context) {
    var entries = {};
    if (input.ExportTaskIds !== undefined && input.ExportTaskIds !== null) {
        var memberEntries = serializeAws_ec2ExportTaskIdStringList(input.ExportTaskIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExportTaskId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeFastLaunchImagesRequest = function (input, context) {
    var entries = {};
    if (input.ImageIds !== undefined && input.ImageIds !== null) {
        var memberEntries = serializeAws_ec2FastLaunchImageIdList(input.ImageIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ImageId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeFastSnapshotRestoresRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeFleetHistoryRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EventType !== undefined && input.EventType !== null) {
        entries["EventType"] = input.EventType;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.FleetId !== undefined && input.FleetId !== null) {
        entries["FleetId"] = input.FleetId;
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
var serializeAws_ec2DescribeFleetInstancesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.FleetId !== undefined && input.FleetId !== null) {
        entries["FleetId"] = input.FleetId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeFleetsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.FleetIds !== undefined && input.FleetIds !== null) {
        var memberEntries = serializeAws_ec2FleetIdSet(input.FleetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "FleetId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeFlowLogsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.FlowLogIds !== undefined && input.FlowLogIds !== null) {
        var memberEntries = serializeAws_ec2FlowLogIdList(input.FlowLogIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "FlowLogId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeFpgaImageAttributeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    return entries;
};
var serializeAws_ec2DescribeFpgaImagesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageIds !== undefined && input.FpgaImageIds !== null) {
        var memberEntries = serializeAws_ec2FpgaImageIdList(input.FpgaImageIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "FpgaImageId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Owners !== undefined && input.Owners !== null) {
        var memberEntries = serializeAws_ec2OwnerStringList(input.Owners, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Owner.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeHostReservationOfferingsRequest = function (input, context) {
    var entries = {};
    if (input.Filter !== undefined && input.Filter !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxDuration !== undefined && input.MaxDuration !== null) {
        entries["MaxDuration"] = input.MaxDuration;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.MinDuration !== undefined && input.MinDuration !== null) {
        entries["MinDuration"] = input.MinDuration;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.OfferingId !== undefined && input.OfferingId !== null) {
        entries["OfferingId"] = input.OfferingId;
    }
    return entries;
};
var serializeAws_ec2DescribeHostReservationsRequest = function (input, context) {
    var entries = {};
    if (input.Filter !== undefined && input.Filter !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.HostReservationIdSet !== undefined && input.HostReservationIdSet !== null) {
        var memberEntries = serializeAws_ec2HostReservationIdSet(input.HostReservationIdSet, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "HostReservationIdSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeHostsRequest = function (input, context) {
    var entries = {};
    if (input.Filter !== undefined && input.Filter !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.HostIds !== undefined && input.HostIds !== null) {
        var memberEntries = serializeAws_ec2RequestHostIdList(input.HostIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "HostId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeIamInstanceProfileAssociationsRequest = function (input, context) {
    var entries = {};
    if (input.AssociationIds !== undefined && input.AssociationIds !== null) {
        var memberEntries = serializeAws_ec2AssociationIdList(input.AssociationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AssociationId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeIdentityIdFormatRequest = function (input, context) {
    var entries = {};
    if (input.PrincipalArn !== undefined && input.PrincipalArn !== null) {
        entries["PrincipalArn"] = input.PrincipalArn;
    }
    if (input.Resource !== undefined && input.Resource !== null) {
        entries["Resource"] = input.Resource;
    }
    return entries;
};
var serializeAws_ec2DescribeIdFormatRequest = function (input, context) {
    var entries = {};
    if (input.Resource !== undefined && input.Resource !== null) {
        entries["Resource"] = input.Resource;
    }
    return entries;
};
var serializeAws_ec2DescribeImageAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeImagesRequest = function (input, context) {
    var entries = {};
    if (input.ExecutableUsers !== undefined && input.ExecutableUsers !== null) {
        var memberEntries = serializeAws_ec2ExecutableByStringList(input.ExecutableUsers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExecutableBy.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ImageIds !== undefined && input.ImageIds !== null) {
        var memberEntries = serializeAws_ec2ImageIdStringList(input.ImageIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ImageId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Owners !== undefined && input.Owners !== null) {
        var memberEntries = serializeAws_ec2OwnerStringList(input.Owners, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Owner.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.IncludeDeprecated !== undefined && input.IncludeDeprecated !== null) {
        entries["IncludeDeprecated"] = input.IncludeDeprecated;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeImportImageTasksRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ImportTaskIds !== undefined && input.ImportTaskIds !== null) {
        var memberEntries = serializeAws_ec2ImportTaskIdList(input.ImportTaskIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ImportTaskId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeImportSnapshotTasksRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filters.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ImportTaskIds !== undefined && input.ImportTaskIds !== null) {
        var memberEntries = serializeAws_ec2ImportSnapshotTaskIdList(input.ImportTaskIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ImportTaskId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeInstanceAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
var serializeAws_ec2DescribeInstanceCreditSpecificationsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeInstanceEventNotificationAttributesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeInstanceEventWindowsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceEventWindowIds !== undefined && input.InstanceEventWindowIds !== null) {
        var memberEntries = serializeAws_ec2InstanceEventWindowIdSet(input.InstanceEventWindowIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceEventWindowId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeInstancesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeInstanceStatusRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IncludeAllInstances !== undefined && input.IncludeAllInstances !== null) {
        entries["IncludeAllInstances"] = input.IncludeAllInstances;
    }
    return entries;
};
var serializeAws_ec2DescribeInstanceTypeOfferingsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LocationType !== undefined && input.LocationType !== null) {
        entries["LocationType"] = input.LocationType;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeInstanceTypesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTypes !== undefined && input.InstanceTypes !== null) {
        var memberEntries = serializeAws_ec2RequestInstanceTypeList(input.InstanceTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeInternetGatewaysRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayIds !== undefined && input.InternetGatewayIds !== null) {
        var memberEntries = serializeAws_ec2InternetGatewayIdList(input.InternetGatewayIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InternetGatewayId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeIpamPoolsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamPoolIds !== undefined && input.IpamPoolIds !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.IpamPoolIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpamPoolId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeIpamScopesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamScopeIds !== undefined && input.IpamScopeIds !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.IpamScopeIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpamScopeId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeIpamsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamIds !== undefined && input.IpamIds !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.IpamIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpamId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeIpv6PoolsRequest = function (input, context) {
    var entries = {};
    if (input.PoolIds !== undefined && input.PoolIds !== null) {
        var memberEntries = serializeAws_ec2Ipv6PoolIdList(input.PoolIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PoolId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeKeyPairsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.KeyNames !== undefined && input.KeyNames !== null) {
        var memberEntries = serializeAws_ec2KeyNameStringList(input.KeyNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "KeyName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.KeyPairIds !== undefined && input.KeyPairIds !== null) {
        var memberEntries = serializeAws_ec2KeyPairIdStringList(input.KeyPairIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "KeyPairId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IncludePublicKey !== undefined && input.IncludePublicKey !== null) {
        entries["IncludePublicKey"] = input.IncludePublicKey;
    }
    return entries;
};
var serializeAws_ec2DescribeLaunchTemplatesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateIds !== undefined && input.LaunchTemplateIds !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateIdStringList(input.LaunchTemplateIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplateNames !== undefined && input.LaunchTemplateNames !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateNameStringList(input.LaunchTemplateNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeLaunchTemplateVersionsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Versions !== undefined && input.Versions !== null) {
        var memberEntries = serializeAws_ec2VersionStringList(input.Versions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateVersion.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MinVersion !== undefined && input.MinVersion !== null) {
        entries["MinVersion"] = input.MinVersion;
    }
    if (input.MaxVersion !== undefined && input.MaxVersion !== null) {
        entries["MaxVersion"] = input.MaxVersion;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeLocalGatewayRouteTablesRequest = function (input, context) {
    var entries = {};
    if (input.LocalGatewayRouteTableIds !== undefined && input.LocalGatewayRouteTableIds !== null) {
        var memberEntries = serializeAws_ec2LocalGatewayRouteTableIdSet(input.LocalGatewayRouteTableIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LocalGatewayRouteTableId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest = function (input, context) {
    var entries = {};
    if (input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds !== undefined &&
        input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds !== null) {
        var memberEntries = serializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet(input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest = function (input, context) {
    var entries = {};
    if (input.LocalGatewayRouteTableVpcAssociationIds !== undefined &&
        input.LocalGatewayRouteTableVpcAssociationIds !== null) {
        var memberEntries = serializeAws_ec2LocalGatewayRouteTableVpcAssociationIdSet(input.LocalGatewayRouteTableVpcAssociationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LocalGatewayRouteTableVpcAssociationId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeLocalGatewaysRequest = function (input, context) {
    var entries = {};
    if (input.LocalGatewayIds !== undefined && input.LocalGatewayIds !== null) {
        var memberEntries = serializeAws_ec2LocalGatewayIdSet(input.LocalGatewayIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LocalGatewayId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest = function (input, context) {
    var entries = {};
    if (input.LocalGatewayVirtualInterfaceGroupIds !== undefined && input.LocalGatewayVirtualInterfaceGroupIds !== null) {
        var memberEntries = serializeAws_ec2LocalGatewayVirtualInterfaceGroupIdSet(input.LocalGatewayVirtualInterfaceGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LocalGatewayVirtualInterfaceGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeLocalGatewayVirtualInterfacesRequest = function (input, context) {
    var entries = {};
    if (input.LocalGatewayVirtualInterfaceIds !== undefined && input.LocalGatewayVirtualInterfaceIds !== null) {
        var memberEntries = serializeAws_ec2LocalGatewayVirtualInterfaceIdSet(input.LocalGatewayVirtualInterfaceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LocalGatewayVirtualInterfaceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeManagedPrefixListsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.PrefixListIds !== undefined && input.PrefixListIds !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.PrefixListIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrefixListId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeMovingAddressesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.PublicIps !== undefined && input.PublicIps !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.PublicIps, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PublicIp.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeNatGatewaysRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NatGatewayIds !== undefined && input.NatGatewayIds !== null) {
        var memberEntries = serializeAws_ec2NatGatewayIdStringList(input.NatGatewayIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NatGatewayId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeNetworkAclsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkAclIds !== undefined && input.NetworkAclIds !== null) {
        var memberEntries = serializeAws_ec2NetworkAclIdStringList(input.NetworkAclIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkAclId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInsightsAccessScopeAnalysisIds !== undefined &&
        input.NetworkInsightsAccessScopeAnalysisIds !== null) {
        var memberEntries = serializeAws_ec2NetworkInsightsAccessScopeAnalysisIdList(input.NetworkInsightsAccessScopeAnalysisIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInsightsAccessScopeAnalysisId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NetworkInsightsAccessScopeId !== undefined && input.NetworkInsightsAccessScopeId !== null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    if (input.AnalysisStartTimeBegin !== undefined && input.AnalysisStartTimeBegin !== null) {
        entries["AnalysisStartTimeBegin"] = input.AnalysisStartTimeBegin.toISOString().split(".")[0] + "Z";
    }
    if (input.AnalysisStartTimeEnd !== undefined && input.AnalysisStartTimeEnd !== null) {
        entries["AnalysisStartTimeEnd"] = input.AnalysisStartTimeEnd.toISOString().split(".")[0] + "Z";
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeNetworkInsightsAccessScopesRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInsightsAccessScopeIds !== undefined && input.NetworkInsightsAccessScopeIds !== null) {
        var memberEntries = serializeAws_ec2NetworkInsightsAccessScopeIdList(input.NetworkInsightsAccessScopeIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInsightsAccessScopeId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeNetworkInsightsAnalysesRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInsightsAnalysisIds !== undefined && input.NetworkInsightsAnalysisIds !== null) {
        var memberEntries = serializeAws_ec2NetworkInsightsAnalysisIdList(input.NetworkInsightsAnalysisIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInsightsAnalysisId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NetworkInsightsPathId !== undefined && input.NetworkInsightsPathId !== null) {
        entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
    }
    if (input.AnalysisStartTime !== undefined && input.AnalysisStartTime !== null) {
        entries["AnalysisStartTime"] = input.AnalysisStartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.AnalysisEndTime !== undefined && input.AnalysisEndTime !== null) {
        entries["AnalysisEndTime"] = input.AnalysisEndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeNetworkInsightsPathsRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInsightsPathIds !== undefined && input.NetworkInsightsPathIds !== null) {
        var memberEntries = serializeAws_ec2NetworkInsightsPathIdList(input.NetworkInsightsPathIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInsightsPathId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeNetworkInterfaceAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
var serializeAws_ec2DescribeNetworkInterfacePermissionsRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInterfacePermissionIds !== undefined && input.NetworkInterfacePermissionIds !== null) {
        var memberEntries = serializeAws_ec2NetworkInterfacePermissionIdList(input.NetworkInterfacePermissionIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterfacePermissionId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeNetworkInterfacesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        var memberEntries = serializeAws_ec2NetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterfaceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribePlacementGroupsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupNames !== undefined && input.GroupNames !== null) {
        var memberEntries = serializeAws_ec2PlacementGroupStringList(input.GroupNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GroupName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.GroupIds !== undefined && input.GroupIds !== null) {
        var memberEntries = serializeAws_ec2PlacementGroupIdStringList(input.GroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribePrefixListsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.PrefixListIds !== undefined && input.PrefixListIds !== null) {
        var memberEntries = serializeAws_ec2PrefixListResourceIdStringList(input.PrefixListIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrefixListId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribePrincipalIdFormatRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Resources !== undefined && input.Resources !== null) {
        var memberEntries = serializeAws_ec2ResourceList(input.Resources, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Resource.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribePublicIpv4PoolsRequest = function (input, context) {
    var entries = {};
    if (input.PoolIds !== undefined && input.PoolIds !== null) {
        var memberEntries = serializeAws_ec2PublicIpv4PoolIdStringList(input.PoolIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PoolId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeRegionsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RegionNames !== undefined && input.RegionNames !== null) {
        var memberEntries = serializeAws_ec2RegionNameStringList(input.RegionNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RegionName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.AllRegions !== undefined && input.AllRegions !== null) {
        entries["AllRegions"] = input.AllRegions;
    }
    return entries;
};
var serializeAws_ec2DescribeReplaceRootVolumeTasksRequest = function (input, context) {
    var entries = {};
    if (input.ReplaceRootVolumeTaskIds !== undefined && input.ReplaceRootVolumeTaskIds !== null) {
        var memberEntries = serializeAws_ec2ReplaceRootVolumeTaskIds(input.ReplaceRootVolumeTaskIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReplaceRootVolumeTaskId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeReservedInstancesListingsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ReservedInstancesId !== undefined && input.ReservedInstancesId !== null) {
        entries["ReservedInstancesId"] = input.ReservedInstancesId;
    }
    if (input.ReservedInstancesListingId !== undefined && input.ReservedInstancesListingId !== null) {
        entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
    }
    return entries;
};
var serializeAws_ec2DescribeReservedInstancesModificationsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ReservedInstancesModificationIds !== undefined && input.ReservedInstancesModificationIds !== null) {
        var memberEntries = serializeAws_ec2ReservedInstancesModificationIdStringList(input.ReservedInstancesModificationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReservedInstancesModificationId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeReservedInstancesOfferingsRequest = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.IncludeMarketplace !== undefined && input.IncludeMarketplace !== null) {
        entries["IncludeMarketplace"] = input.IncludeMarketplace;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.MaxDuration !== undefined && input.MaxDuration !== null) {
        entries["MaxDuration"] = input.MaxDuration;
    }
    if (input.MaxInstanceCount !== undefined && input.MaxInstanceCount !== null) {
        entries["MaxInstanceCount"] = input.MaxInstanceCount;
    }
    if (input.MinDuration !== undefined && input.MinDuration !== null) {
        entries["MinDuration"] = input.MinDuration;
    }
    if (input.OfferingClass !== undefined && input.OfferingClass !== null) {
        entries["OfferingClass"] = input.OfferingClass;
    }
    if (input.ProductDescription !== undefined && input.ProductDescription !== null) {
        entries["ProductDescription"] = input.ProductDescription;
    }
    if (input.ReservedInstancesOfferingIds !== undefined && input.ReservedInstancesOfferingIds !== null) {
        var memberEntries = serializeAws_ec2ReservedInstancesOfferingIdStringList(input.ReservedInstancesOfferingIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReservedInstancesOfferingId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTenancy !== undefined && input.InstanceTenancy !== null) {
        entries["InstanceTenancy"] = input.InstanceTenancy;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.OfferingType !== undefined && input.OfferingType !== null) {
        entries["OfferingType"] = input.OfferingType;
    }
    return entries;
};
var serializeAws_ec2DescribeReservedInstancesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.OfferingClass !== undefined && input.OfferingClass !== null) {
        entries["OfferingClass"] = input.OfferingClass;
    }
    if (input.ReservedInstancesIds !== undefined && input.ReservedInstancesIds !== null) {
        var memberEntries = serializeAws_ec2ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReservedInstancesId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.OfferingType !== undefined && input.OfferingType !== null) {
        entries["OfferingType"] = input.OfferingType;
    }
    return entries;
};
var serializeAws_ec2DescribeRouteTablesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableIds !== undefined && input.RouteTableIds !== null) {
        var memberEntries = serializeAws_ec2RouteTableIdStringList(input.RouteTableIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RouteTableId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeScheduledInstanceAvailabilityRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.FirstSlotStartTimeRange !== undefined && input.FirstSlotStartTimeRange !== null) {
        var memberEntries = serializeAws_ec2SlotDateTimeRangeRequest(input.FirstSlotStartTimeRange, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "FirstSlotStartTimeRange.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.MaxSlotDurationInHours !== undefined && input.MaxSlotDurationInHours !== null) {
        entries["MaxSlotDurationInHours"] = input.MaxSlotDurationInHours;
    }
    if (input.MinSlotDurationInHours !== undefined && input.MinSlotDurationInHours !== null) {
        entries["MinSlotDurationInHours"] = input.MinSlotDurationInHours;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Recurrence !== undefined && input.Recurrence !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstanceRecurrenceRequest(input.Recurrence, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Recurrence.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeScheduledInstancesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.ScheduledInstanceIds !== undefined && input.ScheduledInstanceIds !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstanceIdRequestSet(input.ScheduledInstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ScheduledInstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SlotStartTimeRange !== undefined && input.SlotStartTimeRange !== null) {
        var memberEntries = serializeAws_ec2SlotStartTimeRangeRequest(input.SlotStartTimeRange, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SlotStartTimeRange.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeSecurityGroupReferencesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        var memberEntries = serializeAws_ec2GroupIds(input.GroupId, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeSecurityGroupRulesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleIds !== undefined && input.SecurityGroupRuleIds !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupRuleId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeSecurityGroupsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.GroupIds !== undefined && input.GroupIds !== null) {
        var memberEntries = serializeAws_ec2GroupIdStringList(input.GroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.GroupNames !== undefined && input.GroupNames !== null) {
        var memberEntries = serializeAws_ec2GroupNameStringList(input.GroupNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GroupName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeSnapshotAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeSnapshotsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.OwnerIds !== undefined && input.OwnerIds !== null) {
        var memberEntries = serializeAws_ec2OwnerStringList(input.OwnerIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Owner.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RestorableByUserIds !== undefined && input.RestorableByUserIds !== null) {
        var memberEntries = serializeAws_ec2RestorableByStringList(input.RestorableByUserIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RestorableBy.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SnapshotIds !== undefined && input.SnapshotIds !== null) {
        var memberEntries = serializeAws_ec2SnapshotIdStringList(input.SnapshotIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SnapshotId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeSnapshotTierStatusRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeSpotDatafeedSubscriptionRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeSpotFleetInstancesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SpotFleetRequestId !== undefined && input.SpotFleetRequestId !== null) {
        entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
    }
    return entries;
};
var serializeAws_ec2DescribeSpotFleetRequestHistoryRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EventType !== undefined && input.EventType !== null) {
        entries["EventType"] = input.EventType;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SpotFleetRequestId !== undefined && input.SpotFleetRequestId !== null) {
        entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
var serializeAws_ec2DescribeSpotFleetRequestsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SpotFleetRequestIds !== undefined && input.SpotFleetRequestIds !== null) {
        var memberEntries = serializeAws_ec2SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SpotFleetRequestId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeSpotInstanceRequestsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotInstanceRequestIds !== undefined && input.SpotInstanceRequestIds !== null) {
        var memberEntries = serializeAws_ec2SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SpotInstanceRequestId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeSpotPriceHistoryRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EndTime !== undefined && input.EndTime !== null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceTypes !== undefined && input.InstanceTypes !== null) {
        var memberEntries = serializeAws_ec2InstanceTypeList(input.InstanceTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.ProductDescriptions !== undefined && input.ProductDescriptions !== null) {
        var memberEntries = serializeAws_ec2ProductDescriptionList(input.ProductDescriptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ProductDescription.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
var serializeAws_ec2DescribeStaleSecurityGroupsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2DescribeStoreImageTasksRequest = function (input, context) {
    var entries = {};
    if (input.ImageIds !== undefined && input.ImageIds !== null) {
        var memberEntries = serializeAws_ec2ImageIdList(input.ImageIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ImageId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeSubnetsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        var memberEntries = serializeAws_ec2SubnetIdStringList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SubnetId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeTagsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeTrafficMirrorFiltersRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorFilterIds !== undefined && input.TrafficMirrorFilterIds !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorFilterIdList(input.TrafficMirrorFilterIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TrafficMirrorFilterId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeTrafficMirrorSessionsRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorSessionIds !== undefined && input.TrafficMirrorSessionIds !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorSessionIdList(input.TrafficMirrorSessionIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TrafficMirrorSessionId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeTrafficMirrorTargetsRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorTargetIds !== undefined && input.TrafficMirrorTargetIds !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorTargetIdList(input.TrafficMirrorTargetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TrafficMirrorTargetId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeTransitGatewayAttachmentsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TransitGatewayAttachmentIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeTransitGatewayConnectPeersRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayConnectPeerIds !== undefined && input.TransitGatewayConnectPeerIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayConnectPeerIdStringList(input.TransitGatewayConnectPeerIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TransitGatewayConnectPeerIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeTransitGatewayConnectsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TransitGatewayAttachmentIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeTransitGatewayMulticastDomainsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainIds !== undefined && input.TransitGatewayMulticastDomainIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayMulticastDomainIdStringList(input.TransitGatewayMulticastDomainIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TransitGatewayMulticastDomainIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TransitGatewayAttachmentIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeTransitGatewayRouteTablesRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableIds !== undefined && input.TransitGatewayRouteTableIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayRouteTableIdStringList(input.TransitGatewayRouteTableIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TransitGatewayRouteTableIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeTransitGatewaysRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayIds !== undefined && input.TransitGatewayIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayIdStringList(input.TransitGatewayIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TransitGatewayIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeTransitGatewayVpcAttachmentsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TransitGatewayAttachmentIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeTrunkInterfaceAssociationsRequest = function (input, context) {
    var entries = {};
    if (input.AssociationIds !== undefined && input.AssociationIds !== null) {
        var memberEntries = serializeAws_ec2TrunkInterfaceAssociationIdList(input.AssociationIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AssociationId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeVolumeAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeVolumesModificationsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VolumeIds !== undefined && input.VolumeIds !== null) {
        var memberEntries = serializeAws_ec2VolumeIdStringList(input.VolumeIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VolumeId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeVolumesRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.VolumeIds !== undefined && input.VolumeIds !== null) {
        var memberEntries = serializeAws_ec2VolumeIdStringList(input.VolumeIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VolumeId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeVolumeStatusRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.VolumeIds !== undefined && input.VolumeIds !== null) {
        var memberEntries = serializeAws_ec2VolumeIdStringList(input.VolumeIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VolumeId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeVpcAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeVpcClassicLinkDnsSupportRequest = function (input, context) {
    var entries = {};
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.VpcIds !== undefined && input.VpcIds !== null) {
        var memberEntries = serializeAws_ec2VpcClassicLinkIdList(input.VpcIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeVpcClassicLinkRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcIds !== undefined && input.VpcIds !== null) {
        var memberEntries = serializeAws_ec2VpcClassicLinkIdList(input.VpcIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DescribeVpcEndpointConnectionNotificationsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ConnectionNotificationId !== undefined && input.ConnectionNotificationId !== null) {
        entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeVpcEndpointConnectionsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeVpcEndpointServiceConfigurationsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceIds !== undefined && input.ServiceIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointServiceIdList(input.ServiceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ServiceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeVpcEndpointServicePermissionsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeVpcEndpointServicesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceNames !== undefined && input.ServiceNames !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.ServiceNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ServiceName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeVpcEndpointsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcEndpointId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2DescribeVpcPeeringConnectionsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionIds !== undefined && input.VpcPeeringConnectionIds !== null) {
        var memberEntries = serializeAws_ec2VpcPeeringConnectionIdList(input.VpcPeeringConnectionIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcPeeringConnectionId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeVpcsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.VpcIds !== undefined && input.VpcIds !== null) {
        var memberEntries = serializeAws_ec2VpcIdStringList(input.VpcIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2DescribeVpnConnectionsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.VpnConnectionIds !== undefined && input.VpnConnectionIds !== null) {
        var memberEntries = serializeAws_ec2VpnConnectionIdStringList(input.VpnConnectionIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpnConnectionId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DescribeVpnGatewaysRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.VpnGatewayIds !== undefined && input.VpnGatewayIds !== null) {
        var memberEntries = serializeAws_ec2VpnGatewayIdStringList(input.VpnGatewayIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpnGatewayId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DestinationOptionsRequest = function (input, context) {
    var entries = {};
    if (input.FileFormat !== undefined && input.FileFormat !== null) {
        entries["FileFormat"] = input.FileFormat;
    }
    if (input.HiveCompatiblePartitions !== undefined && input.HiveCompatiblePartitions !== null) {
        entries["HiveCompatiblePartitions"] = input.HiveCompatiblePartitions;
    }
    if (input.PerHourPartition !== undefined && input.PerHourPartition !== null) {
        entries["PerHourPartition"] = input.PerHourPartition;
    }
    return entries;
};
var serializeAws_ec2DetachClassicLinkVpcRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2DetachInternetGatewayRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayId !== undefined && input.InternetGatewayId !== null) {
        entries["InternetGatewayId"] = input.InternetGatewayId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2DetachNetworkInterfaceRequest = function (input, context) {
    var entries = {};
    if (input.AttachmentId !== undefined && input.AttachmentId !== null) {
        entries["AttachmentId"] = input.AttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    return entries;
};
var serializeAws_ec2DetachVolumeRequest = function (input, context) {
    var entries = {};
    if (input.Device !== undefined && input.Device !== null) {
        entries["Device"] = input.Device;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DetachVpnGatewayRequest = function (input, context) {
    var entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DhcpOptionsIdStringList = function (input, context) {
    var e_34, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_34 = __values(input), input_34_1 = input_34.next(); !input_34_1.done; input_34_1 = input_34.next()) {
            var entry = input_34_1.value;
            if (entry === null) {
                continue;
            }
            entries["DhcpOptionsId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_34_1) { e_34 = { error: e_34_1 }; }
    finally {
        try {
            if (input_34_1 && !input_34_1.done && (_a = input_34.return)) _a.call(input_34);
        }
        finally { if (e_34) throw e_34.error; }
    }
    return entries;
};
var serializeAws_ec2DirectoryServiceAuthenticationRequest = function (input, context) {
    var entries = {};
    if (input.DirectoryId !== undefined && input.DirectoryId !== null) {
        entries["DirectoryId"] = input.DirectoryId;
    }
    return entries;
};
var serializeAws_ec2DisableEbsEncryptionByDefaultRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisableFastLaunchRequest = function (input, context) {
    var entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisableFastSnapshotRestoresRequest = function (input, context) {
    var entries = {};
    if (input.AvailabilityZones !== undefined && input.AvailabilityZones !== null) {
        var memberEntries = serializeAws_ec2AvailabilityZoneStringList(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AvailabilityZone.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SourceSnapshotIds !== undefined && input.SourceSnapshotIds !== null) {
        var memberEntries = serializeAws_ec2SnapshotIdStringList(input.SourceSnapshotIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourceSnapshotId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisableImageDeprecationRequest = function (input, context) {
    var entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisableIpamOrganizationAdminAccountRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.DelegatedAdminAccountId !== undefined && input.DelegatedAdminAccountId !== null) {
        entries["DelegatedAdminAccountId"] = input.DelegatedAdminAccountId;
    }
    return entries;
};
var serializeAws_ec2DisableSerialConsoleAccessRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisableTransitGatewayRouteTablePropagationRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisableVgwRoutePropagationRequest = function (input, context) {
    var entries = {};
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisableVpcClassicLinkDnsSupportRequest = function (input, context) {
    var entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2DisableVpcClassicLinkRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2DisassociateAddressRequest = function (input, context) {
    var entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisassociateClientVpnTargetNetworkRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisassociateEnclaveCertificateIamRoleRequest = function (input, context) {
    var entries = {};
    if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisassociateIamInstanceProfileRequest = function (input, context) {
    var entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
var serializeAws_ec2DisassociateInstanceEventWindowRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceEventWindowId !== undefined && input.InstanceEventWindowId !== null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    if (input.AssociationTarget !== undefined && input.AssociationTarget !== null) {
        var memberEntries = serializeAws_ec2InstanceEventWindowDisassociationRequest(input.AssociationTarget, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AssociationTarget.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DisassociateRouteTableRequest = function (input, context) {
    var entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisassociateSubnetCidrBlockRequest = function (input, context) {
    var entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
var serializeAws_ec2DisassociateTransitGatewayMulticastDomainRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SubnetIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisassociateTransitGatewayRouteTableRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisassociateTrunkInterfaceRequest = function (input, context) {
    var entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2DisassociateVpcCidrBlockRequest = function (input, context) {
    var entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
var serializeAws_ec2DiskImage = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Image !== undefined && input.Image !== null) {
        var memberEntries = serializeAws_ec2DiskImageDetail(input.Image, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Image.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Volume !== undefined && input.Volume !== null) {
        var memberEntries = serializeAws_ec2VolumeDetail(input.Volume, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Volume.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2DiskImageDetail = function (input, context) {
    var entries = {};
    if (input.Bytes !== undefined && input.Bytes !== null) {
        entries["Bytes"] = input.Bytes;
    }
    if (input.Format !== undefined && input.Format !== null) {
        entries["Format"] = input.Format;
    }
    if (input.ImportManifestUrl !== undefined && input.ImportManifestUrl !== null) {
        entries["ImportManifestUrl"] = input.ImportManifestUrl;
    }
    return entries;
};
var serializeAws_ec2DiskImageList = function (input, context) {
    var e_35, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_35 = __values(input), input_35_1 = input_35.next(); !input_35_1.done; input_35_1 = input_35.next()) {
            var entry = input_35_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2DiskImage(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Member.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_35_1) { e_35 = { error: e_35_1 }; }
    finally {
        try {
            if (input_35_1 && !input_35_1.done && (_a = input_35.return)) _a.call(input_35);
        }
        finally { if (e_35) throw e_35.error; }
    }
    return entries;
};
var serializeAws_ec2DnsOptionsSpecification = function (input, context) {
    var entries = {};
    if (input.DnsRecordIpType !== undefined && input.DnsRecordIpType !== null) {
        entries["DnsRecordIpType"] = input.DnsRecordIpType;
    }
    return entries;
};
var serializeAws_ec2DnsServersOptionsModifyStructure = function (input, context) {
    var entries = {};
    if (input.CustomDnsServers !== undefined && input.CustomDnsServers !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.CustomDnsServers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CustomDnsServers.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
var serializeAws_ec2EbsBlockDevice = function (input, context) {
    var entries = {};
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize !== undefined && input.VolumeSize !== null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Throughput !== undefined && input.Throughput !== null) {
        entries["Throughput"] = input.Throughput;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    return entries;
};
var serializeAws_ec2EbsInstanceBlockDeviceSpecification = function (input, context) {
    var entries = {};
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    return entries;
};
var serializeAws_ec2EgressOnlyInternetGatewayIdList = function (input, context) {
    var e_36, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_36 = __values(input), input_36_1 = input_36.next(); !input_36_1.done; input_36_1 = input_36.next()) {
            var entry = input_36_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_36_1) { e_36 = { error: e_36_1 }; }
    finally {
        try {
            if (input_36_1 && !input_36_1.done && (_a = input_36.return)) _a.call(input_36);
        }
        finally { if (e_36) throw e_36.error; }
    }
    return entries;
};
var serializeAws_ec2ElasticGpuIdSet = function (input, context) {
    var e_37, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_37 = __values(input), input_37_1 = input_37.next(); !input_37_1.done; input_37_1 = input_37.next()) {
            var entry = input_37_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_37_1) { e_37 = { error: e_37_1 }; }
    finally {
        try {
            if (input_37_1 && !input_37_1.done && (_a = input_37.return)) _a.call(input_37);
        }
        finally { if (e_37) throw e_37.error; }
    }
    return entries;
};
var serializeAws_ec2ElasticGpuSpecification = function (input, context) {
    var entries = {};
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    return entries;
};
var serializeAws_ec2ElasticGpuSpecificationList = function (input, context) {
    var e_38, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_38 = __values(input), input_38_1 = input_38.next(); !input_38_1.done; input_38_1 = input_38.next()) {
            var entry = input_38_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ElasticGpuSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["ElasticGpuSpecification.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_38_1) { e_38 = { error: e_38_1 }; }
    finally {
        try {
            if (input_38_1 && !input_38_1.done && (_a = input_38.return)) _a.call(input_38);
        }
        finally { if (e_38) throw e_38.error; }
    }
    return entries;
};
var serializeAws_ec2ElasticGpuSpecifications = function (input, context) {
    var e_39, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_39 = __values(input), input_39_1 = input_39.next(); !input_39_1.done; input_39_1 = input_39.next()) {
            var entry = input_39_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ElasticGpuSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_39_1) { e_39 = { error: e_39_1 }; }
    finally {
        try {
            if (input_39_1 && !input_39_1.done && (_a = input_39.return)) _a.call(input_39);
        }
        finally { if (e_39) throw e_39.error; }
    }
    return entries;
};
var serializeAws_ec2ElasticInferenceAccelerator = function (input, context) {
    var entries = {};
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.Count !== undefined && input.Count !== null) {
        entries["Count"] = input.Count;
    }
    return entries;
};
var serializeAws_ec2ElasticInferenceAccelerators = function (input, context) {
    var e_40, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_40 = __values(input), input_40_1 = input_40.next(); !input_40_1.done; input_40_1 = input_40.next()) {
            var entry = input_40_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ElasticInferenceAccelerator(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_40_1) { e_40 = { error: e_40_1 }; }
    finally {
        try {
            if (input_40_1 && !input_40_1.done && (_a = input_40.return)) _a.call(input_40);
        }
        finally { if (e_40) throw e_40.error; }
    }
    return entries;
};
var serializeAws_ec2EnableEbsEncryptionByDefaultRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2EnableFastLaunchRequest = function (input, context) {
    var entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.SnapshotConfiguration !== undefined && input.SnapshotConfiguration !== null) {
        var memberEntries = serializeAws_ec2FastLaunchSnapshotConfigurationRequest(input.SnapshotConfiguration, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SnapshotConfiguration.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplate !== undefined && input.LaunchTemplate !== null) {
        var memberEntries = serializeAws_ec2FastLaunchLaunchTemplateSpecificationRequest(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplate.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MaxParallelLaunches !== undefined && input.MaxParallelLaunches !== null) {
        entries["MaxParallelLaunches"] = input.MaxParallelLaunches;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2EnableFastSnapshotRestoresRequest = function (input, context) {
    var entries = {};
    if (input.AvailabilityZones !== undefined && input.AvailabilityZones !== null) {
        var memberEntries = serializeAws_ec2AvailabilityZoneStringList(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AvailabilityZone.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SourceSnapshotIds !== undefined && input.SourceSnapshotIds !== null) {
        var memberEntries = serializeAws_ec2SnapshotIdStringList(input.SourceSnapshotIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourceSnapshotId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2EnableImageDeprecationRequest = function (input, context) {
    var entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DeprecateAt !== undefined && input.DeprecateAt !== null) {
        entries["DeprecateAt"] = input.DeprecateAt.toISOString().split(".")[0] + "Z";
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2EnableIpamOrganizationAdminAccountRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.DelegatedAdminAccountId !== undefined && input.DelegatedAdminAccountId !== null) {
        entries["DelegatedAdminAccountId"] = input.DelegatedAdminAccountId;
    }
    return entries;
};
var serializeAws_ec2EnableSerialConsoleAccessRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2EnableTransitGatewayRouteTablePropagationRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2EnableVgwRoutePropagationRequest = function (input, context) {
    var entries = {};
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2EnableVolumeIORequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    return entries;
};
var serializeAws_ec2EnableVpcClassicLinkDnsSupportRequest = function (input, context) {
    var entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2EnableVpcClassicLinkRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2EnclaveOptionsRequest = function (input, context) {
    var entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
var serializeAws_ec2ExcludedInstanceTypeSet = function (input, context) {
    var e_41, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_41 = __values(input), input_41_1 = input_41.next(); !input_41_1.done; input_41_1 = input_41.next()) {
            var entry = input_41_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_41_1) { e_41 = { error: e_41_1 }; }
    finally {
        try {
            if (input_41_1 && !input_41_1.done && (_a = input_41.return)) _a.call(input_41);
        }
        finally { if (e_41) throw e_41.error; }
    }
    return entries;
};
var serializeAws_ec2ExecutableByStringList = function (input, context) {
    var e_42, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_42 = __values(input), input_42_1 = input_42.next(); !input_42_1.done; input_42_1 = input_42.next()) {
            var entry = input_42_1.value;
            if (entry === null) {
                continue;
            }
            entries["ExecutableBy.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_42_1) { e_42 = { error: e_42_1 }; }
    finally {
        try {
            if (input_42_1 && !input_42_1.done && (_a = input_42.return)) _a.call(input_42);
        }
        finally { if (e_42) throw e_42.error; }
    }
    return entries;
};
var serializeAws_ec2ExportClientVpnClientCertificateRevocationListRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ExportClientVpnClientConfigurationRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ExportImageRequest = function (input, context) {
    var entries = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskImageFormat !== undefined && input.DiskImageFormat !== null) {
        entries["DiskImageFormat"] = input.DiskImageFormat;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.S3ExportLocation !== undefined && input.S3ExportLocation !== null) {
        var memberEntries = serializeAws_ec2ExportTaskS3LocationRequest(input.S3ExportLocation, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "S3ExportLocation.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.RoleName !== undefined && input.RoleName !== null) {
        entries["RoleName"] = input.RoleName;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ExportImageTaskIdList = function (input, context) {
    var e_43, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_43 = __values(input), input_43_1 = input_43.next(); !input_43_1.done; input_43_1 = input_43.next()) {
            var entry = input_43_1.value;
            if (entry === null) {
                continue;
            }
            entries["ExportImageTaskId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_43_1) { e_43 = { error: e_43_1 }; }
    finally {
        try {
            if (input_43_1 && !input_43_1.done && (_a = input_43.return)) _a.call(input_43);
        }
        finally { if (e_43) throw e_43.error; }
    }
    return entries;
};
var serializeAws_ec2ExportTaskIdStringList = function (input, context) {
    var e_44, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_44 = __values(input), input_44_1 = input_44.next(); !input_44_1.done; input_44_1 = input_44.next()) {
            var entry = input_44_1.value;
            if (entry === null) {
                continue;
            }
            entries["ExportTaskId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_44_1) { e_44 = { error: e_44_1 }; }
    finally {
        try {
            if (input_44_1 && !input_44_1.done && (_a = input_44.return)) _a.call(input_44);
        }
        finally { if (e_44) throw e_44.error; }
    }
    return entries;
};
var serializeAws_ec2ExportTaskS3LocationRequest = function (input, context) {
    var entries = {};
    if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Prefix !== undefined && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    return entries;
};
var serializeAws_ec2ExportToS3TaskSpecification = function (input, context) {
    var entries = {};
    if (input.ContainerFormat !== undefined && input.ContainerFormat !== null) {
        entries["ContainerFormat"] = input.ContainerFormat;
    }
    if (input.DiskImageFormat !== undefined && input.DiskImageFormat !== null) {
        entries["DiskImageFormat"] = input.DiskImageFormat;
    }
    if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Prefix !== undefined && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    return entries;
};
var serializeAws_ec2ExportTransitGatewayRoutesRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2FastLaunchImageIdList = function (input, context) {
    var e_45, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_45 = __values(input), input_45_1 = input_45.next(); !input_45_1.done; input_45_1 = input_45.next()) {
            var entry = input_45_1.value;
            if (entry === null) {
                continue;
            }
            entries["ImageId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_45_1) { e_45 = { error: e_45_1 }; }
    finally {
        try {
            if (input_45_1 && !input_45_1.done && (_a = input_45.return)) _a.call(input_45);
        }
        finally { if (e_45) throw e_45.error; }
    }
    return entries;
};
var serializeAws_ec2FastLaunchLaunchTemplateSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version !== undefined && input.Version !== null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
var serializeAws_ec2FastLaunchSnapshotConfigurationRequest = function (input, context) {
    var entries = {};
    if (input.TargetResourceCount !== undefined && input.TargetResourceCount !== null) {
        entries["TargetResourceCount"] = input.TargetResourceCount;
    }
    return entries;
};
var serializeAws_ec2FederatedAuthenticationRequest = function (input, context) {
    var entries = {};
    if (input.SAMLProviderArn !== undefined && input.SAMLProviderArn !== null) {
        entries["SAMLProviderArn"] = input.SAMLProviderArn;
    }
    if (input.SelfServiceSAMLProviderArn !== undefined && input.SelfServiceSAMLProviderArn !== null) {
        entries["SelfServiceSAMLProviderArn"] = input.SelfServiceSAMLProviderArn;
    }
    return entries;
};
var serializeAws_ec2Filter = function (input, context) {
    var entries = {};
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.Values !== undefined && input.Values !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.Values, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Value.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2FilterList = function (input, context) {
    var e_46, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_46 = __values(input), input_46_1 = input_46.next(); !input_46_1.done; input_46_1 = input_46.next()) {
            var entry = input_46_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Filter(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Filter.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_46_1) { e_46 = { error: e_46_1 }; }
    finally {
        try {
            if (input_46_1 && !input_46_1.done && (_a = input_46.return)) _a.call(input_46);
        }
        finally { if (e_46) throw e_46.error; }
    }
    return entries;
};
var serializeAws_ec2FleetIdSet = function (input, context) {
    var e_47, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_47 = __values(input), input_47_1 = input_47.next(); !input_47_1.done; input_47_1 = input_47.next()) {
            var entry = input_47_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_47_1) { e_47 = { error: e_47_1 }; }
    finally {
        try {
            if (input_47_1 && !input_47_1.done && (_a = input_47.return)) _a.call(input_47);
        }
        finally { if (e_47) throw e_47.error; }
    }
    return entries;
};
var serializeAws_ec2FleetLaunchTemplateConfigListRequest = function (input, context) {
    var e_48, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_48 = __values(input), input_48_1 = input_48.next(); !input_48_1.done; input_48_1 = input_48.next()) {
            var entry = input_48_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2FleetLaunchTemplateConfigRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_48_1) { e_48 = { error: e_48_1 }; }
    finally {
        try {
            if (input_48_1 && !input_48_1.done && (_a = input_48.return)) _a.call(input_48);
        }
        finally { if (e_48) throw e_48.error; }
    }
    return entries;
};
var serializeAws_ec2FleetLaunchTemplateConfigRequest = function (input, context) {
    var entries = {};
    if (input.LaunchTemplateSpecification !== undefined && input.LaunchTemplateSpecification !== null) {
        var memberEntries = serializeAws_ec2FleetLaunchTemplateSpecificationRequest(input.LaunchTemplateSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Overrides !== undefined && input.Overrides !== null) {
        var memberEntries = serializeAws_ec2FleetLaunchTemplateOverridesListRequest(input.Overrides, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Overrides.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2FleetLaunchTemplateOverridesListRequest = function (input, context) {
    var e_49, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_49 = __values(input), input_49_1 = input_49.next(); !input_49_1.done; input_49_1 = input_49.next()) {
            var entry = input_49_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2FleetLaunchTemplateOverridesRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_49_1) { e_49 = { error: e_49_1 }; }
    finally {
        try {
            if (input_49_1 && !input_49_1.done && (_a = input_49.return)) _a.call(input_49);
        }
        finally { if (e_49) throw e_49.error; }
    }
    return entries;
};
var serializeAws_ec2FleetLaunchTemplateOverridesRequest = function (input, context) {
    var entries = {};
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.MaxPrice !== undefined && input.MaxPrice !== null) {
        entries["MaxPrice"] = input.MaxPrice;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.WeightedCapacity !== undefined && input.WeightedCapacity !== null) {
        entries["WeightedCapacity"] = __serializeFloat(input.WeightedCapacity);
    }
    if (input.Priority !== undefined && input.Priority !== null) {
        entries["Priority"] = __serializeFloat(input.Priority);
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        var memberEntries = serializeAws_ec2Placement(input.Placement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Placement.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        var memberEntries = serializeAws_ec2InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceRequirements.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2FleetLaunchTemplateSpecification = function (input, context) {
    var entries = {};
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version !== undefined && input.Version !== null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
var serializeAws_ec2FleetLaunchTemplateSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version !== undefined && input.Version !== null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
var serializeAws_ec2FleetSpotCapacityRebalanceRequest = function (input, context) {
    var entries = {};
    if (input.ReplacementStrategy !== undefined && input.ReplacementStrategy !== null) {
        entries["ReplacementStrategy"] = input.ReplacementStrategy;
    }
    if (input.TerminationDelay !== undefined && input.TerminationDelay !== null) {
        entries["TerminationDelay"] = input.TerminationDelay;
    }
    return entries;
};
var serializeAws_ec2FleetSpotMaintenanceStrategiesRequest = function (input, context) {
    var entries = {};
    if (input.CapacityRebalance !== undefined && input.CapacityRebalance !== null) {
        var memberEntries = serializeAws_ec2FleetSpotCapacityRebalanceRequest(input.CapacityRebalance, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityRebalance.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2FlowLogIdList = function (input, context) {
    var e_50, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_50 = __values(input), input_50_1 = input_50.next(); !input_50_1.done; input_50_1 = input_50.next()) {
            var entry = input_50_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_50_1) { e_50 = { error: e_50_1 }; }
    finally {
        try {
            if (input_50_1 && !input_50_1.done && (_a = input_50.return)) _a.call(input_50);
        }
        finally { if (e_50) throw e_50.error; }
    }
    return entries;
};
var serializeAws_ec2FlowLogResourceIds = function (input, context) {
    var e_51, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_51 = __values(input), input_51_1 = input_51.next(); !input_51_1.done; input_51_1 = input_51.next()) {
            var entry = input_51_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_51_1) { e_51 = { error: e_51_1 }; }
    finally {
        try {
            if (input_51_1 && !input_51_1.done && (_a = input_51.return)) _a.call(input_51);
        }
        finally { if (e_51) throw e_51.error; }
    }
    return entries;
};
var serializeAws_ec2FpgaImageIdList = function (input, context) {
    var e_52, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_52 = __values(input), input_52_1 = input_52.next(); !input_52_1.done; input_52_1 = input_52.next()) {
            var entry = input_52_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_52_1) { e_52 = { error: e_52_1 }; }
    finally {
        try {
            if (input_52_1 && !input_52_1.done && (_a = input_52.return)) _a.call(input_52);
        }
        finally { if (e_52) throw e_52.error; }
    }
    return entries;
};
var serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesRequest = function (input, context) {
    var entries = {};
    if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetAssociatedIpv6PoolCidrsRequest = function (input, context) {
    var entries = {};
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetCapacityReservationUsageRequest = function (input, context) {
    var entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetCoipPoolUsageRequest = function (input, context) {
    var entries = {};
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetConsoleOutputRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Latest !== undefined && input.Latest !== null) {
        entries["Latest"] = input.Latest;
    }
    return entries;
};
var serializeAws_ec2GetConsoleScreenshotRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.WakeUp !== undefined && input.WakeUp !== null) {
        entries["WakeUp"] = input.WakeUp;
    }
    return entries;
};
var serializeAws_ec2GetDefaultCreditSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    return entries;
};
var serializeAws_ec2GetEbsDefaultKmsKeyIdRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetEbsEncryptionByDefaultRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetFlowLogsIntegrationTemplateRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FlowLogId !== undefined && input.FlowLogId !== null) {
        entries["FlowLogId"] = input.FlowLogId;
    }
    if (input.ConfigDeliveryS3DestinationArn !== undefined && input.ConfigDeliveryS3DestinationArn !== null) {
        entries["ConfigDeliveryS3DestinationArn"] = input.ConfigDeliveryS3DestinationArn;
    }
    if (input.IntegrateServices !== undefined && input.IntegrateServices !== null) {
        var memberEntries = serializeAws_ec2IntegrateServices(input.IntegrateServices, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IntegrateService.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2GetGroupsForCapacityReservationRequest = function (input, context) {
    var entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetHostReservationPurchasePreviewRequest = function (input, context) {
    var entries = {};
    if (input.HostIdSet !== undefined && input.HostIdSet !== null) {
        var memberEntries = serializeAws_ec2RequestHostIdSet(input.HostIdSet, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "HostIdSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.OfferingId !== undefined && input.OfferingId !== null) {
        entries["OfferingId"] = input.OfferingId;
    }
    return entries;
};
var serializeAws_ec2GetInstanceTypesFromInstanceRequirementsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ArchitectureTypes !== undefined && input.ArchitectureTypes !== null) {
        var memberEntries = serializeAws_ec2ArchitectureTypeSet(input.ArchitectureTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ArchitectureType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.VirtualizationTypes !== undefined && input.VirtualizationTypes !== null) {
        var memberEntries = serializeAws_ec2VirtualizationTypeSet(input.VirtualizationTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VirtualizationType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        var memberEntries = serializeAws_ec2InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceRequirements.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2GetInstanceUefiDataRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetIpamAddressHistoryRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime !== undefined && input.EndTime !== null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2GetIpamPoolAllocationsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.IpamPoolAllocationId !== undefined && input.IpamPoolAllocationId !== null) {
        entries["IpamPoolAllocationId"] = input.IpamPoolAllocationId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2GetIpamPoolCidrsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2GetIpamResourceCidrsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.ResourceId !== undefined && input.ResourceId !== null) {
        entries["ResourceId"] = input.ResourceId;
    }
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.ResourceTag !== undefined && input.ResourceTag !== null) {
        var memberEntries = serializeAws_ec2RequestIpamResourceTag(input.ResourceTag, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ResourceTag.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ResourceOwner !== undefined && input.ResourceOwner !== null) {
        entries["ResourceOwner"] = input.ResourceOwner;
    }
    return entries;
};
var serializeAws_ec2GetLaunchTemplateDataRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
var serializeAws_ec2GetManagedPrefixListAssociationsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2GetManagedPrefixListEntriesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.TargetVersion !== undefined && input.TargetVersion !== null) {
        entries["TargetVersion"] = input.TargetVersion;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInsightsAccessScopeAnalysisId !== undefined && input.NetworkInsightsAccessScopeAnalysisId !== null) {
        entries["NetworkInsightsAccessScopeAnalysisId"] = input.NetworkInsightsAccessScopeAnalysisId;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetNetworkInsightsAccessScopeContentRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInsightsAccessScopeId !== undefined && input.NetworkInsightsAccessScopeId !== null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetPasswordDataRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetReservedInstancesExchangeQuoteRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReservedInstanceIds !== undefined && input.ReservedInstanceIds !== null) {
        var memberEntries = serializeAws_ec2ReservedInstanceIdSet(input.ReservedInstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReservedInstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TargetConfigurations !== undefined && input.TargetConfigurations !== null) {
        var memberEntries = serializeAws_ec2TargetConfigurationRequestSet(input.TargetConfigurations, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TargetConfiguration.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2GetSerialConsoleAccessStatusRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetSpotPlacementScoresRequest = function (input, context) {
    var entries = {};
    if (input.InstanceTypes !== undefined && input.InstanceTypes !== null) {
        var memberEntries = serializeAws_ec2InstanceTypes(input.InstanceTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TargetCapacity !== undefined && input.TargetCapacity !== null) {
        entries["TargetCapacity"] = input.TargetCapacity;
    }
    if (input.TargetCapacityUnitType !== undefined && input.TargetCapacityUnitType !== null) {
        entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
    }
    if (input.SingleAvailabilityZone !== undefined && input.SingleAvailabilityZone !== null) {
        entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
    }
    if (input.RegionNames !== undefined && input.RegionNames !== null) {
        var memberEntries = serializeAws_ec2RegionNames(input.RegionNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RegionName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirementsWithMetadata !== undefined && input.InstanceRequirementsWithMetadata !== null) {
        var memberEntries = serializeAws_ec2InstanceRequirementsWithMetadataRequest(input.InstanceRequirementsWithMetadata, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceRequirementsWithMetadata.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
var serializeAws_ec2GetSubnetCidrReservationsRequest = function (input, context) {
    var entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
var serializeAws_ec2GetTransitGatewayAttachmentPropagationsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetTransitGatewayPrefixListReferencesRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetTransitGatewayRouteTableAssociationsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetTransitGatewayRouteTablePropagationsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationRequest = function (input, context) {
    var entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnConnectionDeviceTypeId !== undefined && input.VpnConnectionDeviceTypeId !== null) {
        entries["VpnConnectionDeviceTypeId"] = input.VpnConnectionDeviceTypeId;
    }
    if (input.InternetKeyExchangeVersion !== undefined && input.InternetKeyExchangeVersion !== null) {
        entries["InternetKeyExchangeVersion"] = input.InternetKeyExchangeVersion;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GetVpnConnectionDeviceTypesRequest = function (input, context) {
    var entries = {};
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2GroupIdentifier = function (input, context) {
    var entries = {};
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    return entries;
};
var serializeAws_ec2GroupIdentifierList = function (input, context) {
    var e_53, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_53 = __values(input), input_53_1 = input_53.next(); !input_53_1.done; input_53_1 = input_53.next()) {
            var entry = input_53_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2GroupIdentifier(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_53_1) { e_53 = { error: e_53_1 }; }
    finally {
        try {
            if (input_53_1 && !input_53_1.done && (_a = input_53.return)) _a.call(input_53);
        }
        finally { if (e_53) throw e_53.error; }
    }
    return entries;
};
var serializeAws_ec2GroupIds = function (input, context) {
    var e_54, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_54 = __values(input), input_54_1 = input_54.next(); !input_54_1.done; input_54_1 = input_54.next()) {
            var entry = input_54_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_54_1) { e_54 = { error: e_54_1 }; }
    finally {
        try {
            if (input_54_1 && !input_54_1.done && (_a = input_54.return)) _a.call(input_54);
        }
        finally { if (e_54) throw e_54.error; }
    }
    return entries;
};
var serializeAws_ec2GroupIdStringList = function (input, context) {
    var e_55, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_55 = __values(input), input_55_1 = input_55.next(); !input_55_1.done; input_55_1 = input_55.next()) {
            var entry = input_55_1.value;
            if (entry === null) {
                continue;
            }
            entries["GroupId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_55_1) { e_55 = { error: e_55_1 }; }
    finally {
        try {
            if (input_55_1 && !input_55_1.done && (_a = input_55.return)) _a.call(input_55);
        }
        finally { if (e_55) throw e_55.error; }
    }
    return entries;
};
var serializeAws_ec2GroupNameStringList = function (input, context) {
    var e_56, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_56 = __values(input), input_56_1 = input_56.next(); !input_56_1.done; input_56_1 = input_56.next()) {
            var entry = input_56_1.value;
            if (entry === null) {
                continue;
            }
            entries["GroupName.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_56_1) { e_56 = { error: e_56_1 }; }
    finally {
        try {
            if (input_56_1 && !input_56_1.done && (_a = input_56.return)) _a.call(input_56);
        }
        finally { if (e_56) throw e_56.error; }
    }
    return entries;
};
var serializeAws_ec2HibernationOptionsRequest = function (input, context) {
    var entries = {};
    if (input.Configured !== undefined && input.Configured !== null) {
        entries["Configured"] = input.Configured;
    }
    return entries;
};
var serializeAws_ec2HostReservationIdSet = function (input, context) {
    var e_57, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_57 = __values(input), input_57_1 = input_57.next(); !input_57_1.done; input_57_1 = input_57.next()) {
            var entry = input_57_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_57_1) { e_57 = { error: e_57_1 }; }
    finally {
        try {
            if (input_57_1 && !input_57_1.done && (_a = input_57.return)) _a.call(input_57);
        }
        finally { if (e_57) throw e_57.error; }
    }
    return entries;
};
var serializeAws_ec2IamInstanceProfileSpecification = function (input, context) {
    var entries = {};
    if (input.Arn !== undefined && input.Arn !== null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
var serializeAws_ec2IcmpTypeCode = function (input, context) {
    var entries = {};
    if (input.Code !== undefined && input.Code !== null) {
        entries["Code"] = input.Code;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    return entries;
};
var serializeAws_ec2IKEVersionsRequestList = function (input, context) {
    var e_58, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_58 = __values(input), input_58_1 = input_58.next(); !input_58_1.done; input_58_1 = input_58.next()) {
            var entry = input_58_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2IKEVersionsRequestListValue(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_58_1) { e_58 = { error: e_58_1 }; }
    finally {
        try {
            if (input_58_1 && !input_58_1.done && (_a = input_58.return)) _a.call(input_58);
        }
        finally { if (e_58) throw e_58.error; }
    }
    return entries;
};
var serializeAws_ec2IKEVersionsRequestListValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2ImageDiskContainer = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Format !== undefined && input.Format !== null) {
        entries["Format"] = input.Format;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.Url !== undefined && input.Url !== null) {
        entries["Url"] = input.Url;
    }
    if (input.UserBucket !== undefined && input.UserBucket !== null) {
        var memberEntries = serializeAws_ec2UserBucket(input.UserBucket, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserBucket.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ImageDiskContainerList = function (input, context) {
    var e_59, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_59 = __values(input), input_59_1 = input_59.next(); !input_59_1.done; input_59_1 = input_59.next()) {
            var entry = input_59_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ImageDiskContainer(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_59_1) { e_59 = { error: e_59_1 }; }
    finally {
        try {
            if (input_59_1 && !input_59_1.done && (_a = input_59.return)) _a.call(input_59);
        }
        finally { if (e_59) throw e_59.error; }
    }
    return entries;
};
var serializeAws_ec2ImageIdList = function (input, context) {
    var e_60, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_60 = __values(input), input_60_1 = input_60.next(); !input_60_1.done; input_60_1 = input_60.next()) {
            var entry = input_60_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_60_1) { e_60 = { error: e_60_1 }; }
    finally {
        try {
            if (input_60_1 && !input_60_1.done && (_a = input_60.return)) _a.call(input_60);
        }
        finally { if (e_60) throw e_60.error; }
    }
    return entries;
};
var serializeAws_ec2ImageIdStringList = function (input, context) {
    var e_61, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_61 = __values(input), input_61_1 = input_61.next(); !input_61_1.done; input_61_1 = input_61.next()) {
            var entry = input_61_1.value;
            if (entry === null) {
                continue;
            }
            entries["ImageId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_61_1) { e_61 = { error: e_61_1 }; }
    finally {
        try {
            if (input_61_1 && !input_61_1.done && (_a = input_61.return)) _a.call(input_61);
        }
        finally { if (e_61) throw e_61.error; }
    }
    return entries;
};
var serializeAws_ec2ImportClientVpnClientCertificateRevocationListRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.CertificateRevocationList !== undefined && input.CertificateRevocationList !== null) {
        entries["CertificateRevocationList"] = input.CertificateRevocationList;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ImportImageLicenseConfigurationRequest = function (input, context) {
    var entries = {};
    if (input.LicenseConfigurationArn !== undefined && input.LicenseConfigurationArn !== null) {
        entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
    }
    return entries;
};
var serializeAws_ec2ImportImageLicenseSpecificationListRequest = function (input, context) {
    var e_62, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_62 = __values(input), input_62_1 = input_62.next(); !input_62_1.done; input_62_1 = input_62.next()) {
            var entry = input_62_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ImportImageLicenseConfigurationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_62_1) { e_62 = { error: e_62_1 }; }
    finally {
        try {
            if (input_62_1 && !input_62_1.done && (_a = input_62.return)) _a.call(input_62);
        }
        finally { if (e_62) throw e_62.error; }
    }
    return entries;
};
var serializeAws_ec2ImportImageRequest = function (input, context) {
    var entries = {};
    if (input.Architecture !== undefined && input.Architecture !== null) {
        entries["Architecture"] = input.Architecture;
    }
    if (input.ClientData !== undefined && input.ClientData !== null) {
        var memberEntries = serializeAws_ec2ClientData(input.ClientData, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ClientData.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskContainers !== undefined && input.DiskContainers !== null) {
        var memberEntries = serializeAws_ec2ImageDiskContainerList(input.DiskContainers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DiskContainer.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Hypervisor !== undefined && input.Hypervisor !== null) {
        entries["Hypervisor"] = input.Hypervisor;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.LicenseType !== undefined && input.LicenseType !== null) {
        entries["LicenseType"] = input.LicenseType;
    }
    if (input.Platform !== undefined && input.Platform !== null) {
        entries["Platform"] = input.Platform;
    }
    if (input.RoleName !== undefined && input.RoleName !== null) {
        entries["RoleName"] = input.RoleName;
    }
    if (input.LicenseSpecifications !== undefined && input.LicenseSpecifications !== null) {
        var memberEntries = serializeAws_ec2ImportImageLicenseSpecificationListRequest(input.LicenseSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LicenseSpecifications.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.UsageOperation !== undefined && input.UsageOperation !== null) {
        entries["UsageOperation"] = input.UsageOperation;
    }
    if (input.BootMode !== undefined && input.BootMode !== null) {
        entries["BootMode"] = input.BootMode;
    }
    return entries;
};
var serializeAws_ec2ImportInstanceLaunchSpecification = function (input, context) {
    var entries = {};
    if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.Architecture !== undefined && input.Architecture !== null) {
        entries["Architecture"] = input.Architecture;
    }
    if (input.GroupIds !== undefined && input.GroupIds !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.GroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.GroupNames !== undefined && input.GroupNames !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupStringList(input.GroupNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GroupName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
        entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        entries["Monitoring"] = input.Monitoring;
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        var memberEntries = serializeAws_ec2Placement(input.Placement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Placement.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        var memberEntries = serializeAws_ec2UserData(input.UserData, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserData.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ImportInstanceRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskImages !== undefined && input.DiskImages !== null) {
        var memberEntries = serializeAws_ec2DiskImageList(input.DiskImages, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DiskImage.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchSpecification !== undefined && input.LaunchSpecification !== null) {
        var memberEntries = serializeAws_ec2ImportInstanceLaunchSpecification(input.LaunchSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Platform !== undefined && input.Platform !== null) {
        entries["Platform"] = input.Platform;
    }
    return entries;
};
var serializeAws_ec2ImportKeyPairRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.PublicKeyMaterial !== undefined && input.PublicKeyMaterial !== null) {
        entries["PublicKeyMaterial"] = context.base64Encoder(input.PublicKeyMaterial);
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ImportSnapshotRequest = function (input, context) {
    var entries = {};
    if (input.ClientData !== undefined && input.ClientData !== null) {
        var memberEntries = serializeAws_ec2ClientData(input.ClientData, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ClientData.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskContainer !== undefined && input.DiskContainer !== null) {
        var memberEntries = serializeAws_ec2SnapshotDiskContainer(input.DiskContainer, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DiskContainer.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.RoleName !== undefined && input.RoleName !== null) {
        entries["RoleName"] = input.RoleName;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ImportSnapshotTaskIdList = function (input, context) {
    var e_63, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_63 = __values(input), input_63_1 = input_63.next(); !input_63_1.done; input_63_1 = input_63.next()) {
            var entry = input_63_1.value;
            if (entry === null) {
                continue;
            }
            entries["ImportTaskId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_63_1) { e_63 = { error: e_63_1 }; }
    finally {
        try {
            if (input_63_1 && !input_63_1.done && (_a = input_63.return)) _a.call(input_63);
        }
        finally { if (e_63) throw e_63.error; }
    }
    return entries;
};
var serializeAws_ec2ImportTaskIdList = function (input, context) {
    var e_64, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_64 = __values(input), input_64_1 = input_64.next(); !input_64_1.done; input_64_1 = input_64.next()) {
            var entry = input_64_1.value;
            if (entry === null) {
                continue;
            }
            entries["ImportTaskId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_64_1) { e_64 = { error: e_64_1 }; }
    finally {
        try {
            if (input_64_1 && !input_64_1.done && (_a = input_64.return)) _a.call(input_64);
        }
        finally { if (e_64) throw e_64.error; }
    }
    return entries;
};
var serializeAws_ec2ImportVolumeRequest = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Image !== undefined && input.Image !== null) {
        var memberEntries = serializeAws_ec2DiskImageDetail(input.Image, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Image.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Volume !== undefined && input.Volume !== null) {
        var memberEntries = serializeAws_ec2VolumeDetail(input.Volume, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Volume.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2InsideCidrBlocksStringList = function (input, context) {
    var e_65, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_65 = __values(input), input_65_1 = input_65.next(); !input_65_1.done; input_65_1 = input_65.next()) {
            var entry = input_65_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_65_1) { e_65 = { error: e_65_1 }; }
    finally {
        try {
            if (input_65_1 && !input_65_1.done && (_a = input_65.return)) _a.call(input_65);
        }
        finally { if (e_65) throw e_65.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceBlockDeviceMappingSpecification = function (input, context) {
    var entries = {};
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Ebs !== undefined && input.Ebs !== null) {
        var memberEntries = serializeAws_ec2EbsInstanceBlockDeviceSpecification(input.Ebs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ebs.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.NoDevice !== undefined && input.NoDevice !== null) {
        entries["NoDevice"] = input.NoDevice;
    }
    if (input.VirtualName !== undefined && input.VirtualName !== null) {
        entries["VirtualName"] = input.VirtualName;
    }
    return entries;
};
var serializeAws_ec2InstanceBlockDeviceMappingSpecificationList = function (input, context) {
    var e_66, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_66 = __values(input), input_66_1 = input_66.next(); !input_66_1.done; input_66_1 = input_66.next()) {
            var entry = input_66_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2InstanceBlockDeviceMappingSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_66_1) { e_66 = { error: e_66_1 }; }
    finally {
        try {
            if (input_66_1 && !input_66_1.done && (_a = input_66.return)) _a.call(input_66);
        }
        finally { if (e_66) throw e_66.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceCreditSpecificationListRequest = function (input, context) {
    var e_67, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_67 = __values(input), input_67_1 = input_67.next(); !input_67_1.done; input_67_1 = input_67.next()) {
            var entry = input_67_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2InstanceCreditSpecificationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_67_1) { e_67 = { error: e_67_1 }; }
    finally {
        try {
            if (input_67_1 && !input_67_1.done && (_a = input_67.return)) _a.call(input_67);
        }
        finally { if (e_67) throw e_67.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceCreditSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.CpuCredits !== undefined && input.CpuCredits !== null) {
        entries["CpuCredits"] = input.CpuCredits;
    }
    return entries;
};
var serializeAws_ec2InstanceEventWindowAssociationRequest = function (input, context) {
    var entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceTags !== undefined && input.InstanceTags !== null) {
        var memberEntries = serializeAws_ec2TagList(input.InstanceTags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceTag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DedicatedHostIds !== undefined && input.DedicatedHostIds !== null) {
        var memberEntries = serializeAws_ec2DedicatedHostIdList(input.DedicatedHostIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DedicatedHostId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2InstanceEventWindowDisassociationRequest = function (input, context) {
    var entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceTags !== undefined && input.InstanceTags !== null) {
        var memberEntries = serializeAws_ec2TagList(input.InstanceTags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceTag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DedicatedHostIds !== undefined && input.DedicatedHostIds !== null) {
        var memberEntries = serializeAws_ec2DedicatedHostIdList(input.DedicatedHostIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DedicatedHostId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2InstanceEventWindowIdSet = function (input, context) {
    var e_68, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_68 = __values(input), input_68_1 = input_68.next(); !input_68_1.done; input_68_1 = input_68.next()) {
            var entry = input_68_1.value;
            if (entry === null) {
                continue;
            }
            entries["InstanceEventWindowId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_68_1) { e_68 = { error: e_68_1 }; }
    finally {
        try {
            if (input_68_1 && !input_68_1.done && (_a = input_68.return)) _a.call(input_68);
        }
        finally { if (e_68) throw e_68.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceEventWindowTimeRangeRequest = function (input, context) {
    var entries = {};
    if (input.StartWeekDay !== undefined && input.StartWeekDay !== null) {
        entries["StartWeekDay"] = input.StartWeekDay;
    }
    if (input.StartHour !== undefined && input.StartHour !== null) {
        entries["StartHour"] = input.StartHour;
    }
    if (input.EndWeekDay !== undefined && input.EndWeekDay !== null) {
        entries["EndWeekDay"] = input.EndWeekDay;
    }
    if (input.EndHour !== undefined && input.EndHour !== null) {
        entries["EndHour"] = input.EndHour;
    }
    return entries;
};
var serializeAws_ec2InstanceEventWindowTimeRangeRequestSet = function (input, context) {
    var e_69, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_69 = __values(input), input_69_1 = input_69.next(); !input_69_1.done; input_69_1 = input_69.next()) {
            var entry = input_69_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2InstanceEventWindowTimeRangeRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Member.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_69_1) { e_69 = { error: e_69_1 }; }
    finally {
        try {
            if (input_69_1 && !input_69_1.done && (_a = input_69.return)) _a.call(input_69);
        }
        finally { if (e_69) throw e_69.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceGenerationSet = function (input, context) {
    var e_70, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_70 = __values(input), input_70_1 = input_70.next(); !input_70_1.done; input_70_1 = input_70.next()) {
            var entry = input_70_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_70_1) { e_70 = { error: e_70_1 }; }
    finally {
        try {
            if (input_70_1 && !input_70_1.done && (_a = input_70.return)) _a.call(input_70);
        }
        finally { if (e_70) throw e_70.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceIdList = function (input, context) {
    var e_71, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_71 = __values(input), input_71_1 = input_71.next(); !input_71_1.done; input_71_1 = input_71.next()) {
            var entry = input_71_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_71_1) { e_71 = { error: e_71_1 }; }
    finally {
        try {
            if (input_71_1 && !input_71_1.done && (_a = input_71.return)) _a.call(input_71);
        }
        finally { if (e_71) throw e_71.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceIdStringList = function (input, context) {
    var e_72, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_72 = __values(input), input_72_1 = input_72.next(); !input_72_1.done; input_72_1 = input_72.next()) {
            var entry = input_72_1.value;
            if (entry === null) {
                continue;
            }
            entries["InstanceId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_72_1) { e_72 = { error: e_72_1 }; }
    finally {
        try {
            if (input_72_1 && !input_72_1.done && (_a = input_72.return)) _a.call(input_72);
        }
        finally { if (e_72) throw e_72.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceIpv6Address = function (input, context) {
    var entries = {};
    if (input.Ipv6Address !== undefined && input.Ipv6Address !== null) {
        entries["Ipv6Address"] = input.Ipv6Address;
    }
    return entries;
};
var serializeAws_ec2InstanceIpv6AddressList = function (input, context) {
    var e_73, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_73 = __values(input), input_73_1 = input_73.next(); !input_73_1.done; input_73_1 = input_73.next()) {
            var entry = input_73_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2InstanceIpv6Address(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_73_1) { e_73 = { error: e_73_1 }; }
    finally {
        try {
            if (input_73_1 && !input_73_1.done && (_a = input_73.return)) _a.call(input_73);
        }
        finally { if (e_73) throw e_73.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceIpv6AddressListRequest = function (input, context) {
    var e_74, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_74 = __values(input), input_74_1 = input_74.next(); !input_74_1.done; input_74_1 = input_74.next()) {
            var entry = input_74_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2InstanceIpv6AddressRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["InstanceIpv6Address.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_74_1) { e_74 = { error: e_74_1 }; }
    finally {
        try {
            if (input_74_1 && !input_74_1.done && (_a = input_74.return)) _a.call(input_74);
        }
        finally { if (e_74) throw e_74.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceIpv6AddressRequest = function (input, context) {
    var entries = {};
    if (input.Ipv6Address !== undefined && input.Ipv6Address !== null) {
        entries["Ipv6Address"] = input.Ipv6Address;
    }
    return entries;
};
var serializeAws_ec2InstanceMaintenanceOptionsRequest = function (input, context) {
    var entries = {};
    if (input.AutoRecovery !== undefined && input.AutoRecovery !== null) {
        entries["AutoRecovery"] = input.AutoRecovery;
    }
    return entries;
};
var serializeAws_ec2InstanceMarketOptionsRequest = function (input, context) {
    var entries = {};
    if (input.MarketType !== undefined && input.MarketType !== null) {
        entries["MarketType"] = input.MarketType;
    }
    if (input.SpotOptions !== undefined && input.SpotOptions !== null) {
        var memberEntries = serializeAws_ec2SpotMarketOptions(input.SpotOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SpotOptions.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2InstanceMetadataOptionsRequest = function (input, context) {
    var entries = {};
    if (input.HttpTokens !== undefined && input.HttpTokens !== null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit !== undefined && input.HttpPutResponseHopLimit !== null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint !== undefined && input.HttpEndpoint !== null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    if (input.HttpProtocolIpv6 !== undefined && input.HttpProtocolIpv6 !== null) {
        entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
    }
    if (input.InstanceMetadataTags !== undefined && input.InstanceMetadataTags !== null) {
        entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
    }
    return entries;
};
var serializeAws_ec2InstanceNetworkInterfaceSpecification = function (input, context) {
    var entries = {};
    if (input.AssociatePublicIpAddress !== undefined && input.AssociatePublicIpAddress !== null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        var memberEntries = serializeAws_ec2InstanceIpv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Addresses.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        var memberEntries = serializeAws_ec2PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrivateIpAddresses.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.AssociateCarrierIpAddress !== undefined && input.AssociateCarrierIpAddress !== null) {
        entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
    }
    if (input.InterfaceType !== undefined && input.InterfaceType !== null) {
        entries["InterfaceType"] = input.InterfaceType;
    }
    if (input.NetworkCardIndex !== undefined && input.NetworkCardIndex !== null) {
        entries["NetworkCardIndex"] = input.NetworkCardIndex;
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        var memberEntries = serializeAws_ec2Ipv4PrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv4Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount !== undefined && input.Ipv4PrefixCount !== null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        var memberEntries = serializeAws_ec2Ipv6PrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount !== undefined && input.Ipv6PrefixCount !== null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    return entries;
};
var serializeAws_ec2InstanceNetworkInterfaceSpecificationList = function (input, context) {
    var e_75, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_75 = __values(input), input_75_1 = input_75.next(); !input_75_1.done; input_75_1 = input_75.next()) {
            var entry = input_75_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_75_1) { e_75 = { error: e_75_1 }; }
    finally {
        try {
            if (input_75_1 && !input_75_1.done && (_a = input_75.return)) _a.call(input_75);
        }
        finally { if (e_75) throw e_75.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceRequirements = function (input, context) {
    var entries = {};
    if (input.VCpuCount !== undefined && input.VCpuCount !== null) {
        var memberEntries = serializeAws_ec2VCpuCountRange(input.VCpuCount, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VCpuCount.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MemoryMiB !== undefined && input.MemoryMiB !== null) {
        var memberEntries = serializeAws_ec2MemoryMiB(input.MemoryMiB, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MemoryMiB.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.CpuManufacturers !== undefined && input.CpuManufacturers !== null) {
        var memberEntries = serializeAws_ec2CpuManufacturerSet(input.CpuManufacturers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CpuManufacturerSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MemoryGiBPerVCpu !== undefined && input.MemoryGiBPerVCpu !== null) {
        var memberEntries = serializeAws_ec2MemoryGiBPerVCpu(input.MemoryGiBPerVCpu, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MemoryGiBPerVCpu.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ExcludedInstanceTypes !== undefined && input.ExcludedInstanceTypes !== null) {
        var memberEntries = serializeAws_ec2ExcludedInstanceTypeSet(input.ExcludedInstanceTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExcludedInstanceTypeSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceGenerations !== undefined && input.InstanceGenerations !== null) {
        var memberEntries = serializeAws_ec2InstanceGenerationSet(input.InstanceGenerations, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceGenerationSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SpotMaxPricePercentageOverLowestPrice !== undefined &&
        input.SpotMaxPricePercentageOverLowestPrice !== null) {
        entries["SpotMaxPricePercentageOverLowestPrice"] = input.SpotMaxPricePercentageOverLowestPrice;
    }
    if (input.OnDemandMaxPricePercentageOverLowestPrice !== undefined &&
        input.OnDemandMaxPricePercentageOverLowestPrice !== null) {
        entries["OnDemandMaxPricePercentageOverLowestPrice"] = input.OnDemandMaxPricePercentageOverLowestPrice;
    }
    if (input.BareMetal !== undefined && input.BareMetal !== null) {
        entries["BareMetal"] = input.BareMetal;
    }
    if (input.BurstablePerformance !== undefined && input.BurstablePerformance !== null) {
        entries["BurstablePerformance"] = input.BurstablePerformance;
    }
    if (input.RequireHibernateSupport !== undefined && input.RequireHibernateSupport !== null) {
        entries["RequireHibernateSupport"] = input.RequireHibernateSupport;
    }
    if (input.NetworkInterfaceCount !== undefined && input.NetworkInterfaceCount !== null) {
        var memberEntries = serializeAws_ec2NetworkInterfaceCount(input.NetworkInterfaceCount, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterfaceCount.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.LocalStorage !== undefined && input.LocalStorage !== null) {
        entries["LocalStorage"] = input.LocalStorage;
    }
    if (input.LocalStorageTypes !== undefined && input.LocalStorageTypes !== null) {
        var memberEntries = serializeAws_ec2LocalStorageTypeSet(input.LocalStorageTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LocalStorageTypeSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TotalLocalStorageGB !== undefined && input.TotalLocalStorageGB !== null) {
        var memberEntries = serializeAws_ec2TotalLocalStorageGB(input.TotalLocalStorageGB, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TotalLocalStorageGB.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.BaselineEbsBandwidthMbps !== undefined && input.BaselineEbsBandwidthMbps !== null) {
        var memberEntries = serializeAws_ec2BaselineEbsBandwidthMbps(input.BaselineEbsBandwidthMbps, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BaselineEbsBandwidthMbps.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTypes !== undefined && input.AcceleratorTypes !== null) {
        var memberEntries = serializeAws_ec2AcceleratorTypeSet(input.AcceleratorTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorTypeSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AcceleratorCount !== undefined && input.AcceleratorCount !== null) {
        var memberEntries = serializeAws_ec2AcceleratorCount(input.AcceleratorCount, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorCount.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.AcceleratorManufacturers !== undefined && input.AcceleratorManufacturers !== null) {
        var memberEntries = serializeAws_ec2AcceleratorManufacturerSet(input.AcceleratorManufacturers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorManufacturerSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AcceleratorNames !== undefined && input.AcceleratorNames !== null) {
        var memberEntries = serializeAws_ec2AcceleratorNameSet(input.AcceleratorNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorNameSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTotalMemoryMiB !== undefined && input.AcceleratorTotalMemoryMiB !== null) {
        var memberEntries = serializeAws_ec2AcceleratorTotalMemoryMiB(input.AcceleratorTotalMemoryMiB, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorTotalMemoryMiB.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2InstanceRequirementsRequest = function (input, context) {
    var entries = {};
    if (input.VCpuCount !== undefined && input.VCpuCount !== null) {
        var memberEntries = serializeAws_ec2VCpuCountRangeRequest(input.VCpuCount, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VCpuCount.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MemoryMiB !== undefined && input.MemoryMiB !== null) {
        var memberEntries = serializeAws_ec2MemoryMiBRequest(input.MemoryMiB, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MemoryMiB.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.CpuManufacturers !== undefined && input.CpuManufacturers !== null) {
        var memberEntries = serializeAws_ec2CpuManufacturerSet(input.CpuManufacturers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CpuManufacturer.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MemoryGiBPerVCpu !== undefined && input.MemoryGiBPerVCpu !== null) {
        var memberEntries = serializeAws_ec2MemoryGiBPerVCpuRequest(input.MemoryGiBPerVCpu, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MemoryGiBPerVCpu.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ExcludedInstanceTypes !== undefined && input.ExcludedInstanceTypes !== null) {
        var memberEntries = serializeAws_ec2ExcludedInstanceTypeSet(input.ExcludedInstanceTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ExcludedInstanceType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceGenerations !== undefined && input.InstanceGenerations !== null) {
        var memberEntries = serializeAws_ec2InstanceGenerationSet(input.InstanceGenerations, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceGeneration.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SpotMaxPricePercentageOverLowestPrice !== undefined &&
        input.SpotMaxPricePercentageOverLowestPrice !== null) {
        entries["SpotMaxPricePercentageOverLowestPrice"] = input.SpotMaxPricePercentageOverLowestPrice;
    }
    if (input.OnDemandMaxPricePercentageOverLowestPrice !== undefined &&
        input.OnDemandMaxPricePercentageOverLowestPrice !== null) {
        entries["OnDemandMaxPricePercentageOverLowestPrice"] = input.OnDemandMaxPricePercentageOverLowestPrice;
    }
    if (input.BareMetal !== undefined && input.BareMetal !== null) {
        entries["BareMetal"] = input.BareMetal;
    }
    if (input.BurstablePerformance !== undefined && input.BurstablePerformance !== null) {
        entries["BurstablePerformance"] = input.BurstablePerformance;
    }
    if (input.RequireHibernateSupport !== undefined && input.RequireHibernateSupport !== null) {
        entries["RequireHibernateSupport"] = input.RequireHibernateSupport;
    }
    if (input.NetworkInterfaceCount !== undefined && input.NetworkInterfaceCount !== null) {
        var memberEntries = serializeAws_ec2NetworkInterfaceCountRequest(input.NetworkInterfaceCount, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterfaceCount.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.LocalStorage !== undefined && input.LocalStorage !== null) {
        entries["LocalStorage"] = input.LocalStorage;
    }
    if (input.LocalStorageTypes !== undefined && input.LocalStorageTypes !== null) {
        var memberEntries = serializeAws_ec2LocalStorageTypeSet(input.LocalStorageTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LocalStorageType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TotalLocalStorageGB !== undefined && input.TotalLocalStorageGB !== null) {
        var memberEntries = serializeAws_ec2TotalLocalStorageGBRequest(input.TotalLocalStorageGB, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TotalLocalStorageGB.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.BaselineEbsBandwidthMbps !== undefined && input.BaselineEbsBandwidthMbps !== null) {
        var memberEntries = serializeAws_ec2BaselineEbsBandwidthMbpsRequest(input.BaselineEbsBandwidthMbps, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BaselineEbsBandwidthMbps.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTypes !== undefined && input.AcceleratorTypes !== null) {
        var memberEntries = serializeAws_ec2AcceleratorTypeSet(input.AcceleratorTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AcceleratorCount !== undefined && input.AcceleratorCount !== null) {
        var memberEntries = serializeAws_ec2AcceleratorCountRequest(input.AcceleratorCount, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorCount.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.AcceleratorManufacturers !== undefined && input.AcceleratorManufacturers !== null) {
        var memberEntries = serializeAws_ec2AcceleratorManufacturerSet(input.AcceleratorManufacturers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorManufacturer.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AcceleratorNames !== undefined && input.AcceleratorNames !== null) {
        var memberEntries = serializeAws_ec2AcceleratorNameSet(input.AcceleratorNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorName.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTotalMemoryMiB !== undefined && input.AcceleratorTotalMemoryMiB !== null) {
        var memberEntries = serializeAws_ec2AcceleratorTotalMemoryMiBRequest(input.AcceleratorTotalMemoryMiB, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AcceleratorTotalMemoryMiB.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2InstanceRequirementsWithMetadataRequest = function (input, context) {
    var entries = {};
    if (input.ArchitectureTypes !== undefined && input.ArchitectureTypes !== null) {
        var memberEntries = serializeAws_ec2ArchitectureTypeSet(input.ArchitectureTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ArchitectureType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.VirtualizationTypes !== undefined && input.VirtualizationTypes !== null) {
        var memberEntries = serializeAws_ec2VirtualizationTypeSet(input.VirtualizationTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VirtualizationType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        var memberEntries = serializeAws_ec2InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceRequirements.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2InstanceSpecification = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.ExcludeBootVolume !== undefined && input.ExcludeBootVolume !== null) {
        entries["ExcludeBootVolume"] = input.ExcludeBootVolume;
    }
    return entries;
};
var serializeAws_ec2InstanceTagKeySet = function (input, context) {
    var e_76, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_76 = __values(input), input_76_1 = input_76.next(); !input_76_1.done; input_76_1 = input_76.next()) {
            var entry = input_76_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_76_1) { e_76 = { error: e_76_1 }; }
    finally {
        try {
            if (input_76_1 && !input_76_1.done && (_a = input_76.return)) _a.call(input_76);
        }
        finally { if (e_76) throw e_76.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceTypeList = function (input, context) {
    var e_77, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_77 = __values(input), input_77_1 = input_77.next(); !input_77_1.done; input_77_1 = input_77.next()) {
            var entry = input_77_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_77_1) { e_77 = { error: e_77_1 }; }
    finally {
        try {
            if (input_77_1 && !input_77_1.done && (_a = input_77.return)) _a.call(input_77);
        }
        finally { if (e_77) throw e_77.error; }
    }
    return entries;
};
var serializeAws_ec2InstanceTypes = function (input, context) {
    var e_78, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_78 = __values(input), input_78_1 = input_78.next(); !input_78_1.done; input_78_1 = input_78.next()) {
            var entry = input_78_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_78_1) { e_78 = { error: e_78_1 }; }
    finally {
        try {
            if (input_78_1 && !input_78_1.done && (_a = input_78.return)) _a.call(input_78);
        }
        finally { if (e_78) throw e_78.error; }
    }
    return entries;
};
var serializeAws_ec2IntegrateServices = function (input, context) {
    var entries = {};
    if (input.AthenaIntegrations !== undefined && input.AthenaIntegrations !== null) {
        var memberEntries = serializeAws_ec2AthenaIntegrationsSet(input.AthenaIntegrations, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AthenaIntegration.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2InternetGatewayIdList = function (input, context) {
    var e_79, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_79 = __values(input), input_79_1 = input_79.next(); !input_79_1.done; input_79_1 = input_79.next()) {
            var entry = input_79_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_79_1) { e_79 = { error: e_79_1 }; }
    finally {
        try {
            if (input_79_1 && !input_79_1.done && (_a = input_79.return)) _a.call(input_79);
        }
        finally { if (e_79) throw e_79.error; }
    }
    return entries;
};
var serializeAws_ec2IpamCidrAuthorizationContext = function (input, context) {
    var entries = {};
    if (input.Message !== undefined && input.Message !== null) {
        entries["Message"] = input.Message;
    }
    if (input.Signature !== undefined && input.Signature !== null) {
        entries["Signature"] = input.Signature;
    }
    return entries;
};
var serializeAws_ec2IpamPoolAllocationDisallowedCidrs = function (input, context) {
    var e_80, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_80 = __values(input), input_80_1 = input_80.next(); !input_80_1.done; input_80_1 = input_80.next()) {
            var entry = input_80_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_80_1) { e_80 = { error: e_80_1 }; }
    finally {
        try {
            if (input_80_1 && !input_80_1.done && (_a = input_80.return)) _a.call(input_80);
        }
        finally { if (e_80) throw e_80.error; }
    }
    return entries;
};
var serializeAws_ec2IpPermission = function (input, context) {
    var entries = {};
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.IpRanges !== undefined && input.IpRanges !== null) {
        var memberEntries = serializeAws_ec2IpRangeList(input.IpRanges, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpRanges.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv6Ranges !== undefined && input.Ipv6Ranges !== null) {
        var memberEntries = serializeAws_ec2Ipv6RangeList(input.Ipv6Ranges, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Ranges.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.PrefixListIds !== undefined && input.PrefixListIds !== null) {
        var memberEntries = serializeAws_ec2PrefixListIdList(input.PrefixListIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrefixListIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.UserIdGroupPairs !== undefined && input.UserIdGroupPairs !== null) {
        var memberEntries = serializeAws_ec2UserIdGroupPairList(input.UserIdGroupPairs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Groups.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2IpPermissionList = function (input, context) {
    var e_81, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_81 = __values(input), input_81_1 = input_81.next(); !input_81_1.done; input_81_1 = input_81.next()) {
            var entry = input_81_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2IpPermission(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_81_1) { e_81 = { error: e_81_1 }; }
    finally {
        try {
            if (input_81_1 && !input_81_1.done && (_a = input_81.return)) _a.call(input_81);
        }
        finally { if (e_81) throw e_81.error; }
    }
    return entries;
};
var serializeAws_ec2IpPrefixList = function (input, context) {
    var e_82, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_82 = __values(input), input_82_1 = input_82.next(); !input_82_1.done; input_82_1 = input_82.next()) {
            var entry = input_82_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_82_1) { e_82 = { error: e_82_1 }; }
    finally {
        try {
            if (input_82_1 && !input_82_1.done && (_a = input_82.return)) _a.call(input_82);
        }
        finally { if (e_82) throw e_82.error; }
    }
    return entries;
};
var serializeAws_ec2IpRange = function (input, context) {
    var entries = {};
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
var serializeAws_ec2IpRangeList = function (input, context) {
    var e_83, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_83 = __values(input), input_83_1 = input_83.next(); !input_83_1.done; input_83_1 = input_83.next()) {
            var entry = input_83_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2IpRange(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_83_1) { e_83 = { error: e_83_1 }; }
    finally {
        try {
            if (input_83_1 && !input_83_1.done && (_a = input_83.return)) _a.call(input_83);
        }
        finally { if (e_83) throw e_83.error; }
    }
    return entries;
};
var serializeAws_ec2Ipv4PrefixList = function (input, context) {
    var e_84, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_84 = __values(input), input_84_1 = input_84.next(); !input_84_1.done; input_84_1 = input_84.next()) {
            var entry = input_84_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Ipv4PrefixSpecificationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_84_1) { e_84 = { error: e_84_1 }; }
    finally {
        try {
            if (input_84_1 && !input_84_1.done && (_a = input_84.return)) _a.call(input_84);
        }
        finally { if (e_84) throw e_84.error; }
    }
    return entries;
};
var serializeAws_ec2Ipv4PrefixSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.Ipv4Prefix !== undefined && input.Ipv4Prefix !== null) {
        entries["Ipv4Prefix"] = input.Ipv4Prefix;
    }
    return entries;
};
var serializeAws_ec2Ipv6AddressList = function (input, context) {
    var e_85, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_85 = __values(input), input_85_1 = input_85.next(); !input_85_1.done; input_85_1 = input_85.next()) {
            var entry = input_85_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_85_1) { e_85 = { error: e_85_1 }; }
    finally {
        try {
            if (input_85_1 && !input_85_1.done && (_a = input_85.return)) _a.call(input_85);
        }
        finally { if (e_85) throw e_85.error; }
    }
    return entries;
};
var serializeAws_ec2Ipv6PoolIdList = function (input, context) {
    var e_86, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_86 = __values(input), input_86_1 = input_86.next(); !input_86_1.done; input_86_1 = input_86.next()) {
            var entry = input_86_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_86_1) { e_86 = { error: e_86_1 }; }
    finally {
        try {
            if (input_86_1 && !input_86_1.done && (_a = input_86.return)) _a.call(input_86);
        }
        finally { if (e_86) throw e_86.error; }
    }
    return entries;
};
var serializeAws_ec2Ipv6PrefixList = function (input, context) {
    var e_87, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_87 = __values(input), input_87_1 = input_87.next(); !input_87_1.done; input_87_1 = input_87.next()) {
            var entry = input_87_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Ipv6PrefixSpecificationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_87_1) { e_87 = { error: e_87_1 }; }
    finally {
        try {
            if (input_87_1 && !input_87_1.done && (_a = input_87.return)) _a.call(input_87);
        }
        finally { if (e_87) throw e_87.error; }
    }
    return entries;
};
var serializeAws_ec2Ipv6PrefixSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.Ipv6Prefix !== undefined && input.Ipv6Prefix !== null) {
        entries["Ipv6Prefix"] = input.Ipv6Prefix;
    }
    return entries;
};
var serializeAws_ec2Ipv6Range = function (input, context) {
    var entries = {};
    if (input.CidrIpv6 !== undefined && input.CidrIpv6 !== null) {
        entries["CidrIpv6"] = input.CidrIpv6;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
var serializeAws_ec2Ipv6RangeList = function (input, context) {
    var e_88, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_88 = __values(input), input_88_1 = input_88.next(); !input_88_1.done; input_88_1 = input_88.next()) {
            var entry = input_88_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Ipv6Range(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_88_1) { e_88 = { error: e_88_1 }; }
    finally {
        try {
            if (input_88_1 && !input_88_1.done && (_a = input_88.return)) _a.call(input_88);
        }
        finally { if (e_88) throw e_88.error; }
    }
    return entries;
};
var serializeAws_ec2KeyNameStringList = function (input, context) {
    var e_89, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_89 = __values(input), input_89_1 = input_89.next(); !input_89_1.done; input_89_1 = input_89.next()) {
            var entry = input_89_1.value;
            if (entry === null) {
                continue;
            }
            entries["KeyName.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_89_1) { e_89 = { error: e_89_1 }; }
    finally {
        try {
            if (input_89_1 && !input_89_1.done && (_a = input_89.return)) _a.call(input_89);
        }
        finally { if (e_89) throw e_89.error; }
    }
    return entries;
};
var serializeAws_ec2KeyPairIdStringList = function (input, context) {
    var e_90, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_90 = __values(input), input_90_1 = input_90.next(); !input_90_1.done; input_90_1 = input_90.next()) {
            var entry = input_90_1.value;
            if (entry === null) {
                continue;
            }
            entries["KeyPairId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_90_1) { e_90 = { error: e_90_1 }; }
    finally {
        try {
            if (input_90_1 && !input_90_1.done && (_a = input_90.return)) _a.call(input_90);
        }
        finally { if (e_90) throw e_90.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchPermission = function (input, context) {
    var entries = {};
    if (input.Group !== undefined && input.Group !== null) {
        entries["Group"] = input.Group;
    }
    if (input.UserId !== undefined && input.UserId !== null) {
        entries["UserId"] = input.UserId;
    }
    if (input.OrganizationArn !== undefined && input.OrganizationArn !== null) {
        entries["OrganizationArn"] = input.OrganizationArn;
    }
    if (input.OrganizationalUnitArn !== undefined && input.OrganizationalUnitArn !== null) {
        entries["OrganizationalUnitArn"] = input.OrganizationalUnitArn;
    }
    return entries;
};
var serializeAws_ec2LaunchPermissionList = function (input, context) {
    var e_91, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_91 = __values(input), input_91_1 = input_91.next(); !input_91_1.done; input_91_1 = input_91.next()) {
            var entry = input_91_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LaunchPermission(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_91_1) { e_91 = { error: e_91_1 }; }
    finally {
        try {
            if (input_91_1 && !input_91_1.done && (_a = input_91.return)) _a.call(input_91);
        }
        finally { if (e_91) throw e_91.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchPermissionModifications = function (input, context) {
    var entries = {};
    if (input.Add !== undefined && input.Add !== null) {
        var memberEntries = serializeAws_ec2LaunchPermissionList(input.Add, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Add.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Remove !== undefined && input.Remove !== null) {
        var memberEntries = serializeAws_ec2LaunchPermissionList(input.Remove, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Remove.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2LaunchSpecsList = function (input, context) {
    var e_92, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_92 = __values(input), input_92_1 = input_92.next(); !input_92_1.done; input_92_1 = input_92.next()) {
            var entry = input_92_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2SpotFleetLaunchSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_92_1) { e_92 = { error: e_92_1 }; }
    finally {
        try {
            if (input_92_1 && !input_92_1.done && (_a = input_92.return)) _a.call(input_92);
        }
        finally { if (e_92) throw e_92.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateBlockDeviceMappingRequest = function (input, context) {
    var entries = {};
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.VirtualName !== undefined && input.VirtualName !== null) {
        entries["VirtualName"] = input.VirtualName;
    }
    if (input.Ebs !== undefined && input.Ebs !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateEbsBlockDeviceRequest(input.Ebs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ebs.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.NoDevice !== undefined && input.NoDevice !== null) {
        entries["NoDevice"] = input.NoDevice;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateBlockDeviceMappingRequestList = function (input, context) {
    var e_93, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_93 = __values(input), input_93_1 = input_93.next(); !input_93_1.done; input_93_1 = input_93.next()) {
            var entry = input_93_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LaunchTemplateBlockDeviceMappingRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["BlockDeviceMapping.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_93_1) { e_93 = { error: e_93_1 }; }
    finally {
        try {
            if (input_93_1 && !input_93_1.done && (_a = input_93.return)) _a.call(input_93);
        }
        finally { if (e_93) throw e_93.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateCapacityReservationSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.CapacityReservationPreference !== undefined && input.CapacityReservationPreference !== null) {
        entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
    }
    if (input.CapacityReservationTarget !== undefined && input.CapacityReservationTarget !== null) {
        var memberEntries = serializeAws_ec2CapacityReservationTarget(input.CapacityReservationTarget, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityReservationTarget.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateConfig = function (input, context) {
    var entries = {};
    if (input.LaunchTemplateSpecification !== undefined && input.LaunchTemplateSpecification !== null) {
        var memberEntries = serializeAws_ec2FleetLaunchTemplateSpecification(input.LaunchTemplateSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Overrides !== undefined && input.Overrides !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateOverridesList(input.Overrides, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Overrides.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateConfigList = function (input, context) {
    var e_94, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_94 = __values(input), input_94_1 = input_94.next(); !input_94_1.done; input_94_1 = input_94.next()) {
            var entry = input_94_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LaunchTemplateConfig(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_94_1) { e_94 = { error: e_94_1 }; }
    finally {
        try {
            if (input_94_1 && !input_94_1.done && (_a = input_94.return)) _a.call(input_94);
        }
        finally { if (e_94) throw e_94.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateCpuOptionsRequest = function (input, context) {
    var entries = {};
    if (input.CoreCount !== undefined && input.CoreCount !== null) {
        entries["CoreCount"] = input.CoreCount;
    }
    if (input.ThreadsPerCore !== undefined && input.ThreadsPerCore !== null) {
        entries["ThreadsPerCore"] = input.ThreadsPerCore;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateEbsBlockDeviceRequest = function (input, context) {
    var entries = {};
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize !== undefined && input.VolumeSize !== null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.Throughput !== undefined && input.Throughput !== null) {
        entries["Throughput"] = input.Throughput;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateElasticInferenceAccelerator = function (input, context) {
    var entries = {};
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.Count !== undefined && input.Count !== null) {
        entries["Count"] = input.Count;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateElasticInferenceAcceleratorList = function (input, context) {
    var e_95, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_95 = __values(input), input_95_1 = input_95.next(); !input_95_1.done; input_95_1 = input_95.next()) {
            var entry = input_95_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LaunchTemplateElasticInferenceAccelerator(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_95_1) { e_95 = { error: e_95_1 }; }
    finally {
        try {
            if (input_95_1 && !input_95_1.done && (_a = input_95.return)) _a.call(input_95);
        }
        finally { if (e_95) throw e_95.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateEnclaveOptionsRequest = function (input, context) {
    var entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateHibernationOptionsRequest = function (input, context) {
    var entries = {};
    if (input.Configured !== undefined && input.Configured !== null) {
        entries["Configured"] = input.Configured;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateIamInstanceProfileSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.Arn !== undefined && input.Arn !== null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateIdStringList = function (input, context) {
    var e_96, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_96 = __values(input), input_96_1 = input_96.next(); !input_96_1.done; input_96_1 = input_96.next()) {
            var entry = input_96_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_96_1) { e_96 = { error: e_96_1 }; }
    finally {
        try {
            if (input_96_1 && !input_96_1.done && (_a = input_96.return)) _a.call(input_96);
        }
        finally { if (e_96) throw e_96.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateInstanceMaintenanceOptionsRequest = function (input, context) {
    var entries = {};
    if (input.AutoRecovery !== undefined && input.AutoRecovery !== null) {
        entries["AutoRecovery"] = input.AutoRecovery;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateInstanceMarketOptionsRequest = function (input, context) {
    var entries = {};
    if (input.MarketType !== undefined && input.MarketType !== null) {
        entries["MarketType"] = input.MarketType;
    }
    if (input.SpotOptions !== undefined && input.SpotOptions !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateSpotMarketOptionsRequest(input.SpotOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SpotOptions.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateInstanceMetadataOptionsRequest = function (input, context) {
    var entries = {};
    if (input.HttpTokens !== undefined && input.HttpTokens !== null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit !== undefined && input.HttpPutResponseHopLimit !== null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint !== undefined && input.HttpEndpoint !== null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    if (input.HttpProtocolIpv6 !== undefined && input.HttpProtocolIpv6 !== null) {
        entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
    }
    if (input.InstanceMetadataTags !== undefined && input.InstanceMetadataTags !== null) {
        entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.AssociateCarrierIpAddress !== undefined && input.AssociateCarrierIpAddress !== null) {
        entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
    }
    if (input.AssociatePublicIpAddress !== undefined && input.AssociatePublicIpAddress !== null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InterfaceType !== undefined && input.InterfaceType !== null) {
        entries["InterfaceType"] = input.InterfaceType;
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        var memberEntries = serializeAws_ec2InstanceIpv6AddressListRequest(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Addresses.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        var memberEntries = serializeAws_ec2PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrivateIpAddresses.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.NetworkCardIndex !== undefined && input.NetworkCardIndex !== null) {
        entries["NetworkCardIndex"] = input.NetworkCardIndex;
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        var memberEntries = serializeAws_ec2Ipv4PrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv4Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount !== undefined && input.Ipv4PrefixCount !== null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        var memberEntries = serializeAws_ec2Ipv6PrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount !== undefined && input.Ipv6PrefixCount !== null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = function (input, context) {
    var e_97, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_97 = __values(input), input_97_1 = input_97.next(); !input_97_1.done; input_97_1 = input_97.next()) {
            var entry = input_97_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["InstanceNetworkInterfaceSpecification.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_97_1) { e_97 = { error: e_97_1 }; }
    finally {
        try {
            if (input_97_1 && !input_97_1.done && (_a = input_97.return)) _a.call(input_97);
        }
        finally { if (e_97) throw e_97.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateLicenseConfigurationRequest = function (input, context) {
    var entries = {};
    if (input.LicenseConfigurationArn !== undefined && input.LicenseConfigurationArn !== null) {
        entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateLicenseSpecificationListRequest = function (input, context) {
    var e_98, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_98 = __values(input), input_98_1 = input_98.next(); !input_98_1.done; input_98_1 = input_98.next()) {
            var entry = input_98_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LaunchTemplateLicenseConfigurationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_98_1) { e_98 = { error: e_98_1 }; }
    finally {
        try {
            if (input_98_1 && !input_98_1.done && (_a = input_98.return)) _a.call(input_98);
        }
        finally { if (e_98) throw e_98.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateNameStringList = function (input, context) {
    var e_99, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_99 = __values(input), input_99_1 = input_99.next(); !input_99_1.done; input_99_1 = input_99.next()) {
            var entry = input_99_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_99_1) { e_99 = { error: e_99_1 }; }
    finally {
        try {
            if (input_99_1 && !input_99_1.done && (_a = input_99.return)) _a.call(input_99);
        }
        finally { if (e_99) throw e_99.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateOverrides = function (input, context) {
    var entries = {};
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.WeightedCapacity !== undefined && input.WeightedCapacity !== null) {
        entries["WeightedCapacity"] = __serializeFloat(input.WeightedCapacity);
    }
    if (input.Priority !== undefined && input.Priority !== null) {
        entries["Priority"] = __serializeFloat(input.Priority);
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        var memberEntries = serializeAws_ec2InstanceRequirements(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceRequirements.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateOverridesList = function (input, context) {
    var e_100, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_100 = __values(input), input_100_1 = input_100.next(); !input_100_1.done; input_100_1 = input_100.next()) {
            var entry = input_100_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LaunchTemplateOverrides(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_100_1) { e_100 = { error: e_100_1 }; }
    finally {
        try {
            if (input_100_1 && !input_100_1.done && (_a = input_100.return)) _a.call(input_100);
        }
        finally { if (e_100) throw e_100.error; }
    }
    return entries;
};
var serializeAws_ec2LaunchTemplatePlacementRequest = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Affinity !== undefined && input.Affinity !== null) {
        entries["Affinity"] = input.Affinity;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.HostId !== undefined && input.HostId !== null) {
        entries["HostId"] = input.HostId;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.SpreadDomain !== undefined && input.SpreadDomain !== null) {
        entries["SpreadDomain"] = input.SpreadDomain;
    }
    if (input.HostResourceGroupArn !== undefined && input.HostResourceGroupArn !== null) {
        entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
    }
    if (input.PartitionNumber !== undefined && input.PartitionNumber !== null) {
        entries["PartitionNumber"] = input.PartitionNumber;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplatePrivateDnsNameOptionsRequest = function (input, context) {
    var entries = {};
    if (input.HostnameType !== undefined && input.HostnameType !== null) {
        entries["HostnameType"] = input.HostnameType;
    }
    if (input.EnableResourceNameDnsARecord !== undefined && input.EnableResourceNameDnsARecord !== null) {
        entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
    }
    if (input.EnableResourceNameDnsAAAARecord !== undefined && input.EnableResourceNameDnsAAAARecord !== null) {
        entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplatesMonitoringRequest = function (input, context) {
    var entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateSpecification = function (input, context) {
    var entries = {};
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version !== undefined && input.Version !== null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateSpotMarketOptionsRequest = function (input, context) {
    var entries = {};
    if (input.MaxPrice !== undefined && input.MaxPrice !== null) {
        entries["MaxPrice"] = input.MaxPrice;
    }
    if (input.SpotInstanceType !== undefined && input.SpotInstanceType !== null) {
        entries["SpotInstanceType"] = input.SpotInstanceType;
    }
    if (input.BlockDurationMinutes !== undefined && input.BlockDurationMinutes !== null) {
        entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateTagSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2LaunchTemplateTagSpecificationRequestList = function (input, context) {
    var e_101, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_101 = __values(input), input_101_1 = input_101.next(); !input_101_1.done; input_101_1 = input_101.next()) {
            var entry = input_101_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LaunchTemplateTagSpecificationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["LaunchTemplateTagSpecificationRequest.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_101_1) { e_101 = { error: e_101_1 }; }
    finally {
        try {
            if (input_101_1 && !input_101_1.done && (_a = input_101.return)) _a.call(input_101);
        }
        finally { if (e_101) throw e_101.error; }
    }
    return entries;
};
var serializeAws_ec2LicenseConfigurationRequest = function (input, context) {
    var entries = {};
    if (input.LicenseConfigurationArn !== undefined && input.LicenseConfigurationArn !== null) {
        entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
    }
    return entries;
};
var serializeAws_ec2LicenseSpecificationListRequest = function (input, context) {
    var e_102, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_102 = __values(input), input_102_1 = input_102.next(); !input_102_1.done; input_102_1 = input_102.next()) {
            var entry = input_102_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LicenseConfigurationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_102_1) { e_102 = { error: e_102_1 }; }
    finally {
        try {
            if (input_102_1 && !input_102_1.done && (_a = input_102.return)) _a.call(input_102);
        }
        finally { if (e_102) throw e_102.error; }
    }
    return entries;
};
var serializeAws_ec2ListImagesInRecycleBinRequest = function (input, context) {
    var entries = {};
    if (input.ImageIds !== undefined && input.ImageIds !== null) {
        var memberEntries = serializeAws_ec2ImageIdStringList(input.ImageIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ImageId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ListSnapshotsInRecycleBinRequest = function (input, context) {
    var entries = {};
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SnapshotIds !== undefined && input.SnapshotIds !== null) {
        var memberEntries = serializeAws_ec2SnapshotIdStringList(input.SnapshotIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SnapshotId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2LoadBalancersConfig = function (input, context) {
    var entries = {};
    if (input.ClassicLoadBalancersConfig !== undefined && input.ClassicLoadBalancersConfig !== null) {
        var memberEntries = serializeAws_ec2ClassicLoadBalancersConfig(input.ClassicLoadBalancersConfig, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ClassicLoadBalancersConfig.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.TargetGroupsConfig !== undefined && input.TargetGroupsConfig !== null) {
        var memberEntries = serializeAws_ec2TargetGroupsConfig(input.TargetGroupsConfig, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TargetGroupsConfig.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2LoadPermissionListRequest = function (input, context) {
    var e_103, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_103 = __values(input), input_103_1 = input_103.next(); !input_103_1.done; input_103_1 = input_103.next()) {
            var entry = input_103_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2LoadPermissionRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_103_1) { e_103 = { error: e_103_1 }; }
    finally {
        try {
            if (input_103_1 && !input_103_1.done && (_a = input_103.return)) _a.call(input_103);
        }
        finally { if (e_103) throw e_103.error; }
    }
    return entries;
};
var serializeAws_ec2LoadPermissionModifications = function (input, context) {
    var entries = {};
    if (input.Add !== undefined && input.Add !== null) {
        var memberEntries = serializeAws_ec2LoadPermissionListRequest(input.Add, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Add.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Remove !== undefined && input.Remove !== null) {
        var memberEntries = serializeAws_ec2LoadPermissionListRequest(input.Remove, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Remove.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2LoadPermissionRequest = function (input, context) {
    var entries = {};
    if (input.Group !== undefined && input.Group !== null) {
        entries["Group"] = input.Group;
    }
    if (input.UserId !== undefined && input.UserId !== null) {
        entries["UserId"] = input.UserId;
    }
    return entries;
};
var serializeAws_ec2LocalGatewayIdSet = function (input, context) {
    var e_104, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_104 = __values(input), input_104_1 = input_104.next(); !input_104_1.done; input_104_1 = input_104.next()) {
            var entry = input_104_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_104_1) { e_104 = { error: e_104_1 }; }
    finally {
        try {
            if (input_104_1 && !input_104_1.done && (_a = input_104.return)) _a.call(input_104);
        }
        finally { if (e_104) throw e_104.error; }
    }
    return entries;
};
var serializeAws_ec2LocalGatewayRouteTableIdSet = function (input, context) {
    var e_105, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_105 = __values(input), input_105_1 = input_105.next(); !input_105_1.done; input_105_1 = input_105.next()) {
            var entry = input_105_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_105_1) { e_105 = { error: e_105_1 }; }
    finally {
        try {
            if (input_105_1 && !input_105_1.done && (_a = input_105.return)) _a.call(input_105);
        }
        finally { if (e_105) throw e_105.error; }
    }
    return entries;
};
var serializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet = function (input, context) {
    var e_106, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_106 = __values(input), input_106_1 = input_106.next(); !input_106_1.done; input_106_1 = input_106.next()) {
            var entry = input_106_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_106_1) { e_106 = { error: e_106_1 }; }
    finally {
        try {
            if (input_106_1 && !input_106_1.done && (_a = input_106.return)) _a.call(input_106);
        }
        finally { if (e_106) throw e_106.error; }
    }
    return entries;
};
var serializeAws_ec2LocalGatewayRouteTableVpcAssociationIdSet = function (input, context) {
    var e_107, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_107 = __values(input), input_107_1 = input_107.next(); !input_107_1.done; input_107_1 = input_107.next()) {
            var entry = input_107_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_107_1) { e_107 = { error: e_107_1 }; }
    finally {
        try {
            if (input_107_1 && !input_107_1.done && (_a = input_107.return)) _a.call(input_107);
        }
        finally { if (e_107) throw e_107.error; }
    }
    return entries;
};
var serializeAws_ec2LocalGatewayVirtualInterfaceGroupIdSet = function (input, context) {
    var e_108, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_108 = __values(input), input_108_1 = input_108.next(); !input_108_1.done; input_108_1 = input_108.next()) {
            var entry = input_108_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_108_1) { e_108 = { error: e_108_1 }; }
    finally {
        try {
            if (input_108_1 && !input_108_1.done && (_a = input_108.return)) _a.call(input_108);
        }
        finally { if (e_108) throw e_108.error; }
    }
    return entries;
};
var serializeAws_ec2LocalGatewayVirtualInterfaceIdSet = function (input, context) {
    var e_109, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_109 = __values(input), input_109_1 = input_109.next(); !input_109_1.done; input_109_1 = input_109.next()) {
            var entry = input_109_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_109_1) { e_109 = { error: e_109_1 }; }
    finally {
        try {
            if (input_109_1 && !input_109_1.done && (_a = input_109.return)) _a.call(input_109);
        }
        finally { if (e_109) throw e_109.error; }
    }
    return entries;
};
var serializeAws_ec2LocalStorageTypeSet = function (input, context) {
    var e_110, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_110 = __values(input), input_110_1 = input_110.next(); !input_110_1.done; input_110_1 = input_110.next()) {
            var entry = input_110_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_110_1) { e_110 = { error: e_110_1 }; }
    finally {
        try {
            if (input_110_1 && !input_110_1.done && (_a = input_110.return)) _a.call(input_110);
        }
        finally { if (e_110) throw e_110.error; }
    }
    return entries;
};
var serializeAws_ec2MemoryGiBPerVCpu = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
var serializeAws_ec2MemoryGiBPerVCpuRequest = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
var serializeAws_ec2MemoryMiB = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2MemoryMiBRequest = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2ModifyAddressAttributeRequest = function (input, context) {
    var entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.DomainName !== undefined && input.DomainName !== null) {
        entries["DomainName"] = input.DomainName;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyAvailabilityZoneGroupRequest = function (input, context) {
    var entries = {};
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.OptInStatus !== undefined && input.OptInStatus !== null) {
        entries["OptInStatus"] = input.OptInStatus;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyCapacityReservationFleetRequest = function (input, context) {
    var entries = {};
    if (input.CapacityReservationFleetId !== undefined && input.CapacityReservationFleetId !== null) {
        entries["CapacityReservationFleetId"] = input.CapacityReservationFleetId;
    }
    if (input.TotalTargetCapacity !== undefined && input.TotalTargetCapacity !== null) {
        entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
    }
    if (input.EndDate !== undefined && input.EndDate !== null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RemoveEndDate !== undefined && input.RemoveEndDate !== null) {
        entries["RemoveEndDate"] = input.RemoveEndDate;
    }
    return entries;
};
var serializeAws_ec2ModifyCapacityReservationRequest = function (input, context) {
    var entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.EndDate !== undefined && input.EndDate !== null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.EndDateType !== undefined && input.EndDateType !== null) {
        entries["EndDateType"] = input.EndDateType;
    }
    if (input.Accept !== undefined && input.Accept !== null) {
        entries["Accept"] = input.Accept;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    return entries;
};
var serializeAws_ec2ModifyClientVpnEndpointRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.ServerCertificateArn !== undefined && input.ServerCertificateArn !== null) {
        entries["ServerCertificateArn"] = input.ServerCertificateArn;
    }
    if (input.ConnectionLogOptions !== undefined && input.ConnectionLogOptions !== null) {
        var memberEntries = serializeAws_ec2ConnectionLogOptions(input.ConnectionLogOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ConnectionLogOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DnsServers !== undefined && input.DnsServers !== null) {
        var memberEntries = serializeAws_ec2DnsServersOptionsModifyStructure(input.DnsServers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DnsServers.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.VpnPort !== undefined && input.VpnPort !== null) {
        entries["VpnPort"] = input.VpnPort;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.SplitTunnel !== undefined && input.SplitTunnel !== null) {
        entries["SplitTunnel"] = input.SplitTunnel;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SelfServicePortal !== undefined && input.SelfServicePortal !== null) {
        entries["SelfServicePortal"] = input.SelfServicePortal;
    }
    if (input.ClientConnectOptions !== undefined && input.ClientConnectOptions !== null) {
        var memberEntries = serializeAws_ec2ClientConnectOptions(input.ClientConnectOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ClientConnectOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.SessionTimeoutHours !== undefined && input.SessionTimeoutHours !== null) {
        entries["SessionTimeoutHours"] = input.SessionTimeoutHours;
    }
    if (input.ClientLoginBannerOptions !== undefined && input.ClientLoginBannerOptions !== null) {
        var memberEntries = serializeAws_ec2ClientLoginBannerOptions(input.ClientLoginBannerOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ClientLoginBannerOptions.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyDefaultCreditSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    if (input.CpuCredits !== undefined && input.CpuCredits !== null) {
        entries["CpuCredits"] = input.CpuCredits;
    }
    return entries;
};
var serializeAws_ec2ModifyEbsDefaultKmsKeyIdRequest = function (input, context) {
    var entries = {};
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyFleetRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
        var memberEntries = serializeAws_ec2FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateConfig.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.FleetId !== undefined && input.FleetId !== null) {
        entries["FleetId"] = input.FleetId;
    }
    if (input.TargetCapacitySpecification !== undefined && input.TargetCapacitySpecification !== null) {
        var memberEntries = serializeAws_ec2TargetCapacitySpecificationRequest(input.TargetCapacitySpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TargetCapacitySpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Context !== undefined && input.Context !== null) {
        entries["Context"] = input.Context;
    }
    return entries;
};
var serializeAws_ec2ModifyFpgaImageAttributeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.OperationType !== undefined && input.OperationType !== null) {
        entries["OperationType"] = input.OperationType;
    }
    if (input.UserIds !== undefined && input.UserIds !== null) {
        var memberEntries = serializeAws_ec2UserIdStringList(input.UserIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.UserGroups !== undefined && input.UserGroups !== null) {
        var memberEntries = serializeAws_ec2UserGroupStringList(input.UserGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserGroup.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ProductCodes !== undefined && input.ProductCodes !== null) {
        var memberEntries = serializeAws_ec2ProductCodeStringList(input.ProductCodes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ProductCode.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.LoadPermission !== undefined && input.LoadPermission !== null) {
        var memberEntries = serializeAws_ec2LoadPermissionModifications(input.LoadPermission, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LoadPermission.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
var serializeAws_ec2ModifyHostsRequest = function (input, context) {
    var entries = {};
    if (input.AutoPlacement !== undefined && input.AutoPlacement !== null) {
        entries["AutoPlacement"] = input.AutoPlacement;
    }
    if (input.HostIds !== undefined && input.HostIds !== null) {
        var memberEntries = serializeAws_ec2RequestHostIdList(input.HostIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "HostId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.HostRecovery !== undefined && input.HostRecovery !== null) {
        entries["HostRecovery"] = input.HostRecovery;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    return entries;
};
var serializeAws_ec2ModifyIdentityIdFormatRequest = function (input, context) {
    var entries = {};
    if (input.PrincipalArn !== undefined && input.PrincipalArn !== null) {
        entries["PrincipalArn"] = input.PrincipalArn;
    }
    if (input.Resource !== undefined && input.Resource !== null) {
        entries["Resource"] = input.Resource;
    }
    if (input.UseLongIds !== undefined && input.UseLongIds !== null) {
        entries["UseLongIds"] = input.UseLongIds;
    }
    return entries;
};
var serializeAws_ec2ModifyIdFormatRequest = function (input, context) {
    var entries = {};
    if (input.Resource !== undefined && input.Resource !== null) {
        entries["Resource"] = input.Resource;
    }
    if (input.UseLongIds !== undefined && input.UseLongIds !== null) {
        entries["UseLongIds"] = input.UseLongIds;
    }
    return entries;
};
var serializeAws_ec2ModifyImageAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.Description !== undefined && input.Description !== null) {
        var memberEntries = serializeAws_ec2AttributeValue(input.Description, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Description.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.LaunchPermission !== undefined && input.LaunchPermission !== null) {
        var memberEntries = serializeAws_ec2LaunchPermissionModifications(input.LaunchPermission, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchPermission.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.OperationType !== undefined && input.OperationType !== null) {
        entries["OperationType"] = input.OperationType;
    }
    if (input.ProductCodes !== undefined && input.ProductCodes !== null) {
        var memberEntries = serializeAws_ec2ProductCodeStringList(input.ProductCodes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ProductCode.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.UserGroups !== undefined && input.UserGroups !== null) {
        var memberEntries = serializeAws_ec2UserGroupStringList(input.UserGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserGroup.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.UserIds !== undefined && input.UserIds !== null) {
        var memberEntries = serializeAws_ec2UserIdStringList(input.UserIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.OrganizationArns !== undefined && input.OrganizationArns !== null) {
        var memberEntries = serializeAws_ec2OrganizationArnStringList(input.OrganizationArns, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "OrganizationArn.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.OrganizationalUnitArns !== undefined && input.OrganizationalUnitArns !== null) {
        var memberEntries = serializeAws_ec2OrganizationalUnitArnStringList(input.OrganizationalUnitArns, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "OrganizationalUnitArn.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyInstanceAttributeRequest = function (input, context) {
    var entries = {};
    if (input.SourceDestCheck !== undefined && input.SourceDestCheck !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.SourceDestCheck, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourceDestCheck.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        var memberEntries = serializeAws_ec2InstanceBlockDeviceMappingSpecificationList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BlockDeviceMapping.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DisableApiTermination !== undefined && input.DisableApiTermination !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.DisableApiTermination, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DisableApiTermination.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.EbsOptimized, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EbsOptimized.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.EnaSupport !== undefined && input.EnaSupport !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnaSupport, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnaSupport.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        var memberEntries = serializeAws_ec2GroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
        var memberEntries = serializeAws_ec2AttributeValue(input.InstanceInitiatedShutdownBehavior, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceInitiatedShutdownBehavior.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        var memberEntries = serializeAws_ec2AttributeValue(input.InstanceType, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceType.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Kernel !== undefined && input.Kernel !== null) {
        var memberEntries = serializeAws_ec2AttributeValue(input.Kernel, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Kernel.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Ramdisk !== undefined && input.Ramdisk !== null) {
        var memberEntries = serializeAws_ec2AttributeValue(input.Ramdisk, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ramdisk.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.SriovNetSupport !== undefined && input.SriovNetSupport !== null) {
        var memberEntries = serializeAws_ec2AttributeValue(input.SriovNetSupport, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SriovNetSupport.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        var memberEntries = serializeAws_ec2BlobAttributeValue(input.UserData, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserData.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    if (input.DisableApiStop !== undefined && input.DisableApiStop !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.DisableApiStop, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DisableApiStop.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyInstanceCapacityReservationAttributesRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.CapacityReservationSpecification !== undefined && input.CapacityReservationSpecification !== null) {
        var memberEntries = serializeAws_ec2CapacityReservationSpecification(input.CapacityReservationSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityReservationSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyInstanceCreditSpecificationRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceCreditSpecifications !== undefined && input.InstanceCreditSpecifications !== null) {
        var memberEntries = serializeAws_ec2InstanceCreditSpecificationListRequest(input.InstanceCreditSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceCreditSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyInstanceEventStartTimeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.InstanceEventId !== undefined && input.InstanceEventId !== null) {
        entries["InstanceEventId"] = input.InstanceEventId;
    }
    if (input.NotBefore !== undefined && input.NotBefore !== null) {
        entries["NotBefore"] = input.NotBefore.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
var serializeAws_ec2ModifyInstanceEventWindowRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.InstanceEventWindowId !== undefined && input.InstanceEventWindowId !== null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    if (input.TimeRanges !== undefined && input.TimeRanges !== null) {
        var memberEntries = serializeAws_ec2InstanceEventWindowTimeRangeRequestSet(input.TimeRanges, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TimeRange.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.CronExpression !== undefined && input.CronExpression !== null) {
        entries["CronExpression"] = input.CronExpression;
    }
    return entries;
};
var serializeAws_ec2ModifyInstanceMaintenanceOptionsRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.AutoRecovery !== undefined && input.AutoRecovery !== null) {
        entries["AutoRecovery"] = input.AutoRecovery;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyInstanceMetadataOptionsRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.HttpTokens !== undefined && input.HttpTokens !== null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit !== undefined && input.HttpPutResponseHopLimit !== null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint !== undefined && input.HttpEndpoint !== null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.HttpProtocolIpv6 !== undefined && input.HttpProtocolIpv6 !== null) {
        entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
    }
    if (input.InstanceMetadataTags !== undefined && input.InstanceMetadataTags !== null) {
        entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
    }
    return entries;
};
var serializeAws_ec2ModifyInstancePlacementRequest = function (input, context) {
    var entries = {};
    if (input.Affinity !== undefined && input.Affinity !== null) {
        entries["Affinity"] = input.Affinity;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.HostId !== undefined && input.HostId !== null) {
        entries["HostId"] = input.HostId;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.PartitionNumber !== undefined && input.PartitionNumber !== null) {
        entries["PartitionNumber"] = input.PartitionNumber;
    }
    if (input.HostResourceGroupArn !== undefined && input.HostResourceGroupArn !== null) {
        entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
    }
    return entries;
};
var serializeAws_ec2ModifyIpamPoolRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.AutoImport !== undefined && input.AutoImport !== null) {
        entries["AutoImport"] = input.AutoImport;
    }
    if (input.AllocationMinNetmaskLength !== undefined && input.AllocationMinNetmaskLength !== null) {
        entries["AllocationMinNetmaskLength"] = input.AllocationMinNetmaskLength;
    }
    if (input.AllocationMaxNetmaskLength !== undefined && input.AllocationMaxNetmaskLength !== null) {
        entries["AllocationMaxNetmaskLength"] = input.AllocationMaxNetmaskLength;
    }
    if (input.AllocationDefaultNetmaskLength !== undefined && input.AllocationDefaultNetmaskLength !== null) {
        entries["AllocationDefaultNetmaskLength"] = input.AllocationDefaultNetmaskLength;
    }
    if (input.ClearAllocationDefaultNetmaskLength !== undefined && input.ClearAllocationDefaultNetmaskLength !== null) {
        entries["ClearAllocationDefaultNetmaskLength"] = input.ClearAllocationDefaultNetmaskLength;
    }
    if (input.AddAllocationResourceTags !== undefined && input.AddAllocationResourceTags !== null) {
        var memberEntries = serializeAws_ec2RequestIpamResourceTagList(input.AddAllocationResourceTags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddAllocationResourceTag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveAllocationResourceTags !== undefined && input.RemoveAllocationResourceTags !== null) {
        var memberEntries = serializeAws_ec2RequestIpamResourceTagList(input.RemoveAllocationResourceTags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveAllocationResourceTag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyIpamRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId !== undefined && input.IpamId !== null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.AddOperatingRegions !== undefined && input.AddOperatingRegions !== null) {
        var memberEntries = serializeAws_ec2AddIpamOperatingRegionSet(input.AddOperatingRegions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddOperatingRegion.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveOperatingRegions !== undefined && input.RemoveOperatingRegions !== null) {
        var memberEntries = serializeAws_ec2RemoveIpamOperatingRegionSet(input.RemoveOperatingRegions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveOperatingRegion.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyIpamResourceCidrRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ResourceId !== undefined && input.ResourceId !== null) {
        entries["ResourceId"] = input.ResourceId;
    }
    if (input.ResourceCidr !== undefined && input.ResourceCidr !== null) {
        entries["ResourceCidr"] = input.ResourceCidr;
    }
    if (input.ResourceRegion !== undefined && input.ResourceRegion !== null) {
        entries["ResourceRegion"] = input.ResourceRegion;
    }
    if (input.CurrentIpamScopeId !== undefined && input.CurrentIpamScopeId !== null) {
        entries["CurrentIpamScopeId"] = input.CurrentIpamScopeId;
    }
    if (input.DestinationIpamScopeId !== undefined && input.DestinationIpamScopeId !== null) {
        entries["DestinationIpamScopeId"] = input.DestinationIpamScopeId;
    }
    if (input.Monitored !== undefined && input.Monitored !== null) {
        entries["Monitored"] = input.Monitored;
    }
    return entries;
};
var serializeAws_ec2ModifyIpamScopeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
var serializeAws_ec2ModifyLaunchTemplateRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.DefaultVersion !== undefined && input.DefaultVersion !== null) {
        entries["SetDefaultVersion"] = input.DefaultVersion;
    }
    return entries;
};
var serializeAws_ec2ModifyManagedPrefixListRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.CurrentVersion !== undefined && input.CurrentVersion !== null) {
        entries["CurrentVersion"] = input.CurrentVersion;
    }
    if (input.PrefixListName !== undefined && input.PrefixListName !== null) {
        entries["PrefixListName"] = input.PrefixListName;
    }
    if (input.AddEntries !== undefined && input.AddEntries !== null) {
        var memberEntries = serializeAws_ec2AddPrefixListEntries(input.AddEntries, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddEntry.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveEntries !== undefined && input.RemoveEntries !== null) {
        var memberEntries = serializeAws_ec2RemovePrefixListEntries(input.RemoveEntries, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveEntry.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxEntries !== undefined && input.MaxEntries !== null) {
        entries["MaxEntries"] = input.MaxEntries;
    }
    return entries;
};
var serializeAws_ec2ModifyNetworkInterfaceAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attachment !== undefined && input.Attachment !== null) {
        var memberEntries = serializeAws_ec2NetworkInterfaceAttachmentChanges(input.Attachment, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Attachment.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        var memberEntries = serializeAws_ec2AttributeValue(input.Description, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Description.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.SourceDestCheck !== undefined && input.SourceDestCheck !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.SourceDestCheck, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourceDestCheck.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyPrivateDnsNameOptionsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.PrivateDnsHostnameType !== undefined && input.PrivateDnsHostnameType !== null) {
        entries["PrivateDnsHostnameType"] = input.PrivateDnsHostnameType;
    }
    if (input.EnableResourceNameDnsARecord !== undefined && input.EnableResourceNameDnsARecord !== null) {
        entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
    }
    if (input.EnableResourceNameDnsAAAARecord !== undefined && input.EnableResourceNameDnsAAAARecord !== null) {
        entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
    }
    return entries;
};
var serializeAws_ec2ModifyReservedInstancesRequest = function (input, context) {
    var entries = {};
    if (input.ReservedInstancesIds !== undefined && input.ReservedInstancesIds !== null) {
        var memberEntries = serializeAws_ec2ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReservedInstancesId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TargetConfigurations !== undefined && input.TargetConfigurations !== null) {
        var memberEntries = serializeAws_ec2ReservedInstancesConfigurationList(input.TargetConfigurations, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReservedInstancesConfigurationSetItemType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifySecurityGroupRulesRequest = function (input, context) {
    var entries = {};
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.SecurityGroupRules !== undefined && input.SecurityGroupRules !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupRuleUpdateList(input.SecurityGroupRules, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupRule.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifySnapshotAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.CreateVolumePermission !== undefined && input.CreateVolumePermission !== null) {
        var memberEntries = serializeAws_ec2CreateVolumePermissionModifications(input.CreateVolumePermission, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CreateVolumePermission.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.GroupNames !== undefined && input.GroupNames !== null) {
        var memberEntries = serializeAws_ec2GroupNameStringList(input.GroupNames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserGroup.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.OperationType !== undefined && input.OperationType !== null) {
        entries["OperationType"] = input.OperationType;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.UserIds !== undefined && input.UserIds !== null) {
        var memberEntries = serializeAws_ec2UserIdStringList(input.UserIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifySnapshotTierRequest = function (input, context) {
    var entries = {};
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.StorageTier !== undefined && input.StorageTier !== null) {
        entries["StorageTier"] = input.StorageTier;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifySpotFleetRequestRequest = function (input, context) {
    var entries = {};
    if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateConfig.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SpotFleetRequestId !== undefined && input.SpotFleetRequestId !== null) {
        entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
    }
    if (input.TargetCapacity !== undefined && input.TargetCapacity !== null) {
        entries["TargetCapacity"] = input.TargetCapacity;
    }
    if (input.OnDemandTargetCapacity !== undefined && input.OnDemandTargetCapacity !== null) {
        entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
    }
    if (input.Context !== undefined && input.Context !== null) {
        entries["Context"] = input.Context;
    }
    return entries;
};
var serializeAws_ec2ModifySubnetAttributeRequest = function (input, context) {
    var entries = {};
    if (input.AssignIpv6AddressOnCreation !== undefined && input.AssignIpv6AddressOnCreation !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.AssignIpv6AddressOnCreation, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AssignIpv6AddressOnCreation.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MapPublicIpOnLaunch !== undefined && input.MapPublicIpOnLaunch !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.MapPublicIpOnLaunch, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MapPublicIpOnLaunch.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.MapCustomerOwnedIpOnLaunch !== undefined && input.MapCustomerOwnedIpOnLaunch !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.MapCustomerOwnedIpOnLaunch, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MapCustomerOwnedIpOnLaunch.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.CustomerOwnedIpv4Pool !== undefined && input.CustomerOwnedIpv4Pool !== null) {
        entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
    }
    if (input.EnableDns64 !== undefined && input.EnableDns64 !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableDns64, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableDns64.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsHostnameTypeOnLaunch !== undefined && input.PrivateDnsHostnameTypeOnLaunch !== null) {
        entries["PrivateDnsHostnameTypeOnLaunch"] = input.PrivateDnsHostnameTypeOnLaunch;
    }
    if (input.EnableResourceNameDnsARecordOnLaunch !== undefined && input.EnableResourceNameDnsARecordOnLaunch !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableResourceNameDnsARecordOnLaunch, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableResourceNameDnsARecordOnLaunch.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.EnableResourceNameDnsAAAARecordOnLaunch !== undefined &&
        input.EnableResourceNameDnsAAAARecordOnLaunch !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableResourceNameDnsAAAARecordOnLaunch, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableResourceNameDnsAAAARecordOnLaunch.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.EnableLniAtDeviceIndex !== undefined && input.EnableLniAtDeviceIndex !== null) {
        entries["EnableLniAtDeviceIndex"] = input.EnableLniAtDeviceIndex;
    }
    if (input.DisableLniAtDeviceIndex !== undefined && input.DisableLniAtDeviceIndex !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.DisableLniAtDeviceIndex, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DisableLniAtDeviceIndex.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.AddNetworkServices !== undefined && input.AddNetworkServices !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorNetworkServiceList(input.AddNetworkServices, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddNetworkService.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveNetworkServices !== undefined && input.RemoveNetworkServices !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorNetworkServiceList(input.RemoveNetworkServices, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveNetworkService.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyTrafficMirrorFilterRuleRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorFilterRuleId !== undefined && input.TrafficMirrorFilterRuleId !== null) {
        entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
    }
    if (input.TrafficDirection !== undefined && input.TrafficDirection !== null) {
        entries["TrafficDirection"] = input.TrafficDirection;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    if (input.RuleAction !== undefined && input.RuleAction !== null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.DestinationPortRange !== undefined && input.DestinationPortRange !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DestinationPortRange.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.SourcePortRange !== undefined && input.SourcePortRange !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourcePortRange.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.SourceCidrBlock !== undefined && input.SourceCidrBlock !== null) {
        entries["SourceCidrBlock"] = input.SourceCidrBlock;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.RemoveFields !== undefined && input.RemoveFields !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorFilterRuleFieldList(input.RemoveFields, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveField.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyTrafficMirrorSessionRequest = function (input, context) {
    var entries = {};
    if (input.TrafficMirrorSessionId !== undefined && input.TrafficMirrorSessionId !== null) {
        entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
    }
    if (input.TrafficMirrorTargetId !== undefined && input.TrafficMirrorTargetId !== null) {
        entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
    }
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.PacketLength !== undefined && input.PacketLength !== null) {
        entries["PacketLength"] = input.PacketLength;
    }
    if (input.SessionNumber !== undefined && input.SessionNumber !== null) {
        entries["SessionNumber"] = input.SessionNumber;
    }
    if (input.VirtualNetworkId !== undefined && input.VirtualNetworkId !== null) {
        entries["VirtualNetworkId"] = input.VirtualNetworkId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.RemoveFields !== undefined && input.RemoveFields !== null) {
        var memberEntries = serializeAws_ec2TrafficMirrorSessionFieldList(input.RemoveFields, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveField.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyTransitGatewayOptions = function (input, context) {
    var entries = {};
    if (input.AddTransitGatewayCidrBlocks !== undefined && input.AddTransitGatewayCidrBlocks !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayCidrBlockStringList(input.AddTransitGatewayCidrBlocks, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddTransitGatewayCidrBlocks.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveTransitGatewayCidrBlocks !== undefined && input.RemoveTransitGatewayCidrBlocks !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayCidrBlockStringList(input.RemoveTransitGatewayCidrBlocks, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveTransitGatewayCidrBlocks.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.VpnEcmpSupport !== undefined && input.VpnEcmpSupport !== null) {
        entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
    }
    if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.AutoAcceptSharedAttachments !== undefined && input.AutoAcceptSharedAttachments !== null) {
        entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
    }
    if (input.DefaultRouteTableAssociation !== undefined && input.DefaultRouteTableAssociation !== null) {
        entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
    }
    if (input.AssociationDefaultRouteTableId !== undefined && input.AssociationDefaultRouteTableId !== null) {
        entries["AssociationDefaultRouteTableId"] = input.AssociationDefaultRouteTableId;
    }
    if (input.DefaultRouteTablePropagation !== undefined && input.DefaultRouteTablePropagation !== null) {
        entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
    }
    if (input.PropagationDefaultRouteTableId !== undefined && input.PropagationDefaultRouteTableId !== null) {
        entries["PropagationDefaultRouteTableId"] = input.PropagationDefaultRouteTableId;
    }
    return entries;
};
var serializeAws_ec2ModifyTransitGatewayPrefixListReferenceRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole !== undefined && input.Blackhole !== null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyTransitGatewayRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Options !== undefined && input.Options !== null) {
        var memberEntries = serializeAws_ec2ModifyTransitGatewayOptions(input.Options, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Options.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.AddSubnetIds !== undefined && input.AddSubnetIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.AddSubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddSubnetIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveSubnetIds !== undefined && input.RemoveSubnetIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.RemoveSubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveSubnetIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Options !== undefined && input.Options !== null) {
        var memberEntries = serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Options.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequestOptions = function (input, context) {
    var entries = {};
    if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.Ipv6Support !== undefined && input.Ipv6Support !== null) {
        entries["Ipv6Support"] = input.Ipv6Support;
    }
    if (input.ApplianceModeSupport !== undefined && input.ApplianceModeSupport !== null) {
        entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
    }
    return entries;
};
var serializeAws_ec2ModifyVolumeAttributeRequest = function (input, context) {
    var entries = {};
    if (input.AutoEnableIO !== undefined && input.AutoEnableIO !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.AutoEnableIO, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AutoEnableIO.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyVolumeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.Size !== undefined && input.Size !== null) {
        entries["Size"] = input.Size;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.Throughput !== undefined && input.Throughput !== null) {
        entries["Throughput"] = input.Throughput;
    }
    if (input.MultiAttachEnabled !== undefined && input.MultiAttachEnabled !== null) {
        entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
    }
    return entries;
};
var serializeAws_ec2ModifyVpcAttributeRequest = function (input, context) {
    var entries = {};
    if (input.EnableDnsHostnames !== undefined && input.EnableDnsHostnames !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableDnsHostnames, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableDnsHostnames.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.EnableDnsSupport !== undefined && input.EnableDnsSupport !== null) {
        var memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableDnsSupport, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnableDnsSupport.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
var serializeAws_ec2ModifyVpcEndpointConnectionNotificationRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ConnectionNotificationId !== undefined && input.ConnectionNotificationId !== null) {
        entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
    }
    if (input.ConnectionNotificationArn !== undefined && input.ConnectionNotificationArn !== null) {
        entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
    }
    if (input.ConnectionEvents !== undefined && input.ConnectionEvents !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.ConnectionEvents, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ConnectionEvents.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyVpcEndpointRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.ResetPolicy !== undefined && input.ResetPolicy !== null) {
        entries["ResetPolicy"] = input.ResetPolicy;
    }
    if (input.PolicyDocument !== undefined && input.PolicyDocument !== null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.AddRouteTableIds !== undefined && input.AddRouteTableIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointRouteTableIdList(input.AddRouteTableIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddRouteTableId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveRouteTableIds !== undefined && input.RemoveRouteTableIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointRouteTableIdList(input.RemoveRouteTableIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveRouteTableId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AddSubnetIds !== undefined && input.AddSubnetIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointSubnetIdList(input.AddSubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddSubnetId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveSubnetIds !== undefined && input.RemoveSubnetIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointSubnetIdList(input.RemoveSubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveSubnetId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AddSecurityGroupIds !== undefined && input.AddSecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointSecurityGroupIdList(input.AddSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddSecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveSecurityGroupIds !== undefined && input.RemoveSecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointSecurityGroupIdList(input.RemoveSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveSecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.IpAddressType !== undefined && input.IpAddressType !== null) {
        entries["IpAddressType"] = input.IpAddressType;
    }
    if (input.DnsOptions !== undefined && input.DnsOptions !== null) {
        var memberEntries = serializeAws_ec2DnsOptionsSpecification(input.DnsOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DnsOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsEnabled !== undefined && input.PrivateDnsEnabled !== null) {
        entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
    }
    return entries;
};
var serializeAws_ec2ModifyVpcEndpointServiceConfigurationRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.PrivateDnsName !== undefined && input.PrivateDnsName !== null) {
        entries["PrivateDnsName"] = input.PrivateDnsName;
    }
    if (input.RemovePrivateDnsName !== undefined && input.RemovePrivateDnsName !== null) {
        entries["RemovePrivateDnsName"] = input.RemovePrivateDnsName;
    }
    if (input.AcceptanceRequired !== undefined && input.AcceptanceRequired !== null) {
        entries["AcceptanceRequired"] = input.AcceptanceRequired;
    }
    if (input.AddNetworkLoadBalancerArns !== undefined && input.AddNetworkLoadBalancerArns !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.AddNetworkLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddNetworkLoadBalancerArn.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveNetworkLoadBalancerArns !== undefined && input.RemoveNetworkLoadBalancerArns !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.RemoveNetworkLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveNetworkLoadBalancerArn.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AddGatewayLoadBalancerArns !== undefined && input.AddGatewayLoadBalancerArns !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.AddGatewayLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddGatewayLoadBalancerArn.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveGatewayLoadBalancerArns !== undefined && input.RemoveGatewayLoadBalancerArns !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.RemoveGatewayLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveGatewayLoadBalancerArn.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AddSupportedIpAddressTypes !== undefined && input.AddSupportedIpAddressTypes !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.AddSupportedIpAddressTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddSupportedIpAddressType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveSupportedIpAddressTypes !== undefined && input.RemoveSupportedIpAddressTypes !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.RemoveSupportedIpAddressTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveSupportedIpAddressType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.PayerResponsibility !== undefined && input.PayerResponsibility !== null) {
        entries["PayerResponsibility"] = input.PayerResponsibility;
    }
    return entries;
};
var serializeAws_ec2ModifyVpcEndpointServicePermissionsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.AddAllowedPrincipals !== undefined && input.AddAllowedPrincipals !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.AddAllowedPrincipals, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AddAllowedPrincipals.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RemoveAllowedPrincipals !== undefined && input.RemoveAllowedPrincipals !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.RemoveAllowedPrincipals, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RemoveAllowedPrincipals.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ModifyVpcPeeringConnectionOptionsRequest = function (input, context) {
    var entries = {};
    if (input.AccepterPeeringConnectionOptions !== undefined && input.AccepterPeeringConnectionOptions !== null) {
        var memberEntries = serializeAws_ec2PeeringConnectionOptionsRequest(input.AccepterPeeringConnectionOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "AccepterPeeringConnectionOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RequesterPeeringConnectionOptions !== undefined && input.RequesterPeeringConnectionOptions !== null) {
        var memberEntries = serializeAws_ec2PeeringConnectionOptionsRequest(input.RequesterPeeringConnectionOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "RequesterPeeringConnectionOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
var serializeAws_ec2ModifyVpcTenancyRequest = function (input, context) {
    var entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.InstanceTenancy !== undefined && input.InstanceTenancy !== null) {
        entries["InstanceTenancy"] = input.InstanceTenancy;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyVpnConnectionOptionsRequest = function (input, context) {
    var entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.LocalIpv4NetworkCidr !== undefined && input.LocalIpv4NetworkCidr !== null) {
        entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
    }
    if (input.RemoteIpv4NetworkCidr !== undefined && input.RemoteIpv4NetworkCidr !== null) {
        entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
    }
    if (input.LocalIpv6NetworkCidr !== undefined && input.LocalIpv6NetworkCidr !== null) {
        entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
    }
    if (input.RemoteIpv6NetworkCidr !== undefined && input.RemoteIpv6NetworkCidr !== null) {
        entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyVpnConnectionRequest = function (input, context) {
    var entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.CustomerGatewayId !== undefined && input.CustomerGatewayId !== null) {
        entries["CustomerGatewayId"] = input.CustomerGatewayId;
    }
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyVpnTunnelCertificateRequest = function (input, context) {
    var entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnTunnelOutsideIpAddress !== undefined && input.VpnTunnelOutsideIpAddress !== null) {
        entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyVpnTunnelOptionsRequest = function (input, context) {
    var entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnTunnelOutsideIpAddress !== undefined && input.VpnTunnelOutsideIpAddress !== null) {
        entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
    }
    if (input.TunnelOptions !== undefined && input.TunnelOptions !== null) {
        var memberEntries = serializeAws_ec2ModifyVpnTunnelOptionsSpecification(input.TunnelOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TunnelOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ModifyVpnTunnelOptionsSpecification = function (input, context) {
    var entries = {};
    if (input.TunnelInsideCidr !== undefined && input.TunnelInsideCidr !== null) {
        entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
    }
    if (input.TunnelInsideIpv6Cidr !== undefined && input.TunnelInsideIpv6Cidr !== null) {
        entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
    }
    if (input.PreSharedKey !== undefined && input.PreSharedKey !== null) {
        entries["PreSharedKey"] = input.PreSharedKey;
    }
    if (input.Phase1LifetimeSeconds !== undefined && input.Phase1LifetimeSeconds !== null) {
        entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
    }
    if (input.Phase2LifetimeSeconds !== undefined && input.Phase2LifetimeSeconds !== null) {
        entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
    }
    if (input.RekeyMarginTimeSeconds !== undefined && input.RekeyMarginTimeSeconds !== null) {
        entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
    }
    if (input.RekeyFuzzPercentage !== undefined && input.RekeyFuzzPercentage !== null) {
        entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
    }
    if (input.ReplayWindowSize !== undefined && input.ReplayWindowSize !== null) {
        entries["ReplayWindowSize"] = input.ReplayWindowSize;
    }
    if (input.DPDTimeoutSeconds !== undefined && input.DPDTimeoutSeconds !== null) {
        entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
    }
    if (input.DPDTimeoutAction !== undefined && input.DPDTimeoutAction !== null) {
        entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
    }
    if (input.Phase1EncryptionAlgorithms !== undefined && input.Phase1EncryptionAlgorithms !== null) {
        var memberEntries = serializeAws_ec2Phase1EncryptionAlgorithmsRequestList(input.Phase1EncryptionAlgorithms, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase1EncryptionAlgorithm.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase2EncryptionAlgorithms !== undefined && input.Phase2EncryptionAlgorithms !== null) {
        var memberEntries = serializeAws_ec2Phase2EncryptionAlgorithmsRequestList(input.Phase2EncryptionAlgorithms, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase2EncryptionAlgorithm.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase1IntegrityAlgorithms !== undefined && input.Phase1IntegrityAlgorithms !== null) {
        var memberEntries = serializeAws_ec2Phase1IntegrityAlgorithmsRequestList(input.Phase1IntegrityAlgorithms, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase1IntegrityAlgorithm.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase2IntegrityAlgorithms !== undefined && input.Phase2IntegrityAlgorithms !== null) {
        var memberEntries = serializeAws_ec2Phase2IntegrityAlgorithmsRequestList(input.Phase2IntegrityAlgorithms, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase2IntegrityAlgorithm.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase1DHGroupNumbers !== undefined && input.Phase1DHGroupNumbers !== null) {
        var memberEntries = serializeAws_ec2Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase1DHGroupNumber.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase2DHGroupNumbers !== undefined && input.Phase2DHGroupNumbers !== null) {
        var memberEntries = serializeAws_ec2Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase2DHGroupNumber.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.IKEVersions !== undefined && input.IKEVersions !== null) {
        var memberEntries = serializeAws_ec2IKEVersionsRequestList(input.IKEVersions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IKEVersion.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.StartupAction !== undefined && input.StartupAction !== null) {
        entries["StartupAction"] = input.StartupAction;
    }
    return entries;
};
var serializeAws_ec2MonitorInstancesRequest = function (input, context) {
    var entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2MoveAddressToVpcRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    return entries;
};
var serializeAws_ec2MoveByoipCidrToIpamRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.IpamPoolOwner !== undefined && input.IpamPoolOwner !== null) {
        entries["IpamPoolOwner"] = input.IpamPoolOwner;
    }
    return entries;
};
var serializeAws_ec2NatGatewayIdStringList = function (input, context) {
    var e_111, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_111 = __values(input), input_111_1 = input_111.next(); !input_111_1.done; input_111_1 = input_111.next()) {
            var entry = input_111_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_111_1) { e_111 = { error: e_111_1 }; }
    finally {
        try {
            if (input_111_1 && !input_111_1.done && (_a = input_111.return)) _a.call(input_111);
        }
        finally { if (e_111) throw e_111.error; }
    }
    return entries;
};
var serializeAws_ec2NetworkAclIdStringList = function (input, context) {
    var e_112, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_112 = __values(input), input_112_1 = input_112.next(); !input_112_1.done; input_112_1 = input_112.next()) {
            var entry = input_112_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_112_1) { e_112 = { error: e_112_1 }; }
    finally {
        try {
            if (input_112_1 && !input_112_1.done && (_a = input_112.return)) _a.call(input_112);
        }
        finally { if (e_112) throw e_112.error; }
    }
    return entries;
};
var serializeAws_ec2NetworkInsightsAccessScopeAnalysisIdList = function (input, context) {
    var e_113, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_113 = __values(input), input_113_1 = input_113.next(); !input_113_1.done; input_113_1 = input_113.next()) {
            var entry = input_113_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_113_1) { e_113 = { error: e_113_1 }; }
    finally {
        try {
            if (input_113_1 && !input_113_1.done && (_a = input_113.return)) _a.call(input_113);
        }
        finally { if (e_113) throw e_113.error; }
    }
    return entries;
};
var serializeAws_ec2NetworkInsightsAccessScopeIdList = function (input, context) {
    var e_114, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_114 = __values(input), input_114_1 = input_114.next(); !input_114_1.done; input_114_1 = input_114.next()) {
            var entry = input_114_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_114_1) { e_114 = { error: e_114_1 }; }
    finally {
        try {
            if (input_114_1 && !input_114_1.done && (_a = input_114.return)) _a.call(input_114);
        }
        finally { if (e_114) throw e_114.error; }
    }
    return entries;
};
var serializeAws_ec2NetworkInsightsAnalysisIdList = function (input, context) {
    var e_115, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_115 = __values(input), input_115_1 = input_115.next(); !input_115_1.done; input_115_1 = input_115.next()) {
            var entry = input_115_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_115_1) { e_115 = { error: e_115_1 }; }
    finally {
        try {
            if (input_115_1 && !input_115_1.done && (_a = input_115.return)) _a.call(input_115);
        }
        finally { if (e_115) throw e_115.error; }
    }
    return entries;
};
var serializeAws_ec2NetworkInsightsPathIdList = function (input, context) {
    var e_116, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_116 = __values(input), input_116_1 = input_116.next(); !input_116_1.done; input_116_1 = input_116.next()) {
            var entry = input_116_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_116_1) { e_116 = { error: e_116_1 }; }
    finally {
        try {
            if (input_116_1 && !input_116_1.done && (_a = input_116.return)) _a.call(input_116);
        }
        finally { if (e_116) throw e_116.error; }
    }
    return entries;
};
var serializeAws_ec2NetworkInterfaceAttachmentChanges = function (input, context) {
    var entries = {};
    if (input.AttachmentId !== undefined && input.AttachmentId !== null) {
        entries["AttachmentId"] = input.AttachmentId;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    return entries;
};
var serializeAws_ec2NetworkInterfaceCount = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2NetworkInterfaceCountRequest = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2NetworkInterfaceIdList = function (input, context) {
    var e_117, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_117 = __values(input), input_117_1 = input_117.next(); !input_117_1.done; input_117_1 = input_117.next()) {
            var entry = input_117_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_117_1) { e_117 = { error: e_117_1 }; }
    finally {
        try {
            if (input_117_1 && !input_117_1.done && (_a = input_117.return)) _a.call(input_117);
        }
        finally { if (e_117) throw e_117.error; }
    }
    return entries;
};
var serializeAws_ec2NetworkInterfacePermissionIdList = function (input, context) {
    var e_118, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_118 = __values(input), input_118_1 = input_118.next(); !input_118_1.done; input_118_1 = input_118.next()) {
            var entry = input_118_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_118_1) { e_118 = { error: e_118_1 }; }
    finally {
        try {
            if (input_118_1 && !input_118_1.done && (_a = input_118.return)) _a.call(input_118);
        }
        finally { if (e_118) throw e_118.error; }
    }
    return entries;
};
var serializeAws_ec2NewDhcpConfiguration = function (input, context) {
    var entries = {};
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    if (input.Values !== undefined && input.Values !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.Values, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Value.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2NewDhcpConfigurationList = function (input, context) {
    var e_119, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_119 = __values(input), input_119_1 = input_119.next(); !input_119_1.done; input_119_1 = input_119.next()) {
            var entry = input_119_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2NewDhcpConfiguration(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_119_1) { e_119 = { error: e_119_1 }; }
    finally {
        try {
            if (input_119_1 && !input_119_1.done && (_a = input_119.return)) _a.call(input_119);
        }
        finally { if (e_119) throw e_119.error; }
    }
    return entries;
};
var serializeAws_ec2OccurrenceDayRequestSet = function (input, context) {
    var e_120, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_120 = __values(input), input_120_1 = input_120.next(); !input_120_1.done; input_120_1 = input_120.next()) {
            var entry = input_120_1.value;
            if (entry === null) {
                continue;
            }
            entries["OccurenceDay.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_120_1) { e_120 = { error: e_120_1 }; }
    finally {
        try {
            if (input_120_1 && !input_120_1.done && (_a = input_120.return)) _a.call(input_120);
        }
        finally { if (e_120) throw e_120.error; }
    }
    return entries;
};
var serializeAws_ec2OnDemandOptionsRequest = function (input, context) {
    var entries = {};
    if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.CapacityReservationOptions !== undefined && input.CapacityReservationOptions !== null) {
        var memberEntries = serializeAws_ec2CapacityReservationOptionsRequest(input.CapacityReservationOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityReservationOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.SingleInstanceType !== undefined && input.SingleInstanceType !== null) {
        entries["SingleInstanceType"] = input.SingleInstanceType;
    }
    if (input.SingleAvailabilityZone !== undefined && input.SingleAvailabilityZone !== null) {
        entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
    }
    if (input.MinTargetCapacity !== undefined && input.MinTargetCapacity !== null) {
        entries["MinTargetCapacity"] = input.MinTargetCapacity;
    }
    if (input.MaxTotalPrice !== undefined && input.MaxTotalPrice !== null) {
        entries["MaxTotalPrice"] = input.MaxTotalPrice;
    }
    return entries;
};
var serializeAws_ec2OrganizationalUnitArnStringList = function (input, context) {
    var e_121, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_121 = __values(input), input_121_1 = input_121.next(); !input_121_1.done; input_121_1 = input_121.next()) {
            var entry = input_121_1.value;
            if (entry === null) {
                continue;
            }
            entries["OrganizationalUnitArn.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_121_1) { e_121 = { error: e_121_1 }; }
    finally {
        try {
            if (input_121_1 && !input_121_1.done && (_a = input_121.return)) _a.call(input_121);
        }
        finally { if (e_121) throw e_121.error; }
    }
    return entries;
};
var serializeAws_ec2OrganizationArnStringList = function (input, context) {
    var e_122, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_122 = __values(input), input_122_1 = input_122.next(); !input_122_1.done; input_122_1 = input_122.next()) {
            var entry = input_122_1.value;
            if (entry === null) {
                continue;
            }
            entries["OrganizationArn.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_122_1) { e_122 = { error: e_122_1 }; }
    finally {
        try {
            if (input_122_1 && !input_122_1.done && (_a = input_122.return)) _a.call(input_122);
        }
        finally { if (e_122) throw e_122.error; }
    }
    return entries;
};
var serializeAws_ec2OwnerStringList = function (input, context) {
    var e_123, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_123 = __values(input), input_123_1 = input_123.next(); !input_123_1.done; input_123_1 = input_123.next()) {
            var entry = input_123_1.value;
            if (entry === null) {
                continue;
            }
            entries["Owner.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_123_1) { e_123 = { error: e_123_1 }; }
    finally {
        try {
            if (input_123_1 && !input_123_1.done && (_a = input_123.return)) _a.call(input_123);
        }
        finally { if (e_123) throw e_123.error; }
    }
    return entries;
};
var serializeAws_ec2PacketHeaderStatementRequest = function (input, context) {
    var entries = {};
    if (input.SourceAddresses !== undefined && input.SourceAddresses !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.SourceAddresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourceAddress.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DestinationAddresses !== undefined && input.DestinationAddresses !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.DestinationAddresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DestinationAddress.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SourcePorts !== undefined && input.SourcePorts !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.SourcePorts, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourcePort.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DestinationPorts !== undefined && input.DestinationPorts !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.DestinationPorts, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DestinationPort.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SourcePrefixLists !== undefined && input.SourcePrefixLists !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.SourcePrefixLists, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SourcePrefixList.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DestinationPrefixLists !== undefined && input.DestinationPrefixLists !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.DestinationPrefixLists, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "DestinationPrefixList.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Protocols !== undefined && input.Protocols !== null) {
        var memberEntries = serializeAws_ec2ProtocolList(input.Protocols, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Protocol.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2PathStatementRequest = function (input, context) {
    var entries = {};
    if (input.PacketHeaderStatement !== undefined && input.PacketHeaderStatement !== null) {
        var memberEntries = serializeAws_ec2PacketHeaderStatementRequest(input.PacketHeaderStatement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PacketHeaderStatement.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ResourceStatement !== undefined && input.ResourceStatement !== null) {
        var memberEntries = serializeAws_ec2ResourceStatementRequest(input.ResourceStatement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ResourceStatement.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2PeeringConnectionOptionsRequest = function (input, context) {
    var entries = {};
    if (input.AllowDnsResolutionFromRemoteVpc !== undefined && input.AllowDnsResolutionFromRemoteVpc !== null) {
        entries["AllowDnsResolutionFromRemoteVpc"] = input.AllowDnsResolutionFromRemoteVpc;
    }
    if (input.AllowEgressFromLocalClassicLinkToRemoteVpc !== undefined &&
        input.AllowEgressFromLocalClassicLinkToRemoteVpc !== null) {
        entries["AllowEgressFromLocalClassicLinkToRemoteVpc"] = input.AllowEgressFromLocalClassicLinkToRemoteVpc;
    }
    if (input.AllowEgressFromLocalVpcToRemoteClassicLink !== undefined &&
        input.AllowEgressFromLocalVpcToRemoteClassicLink !== null) {
        entries["AllowEgressFromLocalVpcToRemoteClassicLink"] = input.AllowEgressFromLocalVpcToRemoteClassicLink;
    }
    return entries;
};
var serializeAws_ec2Phase1DHGroupNumbersRequestList = function (input, context) {
    var e_124, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_124 = __values(input), input_124_1 = input_124.next(); !input_124_1.done; input_124_1 = input_124.next()) {
            var entry = input_124_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Phase1DHGroupNumbersRequestListValue(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_124_1) { e_124 = { error: e_124_1 }; }
    finally {
        try {
            if (input_124_1 && !input_124_1.done && (_a = input_124.return)) _a.call(input_124);
        }
        finally { if (e_124) throw e_124.error; }
    }
    return entries;
};
var serializeAws_ec2Phase1DHGroupNumbersRequestListValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2Phase1EncryptionAlgorithmsRequestList = function (input, context) {
    var e_125, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_125 = __values(input), input_125_1 = input_125.next(); !input_125_1.done; input_125_1 = input_125.next()) {
            var entry = input_125_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Phase1EncryptionAlgorithmsRequestListValue(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_125_1) { e_125 = { error: e_125_1 }; }
    finally {
        try {
            if (input_125_1 && !input_125_1.done && (_a = input_125.return)) _a.call(input_125);
        }
        finally { if (e_125) throw e_125.error; }
    }
    return entries;
};
var serializeAws_ec2Phase1EncryptionAlgorithmsRequestListValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2Phase1IntegrityAlgorithmsRequestList = function (input, context) {
    var e_126, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_126 = __values(input), input_126_1 = input_126.next(); !input_126_1.done; input_126_1 = input_126.next()) {
            var entry = input_126_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Phase1IntegrityAlgorithmsRequestListValue(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_126_1) { e_126 = { error: e_126_1 }; }
    finally {
        try {
            if (input_126_1 && !input_126_1.done && (_a = input_126.return)) _a.call(input_126);
        }
        finally { if (e_126) throw e_126.error; }
    }
    return entries;
};
var serializeAws_ec2Phase1IntegrityAlgorithmsRequestListValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2Phase2DHGroupNumbersRequestList = function (input, context) {
    var e_127, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_127 = __values(input), input_127_1 = input_127.next(); !input_127_1.done; input_127_1 = input_127.next()) {
            var entry = input_127_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Phase2DHGroupNumbersRequestListValue(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_127_1) { e_127 = { error: e_127_1 }; }
    finally {
        try {
            if (input_127_1 && !input_127_1.done && (_a = input_127.return)) _a.call(input_127);
        }
        finally { if (e_127) throw e_127.error; }
    }
    return entries;
};
var serializeAws_ec2Phase2DHGroupNumbersRequestListValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2Phase2EncryptionAlgorithmsRequestList = function (input, context) {
    var e_128, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_128 = __values(input), input_128_1 = input_128.next(); !input_128_1.done; input_128_1 = input_128.next()) {
            var entry = input_128_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Phase2EncryptionAlgorithmsRequestListValue(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_128_1) { e_128 = { error: e_128_1 }; }
    finally {
        try {
            if (input_128_1 && !input_128_1.done && (_a = input_128.return)) _a.call(input_128);
        }
        finally { if (e_128) throw e_128.error; }
    }
    return entries;
};
var serializeAws_ec2Phase2EncryptionAlgorithmsRequestListValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2Phase2IntegrityAlgorithmsRequestList = function (input, context) {
    var e_129, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_129 = __values(input), input_129_1 = input_129.next(); !input_129_1.done; input_129_1 = input_129.next()) {
            var entry = input_129_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Phase2IntegrityAlgorithmsRequestListValue(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_129_1) { e_129 = { error: e_129_1 }; }
    finally {
        try {
            if (input_129_1 && !input_129_1.done && (_a = input_129.return)) _a.call(input_129);
        }
        finally { if (e_129) throw e_129.error; }
    }
    return entries;
};
var serializeAws_ec2Phase2IntegrityAlgorithmsRequestListValue = function (input, context) {
    var entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2Placement = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Affinity !== undefined && input.Affinity !== null) {
        entries["Affinity"] = input.Affinity;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.PartitionNumber !== undefined && input.PartitionNumber !== null) {
        entries["PartitionNumber"] = input.PartitionNumber;
    }
    if (input.HostId !== undefined && input.HostId !== null) {
        entries["HostId"] = input.HostId;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.SpreadDomain !== undefined && input.SpreadDomain !== null) {
        entries["SpreadDomain"] = input.SpreadDomain;
    }
    if (input.HostResourceGroupArn !== undefined && input.HostResourceGroupArn !== null) {
        entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
    }
    return entries;
};
var serializeAws_ec2PlacementGroupIdStringList = function (input, context) {
    var e_130, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_130 = __values(input), input_130_1 = input_130.next(); !input_130_1.done; input_130_1 = input_130.next()) {
            var entry = input_130_1.value;
            if (entry === null) {
                continue;
            }
            entries["GroupId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_130_1) { e_130 = { error: e_130_1 }; }
    finally {
        try {
            if (input_130_1 && !input_130_1.done && (_a = input_130.return)) _a.call(input_130);
        }
        finally { if (e_130) throw e_130.error; }
    }
    return entries;
};
var serializeAws_ec2PlacementGroupStringList = function (input, context) {
    var e_131, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_131 = __values(input), input_131_1 = input_131.next(); !input_131_1.done; input_131_1 = input_131.next()) {
            var entry = input_131_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_131_1) { e_131 = { error: e_131_1 }; }
    finally {
        try {
            if (input_131_1 && !input_131_1.done && (_a = input_131.return)) _a.call(input_131);
        }
        finally { if (e_131) throw e_131.error; }
    }
    return entries;
};
var serializeAws_ec2PortRange = function (input, context) {
    var entries = {};
    if (input.From !== undefined && input.From !== null) {
        entries["From"] = input.From;
    }
    if (input.To !== undefined && input.To !== null) {
        entries["To"] = input.To;
    }
    return entries;
};
var serializeAws_ec2PrefixListId = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    return entries;
};
var serializeAws_ec2PrefixListIdList = function (input, context) {
    var e_132, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_132 = __values(input), input_132_1 = input_132.next(); !input_132_1.done; input_132_1 = input_132.next()) {
            var entry = input_132_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2PrefixListId(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_132_1) { e_132 = { error: e_132_1 }; }
    finally {
        try {
            if (input_132_1 && !input_132_1.done && (_a = input_132.return)) _a.call(input_132);
        }
        finally { if (e_132) throw e_132.error; }
    }
    return entries;
};
var serializeAws_ec2PrefixListResourceIdStringList = function (input, context) {
    var e_133, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_133 = __values(input), input_133_1 = input_133.next(); !input_133_1.done; input_133_1 = input_133.next()) {
            var entry = input_133_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_133_1) { e_133 = { error: e_133_1 }; }
    finally {
        try {
            if (input_133_1 && !input_133_1.done && (_a = input_133.return)) _a.call(input_133);
        }
        finally { if (e_133) throw e_133.error; }
    }
    return entries;
};
var serializeAws_ec2PriceScheduleSpecification = function (input, context) {
    var entries = {};
    if (input.CurrencyCode !== undefined && input.CurrencyCode !== null) {
        entries["CurrencyCode"] = input.CurrencyCode;
    }
    if (input.Price !== undefined && input.Price !== null) {
        entries["Price"] = __serializeFloat(input.Price);
    }
    if (input.Term !== undefined && input.Term !== null) {
        entries["Term"] = input.Term;
    }
    return entries;
};
var serializeAws_ec2PriceScheduleSpecificationList = function (input, context) {
    var e_134, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_134 = __values(input), input_134_1 = input_134.next(); !input_134_1.done; input_134_1 = input_134.next()) {
            var entry = input_134_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2PriceScheduleSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_134_1) { e_134 = { error: e_134_1 }; }
    finally {
        try {
            if (input_134_1 && !input_134_1.done && (_a = input_134.return)) _a.call(input_134);
        }
        finally { if (e_134) throw e_134.error; }
    }
    return entries;
};
var serializeAws_ec2PrivateDnsNameOptionsRequest = function (input, context) {
    var entries = {};
    if (input.HostnameType !== undefined && input.HostnameType !== null) {
        entries["HostnameType"] = input.HostnameType;
    }
    if (input.EnableResourceNameDnsARecord !== undefined && input.EnableResourceNameDnsARecord !== null) {
        entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
    }
    if (input.EnableResourceNameDnsAAAARecord !== undefined && input.EnableResourceNameDnsAAAARecord !== null) {
        entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
    }
    return entries;
};
var serializeAws_ec2PrivateIpAddressConfigSet = function (input, context) {
    var e_135, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_135 = __values(input), input_135_1 = input_135.next(); !input_135_1.done; input_135_1 = input_135.next()) {
            var entry = input_135_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ScheduledInstancesPrivateIpAddressConfig(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["PrivateIpAddressConfigSet.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_135_1) { e_135 = { error: e_135_1 }; }
    finally {
        try {
            if (input_135_1 && !input_135_1.done && (_a = input_135.return)) _a.call(input_135);
        }
        finally { if (e_135) throw e_135.error; }
    }
    return entries;
};
var serializeAws_ec2PrivateIpAddressSpecification = function (input, context) {
    var entries = {};
    if (input.Primary !== undefined && input.Primary !== null) {
        entries["Primary"] = input.Primary;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    return entries;
};
var serializeAws_ec2PrivateIpAddressSpecificationList = function (input, context) {
    var e_136, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_136 = __values(input), input_136_1 = input_136.next(); !input_136_1.done; input_136_1 = input_136.next()) {
            var entry = input_136_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2PrivateIpAddressSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_136_1) { e_136 = { error: e_136_1 }; }
    finally {
        try {
            if (input_136_1 && !input_136_1.done && (_a = input_136.return)) _a.call(input_136);
        }
        finally { if (e_136) throw e_136.error; }
    }
    return entries;
};
var serializeAws_ec2PrivateIpAddressStringList = function (input, context) {
    var e_137, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_137 = __values(input), input_137_1 = input_137.next(); !input_137_1.done; input_137_1 = input_137.next()) {
            var entry = input_137_1.value;
            if (entry === null) {
                continue;
            }
            entries["PrivateIpAddress.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_137_1) { e_137 = { error: e_137_1 }; }
    finally {
        try {
            if (input_137_1 && !input_137_1.done && (_a = input_137.return)) _a.call(input_137);
        }
        finally { if (e_137) throw e_137.error; }
    }
    return entries;
};
var serializeAws_ec2ProductCodeStringList = function (input, context) {
    var e_138, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_138 = __values(input), input_138_1 = input_138.next(); !input_138_1.done; input_138_1 = input_138.next()) {
            var entry = input_138_1.value;
            if (entry === null) {
                continue;
            }
            entries["ProductCode.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_138_1) { e_138 = { error: e_138_1 }; }
    finally {
        try {
            if (input_138_1 && !input_138_1.done && (_a = input_138.return)) _a.call(input_138);
        }
        finally { if (e_138) throw e_138.error; }
    }
    return entries;
};
var serializeAws_ec2ProductDescriptionList = function (input, context) {
    var e_139, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_139 = __values(input), input_139_1 = input_139.next(); !input_139_1.done; input_139_1 = input_139.next()) {
            var entry = input_139_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_139_1) { e_139 = { error: e_139_1 }; }
    finally {
        try {
            if (input_139_1 && !input_139_1.done && (_a = input_139.return)) _a.call(input_139);
        }
        finally { if (e_139) throw e_139.error; }
    }
    return entries;
};
var serializeAws_ec2ProtocolList = function (input, context) {
    var e_140, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_140 = __values(input), input_140_1 = input_140.next(); !input_140_1.done; input_140_1 = input_140.next()) {
            var entry = input_140_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_140_1) { e_140 = { error: e_140_1 }; }
    finally {
        try {
            if (input_140_1 && !input_140_1.done && (_a = input_140.return)) _a.call(input_140);
        }
        finally { if (e_140) throw e_140.error; }
    }
    return entries;
};
var serializeAws_ec2ProvisionByoipCidrRequest = function (input, context) {
    var entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.CidrAuthorizationContext !== undefined && input.CidrAuthorizationContext !== null) {
        var memberEntries = serializeAws_ec2CidrAuthorizationContext(input.CidrAuthorizationContext, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CidrAuthorizationContext.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.PubliclyAdvertisable !== undefined && input.PubliclyAdvertisable !== null) {
        entries["PubliclyAdvertisable"] = input.PubliclyAdvertisable;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PoolTagSpecifications !== undefined && input.PoolTagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.PoolTagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PoolTagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MultiRegion !== undefined && input.MultiRegion !== null) {
        entries["MultiRegion"] = input.MultiRegion;
    }
    return entries;
};
var serializeAws_ec2ProvisionIpamPoolCidrRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.CidrAuthorizationContext !== undefined && input.CidrAuthorizationContext !== null) {
        var memberEntries = serializeAws_ec2IpamCidrAuthorizationContext(input.CidrAuthorizationContext, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CidrAuthorizationContext.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ProvisionPublicIpv4PoolCidrRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.NetmaskLength !== undefined && input.NetmaskLength !== null) {
        entries["NetmaskLength"] = input.NetmaskLength;
    }
    return entries;
};
var serializeAws_ec2PublicIpStringList = function (input, context) {
    var e_141, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_141 = __values(input), input_141_1 = input_141.next(); !input_141_1.done; input_141_1 = input_141.next()) {
            var entry = input_141_1.value;
            if (entry === null) {
                continue;
            }
            entries["PublicIp.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_141_1) { e_141 = { error: e_141_1 }; }
    finally {
        try {
            if (input_141_1 && !input_141_1.done && (_a = input_141.return)) _a.call(input_141);
        }
        finally { if (e_141) throw e_141.error; }
    }
    return entries;
};
var serializeAws_ec2PublicIpv4PoolIdStringList = function (input, context) {
    var e_142, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_142 = __values(input), input_142_1 = input_142.next(); !input_142_1.done; input_142_1 = input_142.next()) {
            var entry = input_142_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_142_1) { e_142 = { error: e_142_1 }; }
    finally {
        try {
            if (input_142_1 && !input_142_1.done && (_a = input_142.return)) _a.call(input_142);
        }
        finally { if (e_142) throw e_142.error; }
    }
    return entries;
};
var serializeAws_ec2PurchaseHostReservationRequest = function (input, context) {
    var entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.CurrencyCode !== undefined && input.CurrencyCode !== null) {
        entries["CurrencyCode"] = input.CurrencyCode;
    }
    if (input.HostIdSet !== undefined && input.HostIdSet !== null) {
        var memberEntries = serializeAws_ec2RequestHostIdSet(input.HostIdSet, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "HostIdSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.LimitPrice !== undefined && input.LimitPrice !== null) {
        entries["LimitPrice"] = input.LimitPrice;
    }
    if (input.OfferingId !== undefined && input.OfferingId !== null) {
        entries["OfferingId"] = input.OfferingId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2PurchaseRequest = function (input, context) {
    var entries = {};
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.PurchaseToken !== undefined && input.PurchaseToken !== null) {
        entries["PurchaseToken"] = input.PurchaseToken;
    }
    return entries;
};
var serializeAws_ec2PurchaseRequestSet = function (input, context) {
    var e_143, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_143 = __values(input), input_143_1 = input_143.next(); !input_143_1.done; input_143_1 = input_143.next()) {
            var entry = input_143_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2PurchaseRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["PurchaseRequest.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_143_1) { e_143 = { error: e_143_1 }; }
    finally {
        try {
            if (input_143_1 && !input_143_1.done && (_a = input_143.return)) _a.call(input_143);
        }
        finally { if (e_143) throw e_143.error; }
    }
    return entries;
};
var serializeAws_ec2PurchaseReservedInstancesOfferingRequest = function (input, context) {
    var entries = {};
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.ReservedInstancesOfferingId !== undefined && input.ReservedInstancesOfferingId !== null) {
        entries["ReservedInstancesOfferingId"] = input.ReservedInstancesOfferingId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LimitPrice !== undefined && input.LimitPrice !== null) {
        var memberEntries = serializeAws_ec2ReservedInstanceLimitPrice(input.LimitPrice, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LimitPrice.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.PurchaseTime !== undefined && input.PurchaseTime !== null) {
        entries["PurchaseTime"] = input.PurchaseTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
var serializeAws_ec2PurchaseScheduledInstancesRequest = function (input, context) {
    var entries = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PurchaseRequests !== undefined && input.PurchaseRequests !== null) {
        var memberEntries = serializeAws_ec2PurchaseRequestSet(input.PurchaseRequests, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PurchaseRequest.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ReasonCodesList = function (input, context) {
    var e_144, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_144 = __values(input), input_144_1 = input_144.next(); !input_144_1.done; input_144_1 = input_144.next()) {
            var entry = input_144_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_144_1) { e_144 = { error: e_144_1 }; }
    finally {
        try {
            if (input_144_1 && !input_144_1.done && (_a = input_144.return)) _a.call(input_144);
        }
        finally { if (e_144) throw e_144.error; }
    }
    return entries;
};
var serializeAws_ec2RebootInstancesRequest = function (input, context) {
    var entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RegionNames = function (input, context) {
    var e_145, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_145 = __values(input), input_145_1 = input_145.next(); !input_145_1.done; input_145_1 = input_145.next()) {
            var entry = input_145_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_145_1) { e_145 = { error: e_145_1 }; }
    finally {
        try {
            if (input_145_1 && !input_145_1.done && (_a = input_145.return)) _a.call(input_145);
        }
        finally { if (e_145) throw e_145.error; }
    }
    return entries;
};
var serializeAws_ec2RegionNameStringList = function (input, context) {
    var e_146, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_146 = __values(input), input_146_1 = input_146.next(); !input_146_1.done; input_146_1 = input_146.next()) {
            var entry = input_146_1.value;
            if (entry === null) {
                continue;
            }
            entries["RegionName.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_146_1) { e_146 = { error: e_146_1 }; }
    finally {
        try {
            if (input_146_1 && !input_146_1.done && (_a = input_146.return)) _a.call(input_146);
        }
        finally { if (e_146) throw e_146.error; }
    }
    return entries;
};
var serializeAws_ec2RegisterImageRequest = function (input, context) {
    var entries = {};
    if (input.ImageLocation !== undefined && input.ImageLocation !== null) {
        entries["ImageLocation"] = input.ImageLocation;
    }
    if (input.Architecture !== undefined && input.Architecture !== null) {
        entries["Architecture"] = input.Architecture;
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        var memberEntries = serializeAws_ec2BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BlockDeviceMapping.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EnaSupport !== undefined && input.EnaSupport !== null) {
        entries["EnaSupport"] = input.EnaSupport;
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.BillingProducts !== undefined && input.BillingProducts !== null) {
        var memberEntries = serializeAws_ec2BillingProductList(input.BillingProducts, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BillingProduct.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.RootDeviceName !== undefined && input.RootDeviceName !== null) {
        entries["RootDeviceName"] = input.RootDeviceName;
    }
    if (input.SriovNetSupport !== undefined && input.SriovNetSupport !== null) {
        entries["SriovNetSupport"] = input.SriovNetSupport;
    }
    if (input.VirtualizationType !== undefined && input.VirtualizationType !== null) {
        entries["VirtualizationType"] = input.VirtualizationType;
    }
    if (input.BootMode !== undefined && input.BootMode !== null) {
        entries["BootMode"] = input.BootMode;
    }
    if (input.TpmSupport !== undefined && input.TpmSupport !== null) {
        entries["TpmSupport"] = input.TpmSupport;
    }
    if (input.UefiData !== undefined && input.UefiData !== null) {
        entries["UefiData"] = input.UefiData;
    }
    return entries;
};
var serializeAws_ec2RegisterInstanceEventNotificationAttributesRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTagAttribute !== undefined && input.InstanceTagAttribute !== null) {
        var memberEntries = serializeAws_ec2RegisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceTagAttribute.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2RegisterInstanceTagAttributeRequest = function (input, context) {
    var entries = {};
    if (input.IncludeAllTagsOfInstance !== undefined && input.IncludeAllTagsOfInstance !== null) {
        entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
    }
    if (input.InstanceTagKeys !== undefined && input.InstanceTagKeys !== null) {
        var memberEntries = serializeAws_ec2InstanceTagKeySet(input.InstanceTagKeys, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceTagKey.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterfaceIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterfaceIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SubnetIds.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RejectTransitGatewayPeeringAttachmentRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RejectTransitGatewayVpcAttachmentRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RejectVpcEndpointConnectionsRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
        var memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "VpcEndpointId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2RejectVpcPeeringConnectionRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
var serializeAws_ec2ReleaseAddressRequest = function (input, context) {
    var entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.NetworkBorderGroup !== undefined && input.NetworkBorderGroup !== null) {
        entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ReleaseHostsRequest = function (input, context) {
    var entries = {};
    if (input.HostIds !== undefined && input.HostIds !== null) {
        var memberEntries = serializeAws_ec2RequestHostIdList(input.HostIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "HostId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ReleaseIpamPoolAllocationRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.IpamPoolAllocationId !== undefined && input.IpamPoolAllocationId !== null) {
        entries["IpamPoolAllocationId"] = input.IpamPoolAllocationId;
    }
    return entries;
};
var serializeAws_ec2RemoveIpamOperatingRegion = function (input, context) {
    var entries = {};
    if (input.RegionName !== undefined && input.RegionName !== null) {
        entries["RegionName"] = input.RegionName;
    }
    return entries;
};
var serializeAws_ec2RemoveIpamOperatingRegionSet = function (input, context) {
    var e_147, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_147 = __values(input), input_147_1 = input_147.next(); !input_147_1.done; input_147_1 = input_147.next()) {
            var entry = input_147_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2RemoveIpamOperatingRegion(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Member.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_147_1) { e_147 = { error: e_147_1 }; }
    finally {
        try {
            if (input_147_1 && !input_147_1.done && (_a = input_147.return)) _a.call(input_147);
        }
        finally { if (e_147) throw e_147.error; }
    }
    return entries;
};
var serializeAws_ec2RemovePrefixListEntries = function (input, context) {
    var e_148, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_148 = __values(input), input_148_1 = input_148.next(); !input_148_1.done; input_148_1 = input_148.next()) {
            var entry = input_148_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2RemovePrefixListEntry(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Member.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_148_1) { e_148 = { error: e_148_1 }; }
    finally {
        try {
            if (input_148_1 && !input_148_1.done && (_a = input_148.return)) _a.call(input_148);
        }
        finally { if (e_148) throw e_148.error; }
    }
    return entries;
};
var serializeAws_ec2RemovePrefixListEntry = function (input, context) {
    var entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
var serializeAws_ec2ReplaceIamInstanceProfileAssociationRequest = function (input, context) {
    var entries = {};
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        var memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IamInstanceProfile.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
var serializeAws_ec2ReplaceNetworkAclAssociationRequest = function (input, context) {
    var entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    return entries;
};
var serializeAws_ec2ReplaceNetworkAclEntryRequest = function (input, context) {
    var entries = {};
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Egress !== undefined && input.Egress !== null) {
        entries["Egress"] = input.Egress;
    }
    if (input.IcmpTypeCode !== undefined && input.IcmpTypeCode !== null) {
        var memberEntries = serializeAws_ec2IcmpTypeCode(input.IcmpTypeCode, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Icmp.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    if (input.PortRange !== undefined && input.PortRange !== null) {
        var memberEntries = serializeAws_ec2PortRange(input.PortRange, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PortRange.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.RuleAction !== undefined && input.RuleAction !== null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    return entries;
};
var serializeAws_ec2ReplaceRootVolumeTaskIds = function (input, context) {
    var e_149, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_149 = __values(input), input_149_1 = input_149.next(); !input_149_1.done; input_149_1 = input_149.next()) {
            var entry = input_149_1.value;
            if (entry === null) {
                continue;
            }
            entries["ReplaceRootVolumeTaskId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_149_1) { e_149 = { error: e_149_1 }; }
    finally {
        try {
            if (input_149_1 && !input_149_1.done && (_a = input_149.return)) _a.call(input_149);
        }
        finally { if (e_149) throw e_149.error; }
    }
    return entries;
};
var serializeAws_ec2ReplaceRouteRequest = function (input, context) {
    var entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DestinationIpv6CidrBlock !== undefined && input.DestinationIpv6CidrBlock !== null) {
        entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
    }
    if (input.DestinationPrefixListId !== undefined && input.DestinationPrefixListId !== null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.EgressOnlyInternetGatewayId !== undefined && input.EgressOnlyInternetGatewayId !== null) {
        entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
    }
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.LocalTarget !== undefined && input.LocalTarget !== null) {
        entries["LocalTarget"] = input.LocalTarget;
    }
    if (input.NatGatewayId !== undefined && input.NatGatewayId !== null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.LocalGatewayId !== undefined && input.LocalGatewayId !== null) {
        entries["LocalGatewayId"] = input.LocalGatewayId;
    }
    if (input.CarrierGatewayId !== undefined && input.CarrierGatewayId !== null) {
        entries["CarrierGatewayId"] = input.CarrierGatewayId;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    if (input.CoreNetworkArn !== undefined && input.CoreNetworkArn !== null) {
        entries["CoreNetworkArn"] = input.CoreNetworkArn;
    }
    return entries;
};
var serializeAws_ec2ReplaceRouteTableAssociationRequest = function (input, context) {
    var entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    return entries;
};
var serializeAws_ec2ReplaceTransitGatewayRouteRequest = function (input, context) {
    var entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole !== undefined && input.Blackhole !== null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ReportInstanceStatusRequest = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EndTime !== undefined && input.EndTime !== null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Instances !== undefined && input.Instances !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.Instances, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ReasonCodes !== undefined && input.ReasonCodes !== null) {
        var memberEntries = serializeAws_ec2ReasonCodesList(input.ReasonCodes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ReasonCode.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Status !== undefined && input.Status !== null) {
        entries["Status"] = input.Status;
    }
    return entries;
};
var serializeAws_ec2RequestHostIdList = function (input, context) {
    var e_150, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_150 = __values(input), input_150_1 = input_150.next(); !input_150_1.done; input_150_1 = input_150.next()) {
            var entry = input_150_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_150_1) { e_150 = { error: e_150_1 }; }
    finally {
        try {
            if (input_150_1 && !input_150_1.done && (_a = input_150.return)) _a.call(input_150);
        }
        finally { if (e_150) throw e_150.error; }
    }
    return entries;
};
var serializeAws_ec2RequestHostIdSet = function (input, context) {
    var e_151, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_151 = __values(input), input_151_1 = input_151.next(); !input_151_1.done; input_151_1 = input_151.next()) {
            var entry = input_151_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_151_1) { e_151 = { error: e_151_1 }; }
    finally {
        try {
            if (input_151_1 && !input_151_1.done && (_a = input_151.return)) _a.call(input_151);
        }
        finally { if (e_151) throw e_151.error; }
    }
    return entries;
};
var serializeAws_ec2RequestInstanceTypeList = function (input, context) {
    var e_152, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_152 = __values(input), input_152_1 = input_152.next(); !input_152_1.done; input_152_1 = input_152.next()) {
            var entry = input_152_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_152_1) { e_152 = { error: e_152_1 }; }
    finally {
        try {
            if (input_152_1 && !input_152_1.done && (_a = input_152.return)) _a.call(input_152);
        }
        finally { if (e_152) throw e_152.error; }
    }
    return entries;
};
var serializeAws_ec2RequestIpamResourceTag = function (input, context) {
    var entries = {};
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2RequestIpamResourceTagList = function (input, context) {
    var e_153, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_153 = __values(input), input_153_1 = input_153.next(); !input_153_1.done; input_153_1 = input_153.next()) {
            var entry = input_153_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2RequestIpamResourceTag(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_153_1) { e_153 = { error: e_153_1 }; }
    finally {
        try {
            if (input_153_1 && !input_153_1.done && (_a = input_153.return)) _a.call(input_153);
        }
        finally { if (e_153) throw e_153.error; }
    }
    return entries;
};
var serializeAws_ec2RequestLaunchTemplateData = function (input, context) {
    var entries = {};
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateIamInstanceProfileSpecificationRequest(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IamInstanceProfile.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateBlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BlockDeviceMapping.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterface.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplatesMonitoringRequest(input.Monitoring, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Monitoring.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplatePlacementRequest(input.Placement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Placement.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.RamDiskId !== undefined && input.RamDiskId !== null) {
        entries["RamDiskId"] = input.RamDiskId;
    }
    if (input.DisableApiTermination !== undefined && input.DisableApiTermination !== null) {
        entries["DisableApiTermination"] = input.DisableApiTermination;
    }
    if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
        entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateTagSpecificationRequestList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ElasticGpuSpecifications !== undefined && input.ElasticGpuSpecifications !== null) {
        var memberEntries = serializeAws_ec2ElasticGpuSpecificationList(input.ElasticGpuSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ElasticGpuSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ElasticInferenceAccelerators !== undefined && input.ElasticInferenceAccelerators !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateElasticInferenceAcceleratorList(input.ElasticInferenceAccelerators, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ElasticInferenceAccelerator.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupStringList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroup.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceMarketOptions !== undefined && input.InstanceMarketOptions !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateInstanceMarketOptionsRequest(input.InstanceMarketOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceMarketOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.CreditSpecification !== undefined && input.CreditSpecification !== null) {
        var memberEntries = serializeAws_ec2CreditSpecificationRequest(input.CreditSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CreditSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.CpuOptions !== undefined && input.CpuOptions !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateCpuOptionsRequest(input.CpuOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CpuOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.CapacityReservationSpecification !== undefined && input.CapacityReservationSpecification !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateCapacityReservationSpecificationRequest(input.CapacityReservationSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityReservationSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.LicenseSpecifications !== undefined && input.LicenseSpecifications !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateLicenseSpecificationListRequest(input.LicenseSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LicenseSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.HibernationOptions !== undefined && input.HibernationOptions !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateHibernationOptionsRequest(input.HibernationOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "HibernationOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MetadataOptions !== undefined && input.MetadataOptions !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateInstanceMetadataOptionsRequest(input.MetadataOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MetadataOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.EnclaveOptions !== undefined && input.EnclaveOptions !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateEnclaveOptionsRequest(input.EnclaveOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnclaveOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        var memberEntries = serializeAws_ec2InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceRequirements.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsNameOptions !== undefined && input.PrivateDnsNameOptions !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplatePrivateDnsNameOptionsRequest(input.PrivateDnsNameOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrivateDnsNameOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MaintenanceOptions !== undefined && input.MaintenanceOptions !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateInstanceMaintenanceOptionsRequest(input.MaintenanceOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MaintenanceOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DisableApiStop !== undefined && input.DisableApiStop !== null) {
        entries["DisableApiStop"] = input.DisableApiStop;
    }
    return entries;
};
var serializeAws_ec2RequestSpotFleetRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotFleetRequestConfig !== undefined && input.SpotFleetRequestConfig !== null) {
        var memberEntries = serializeAws_ec2SpotFleetRequestConfigData(input.SpotFleetRequestConfig, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SpotFleetRequestConfig.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2RequestSpotInstancesRequest = function (input, context) {
    var entries = {};
    if (input.AvailabilityZoneGroup !== undefined && input.AvailabilityZoneGroup !== null) {
        entries["AvailabilityZoneGroup"] = input.AvailabilityZoneGroup;
    }
    if (input.BlockDurationMinutes !== undefined && input.BlockDurationMinutes !== null) {
        entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.LaunchGroup !== undefined && input.LaunchGroup !== null) {
        entries["LaunchGroup"] = input.LaunchGroup;
    }
    if (input.LaunchSpecification !== undefined && input.LaunchSpecification !== null) {
        var memberEntries = serializeAws_ec2RequestSpotLaunchSpecification(input.LaunchSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.ValidFrom !== undefined && input.ValidFrom !== null) {
        entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    return entries;
};
var serializeAws_ec2RequestSpotLaunchSpecification = function (input, context) {
    var entries = {};
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupIdList(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
        var memberEntries = serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroup.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AddressingType !== undefined && input.AddressingType !== null) {
        entries["AddressingType"] = input.AddressingType;
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        var memberEntries = serializeAws_ec2BlockDeviceMappingList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BlockDeviceMapping.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        var memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IamInstanceProfile.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        var memberEntries = serializeAws_ec2RunInstancesMonitoringEnabled(input.Monitoring, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Monitoring.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        var memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterface.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        var memberEntries = serializeAws_ec2SpotPlacement(input.Placement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Placement.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    return entries;
};
var serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupIdList = function (input, context) {
    var e_154, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_154 = __values(input), input_154_1 = input_154.next(); !input_154_1.done; input_154_1 = input_154.next()) {
            var entry = input_154_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_154_1) { e_154 = { error: e_154_1 }; }
    finally {
        try {
            if (input_154_1 && !input_154_1.done && (_a = input_154.return)) _a.call(input_154);
        }
        finally { if (e_154) throw e_154.error; }
    }
    return entries;
};
var serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupList = function (input, context) {
    var e_155, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_155 = __values(input), input_155_1 = input_155.next(); !input_155_1.done; input_155_1 = input_155.next()) {
            var entry = input_155_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_155_1) { e_155 = { error: e_155_1 }; }
    finally {
        try {
            if (input_155_1 && !input_155_1.done && (_a = input_155.return)) _a.call(input_155);
        }
        finally { if (e_155) throw e_155.error; }
    }
    return entries;
};
var serializeAws_ec2ReservationFleetInstanceSpecification = function (input, context) {
    var entries = {};
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstancePlatform !== undefined && input.InstancePlatform !== null) {
        entries["InstancePlatform"] = input.InstancePlatform;
    }
    if (input.Weight !== undefined && input.Weight !== null) {
        entries["Weight"] = __serializeFloat(input.Weight);
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AvailabilityZoneId !== undefined && input.AvailabilityZoneId !== null) {
        entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.Priority !== undefined && input.Priority !== null) {
        entries["Priority"] = input.Priority;
    }
    return entries;
};
var serializeAws_ec2ReservationFleetInstanceSpecificationList = function (input, context) {
    var e_156, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_156 = __values(input), input_156_1 = input_156.next(); !input_156_1.done; input_156_1 = input_156.next()) {
            var entry = input_156_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ReservationFleetInstanceSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Member.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_156_1) { e_156 = { error: e_156_1 }; }
    finally {
        try {
            if (input_156_1 && !input_156_1.done && (_a = input_156.return)) _a.call(input_156);
        }
        finally { if (e_156) throw e_156.error; }
    }
    return entries;
};
var serializeAws_ec2ReservedInstanceIdSet = function (input, context) {
    var e_157, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_157 = __values(input), input_157_1 = input_157.next(); !input_157_1.done; input_157_1 = input_157.next()) {
            var entry = input_157_1.value;
            if (entry === null) {
                continue;
            }
            entries["ReservedInstanceId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_157_1) { e_157 = { error: e_157_1 }; }
    finally {
        try {
            if (input_157_1 && !input_157_1.done && (_a = input_157.return)) _a.call(input_157);
        }
        finally { if (e_157) throw e_157.error; }
    }
    return entries;
};
var serializeAws_ec2ReservedInstanceLimitPrice = function (input, context) {
    var entries = {};
    if (input.Amount !== undefined && input.Amount !== null) {
        entries["Amount"] = __serializeFloat(input.Amount);
    }
    if (input.CurrencyCode !== undefined && input.CurrencyCode !== null) {
        entries["CurrencyCode"] = input.CurrencyCode;
    }
    return entries;
};
var serializeAws_ec2ReservedInstancesConfiguration = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.Platform !== undefined && input.Platform !== null) {
        entries["Platform"] = input.Platform;
    }
    if (input.Scope !== undefined && input.Scope !== null) {
        entries["Scope"] = input.Scope;
    }
    return entries;
};
var serializeAws_ec2ReservedInstancesConfigurationList = function (input, context) {
    var e_158, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_158 = __values(input), input_158_1 = input_158.next(); !input_158_1.done; input_158_1 = input_158.next()) {
            var entry = input_158_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ReservedInstancesConfiguration(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_158_1) { e_158 = { error: e_158_1 }; }
    finally {
        try {
            if (input_158_1 && !input_158_1.done && (_a = input_158.return)) _a.call(input_158);
        }
        finally { if (e_158) throw e_158.error; }
    }
    return entries;
};
var serializeAws_ec2ReservedInstancesIdStringList = function (input, context) {
    var e_159, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_159 = __values(input), input_159_1 = input_159.next(); !input_159_1.done; input_159_1 = input_159.next()) {
            var entry = input_159_1.value;
            if (entry === null) {
                continue;
            }
            entries["ReservedInstancesId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_159_1) { e_159 = { error: e_159_1 }; }
    finally {
        try {
            if (input_159_1 && !input_159_1.done && (_a = input_159.return)) _a.call(input_159);
        }
        finally { if (e_159) throw e_159.error; }
    }
    return entries;
};
var serializeAws_ec2ReservedInstancesModificationIdStringList = function (input, context) {
    var e_160, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_160 = __values(input), input_160_1 = input_160.next(); !input_160_1.done; input_160_1 = input_160.next()) {
            var entry = input_160_1.value;
            if (entry === null) {
                continue;
            }
            entries["ReservedInstancesModificationId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_160_1) { e_160 = { error: e_160_1 }; }
    finally {
        try {
            if (input_160_1 && !input_160_1.done && (_a = input_160.return)) _a.call(input_160);
        }
        finally { if (e_160) throw e_160.error; }
    }
    return entries;
};
var serializeAws_ec2ReservedInstancesOfferingIdStringList = function (input, context) {
    var e_161, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_161 = __values(input), input_161_1 = input_161.next(); !input_161_1.done; input_161_1 = input_161.next()) {
            var entry = input_161_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_161_1) { e_161 = { error: e_161_1 }; }
    finally {
        try {
            if (input_161_1 && !input_161_1.done && (_a = input_161.return)) _a.call(input_161);
        }
        finally { if (e_161) throw e_161.error; }
    }
    return entries;
};
var serializeAws_ec2ResetAddressAttributeRequest = function (input, context) {
    var entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ResetEbsDefaultKmsKeyIdRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ResetFpgaImageAttributeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    return entries;
};
var serializeAws_ec2ResetImageAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ResetInstanceAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
var serializeAws_ec2ResetNetworkInterfaceAttributeRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.SourceDestCheck !== undefined && input.SourceDestCheck !== null) {
        entries["SourceDestCheck"] = input.SourceDestCheck;
    }
    return entries;
};
var serializeAws_ec2ResetSnapshotAttributeRequest = function (input, context) {
    var entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ResourceIdList = function (input, context) {
    var e_162, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_162 = __values(input), input_162_1 = input_162.next(); !input_162_1.done; input_162_1 = input_162.next()) {
            var entry = input_162_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_162_1) { e_162 = { error: e_162_1 }; }
    finally {
        try {
            if (input_162_1 && !input_162_1.done && (_a = input_162.return)) _a.call(input_162);
        }
        finally { if (e_162) throw e_162.error; }
    }
    return entries;
};
var serializeAws_ec2ResourceList = function (input, context) {
    var e_163, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_163 = __values(input), input_163_1 = input_163.next(); !input_163_1.done; input_163_1 = input_163.next()) {
            var entry = input_163_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_163_1) { e_163 = { error: e_163_1 }; }
    finally {
        try {
            if (input_163_1 && !input_163_1.done && (_a = input_163.return)) _a.call(input_163);
        }
        finally { if (e_163) throw e_163.error; }
    }
    return entries;
};
var serializeAws_ec2ResourceStatementRequest = function (input, context) {
    var entries = {};
    if (input.Resources !== undefined && input.Resources !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.Resources, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Resource.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ResourceTypes !== undefined && input.ResourceTypes !== null) {
        var memberEntries = serializeAws_ec2ValueStringList(input.ResourceTypes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ResourceType.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2RestorableByStringList = function (input, context) {
    var e_164, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_164 = __values(input), input_164_1 = input_164.next(); !input_164_1.done; input_164_1 = input_164.next()) {
            var entry = input_164_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_164_1) { e_164 = { error: e_164_1 }; }
    finally {
        try {
            if (input_164_1 && !input_164_1.done && (_a = input_164.return)) _a.call(input_164);
        }
        finally { if (e_164) throw e_164.error; }
    }
    return entries;
};
var serializeAws_ec2RestoreAddressToClassicRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    return entries;
};
var serializeAws_ec2RestoreImageFromRecycleBinRequest = function (input, context) {
    var entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RestoreManagedPrefixListVersionRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.PreviousVersion !== undefined && input.PreviousVersion !== null) {
        entries["PreviousVersion"] = input.PreviousVersion;
    }
    if (input.CurrentVersion !== undefined && input.CurrentVersion !== null) {
        entries["CurrentVersion"] = input.CurrentVersion;
    }
    return entries;
};
var serializeAws_ec2RestoreSnapshotFromRecycleBinRequest = function (input, context) {
    var entries = {};
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RestoreSnapshotTierRequest = function (input, context) {
    var entries = {};
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.TemporaryRestoreDays !== undefined && input.TemporaryRestoreDays !== null) {
        entries["TemporaryRestoreDays"] = input.TemporaryRestoreDays;
    }
    if (input.PermanentRestore !== undefined && input.PermanentRestore !== null) {
        entries["PermanentRestore"] = input.PermanentRestore;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RevokeClientVpnIngressRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.TargetNetworkCidr !== undefined && input.TargetNetworkCidr !== null) {
        entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
    }
    if (input.AccessGroupId !== undefined && input.AccessGroupId !== null) {
        entries["AccessGroupId"] = input.AccessGroupId;
    }
    if (input.RevokeAllGroups !== undefined && input.RevokeAllGroups !== null) {
        entries["RevokeAllGroups"] = input.RevokeAllGroups;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2RevokeSecurityGroupEgressRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        var memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpPermissions.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleIds !== undefined && input.SecurityGroupRuleIds !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupRuleId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    return entries;
};
var serializeAws_ec2RevokeSecurityGroupIngressRequest = function (input, context) {
    var entries = {};
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        var memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpPermissions.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SecurityGroupRuleIds !== undefined && input.SecurityGroupRuleIds !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupRuleId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2RouteTableIdStringList = function (input, context) {
    var e_165, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_165 = __values(input), input_165_1 = input_165.next(); !input_165_1.done; input_165_1 = input_165.next()) {
            var entry = input_165_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_165_1) { e_165 = { error: e_165_1 }; }
    finally {
        try {
            if (input_165_1 && !input_165_1.done && (_a = input_165.return)) _a.call(input_165);
        }
        finally { if (e_165) throw e_165.error; }
    }
    return entries;
};
var serializeAws_ec2RunInstancesMonitoringEnabled = function (input, context) {
    var entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
var serializeAws_ec2RunInstancesRequest = function (input, context) {
    var entries = {};
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        var memberEntries = serializeAws_ec2BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BlockDeviceMapping.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        var memberEntries = serializeAws_ec2InstanceIpv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Address.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.MaxCount !== undefined && input.MaxCount !== null) {
        entries["MaxCount"] = input.MaxCount;
    }
    if (input.MinCount !== undefined && input.MinCount !== null) {
        entries["MinCount"] = input.MinCount;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        var memberEntries = serializeAws_ec2RunInstancesMonitoringEnabled(input.Monitoring, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Monitoring.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        var memberEntries = serializeAws_ec2Placement(input.Placement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Placement.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupStringList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroup.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DisableApiTermination !== undefined && input.DisableApiTermination !== null) {
        entries["DisableApiTermination"] = input.DisableApiTermination;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        var memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IamInstanceProfile.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
        entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        var memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterface.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.ElasticGpuSpecification !== undefined && input.ElasticGpuSpecification !== null) {
        var memberEntries = serializeAws_ec2ElasticGpuSpecifications(input.ElasticGpuSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ElasticGpuSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ElasticInferenceAccelerators !== undefined && input.ElasticInferenceAccelerators !== null) {
        var memberEntries = serializeAws_ec2ElasticInferenceAccelerators(input.ElasticInferenceAccelerators, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ElasticInferenceAccelerator.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplate !== undefined && input.LaunchTemplate !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateSpecification(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplate.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InstanceMarketOptions !== undefined && input.InstanceMarketOptions !== null) {
        var memberEntries = serializeAws_ec2InstanceMarketOptionsRequest(input.InstanceMarketOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceMarketOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.CreditSpecification !== undefined && input.CreditSpecification !== null) {
        var memberEntries = serializeAws_ec2CreditSpecificationRequest(input.CreditSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CreditSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.CpuOptions !== undefined && input.CpuOptions !== null) {
        var memberEntries = serializeAws_ec2CpuOptionsRequest(input.CpuOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CpuOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.CapacityReservationSpecification !== undefined && input.CapacityReservationSpecification !== null) {
        var memberEntries = serializeAws_ec2CapacityReservationSpecification(input.CapacityReservationSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityReservationSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.HibernationOptions !== undefined && input.HibernationOptions !== null) {
        var memberEntries = serializeAws_ec2HibernationOptionsRequest(input.HibernationOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "HibernationOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.LicenseSpecifications !== undefined && input.LicenseSpecifications !== null) {
        var memberEntries = serializeAws_ec2LicenseSpecificationListRequest(input.LicenseSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LicenseSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MetadataOptions !== undefined && input.MetadataOptions !== null) {
        var memberEntries = serializeAws_ec2InstanceMetadataOptionsRequest(input.MetadataOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MetadataOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.EnclaveOptions !== undefined && input.EnclaveOptions !== null) {
        var memberEntries = serializeAws_ec2EnclaveOptionsRequest(input.EnclaveOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "EnclaveOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsNameOptions !== undefined && input.PrivateDnsNameOptions !== null) {
        var memberEntries = serializeAws_ec2PrivateDnsNameOptionsRequest(input.PrivateDnsNameOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrivateDnsNameOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.MaintenanceOptions !== undefined && input.MaintenanceOptions !== null) {
        var memberEntries = serializeAws_ec2InstanceMaintenanceOptionsRequest(input.MaintenanceOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MaintenanceOptions.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.DisableApiStop !== undefined && input.DisableApiStop !== null) {
        entries["DisableApiStop"] = input.DisableApiStop;
    }
    return entries;
};
var serializeAws_ec2RunScheduledInstancesRequest = function (input, context) {
    var entries = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.LaunchSpecification !== undefined && input.LaunchSpecification !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesLaunchSpecification(input.LaunchSpecification, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchSpecification.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ScheduledInstanceId !== undefined && input.ScheduledInstanceId !== null) {
        entries["ScheduledInstanceId"] = input.ScheduledInstanceId;
    }
    return entries;
};
var serializeAws_ec2S3ObjectTag = function (input, context) {
    var entries = {};
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2S3ObjectTagList = function (input, context) {
    var e_166, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_166 = __values(input), input_166_1 = input_166.next(); !input_166_1.done; input_166_1 = input_166.next()) {
            var entry = input_166_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2S3ObjectTag(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_166_1) { e_166 = { error: e_166_1 }; }
    finally {
        try {
            if (input_166_1 && !input_166_1.done && (_a = input_166.return)) _a.call(input_166);
        }
        finally { if (e_166) throw e_166.error; }
    }
    return entries;
};
var serializeAws_ec2S3Storage = function (input, context) {
    var entries = {};
    if (input.AWSAccessKeyId !== undefined && input.AWSAccessKeyId !== null) {
        entries["AWSAccessKeyId"] = input.AWSAccessKeyId;
    }
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.Prefix !== undefined && input.Prefix !== null) {
        entries["Prefix"] = input.Prefix;
    }
    if (input.UploadPolicy !== undefined && input.UploadPolicy !== null) {
        entries["UploadPolicy"] = context.base64Encoder(input.UploadPolicy);
    }
    if (input.UploadPolicySignature !== undefined && input.UploadPolicySignature !== null) {
        entries["UploadPolicySignature"] = input.UploadPolicySignature;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstanceIdRequestSet = function (input, context) {
    var e_167, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_167 = __values(input), input_167_1 = input_167.next(); !input_167_1.done; input_167_1 = input_167.next()) {
            var entry = input_167_1.value;
            if (entry === null) {
                continue;
            }
            entries["ScheduledInstanceId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_167_1) { e_167 = { error: e_167_1 }; }
    finally {
        try {
            if (input_167_1 && !input_167_1.done && (_a = input_167.return)) _a.call(input_167);
        }
        finally { if (e_167) throw e_167.error; }
    }
    return entries;
};
var serializeAws_ec2ScheduledInstanceRecurrenceRequest = function (input, context) {
    var entries = {};
    if (input.Frequency !== undefined && input.Frequency !== null) {
        entries["Frequency"] = input.Frequency;
    }
    if (input.Interval !== undefined && input.Interval !== null) {
        entries["Interval"] = input.Interval;
    }
    if (input.OccurrenceDays !== undefined && input.OccurrenceDays !== null) {
        var memberEntries = serializeAws_ec2OccurrenceDayRequestSet(input.OccurrenceDays, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "OccurrenceDay.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.OccurrenceRelativeToEnd !== undefined && input.OccurrenceRelativeToEnd !== null) {
        entries["OccurrenceRelativeToEnd"] = input.OccurrenceRelativeToEnd;
    }
    if (input.OccurrenceUnit !== undefined && input.OccurrenceUnit !== null) {
        entries["OccurrenceUnit"] = input.OccurrenceUnit;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesBlockDeviceMapping = function (input, context) {
    var entries = {};
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Ebs !== undefined && input.Ebs !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesEbs(input.Ebs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ebs.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.NoDevice !== undefined && input.NoDevice !== null) {
        entries["NoDevice"] = input.NoDevice;
    }
    if (input.VirtualName !== undefined && input.VirtualName !== null) {
        entries["VirtualName"] = input.VirtualName;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesBlockDeviceMappingSet = function (input, context) {
    var e_168, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_168 = __values(input), input_168_1 = input_168.next(); !input_168_1.done; input_168_1 = input_168.next()) {
            var entry = input_168_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ScheduledInstancesBlockDeviceMapping(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["BlockDeviceMapping.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_168_1) { e_168 = { error: e_168_1 }; }
    finally {
        try {
            if (input_168_1 && !input_168_1.done && (_a = input_168.return)) _a.call(input_168);
        }
        finally { if (e_168) throw e_168.error; }
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesEbs = function (input, context) {
    var entries = {};
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize !== undefined && input.VolumeSize !== null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesIamInstanceProfile = function (input, context) {
    var entries = {};
    if (input.Arn !== undefined && input.Arn !== null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesIpv6Address = function (input, context) {
    var entries = {};
    if (input.Ipv6Address !== undefined && input.Ipv6Address !== null) {
        entries["Ipv6Address"] = input.Ipv6Address;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesIpv6AddressList = function (input, context) {
    var e_169, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_169 = __values(input), input_169_1 = input_169.next(); !input_169_1.done; input_169_1 = input_169.next()) {
            var entry = input_169_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ScheduledInstancesIpv6Address(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Ipv6Address.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_169_1) { e_169 = { error: e_169_1 }; }
    finally {
        try {
            if (input_169_1 && !input_169_1.done && (_a = input_169.return)) _a.call(input_169);
        }
        finally { if (e_169) throw e_169.error; }
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesLaunchSpecification = function (input, context) {
    var entries = {};
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesBlockDeviceMappingSet(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BlockDeviceMapping.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesIamInstanceProfile(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IamInstanceProfile.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesMonitoring(input.Monitoring, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Monitoring.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesNetworkInterfaceSet(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterface.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesPlacement(input.Placement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Placement.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesSecurityGroupIdSet(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesMonitoring = function (input, context) {
    var entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesNetworkInterface = function (input, context) {
    var entries = {};
    if (input.AssociatePublicIpAddress !== undefined && input.AssociatePublicIpAddress !== null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesSecurityGroupIdSet(input.Groups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Group.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        var memberEntries = serializeAws_ec2ScheduledInstancesIpv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Address.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddressConfigs !== undefined && input.PrivateIpAddressConfigs !== null) {
        var memberEntries = serializeAws_ec2PrivateIpAddressConfigSet(input.PrivateIpAddressConfigs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrivateIpAddressConfig.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesNetworkInterfaceSet = function (input, context) {
    var e_170, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_170 = __values(input), input_170_1 = input_170.next(); !input_170_1.done; input_170_1 = input_170.next()) {
            var entry = input_170_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ScheduledInstancesNetworkInterface(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["NetworkInterface.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_170_1) { e_170 = { error: e_170_1 }; }
    finally {
        try {
            if (input_170_1 && !input_170_1.done && (_a = input_170.return)) _a.call(input_170);
        }
        finally { if (e_170) throw e_170.error; }
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesPlacement = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesPrivateIpAddressConfig = function (input, context) {
    var entries = {};
    if (input.Primary !== undefined && input.Primary !== null) {
        entries["Primary"] = input.Primary;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    return entries;
};
var serializeAws_ec2ScheduledInstancesSecurityGroupIdSet = function (input, context) {
    var e_171, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_171 = __values(input), input_171_1 = input_171.next(); !input_171_1.done; input_171_1 = input_171.next()) {
            var entry = input_171_1.value;
            if (entry === null) {
                continue;
            }
            entries["SecurityGroupId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_171_1) { e_171 = { error: e_171_1 }; }
    finally {
        try {
            if (input_171_1 && !input_171_1.done && (_a = input_171.return)) _a.call(input_171);
        }
        finally { if (e_171) throw e_171.error; }
    }
    return entries;
};
var serializeAws_ec2SearchLocalGatewayRoutesRequest = function (input, context) {
    var entries = {};
    if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2SearchTransitGatewayMulticastGroupsRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2SearchTransitGatewayRoutesRequest = function (input, context) {
    var entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        var memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Filter.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2SecurityGroupIdStringList = function (input, context) {
    var e_172, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_172 = __values(input), input_172_1 = input_172.next(); !input_172_1.done; input_172_1 = input_172.next()) {
            var entry = input_172_1.value;
            if (entry === null) {
                continue;
            }
            entries["SecurityGroupId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_172_1) { e_172 = { error: e_172_1 }; }
    finally {
        try {
            if (input_172_1 && !input_172_1.done && (_a = input_172.return)) _a.call(input_172);
        }
        finally { if (e_172) throw e_172.error; }
    }
    return entries;
};
var serializeAws_ec2SecurityGroupRuleDescription = function (input, context) {
    var entries = {};
    if (input.SecurityGroupRuleId !== undefined && input.SecurityGroupRuleId !== null) {
        entries["SecurityGroupRuleId"] = input.SecurityGroupRuleId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
var serializeAws_ec2SecurityGroupRuleDescriptionList = function (input, context) {
    var e_173, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_173 = __values(input), input_173_1 = input_173.next(); !input_173_1.done; input_173_1 = input_173.next()) {
            var entry = input_173_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2SecurityGroupRuleDescription(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_173_1) { e_173 = { error: e_173_1 }; }
    finally {
        try {
            if (input_173_1 && !input_173_1.done && (_a = input_173.return)) _a.call(input_173);
        }
        finally { if (e_173) throw e_173.error; }
    }
    return entries;
};
var serializeAws_ec2SecurityGroupRuleIdList = function (input, context) {
    var e_174, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_174 = __values(input), input_174_1 = input_174.next(); !input_174_1.done; input_174_1 = input_174.next()) {
            var entry = input_174_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_174_1) { e_174 = { error: e_174_1 }; }
    finally {
        try {
            if (input_174_1 && !input_174_1.done && (_a = input_174.return)) _a.call(input_174);
        }
        finally { if (e_174) throw e_174.error; }
    }
    return entries;
};
var serializeAws_ec2SecurityGroupRuleRequest = function (input, context) {
    var entries = {};
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.CidrIpv4 !== undefined && input.CidrIpv4 !== null) {
        entries["CidrIpv4"] = input.CidrIpv4;
    }
    if (input.CidrIpv6 !== undefined && input.CidrIpv6 !== null) {
        entries["CidrIpv6"] = input.CidrIpv6;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.ReferencedGroupId !== undefined && input.ReferencedGroupId !== null) {
        entries["ReferencedGroupId"] = input.ReferencedGroupId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
var serializeAws_ec2SecurityGroupRuleUpdate = function (input, context) {
    var entries = {};
    if (input.SecurityGroupRuleId !== undefined && input.SecurityGroupRuleId !== null) {
        entries["SecurityGroupRuleId"] = input.SecurityGroupRuleId;
    }
    if (input.SecurityGroupRule !== undefined && input.SecurityGroupRule !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupRuleRequest(input.SecurityGroupRule, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupRule.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2SecurityGroupRuleUpdateList = function (input, context) {
    var e_175, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_175 = __values(input), input_175_1 = input_175.next(); !input_175_1.done; input_175_1 = input_175.next()) {
            var entry = input_175_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2SecurityGroupRuleUpdate(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_175_1) { e_175 = { error: e_175_1 }; }
    finally {
        try {
            if (input_175_1 && !input_175_1.done && (_a = input_175.return)) _a.call(input_175);
        }
        finally { if (e_175) throw e_175.error; }
    }
    return entries;
};
var serializeAws_ec2SecurityGroupStringList = function (input, context) {
    var e_176, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_176 = __values(input), input_176_1 = input_176.next(); !input_176_1.done; input_176_1 = input_176.next()) {
            var entry = input_176_1.value;
            if (entry === null) {
                continue;
            }
            entries["SecurityGroup.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_176_1) { e_176 = { error: e_176_1 }; }
    finally {
        try {
            if (input_176_1 && !input_176_1.done && (_a = input_176.return)) _a.call(input_176);
        }
        finally { if (e_176) throw e_176.error; }
    }
    return entries;
};
var serializeAws_ec2SendDiagnosticInterruptRequest = function (input, context) {
    var entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2SlotDateTimeRangeRequest = function (input, context) {
    var entries = {};
    if (input.EarliestTime !== undefined && input.EarliestTime !== null) {
        entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
    }
    if (input.LatestTime !== undefined && input.LatestTime !== null) {
        entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
var serializeAws_ec2SlotStartTimeRangeRequest = function (input, context) {
    var entries = {};
    if (input.EarliestTime !== undefined && input.EarliestTime !== null) {
        entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
    }
    if (input.LatestTime !== undefined && input.LatestTime !== null) {
        entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
var serializeAws_ec2SnapshotDiskContainer = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Format !== undefined && input.Format !== null) {
        entries["Format"] = input.Format;
    }
    if (input.Url !== undefined && input.Url !== null) {
        entries["Url"] = input.Url;
    }
    if (input.UserBucket !== undefined && input.UserBucket !== null) {
        var memberEntries = serializeAws_ec2UserBucket(input.UserBucket, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "UserBucket.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2SnapshotIdStringList = function (input, context) {
    var e_177, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_177 = __values(input), input_177_1 = input_177.next(); !input_177_1.done; input_177_1 = input_177.next()) {
            var entry = input_177_1.value;
            if (entry === null) {
                continue;
            }
            entries["SnapshotId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_177_1) { e_177 = { error: e_177_1 }; }
    finally {
        try {
            if (input_177_1 && !input_177_1.done && (_a = input_177.return)) _a.call(input_177);
        }
        finally { if (e_177) throw e_177.error; }
    }
    return entries;
};
var serializeAws_ec2SpotCapacityRebalance = function (input, context) {
    var entries = {};
    if (input.ReplacementStrategy !== undefined && input.ReplacementStrategy !== null) {
        entries["ReplacementStrategy"] = input.ReplacementStrategy;
    }
    if (input.TerminationDelay !== undefined && input.TerminationDelay !== null) {
        entries["TerminationDelay"] = input.TerminationDelay;
    }
    return entries;
};
var serializeAws_ec2SpotFleetLaunchSpecification = function (input, context) {
    var entries = {};
    if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
        var memberEntries = serializeAws_ec2GroupIdentifierList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "GroupSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AddressingType !== undefined && input.AddressingType !== null) {
        entries["AddressingType"] = input.AddressingType;
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        var memberEntries = serializeAws_ec2BlockDeviceMappingList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "BlockDeviceMapping.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        var memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IamInstanceProfile.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        var memberEntries = serializeAws_ec2SpotFleetMonitoring(input.Monitoring, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Monitoring.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        var memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "NetworkInterfaceSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        var memberEntries = serializeAws_ec2SpotPlacement(input.Placement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Placement.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    if (input.WeightedCapacity !== undefined && input.WeightedCapacity !== null) {
        entries["WeightedCapacity"] = __serializeFloat(input.WeightedCapacity);
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2SpotFleetTagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecificationSet.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        var memberEntries = serializeAws_ec2InstanceRequirements(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceRequirements.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2SpotFleetMonitoring = function (input, context) {
    var entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
var serializeAws_ec2SpotFleetRequestConfigData = function (input, context) {
    var entries = {};
    if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.OnDemandAllocationStrategy !== undefined && input.OnDemandAllocationStrategy !== null) {
        entries["OnDemandAllocationStrategy"] = input.OnDemandAllocationStrategy;
    }
    if (input.SpotMaintenanceStrategies !== undefined && input.SpotMaintenanceStrategies !== null) {
        var memberEntries = serializeAws_ec2SpotMaintenanceStrategies(input.SpotMaintenanceStrategies, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SpotMaintenanceStrategies.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.FulfilledCapacity !== undefined && input.FulfilledCapacity !== null) {
        entries["FulfilledCapacity"] = __serializeFloat(input.FulfilledCapacity);
    }
    if (input.OnDemandFulfilledCapacity !== undefined && input.OnDemandFulfilledCapacity !== null) {
        entries["OnDemandFulfilledCapacity"] = __serializeFloat(input.OnDemandFulfilledCapacity);
    }
    if (input.IamFleetRole !== undefined && input.IamFleetRole !== null) {
        entries["IamFleetRole"] = input.IamFleetRole;
    }
    if (input.LaunchSpecifications !== undefined && input.LaunchSpecifications !== null) {
        var memberEntries = serializeAws_ec2LaunchSpecsList(input.LaunchSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchSpecifications.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
        var memberEntries = serializeAws_ec2LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LaunchTemplateConfigs.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.TargetCapacity !== undefined && input.TargetCapacity !== null) {
        entries["TargetCapacity"] = input.TargetCapacity;
    }
    if (input.OnDemandTargetCapacity !== undefined && input.OnDemandTargetCapacity !== null) {
        entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
    }
    if (input.OnDemandMaxTotalPrice !== undefined && input.OnDemandMaxTotalPrice !== null) {
        entries["OnDemandMaxTotalPrice"] = input.OnDemandMaxTotalPrice;
    }
    if (input.SpotMaxTotalPrice !== undefined && input.SpotMaxTotalPrice !== null) {
        entries["SpotMaxTotalPrice"] = input.SpotMaxTotalPrice;
    }
    if (input.TerminateInstancesWithExpiration !== undefined && input.TerminateInstancesWithExpiration !== null) {
        entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.ValidFrom !== undefined && input.ValidFrom !== null) {
        entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.ReplaceUnhealthyInstances !== undefined && input.ReplaceUnhealthyInstances !== null) {
        entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    if (input.LoadBalancersConfig !== undefined && input.LoadBalancersConfig !== null) {
        var memberEntries = serializeAws_ec2LoadBalancersConfig(input.LoadBalancersConfig, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "LoadBalancersConfig.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InstancePoolsToUseCount !== undefined && input.InstancePoolsToUseCount !== null) {
        entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
    }
    if (input.Context !== undefined && input.Context !== null) {
        entries["Context"] = input.Context;
    }
    if (input.TargetCapacityUnitType !== undefined && input.TargetCapacityUnitType !== null) {
        entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2SpotFleetRequestIdList = function (input, context) {
    var e_178, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_178 = __values(input), input_178_1 = input_178.next(); !input_178_1.done; input_178_1 = input_178.next()) {
            var entry = input_178_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_178_1) { e_178 = { error: e_178_1 }; }
    finally {
        try {
            if (input_178_1 && !input_178_1.done && (_a = input_178.return)) _a.call(input_178);
        }
        finally { if (e_178) throw e_178.error; }
    }
    return entries;
};
var serializeAws_ec2SpotFleetTagSpecification = function (input, context) {
    var entries = {};
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2SpotFleetTagSpecificationList = function (input, context) {
    var e_179, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_179 = __values(input), input_179_1 = input_179.next(); !input_179_1.done; input_179_1 = input_179.next()) {
            var entry = input_179_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2SpotFleetTagSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_179_1) { e_179 = { error: e_179_1 }; }
    finally {
        try {
            if (input_179_1 && !input_179_1.done && (_a = input_179.return)) _a.call(input_179);
        }
        finally { if (e_179) throw e_179.error; }
    }
    return entries;
};
var serializeAws_ec2SpotInstanceRequestIdList = function (input, context) {
    var e_180, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_180 = __values(input), input_180_1 = input_180.next(); !input_180_1.done; input_180_1 = input_180.next()) {
            var entry = input_180_1.value;
            if (entry === null) {
                continue;
            }
            entries["SpotInstanceRequestId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_180_1) { e_180 = { error: e_180_1 }; }
    finally {
        try {
            if (input_180_1 && !input_180_1.done && (_a = input_180.return)) _a.call(input_180);
        }
        finally { if (e_180) throw e_180.error; }
    }
    return entries;
};
var serializeAws_ec2SpotMaintenanceStrategies = function (input, context) {
    var entries = {};
    if (input.CapacityRebalance !== undefined && input.CapacityRebalance !== null) {
        var memberEntries = serializeAws_ec2SpotCapacityRebalance(input.CapacityRebalance, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "CapacityRebalance.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2SpotMarketOptions = function (input, context) {
    var entries = {};
    if (input.MaxPrice !== undefined && input.MaxPrice !== null) {
        entries["MaxPrice"] = input.MaxPrice;
    }
    if (input.SpotInstanceType !== undefined && input.SpotInstanceType !== null) {
        entries["SpotInstanceType"] = input.SpotInstanceType;
    }
    if (input.BlockDurationMinutes !== undefined && input.BlockDurationMinutes !== null) {
        entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    return entries;
};
var serializeAws_ec2SpotOptionsRequest = function (input, context) {
    var entries = {};
    if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.MaintenanceStrategies !== undefined && input.MaintenanceStrategies !== null) {
        var memberEntries = serializeAws_ec2FleetSpotMaintenanceStrategiesRequest(input.MaintenanceStrategies, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "MaintenanceStrategies.".concat(key);
            entries[loc] = value;
        });
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    if (input.InstancePoolsToUseCount !== undefined && input.InstancePoolsToUseCount !== null) {
        entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
    }
    if (input.SingleInstanceType !== undefined && input.SingleInstanceType !== null) {
        entries["SingleInstanceType"] = input.SingleInstanceType;
    }
    if (input.SingleAvailabilityZone !== undefined && input.SingleAvailabilityZone !== null) {
        entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
    }
    if (input.MinTargetCapacity !== undefined && input.MinTargetCapacity !== null) {
        entries["MinTargetCapacity"] = input.MinTargetCapacity;
    }
    if (input.MaxTotalPrice !== undefined && input.MaxTotalPrice !== null) {
        entries["MaxTotalPrice"] = input.MaxTotalPrice;
    }
    return entries;
};
var serializeAws_ec2SpotPlacement = function (input, context) {
    var entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    return entries;
};
var serializeAws_ec2StartInstancesRequest = function (input, context) {
    var entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInsightsAccessScopeId !== undefined && input.NetworkInsightsAccessScopeId !== null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2StartNetworkInsightsAnalysisRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInsightsPathId !== undefined && input.NetworkInsightsPathId !== null) {
        entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
    }
    if (input.FilterInArns !== undefined && input.FilterInArns !== null) {
        var memberEntries = serializeAws_ec2ArnList(input.FilterInArns, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "FilterInArn.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        var memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TagSpecification.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
var serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    return entries;
};
var serializeAws_ec2StopInstancesRequest = function (input, context) {
    var entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Hibernate !== undefined && input.Hibernate !== null) {
        entries["Hibernate"] = input.Hibernate;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    return entries;
};
var serializeAws_ec2Storage = function (input, context) {
    var entries = {};
    if (input.S3 !== undefined && input.S3 !== null) {
        var memberEntries = serializeAws_ec2S3Storage(input.S3, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "S3.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2StorageLocation = function (input, context) {
    var entries = {};
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    return entries;
};
var serializeAws_ec2SubnetIdStringList = function (input, context) {
    var e_181, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_181 = __values(input), input_181_1 = input_181.next(); !input_181_1.done; input_181_1 = input_181.next()) {
            var entry = input_181_1.value;
            if (entry === null) {
                continue;
            }
            entries["SubnetId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_181_1) { e_181 = { error: e_181_1 }; }
    finally {
        try {
            if (input_181_1 && !input_181_1.done && (_a = input_181.return)) _a.call(input_181);
        }
        finally { if (e_181) throw e_181.error; }
    }
    return entries;
};
var serializeAws_ec2Tag = function (input, context) {
    var entries = {};
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
var serializeAws_ec2TagList = function (input, context) {
    var e_182, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_182 = __values(input), input_182_1 = input_182.next(); !input_182_1.done; input_182_1 = input_182.next()) {
            var entry = input_182_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2Tag(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_182_1) { e_182 = { error: e_182_1 }; }
    finally {
        try {
            if (input_182_1 && !input_182_1.done && (_a = input_182.return)) _a.call(input_182);
        }
        finally { if (e_182) throw e_182.error; }
    }
    return entries;
};
var serializeAws_ec2TagSpecification = function (input, context) {
    var entries = {};
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Tag.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2TagSpecificationList = function (input, context) {
    var e_183, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_183 = __values(input), input_183_1 = input_183.next(); !input_183_1.done; input_183_1 = input_183.next()) {
            var entry = input_183_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2TagSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_183_1) { e_183 = { error: e_183_1 }; }
    finally {
        try {
            if (input_183_1 && !input_183_1.done && (_a = input_183.return)) _a.call(input_183);
        }
        finally { if (e_183) throw e_183.error; }
    }
    return entries;
};
var serializeAws_ec2TargetCapacitySpecificationRequest = function (input, context) {
    var entries = {};
    if (input.TotalTargetCapacity !== undefined && input.TotalTargetCapacity !== null) {
        entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
    }
    if (input.OnDemandTargetCapacity !== undefined && input.OnDemandTargetCapacity !== null) {
        entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
    }
    if (input.SpotTargetCapacity !== undefined && input.SpotTargetCapacity !== null) {
        entries["SpotTargetCapacity"] = input.SpotTargetCapacity;
    }
    if (input.DefaultTargetCapacityType !== undefined && input.DefaultTargetCapacityType !== null) {
        entries["DefaultTargetCapacityType"] = input.DefaultTargetCapacityType;
    }
    if (input.TargetCapacityUnitType !== undefined && input.TargetCapacityUnitType !== null) {
        entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
    }
    return entries;
};
var serializeAws_ec2TargetConfigurationRequest = function (input, context) {
    var entries = {};
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.OfferingId !== undefined && input.OfferingId !== null) {
        entries["OfferingId"] = input.OfferingId;
    }
    return entries;
};
var serializeAws_ec2TargetConfigurationRequestSet = function (input, context) {
    var e_184, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_184 = __values(input), input_184_1 = input_184.next(); !input_184_1.done; input_184_1 = input_184.next()) {
            var entry = input_184_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2TargetConfigurationRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["TargetConfigurationRequest.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_184_1) { e_184 = { error: e_184_1 }; }
    finally {
        try {
            if (input_184_1 && !input_184_1.done && (_a = input_184.return)) _a.call(input_184);
        }
        finally { if (e_184) throw e_184.error; }
    }
    return entries;
};
var serializeAws_ec2TargetGroup = function (input, context) {
    var entries = {};
    if (input.Arn !== undefined && input.Arn !== null) {
        entries["Arn"] = input.Arn;
    }
    return entries;
};
var serializeAws_ec2TargetGroups = function (input, context) {
    var e_185, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_185 = __values(input), input_185_1 = input_185.next(); !input_185_1.done; input_185_1 = input_185.next()) {
            var entry = input_185_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2TargetGroup(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_185_1) { e_185 = { error: e_185_1 }; }
    finally {
        try {
            if (input_185_1 && !input_185_1.done && (_a = input_185.return)) _a.call(input_185);
        }
        finally { if (e_185) throw e_185.error; }
    }
    return entries;
};
var serializeAws_ec2TargetGroupsConfig = function (input, context) {
    var entries = {};
    if (input.TargetGroups !== undefined && input.TargetGroups !== null) {
        var memberEntries = serializeAws_ec2TargetGroups(input.TargetGroups, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TargetGroups.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2TerminateClientVpnConnectionsRequest = function (input, context) {
    var entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.ConnectionId !== undefined && input.ConnectionId !== null) {
        entries["ConnectionId"] = input.ConnectionId;
    }
    if (input.Username !== undefined && input.Username !== null) {
        entries["Username"] = input.Username;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2TerminateInstancesRequest = function (input, context) {
    var entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ThroughResourcesStatementRequest = function (input, context) {
    var entries = {};
    if (input.ResourceStatement !== undefined && input.ResourceStatement !== null) {
        var memberEntries = serializeAws_ec2ResourceStatementRequest(input.ResourceStatement, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "ResourceStatement.".concat(key);
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2ThroughResourcesStatementRequestList = function (input, context) {
    var e_186, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_186 = __values(input), input_186_1 = input_186.next(); !input_186_1.done; input_186_1 = input_186.next()) {
            var entry = input_186_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2ThroughResourcesStatementRequest(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_186_1) { e_186 = { error: e_186_1 }; }
    finally {
        try {
            if (input_186_1 && !input_186_1.done && (_a = input_186.return)) _a.call(input_186);
        }
        finally { if (e_186) throw e_186.error; }
    }
    return entries;
};
var serializeAws_ec2TotalLocalStorageGB = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
var serializeAws_ec2TotalLocalStorageGBRequest = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = __serializeFloat(input.Min);
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = __serializeFloat(input.Max);
    }
    return entries;
};
var serializeAws_ec2TrafficMirrorFilterIdList = function (input, context) {
    var e_187, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_187 = __values(input), input_187_1 = input_187.next(); !input_187_1.done; input_187_1 = input_187.next()) {
            var entry = input_187_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_187_1) { e_187 = { error: e_187_1 }; }
    finally {
        try {
            if (input_187_1 && !input_187_1.done && (_a = input_187.return)) _a.call(input_187);
        }
        finally { if (e_187) throw e_187.error; }
    }
    return entries;
};
var serializeAws_ec2TrafficMirrorFilterRuleFieldList = function (input, context) {
    var e_188, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_188 = __values(input), input_188_1 = input_188.next(); !input_188_1.done; input_188_1 = input_188.next()) {
            var entry = input_188_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_188_1) { e_188 = { error: e_188_1 }; }
    finally {
        try {
            if (input_188_1 && !input_188_1.done && (_a = input_188.return)) _a.call(input_188);
        }
        finally { if (e_188) throw e_188.error; }
    }
    return entries;
};
var serializeAws_ec2TrafficMirrorNetworkServiceList = function (input, context) {
    var e_189, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_189 = __values(input), input_189_1 = input_189.next(); !input_189_1.done; input_189_1 = input_189.next()) {
            var entry = input_189_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_189_1) { e_189 = { error: e_189_1 }; }
    finally {
        try {
            if (input_189_1 && !input_189_1.done && (_a = input_189.return)) _a.call(input_189);
        }
        finally { if (e_189) throw e_189.error; }
    }
    return entries;
};
var serializeAws_ec2TrafficMirrorPortRangeRequest = function (input, context) {
    var entries = {};
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    return entries;
};
var serializeAws_ec2TrafficMirrorSessionFieldList = function (input, context) {
    var e_190, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_190 = __values(input), input_190_1 = input_190.next(); !input_190_1.done; input_190_1 = input_190.next()) {
            var entry = input_190_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_190_1) { e_190 = { error: e_190_1 }; }
    finally {
        try {
            if (input_190_1 && !input_190_1.done && (_a = input_190.return)) _a.call(input_190);
        }
        finally { if (e_190) throw e_190.error; }
    }
    return entries;
};
var serializeAws_ec2TrafficMirrorSessionIdList = function (input, context) {
    var e_191, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_191 = __values(input), input_191_1 = input_191.next(); !input_191_1.done; input_191_1 = input_191.next()) {
            var entry = input_191_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_191_1) { e_191 = { error: e_191_1 }; }
    finally {
        try {
            if (input_191_1 && !input_191_1.done && (_a = input_191.return)) _a.call(input_191);
        }
        finally { if (e_191) throw e_191.error; }
    }
    return entries;
};
var serializeAws_ec2TrafficMirrorTargetIdList = function (input, context) {
    var e_192, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_192 = __values(input), input_192_1 = input_192.next(); !input_192_1.done; input_192_1 = input_192.next()) {
            var entry = input_192_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_192_1) { e_192 = { error: e_192_1 }; }
    finally {
        try {
            if (input_192_1 && !input_192_1.done && (_a = input_192.return)) _a.call(input_192);
        }
        finally { if (e_192) throw e_192.error; }
    }
    return entries;
};
var serializeAws_ec2TransitGatewayAttachmentIdStringList = function (input, context) {
    var e_193, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_193 = __values(input), input_193_1 = input_193.next(); !input_193_1.done; input_193_1 = input_193.next()) {
            var entry = input_193_1.value;
            if (entry === null) {
                continue;
            }
            entries["Member.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_193_1) { e_193 = { error: e_193_1 }; }
    finally {
        try {
            if (input_193_1 && !input_193_1.done && (_a = input_193.return)) _a.call(input_193);
        }
        finally { if (e_193) throw e_193.error; }
    }
    return entries;
};
var serializeAws_ec2TransitGatewayCidrBlockStringList = function (input, context) {
    var e_194, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_194 = __values(input), input_194_1 = input_194.next(); !input_194_1.done; input_194_1 = input_194.next()) {
            var entry = input_194_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_194_1) { e_194 = { error: e_194_1 }; }
    finally {
        try {
            if (input_194_1 && !input_194_1.done && (_a = input_194.return)) _a.call(input_194);
        }
        finally { if (e_194) throw e_194.error; }
    }
    return entries;
};
var serializeAws_ec2TransitGatewayConnectPeerIdStringList = function (input, context) {
    var e_195, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_195 = __values(input), input_195_1 = input_195.next(); !input_195_1.done; input_195_1 = input_195.next()) {
            var entry = input_195_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_195_1) { e_195 = { error: e_195_1 }; }
    finally {
        try {
            if (input_195_1 && !input_195_1.done && (_a = input_195.return)) _a.call(input_195);
        }
        finally { if (e_195) throw e_195.error; }
    }
    return entries;
};
var serializeAws_ec2TransitGatewayConnectRequestBgpOptions = function (input, context) {
    var entries = {};
    if (input.PeerAsn !== undefined && input.PeerAsn !== null) {
        entries["PeerAsn"] = input.PeerAsn;
    }
    return entries;
};
var serializeAws_ec2TransitGatewayIdStringList = function (input, context) {
    var e_196, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_196 = __values(input), input_196_1 = input_196.next(); !input_196_1.done; input_196_1 = input_196.next()) {
            var entry = input_196_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_196_1) { e_196 = { error: e_196_1 }; }
    finally {
        try {
            if (input_196_1 && !input_196_1.done && (_a = input_196.return)) _a.call(input_196);
        }
        finally { if (e_196) throw e_196.error; }
    }
    return entries;
};
var serializeAws_ec2TransitGatewayMulticastDomainIdStringList = function (input, context) {
    var e_197, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_197 = __values(input), input_197_1 = input_197.next(); !input_197_1.done; input_197_1 = input_197.next()) {
            var entry = input_197_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_197_1) { e_197 = { error: e_197_1 }; }
    finally {
        try {
            if (input_197_1 && !input_197_1.done && (_a = input_197.return)) _a.call(input_197);
        }
        finally { if (e_197) throw e_197.error; }
    }
    return entries;
};
var serializeAws_ec2TransitGatewayNetworkInterfaceIdList = function (input, context) {
    var e_198, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_198 = __values(input), input_198_1 = input_198.next(); !input_198_1.done; input_198_1 = input_198.next()) {
            var entry = input_198_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_198_1) { e_198 = { error: e_198_1 }; }
    finally {
        try {
            if (input_198_1 && !input_198_1.done && (_a = input_198.return)) _a.call(input_198);
        }
        finally { if (e_198) throw e_198.error; }
    }
    return entries;
};
var serializeAws_ec2TransitGatewayRequestOptions = function (input, context) {
    var entries = {};
    if (input.AmazonSideAsn !== undefined && input.AmazonSideAsn !== null) {
        entries["AmazonSideAsn"] = input.AmazonSideAsn;
    }
    if (input.AutoAcceptSharedAttachments !== undefined && input.AutoAcceptSharedAttachments !== null) {
        entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
    }
    if (input.DefaultRouteTableAssociation !== undefined && input.DefaultRouteTableAssociation !== null) {
        entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
    }
    if (input.DefaultRouteTablePropagation !== undefined && input.DefaultRouteTablePropagation !== null) {
        entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
    }
    if (input.VpnEcmpSupport !== undefined && input.VpnEcmpSupport !== null) {
        entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
    }
    if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.MulticastSupport !== undefined && input.MulticastSupport !== null) {
        entries["MulticastSupport"] = input.MulticastSupport;
    }
    if (input.TransitGatewayCidrBlocks !== undefined && input.TransitGatewayCidrBlocks !== null) {
        var memberEntries = serializeAws_ec2TransitGatewayCidrBlockStringList(input.TransitGatewayCidrBlocks, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TransitGatewayCidrBlocks.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2TransitGatewayRouteTableIdStringList = function (input, context) {
    var e_199, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_199 = __values(input), input_199_1 = input_199.next(); !input_199_1.done; input_199_1 = input_199.next()) {
            var entry = input_199_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_199_1) { e_199 = { error: e_199_1 }; }
    finally {
        try {
            if (input_199_1 && !input_199_1.done && (_a = input_199.return)) _a.call(input_199);
        }
        finally { if (e_199) throw e_199.error; }
    }
    return entries;
};
var serializeAws_ec2TransitGatewaySubnetIdList = function (input, context) {
    var e_200, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_200 = __values(input), input_200_1 = input_200.next(); !input_200_1.done; input_200_1 = input_200.next()) {
            var entry = input_200_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_200_1) { e_200 = { error: e_200_1 }; }
    finally {
        try {
            if (input_200_1 && !input_200_1.done && (_a = input_200.return)) _a.call(input_200);
        }
        finally { if (e_200) throw e_200.error; }
    }
    return entries;
};
var serializeAws_ec2TrunkInterfaceAssociationIdList = function (input, context) {
    var e_201, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_201 = __values(input), input_201_1 = input_201.next(); !input_201_1.done; input_201_1 = input_201.next()) {
            var entry = input_201_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_201_1) { e_201 = { error: e_201_1 }; }
    finally {
        try {
            if (input_201_1 && !input_201_1.done && (_a = input_201.return)) _a.call(input_201);
        }
        finally { if (e_201) throw e_201.error; }
    }
    return entries;
};
var serializeAws_ec2UnassignIpv6AddressesRequest = function (input, context) {
    var entries = {};
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        var memberEntries = serializeAws_ec2Ipv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Addresses.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        var memberEntries = serializeAws_ec2IpPrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv6Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
var serializeAws_ec2UnassignPrivateIpAddressesRequest = function (input, context) {
    var entries = {};
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        var memberEntries = serializeAws_ec2PrivateIpAddressStringList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "PrivateIpAddress.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        var memberEntries = serializeAws_ec2IpPrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Ipv4Prefix.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2UnmonitorInstancesRequest = function (input, context) {
    var entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        var memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "InstanceId.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        var memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpPermissions.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleDescriptions !== undefined && input.SecurityGroupRuleDescriptions !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupRuleDescriptionList(input.SecurityGroupRuleDescriptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupRuleDescription.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressRequest = function (input, context) {
    var entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        var memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IpPermissions.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleDescriptions !== undefined && input.SecurityGroupRuleDescriptions !== null) {
        var memberEntries = serializeAws_ec2SecurityGroupRuleDescriptionList(input.SecurityGroupRuleDescriptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "SecurityGroupRuleDescription.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    return entries;
};
var serializeAws_ec2UserBucket = function (input, context) {
    var entries = {};
    if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Key !== undefined && input.S3Key !== null) {
        entries["S3Key"] = input.S3Key;
    }
    return entries;
};
var serializeAws_ec2UserData = function (input, context) {
    var entries = {};
    if (input.Data !== undefined && input.Data !== null) {
        entries["Data"] = input.Data;
    }
    return entries;
};
var serializeAws_ec2UserGroupStringList = function (input, context) {
    var e_202, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_202 = __values(input), input_202_1 = input_202.next(); !input_202_1.done; input_202_1 = input_202.next()) {
            var entry = input_202_1.value;
            if (entry === null) {
                continue;
            }
            entries["UserGroup.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_202_1) { e_202 = { error: e_202_1 }; }
    finally {
        try {
            if (input_202_1 && !input_202_1.done && (_a = input_202.return)) _a.call(input_202);
        }
        finally { if (e_202) throw e_202.error; }
    }
    return entries;
};
var serializeAws_ec2UserIdGroupPair = function (input, context) {
    var entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.PeeringStatus !== undefined && input.PeeringStatus !== null) {
        entries["PeeringStatus"] = input.PeeringStatus;
    }
    if (input.UserId !== undefined && input.UserId !== null) {
        entries["UserId"] = input.UserId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
var serializeAws_ec2UserIdGroupPairList = function (input, context) {
    var e_203, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_203 = __values(input), input_203_1 = input_203.next(); !input_203_1.done; input_203_1 = input_203.next()) {
            var entry = input_203_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2UserIdGroupPair(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Item.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_203_1) { e_203 = { error: e_203_1 }; }
    finally {
        try {
            if (input_203_1 && !input_203_1.done && (_a = input_203.return)) _a.call(input_203);
        }
        finally { if (e_203) throw e_203.error; }
    }
    return entries;
};
var serializeAws_ec2UserIdStringList = function (input, context) {
    var e_204, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_204 = __values(input), input_204_1 = input_204.next(); !input_204_1.done; input_204_1 = input_204.next()) {
            var entry = input_204_1.value;
            if (entry === null) {
                continue;
            }
            entries["UserId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_204_1) { e_204 = { error: e_204_1 }; }
    finally {
        try {
            if (input_204_1 && !input_204_1.done && (_a = input_204.return)) _a.call(input_204);
        }
        finally { if (e_204) throw e_204.error; }
    }
    return entries;
};
var serializeAws_ec2ValueStringList = function (input, context) {
    var e_205, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_205 = __values(input), input_205_1 = input_205.next(); !input_205_1.done; input_205_1 = input_205.next()) {
            var entry = input_205_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_205_1) { e_205 = { error: e_205_1 }; }
    finally {
        try {
            if (input_205_1 && !input_205_1.done && (_a = input_205.return)) _a.call(input_205);
        }
        finally { if (e_205) throw e_205.error; }
    }
    return entries;
};
var serializeAws_ec2VCpuCountRange = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2VCpuCountRangeRequest = function (input, context) {
    var entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
var serializeAws_ec2VersionStringList = function (input, context) {
    var e_206, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_206 = __values(input), input_206_1 = input_206.next(); !input_206_1.done; input_206_1 = input_206.next()) {
            var entry = input_206_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_206_1) { e_206 = { error: e_206_1 }; }
    finally {
        try {
            if (input_206_1 && !input_206_1.done && (_a = input_206.return)) _a.call(input_206);
        }
        finally { if (e_206) throw e_206.error; }
    }
    return entries;
};
var serializeAws_ec2VirtualizationTypeSet = function (input, context) {
    var e_207, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_207 = __values(input), input_207_1 = input_207.next(); !input_207_1.done; input_207_1 = input_207.next()) {
            var entry = input_207_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_207_1) { e_207 = { error: e_207_1 }; }
    finally {
        try {
            if (input_207_1 && !input_207_1.done && (_a = input_207.return)) _a.call(input_207);
        }
        finally { if (e_207) throw e_207.error; }
    }
    return entries;
};
var serializeAws_ec2VolumeDetail = function (input, context) {
    var entries = {};
    if (input.Size !== undefined && input.Size !== null) {
        entries["Size"] = input.Size;
    }
    return entries;
};
var serializeAws_ec2VolumeIdStringList = function (input, context) {
    var e_208, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_208 = __values(input), input_208_1 = input_208.next(); !input_208_1.done; input_208_1 = input_208.next()) {
            var entry = input_208_1.value;
            if (entry === null) {
                continue;
            }
            entries["VolumeId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_208_1) { e_208 = { error: e_208_1 }; }
    finally {
        try {
            if (input_208_1 && !input_208_1.done && (_a = input_208.return)) _a.call(input_208);
        }
        finally { if (e_208) throw e_208.error; }
    }
    return entries;
};
var serializeAws_ec2VpcClassicLinkIdList = function (input, context) {
    var e_209, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_209 = __values(input), input_209_1 = input_209.next(); !input_209_1.done; input_209_1 = input_209.next()) {
            var entry = input_209_1.value;
            if (entry === null) {
                continue;
            }
            entries["VpcId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_209_1) { e_209 = { error: e_209_1 }; }
    finally {
        try {
            if (input_209_1 && !input_209_1.done && (_a = input_209.return)) _a.call(input_209);
        }
        finally { if (e_209) throw e_209.error; }
    }
    return entries;
};
var serializeAws_ec2VpcEndpointIdList = function (input, context) {
    var e_210, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_210 = __values(input), input_210_1 = input_210.next(); !input_210_1.done; input_210_1 = input_210.next()) {
            var entry = input_210_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_210_1) { e_210 = { error: e_210_1 }; }
    finally {
        try {
            if (input_210_1 && !input_210_1.done && (_a = input_210.return)) _a.call(input_210);
        }
        finally { if (e_210) throw e_210.error; }
    }
    return entries;
};
var serializeAws_ec2VpcEndpointRouteTableIdList = function (input, context) {
    var e_211, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_211 = __values(input), input_211_1 = input_211.next(); !input_211_1.done; input_211_1 = input_211.next()) {
            var entry = input_211_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_211_1) { e_211 = { error: e_211_1 }; }
    finally {
        try {
            if (input_211_1 && !input_211_1.done && (_a = input_211.return)) _a.call(input_211);
        }
        finally { if (e_211) throw e_211.error; }
    }
    return entries;
};
var serializeAws_ec2VpcEndpointSecurityGroupIdList = function (input, context) {
    var e_212, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_212 = __values(input), input_212_1 = input_212.next(); !input_212_1.done; input_212_1 = input_212.next()) {
            var entry = input_212_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_212_1) { e_212 = { error: e_212_1 }; }
    finally {
        try {
            if (input_212_1 && !input_212_1.done && (_a = input_212.return)) _a.call(input_212);
        }
        finally { if (e_212) throw e_212.error; }
    }
    return entries;
};
var serializeAws_ec2VpcEndpointServiceIdList = function (input, context) {
    var e_213, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_213 = __values(input), input_213_1 = input_213.next(); !input_213_1.done; input_213_1 = input_213.next()) {
            var entry = input_213_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_213_1) { e_213 = { error: e_213_1 }; }
    finally {
        try {
            if (input_213_1 && !input_213_1.done && (_a = input_213.return)) _a.call(input_213);
        }
        finally { if (e_213) throw e_213.error; }
    }
    return entries;
};
var serializeAws_ec2VpcEndpointSubnetIdList = function (input, context) {
    var e_214, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_214 = __values(input), input_214_1 = input_214.next(); !input_214_1.done; input_214_1 = input_214.next()) {
            var entry = input_214_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_214_1) { e_214 = { error: e_214_1 }; }
    finally {
        try {
            if (input_214_1 && !input_214_1.done && (_a = input_214.return)) _a.call(input_214);
        }
        finally { if (e_214) throw e_214.error; }
    }
    return entries;
};
var serializeAws_ec2VpcIdStringList = function (input, context) {
    var e_215, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_215 = __values(input), input_215_1 = input_215.next(); !input_215_1.done; input_215_1 = input_215.next()) {
            var entry = input_215_1.value;
            if (entry === null) {
                continue;
            }
            entries["VpcId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_215_1) { e_215 = { error: e_215_1 }; }
    finally {
        try {
            if (input_215_1 && !input_215_1.done && (_a = input_215.return)) _a.call(input_215);
        }
        finally { if (e_215) throw e_215.error; }
    }
    return entries;
};
var serializeAws_ec2VpcPeeringConnectionIdList = function (input, context) {
    var e_216, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_216 = __values(input), input_216_1 = input_216.next(); !input_216_1.done; input_216_1 = input_216.next()) {
            var entry = input_216_1.value;
            if (entry === null) {
                continue;
            }
            entries["Item.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_216_1) { e_216 = { error: e_216_1 }; }
    finally {
        try {
            if (input_216_1 && !input_216_1.done && (_a = input_216.return)) _a.call(input_216);
        }
        finally { if (e_216) throw e_216.error; }
    }
    return entries;
};
var serializeAws_ec2VpnConnectionIdStringList = function (input, context) {
    var e_217, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_217 = __values(input), input_217_1 = input_217.next(); !input_217_1.done; input_217_1 = input_217.next()) {
            var entry = input_217_1.value;
            if (entry === null) {
                continue;
            }
            entries["VpnConnectionId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_217_1) { e_217 = { error: e_217_1 }; }
    finally {
        try {
            if (input_217_1 && !input_217_1.done && (_a = input_217.return)) _a.call(input_217);
        }
        finally { if (e_217) throw e_217.error; }
    }
    return entries;
};
var serializeAws_ec2VpnConnectionOptionsSpecification = function (input, context) {
    var entries = {};
    if (input.EnableAcceleration !== undefined && input.EnableAcceleration !== null) {
        entries["EnableAcceleration"] = input.EnableAcceleration;
    }
    if (input.StaticRoutesOnly !== undefined && input.StaticRoutesOnly !== null) {
        entries["StaticRoutesOnly"] = input.StaticRoutesOnly;
    }
    if (input.TunnelInsideIpVersion !== undefined && input.TunnelInsideIpVersion !== null) {
        entries["TunnelInsideIpVersion"] = input.TunnelInsideIpVersion;
    }
    if (input.TunnelOptions !== undefined && input.TunnelOptions !== null) {
        var memberEntries = serializeAws_ec2VpnTunnelOptionsSpecificationsList(input.TunnelOptions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "TunnelOptions.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.LocalIpv4NetworkCidr !== undefined && input.LocalIpv4NetworkCidr !== null) {
        entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
    }
    if (input.RemoteIpv4NetworkCidr !== undefined && input.RemoteIpv4NetworkCidr !== null) {
        entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
    }
    if (input.LocalIpv6NetworkCidr !== undefined && input.LocalIpv6NetworkCidr !== null) {
        entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
    }
    if (input.RemoteIpv6NetworkCidr !== undefined && input.RemoteIpv6NetworkCidr !== null) {
        entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
    }
    return entries;
};
var serializeAws_ec2VpnGatewayIdStringList = function (input, context) {
    var e_218, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_218 = __values(input), input_218_1 = input_218.next(); !input_218_1.done; input_218_1 = input_218.next()) {
            var entry = input_218_1.value;
            if (entry === null) {
                continue;
            }
            entries["VpnGatewayId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_218_1) { e_218 = { error: e_218_1 }; }
    finally {
        try {
            if (input_218_1 && !input_218_1.done && (_a = input_218.return)) _a.call(input_218);
        }
        finally { if (e_218) throw e_218.error; }
    }
    return entries;
};
var serializeAws_ec2VpnTunnelOptionsSpecification = function (input, context) {
    var entries = {};
    if (input.TunnelInsideCidr !== undefined && input.TunnelInsideCidr !== null) {
        entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
    }
    if (input.TunnelInsideIpv6Cidr !== undefined && input.TunnelInsideIpv6Cidr !== null) {
        entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
    }
    if (input.PreSharedKey !== undefined && input.PreSharedKey !== null) {
        entries["PreSharedKey"] = input.PreSharedKey;
    }
    if (input.Phase1LifetimeSeconds !== undefined && input.Phase1LifetimeSeconds !== null) {
        entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
    }
    if (input.Phase2LifetimeSeconds !== undefined && input.Phase2LifetimeSeconds !== null) {
        entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
    }
    if (input.RekeyMarginTimeSeconds !== undefined && input.RekeyMarginTimeSeconds !== null) {
        entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
    }
    if (input.RekeyFuzzPercentage !== undefined && input.RekeyFuzzPercentage !== null) {
        entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
    }
    if (input.ReplayWindowSize !== undefined && input.ReplayWindowSize !== null) {
        entries["ReplayWindowSize"] = input.ReplayWindowSize;
    }
    if (input.DPDTimeoutSeconds !== undefined && input.DPDTimeoutSeconds !== null) {
        entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
    }
    if (input.DPDTimeoutAction !== undefined && input.DPDTimeoutAction !== null) {
        entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
    }
    if (input.Phase1EncryptionAlgorithms !== undefined && input.Phase1EncryptionAlgorithms !== null) {
        var memberEntries = serializeAws_ec2Phase1EncryptionAlgorithmsRequestList(input.Phase1EncryptionAlgorithms, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase1EncryptionAlgorithm.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase2EncryptionAlgorithms !== undefined && input.Phase2EncryptionAlgorithms !== null) {
        var memberEntries = serializeAws_ec2Phase2EncryptionAlgorithmsRequestList(input.Phase2EncryptionAlgorithms, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase2EncryptionAlgorithm.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase1IntegrityAlgorithms !== undefined && input.Phase1IntegrityAlgorithms !== null) {
        var memberEntries = serializeAws_ec2Phase1IntegrityAlgorithmsRequestList(input.Phase1IntegrityAlgorithms, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase1IntegrityAlgorithm.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase2IntegrityAlgorithms !== undefined && input.Phase2IntegrityAlgorithms !== null) {
        var memberEntries = serializeAws_ec2Phase2IntegrityAlgorithmsRequestList(input.Phase2IntegrityAlgorithms, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase2IntegrityAlgorithm.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase1DHGroupNumbers !== undefined && input.Phase1DHGroupNumbers !== null) {
        var memberEntries = serializeAws_ec2Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase1DHGroupNumber.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.Phase2DHGroupNumbers !== undefined && input.Phase2DHGroupNumbers !== null) {
        var memberEntries = serializeAws_ec2Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "Phase2DHGroupNumber.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.IKEVersions !== undefined && input.IKEVersions !== null) {
        var memberEntries = serializeAws_ec2IKEVersionsRequestList(input.IKEVersions, context);
        Object.entries(memberEntries).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var loc = "IKEVersion.".concat(key.substring(key.indexOf(".") + 1));
            entries[loc] = value;
        });
    }
    if (input.StartupAction !== undefined && input.StartupAction !== null) {
        entries["StartupAction"] = input.StartupAction;
    }
    return entries;
};
var serializeAws_ec2VpnTunnelOptionsSpecificationsList = function (input, context) {
    var e_219, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_219 = __values(input), input_219_1 = input_219.next(); !input_219_1.done; input_219_1 = input_219.next()) {
            var entry = input_219_1.value;
            if (entry === null) {
                continue;
            }
            var memberEntries = serializeAws_ec2VpnTunnelOptionsSpecification(entry, context);
            Object.entries(memberEntries).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                entries["Member.".concat(counter, ".").concat(key)] = value;
            });
            counter++;
        }
    }
    catch (e_219_1) { e_219 = { error: e_219_1 }; }
    finally {
        try {
            if (input_219_1 && !input_219_1.done && (_a = input_219.return)) _a.call(input_219);
        }
        finally { if (e_219) throw e_219.error; }
    }
    return entries;
};
var serializeAws_ec2WithdrawByoipCidrRequest = function (input, context) {
    var entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
var serializeAws_ec2ZoneIdStringList = function (input, context) {
    var e_220, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_220 = __values(input), input_220_1 = input_220.next(); !input_220_1.done; input_220_1 = input_220.next()) {
            var entry = input_220_1.value;
            if (entry === null) {
                continue;
            }
            entries["ZoneId.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_220_1) { e_220 = { error: e_220_1 }; }
    finally {
        try {
            if (input_220_1 && !input_220_1.done && (_a = input_220.return)) _a.call(input_220);
        }
        finally { if (e_220) throw e_220.error; }
    }
    return entries;
};
var serializeAws_ec2ZoneNameStringList = function (input, context) {
    var e_221, _a;
    var entries = {};
    var counter = 1;
    try {
        for (var input_221 = __values(input), input_221_1 = input_221.next(); !input_221_1.done; input_221_1 = input_221.next()) {
            var entry = input_221_1.value;
            if (entry === null) {
                continue;
            }
            entries["ZoneName.".concat(counter)] = entry;
            counter++;
        }
    }
    catch (e_221_1) { e_221 = { error: e_221_1 }; }
    finally {
        try {
            if (input_221_1 && !input_221_1.done && (_a = input_221.return)) _a.call(input_221);
        }
        finally { if (e_221) throw e_221.error; }
    }
    return entries;
};
var deserializeAws_ec2AcceleratorCount = function (output, context) {
    var contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
var deserializeAws_ec2AcceleratorManufacturerSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2AcceleratorNameSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2AcceleratorTotalMemoryMiB = function (output, context) {
    var contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
var deserializeAws_ec2AcceleratorTypeSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2AcceptReservedInstancesExchangeQuoteResult = function (output, context) {
    var contents = {
        ExchangeId: undefined,
    };
    if (output["exchangeId"] !== undefined) {
        contents.ExchangeId = __expectString(output["exchangeId"]);
    }
    return contents;
};
var deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsResult = function (output, context) {
    var contents = {
        Associations: undefined,
    };
    if (output["associations"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
var deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentResult = function (output, context) {
    var contents = {
        TransitGatewayPeeringAttachment: undefined,
    };
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2AcceptTransitGatewayVpcAttachmentResult = function (output, context) {
    var contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2AcceptVpcEndpointConnectionsResult = function (output, context) {
    var contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2AcceptVpcPeeringConnectionResult = function (output, context) {
    var contents = {
        VpcPeeringConnection: undefined,
    };
    if (output["vpcPeeringConnection"] !== undefined) {
        contents.VpcPeeringConnection = deserializeAws_ec2VpcPeeringConnection(output["vpcPeeringConnection"], context);
    }
    return contents;
};
var deserializeAws_ec2AccessScopeAnalysisFinding = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeAnalysisId: undefined,
        NetworkInsightsAccessScopeId: undefined,
        FindingId: undefined,
        FindingComponents: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
    }
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    if (output["findingId"] !== undefined) {
        contents.FindingId = __expectString(output["findingId"]);
    }
    if (output.findingComponentSet === "") {
        contents.FindingComponents = [];
    }
    else if (output["findingComponentSet"] !== undefined && output["findingComponentSet"]["item"] !== undefined) {
        contents.FindingComponents = deserializeAws_ec2PathComponentList(__getArrayIfSingleItem(output["findingComponentSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2AccessScopeAnalysisFindingList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AccessScopeAnalysisFinding(entry, context);
    });
};
var deserializeAws_ec2AccessScopePath = function (output, context) {
    var contents = {
        Source: undefined,
        Destination: undefined,
        ThroughResources: undefined,
    };
    if (output["source"] !== undefined) {
        contents.Source = deserializeAws_ec2PathStatement(output["source"], context);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = deserializeAws_ec2PathStatement(output["destination"], context);
    }
    if (output.throughResourceSet === "") {
        contents.ThroughResources = [];
    }
    else if (output["throughResourceSet"] !== undefined && output["throughResourceSet"]["item"] !== undefined) {
        contents.ThroughResources = deserializeAws_ec2ThroughResourcesStatementList(__getArrayIfSingleItem(output["throughResourceSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2AccessScopePathList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AccessScopePath(entry, context);
    });
};
var deserializeAws_ec2AccountAttribute = function (output, context) {
    var contents = {
        AttributeName: undefined,
        AttributeValues: undefined,
    };
    if (output["attributeName"] !== undefined) {
        contents.AttributeName = __expectString(output["attributeName"]);
    }
    if (output.attributeValueSet === "") {
        contents.AttributeValues = [];
    }
    else if (output["attributeValueSet"] !== undefined && output["attributeValueSet"]["item"] !== undefined) {
        contents.AttributeValues = deserializeAws_ec2AccountAttributeValueList(__getArrayIfSingleItem(output["attributeValueSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2AccountAttributeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AccountAttribute(entry, context);
    });
};
var deserializeAws_ec2AccountAttributeValue = function (output, context) {
    var contents = {
        AttributeValue: undefined,
    };
    if (output["attributeValue"] !== undefined) {
        contents.AttributeValue = __expectString(output["attributeValue"]);
    }
    return contents;
};
var deserializeAws_ec2AccountAttributeValueList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AccountAttributeValue(entry, context);
    });
};
var deserializeAws_ec2ActiveInstance = function (output, context) {
    var contents = {
        InstanceId: undefined,
        InstanceType: undefined,
        SpotInstanceRequestId: undefined,
        InstanceHealth: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
    }
    if (output["instanceHealth"] !== undefined) {
        contents.InstanceHealth = __expectString(output["instanceHealth"]);
    }
    return contents;
};
var deserializeAws_ec2ActiveInstanceSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ActiveInstance(entry, context);
    });
};
var deserializeAws_ec2AdditionalDetail = function (output, context) {
    var contents = {
        AdditionalDetailType: undefined,
        Component: undefined,
    };
    if (output["additionalDetailType"] !== undefined) {
        contents.AdditionalDetailType = __expectString(output["additionalDetailType"]);
    }
    if (output["component"] !== undefined) {
        contents.Component = deserializeAws_ec2AnalysisComponent(output["component"], context);
    }
    return contents;
};
var deserializeAws_ec2AdditionalDetailList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AdditionalDetail(entry, context);
    });
};
var deserializeAws_ec2Address = function (output, context) {
    var contents = {
        InstanceId: undefined,
        PublicIp: undefined,
        AllocationId: undefined,
        AssociationId: undefined,
        Domain: undefined,
        NetworkInterfaceId: undefined,
        NetworkInterfaceOwnerId: undefined,
        PrivateIpAddress: undefined,
        Tags: undefined,
        PublicIpv4Pool: undefined,
        NetworkBorderGroup: undefined,
        CustomerOwnedIp: undefined,
        CustomerOwnedIpv4Pool: undefined,
        CarrierIp: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["domain"] !== undefined) {
        contents.Domain = __expectString(output["domain"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["networkInterfaceOwnerId"] !== undefined) {
        contents.NetworkInterfaceOwnerId = __expectString(output["networkInterfaceOwnerId"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["publicIpv4Pool"] !== undefined) {
        contents.PublicIpv4Pool = __expectString(output["publicIpv4Pool"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
    }
    if (output["customerOwnedIpv4Pool"] !== undefined) {
        contents.CustomerOwnedIpv4Pool = __expectString(output["customerOwnedIpv4Pool"]);
    }
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = __expectString(output["carrierIp"]);
    }
    return contents;
};
var deserializeAws_ec2AddressAttribute = function (output, context) {
    var contents = {
        PublicIp: undefined,
        AllocationId: undefined,
        PtrRecord: undefined,
        PtrRecordUpdate: undefined,
    };
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["ptrRecord"] !== undefined) {
        contents.PtrRecord = __expectString(output["ptrRecord"]);
    }
    if (output["ptrRecordUpdate"] !== undefined) {
        contents.PtrRecordUpdate = deserializeAws_ec2PtrUpdateStatus(output["ptrRecordUpdate"], context);
    }
    return contents;
};
var deserializeAws_ec2AddressList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Address(entry, context);
    });
};
var deserializeAws_ec2AddressSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AddressAttribute(entry, context);
    });
};
var deserializeAws_ec2AdvertiseByoipCidrResult = function (output, context) {
    var contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
var deserializeAws_ec2AllocateAddressResult = function (output, context) {
    var contents = {
        PublicIp: undefined,
        AllocationId: undefined,
        PublicIpv4Pool: undefined,
        NetworkBorderGroup: undefined,
        Domain: undefined,
        CustomerOwnedIp: undefined,
        CustomerOwnedIpv4Pool: undefined,
        CarrierIp: undefined,
    };
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["publicIpv4Pool"] !== undefined) {
        contents.PublicIpv4Pool = __expectString(output["publicIpv4Pool"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output["domain"] !== undefined) {
        contents.Domain = __expectString(output["domain"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
    }
    if (output["customerOwnedIpv4Pool"] !== undefined) {
        contents.CustomerOwnedIpv4Pool = __expectString(output["customerOwnedIpv4Pool"]);
    }
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = __expectString(output["carrierIp"]);
    }
    return contents;
};
var deserializeAws_ec2AllocateHostsResult = function (output, context) {
    var contents = {
        HostIds: undefined,
    };
    if (output.hostIdSet === "") {
        contents.HostIds = [];
    }
    else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
        contents.HostIds = deserializeAws_ec2ResponseHostIdList(__getArrayIfSingleItem(output["hostIdSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2AllocateIpamPoolCidrResult = function (output, context) {
    var contents = {
        IpamPoolAllocation: undefined,
    };
    if (output["ipamPoolAllocation"] !== undefined) {
        contents.IpamPoolAllocation = deserializeAws_ec2IpamPoolAllocation(output["ipamPoolAllocation"], context);
    }
    return contents;
};
var deserializeAws_ec2AllowedPrincipal = function (output, context) {
    var contents = {
        PrincipalType: undefined,
        Principal: undefined,
    };
    if (output["principalType"] !== undefined) {
        contents.PrincipalType = __expectString(output["principalType"]);
    }
    if (output["principal"] !== undefined) {
        contents.Principal = __expectString(output["principal"]);
    }
    return contents;
};
var deserializeAws_ec2AllowedPrincipalSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AllowedPrincipal(entry, context);
    });
};
var deserializeAws_ec2AlternatePathHint = function (output, context) {
    var contents = {
        ComponentId: undefined,
        ComponentArn: undefined,
    };
    if (output["componentId"] !== undefined) {
        contents.ComponentId = __expectString(output["componentId"]);
    }
    if (output["componentArn"] !== undefined) {
        contents.ComponentArn = __expectString(output["componentArn"]);
    }
    return contents;
};
var deserializeAws_ec2AlternatePathHintList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AlternatePathHint(entry, context);
    });
};
var deserializeAws_ec2AnalysisAclRule = function (output, context) {
    var contents = {
        Cidr: undefined,
        Egress: undefined,
        PortRange: undefined,
        Protocol: undefined,
        RuleAction: undefined,
        RuleNumber: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["egress"] !== undefined) {
        contents.Egress = __parseBoolean(output["egress"]);
    }
    if (output["portRange"] !== undefined) {
        contents.PortRange = deserializeAws_ec2PortRange(output["portRange"], context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = __expectString(output["ruleAction"]);
    }
    if (output["ruleNumber"] !== undefined) {
        contents.RuleNumber = __strictParseInt32(output["ruleNumber"]);
    }
    return contents;
};
var deserializeAws_ec2AnalysisComponent = function (output, context) {
    var contents = {
        Id: undefined,
        Arn: undefined,
        Name: undefined,
    };
    if (output["id"] !== undefined) {
        contents.Id = __expectString(output["id"]);
    }
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
var deserializeAws_ec2AnalysisComponentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AnalysisComponent(entry, context);
    });
};
var deserializeAws_ec2AnalysisLoadBalancerListener = function (output, context) {
    var contents = {
        LoadBalancerPort: undefined,
        InstancePort: undefined,
    };
    if (output["loadBalancerPort"] !== undefined) {
        contents.LoadBalancerPort = __strictParseInt32(output["loadBalancerPort"]);
    }
    if (output["instancePort"] !== undefined) {
        contents.InstancePort = __strictParseInt32(output["instancePort"]);
    }
    return contents;
};
var deserializeAws_ec2AnalysisLoadBalancerTarget = function (output, context) {
    var contents = {
        Address: undefined,
        AvailabilityZone: undefined,
        Instance: undefined,
        Port: undefined,
    };
    if (output["address"] !== undefined) {
        contents.Address = __expectString(output["address"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["instance"] !== undefined) {
        contents.Instance = deserializeAws_ec2AnalysisComponent(output["instance"], context);
    }
    if (output["port"] !== undefined) {
        contents.Port = __strictParseInt32(output["port"]);
    }
    return contents;
};
var deserializeAws_ec2AnalysisPacketHeader = function (output, context) {
    var contents = {
        DestinationAddresses: undefined,
        DestinationPortRanges: undefined,
        Protocol: undefined,
        SourceAddresses: undefined,
        SourcePortRanges: undefined,
    };
    if (output.destinationAddressSet === "") {
        contents.DestinationAddresses = [];
    }
    else if (output["destinationAddressSet"] !== undefined && output["destinationAddressSet"]["item"] !== undefined) {
        contents.DestinationAddresses = deserializeAws_ec2IpAddressList(__getArrayIfSingleItem(output["destinationAddressSet"]["item"]), context);
    }
    if (output.destinationPortRangeSet === "") {
        contents.DestinationPortRanges = [];
    }
    else if (output["destinationPortRangeSet"] !== undefined &&
        output["destinationPortRangeSet"]["item"] !== undefined) {
        contents.DestinationPortRanges = deserializeAws_ec2PortRangeList(__getArrayIfSingleItem(output["destinationPortRangeSet"]["item"]), context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output.sourceAddressSet === "") {
        contents.SourceAddresses = [];
    }
    else if (output["sourceAddressSet"] !== undefined && output["sourceAddressSet"]["item"] !== undefined) {
        contents.SourceAddresses = deserializeAws_ec2IpAddressList(__getArrayIfSingleItem(output["sourceAddressSet"]["item"]), context);
    }
    if (output.sourcePortRangeSet === "") {
        contents.SourcePortRanges = [];
    }
    else if (output["sourcePortRangeSet"] !== undefined && output["sourcePortRangeSet"]["item"] !== undefined) {
        contents.SourcePortRanges = deserializeAws_ec2PortRangeList(__getArrayIfSingleItem(output["sourcePortRangeSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2AnalysisRouteTableRoute = function (output, context) {
    var contents = {
        DestinationCidr: undefined,
        DestinationPrefixListId: undefined,
        EgressOnlyInternetGatewayId: undefined,
        GatewayId: undefined,
        InstanceId: undefined,
        NatGatewayId: undefined,
        NetworkInterfaceId: undefined,
        Origin: undefined,
        TransitGatewayId: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = __expectString(output["destinationCidr"]);
    }
    if (output["destinationPrefixListId"] !== undefined) {
        contents.DestinationPrefixListId = __expectString(output["destinationPrefixListId"]);
    }
    if (output["egressOnlyInternetGatewayId"] !== undefined) {
        contents.EgressOnlyInternetGatewayId = __expectString(output["egressOnlyInternetGatewayId"]);
    }
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = __expectString(output["gatewayId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["origin"] !== undefined) {
        contents.Origin = __expectString(output["origin"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
var deserializeAws_ec2AnalysisSecurityGroupRule = function (output, context) {
    var contents = {
        Cidr: undefined,
        Direction: undefined,
        SecurityGroupId: undefined,
        PortRange: undefined,
        PrefixListId: undefined,
        Protocol: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["direction"] !== undefined) {
        contents.Direction = __expectString(output["direction"]);
    }
    if (output["securityGroupId"] !== undefined) {
        contents.SecurityGroupId = __expectString(output["securityGroupId"]);
    }
    if (output["portRange"] !== undefined) {
        contents.PortRange = deserializeAws_ec2PortRange(output["portRange"], context);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    return contents;
};
var deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkResult = function (output, context) {
    var contents = {
        SecurityGroupIds: undefined,
    };
    if (output.securityGroupIds === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIds"] !== undefined && output["securityGroupIds"]["item"] !== undefined) {
        contents.SecurityGroupIds = deserializeAws_ec2ClientVpnSecurityGroupIdSet(__getArrayIfSingleItem(output["securityGroupIds"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ArchitectureTypeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2ArnList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2AssignedPrivateIpAddress = function (output, context) {
    var contents = {
        PrivateIpAddress: undefined,
    };
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    return contents;
};
var deserializeAws_ec2AssignedPrivateIpAddressList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AssignedPrivateIpAddress(entry, context);
    });
};
var deserializeAws_ec2AssignIpv6AddressesResult = function (output, context) {
    var contents = {
        AssignedIpv6Addresses: undefined,
        AssignedIpv6Prefixes: undefined,
        NetworkInterfaceId: undefined,
    };
    if (output.assignedIpv6Addresses === "") {
        contents.AssignedIpv6Addresses = [];
    }
    else if (output["assignedIpv6Addresses"] !== undefined && output["assignedIpv6Addresses"]["item"] !== undefined) {
        contents.AssignedIpv6Addresses = deserializeAws_ec2Ipv6AddressList(__getArrayIfSingleItem(output["assignedIpv6Addresses"]["item"]), context);
    }
    if (output.assignedIpv6PrefixSet === "") {
        contents.AssignedIpv6Prefixes = [];
    }
    else if (output["assignedIpv6PrefixSet"] !== undefined && output["assignedIpv6PrefixSet"]["item"] !== undefined) {
        contents.AssignedIpv6Prefixes = deserializeAws_ec2IpPrefixList(__getArrayIfSingleItem(output["assignedIpv6PrefixSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    return contents;
};
var deserializeAws_ec2AssignPrivateIpAddressesResult = function (output, context) {
    var contents = {
        NetworkInterfaceId: undefined,
        AssignedPrivateIpAddresses: undefined,
        AssignedIpv4Prefixes: undefined,
    };
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output.assignedPrivateIpAddressesSet === "") {
        contents.AssignedPrivateIpAddresses = [];
    }
    else if (output["assignedPrivateIpAddressesSet"] !== undefined &&
        output["assignedPrivateIpAddressesSet"]["item"] !== undefined) {
        contents.AssignedPrivateIpAddresses = deserializeAws_ec2AssignedPrivateIpAddressList(__getArrayIfSingleItem(output["assignedPrivateIpAddressesSet"]["item"]), context);
    }
    if (output.assignedIpv4PrefixSet === "") {
        contents.AssignedIpv4Prefixes = [];
    }
    else if (output["assignedIpv4PrefixSet"] !== undefined && output["assignedIpv4PrefixSet"]["item"] !== undefined) {
        contents.AssignedIpv4Prefixes = deserializeAws_ec2Ipv4PrefixesList(__getArrayIfSingleItem(output["assignedIpv4PrefixSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2AssociateAddressResult = function (output, context) {
    var contents = {
        AssociationId: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    return contents;
};
var deserializeAws_ec2AssociateClientVpnTargetNetworkResult = function (output, context) {
    var contents = {
        AssociationId: undefined,
        Status: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2AssociationStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2AssociatedRole = function (output, context) {
    var contents = {
        AssociatedRoleArn: undefined,
        CertificateS3BucketName: undefined,
        CertificateS3ObjectKey: undefined,
        EncryptionKmsKeyId: undefined,
    };
    if (output["associatedRoleArn"] !== undefined) {
        contents.AssociatedRoleArn = __expectString(output["associatedRoleArn"]);
    }
    if (output["certificateS3BucketName"] !== undefined) {
        contents.CertificateS3BucketName = __expectString(output["certificateS3BucketName"]);
    }
    if (output["certificateS3ObjectKey"] !== undefined) {
        contents.CertificateS3ObjectKey = __expectString(output["certificateS3ObjectKey"]);
    }
    if (output["encryptionKmsKeyId"] !== undefined) {
        contents.EncryptionKmsKeyId = __expectString(output["encryptionKmsKeyId"]);
    }
    return contents;
};
var deserializeAws_ec2AssociatedRolesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AssociatedRole(entry, context);
    });
};
var deserializeAws_ec2AssociatedTargetNetwork = function (output, context) {
    var contents = {
        NetworkId: undefined,
        NetworkType: undefined,
    };
    if (output["networkId"] !== undefined) {
        contents.NetworkId = __expectString(output["networkId"]);
    }
    if (output["networkType"] !== undefined) {
        contents.NetworkType = __expectString(output["networkType"]);
    }
    return contents;
};
var deserializeAws_ec2AssociatedTargetNetworkSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AssociatedTargetNetwork(entry, context);
    });
};
var deserializeAws_ec2AssociateEnclaveCertificateIamRoleResult = function (output, context) {
    var contents = {
        CertificateS3BucketName: undefined,
        CertificateS3ObjectKey: undefined,
        EncryptionKmsKeyId: undefined,
    };
    if (output["certificateS3BucketName"] !== undefined) {
        contents.CertificateS3BucketName = __expectString(output["certificateS3BucketName"]);
    }
    if (output["certificateS3ObjectKey"] !== undefined) {
        contents.CertificateS3ObjectKey = __expectString(output["certificateS3ObjectKey"]);
    }
    if (output["encryptionKmsKeyId"] !== undefined) {
        contents.EncryptionKmsKeyId = __expectString(output["encryptionKmsKeyId"]);
    }
    return contents;
};
var deserializeAws_ec2AssociateIamInstanceProfileResult = function (output, context) {
    var contents = {
        IamInstanceProfileAssociation: undefined,
    };
    if (output["iamInstanceProfileAssociation"] !== undefined) {
        contents.IamInstanceProfileAssociation = deserializeAws_ec2IamInstanceProfileAssociation(output["iamInstanceProfileAssociation"], context);
    }
    return contents;
};
var deserializeAws_ec2AssociateInstanceEventWindowResult = function (output, context) {
    var contents = {
        InstanceEventWindow: undefined,
    };
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = deserializeAws_ec2InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
var deserializeAws_ec2AssociateRouteTableResult = function (output, context) {
    var contents = {
        AssociationId: undefined,
        AssociationState: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["associationState"] !== undefined) {
        contents.AssociationState = deserializeAws_ec2RouteTableAssociationState(output["associationState"], context);
    }
    return contents;
};
var deserializeAws_ec2AssociateSubnetCidrBlockResult = function (output, context) {
    var contents = {
        Ipv6CidrBlockAssociation: undefined,
        SubnetId: undefined,
    };
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = deserializeAws_ec2SubnetIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    return contents;
};
var deserializeAws_ec2AssociateTransitGatewayMulticastDomainResult = function (output, context) {
    var contents = {
        Associations: undefined,
    };
    if (output["associations"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
var deserializeAws_ec2AssociateTransitGatewayRouteTableResult = function (output, context) {
    var contents = {
        Association: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2TransitGatewayAssociation(output["association"], context);
    }
    return contents;
};
var deserializeAws_ec2AssociateTrunkInterfaceResult = function (output, context) {
    var contents = {
        InterfaceAssociation: undefined,
        ClientToken: undefined,
    };
    if (output["interfaceAssociation"] !== undefined) {
        contents.InterfaceAssociation = deserializeAws_ec2TrunkInterfaceAssociation(output["interfaceAssociation"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2AssociateVpcCidrBlockResult = function (output, context) {
    var contents = {
        Ipv6CidrBlockAssociation: undefined,
        CidrBlockAssociation: undefined,
        VpcId: undefined,
    };
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = deserializeAws_ec2VpcIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["cidrBlockAssociation"] !== undefined) {
        contents.CidrBlockAssociation = deserializeAws_ec2VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2AssociationStatus = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2AttachClassicLinkVpcResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2AttachNetworkInterfaceResult = function (output, context) {
    var contents = {
        AttachmentId: undefined,
        NetworkCardIndex: undefined,
    };
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = __expectString(output["attachmentId"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    return contents;
};
var deserializeAws_ec2AttachVpnGatewayResult = function (output, context) {
    var contents = {
        VpcAttachment: undefined,
    };
    if (output["attachment"] !== undefined) {
        contents.VpcAttachment = deserializeAws_ec2VpcAttachment(output["attachment"], context);
    }
    return contents;
};
var deserializeAws_ec2AttributeBooleanValue = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __parseBoolean(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2AttributeValue = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2AuthorizationRule = function (output, context) {
    var contents = {
        ClientVpnEndpointId: undefined,
        Description: undefined,
        GroupId: undefined,
        AccessAll: undefined,
        DestinationCidr: undefined,
        Status: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["accessAll"] !== undefined) {
        contents.AccessAll = __parseBoolean(output["accessAll"]);
    }
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = __expectString(output["destinationCidr"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnAuthorizationRuleStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2AuthorizationRuleSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AuthorizationRule(entry, context);
    });
};
var deserializeAws_ec2AuthorizeClientVpnIngressResult = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnAuthorizationRuleStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2AuthorizeSecurityGroupEgressResult = function (output, context) {
    var contents = {
        Return: undefined,
        SecurityGroupRules: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output.securityGroupRuleSet === "") {
        contents.SecurityGroupRules = [];
    }
    else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
        contents.SecurityGroupRules = deserializeAws_ec2SecurityGroupRuleList(__getArrayIfSingleItem(output["securityGroupRuleSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2AuthorizeSecurityGroupIngressResult = function (output, context) {
    var contents = {
        Return: undefined,
        SecurityGroupRules: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output.securityGroupRuleSet === "") {
        contents.SecurityGroupRules = [];
    }
    else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
        contents.SecurityGroupRules = deserializeAws_ec2SecurityGroupRuleList(__getArrayIfSingleItem(output["securityGroupRuleSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2AvailabilityZone = function (output, context) {
    var contents = {
        State: undefined,
        OptInStatus: undefined,
        Messages: undefined,
        RegionName: undefined,
        ZoneName: undefined,
        ZoneId: undefined,
        GroupName: undefined,
        NetworkBorderGroup: undefined,
        ZoneType: undefined,
        ParentZoneName: undefined,
        ParentZoneId: undefined,
    };
    if (output["zoneState"] !== undefined) {
        contents.State = __expectString(output["zoneState"]);
    }
    if (output["optInStatus"] !== undefined) {
        contents.OptInStatus = __expectString(output["optInStatus"]);
    }
    if (output.messageSet === "") {
        contents.Messages = [];
    }
    else if (output["messageSet"] !== undefined && output["messageSet"]["item"] !== undefined) {
        contents.Messages = deserializeAws_ec2AvailabilityZoneMessageList(__getArrayIfSingleItem(output["messageSet"]["item"]), context);
    }
    if (output["regionName"] !== undefined) {
        contents.RegionName = __expectString(output["regionName"]);
    }
    if (output["zoneName"] !== undefined) {
        contents.ZoneName = __expectString(output["zoneName"]);
    }
    if (output["zoneId"] !== undefined) {
        contents.ZoneId = __expectString(output["zoneId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output["zoneType"] !== undefined) {
        contents.ZoneType = __expectString(output["zoneType"]);
    }
    if (output["parentZoneName"] !== undefined) {
        contents.ParentZoneName = __expectString(output["parentZoneName"]);
    }
    if (output["parentZoneId"] !== undefined) {
        contents.ParentZoneId = __expectString(output["parentZoneId"]);
    }
    return contents;
};
var deserializeAws_ec2AvailabilityZoneList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AvailabilityZone(entry, context);
    });
};
var deserializeAws_ec2AvailabilityZoneMessage = function (output, context) {
    var contents = {
        Message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2AvailabilityZoneMessageList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AvailabilityZoneMessage(entry, context);
    });
};
var deserializeAws_ec2AvailableCapacity = function (output, context) {
    var contents = {
        AvailableInstanceCapacity: undefined,
        AvailableVCpus: undefined,
    };
    if (output.availableInstanceCapacity === "") {
        contents.AvailableInstanceCapacity = [];
    }
    else if (output["availableInstanceCapacity"] !== undefined &&
        output["availableInstanceCapacity"]["item"] !== undefined) {
        contents.AvailableInstanceCapacity = deserializeAws_ec2AvailableInstanceCapacityList(__getArrayIfSingleItem(output["availableInstanceCapacity"]["item"]), context);
    }
    if (output["availableVCpus"] !== undefined) {
        contents.AvailableVCpus = __strictParseInt32(output["availableVCpus"]);
    }
    return contents;
};
var deserializeAws_ec2AvailableInstanceCapacityList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceCapacity(entry, context);
    });
};
var deserializeAws_ec2BaselineEbsBandwidthMbps = function (output, context) {
    var contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
var deserializeAws_ec2BlockDeviceMapping = function (output, context) {
    var contents = {
        DeviceName: undefined,
        VirtualName: undefined,
        Ebs: undefined,
        NoDevice: undefined,
    };
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output["virtualName"] !== undefined) {
        contents.VirtualName = __expectString(output["virtualName"]);
    }
    if (output["ebs"] !== undefined) {
        contents.Ebs = deserializeAws_ec2EbsBlockDevice(output["ebs"], context);
    }
    if (output["noDevice"] !== undefined) {
        contents.NoDevice = __expectString(output["noDevice"]);
    }
    return contents;
};
var deserializeAws_ec2BlockDeviceMappingList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2BlockDeviceMapping(entry, context);
    });
};
var deserializeAws_ec2BootModeTypeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2BundleInstanceResult = function (output, context) {
    var contents = {
        BundleTask: undefined,
    };
    if (output["bundleInstanceTask"] !== undefined) {
        contents.BundleTask = deserializeAws_ec2BundleTask(output["bundleInstanceTask"], context);
    }
    return contents;
};
var deserializeAws_ec2BundleTask = function (output, context) {
    var contents = {
        BundleId: undefined,
        BundleTaskError: undefined,
        InstanceId: undefined,
        Progress: undefined,
        StartTime: undefined,
        State: undefined,
        Storage: undefined,
        UpdateTime: undefined,
    };
    if (output["bundleId"] !== undefined) {
        contents.BundleId = __expectString(output["bundleId"]);
    }
    if (output["error"] !== undefined) {
        contents.BundleTaskError = deserializeAws_ec2BundleTaskError(output["error"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTime(output["startTime"]));
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["storage"] !== undefined) {
        contents.Storage = deserializeAws_ec2Storage(output["storage"], context);
    }
    if (output["updateTime"] !== undefined) {
        contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(output["updateTime"]));
    }
    return contents;
};
var deserializeAws_ec2BundleTaskError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2BundleTaskList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2BundleTask(entry, context);
    });
};
var deserializeAws_ec2ByoipCidr = function (output, context) {
    var contents = {
        Cidr: undefined,
        Description: undefined,
        StatusMessage: undefined,
        State: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2ByoipCidrSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ByoipCidr(entry, context);
    });
};
var deserializeAws_ec2CancelBundleTaskResult = function (output, context) {
    var contents = {
        BundleTask: undefined,
    };
    if (output["bundleInstanceTask"] !== undefined) {
        contents.BundleTask = deserializeAws_ec2BundleTask(output["bundleInstanceTask"], context);
    }
    return contents;
};
var deserializeAws_ec2CancelCapacityReservationFleetError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2CancelCapacityReservationFleetsResult = function (output, context) {
    var contents = {
        SuccessfulFleetCancellations: undefined,
        FailedFleetCancellations: undefined,
    };
    if (output.successfulFleetCancellationSet === "") {
        contents.SuccessfulFleetCancellations = [];
    }
    else if (output["successfulFleetCancellationSet"] !== undefined &&
        output["successfulFleetCancellationSet"]["item"] !== undefined) {
        contents.SuccessfulFleetCancellations = deserializeAws_ec2CapacityReservationFleetCancellationStateSet(__getArrayIfSingleItem(output["successfulFleetCancellationSet"]["item"]), context);
    }
    if (output.failedFleetCancellationSet === "") {
        contents.FailedFleetCancellations = [];
    }
    else if (output["failedFleetCancellationSet"] !== undefined &&
        output["failedFleetCancellationSet"]["item"] !== undefined) {
        contents.FailedFleetCancellations = deserializeAws_ec2FailedCapacityReservationFleetCancellationResultSet(__getArrayIfSingleItem(output["failedFleetCancellationSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CancelCapacityReservationResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2CancelImportTaskResult = function (output, context) {
    var contents = {
        ImportTaskId: undefined,
        PreviousState: undefined,
        State: undefined,
    };
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["previousState"] !== undefined) {
        contents.PreviousState = __expectString(output["previousState"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2CancelledSpotInstanceRequest = function (output, context) {
    var contents = {
        SpotInstanceRequestId: undefined,
        State: undefined,
    };
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2CancelledSpotInstanceRequestList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CancelledSpotInstanceRequest(entry, context);
    });
};
var deserializeAws_ec2CancelReservedInstancesListingResult = function (output, context) {
    var contents = {
        ReservedInstancesListings: undefined,
    };
    if (output.reservedInstancesListingsSet === "") {
        contents.ReservedInstancesListings = [];
    }
    else if (output["reservedInstancesListingsSet"] !== undefined &&
        output["reservedInstancesListingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesListings = deserializeAws_ec2ReservedInstancesListingList(__getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CancelSpotFleetRequestsError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2CancelSpotFleetRequestsErrorItem = function (output, context) {
    var contents = {
        Error: undefined,
        SpotFleetRequestId: undefined,
    };
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2CancelSpotFleetRequestsError(output["error"], context);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    return contents;
};
var deserializeAws_ec2CancelSpotFleetRequestsErrorSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CancelSpotFleetRequestsErrorItem(entry, context);
    });
};
var deserializeAws_ec2CancelSpotFleetRequestsResponse = function (output, context) {
    var contents = {
        SuccessfulFleetRequests: undefined,
        UnsuccessfulFleetRequests: undefined,
    };
    if (output.successfulFleetRequestSet === "") {
        contents.SuccessfulFleetRequests = [];
    }
    else if (output["successfulFleetRequestSet"] !== undefined &&
        output["successfulFleetRequestSet"]["item"] !== undefined) {
        contents.SuccessfulFleetRequests = deserializeAws_ec2CancelSpotFleetRequestsSuccessSet(__getArrayIfSingleItem(output["successfulFleetRequestSet"]["item"]), context);
    }
    if (output.unsuccessfulFleetRequestSet === "") {
        contents.UnsuccessfulFleetRequests = [];
    }
    else if (output["unsuccessfulFleetRequestSet"] !== undefined &&
        output["unsuccessfulFleetRequestSet"]["item"] !== undefined) {
        contents.UnsuccessfulFleetRequests = deserializeAws_ec2CancelSpotFleetRequestsErrorSet(__getArrayIfSingleItem(output["unsuccessfulFleetRequestSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CancelSpotFleetRequestsSuccessItem = function (output, context) {
    var contents = {
        CurrentSpotFleetRequestState: undefined,
        PreviousSpotFleetRequestState: undefined,
        SpotFleetRequestId: undefined,
    };
    if (output["currentSpotFleetRequestState"] !== undefined) {
        contents.CurrentSpotFleetRequestState = __expectString(output["currentSpotFleetRequestState"]);
    }
    if (output["previousSpotFleetRequestState"] !== undefined) {
        contents.PreviousSpotFleetRequestState = __expectString(output["previousSpotFleetRequestState"]);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    return contents;
};
var deserializeAws_ec2CancelSpotFleetRequestsSuccessSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CancelSpotFleetRequestsSuccessItem(entry, context);
    });
};
var deserializeAws_ec2CancelSpotInstanceRequestsResult = function (output, context) {
    var contents = {
        CancelledSpotInstanceRequests: undefined,
    };
    if (output.spotInstanceRequestSet === "") {
        contents.CancelledSpotInstanceRequests = [];
    }
    else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
        contents.CancelledSpotInstanceRequests = deserializeAws_ec2CancelledSpotInstanceRequestList(__getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CapacityReservation = function (output, context) {
    var contents = {
        CapacityReservationId: undefined,
        OwnerId: undefined,
        CapacityReservationArn: undefined,
        AvailabilityZoneId: undefined,
        InstanceType: undefined,
        InstancePlatform: undefined,
        AvailabilityZone: undefined,
        Tenancy: undefined,
        TotalInstanceCount: undefined,
        AvailableInstanceCount: undefined,
        EbsOptimized: undefined,
        EphemeralStorage: undefined,
        State: undefined,
        StartDate: undefined,
        EndDate: undefined,
        EndDateType: undefined,
        InstanceMatchCriteria: undefined,
        CreateDate: undefined,
        Tags: undefined,
        OutpostArn: undefined,
        CapacityReservationFleetId: undefined,
        PlacementGroupArn: undefined,
    };
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["capacityReservationArn"] !== undefined) {
        contents.CapacityReservationArn = __expectString(output["capacityReservationArn"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["instancePlatform"] !== undefined) {
        contents.InstancePlatform = __expectString(output["instancePlatform"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output["totalInstanceCount"] !== undefined) {
        contents.TotalInstanceCount = __strictParseInt32(output["totalInstanceCount"]);
    }
    if (output["availableInstanceCount"] !== undefined) {
        contents.AvailableInstanceCount = __strictParseInt32(output["availableInstanceCount"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["ephemeralStorage"] !== undefined) {
        contents.EphemeralStorage = __parseBoolean(output["ephemeralStorage"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["startDate"] !== undefined) {
        contents.StartDate = __expectNonNull(__parseRfc3339DateTime(output["startDate"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = __expectNonNull(__parseRfc3339DateTime(output["endDate"]));
    }
    if (output["endDateType"] !== undefined) {
        contents.EndDateType = __expectString(output["endDateType"]);
    }
    if (output["instanceMatchCriteria"] !== undefined) {
        contents.InstanceMatchCriteria = __expectString(output["instanceMatchCriteria"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTime(output["createDate"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    if (output["placementGroupArn"] !== undefined) {
        contents.PlacementGroupArn = __expectString(output["placementGroupArn"]);
    }
    return contents;
};
var deserializeAws_ec2CapacityReservationFleet = function (output, context) {
    var contents = {
        CapacityReservationFleetId: undefined,
        CapacityReservationFleetArn: undefined,
        State: undefined,
        TotalTargetCapacity: undefined,
        TotalFulfilledCapacity: undefined,
        Tenancy: undefined,
        EndDate: undefined,
        CreateTime: undefined,
        InstanceMatchCriteria: undefined,
        AllocationStrategy: undefined,
        InstanceTypeSpecifications: undefined,
        Tags: undefined,
    };
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    if (output["capacityReservationFleetArn"] !== undefined) {
        contents.CapacityReservationFleetArn = __expectString(output["capacityReservationFleetArn"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["totalTargetCapacity"] !== undefined) {
        contents.TotalTargetCapacity = __strictParseInt32(output["totalTargetCapacity"]);
    }
    if (output["totalFulfilledCapacity"] !== undefined) {
        contents.TotalFulfilledCapacity = __strictParseFloat(output["totalFulfilledCapacity"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = __expectNonNull(__parseRfc3339DateTime(output["endDate"]));
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["instanceMatchCriteria"] !== undefined) {
        contents.InstanceMatchCriteria = __expectString(output["instanceMatchCriteria"]);
    }
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output.instanceTypeSpecificationSet === "") {
        contents.InstanceTypeSpecifications = [];
    }
    else if (output["instanceTypeSpecificationSet"] !== undefined &&
        output["instanceTypeSpecificationSet"]["item"] !== undefined) {
        contents.InstanceTypeSpecifications = deserializeAws_ec2FleetCapacityReservationSet(__getArrayIfSingleItem(output["instanceTypeSpecificationSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CapacityReservationFleetCancellationState = function (output, context) {
    var contents = {
        CurrentFleetState: undefined,
        PreviousFleetState: undefined,
        CapacityReservationFleetId: undefined,
    };
    if (output["currentFleetState"] !== undefined) {
        contents.CurrentFleetState = __expectString(output["currentFleetState"]);
    }
    if (output["previousFleetState"] !== undefined) {
        contents.PreviousFleetState = __expectString(output["previousFleetState"]);
    }
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    return contents;
};
var deserializeAws_ec2CapacityReservationFleetCancellationStateSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CapacityReservationFleetCancellationState(entry, context);
    });
};
var deserializeAws_ec2CapacityReservationFleetSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CapacityReservationFleet(entry, context);
    });
};
var deserializeAws_ec2CapacityReservationGroup = function (output, context) {
    var contents = {
        GroupArn: undefined,
        OwnerId: undefined,
    };
    if (output["groupArn"] !== undefined) {
        contents.GroupArn = __expectString(output["groupArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
var deserializeAws_ec2CapacityReservationGroupSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CapacityReservationGroup(entry, context);
    });
};
var deserializeAws_ec2CapacityReservationOptions = function (output, context) {
    var contents = {
        UsageStrategy: undefined,
    };
    if (output["usageStrategy"] !== undefined) {
        contents.UsageStrategy = __expectString(output["usageStrategy"]);
    }
    return contents;
};
var deserializeAws_ec2CapacityReservationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CapacityReservation(entry, context);
    });
};
var deserializeAws_ec2CapacityReservationSpecificationResponse = function (output, context) {
    var contents = {
        CapacityReservationPreference: undefined,
        CapacityReservationTarget: undefined,
    };
    if (output["capacityReservationPreference"] !== undefined) {
        contents.CapacityReservationPreference = __expectString(output["capacityReservationPreference"]);
    }
    if (output["capacityReservationTarget"] !== undefined) {
        contents.CapacityReservationTarget = deserializeAws_ec2CapacityReservationTargetResponse(output["capacityReservationTarget"], context);
    }
    return contents;
};
var deserializeAws_ec2CapacityReservationTargetResponse = function (output, context) {
    var contents = {
        CapacityReservationId: undefined,
        CapacityReservationResourceGroupArn: undefined,
    };
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["capacityReservationResourceGroupArn"] !== undefined) {
        contents.CapacityReservationResourceGroupArn = __expectString(output["capacityReservationResourceGroupArn"]);
    }
    return contents;
};
var deserializeAws_ec2CarrierGateway = function (output, context) {
    var contents = {
        CarrierGatewayId: undefined,
        VpcId: undefined,
        State: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output["carrierGatewayId"] !== undefined) {
        contents.CarrierGatewayId = __expectString(output["carrierGatewayId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CarrierGatewaySet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CarrierGateway(entry, context);
    });
};
var deserializeAws_ec2CertificateAuthentication = function (output, context) {
    var contents = {
        ClientRootCertificateChain: undefined,
    };
    if (output["clientRootCertificateChain"] !== undefined) {
        contents.ClientRootCertificateChain = __expectString(output["clientRootCertificateChain"]);
    }
    return contents;
};
var deserializeAws_ec2CidrBlock = function (output, context) {
    var contents = {
        CidrBlock: undefined,
    };
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    return contents;
};
var deserializeAws_ec2CidrBlockSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CidrBlock(entry, context);
    });
};
var deserializeAws_ec2ClassicLinkDnsSupport = function (output, context) {
    var contents = {
        ClassicLinkDnsSupported: undefined,
        VpcId: undefined,
    };
    if (output["classicLinkDnsSupported"] !== undefined) {
        contents.ClassicLinkDnsSupported = __parseBoolean(output["classicLinkDnsSupported"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2ClassicLinkDnsSupportList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClassicLinkDnsSupport(entry, context);
    });
};
var deserializeAws_ec2ClassicLinkInstance = function (output, context) {
    var contents = {
        Groups: undefined,
        InstanceId: undefined,
        Tags: undefined,
        VpcId: undefined,
    };
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2ClassicLinkInstanceList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClassicLinkInstance(entry, context);
    });
};
var deserializeAws_ec2ClassicLoadBalancer = function (output, context) {
    var contents = {
        Name: undefined,
    };
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
var deserializeAws_ec2ClassicLoadBalancers = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClassicLoadBalancer(entry, context);
    });
};
var deserializeAws_ec2ClassicLoadBalancersConfig = function (output, context) {
    var contents = {
        ClassicLoadBalancers: undefined,
    };
    if (output.classicLoadBalancers === "") {
        contents.ClassicLoadBalancers = [];
    }
    else if (output["classicLoadBalancers"] !== undefined && output["classicLoadBalancers"]["item"] !== undefined) {
        contents.ClassicLoadBalancers = deserializeAws_ec2ClassicLoadBalancers(__getArrayIfSingleItem(output["classicLoadBalancers"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ClientCertificateRevocationListStatus = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2ClientConnectResponseOptions = function (output, context) {
    var contents = {
        Enabled: undefined,
        LambdaFunctionArn: undefined,
        Status: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    if (output["lambdaFunctionArn"] !== undefined) {
        contents.LambdaFunctionArn = __expectString(output["lambdaFunctionArn"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnEndpointAttributeStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2ClientLoginBannerResponseOptions = function (output, context) {
    var contents = {
        Enabled: undefined,
        BannerText: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    if (output["bannerText"] !== undefined) {
        contents.BannerText = __expectString(output["bannerText"]);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnAuthentication = function (output, context) {
    var contents = {
        Type: undefined,
        ActiveDirectory: undefined,
        MutualAuthentication: undefined,
        FederatedAuthentication: undefined,
    };
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["activeDirectory"] !== undefined) {
        contents.ActiveDirectory = deserializeAws_ec2DirectoryServiceAuthentication(output["activeDirectory"], context);
    }
    if (output["mutualAuthentication"] !== undefined) {
        contents.MutualAuthentication = deserializeAws_ec2CertificateAuthentication(output["mutualAuthentication"], context);
    }
    if (output["federatedAuthentication"] !== undefined) {
        contents.FederatedAuthentication = deserializeAws_ec2FederatedAuthentication(output["federatedAuthentication"], context);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnAuthenticationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClientVpnAuthentication(entry, context);
    });
};
var deserializeAws_ec2ClientVpnAuthorizationRuleStatus = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnConnection = function (output, context) {
    var contents = {
        ClientVpnEndpointId: undefined,
        Timestamp: undefined,
        ConnectionId: undefined,
        Username: undefined,
        ConnectionEstablishedTime: undefined,
        IngressBytes: undefined,
        EgressBytes: undefined,
        IngressPackets: undefined,
        EgressPackets: undefined,
        ClientIp: undefined,
        CommonName: undefined,
        Status: undefined,
        ConnectionEndTime: undefined,
        PostureComplianceStatuses: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectString(output["timestamp"]);
    }
    if (output["connectionId"] !== undefined) {
        contents.ConnectionId = __expectString(output["connectionId"]);
    }
    if (output["username"] !== undefined) {
        contents.Username = __expectString(output["username"]);
    }
    if (output["connectionEstablishedTime"] !== undefined) {
        contents.ConnectionEstablishedTime = __expectString(output["connectionEstablishedTime"]);
    }
    if (output["ingressBytes"] !== undefined) {
        contents.IngressBytes = __expectString(output["ingressBytes"]);
    }
    if (output["egressBytes"] !== undefined) {
        contents.EgressBytes = __expectString(output["egressBytes"]);
    }
    if (output["ingressPackets"] !== undefined) {
        contents.IngressPackets = __expectString(output["ingressPackets"]);
    }
    if (output["egressPackets"] !== undefined) {
        contents.EgressPackets = __expectString(output["egressPackets"]);
    }
    if (output["clientIp"] !== undefined) {
        contents.ClientIp = __expectString(output["clientIp"]);
    }
    if (output["commonName"] !== undefined) {
        contents.CommonName = __expectString(output["commonName"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnConnectionStatus(output["status"], context);
    }
    if (output["connectionEndTime"] !== undefined) {
        contents.ConnectionEndTime = __expectString(output["connectionEndTime"]);
    }
    if (output.postureComplianceStatusSet === "") {
        contents.PostureComplianceStatuses = [];
    }
    else if (output["postureComplianceStatusSet"] !== undefined &&
        output["postureComplianceStatusSet"]["item"] !== undefined) {
        contents.PostureComplianceStatuses = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["postureComplianceStatusSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnConnectionSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClientVpnConnection(entry, context);
    });
};
var deserializeAws_ec2ClientVpnConnectionStatus = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnEndpoint = function (output, context) {
    var contents = {
        ClientVpnEndpointId: undefined,
        Description: undefined,
        Status: undefined,
        CreationTime: undefined,
        DeletionTime: undefined,
        DnsName: undefined,
        ClientCidrBlock: undefined,
        DnsServers: undefined,
        SplitTunnel: undefined,
        VpnProtocol: undefined,
        TransportProtocol: undefined,
        VpnPort: undefined,
        AssociatedTargetNetworks: undefined,
        ServerCertificateArn: undefined,
        AuthenticationOptions: undefined,
        ConnectionLogOptions: undefined,
        Tags: undefined,
        SecurityGroupIds: undefined,
        VpcId: undefined,
        SelfServicePortalUrl: undefined,
        ClientConnectOptions: undefined,
        SessionTimeoutHours: undefined,
        ClientLoginBannerOptions: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnEndpointStatus(output["status"], context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectString(output["creationTime"]);
    }
    if (output["deletionTime"] !== undefined) {
        contents.DeletionTime = __expectString(output["deletionTime"]);
    }
    if (output["dnsName"] !== undefined) {
        contents.DnsName = __expectString(output["dnsName"]);
    }
    if (output["clientCidrBlock"] !== undefined) {
        contents.ClientCidrBlock = __expectString(output["clientCidrBlock"]);
    }
    if (output.dnsServer === "") {
        contents.DnsServers = [];
    }
    else if (output["dnsServer"] !== undefined && output["dnsServer"]["item"] !== undefined) {
        contents.DnsServers = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["dnsServer"]["item"]), context);
    }
    if (output["splitTunnel"] !== undefined) {
        contents.SplitTunnel = __parseBoolean(output["splitTunnel"]);
    }
    if (output["vpnProtocol"] !== undefined) {
        contents.VpnProtocol = __expectString(output["vpnProtocol"]);
    }
    if (output["transportProtocol"] !== undefined) {
        contents.TransportProtocol = __expectString(output["transportProtocol"]);
    }
    if (output["vpnPort"] !== undefined) {
        contents.VpnPort = __strictParseInt32(output["vpnPort"]);
    }
    if (output.associatedTargetNetwork === "") {
        contents.AssociatedTargetNetworks = [];
    }
    else if (output["associatedTargetNetwork"] !== undefined &&
        output["associatedTargetNetwork"]["item"] !== undefined) {
        contents.AssociatedTargetNetworks = deserializeAws_ec2AssociatedTargetNetworkSet(__getArrayIfSingleItem(output["associatedTargetNetwork"]["item"]), context);
    }
    if (output["serverCertificateArn"] !== undefined) {
        contents.ServerCertificateArn = __expectString(output["serverCertificateArn"]);
    }
    if (output.authenticationOptions === "") {
        contents.AuthenticationOptions = [];
    }
    else if (output["authenticationOptions"] !== undefined && output["authenticationOptions"]["item"] !== undefined) {
        contents.AuthenticationOptions = deserializeAws_ec2ClientVpnAuthenticationList(__getArrayIfSingleItem(output["authenticationOptions"]["item"]), context);
    }
    if (output["connectionLogOptions"] !== undefined) {
        contents.ConnectionLogOptions = deserializeAws_ec2ConnectionLogResponseOptions(output["connectionLogOptions"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.securityGroupIdSet === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
        contents.SecurityGroupIds = deserializeAws_ec2ClientVpnSecurityGroupIdSet(__getArrayIfSingleItem(output["securityGroupIdSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["selfServicePortalUrl"] !== undefined) {
        contents.SelfServicePortalUrl = __expectString(output["selfServicePortalUrl"]);
    }
    if (output["clientConnectOptions"] !== undefined) {
        contents.ClientConnectOptions = deserializeAws_ec2ClientConnectResponseOptions(output["clientConnectOptions"], context);
    }
    if (output["sessionTimeoutHours"] !== undefined) {
        contents.SessionTimeoutHours = __strictParseInt32(output["sessionTimeoutHours"]);
    }
    if (output["clientLoginBannerOptions"] !== undefined) {
        contents.ClientLoginBannerOptions = deserializeAws_ec2ClientLoginBannerResponseOptions(output["clientLoginBannerOptions"], context);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnEndpointAttributeStatus = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnEndpointStatus = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnRoute = function (output, context) {
    var contents = {
        ClientVpnEndpointId: undefined,
        DestinationCidr: undefined,
        TargetSubnet: undefined,
        Type: undefined,
        Origin: undefined,
        Status: undefined,
        Description: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = __expectString(output["destinationCidr"]);
    }
    if (output["targetSubnet"] !== undefined) {
        contents.TargetSubnet = __expectString(output["targetSubnet"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["origin"] !== undefined) {
        contents.Origin = __expectString(output["origin"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnRouteStatus(output["status"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnRouteSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClientVpnRoute(entry, context);
    });
};
var deserializeAws_ec2ClientVpnRouteStatus = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2ClientVpnSecurityGroupIdSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2CoipAddressUsage = function (output, context) {
    var contents = {
        AllocationId: undefined,
        AwsAccountId: undefined,
        AwsService: undefined,
        CoIp: undefined,
    };
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["awsAccountId"] !== undefined) {
        contents.AwsAccountId = __expectString(output["awsAccountId"]);
    }
    if (output["awsService"] !== undefined) {
        contents.AwsService = __expectString(output["awsService"]);
    }
    if (output["coIp"] !== undefined) {
        contents.CoIp = __expectString(output["coIp"]);
    }
    return contents;
};
var deserializeAws_ec2CoipAddressUsageSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CoipAddressUsage(entry, context);
    });
};
var deserializeAws_ec2CoipPool = function (output, context) {
    var contents = {
        PoolId: undefined,
        PoolCidrs: undefined,
        LocalGatewayRouteTableId: undefined,
        Tags: undefined,
        PoolArn: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output.poolCidrSet === "") {
        contents.PoolCidrs = [];
    }
    else if (output["poolCidrSet"] !== undefined && output["poolCidrSet"]["item"] !== undefined) {
        contents.PoolCidrs = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["poolCidrSet"]["item"]), context);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["poolArn"] !== undefined) {
        contents.PoolArn = __expectString(output["poolArn"]);
    }
    return contents;
};
var deserializeAws_ec2CoipPoolSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CoipPool(entry, context);
    });
};
var deserializeAws_ec2ConfirmProductInstanceResult = function (output, context) {
    var contents = {
        OwnerId: undefined,
        Return: undefined,
    };
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ConnectionLogResponseOptions = function (output, context) {
    var contents = {
        Enabled: undefined,
        CloudwatchLogGroup: undefined,
        CloudwatchLogStream: undefined,
    };
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    if (output["CloudwatchLogGroup"] !== undefined) {
        contents.CloudwatchLogGroup = __expectString(output["CloudwatchLogGroup"]);
    }
    if (output["CloudwatchLogStream"] !== undefined) {
        contents.CloudwatchLogStream = __expectString(output["CloudwatchLogStream"]);
    }
    return contents;
};
var deserializeAws_ec2ConnectionNotification = function (output, context) {
    var contents = {
        ConnectionNotificationId: undefined,
        ServiceId: undefined,
        VpcEndpointId: undefined,
        ConnectionNotificationType: undefined,
        ConnectionNotificationArn: undefined,
        ConnectionEvents: undefined,
        ConnectionNotificationState: undefined,
    };
    if (output["connectionNotificationId"] !== undefined) {
        contents.ConnectionNotificationId = __expectString(output["connectionNotificationId"]);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    if (output["vpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = __expectString(output["vpcEndpointId"]);
    }
    if (output["connectionNotificationType"] !== undefined) {
        contents.ConnectionNotificationType = __expectString(output["connectionNotificationType"]);
    }
    if (output["connectionNotificationArn"] !== undefined) {
        contents.ConnectionNotificationArn = __expectString(output["connectionNotificationArn"]);
    }
    if (output.connectionEvents === "") {
        contents.ConnectionEvents = [];
    }
    else if (output["connectionEvents"] !== undefined && output["connectionEvents"]["item"] !== undefined) {
        contents.ConnectionEvents = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["connectionEvents"]["item"]), context);
    }
    if (output["connectionNotificationState"] !== undefined) {
        contents.ConnectionNotificationState = __expectString(output["connectionNotificationState"]);
    }
    return contents;
};
var deserializeAws_ec2ConnectionNotificationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ConnectionNotification(entry, context);
    });
};
var deserializeAws_ec2ConversionTask = function (output, context) {
    var contents = {
        ConversionTaskId: undefined,
        ExpirationTime: undefined,
        ImportInstance: undefined,
        ImportVolume: undefined,
        State: undefined,
        StatusMessage: undefined,
        Tags: undefined,
    };
    if (output["conversionTaskId"] !== undefined) {
        contents.ConversionTaskId = __expectString(output["conversionTaskId"]);
    }
    if (output["expirationTime"] !== undefined) {
        contents.ExpirationTime = __expectString(output["expirationTime"]);
    }
    if (output["importInstance"] !== undefined) {
        contents.ImportInstance = deserializeAws_ec2ImportInstanceTaskDetails(output["importInstance"], context);
    }
    if (output["importVolume"] !== undefined) {
        contents.ImportVolume = deserializeAws_ec2ImportVolumeTaskDetails(output["importVolume"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CopyFpgaImageResult = function (output, context) {
    var contents = {
        FpgaImageId: undefined,
    };
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = __expectString(output["fpgaImageId"]);
    }
    return contents;
};
var deserializeAws_ec2CopyImageResult = function (output, context) {
    var contents = {
        ImageId: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    return contents;
};
var deserializeAws_ec2CopySnapshotResult = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        Tags: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CoreCountList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __strictParseInt32(entry);
    });
};
var deserializeAws_ec2CpuManufacturerSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2CpuOptions = function (output, context) {
    var contents = {
        CoreCount: undefined,
        ThreadsPerCore: undefined,
    };
    if (output["coreCount"] !== undefined) {
        contents.CoreCount = __strictParseInt32(output["coreCount"]);
    }
    if (output["threadsPerCore"] !== undefined) {
        contents.ThreadsPerCore = __strictParseInt32(output["threadsPerCore"]);
    }
    return contents;
};
var deserializeAws_ec2CreateCapacityReservationFleetResult = function (output, context) {
    var contents = {
        CapacityReservationFleetId: undefined,
        State: undefined,
        TotalTargetCapacity: undefined,
        TotalFulfilledCapacity: undefined,
        InstanceMatchCriteria: undefined,
        AllocationStrategy: undefined,
        CreateTime: undefined,
        EndDate: undefined,
        Tenancy: undefined,
        FleetCapacityReservations: undefined,
        Tags: undefined,
    };
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["totalTargetCapacity"] !== undefined) {
        contents.TotalTargetCapacity = __strictParseInt32(output["totalTargetCapacity"]);
    }
    if (output["totalFulfilledCapacity"] !== undefined) {
        contents.TotalFulfilledCapacity = __strictParseFloat(output["totalFulfilledCapacity"]);
    }
    if (output["instanceMatchCriteria"] !== undefined) {
        contents.InstanceMatchCriteria = __expectString(output["instanceMatchCriteria"]);
    }
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = __expectNonNull(__parseRfc3339DateTime(output["endDate"]));
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output.fleetCapacityReservationSet === "") {
        contents.FleetCapacityReservations = [];
    }
    else if (output["fleetCapacityReservationSet"] !== undefined &&
        output["fleetCapacityReservationSet"]["item"] !== undefined) {
        contents.FleetCapacityReservations = deserializeAws_ec2FleetCapacityReservationSet(__getArrayIfSingleItem(output["fleetCapacityReservationSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CreateCapacityReservationResult = function (output, context) {
    var contents = {
        CapacityReservation: undefined,
    };
    if (output["capacityReservation"] !== undefined) {
        contents.CapacityReservation = deserializeAws_ec2CapacityReservation(output["capacityReservation"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateCarrierGatewayResult = function (output, context) {
    var contents = {
        CarrierGateway: undefined,
    };
    if (output["carrierGateway"] !== undefined) {
        contents.CarrierGateway = deserializeAws_ec2CarrierGateway(output["carrierGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateClientVpnEndpointResult = function (output, context) {
    var contents = {
        ClientVpnEndpointId: undefined,
        Status: undefined,
        DnsName: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnEndpointStatus(output["status"], context);
    }
    if (output["dnsName"] !== undefined) {
        contents.DnsName = __expectString(output["dnsName"]);
    }
    return contents;
};
var deserializeAws_ec2CreateClientVpnRouteResult = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnRouteStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateCustomerGatewayResult = function (output, context) {
    var contents = {
        CustomerGateway: undefined,
    };
    if (output["customerGateway"] !== undefined) {
        contents.CustomerGateway = deserializeAws_ec2CustomerGateway(output["customerGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateDefaultSubnetResult = function (output, context) {
    var contents = {
        Subnet: undefined,
    };
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2Subnet(output["subnet"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateDefaultVpcResult = function (output, context) {
    var contents = {
        Vpc: undefined,
    };
    if (output["vpc"] !== undefined) {
        contents.Vpc = deserializeAws_ec2Vpc(output["vpc"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateDhcpOptionsResult = function (output, context) {
    var contents = {
        DhcpOptions: undefined,
    };
    if (output["dhcpOptions"] !== undefined) {
        contents.DhcpOptions = deserializeAws_ec2DhcpOptions(output["dhcpOptions"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateEgressOnlyInternetGatewayResult = function (output, context) {
    var contents = {
        ClientToken: undefined,
        EgressOnlyInternetGateway: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["egressOnlyInternetGateway"] !== undefined) {
        contents.EgressOnlyInternetGateway = deserializeAws_ec2EgressOnlyInternetGateway(output["egressOnlyInternetGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateFleetError = function (output, context) {
    var contents = {
        LaunchTemplateAndOverrides: undefined,
        Lifecycle: undefined,
        ErrorCode: undefined,
        ErrorMessage: undefined,
    };
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = __expectString(output["lifecycle"]);
    }
    if (output["errorCode"] !== undefined) {
        contents.ErrorCode = __expectString(output["errorCode"]);
    }
    if (output["errorMessage"] !== undefined) {
        contents.ErrorMessage = __expectString(output["errorMessage"]);
    }
    return contents;
};
var deserializeAws_ec2CreateFleetErrorsSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CreateFleetError(entry, context);
    });
};
var deserializeAws_ec2CreateFleetInstance = function (output, context) {
    var contents = {
        LaunchTemplateAndOverrides: undefined,
        Lifecycle: undefined,
        InstanceIds: undefined,
        InstanceType: undefined,
        Platform: undefined,
    };
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = __expectString(output["lifecycle"]);
    }
    if (output.instanceIds === "") {
        contents.InstanceIds = [];
    }
    else if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
        contents.InstanceIds = deserializeAws_ec2InstanceIdsSet(__getArrayIfSingleItem(output["instanceIds"]["item"]), context);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    return contents;
};
var deserializeAws_ec2CreateFleetInstancesSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CreateFleetInstance(entry, context);
    });
};
var deserializeAws_ec2CreateFleetResult = function (output, context) {
    var contents = {
        FleetId: undefined,
        Errors: undefined,
        Instances: undefined,
    };
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    if (output.errorSet === "") {
        contents.Errors = [];
    }
    else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
        contents.Errors = deserializeAws_ec2CreateFleetErrorsSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
    }
    if (output.fleetInstanceSet === "") {
        contents.Instances = [];
    }
    else if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2CreateFleetInstancesSet(__getArrayIfSingleItem(output["fleetInstanceSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CreateFlowLogsResult = function (output, context) {
    var contents = {
        ClientToken: undefined,
        FlowLogIds: undefined,
        Unsuccessful: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output.flowLogIdSet === "") {
        contents.FlowLogIds = [];
    }
    else if (output["flowLogIdSet"] !== undefined && output["flowLogIdSet"]["item"] !== undefined) {
        contents.FlowLogIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["flowLogIdSet"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CreateFpgaImageResult = function (output, context) {
    var contents = {
        FpgaImageId: undefined,
        FpgaImageGlobalId: undefined,
    };
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = __expectString(output["fpgaImageId"]);
    }
    if (output["fpgaImageGlobalId"] !== undefined) {
        contents.FpgaImageGlobalId = __expectString(output["fpgaImageGlobalId"]);
    }
    return contents;
};
var deserializeAws_ec2CreateImageResult = function (output, context) {
    var contents = {
        ImageId: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    return contents;
};
var deserializeAws_ec2CreateInstanceEventWindowResult = function (output, context) {
    var contents = {
        InstanceEventWindow: undefined,
    };
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = deserializeAws_ec2InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateInstanceExportTaskResult = function (output, context) {
    var contents = {
        ExportTask: undefined,
    };
    if (output["exportTask"] !== undefined) {
        contents.ExportTask = deserializeAws_ec2ExportTask(output["exportTask"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateInternetGatewayResult = function (output, context) {
    var contents = {
        InternetGateway: undefined,
    };
    if (output["internetGateway"] !== undefined) {
        contents.InternetGateway = deserializeAws_ec2InternetGateway(output["internetGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateIpamPoolResult = function (output, context) {
    var contents = {
        IpamPool: undefined,
    };
    if (output["ipamPool"] !== undefined) {
        contents.IpamPool = deserializeAws_ec2IpamPool(output["ipamPool"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateIpamResult = function (output, context) {
    var contents = {
        Ipam: undefined,
    };
    if (output["ipam"] !== undefined) {
        contents.Ipam = deserializeAws_ec2Ipam(output["ipam"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateIpamScopeResult = function (output, context) {
    var contents = {
        IpamScope: undefined,
    };
    if (output["ipamScope"] !== undefined) {
        contents.IpamScope = deserializeAws_ec2IpamScope(output["ipamScope"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateLaunchTemplateResult = function (output, context) {
    var contents = {
        LaunchTemplate: undefined,
        Warning: undefined,
    };
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2LaunchTemplate(output["launchTemplate"], context);
    }
    if (output["warning"] !== undefined) {
        contents.Warning = deserializeAws_ec2ValidationWarning(output["warning"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateLaunchTemplateVersionResult = function (output, context) {
    var contents = {
        LaunchTemplateVersion: undefined,
        Warning: undefined,
    };
    if (output["launchTemplateVersion"] !== undefined) {
        contents.LaunchTemplateVersion = deserializeAws_ec2LaunchTemplateVersion(output["launchTemplateVersion"], context);
    }
    if (output["warning"] !== undefined) {
        contents.Warning = deserializeAws_ec2ValidationWarning(output["warning"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateLocalGatewayRouteResult = function (output, context) {
    var contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2LocalGatewayRoute(output["route"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationResult = function (output, context) {
    var contents = {
        LocalGatewayRouteTableVpcAssociation: undefined,
    };
    if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociation = deserializeAws_ec2LocalGatewayRouteTableVpcAssociation(output["localGatewayRouteTableVpcAssociation"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateManagedPrefixListResult = function (output, context) {
    var contents = {
        PrefixList: undefined,
    };
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateNatGatewayResult = function (output, context) {
    var contents = {
        ClientToken: undefined,
        NatGateway: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["natGateway"] !== undefined) {
        contents.NatGateway = deserializeAws_ec2NatGateway(output["natGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateNetworkAclResult = function (output, context) {
    var contents = {
        NetworkAcl: undefined,
    };
    if (output["networkAcl"] !== undefined) {
        contents.NetworkAcl = deserializeAws_ec2NetworkAcl(output["networkAcl"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateNetworkInsightsAccessScopeResult = function (output, context) {
    var contents = {
        NetworkInsightsAccessScope: undefined,
        NetworkInsightsAccessScopeContent: undefined,
    };
    if (output["networkInsightsAccessScope"] !== undefined) {
        contents.NetworkInsightsAccessScope = deserializeAws_ec2NetworkInsightsAccessScope(output["networkInsightsAccessScope"], context);
    }
    if (output["networkInsightsAccessScopeContent"] !== undefined) {
        contents.NetworkInsightsAccessScopeContent = deserializeAws_ec2NetworkInsightsAccessScopeContent(output["networkInsightsAccessScopeContent"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateNetworkInsightsPathResult = function (output, context) {
    var contents = {
        NetworkInsightsPath: undefined,
    };
    if (output["networkInsightsPath"] !== undefined) {
        contents.NetworkInsightsPath = deserializeAws_ec2NetworkInsightsPath(output["networkInsightsPath"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateNetworkInterfacePermissionResult = function (output, context) {
    var contents = {
        InterfacePermission: undefined,
    };
    if (output["interfacePermission"] !== undefined) {
        contents.InterfacePermission = deserializeAws_ec2NetworkInterfacePermission(output["interfacePermission"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateNetworkInterfaceResult = function (output, context) {
    var contents = {
        NetworkInterface: undefined,
        ClientToken: undefined,
    };
    if (output["networkInterface"] !== undefined) {
        contents.NetworkInterface = deserializeAws_ec2NetworkInterface(output["networkInterface"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2CreatePlacementGroupResult = function (output, context) {
    var contents = {
        PlacementGroup: undefined,
    };
    if (output["placementGroup"] !== undefined) {
        contents.PlacementGroup = deserializeAws_ec2PlacementGroup(output["placementGroup"], context);
    }
    return contents;
};
var deserializeAws_ec2CreatePublicIpv4PoolResult = function (output, context) {
    var contents = {
        PoolId: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    return contents;
};
var deserializeAws_ec2CreateReplaceRootVolumeTaskResult = function (output, context) {
    var contents = {
        ReplaceRootVolumeTask: undefined,
    };
    if (output["replaceRootVolumeTask"] !== undefined) {
        contents.ReplaceRootVolumeTask = deserializeAws_ec2ReplaceRootVolumeTask(output["replaceRootVolumeTask"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateReservedInstancesListingResult = function (output, context) {
    var contents = {
        ReservedInstancesListings: undefined,
    };
    if (output.reservedInstancesListingsSet === "") {
        contents.ReservedInstancesListings = [];
    }
    else if (output["reservedInstancesListingsSet"] !== undefined &&
        output["reservedInstancesListingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesListings = deserializeAws_ec2ReservedInstancesListingList(__getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CreateRestoreImageTaskResult = function (output, context) {
    var contents = {
        ImageId: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    return contents;
};
var deserializeAws_ec2CreateRouteResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2CreateRouteTableResult = function (output, context) {
    var contents = {
        RouteTable: undefined,
    };
    if (output["routeTable"] !== undefined) {
        contents.RouteTable = deserializeAws_ec2RouteTable(output["routeTable"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateSecurityGroupResult = function (output, context) {
    var contents = {
        GroupId: undefined,
        Tags: undefined,
    };
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CreateSnapshotsResult = function (output, context) {
    var contents = {
        Snapshots: undefined,
    };
    if (output.snapshotSet === "") {
        contents.Snapshots = [];
    }
    else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
        contents.Snapshots = deserializeAws_ec2SnapshotSet(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CreateSpotDatafeedSubscriptionResult = function (output, context) {
    var contents = {
        SpotDatafeedSubscription: undefined,
    };
    if (output["spotDatafeedSubscription"] !== undefined) {
        contents.SpotDatafeedSubscription = deserializeAws_ec2SpotDatafeedSubscription(output["spotDatafeedSubscription"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateStoreImageTaskResult = function (output, context) {
    var contents = {
        ObjectKey: undefined,
    };
    if (output["objectKey"] !== undefined) {
        contents.ObjectKey = __expectString(output["objectKey"]);
    }
    return contents;
};
var deserializeAws_ec2CreateSubnetCidrReservationResult = function (output, context) {
    var contents = {
        SubnetCidrReservation: undefined,
    };
    if (output["subnetCidrReservation"] !== undefined) {
        contents.SubnetCidrReservation = deserializeAws_ec2SubnetCidrReservation(output["subnetCidrReservation"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateSubnetResult = function (output, context) {
    var contents = {
        Subnet: undefined,
    };
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2Subnet(output["subnet"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateTrafficMirrorFilterResult = function (output, context) {
    var contents = {
        TrafficMirrorFilter: undefined,
        ClientToken: undefined,
    };
    if (output["trafficMirrorFilter"] !== undefined) {
        contents.TrafficMirrorFilter = deserializeAws_ec2TrafficMirrorFilter(output["trafficMirrorFilter"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2CreateTrafficMirrorFilterRuleResult = function (output, context) {
    var contents = {
        TrafficMirrorFilterRule: undefined,
        ClientToken: undefined,
    };
    if (output["trafficMirrorFilterRule"] !== undefined) {
        contents.TrafficMirrorFilterRule = deserializeAws_ec2TrafficMirrorFilterRule(output["trafficMirrorFilterRule"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2CreateTrafficMirrorSessionResult = function (output, context) {
    var contents = {
        TrafficMirrorSession: undefined,
        ClientToken: undefined,
    };
    if (output["trafficMirrorSession"] !== undefined) {
        contents.TrafficMirrorSession = deserializeAws_ec2TrafficMirrorSession(output["trafficMirrorSession"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2CreateTrafficMirrorTargetResult = function (output, context) {
    var contents = {
        TrafficMirrorTarget: undefined,
        ClientToken: undefined,
    };
    if (output["trafficMirrorTarget"] !== undefined) {
        contents.TrafficMirrorTarget = deserializeAws_ec2TrafficMirrorTarget(output["trafficMirrorTarget"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2CreateTransitGatewayConnectPeerResult = function (output, context) {
    var contents = {
        TransitGatewayConnectPeer: undefined,
    };
    if (output["transitGatewayConnectPeer"] !== undefined) {
        contents.TransitGatewayConnectPeer = deserializeAws_ec2TransitGatewayConnectPeer(output["transitGatewayConnectPeer"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateTransitGatewayConnectResult = function (output, context) {
    var contents = {
        TransitGatewayConnect: undefined,
    };
    if (output["transitGatewayConnect"] !== undefined) {
        contents.TransitGatewayConnect = deserializeAws_ec2TransitGatewayConnect(output["transitGatewayConnect"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateTransitGatewayMulticastDomainResult = function (output, context) {
    var contents = {
        TransitGatewayMulticastDomain: undefined,
    };
    if (output["transitGatewayMulticastDomain"] !== undefined) {
        contents.TransitGatewayMulticastDomain = deserializeAws_ec2TransitGatewayMulticastDomain(output["transitGatewayMulticastDomain"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateTransitGatewayPeeringAttachmentResult = function (output, context) {
    var contents = {
        TransitGatewayPeeringAttachment: undefined,
    };
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateTransitGatewayPrefixListReferenceResult = function (output, context) {
    var contents = {
        TransitGatewayPrefixListReference: undefined,
    };
    if (output["transitGatewayPrefixListReference"] !== undefined) {
        contents.TransitGatewayPrefixListReference = deserializeAws_ec2TransitGatewayPrefixListReference(output["transitGatewayPrefixListReference"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateTransitGatewayResult = function (output, context) {
    var contents = {
        TransitGateway: undefined,
    };
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2TransitGateway(output["transitGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateTransitGatewayRouteResult = function (output, context) {
    var contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2TransitGatewayRoute(output["route"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateTransitGatewayRouteTableResult = function (output, context) {
    var contents = {
        TransitGatewayRouteTable: undefined,
    };
    if (output["transitGatewayRouteTable"] !== undefined) {
        contents.TransitGatewayRouteTable = deserializeAws_ec2TransitGatewayRouteTable(output["transitGatewayRouteTable"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateTransitGatewayVpcAttachmentResult = function (output, context) {
    var contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateVolumePermission = function (output, context) {
    var contents = {
        Group: undefined,
        UserId: undefined,
    };
    if (output["group"] !== undefined) {
        contents.Group = __expectString(output["group"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    return contents;
};
var deserializeAws_ec2CreateVolumePermissionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CreateVolumePermission(entry, context);
    });
};
var deserializeAws_ec2CreateVpcEndpointConnectionNotificationResult = function (output, context) {
    var contents = {
        ConnectionNotification: undefined,
        ClientToken: undefined,
    };
    if (output["connectionNotification"] !== undefined) {
        contents.ConnectionNotification = deserializeAws_ec2ConnectionNotification(output["connectionNotification"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2CreateVpcEndpointResult = function (output, context) {
    var contents = {
        VpcEndpoint: undefined,
        ClientToken: undefined,
    };
    if (output["vpcEndpoint"] !== undefined) {
        contents.VpcEndpoint = deserializeAws_ec2VpcEndpoint(output["vpcEndpoint"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2CreateVpcEndpointServiceConfigurationResult = function (output, context) {
    var contents = {
        ServiceConfiguration: undefined,
        ClientToken: undefined,
    };
    if (output["serviceConfiguration"] !== undefined) {
        contents.ServiceConfiguration = deserializeAws_ec2ServiceConfiguration(output["serviceConfiguration"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2CreateVpcPeeringConnectionResult = function (output, context) {
    var contents = {
        VpcPeeringConnection: undefined,
    };
    if (output["vpcPeeringConnection"] !== undefined) {
        contents.VpcPeeringConnection = deserializeAws_ec2VpcPeeringConnection(output["vpcPeeringConnection"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateVpcResult = function (output, context) {
    var contents = {
        Vpc: undefined,
    };
    if (output["vpc"] !== undefined) {
        contents.Vpc = deserializeAws_ec2Vpc(output["vpc"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateVpnConnectionResult = function (output, context) {
    var contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
var deserializeAws_ec2CreateVpnGatewayResult = function (output, context) {
    var contents = {
        VpnGateway: undefined,
    };
    if (output["vpnGateway"] !== undefined) {
        contents.VpnGateway = deserializeAws_ec2VpnGateway(output["vpnGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2CreditSpecification = function (output, context) {
    var contents = {
        CpuCredits: undefined,
    };
    if (output["cpuCredits"] !== undefined) {
        contents.CpuCredits = __expectString(output["cpuCredits"]);
    }
    return contents;
};
var deserializeAws_ec2CustomerGateway = function (output, context) {
    var contents = {
        BgpAsn: undefined,
        CustomerGatewayId: undefined,
        IpAddress: undefined,
        CertificateArn: undefined,
        State: undefined,
        Type: undefined,
        DeviceName: undefined,
        Tags: undefined,
    };
    if (output["bgpAsn"] !== undefined) {
        contents.BgpAsn = __expectString(output["bgpAsn"]);
    }
    if (output["customerGatewayId"] !== undefined) {
        contents.CustomerGatewayId = __expectString(output["customerGatewayId"]);
    }
    if (output["ipAddress"] !== undefined) {
        contents.IpAddress = __expectString(output["ipAddress"]);
    }
    if (output["certificateArn"] !== undefined) {
        contents.CertificateArn = __expectString(output["certificateArn"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2CustomerGatewayList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CustomerGateway(entry, context);
    });
};
var deserializeAws_ec2DedicatedHostIdList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2DeleteCarrierGatewayResult = function (output, context) {
    var contents = {
        CarrierGateway: undefined,
    };
    if (output["carrierGateway"] !== undefined) {
        contents.CarrierGateway = deserializeAws_ec2CarrierGateway(output["carrierGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteClientVpnEndpointResult = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnEndpointStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteClientVpnRouteResult = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnRouteStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteEgressOnlyInternetGatewayResult = function (output, context) {
    var contents = {
        ReturnCode: undefined,
    };
    if (output["returnCode"] !== undefined) {
        contents.ReturnCode = __parseBoolean(output["returnCode"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteFleetError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteFleetErrorItem = function (output, context) {
    var contents = {
        Error: undefined,
        FleetId: undefined,
    };
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2DeleteFleetError(output["error"], context);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteFleetErrorSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DeleteFleetErrorItem(entry, context);
    });
};
var deserializeAws_ec2DeleteFleetsResult = function (output, context) {
    var contents = {
        SuccessfulFleetDeletions: undefined,
        UnsuccessfulFleetDeletions: undefined,
    };
    if (output.successfulFleetDeletionSet === "") {
        contents.SuccessfulFleetDeletions = [];
    }
    else if (output["successfulFleetDeletionSet"] !== undefined &&
        output["successfulFleetDeletionSet"]["item"] !== undefined) {
        contents.SuccessfulFleetDeletions = deserializeAws_ec2DeleteFleetSuccessSet(__getArrayIfSingleItem(output["successfulFleetDeletionSet"]["item"]), context);
    }
    if (output.unsuccessfulFleetDeletionSet === "") {
        contents.UnsuccessfulFleetDeletions = [];
    }
    else if (output["unsuccessfulFleetDeletionSet"] !== undefined &&
        output["unsuccessfulFleetDeletionSet"]["item"] !== undefined) {
        contents.UnsuccessfulFleetDeletions = deserializeAws_ec2DeleteFleetErrorSet(__getArrayIfSingleItem(output["unsuccessfulFleetDeletionSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DeleteFleetSuccessItem = function (output, context) {
    var contents = {
        CurrentFleetState: undefined,
        PreviousFleetState: undefined,
        FleetId: undefined,
    };
    if (output["currentFleetState"] !== undefined) {
        contents.CurrentFleetState = __expectString(output["currentFleetState"]);
    }
    if (output["previousFleetState"] !== undefined) {
        contents.PreviousFleetState = __expectString(output["previousFleetState"]);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteFleetSuccessSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DeleteFleetSuccessItem(entry, context);
    });
};
var deserializeAws_ec2DeleteFlowLogsResult = function (output, context) {
    var contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DeleteFpgaImageResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteInstanceEventWindowResult = function (output, context) {
    var contents = {
        InstanceEventWindowState: undefined,
    };
    if (output["instanceEventWindowState"] !== undefined) {
        contents.InstanceEventWindowState = deserializeAws_ec2InstanceEventWindowStateChange(output["instanceEventWindowState"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteIpamPoolResult = function (output, context) {
    var contents = {
        IpamPool: undefined,
    };
    if (output["ipamPool"] !== undefined) {
        contents.IpamPool = deserializeAws_ec2IpamPool(output["ipamPool"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteIpamResult = function (output, context) {
    var contents = {
        Ipam: undefined,
    };
    if (output["ipam"] !== undefined) {
        contents.Ipam = deserializeAws_ec2Ipam(output["ipam"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteIpamScopeResult = function (output, context) {
    var contents = {
        IpamScope: undefined,
    };
    if (output["ipamScope"] !== undefined) {
        contents.IpamScope = deserializeAws_ec2IpamScope(output["ipamScope"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteLaunchTemplateResult = function (output, context) {
    var contents = {
        LaunchTemplate: undefined,
    };
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2LaunchTemplate(output["launchTemplate"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorItem = function (output, context) {
    var contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        VersionNumber: undefined,
        ResponseError: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["versionNumber"] !== undefined) {
        contents.VersionNumber = __strictParseLong(output["versionNumber"]);
    }
    if (output["responseError"] !== undefined) {
        contents.ResponseError = deserializeAws_ec2ResponseError(output["responseError"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorItem(entry, context);
    });
};
var deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessItem = function (output, context) {
    var contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        VersionNumber: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["versionNumber"] !== undefined) {
        contents.VersionNumber = __strictParseLong(output["versionNumber"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessItem(entry, context);
    });
};
var deserializeAws_ec2DeleteLaunchTemplateVersionsResult = function (output, context) {
    var contents = {
        SuccessfullyDeletedLaunchTemplateVersions: undefined,
        UnsuccessfullyDeletedLaunchTemplateVersions: undefined,
    };
    if (output.successfullyDeletedLaunchTemplateVersionSet === "") {
        contents.SuccessfullyDeletedLaunchTemplateVersions = [];
    }
    else if (output["successfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
        output["successfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined) {
        contents.SuccessfullyDeletedLaunchTemplateVersions =
            deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessSet(__getArrayIfSingleItem(output["successfullyDeletedLaunchTemplateVersionSet"]["item"]), context);
    }
    if (output.unsuccessfullyDeletedLaunchTemplateVersionSet === "") {
        contents.UnsuccessfullyDeletedLaunchTemplateVersions = [];
    }
    else if (output["unsuccessfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
        output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined) {
        contents.UnsuccessfullyDeletedLaunchTemplateVersions =
            deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorSet(__getArrayIfSingleItem(output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DeleteLocalGatewayRouteResult = function (output, context) {
    var contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2LocalGatewayRoute(output["route"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationResult = function (output, context) {
    var contents = {
        LocalGatewayRouteTableVpcAssociation: undefined,
    };
    if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociation = deserializeAws_ec2LocalGatewayRouteTableVpcAssociation(output["localGatewayRouteTableVpcAssociation"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteManagedPrefixListResult = function (output, context) {
    var contents = {
        PrefixList: undefined,
    };
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteNatGatewayResult = function (output, context) {
    var contents = {
        NatGatewayId: undefined,
    };
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisResult = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeAnalysisId: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteNetworkInsightsAccessScopeResult = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeId: undefined,
    };
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteNetworkInsightsAnalysisResult = function (output, context) {
    var contents = {
        NetworkInsightsAnalysisId: undefined,
    };
    if (output["networkInsightsAnalysisId"] !== undefined) {
        contents.NetworkInsightsAnalysisId = __expectString(output["networkInsightsAnalysisId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteNetworkInsightsPathResult = function (output, context) {
    var contents = {
        NetworkInsightsPathId: undefined,
    };
    if (output["networkInsightsPathId"] !== undefined) {
        contents.NetworkInsightsPathId = __expectString(output["networkInsightsPathId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteNetworkInterfacePermissionResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2DeletePublicIpv4PoolResult = function (output, context) {
    var contents = {
        ReturnValue: undefined,
    };
    if (output["returnValue"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["returnValue"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteQueuedReservedInstancesError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteQueuedReservedInstancesResult = function (output, context) {
    var contents = {
        SuccessfulQueuedPurchaseDeletions: undefined,
        FailedQueuedPurchaseDeletions: undefined,
    };
    if (output.successfulQueuedPurchaseDeletionSet === "") {
        contents.SuccessfulQueuedPurchaseDeletions = [];
    }
    else if (output["successfulQueuedPurchaseDeletionSet"] !== undefined &&
        output["successfulQueuedPurchaseDeletionSet"]["item"] !== undefined) {
        contents.SuccessfulQueuedPurchaseDeletions = deserializeAws_ec2SuccessfulQueuedPurchaseDeletionSet(__getArrayIfSingleItem(output["successfulQueuedPurchaseDeletionSet"]["item"]), context);
    }
    if (output.failedQueuedPurchaseDeletionSet === "") {
        contents.FailedQueuedPurchaseDeletions = [];
    }
    else if (output["failedQueuedPurchaseDeletionSet"] !== undefined &&
        output["failedQueuedPurchaseDeletionSet"]["item"] !== undefined) {
        contents.FailedQueuedPurchaseDeletions = deserializeAws_ec2FailedQueuedPurchaseDeletionSet(__getArrayIfSingleItem(output["failedQueuedPurchaseDeletionSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DeleteSubnetCidrReservationResult = function (output, context) {
    var contents = {
        DeletedSubnetCidrReservation: undefined,
    };
    if (output["deletedSubnetCidrReservation"] !== undefined) {
        contents.DeletedSubnetCidrReservation = deserializeAws_ec2SubnetCidrReservation(output["deletedSubnetCidrReservation"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteTrafficMirrorFilterResult = function (output, context) {
    var contents = {
        TrafficMirrorFilterId: undefined,
    };
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteTrafficMirrorFilterRuleResult = function (output, context) {
    var contents = {
        TrafficMirrorFilterRuleId: undefined,
    };
    if (output["trafficMirrorFilterRuleId"] !== undefined) {
        contents.TrafficMirrorFilterRuleId = __expectString(output["trafficMirrorFilterRuleId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteTrafficMirrorSessionResult = function (output, context) {
    var contents = {
        TrafficMirrorSessionId: undefined,
    };
    if (output["trafficMirrorSessionId"] !== undefined) {
        contents.TrafficMirrorSessionId = __expectString(output["trafficMirrorSessionId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteTrafficMirrorTargetResult = function (output, context) {
    var contents = {
        TrafficMirrorTargetId: undefined,
    };
    if (output["trafficMirrorTargetId"] !== undefined) {
        contents.TrafficMirrorTargetId = __expectString(output["trafficMirrorTargetId"]);
    }
    return contents;
};
var deserializeAws_ec2DeleteTransitGatewayConnectPeerResult = function (output, context) {
    var contents = {
        TransitGatewayConnectPeer: undefined,
    };
    if (output["transitGatewayConnectPeer"] !== undefined) {
        contents.TransitGatewayConnectPeer = deserializeAws_ec2TransitGatewayConnectPeer(output["transitGatewayConnectPeer"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteTransitGatewayConnectResult = function (output, context) {
    var contents = {
        TransitGatewayConnect: undefined,
    };
    if (output["transitGatewayConnect"] !== undefined) {
        contents.TransitGatewayConnect = deserializeAws_ec2TransitGatewayConnect(output["transitGatewayConnect"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteTransitGatewayMulticastDomainResult = function (output, context) {
    var contents = {
        TransitGatewayMulticastDomain: undefined,
    };
    if (output["transitGatewayMulticastDomain"] !== undefined) {
        contents.TransitGatewayMulticastDomain = deserializeAws_ec2TransitGatewayMulticastDomain(output["transitGatewayMulticastDomain"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentResult = function (output, context) {
    var contents = {
        TransitGatewayPeeringAttachment: undefined,
    };
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceResult = function (output, context) {
    var contents = {
        TransitGatewayPrefixListReference: undefined,
    };
    if (output["transitGatewayPrefixListReference"] !== undefined) {
        contents.TransitGatewayPrefixListReference = deserializeAws_ec2TransitGatewayPrefixListReference(output["transitGatewayPrefixListReference"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteTransitGatewayResult = function (output, context) {
    var contents = {
        TransitGateway: undefined,
    };
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2TransitGateway(output["transitGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteTransitGatewayRouteResult = function (output, context) {
    var contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2TransitGatewayRoute(output["route"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteTransitGatewayRouteTableResult = function (output, context) {
    var contents = {
        TransitGatewayRouteTable: undefined,
    };
    if (output["transitGatewayRouteTable"] !== undefined) {
        contents.TransitGatewayRouteTable = deserializeAws_ec2TransitGatewayRouteTable(output["transitGatewayRouteTable"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteTransitGatewayVpcAttachmentResult = function (output, context) {
    var contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsResult = function (output, context) {
    var contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsResult = function (output, context) {
    var contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DeleteVpcEndpointsResult = function (output, context) {
    var contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DeleteVpcPeeringConnectionResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2DeprovisionByoipCidrResult = function (output, context) {
    var contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
var deserializeAws_ec2DeprovisionedAddressSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2DeprovisionIpamPoolCidrResult = function (output, context) {
    var contents = {
        IpamPoolCidr: undefined,
    };
    if (output["ipamPoolCidr"] !== undefined) {
        contents.IpamPoolCidr = deserializeAws_ec2IpamPoolCidr(output["ipamPoolCidr"], context);
    }
    return contents;
};
var deserializeAws_ec2DeprovisionPublicIpv4PoolCidrResult = function (output, context) {
    var contents = {
        PoolId: undefined,
        DeprovisionedAddresses: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output.deprovisionedAddressSet === "") {
        contents.DeprovisionedAddresses = [];
    }
    else if (output["deprovisionedAddressSet"] !== undefined &&
        output["deprovisionedAddressSet"]["item"] !== undefined) {
        contents.DeprovisionedAddresses = deserializeAws_ec2DeprovisionedAddressSet(__getArrayIfSingleItem(output["deprovisionedAddressSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DeregisterInstanceEventNotificationAttributesResult = function (output, context) {
    var contents = {
        InstanceTagAttribute: undefined,
    };
    if (output["instanceTagAttribute"] !== undefined) {
        contents.InstanceTagAttribute = deserializeAws_ec2InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
    }
    return contents;
};
var deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersResult = function (output, context) {
    var contents = {
        DeregisteredMulticastGroupMembers: undefined,
    };
    if (output["deregisteredMulticastGroupMembers"] !== undefined) {
        contents.DeregisteredMulticastGroupMembers = deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupMembers(output["deregisteredMulticastGroupMembers"], context);
    }
    return contents;
};
var deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesResult = function (output, context) {
    var contents = {
        DeregisteredMulticastGroupSources: undefined,
    };
    if (output["deregisteredMulticastGroupSources"] !== undefined) {
        contents.DeregisteredMulticastGroupSources = deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupSources(output["deregisteredMulticastGroupSources"], context);
    }
    return contents;
};
var deserializeAws_ec2DescribeAccountAttributesResult = function (output, context) {
    var contents = {
        AccountAttributes: undefined,
    };
    if (output.accountAttributeSet === "") {
        contents.AccountAttributes = [];
    }
    else if (output["accountAttributeSet"] !== undefined && output["accountAttributeSet"]["item"] !== undefined) {
        contents.AccountAttributes = deserializeAws_ec2AccountAttributeList(__getArrayIfSingleItem(output["accountAttributeSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeAddressesAttributeResult = function (output, context) {
    var contents = {
        Addresses: undefined,
        NextToken: undefined,
    };
    if (output.addressSet === "") {
        contents.Addresses = [];
    }
    else if (output["addressSet"] !== undefined && output["addressSet"]["item"] !== undefined) {
        contents.Addresses = deserializeAws_ec2AddressSet(__getArrayIfSingleItem(output["addressSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeAddressesResult = function (output, context) {
    var contents = {
        Addresses: undefined,
    };
    if (output.addressesSet === "") {
        contents.Addresses = [];
    }
    else if (output["addressesSet"] !== undefined && output["addressesSet"]["item"] !== undefined) {
        contents.Addresses = deserializeAws_ec2AddressList(__getArrayIfSingleItem(output["addressesSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeAggregateIdFormatResult = function (output, context) {
    var contents = {
        UseLongIdsAggregated: undefined,
        Statuses: undefined,
    };
    if (output["useLongIdsAggregated"] !== undefined) {
        contents.UseLongIdsAggregated = __parseBoolean(output["useLongIdsAggregated"]);
    }
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = deserializeAws_ec2IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeAvailabilityZonesResult = function (output, context) {
    var contents = {
        AvailabilityZones: undefined,
    };
    if (output.availabilityZoneInfo === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneInfo"] !== undefined && output["availabilityZoneInfo"]["item"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_ec2AvailabilityZoneList(__getArrayIfSingleItem(output["availabilityZoneInfo"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeBundleTasksResult = function (output, context) {
    var contents = {
        BundleTasks: undefined,
    };
    if (output.bundleInstanceTasksSet === "") {
        contents.BundleTasks = [];
    }
    else if (output["bundleInstanceTasksSet"] !== undefined && output["bundleInstanceTasksSet"]["item"] !== undefined) {
        contents.BundleTasks = deserializeAws_ec2BundleTaskList(__getArrayIfSingleItem(output["bundleInstanceTasksSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeByoipCidrsResult = function (output, context) {
    var contents = {
        ByoipCidrs: undefined,
        NextToken: undefined,
    };
    if (output.byoipCidrSet === "") {
        contents.ByoipCidrs = [];
    }
    else if (output["byoipCidrSet"] !== undefined && output["byoipCidrSet"]["item"] !== undefined) {
        contents.ByoipCidrs = deserializeAws_ec2ByoipCidrSet(__getArrayIfSingleItem(output["byoipCidrSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeCapacityReservationFleetsResult = function (output, context) {
    var contents = {
        CapacityReservationFleets: undefined,
        NextToken: undefined,
    };
    if (output.capacityReservationFleetSet === "") {
        contents.CapacityReservationFleets = [];
    }
    else if (output["capacityReservationFleetSet"] !== undefined &&
        output["capacityReservationFleetSet"]["item"] !== undefined) {
        contents.CapacityReservationFleets = deserializeAws_ec2CapacityReservationFleetSet(__getArrayIfSingleItem(output["capacityReservationFleetSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeCapacityReservationsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        CapacityReservations: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.capacityReservationSet === "") {
        contents.CapacityReservations = [];
    }
    else if (output["capacityReservationSet"] !== undefined && output["capacityReservationSet"]["item"] !== undefined) {
        contents.CapacityReservations = deserializeAws_ec2CapacityReservationSet(__getArrayIfSingleItem(output["capacityReservationSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeCarrierGatewaysResult = function (output, context) {
    var contents = {
        CarrierGateways: undefined,
        NextToken: undefined,
    };
    if (output.carrierGatewaySet === "") {
        contents.CarrierGateways = [];
    }
    else if (output["carrierGatewaySet"] !== undefined && output["carrierGatewaySet"]["item"] !== undefined) {
        contents.CarrierGateways = deserializeAws_ec2CarrierGatewaySet(__getArrayIfSingleItem(output["carrierGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeClassicLinkInstancesResult = function (output, context) {
    var contents = {
        Instances: undefined,
        NextToken: undefined,
    };
    if (output.instancesSet === "") {
        contents.Instances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2ClassicLinkInstanceList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeClientVpnAuthorizationRulesResult = function (output, context) {
    var contents = {
        AuthorizationRules: undefined,
        NextToken: undefined,
    };
    if (output.authorizationRule === "") {
        contents.AuthorizationRules = [];
    }
    else if (output["authorizationRule"] !== undefined && output["authorizationRule"]["item"] !== undefined) {
        contents.AuthorizationRules = deserializeAws_ec2AuthorizationRuleSet(__getArrayIfSingleItem(output["authorizationRule"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeClientVpnConnectionsResult = function (output, context) {
    var contents = {
        Connections: undefined,
        NextToken: undefined,
    };
    if (output.connections === "") {
        contents.Connections = [];
    }
    else if (output["connections"] !== undefined && output["connections"]["item"] !== undefined) {
        contents.Connections = deserializeAws_ec2ClientVpnConnectionSet(__getArrayIfSingleItem(output["connections"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeClientVpnEndpointsResult = function (output, context) {
    var contents = {
        ClientVpnEndpoints: undefined,
        NextToken: undefined,
    };
    if (output.clientVpnEndpoint === "") {
        contents.ClientVpnEndpoints = [];
    }
    else if (output["clientVpnEndpoint"] !== undefined && output["clientVpnEndpoint"]["item"] !== undefined) {
        contents.ClientVpnEndpoints = deserializeAws_ec2EndpointSet(__getArrayIfSingleItem(output["clientVpnEndpoint"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeClientVpnRoutesResult = function (output, context) {
    var contents = {
        Routes: undefined,
        NextToken: undefined,
    };
    if (output.routes === "") {
        contents.Routes = [];
    }
    else if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2ClientVpnRouteSet(__getArrayIfSingleItem(output["routes"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeClientVpnTargetNetworksResult = function (output, context) {
    var contents = {
        ClientVpnTargetNetworks: undefined,
        NextToken: undefined,
    };
    if (output.clientVpnTargetNetworks === "") {
        contents.ClientVpnTargetNetworks = [];
    }
    else if (output["clientVpnTargetNetworks"] !== undefined &&
        output["clientVpnTargetNetworks"]["item"] !== undefined) {
        contents.ClientVpnTargetNetworks = deserializeAws_ec2TargetNetworkSet(__getArrayIfSingleItem(output["clientVpnTargetNetworks"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeCoipPoolsResult = function (output, context) {
    var contents = {
        CoipPools: undefined,
        NextToken: undefined,
    };
    if (output.coipPoolSet === "") {
        contents.CoipPools = [];
    }
    else if (output["coipPoolSet"] !== undefined && output["coipPoolSet"]["item"] !== undefined) {
        contents.CoipPools = deserializeAws_ec2CoipPoolSet(__getArrayIfSingleItem(output["coipPoolSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeConversionTaskList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ConversionTask(entry, context);
    });
};
var deserializeAws_ec2DescribeConversionTasksResult = function (output, context) {
    var contents = {
        ConversionTasks: undefined,
    };
    if (output.conversionTasks === "") {
        contents.ConversionTasks = [];
    }
    else if (output["conversionTasks"] !== undefined && output["conversionTasks"]["item"] !== undefined) {
        contents.ConversionTasks = deserializeAws_ec2DescribeConversionTaskList(__getArrayIfSingleItem(output["conversionTasks"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeCustomerGatewaysResult = function (output, context) {
    var contents = {
        CustomerGateways: undefined,
    };
    if (output.customerGatewaySet === "") {
        contents.CustomerGateways = [];
    }
    else if (output["customerGatewaySet"] !== undefined && output["customerGatewaySet"]["item"] !== undefined) {
        contents.CustomerGateways = deserializeAws_ec2CustomerGatewayList(__getArrayIfSingleItem(output["customerGatewaySet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeDhcpOptionsResult = function (output, context) {
    var contents = {
        DhcpOptions: undefined,
        NextToken: undefined,
    };
    if (output.dhcpOptionsSet === "") {
        contents.DhcpOptions = [];
    }
    else if (output["dhcpOptionsSet"] !== undefined && output["dhcpOptionsSet"]["item"] !== undefined) {
        contents.DhcpOptions = deserializeAws_ec2DhcpOptionsList(__getArrayIfSingleItem(output["dhcpOptionsSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeEgressOnlyInternetGatewaysResult = function (output, context) {
    var contents = {
        EgressOnlyInternetGateways: undefined,
        NextToken: undefined,
    };
    if (output.egressOnlyInternetGatewaySet === "") {
        contents.EgressOnlyInternetGateways = [];
    }
    else if (output["egressOnlyInternetGatewaySet"] !== undefined &&
        output["egressOnlyInternetGatewaySet"]["item"] !== undefined) {
        contents.EgressOnlyInternetGateways = deserializeAws_ec2EgressOnlyInternetGatewayList(__getArrayIfSingleItem(output["egressOnlyInternetGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeElasticGpusResult = function (output, context) {
    var contents = {
        ElasticGpuSet: undefined,
        MaxResults: undefined,
        NextToken: undefined,
    };
    if (output.elasticGpuSet === "") {
        contents.ElasticGpuSet = [];
    }
    else if (output["elasticGpuSet"] !== undefined && output["elasticGpuSet"]["item"] !== undefined) {
        contents.ElasticGpuSet = deserializeAws_ec2ElasticGpuSet(__getArrayIfSingleItem(output["elasticGpuSet"]["item"]), context);
    }
    if (output["maxResults"] !== undefined) {
        contents.MaxResults = __strictParseInt32(output["maxResults"]);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeExportImageTasksResult = function (output, context) {
    var contents = {
        ExportImageTasks: undefined,
        NextToken: undefined,
    };
    if (output.exportImageTaskSet === "") {
        contents.ExportImageTasks = [];
    }
    else if (output["exportImageTaskSet"] !== undefined && output["exportImageTaskSet"]["item"] !== undefined) {
        contents.ExportImageTasks = deserializeAws_ec2ExportImageTaskList(__getArrayIfSingleItem(output["exportImageTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeExportTasksResult = function (output, context) {
    var contents = {
        ExportTasks: undefined,
    };
    if (output.exportTaskSet === "") {
        contents.ExportTasks = [];
    }
    else if (output["exportTaskSet"] !== undefined && output["exportTaskSet"]["item"] !== undefined) {
        contents.ExportTasks = deserializeAws_ec2ExportTaskList(__getArrayIfSingleItem(output["exportTaskSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeFastLaunchImagesResult = function (output, context) {
    var contents = {
        FastLaunchImages: undefined,
        NextToken: undefined,
    };
    if (output.fastLaunchImageSet === "") {
        contents.FastLaunchImages = [];
    }
    else if (output["fastLaunchImageSet"] !== undefined && output["fastLaunchImageSet"]["item"] !== undefined) {
        contents.FastLaunchImages = deserializeAws_ec2DescribeFastLaunchImagesSuccessSet(__getArrayIfSingleItem(output["fastLaunchImageSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeFastLaunchImagesSuccessItem = function (output, context) {
    var contents = {
        ImageId: undefined,
        ResourceType: undefined,
        SnapshotConfiguration: undefined,
        LaunchTemplate: undefined,
        MaxParallelLaunches: undefined,
        OwnerId: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        StateTransitionTime: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["snapshotConfiguration"] !== undefined) {
        contents.SnapshotConfiguration = deserializeAws_ec2FastLaunchSnapshotConfigurationResponse(output["snapshotConfiguration"], context);
    }
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
    }
    if (output["maxParallelLaunches"] !== undefined) {
        contents.MaxParallelLaunches = __strictParseInt32(output["maxParallelLaunches"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["stateTransitionTime"] !== undefined) {
        contents.StateTransitionTime = __expectNonNull(__parseRfc3339DateTime(output["stateTransitionTime"]));
    }
    return contents;
};
var deserializeAws_ec2DescribeFastLaunchImagesSuccessSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DescribeFastLaunchImagesSuccessItem(entry, context);
    });
};
var deserializeAws_ec2DescribeFastSnapshotRestoresResult = function (output, context) {
    var contents = {
        FastSnapshotRestores: undefined,
        NextToken: undefined,
    };
    if (output.fastSnapshotRestoreSet === "") {
        contents.FastSnapshotRestores = [];
    }
    else if (output["fastSnapshotRestoreSet"] !== undefined && output["fastSnapshotRestoreSet"]["item"] !== undefined) {
        contents.FastSnapshotRestores = deserializeAws_ec2DescribeFastSnapshotRestoreSuccessSet(__getArrayIfSingleItem(output["fastSnapshotRestoreSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeFastSnapshotRestoreSuccessItem = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        AvailabilityZone: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        OwnerId: undefined,
        OwnerAlias: undefined,
        EnablingTime: undefined,
        OptimizingTime: undefined,
        EnabledTime: undefined,
        DisablingTime: undefined,
        DisabledTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output["enablingTime"] !== undefined) {
        contents.EnablingTime = __expectNonNull(__parseRfc3339DateTime(output["enablingTime"]));
    }
    if (output["optimizingTime"] !== undefined) {
        contents.OptimizingTime = __expectNonNull(__parseRfc3339DateTime(output["optimizingTime"]));
    }
    if (output["enabledTime"] !== undefined) {
        contents.EnabledTime = __expectNonNull(__parseRfc3339DateTime(output["enabledTime"]));
    }
    if (output["disablingTime"] !== undefined) {
        contents.DisablingTime = __expectNonNull(__parseRfc3339DateTime(output["disablingTime"]));
    }
    if (output["disabledTime"] !== undefined) {
        contents.DisabledTime = __expectNonNull(__parseRfc3339DateTime(output["disabledTime"]));
    }
    return contents;
};
var deserializeAws_ec2DescribeFastSnapshotRestoreSuccessSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DescribeFastSnapshotRestoreSuccessItem(entry, context);
    });
};
var deserializeAws_ec2DescribeFleetError = function (output, context) {
    var contents = {
        LaunchTemplateAndOverrides: undefined,
        Lifecycle: undefined,
        ErrorCode: undefined,
        ErrorMessage: undefined,
    };
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = __expectString(output["lifecycle"]);
    }
    if (output["errorCode"] !== undefined) {
        contents.ErrorCode = __expectString(output["errorCode"]);
    }
    if (output["errorMessage"] !== undefined) {
        contents.ErrorMessage = __expectString(output["errorMessage"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeFleetHistoryResult = function (output, context) {
    var contents = {
        HistoryRecords: undefined,
        LastEvaluatedTime: undefined,
        NextToken: undefined,
        FleetId: undefined,
        StartTime: undefined,
    };
    if (output.historyRecordSet === "") {
        contents.HistoryRecords = [];
    }
    else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
        contents.HistoryRecords = deserializeAws_ec2HistoryRecordSet(__getArrayIfSingleItem(output["historyRecordSet"]["item"]), context);
    }
    if (output["lastEvaluatedTime"] !== undefined) {
        contents.LastEvaluatedTime = __expectNonNull(__parseRfc3339DateTime(output["lastEvaluatedTime"]));
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTime(output["startTime"]));
    }
    return contents;
};
var deserializeAws_ec2DescribeFleetInstancesResult = function (output, context) {
    var contents = {
        ActiveInstances: undefined,
        NextToken: undefined,
        FleetId: undefined,
    };
    if (output.activeInstanceSet === "") {
        contents.ActiveInstances = [];
    }
    else if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
        contents.ActiveInstances = deserializeAws_ec2ActiveInstanceSet(__getArrayIfSingleItem(output["activeInstanceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeFleetsErrorSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DescribeFleetError(entry, context);
    });
};
var deserializeAws_ec2DescribeFleetsInstances = function (output, context) {
    var contents = {
        LaunchTemplateAndOverrides: undefined,
        Lifecycle: undefined,
        InstanceIds: undefined,
        InstanceType: undefined,
        Platform: undefined,
    };
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = __expectString(output["lifecycle"]);
    }
    if (output.instanceIds === "") {
        contents.InstanceIds = [];
    }
    else if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
        contents.InstanceIds = deserializeAws_ec2InstanceIdsSet(__getArrayIfSingleItem(output["instanceIds"]["item"]), context);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeFleetsInstancesSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DescribeFleetsInstances(entry, context);
    });
};
var deserializeAws_ec2DescribeFleetsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        Fleets: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.fleetSet === "") {
        contents.Fleets = [];
    }
    else if (output["fleetSet"] !== undefined && output["fleetSet"]["item"] !== undefined) {
        contents.Fleets = deserializeAws_ec2FleetSet(__getArrayIfSingleItem(output["fleetSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeFlowLogsResult = function (output, context) {
    var contents = {
        FlowLogs: undefined,
        NextToken: undefined,
    };
    if (output.flowLogSet === "") {
        contents.FlowLogs = [];
    }
    else if (output["flowLogSet"] !== undefined && output["flowLogSet"]["item"] !== undefined) {
        contents.FlowLogs = deserializeAws_ec2FlowLogSet(__getArrayIfSingleItem(output["flowLogSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeFpgaImageAttributeResult = function (output, context) {
    var contents = {
        FpgaImageAttribute: undefined,
    };
    if (output["fpgaImageAttribute"] !== undefined) {
        contents.FpgaImageAttribute = deserializeAws_ec2FpgaImageAttribute(output["fpgaImageAttribute"], context);
    }
    return contents;
};
var deserializeAws_ec2DescribeFpgaImagesResult = function (output, context) {
    var contents = {
        FpgaImages: undefined,
        NextToken: undefined,
    };
    if (output.fpgaImageSet === "") {
        contents.FpgaImages = [];
    }
    else if (output["fpgaImageSet"] !== undefined && output["fpgaImageSet"]["item"] !== undefined) {
        contents.FpgaImages = deserializeAws_ec2FpgaImageList(__getArrayIfSingleItem(output["fpgaImageSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeHostReservationOfferingsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        OfferingSet: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.offeringSet === "") {
        contents.OfferingSet = [];
    }
    else if (output["offeringSet"] !== undefined && output["offeringSet"]["item"] !== undefined) {
        contents.OfferingSet = deserializeAws_ec2HostOfferingSet(__getArrayIfSingleItem(output["offeringSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeHostReservationsResult = function (output, context) {
    var contents = {
        HostReservationSet: undefined,
        NextToken: undefined,
    };
    if (output.hostReservationSet === "") {
        contents.HostReservationSet = [];
    }
    else if (output["hostReservationSet"] !== undefined && output["hostReservationSet"]["item"] !== undefined) {
        contents.HostReservationSet = deserializeAws_ec2HostReservationSet(__getArrayIfSingleItem(output["hostReservationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeHostsResult = function (output, context) {
    var contents = {
        Hosts: undefined,
        NextToken: undefined,
    };
    if (output.hostSet === "") {
        contents.Hosts = [];
    }
    else if (output["hostSet"] !== undefined && output["hostSet"]["item"] !== undefined) {
        contents.Hosts = deserializeAws_ec2HostList(__getArrayIfSingleItem(output["hostSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeIamInstanceProfileAssociationsResult = function (output, context) {
    var contents = {
        IamInstanceProfileAssociations: undefined,
        NextToken: undefined,
    };
    if (output.iamInstanceProfileAssociationSet === "") {
        contents.IamInstanceProfileAssociations = [];
    }
    else if (output["iamInstanceProfileAssociationSet"] !== undefined &&
        output["iamInstanceProfileAssociationSet"]["item"] !== undefined) {
        contents.IamInstanceProfileAssociations = deserializeAws_ec2IamInstanceProfileAssociationSet(__getArrayIfSingleItem(output["iamInstanceProfileAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeIdentityIdFormatResult = function (output, context) {
    var contents = {
        Statuses: undefined,
    };
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = deserializeAws_ec2IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeIdFormatResult = function (output, context) {
    var contents = {
        Statuses: undefined,
    };
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = deserializeAws_ec2IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeImagesResult = function (output, context) {
    var contents = {
        Images: undefined,
    };
    if (output.imagesSet === "") {
        contents.Images = [];
    }
    else if (output["imagesSet"] !== undefined && output["imagesSet"]["item"] !== undefined) {
        contents.Images = deserializeAws_ec2ImageList(__getArrayIfSingleItem(output["imagesSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeImportImageTasksResult = function (output, context) {
    var contents = {
        ImportImageTasks: undefined,
        NextToken: undefined,
    };
    if (output.importImageTaskSet === "") {
        contents.ImportImageTasks = [];
    }
    else if (output["importImageTaskSet"] !== undefined && output["importImageTaskSet"]["item"] !== undefined) {
        contents.ImportImageTasks = deserializeAws_ec2ImportImageTaskList(__getArrayIfSingleItem(output["importImageTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeImportSnapshotTasksResult = function (output, context) {
    var contents = {
        ImportSnapshotTasks: undefined,
        NextToken: undefined,
    };
    if (output.importSnapshotTaskSet === "") {
        contents.ImportSnapshotTasks = [];
    }
    else if (output["importSnapshotTaskSet"] !== undefined && output["importSnapshotTaskSet"]["item"] !== undefined) {
        contents.ImportSnapshotTasks = deserializeAws_ec2ImportSnapshotTaskList(__getArrayIfSingleItem(output["importSnapshotTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeInstanceCreditSpecificationsResult = function (output, context) {
    var contents = {
        InstanceCreditSpecifications: undefined,
        NextToken: undefined,
    };
    if (output.instanceCreditSpecificationSet === "") {
        contents.InstanceCreditSpecifications = [];
    }
    else if (output["instanceCreditSpecificationSet"] !== undefined &&
        output["instanceCreditSpecificationSet"]["item"] !== undefined) {
        contents.InstanceCreditSpecifications = deserializeAws_ec2InstanceCreditSpecificationList(__getArrayIfSingleItem(output["instanceCreditSpecificationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeInstanceEventNotificationAttributesResult = function (output, context) {
    var contents = {
        InstanceTagAttribute: undefined,
    };
    if (output["instanceTagAttribute"] !== undefined) {
        contents.InstanceTagAttribute = deserializeAws_ec2InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
    }
    return contents;
};
var deserializeAws_ec2DescribeInstanceEventWindowsResult = function (output, context) {
    var contents = {
        InstanceEventWindows: undefined,
        NextToken: undefined,
    };
    if (output.instanceEventWindowSet === "") {
        contents.InstanceEventWindows = [];
    }
    else if (output["instanceEventWindowSet"] !== undefined && output["instanceEventWindowSet"]["item"] !== undefined) {
        contents.InstanceEventWindows = deserializeAws_ec2InstanceEventWindowSet(__getArrayIfSingleItem(output["instanceEventWindowSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeInstancesResult = function (output, context) {
    var contents = {
        Reservations: undefined,
        NextToken: undefined,
    };
    if (output.reservationSet === "") {
        contents.Reservations = [];
    }
    else if (output["reservationSet"] !== undefined && output["reservationSet"]["item"] !== undefined) {
        contents.Reservations = deserializeAws_ec2ReservationList(__getArrayIfSingleItem(output["reservationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeInstanceStatusResult = function (output, context) {
    var contents = {
        InstanceStatuses: undefined,
        NextToken: undefined,
    };
    if (output.instanceStatusSet === "") {
        contents.InstanceStatuses = [];
    }
    else if (output["instanceStatusSet"] !== undefined && output["instanceStatusSet"]["item"] !== undefined) {
        contents.InstanceStatuses = deserializeAws_ec2InstanceStatusList(__getArrayIfSingleItem(output["instanceStatusSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeInstanceTypeOfferingsResult = function (output, context) {
    var contents = {
        InstanceTypeOfferings: undefined,
        NextToken: undefined,
    };
    if (output.instanceTypeOfferingSet === "") {
        contents.InstanceTypeOfferings = [];
    }
    else if (output["instanceTypeOfferingSet"] !== undefined &&
        output["instanceTypeOfferingSet"]["item"] !== undefined) {
        contents.InstanceTypeOfferings = deserializeAws_ec2InstanceTypeOfferingsList(__getArrayIfSingleItem(output["instanceTypeOfferingSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeInstanceTypesResult = function (output, context) {
    var contents = {
        InstanceTypes: undefined,
        NextToken: undefined,
    };
    if (output.instanceTypeSet === "") {
        contents.InstanceTypes = [];
    }
    else if (output["instanceTypeSet"] !== undefined && output["instanceTypeSet"]["item"] !== undefined) {
        contents.InstanceTypes = deserializeAws_ec2InstanceTypeInfoList(__getArrayIfSingleItem(output["instanceTypeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeInternetGatewaysResult = function (output, context) {
    var contents = {
        InternetGateways: undefined,
        NextToken: undefined,
    };
    if (output.internetGatewaySet === "") {
        contents.InternetGateways = [];
    }
    else if (output["internetGatewaySet"] !== undefined && output["internetGatewaySet"]["item"] !== undefined) {
        contents.InternetGateways = deserializeAws_ec2InternetGatewayList(__getArrayIfSingleItem(output["internetGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeIpamPoolsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        IpamPools: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.ipamPoolSet === "") {
        contents.IpamPools = [];
    }
    else if (output["ipamPoolSet"] !== undefined && output["ipamPoolSet"]["item"] !== undefined) {
        contents.IpamPools = deserializeAws_ec2IpamPoolSet(__getArrayIfSingleItem(output["ipamPoolSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeIpamScopesResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        IpamScopes: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.ipamScopeSet === "") {
        contents.IpamScopes = [];
    }
    else if (output["ipamScopeSet"] !== undefined && output["ipamScopeSet"]["item"] !== undefined) {
        contents.IpamScopes = deserializeAws_ec2IpamScopeSet(__getArrayIfSingleItem(output["ipamScopeSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeIpamsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        Ipams: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.ipamSet === "") {
        contents.Ipams = [];
    }
    else if (output["ipamSet"] !== undefined && output["ipamSet"]["item"] !== undefined) {
        contents.Ipams = deserializeAws_ec2IpamSet(__getArrayIfSingleItem(output["ipamSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeIpv6PoolsResult = function (output, context) {
    var contents = {
        Ipv6Pools: undefined,
        NextToken: undefined,
    };
    if (output.ipv6PoolSet === "") {
        contents.Ipv6Pools = [];
    }
    else if (output["ipv6PoolSet"] !== undefined && output["ipv6PoolSet"]["item"] !== undefined) {
        contents.Ipv6Pools = deserializeAws_ec2Ipv6PoolSet(__getArrayIfSingleItem(output["ipv6PoolSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeKeyPairsResult = function (output, context) {
    var contents = {
        KeyPairs: undefined,
    };
    if (output.keySet === "") {
        contents.KeyPairs = [];
    }
    else if (output["keySet"] !== undefined && output["keySet"]["item"] !== undefined) {
        contents.KeyPairs = deserializeAws_ec2KeyPairList(__getArrayIfSingleItem(output["keySet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeLaunchTemplatesResult = function (output, context) {
    var contents = {
        LaunchTemplates: undefined,
        NextToken: undefined,
    };
    if (output.launchTemplates === "") {
        contents.LaunchTemplates = [];
    }
    else if (output["launchTemplates"] !== undefined && output["launchTemplates"]["item"] !== undefined) {
        contents.LaunchTemplates = deserializeAws_ec2LaunchTemplateSet(__getArrayIfSingleItem(output["launchTemplates"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeLaunchTemplateVersionsResult = function (output, context) {
    var contents = {
        LaunchTemplateVersions: undefined,
        NextToken: undefined,
    };
    if (output.launchTemplateVersionSet === "") {
        contents.LaunchTemplateVersions = [];
    }
    else if (output["launchTemplateVersionSet"] !== undefined &&
        output["launchTemplateVersionSet"]["item"] !== undefined) {
        contents.LaunchTemplateVersions = deserializeAws_ec2LaunchTemplateVersionSet(__getArrayIfSingleItem(output["launchTemplateVersionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeLocalGatewayRouteTablesResult = function (output, context) {
    var contents = {
        LocalGatewayRouteTables: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayRouteTableSet === "") {
        contents.LocalGatewayRouteTables = [];
    }
    else if (output["localGatewayRouteTableSet"] !== undefined &&
        output["localGatewayRouteTableSet"]["item"] !== undefined) {
        contents.LocalGatewayRouteTables = deserializeAws_ec2LocalGatewayRouteTableSet(__getArrayIfSingleItem(output["localGatewayRouteTableSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult = function (output, context) {
    var contents = {
        LocalGatewayRouteTableVirtualInterfaceGroupAssociations: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayRouteTableVirtualInterfaceGroupAssociationSet === "") {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations = [];
    }
    else if (output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"] !== undefined &&
        output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"] !== undefined) {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations =
            deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet(__getArrayIfSingleItem(output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsResult = function (output, context) {
    var contents = {
        LocalGatewayRouteTableVpcAssociations: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayRouteTableVpcAssociationSet === "") {
        contents.LocalGatewayRouteTableVpcAssociations = [];
    }
    else if (output["localGatewayRouteTableVpcAssociationSet"] !== undefined &&
        output["localGatewayRouteTableVpcAssociationSet"]["item"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociations = deserializeAws_ec2LocalGatewayRouteTableVpcAssociationSet(__getArrayIfSingleItem(output["localGatewayRouteTableVpcAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeLocalGatewaysResult = function (output, context) {
    var contents = {
        LocalGateways: undefined,
        NextToken: undefined,
    };
    if (output.localGatewaySet === "") {
        contents.LocalGateways = [];
    }
    else if (output["localGatewaySet"] !== undefined && output["localGatewaySet"]["item"] !== undefined) {
        contents.LocalGateways = deserializeAws_ec2LocalGatewaySet(__getArrayIfSingleItem(output["localGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsResult = function (output, context) {
    var contents = {
        LocalGatewayVirtualInterfaceGroups: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayVirtualInterfaceGroupSet === "") {
        contents.LocalGatewayVirtualInterfaceGroups = [];
    }
    else if (output["localGatewayVirtualInterfaceGroupSet"] !== undefined &&
        output["localGatewayVirtualInterfaceGroupSet"]["item"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroups = deserializeAws_ec2LocalGatewayVirtualInterfaceGroupSet(__getArrayIfSingleItem(output["localGatewayVirtualInterfaceGroupSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesResult = function (output, context) {
    var contents = {
        LocalGatewayVirtualInterfaces: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayVirtualInterfaceSet === "") {
        contents.LocalGatewayVirtualInterfaces = [];
    }
    else if (output["localGatewayVirtualInterfaceSet"] !== undefined &&
        output["localGatewayVirtualInterfaceSet"]["item"] !== undefined) {
        contents.LocalGatewayVirtualInterfaces = deserializeAws_ec2LocalGatewayVirtualInterfaceSet(__getArrayIfSingleItem(output["localGatewayVirtualInterfaceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeManagedPrefixListsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        PrefixLists: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.prefixListSet === "") {
        contents.PrefixLists = [];
    }
    else if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
        contents.PrefixLists = deserializeAws_ec2ManagedPrefixListSet(__getArrayIfSingleItem(output["prefixListSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeMovingAddressesResult = function (output, context) {
    var contents = {
        MovingAddressStatuses: undefined,
        NextToken: undefined,
    };
    if (output.movingAddressStatusSet === "") {
        contents.MovingAddressStatuses = [];
    }
    else if (output["movingAddressStatusSet"] !== undefined && output["movingAddressStatusSet"]["item"] !== undefined) {
        contents.MovingAddressStatuses = deserializeAws_ec2MovingAddressStatusSet(__getArrayIfSingleItem(output["movingAddressStatusSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeNatGatewaysResult = function (output, context) {
    var contents = {
        NatGateways: undefined,
        NextToken: undefined,
    };
    if (output.natGatewaySet === "") {
        contents.NatGateways = [];
    }
    else if (output["natGatewaySet"] !== undefined && output["natGatewaySet"]["item"] !== undefined) {
        contents.NatGateways = deserializeAws_ec2NatGatewayList(__getArrayIfSingleItem(output["natGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeNetworkAclsResult = function (output, context) {
    var contents = {
        NetworkAcls: undefined,
        NextToken: undefined,
    };
    if (output.networkAclSet === "") {
        contents.NetworkAcls = [];
    }
    else if (output["networkAclSet"] !== undefined && output["networkAclSet"]["item"] !== undefined) {
        contents.NetworkAcls = deserializeAws_ec2NetworkAclList(__getArrayIfSingleItem(output["networkAclSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesResult = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeAnalyses: undefined,
        NextToken: undefined,
    };
    if (output.networkInsightsAccessScopeAnalysisSet === "") {
        contents.NetworkInsightsAccessScopeAnalyses = [];
    }
    else if (output["networkInsightsAccessScopeAnalysisSet"] !== undefined &&
        output["networkInsightsAccessScopeAnalysisSet"]["item"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalyses = deserializeAws_ec2NetworkInsightsAccessScopeAnalysisList(__getArrayIfSingleItem(output["networkInsightsAccessScopeAnalysisSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeNetworkInsightsAccessScopesResult = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopes: undefined,
        NextToken: undefined,
    };
    if (output.networkInsightsAccessScopeSet === "") {
        contents.NetworkInsightsAccessScopes = [];
    }
    else if (output["networkInsightsAccessScopeSet"] !== undefined &&
        output["networkInsightsAccessScopeSet"]["item"] !== undefined) {
        contents.NetworkInsightsAccessScopes = deserializeAws_ec2NetworkInsightsAccessScopeList(__getArrayIfSingleItem(output["networkInsightsAccessScopeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeNetworkInsightsAnalysesResult = function (output, context) {
    var contents = {
        NetworkInsightsAnalyses: undefined,
        NextToken: undefined,
    };
    if (output.networkInsightsAnalysisSet === "") {
        contents.NetworkInsightsAnalyses = [];
    }
    else if (output["networkInsightsAnalysisSet"] !== undefined &&
        output["networkInsightsAnalysisSet"]["item"] !== undefined) {
        contents.NetworkInsightsAnalyses = deserializeAws_ec2NetworkInsightsAnalysisList(__getArrayIfSingleItem(output["networkInsightsAnalysisSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeNetworkInsightsPathsResult = function (output, context) {
    var contents = {
        NetworkInsightsPaths: undefined,
        NextToken: undefined,
    };
    if (output.networkInsightsPathSet === "") {
        contents.NetworkInsightsPaths = [];
    }
    else if (output["networkInsightsPathSet"] !== undefined && output["networkInsightsPathSet"]["item"] !== undefined) {
        contents.NetworkInsightsPaths = deserializeAws_ec2NetworkInsightsPathList(__getArrayIfSingleItem(output["networkInsightsPathSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeNetworkInterfaceAttributeResult = function (output, context) {
    var contents = {
        Attachment: undefined,
        Description: undefined,
        Groups: undefined,
        NetworkInterfaceId: undefined,
        SourceDestCheck: undefined,
    };
    if (output["attachment"] !== undefined) {
        contents.Attachment = deserializeAws_ec2NetworkInterfaceAttachment(output["attachment"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = deserializeAws_ec2AttributeValue(output["description"], context);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = deserializeAws_ec2AttributeBooleanValue(output["sourceDestCheck"], context);
    }
    return contents;
};
var deserializeAws_ec2DescribeNetworkInterfacePermissionsResult = function (output, context) {
    var contents = {
        NetworkInterfacePermissions: undefined,
        NextToken: undefined,
    };
    if (output.networkInterfacePermissions === "") {
        contents.NetworkInterfacePermissions = [];
    }
    else if (output["networkInterfacePermissions"] !== undefined &&
        output["networkInterfacePermissions"]["item"] !== undefined) {
        contents.NetworkInterfacePermissions = deserializeAws_ec2NetworkInterfacePermissionList(__getArrayIfSingleItem(output["networkInterfacePermissions"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeNetworkInterfacesResult = function (output, context) {
    var contents = {
        NetworkInterfaces: undefined,
        NextToken: undefined,
    };
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2NetworkInterfaceList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribePlacementGroupsResult = function (output, context) {
    var contents = {
        PlacementGroups: undefined,
    };
    if (output.placementGroupSet === "") {
        contents.PlacementGroups = [];
    }
    else if (output["placementGroupSet"] !== undefined && output["placementGroupSet"]["item"] !== undefined) {
        contents.PlacementGroups = deserializeAws_ec2PlacementGroupList(__getArrayIfSingleItem(output["placementGroupSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribePrefixListsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        PrefixLists: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.prefixListSet === "") {
        contents.PrefixLists = [];
    }
    else if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
        contents.PrefixLists = deserializeAws_ec2PrefixListSet(__getArrayIfSingleItem(output["prefixListSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribePrincipalIdFormatResult = function (output, context) {
    var contents = {
        Principals: undefined,
        NextToken: undefined,
    };
    if (output.principalSet === "") {
        contents.Principals = [];
    }
    else if (output["principalSet"] !== undefined && output["principalSet"]["item"] !== undefined) {
        contents.Principals = deserializeAws_ec2PrincipalIdFormatList(__getArrayIfSingleItem(output["principalSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribePublicIpv4PoolsResult = function (output, context) {
    var contents = {
        PublicIpv4Pools: undefined,
        NextToken: undefined,
    };
    if (output.publicIpv4PoolSet === "") {
        contents.PublicIpv4Pools = [];
    }
    else if (output["publicIpv4PoolSet"] !== undefined && output["publicIpv4PoolSet"]["item"] !== undefined) {
        contents.PublicIpv4Pools = deserializeAws_ec2PublicIpv4PoolSet(__getArrayIfSingleItem(output["publicIpv4PoolSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeRegionsResult = function (output, context) {
    var contents = {
        Regions: undefined,
    };
    if (output.regionInfo === "") {
        contents.Regions = [];
    }
    else if (output["regionInfo"] !== undefined && output["regionInfo"]["item"] !== undefined) {
        contents.Regions = deserializeAws_ec2RegionList(__getArrayIfSingleItem(output["regionInfo"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeReplaceRootVolumeTasksResult = function (output, context) {
    var contents = {
        ReplaceRootVolumeTasks: undefined,
        NextToken: undefined,
    };
    if (output.replaceRootVolumeTaskSet === "") {
        contents.ReplaceRootVolumeTasks = [];
    }
    else if (output["replaceRootVolumeTaskSet"] !== undefined &&
        output["replaceRootVolumeTaskSet"]["item"] !== undefined) {
        contents.ReplaceRootVolumeTasks = deserializeAws_ec2ReplaceRootVolumeTasks(__getArrayIfSingleItem(output["replaceRootVolumeTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeReservedInstancesListingsResult = function (output, context) {
    var contents = {
        ReservedInstancesListings: undefined,
    };
    if (output.reservedInstancesListingsSet === "") {
        contents.ReservedInstancesListings = [];
    }
    else if (output["reservedInstancesListingsSet"] !== undefined &&
        output["reservedInstancesListingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesListings = deserializeAws_ec2ReservedInstancesListingList(__getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeReservedInstancesModificationsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        ReservedInstancesModifications: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.reservedInstancesModificationsSet === "") {
        contents.ReservedInstancesModifications = [];
    }
    else if (output["reservedInstancesModificationsSet"] !== undefined &&
        output["reservedInstancesModificationsSet"]["item"] !== undefined) {
        contents.ReservedInstancesModifications = deserializeAws_ec2ReservedInstancesModificationList(__getArrayIfSingleItem(output["reservedInstancesModificationsSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeReservedInstancesOfferingsResult = function (output, context) {
    var contents = {
        ReservedInstancesOfferings: undefined,
        NextToken: undefined,
    };
    if (output.reservedInstancesOfferingsSet === "") {
        contents.ReservedInstancesOfferings = [];
    }
    else if (output["reservedInstancesOfferingsSet"] !== undefined &&
        output["reservedInstancesOfferingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesOfferings = deserializeAws_ec2ReservedInstancesOfferingList(__getArrayIfSingleItem(output["reservedInstancesOfferingsSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeReservedInstancesResult = function (output, context) {
    var contents = {
        ReservedInstances: undefined,
    };
    if (output.reservedInstancesSet === "") {
        contents.ReservedInstances = [];
    }
    else if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
        contents.ReservedInstances = deserializeAws_ec2ReservedInstancesList(__getArrayIfSingleItem(output["reservedInstancesSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeRouteTablesResult = function (output, context) {
    var contents = {
        RouteTables: undefined,
        NextToken: undefined,
    };
    if (output.routeTableSet === "") {
        contents.RouteTables = [];
    }
    else if (output["routeTableSet"] !== undefined && output["routeTableSet"]["item"] !== undefined) {
        contents.RouteTables = deserializeAws_ec2RouteTableList(__getArrayIfSingleItem(output["routeTableSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeScheduledInstanceAvailabilityResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        ScheduledInstanceAvailabilitySet: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.scheduledInstanceAvailabilitySet === "") {
        contents.ScheduledInstanceAvailabilitySet = [];
    }
    else if (output["scheduledInstanceAvailabilitySet"] !== undefined &&
        output["scheduledInstanceAvailabilitySet"]["item"] !== undefined) {
        contents.ScheduledInstanceAvailabilitySet = deserializeAws_ec2ScheduledInstanceAvailabilitySet(__getArrayIfSingleItem(output["scheduledInstanceAvailabilitySet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeScheduledInstancesResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        ScheduledInstanceSet: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.scheduledInstanceSet === "") {
        contents.ScheduledInstanceSet = [];
    }
    else if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
        contents.ScheduledInstanceSet = deserializeAws_ec2ScheduledInstanceSet(__getArrayIfSingleItem(output["scheduledInstanceSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeSecurityGroupReferencesResult = function (output, context) {
    var contents = {
        SecurityGroupReferenceSet: undefined,
    };
    if (output.securityGroupReferenceSet === "") {
        contents.SecurityGroupReferenceSet = [];
    }
    else if (output["securityGroupReferenceSet"] !== undefined &&
        output["securityGroupReferenceSet"]["item"] !== undefined) {
        contents.SecurityGroupReferenceSet = deserializeAws_ec2SecurityGroupReferences(__getArrayIfSingleItem(output["securityGroupReferenceSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeSecurityGroupRulesResult = function (output, context) {
    var contents = {
        SecurityGroupRules: undefined,
        NextToken: undefined,
    };
    if (output.securityGroupRuleSet === "") {
        contents.SecurityGroupRules = [];
    }
    else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
        contents.SecurityGroupRules = deserializeAws_ec2SecurityGroupRuleList(__getArrayIfSingleItem(output["securityGroupRuleSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeSecurityGroupsResult = function (output, context) {
    var contents = {
        SecurityGroups: undefined,
        NextToken: undefined,
    };
    if (output.securityGroupInfo === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroupInfo"] !== undefined && output["securityGroupInfo"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2SecurityGroupList(__getArrayIfSingleItem(output["securityGroupInfo"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeSnapshotAttributeResult = function (output, context) {
    var contents = {
        CreateVolumePermissions: undefined,
        ProductCodes: undefined,
        SnapshotId: undefined,
    };
    if (output.createVolumePermission === "") {
        contents.CreateVolumePermissions = [];
    }
    else if (output["createVolumePermission"] !== undefined && output["createVolumePermission"]["item"] !== undefined) {
        contents.CreateVolumePermissions = deserializeAws_ec2CreateVolumePermissionList(__getArrayIfSingleItem(output["createVolumePermission"]["item"]), context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeSnapshotsResult = function (output, context) {
    var contents = {
        Snapshots: undefined,
        NextToken: undefined,
    };
    if (output.snapshotSet === "") {
        contents.Snapshots = [];
    }
    else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
        contents.Snapshots = deserializeAws_ec2SnapshotList(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeSnapshotTierStatusResult = function (output, context) {
    var contents = {
        SnapshotTierStatuses: undefined,
        NextToken: undefined,
    };
    if (output.snapshotTierStatusSet === "") {
        contents.SnapshotTierStatuses = [];
    }
    else if (output["snapshotTierStatusSet"] !== undefined && output["snapshotTierStatusSet"]["item"] !== undefined) {
        contents.SnapshotTierStatuses = deserializeAws_ec2snapshotTierStatusSet(__getArrayIfSingleItem(output["snapshotTierStatusSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeSpotDatafeedSubscriptionResult = function (output, context) {
    var contents = {
        SpotDatafeedSubscription: undefined,
    };
    if (output["spotDatafeedSubscription"] !== undefined) {
        contents.SpotDatafeedSubscription = deserializeAws_ec2SpotDatafeedSubscription(output["spotDatafeedSubscription"], context);
    }
    return contents;
};
var deserializeAws_ec2DescribeSpotFleetInstancesResponse = function (output, context) {
    var contents = {
        ActiveInstances: undefined,
        NextToken: undefined,
        SpotFleetRequestId: undefined,
    };
    if (output.activeInstanceSet === "") {
        contents.ActiveInstances = [];
    }
    else if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
        contents.ActiveInstances = deserializeAws_ec2ActiveInstanceSet(__getArrayIfSingleItem(output["activeInstanceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeSpotFleetRequestHistoryResponse = function (output, context) {
    var contents = {
        HistoryRecords: undefined,
        LastEvaluatedTime: undefined,
        NextToken: undefined,
        SpotFleetRequestId: undefined,
        StartTime: undefined,
    };
    if (output.historyRecordSet === "") {
        contents.HistoryRecords = [];
    }
    else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
        contents.HistoryRecords = deserializeAws_ec2HistoryRecords(__getArrayIfSingleItem(output["historyRecordSet"]["item"]), context);
    }
    if (output["lastEvaluatedTime"] !== undefined) {
        contents.LastEvaluatedTime = __expectNonNull(__parseRfc3339DateTime(output["lastEvaluatedTime"]));
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTime(output["startTime"]));
    }
    return contents;
};
var deserializeAws_ec2DescribeSpotFleetRequestsResponse = function (output, context) {
    var contents = {
        NextToken: undefined,
        SpotFleetRequestConfigs: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.spotFleetRequestConfigSet === "") {
        contents.SpotFleetRequestConfigs = [];
    }
    else if (output["spotFleetRequestConfigSet"] !== undefined &&
        output["spotFleetRequestConfigSet"]["item"] !== undefined) {
        contents.SpotFleetRequestConfigs = deserializeAws_ec2SpotFleetRequestConfigSet(__getArrayIfSingleItem(output["spotFleetRequestConfigSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeSpotInstanceRequestsResult = function (output, context) {
    var contents = {
        SpotInstanceRequests: undefined,
        NextToken: undefined,
    };
    if (output.spotInstanceRequestSet === "") {
        contents.SpotInstanceRequests = [];
    }
    else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
        contents.SpotInstanceRequests = deserializeAws_ec2SpotInstanceRequestList(__getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeSpotPriceHistoryResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        SpotPriceHistory: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.spotPriceHistorySet === "") {
        contents.SpotPriceHistory = [];
    }
    else if (output["spotPriceHistorySet"] !== undefined && output["spotPriceHistorySet"]["item"] !== undefined) {
        contents.SpotPriceHistory = deserializeAws_ec2SpotPriceHistoryList(__getArrayIfSingleItem(output["spotPriceHistorySet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeStaleSecurityGroupsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        StaleSecurityGroupSet: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.staleSecurityGroupSet === "") {
        contents.StaleSecurityGroupSet = [];
    }
    else if (output["staleSecurityGroupSet"] !== undefined && output["staleSecurityGroupSet"]["item"] !== undefined) {
        contents.StaleSecurityGroupSet = deserializeAws_ec2StaleSecurityGroupSet(__getArrayIfSingleItem(output["staleSecurityGroupSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeStoreImageTasksResult = function (output, context) {
    var contents = {
        StoreImageTaskResults: undefined,
        NextToken: undefined,
    };
    if (output.storeImageTaskResultSet === "") {
        contents.StoreImageTaskResults = [];
    }
    else if (output["storeImageTaskResultSet"] !== undefined &&
        output["storeImageTaskResultSet"]["item"] !== undefined) {
        contents.StoreImageTaskResults = deserializeAws_ec2StoreImageTaskResultSet(__getArrayIfSingleItem(output["storeImageTaskResultSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeSubnetsResult = function (output, context) {
    var contents = {
        Subnets: undefined,
        NextToken: undefined,
    };
    if (output.subnetSet === "") {
        contents.Subnets = [];
    }
    else if (output["subnetSet"] !== undefined && output["subnetSet"]["item"] !== undefined) {
        contents.Subnets = deserializeAws_ec2SubnetList(__getArrayIfSingleItem(output["subnetSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTagsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        Tags: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagDescriptionList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeTrafficMirrorFiltersResult = function (output, context) {
    var contents = {
        TrafficMirrorFilters: undefined,
        NextToken: undefined,
    };
    if (output.trafficMirrorFilterSet === "") {
        contents.TrafficMirrorFilters = [];
    }
    else if (output["trafficMirrorFilterSet"] !== undefined && output["trafficMirrorFilterSet"]["item"] !== undefined) {
        contents.TrafficMirrorFilters = deserializeAws_ec2TrafficMirrorFilterSet(__getArrayIfSingleItem(output["trafficMirrorFilterSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTrafficMirrorSessionsResult = function (output, context) {
    var contents = {
        TrafficMirrorSessions: undefined,
        NextToken: undefined,
    };
    if (output.trafficMirrorSessionSet === "") {
        contents.TrafficMirrorSessions = [];
    }
    else if (output["trafficMirrorSessionSet"] !== undefined &&
        output["trafficMirrorSessionSet"]["item"] !== undefined) {
        contents.TrafficMirrorSessions = deserializeAws_ec2TrafficMirrorSessionSet(__getArrayIfSingleItem(output["trafficMirrorSessionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTrafficMirrorTargetsResult = function (output, context) {
    var contents = {
        TrafficMirrorTargets: undefined,
        NextToken: undefined,
    };
    if (output.trafficMirrorTargetSet === "") {
        contents.TrafficMirrorTargets = [];
    }
    else if (output["trafficMirrorTargetSet"] !== undefined && output["trafficMirrorTargetSet"]["item"] !== undefined) {
        contents.TrafficMirrorTargets = deserializeAws_ec2TrafficMirrorTargetSet(__getArrayIfSingleItem(output["trafficMirrorTargetSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTransitGatewayAttachmentsResult = function (output, context) {
    var contents = {
        TransitGatewayAttachments: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayAttachments === "") {
        contents.TransitGatewayAttachments = [];
    }
    else if (output["transitGatewayAttachments"] !== undefined &&
        output["transitGatewayAttachments"]["item"] !== undefined) {
        contents.TransitGatewayAttachments = deserializeAws_ec2TransitGatewayAttachmentList(__getArrayIfSingleItem(output["transitGatewayAttachments"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTransitGatewayConnectPeersResult = function (output, context) {
    var contents = {
        TransitGatewayConnectPeers: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayConnectPeerSet === "") {
        contents.TransitGatewayConnectPeers = [];
    }
    else if (output["transitGatewayConnectPeerSet"] !== undefined &&
        output["transitGatewayConnectPeerSet"]["item"] !== undefined) {
        contents.TransitGatewayConnectPeers = deserializeAws_ec2TransitGatewayConnectPeerList(__getArrayIfSingleItem(output["transitGatewayConnectPeerSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTransitGatewayConnectsResult = function (output, context) {
    var contents = {
        TransitGatewayConnects: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayConnectSet === "") {
        contents.TransitGatewayConnects = [];
    }
    else if (output["transitGatewayConnectSet"] !== undefined &&
        output["transitGatewayConnectSet"]["item"] !== undefined) {
        contents.TransitGatewayConnects = deserializeAws_ec2TransitGatewayConnectList(__getArrayIfSingleItem(output["transitGatewayConnectSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTransitGatewayMulticastDomainsResult = function (output, context) {
    var contents = {
        TransitGatewayMulticastDomains: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayMulticastDomains === "") {
        contents.TransitGatewayMulticastDomains = [];
    }
    else if (output["transitGatewayMulticastDomains"] !== undefined &&
        output["transitGatewayMulticastDomains"]["item"] !== undefined) {
        contents.TransitGatewayMulticastDomains = deserializeAws_ec2TransitGatewayMulticastDomainList(__getArrayIfSingleItem(output["transitGatewayMulticastDomains"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsResult = function (output, context) {
    var contents = {
        TransitGatewayPeeringAttachments: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayPeeringAttachments === "") {
        contents.TransitGatewayPeeringAttachments = [];
    }
    else if (output["transitGatewayPeeringAttachments"] !== undefined &&
        output["transitGatewayPeeringAttachments"]["item"] !== undefined) {
        contents.TransitGatewayPeeringAttachments = deserializeAws_ec2TransitGatewayPeeringAttachmentList(__getArrayIfSingleItem(output["transitGatewayPeeringAttachments"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTransitGatewayRouteTablesResult = function (output, context) {
    var contents = {
        TransitGatewayRouteTables: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayRouteTables === "") {
        contents.TransitGatewayRouteTables = [];
    }
    else if (output["transitGatewayRouteTables"] !== undefined &&
        output["transitGatewayRouteTables"]["item"] !== undefined) {
        contents.TransitGatewayRouteTables = deserializeAws_ec2TransitGatewayRouteTableList(__getArrayIfSingleItem(output["transitGatewayRouteTables"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTransitGatewaysResult = function (output, context) {
    var contents = {
        TransitGateways: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewaySet === "") {
        contents.TransitGateways = [];
    }
    else if (output["transitGatewaySet"] !== undefined && output["transitGatewaySet"]["item"] !== undefined) {
        contents.TransitGateways = deserializeAws_ec2TransitGatewayList(__getArrayIfSingleItem(output["transitGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsResult = function (output, context) {
    var contents = {
        TransitGatewayVpcAttachments: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayVpcAttachments === "") {
        contents.TransitGatewayVpcAttachments = [];
    }
    else if (output["transitGatewayVpcAttachments"] !== undefined &&
        output["transitGatewayVpcAttachments"]["item"] !== undefined) {
        contents.TransitGatewayVpcAttachments = deserializeAws_ec2TransitGatewayVpcAttachmentList(__getArrayIfSingleItem(output["transitGatewayVpcAttachments"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeTrunkInterfaceAssociationsResult = function (output, context) {
    var contents = {
        InterfaceAssociations: undefined,
        NextToken: undefined,
    };
    if (output.interfaceAssociationSet === "") {
        contents.InterfaceAssociations = [];
    }
    else if (output["interfaceAssociationSet"] !== undefined &&
        output["interfaceAssociationSet"]["item"] !== undefined) {
        contents.InterfaceAssociations = deserializeAws_ec2TrunkInterfaceAssociationList(__getArrayIfSingleItem(output["interfaceAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVolumeAttributeResult = function (output, context) {
    var contents = {
        AutoEnableIO: undefined,
        ProductCodes: undefined,
        VolumeId: undefined,
    };
    if (output["autoEnableIO"] !== undefined) {
        contents.AutoEnableIO = deserializeAws_ec2AttributeBooleanValue(output["autoEnableIO"], context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVolumesModificationsResult = function (output, context) {
    var contents = {
        VolumesModifications: undefined,
        NextToken: undefined,
    };
    if (output.volumeModificationSet === "") {
        contents.VolumesModifications = [];
    }
    else if (output["volumeModificationSet"] !== undefined && output["volumeModificationSet"]["item"] !== undefined) {
        contents.VolumesModifications = deserializeAws_ec2VolumeModificationList(__getArrayIfSingleItem(output["volumeModificationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVolumesResult = function (output, context) {
    var contents = {
        Volumes: undefined,
        NextToken: undefined,
    };
    if (output.volumeSet === "") {
        contents.Volumes = [];
    }
    else if (output["volumeSet"] !== undefined && output["volumeSet"]["item"] !== undefined) {
        contents.Volumes = deserializeAws_ec2VolumeList(__getArrayIfSingleItem(output["volumeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVolumeStatusResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        VolumeStatuses: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.volumeStatusSet === "") {
        contents.VolumeStatuses = [];
    }
    else if (output["volumeStatusSet"] !== undefined && output["volumeStatusSet"]["item"] !== undefined) {
        contents.VolumeStatuses = deserializeAws_ec2VolumeStatusList(__getArrayIfSingleItem(output["volumeStatusSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcAttributeResult = function (output, context) {
    var contents = {
        VpcId: undefined,
        EnableDnsHostnames: undefined,
        EnableDnsSupport: undefined,
    };
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["enableDnsHostnames"] !== undefined) {
        contents.EnableDnsHostnames = deserializeAws_ec2AttributeBooleanValue(output["enableDnsHostnames"], context);
    }
    if (output["enableDnsSupport"] !== undefined) {
        contents.EnableDnsSupport = deserializeAws_ec2AttributeBooleanValue(output["enableDnsSupport"], context);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcClassicLinkDnsSupportResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        Vpcs: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.vpcs === "") {
        contents.Vpcs = [];
    }
    else if (output["vpcs"] !== undefined && output["vpcs"]["item"] !== undefined) {
        contents.Vpcs = deserializeAws_ec2ClassicLinkDnsSupportList(__getArrayIfSingleItem(output["vpcs"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcClassicLinkResult = function (output, context) {
    var contents = {
        Vpcs: undefined,
    };
    if (output.vpcSet === "") {
        contents.Vpcs = [];
    }
    else if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
        contents.Vpcs = deserializeAws_ec2VpcClassicLinkList(__getArrayIfSingleItem(output["vpcSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsResult = function (output, context) {
    var contents = {
        ConnectionNotificationSet: undefined,
        NextToken: undefined,
    };
    if (output.connectionNotificationSet === "") {
        contents.ConnectionNotificationSet = [];
    }
    else if (output["connectionNotificationSet"] !== undefined &&
        output["connectionNotificationSet"]["item"] !== undefined) {
        contents.ConnectionNotificationSet = deserializeAws_ec2ConnectionNotificationSet(__getArrayIfSingleItem(output["connectionNotificationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcEndpointConnectionsResult = function (output, context) {
    var contents = {
        VpcEndpointConnections: undefined,
        NextToken: undefined,
    };
    if (output.vpcEndpointConnectionSet === "") {
        contents.VpcEndpointConnections = [];
    }
    else if (output["vpcEndpointConnectionSet"] !== undefined &&
        output["vpcEndpointConnectionSet"]["item"] !== undefined) {
        contents.VpcEndpointConnections = deserializeAws_ec2VpcEndpointConnectionSet(__getArrayIfSingleItem(output["vpcEndpointConnectionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsResult = function (output, context) {
    var contents = {
        ServiceConfigurations: undefined,
        NextToken: undefined,
    };
    if (output.serviceConfigurationSet === "") {
        contents.ServiceConfigurations = [];
    }
    else if (output["serviceConfigurationSet"] !== undefined &&
        output["serviceConfigurationSet"]["item"] !== undefined) {
        contents.ServiceConfigurations = deserializeAws_ec2ServiceConfigurationSet(__getArrayIfSingleItem(output["serviceConfigurationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcEndpointServicePermissionsResult = function (output, context) {
    var contents = {
        AllowedPrincipals: undefined,
        NextToken: undefined,
    };
    if (output.allowedPrincipals === "") {
        contents.AllowedPrincipals = [];
    }
    else if (output["allowedPrincipals"] !== undefined && output["allowedPrincipals"]["item"] !== undefined) {
        contents.AllowedPrincipals = deserializeAws_ec2AllowedPrincipalSet(__getArrayIfSingleItem(output["allowedPrincipals"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcEndpointServicesResult = function (output, context) {
    var contents = {
        ServiceNames: undefined,
        ServiceDetails: undefined,
        NextToken: undefined,
    };
    if (output.serviceNameSet === "") {
        contents.ServiceNames = [];
    }
    else if (output["serviceNameSet"] !== undefined && output["serviceNameSet"]["item"] !== undefined) {
        contents.ServiceNames = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["serviceNameSet"]["item"]), context);
    }
    if (output.serviceDetailSet === "") {
        contents.ServiceDetails = [];
    }
    else if (output["serviceDetailSet"] !== undefined && output["serviceDetailSet"]["item"] !== undefined) {
        contents.ServiceDetails = deserializeAws_ec2ServiceDetailSet(__getArrayIfSingleItem(output["serviceDetailSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcEndpointsResult = function (output, context) {
    var contents = {
        VpcEndpoints: undefined,
        NextToken: undefined,
    };
    if (output.vpcEndpointSet === "") {
        contents.VpcEndpoints = [];
    }
    else if (output["vpcEndpointSet"] !== undefined && output["vpcEndpointSet"]["item"] !== undefined) {
        contents.VpcEndpoints = deserializeAws_ec2VpcEndpointSet(__getArrayIfSingleItem(output["vpcEndpointSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcPeeringConnectionsResult = function (output, context) {
    var contents = {
        VpcPeeringConnections: undefined,
        NextToken: undefined,
    };
    if (output.vpcPeeringConnectionSet === "") {
        contents.VpcPeeringConnections = [];
    }
    else if (output["vpcPeeringConnectionSet"] !== undefined &&
        output["vpcPeeringConnectionSet"]["item"] !== undefined) {
        contents.VpcPeeringConnections = deserializeAws_ec2VpcPeeringConnectionList(__getArrayIfSingleItem(output["vpcPeeringConnectionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpcsResult = function (output, context) {
    var contents = {
        Vpcs: undefined,
        NextToken: undefined,
    };
    if (output.vpcSet === "") {
        contents.Vpcs = [];
    }
    else if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
        contents.Vpcs = deserializeAws_ec2VpcList(__getArrayIfSingleItem(output["vpcSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpnConnectionsResult = function (output, context) {
    var contents = {
        VpnConnections: undefined,
    };
    if (output.vpnConnectionSet === "") {
        contents.VpnConnections = [];
    }
    else if (output["vpnConnectionSet"] !== undefined && output["vpnConnectionSet"]["item"] !== undefined) {
        contents.VpnConnections = deserializeAws_ec2VpnConnectionList(__getArrayIfSingleItem(output["vpnConnectionSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DescribeVpnGatewaysResult = function (output, context) {
    var contents = {
        VpnGateways: undefined,
    };
    if (output.vpnGatewaySet === "") {
        contents.VpnGateways = [];
    }
    else if (output["vpnGatewaySet"] !== undefined && output["vpnGatewaySet"]["item"] !== undefined) {
        contents.VpnGateways = deserializeAws_ec2VpnGatewayList(__getArrayIfSingleItem(output["vpnGatewaySet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DestinationOptionsResponse = function (output, context) {
    var contents = {
        FileFormat: undefined,
        HiveCompatiblePartitions: undefined,
        PerHourPartition: undefined,
    };
    if (output["fileFormat"] !== undefined) {
        contents.FileFormat = __expectString(output["fileFormat"]);
    }
    if (output["hiveCompatiblePartitions"] !== undefined) {
        contents.HiveCompatiblePartitions = __parseBoolean(output["hiveCompatiblePartitions"]);
    }
    if (output["perHourPartition"] !== undefined) {
        contents.PerHourPartition = __parseBoolean(output["perHourPartition"]);
    }
    return contents;
};
var deserializeAws_ec2DetachClassicLinkVpcResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2DhcpConfiguration = function (output, context) {
    var contents = {
        Key: undefined,
        Values: undefined,
    };
    if (output["key"] !== undefined) {
        contents.Key = __expectString(output["key"]);
    }
    if (output.valueSet === "") {
        contents.Values = [];
    }
    else if (output["valueSet"] !== undefined && output["valueSet"]["item"] !== undefined) {
        contents.Values = deserializeAws_ec2DhcpConfigurationValueList(__getArrayIfSingleItem(output["valueSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DhcpConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DhcpConfiguration(entry, context);
    });
};
var deserializeAws_ec2DhcpConfigurationValueList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AttributeValue(entry, context);
    });
};
var deserializeAws_ec2DhcpOptions = function (output, context) {
    var contents = {
        DhcpConfigurations: undefined,
        DhcpOptionsId: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output.dhcpConfigurationSet === "") {
        contents.DhcpConfigurations = [];
    }
    else if (output["dhcpConfigurationSet"] !== undefined && output["dhcpConfigurationSet"]["item"] !== undefined) {
        contents.DhcpConfigurations = deserializeAws_ec2DhcpConfigurationList(__getArrayIfSingleItem(output["dhcpConfigurationSet"]["item"]), context);
    }
    if (output["dhcpOptionsId"] !== undefined) {
        contents.DhcpOptionsId = __expectString(output["dhcpOptionsId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DhcpOptionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DhcpOptions(entry, context);
    });
};
var deserializeAws_ec2DirectoryServiceAuthentication = function (output, context) {
    var contents = {
        DirectoryId: undefined,
    };
    if (output["directoryId"] !== undefined) {
        contents.DirectoryId = __expectString(output["directoryId"]);
    }
    return contents;
};
var deserializeAws_ec2DisableEbsEncryptionByDefaultResult = function (output, context) {
    var contents = {
        EbsEncryptionByDefault: undefined,
    };
    if (output["ebsEncryptionByDefault"] !== undefined) {
        contents.EbsEncryptionByDefault = __parseBoolean(output["ebsEncryptionByDefault"]);
    }
    return contents;
};
var deserializeAws_ec2DisableFastLaunchResult = function (output, context) {
    var contents = {
        ImageId: undefined,
        ResourceType: undefined,
        SnapshotConfiguration: undefined,
        LaunchTemplate: undefined,
        MaxParallelLaunches: undefined,
        OwnerId: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        StateTransitionTime: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["snapshotConfiguration"] !== undefined) {
        contents.SnapshotConfiguration = deserializeAws_ec2FastLaunchSnapshotConfigurationResponse(output["snapshotConfiguration"], context);
    }
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
    }
    if (output["maxParallelLaunches"] !== undefined) {
        contents.MaxParallelLaunches = __strictParseInt32(output["maxParallelLaunches"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["stateTransitionTime"] !== undefined) {
        contents.StateTransitionTime = __expectNonNull(__parseRfc3339DateTime(output["stateTransitionTime"]));
    }
    return contents;
};
var deserializeAws_ec2DisableFastSnapshotRestoreErrorItem = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        FastSnapshotRestoreStateErrors: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output.fastSnapshotRestoreStateErrorSet === "") {
        contents.FastSnapshotRestoreStateErrors = [];
    }
    else if (output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
        output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined) {
        contents.FastSnapshotRestoreStateErrors = deserializeAws_ec2DisableFastSnapshotRestoreStateErrorSet(__getArrayIfSingleItem(output["fastSnapshotRestoreStateErrorSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DisableFastSnapshotRestoreErrorSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DisableFastSnapshotRestoreErrorItem(entry, context);
    });
};
var deserializeAws_ec2DisableFastSnapshotRestoresResult = function (output, context) {
    var contents = {
        Successful: undefined,
        Unsuccessful: undefined,
    };
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = deserializeAws_ec2DisableFastSnapshotRestoreSuccessSet(__getArrayIfSingleItem(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2DisableFastSnapshotRestoreErrorSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2DisableFastSnapshotRestoreStateError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2DisableFastSnapshotRestoreStateErrorItem = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        Error: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2DisableFastSnapshotRestoreStateError(output["error"], context);
    }
    return contents;
};
var deserializeAws_ec2DisableFastSnapshotRestoreStateErrorSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DisableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};
var deserializeAws_ec2DisableFastSnapshotRestoreSuccessItem = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        AvailabilityZone: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        OwnerId: undefined,
        OwnerAlias: undefined,
        EnablingTime: undefined,
        OptimizingTime: undefined,
        EnabledTime: undefined,
        DisablingTime: undefined,
        DisabledTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output["enablingTime"] !== undefined) {
        contents.EnablingTime = __expectNonNull(__parseRfc3339DateTime(output["enablingTime"]));
    }
    if (output["optimizingTime"] !== undefined) {
        contents.OptimizingTime = __expectNonNull(__parseRfc3339DateTime(output["optimizingTime"]));
    }
    if (output["enabledTime"] !== undefined) {
        contents.EnabledTime = __expectNonNull(__parseRfc3339DateTime(output["enabledTime"]));
    }
    if (output["disablingTime"] !== undefined) {
        contents.DisablingTime = __expectNonNull(__parseRfc3339DateTime(output["disablingTime"]));
    }
    if (output["disabledTime"] !== undefined) {
        contents.DisabledTime = __expectNonNull(__parseRfc3339DateTime(output["disabledTime"]));
    }
    return contents;
};
var deserializeAws_ec2DisableFastSnapshotRestoreSuccessSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DisableFastSnapshotRestoreSuccessItem(entry, context);
    });
};
var deserializeAws_ec2DisableImageDeprecationResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2DisableIpamOrganizationAdminAccountResult = function (output, context) {
    var contents = {
        Success: undefined,
    };
    if (output["success"] !== undefined) {
        contents.Success = __parseBoolean(output["success"]);
    }
    return contents;
};
var deserializeAws_ec2DisableSerialConsoleAccessResult = function (output, context) {
    var contents = {
        SerialConsoleAccessEnabled: undefined,
    };
    if (output["serialConsoleAccessEnabled"] !== undefined) {
        contents.SerialConsoleAccessEnabled = __parseBoolean(output["serialConsoleAccessEnabled"]);
    }
    return contents;
};
var deserializeAws_ec2DisableTransitGatewayRouteTablePropagationResult = function (output, context) {
    var contents = {
        Propagation: undefined,
    };
    if (output["propagation"] !== undefined) {
        contents.Propagation = deserializeAws_ec2TransitGatewayPropagation(output["propagation"], context);
    }
    return contents;
};
var deserializeAws_ec2DisableVpcClassicLinkDnsSupportResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2DisableVpcClassicLinkResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2DisassociateClientVpnTargetNetworkResult = function (output, context) {
    var contents = {
        AssociationId: undefined,
        Status: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2AssociationStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2DisassociateEnclaveCertificateIamRoleResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2DisassociateIamInstanceProfileResult = function (output, context) {
    var contents = {
        IamInstanceProfileAssociation: undefined,
    };
    if (output["iamInstanceProfileAssociation"] !== undefined) {
        contents.IamInstanceProfileAssociation = deserializeAws_ec2IamInstanceProfileAssociation(output["iamInstanceProfileAssociation"], context);
    }
    return contents;
};
var deserializeAws_ec2DisassociateInstanceEventWindowResult = function (output, context) {
    var contents = {
        InstanceEventWindow: undefined,
    };
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = deserializeAws_ec2InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
var deserializeAws_ec2DisassociateSubnetCidrBlockResult = function (output, context) {
    var contents = {
        Ipv6CidrBlockAssociation: undefined,
        SubnetId: undefined,
    };
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = deserializeAws_ec2SubnetIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    return contents;
};
var deserializeAws_ec2DisassociateTransitGatewayMulticastDomainResult = function (output, context) {
    var contents = {
        Associations: undefined,
    };
    if (output["associations"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
var deserializeAws_ec2DisassociateTransitGatewayRouteTableResult = function (output, context) {
    var contents = {
        Association: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2TransitGatewayAssociation(output["association"], context);
    }
    return contents;
};
var deserializeAws_ec2DisassociateTrunkInterfaceResult = function (output, context) {
    var contents = {
        Return: undefined,
        ClientToken: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    return contents;
};
var deserializeAws_ec2DisassociateVpcCidrBlockResult = function (output, context) {
    var contents = {
        Ipv6CidrBlockAssociation: undefined,
        CidrBlockAssociation: undefined,
        VpcId: undefined,
    };
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = deserializeAws_ec2VpcIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["cidrBlockAssociation"] !== undefined) {
        contents.CidrBlockAssociation = deserializeAws_ec2VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2DiskImageDescription = function (output, context) {
    var contents = {
        Checksum: undefined,
        Format: undefined,
        ImportManifestUrl: undefined,
        Size: undefined,
    };
    if (output["checksum"] !== undefined) {
        contents.Checksum = __expectString(output["checksum"]);
    }
    if (output["format"] !== undefined) {
        contents.Format = __expectString(output["format"]);
    }
    if (output["importManifestUrl"] !== undefined) {
        contents.ImportManifestUrl = __expectString(output["importManifestUrl"]);
    }
    if (output["size"] !== undefined) {
        contents.Size = __strictParseLong(output["size"]);
    }
    return contents;
};
var deserializeAws_ec2DiskImageVolumeDescription = function (output, context) {
    var contents = {
        Id: undefined,
        Size: undefined,
    };
    if (output["id"] !== undefined) {
        contents.Id = __expectString(output["id"]);
    }
    if (output["size"] !== undefined) {
        contents.Size = __strictParseLong(output["size"]);
    }
    return contents;
};
var deserializeAws_ec2DiskInfo = function (output, context) {
    var contents = {
        SizeInGB: undefined,
        Count: undefined,
        Type: undefined,
    };
    if (output["sizeInGB"] !== undefined) {
        contents.SizeInGB = __strictParseLong(output["sizeInGB"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    return contents;
};
var deserializeAws_ec2DiskInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DiskInfo(entry, context);
    });
};
var deserializeAws_ec2DnsEntry = function (output, context) {
    var contents = {
        DnsName: undefined,
        HostedZoneId: undefined,
    };
    if (output["dnsName"] !== undefined) {
        contents.DnsName = __expectString(output["dnsName"]);
    }
    if (output["hostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["hostedZoneId"]);
    }
    return contents;
};
var deserializeAws_ec2DnsEntrySet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DnsEntry(entry, context);
    });
};
var deserializeAws_ec2DnsOptions = function (output, context) {
    var contents = {
        DnsRecordIpType: undefined,
    };
    if (output["dnsRecordIpType"] !== undefined) {
        contents.DnsRecordIpType = __expectString(output["dnsRecordIpType"]);
    }
    return contents;
};
var deserializeAws_ec2EbsBlockDevice = function (output, context) {
    var contents = {
        DeleteOnTermination: undefined,
        Iops: undefined,
        SnapshotId: undefined,
        VolumeSize: undefined,
        VolumeType: undefined,
        KmsKeyId: undefined,
        Throughput: undefined,
        OutpostArn: undefined,
        Encrypted: undefined,
    };
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["iops"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    if (output["volumeType"] !== undefined) {
        contents.VolumeType = __expectString(output["volumeType"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["throughput"] !== undefined) {
        contents.Throughput = __strictParseInt32(output["throughput"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    return contents;
};
var deserializeAws_ec2EbsInfo = function (output, context) {
    var contents = {
        EbsOptimizedSupport: undefined,
        EncryptionSupport: undefined,
        EbsOptimizedInfo: undefined,
        NvmeSupport: undefined,
    };
    if (output["ebsOptimizedSupport"] !== undefined) {
        contents.EbsOptimizedSupport = __expectString(output["ebsOptimizedSupport"]);
    }
    if (output["encryptionSupport"] !== undefined) {
        contents.EncryptionSupport = __expectString(output["encryptionSupport"]);
    }
    if (output["ebsOptimizedInfo"] !== undefined) {
        contents.EbsOptimizedInfo = deserializeAws_ec2EbsOptimizedInfo(output["ebsOptimizedInfo"], context);
    }
    if (output["nvmeSupport"] !== undefined) {
        contents.NvmeSupport = __expectString(output["nvmeSupport"]);
    }
    return contents;
};
var deserializeAws_ec2EbsInstanceBlockDevice = function (output, context) {
    var contents = {
        AttachTime: undefined,
        DeleteOnTermination: undefined,
        Status: undefined,
        VolumeId: undefined,
    };
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = __expectNonNull(__parseRfc3339DateTime(output["attachTime"]));
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    return contents;
};
var deserializeAws_ec2EbsOptimizedInfo = function (output, context) {
    var contents = {
        BaselineBandwidthInMbps: undefined,
        BaselineThroughputInMBps: undefined,
        BaselineIops: undefined,
        MaximumBandwidthInMbps: undefined,
        MaximumThroughputInMBps: undefined,
        MaximumIops: undefined,
    };
    if (output["baselineBandwidthInMbps"] !== undefined) {
        contents.BaselineBandwidthInMbps = __strictParseInt32(output["baselineBandwidthInMbps"]);
    }
    if (output["baselineThroughputInMBps"] !== undefined) {
        contents.BaselineThroughputInMBps = __strictParseFloat(output["baselineThroughputInMBps"]);
    }
    if (output["baselineIops"] !== undefined) {
        contents.BaselineIops = __strictParseInt32(output["baselineIops"]);
    }
    if (output["maximumBandwidthInMbps"] !== undefined) {
        contents.MaximumBandwidthInMbps = __strictParseInt32(output["maximumBandwidthInMbps"]);
    }
    if (output["maximumThroughputInMBps"] !== undefined) {
        contents.MaximumThroughputInMBps = __strictParseFloat(output["maximumThroughputInMBps"]);
    }
    if (output["maximumIops"] !== undefined) {
        contents.MaximumIops = __strictParseInt32(output["maximumIops"]);
    }
    return contents;
};
var deserializeAws_ec2EfaInfo = function (output, context) {
    var contents = {
        MaximumEfaInterfaces: undefined,
    };
    if (output["maximumEfaInterfaces"] !== undefined) {
        contents.MaximumEfaInterfaces = __strictParseInt32(output["maximumEfaInterfaces"]);
    }
    return contents;
};
var deserializeAws_ec2EgressOnlyInternetGateway = function (output, context) {
    var contents = {
        Attachments: undefined,
        EgressOnlyInternetGatewayId: undefined,
        Tags: undefined,
    };
    if (output.attachmentSet === "") {
        contents.Attachments = [];
    }
    else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
        contents.Attachments = deserializeAws_ec2InternetGatewayAttachmentList(__getArrayIfSingleItem(output["attachmentSet"]["item"]), context);
    }
    if (output["egressOnlyInternetGatewayId"] !== undefined) {
        contents.EgressOnlyInternetGatewayId = __expectString(output["egressOnlyInternetGatewayId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2EgressOnlyInternetGatewayList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2EgressOnlyInternetGateway(entry, context);
    });
};
var deserializeAws_ec2ElasticGpuAssociation = function (output, context) {
    var contents = {
        ElasticGpuId: undefined,
        ElasticGpuAssociationId: undefined,
        ElasticGpuAssociationState: undefined,
        ElasticGpuAssociationTime: undefined,
    };
    if (output["elasticGpuId"] !== undefined) {
        contents.ElasticGpuId = __expectString(output["elasticGpuId"]);
    }
    if (output["elasticGpuAssociationId"] !== undefined) {
        contents.ElasticGpuAssociationId = __expectString(output["elasticGpuAssociationId"]);
    }
    if (output["elasticGpuAssociationState"] !== undefined) {
        contents.ElasticGpuAssociationState = __expectString(output["elasticGpuAssociationState"]);
    }
    if (output["elasticGpuAssociationTime"] !== undefined) {
        contents.ElasticGpuAssociationTime = __expectString(output["elasticGpuAssociationTime"]);
    }
    return contents;
};
var deserializeAws_ec2ElasticGpuAssociationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ElasticGpuAssociation(entry, context);
    });
};
var deserializeAws_ec2ElasticGpuHealth = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
var deserializeAws_ec2ElasticGpus = function (output, context) {
    var contents = {
        ElasticGpuId: undefined,
        AvailabilityZone: undefined,
        ElasticGpuType: undefined,
        ElasticGpuHealth: undefined,
        ElasticGpuState: undefined,
        InstanceId: undefined,
        Tags: undefined,
    };
    if (output["elasticGpuId"] !== undefined) {
        contents.ElasticGpuId = __expectString(output["elasticGpuId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["elasticGpuType"] !== undefined) {
        contents.ElasticGpuType = __expectString(output["elasticGpuType"]);
    }
    if (output["elasticGpuHealth"] !== undefined) {
        contents.ElasticGpuHealth = deserializeAws_ec2ElasticGpuHealth(output["elasticGpuHealth"], context);
    }
    if (output["elasticGpuState"] !== undefined) {
        contents.ElasticGpuState = __expectString(output["elasticGpuState"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ElasticGpuSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ElasticGpus(entry, context);
    });
};
var deserializeAws_ec2ElasticGpuSpecificationResponse = function (output, context) {
    var contents = {
        Type: undefined,
    };
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    return contents;
};
var deserializeAws_ec2ElasticGpuSpecificationResponseList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ElasticGpuSpecificationResponse(entry, context);
    });
};
var deserializeAws_ec2ElasticInferenceAcceleratorAssociation = function (output, context) {
    var contents = {
        ElasticInferenceAcceleratorArn: undefined,
        ElasticInferenceAcceleratorAssociationId: undefined,
        ElasticInferenceAcceleratorAssociationState: undefined,
        ElasticInferenceAcceleratorAssociationTime: undefined,
    };
    if (output["elasticInferenceAcceleratorArn"] !== undefined) {
        contents.ElasticInferenceAcceleratorArn = __expectString(output["elasticInferenceAcceleratorArn"]);
    }
    if (output["elasticInferenceAcceleratorAssociationId"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociationId = __expectString(output["elasticInferenceAcceleratorAssociationId"]);
    }
    if (output["elasticInferenceAcceleratorAssociationState"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociationState = __expectString(output["elasticInferenceAcceleratorAssociationState"]);
    }
    if (output["elasticInferenceAcceleratorAssociationTime"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociationTime = __expectNonNull(__parseRfc3339DateTime(output["elasticInferenceAcceleratorAssociationTime"]));
    }
    return contents;
};
var deserializeAws_ec2ElasticInferenceAcceleratorAssociationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ElasticInferenceAcceleratorAssociation(entry, context);
    });
};
var deserializeAws_ec2EnableEbsEncryptionByDefaultResult = function (output, context) {
    var contents = {
        EbsEncryptionByDefault: undefined,
    };
    if (output["ebsEncryptionByDefault"] !== undefined) {
        contents.EbsEncryptionByDefault = __parseBoolean(output["ebsEncryptionByDefault"]);
    }
    return contents;
};
var deserializeAws_ec2EnableFastLaunchResult = function (output, context) {
    var contents = {
        ImageId: undefined,
        ResourceType: undefined,
        SnapshotConfiguration: undefined,
        LaunchTemplate: undefined,
        MaxParallelLaunches: undefined,
        OwnerId: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        StateTransitionTime: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["snapshotConfiguration"] !== undefined) {
        contents.SnapshotConfiguration = deserializeAws_ec2FastLaunchSnapshotConfigurationResponse(output["snapshotConfiguration"], context);
    }
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
    }
    if (output["maxParallelLaunches"] !== undefined) {
        contents.MaxParallelLaunches = __strictParseInt32(output["maxParallelLaunches"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["stateTransitionTime"] !== undefined) {
        contents.StateTransitionTime = __expectNonNull(__parseRfc3339DateTime(output["stateTransitionTime"]));
    }
    return contents;
};
var deserializeAws_ec2EnableFastSnapshotRestoreErrorItem = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        FastSnapshotRestoreStateErrors: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output.fastSnapshotRestoreStateErrorSet === "") {
        contents.FastSnapshotRestoreStateErrors = [];
    }
    else if (output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
        output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined) {
        contents.FastSnapshotRestoreStateErrors = deserializeAws_ec2EnableFastSnapshotRestoreStateErrorSet(__getArrayIfSingleItem(output["fastSnapshotRestoreStateErrorSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2EnableFastSnapshotRestoreErrorSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2EnableFastSnapshotRestoreErrorItem(entry, context);
    });
};
var deserializeAws_ec2EnableFastSnapshotRestoresResult = function (output, context) {
    var contents = {
        Successful: undefined,
        Unsuccessful: undefined,
    };
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = deserializeAws_ec2EnableFastSnapshotRestoreSuccessSet(__getArrayIfSingleItem(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2EnableFastSnapshotRestoreErrorSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2EnableFastSnapshotRestoreStateError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2EnableFastSnapshotRestoreStateErrorItem = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        Error: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2EnableFastSnapshotRestoreStateError(output["error"], context);
    }
    return contents;
};
var deserializeAws_ec2EnableFastSnapshotRestoreStateErrorSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2EnableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};
var deserializeAws_ec2EnableFastSnapshotRestoreSuccessItem = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        AvailabilityZone: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        OwnerId: undefined,
        OwnerAlias: undefined,
        EnablingTime: undefined,
        OptimizingTime: undefined,
        EnabledTime: undefined,
        DisablingTime: undefined,
        DisabledTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output["enablingTime"] !== undefined) {
        contents.EnablingTime = __expectNonNull(__parseRfc3339DateTime(output["enablingTime"]));
    }
    if (output["optimizingTime"] !== undefined) {
        contents.OptimizingTime = __expectNonNull(__parseRfc3339DateTime(output["optimizingTime"]));
    }
    if (output["enabledTime"] !== undefined) {
        contents.EnabledTime = __expectNonNull(__parseRfc3339DateTime(output["enabledTime"]));
    }
    if (output["disablingTime"] !== undefined) {
        contents.DisablingTime = __expectNonNull(__parseRfc3339DateTime(output["disablingTime"]));
    }
    if (output["disabledTime"] !== undefined) {
        contents.DisabledTime = __expectNonNull(__parseRfc3339DateTime(output["disabledTime"]));
    }
    return contents;
};
var deserializeAws_ec2EnableFastSnapshotRestoreSuccessSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2EnableFastSnapshotRestoreSuccessItem(entry, context);
    });
};
var deserializeAws_ec2EnableImageDeprecationResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2EnableIpamOrganizationAdminAccountResult = function (output, context) {
    var contents = {
        Success: undefined,
    };
    if (output["success"] !== undefined) {
        contents.Success = __parseBoolean(output["success"]);
    }
    return contents;
};
var deserializeAws_ec2EnableSerialConsoleAccessResult = function (output, context) {
    var contents = {
        SerialConsoleAccessEnabled: undefined,
    };
    if (output["serialConsoleAccessEnabled"] !== undefined) {
        contents.SerialConsoleAccessEnabled = __parseBoolean(output["serialConsoleAccessEnabled"]);
    }
    return contents;
};
var deserializeAws_ec2EnableTransitGatewayRouteTablePropagationResult = function (output, context) {
    var contents = {
        Propagation: undefined,
    };
    if (output["propagation"] !== undefined) {
        contents.Propagation = deserializeAws_ec2TransitGatewayPropagation(output["propagation"], context);
    }
    return contents;
};
var deserializeAws_ec2EnableVpcClassicLinkDnsSupportResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2EnableVpcClassicLinkResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2EnclaveOptions = function (output, context) {
    var contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
var deserializeAws_ec2EndpointSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClientVpnEndpoint(entry, context);
    });
};
var deserializeAws_ec2ErrorSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ValidationError(entry, context);
    });
};
var deserializeAws_ec2EventInformation = function (output, context) {
    var contents = {
        EventDescription: undefined,
        EventSubType: undefined,
        InstanceId: undefined,
    };
    if (output["eventDescription"] !== undefined) {
        contents.EventDescription = __expectString(output["eventDescription"]);
    }
    if (output["eventSubType"] !== undefined) {
        contents.EventSubType = __expectString(output["eventSubType"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
var deserializeAws_ec2ExcludedInstanceTypeSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2Explanation = function (output, context) {
    var contents = {
        Acl: undefined,
        AclRule: undefined,
        Address: undefined,
        Addresses: undefined,
        AttachedTo: undefined,
        AvailabilityZones: undefined,
        Cidrs: undefined,
        Component: undefined,
        CustomerGateway: undefined,
        Destination: undefined,
        DestinationVpc: undefined,
        Direction: undefined,
        ExplanationCode: undefined,
        IngressRouteTable: undefined,
        InternetGateway: undefined,
        LoadBalancerArn: undefined,
        ClassicLoadBalancerListener: undefined,
        LoadBalancerListenerPort: undefined,
        LoadBalancerTarget: undefined,
        LoadBalancerTargetGroup: undefined,
        LoadBalancerTargetGroups: undefined,
        LoadBalancerTargetPort: undefined,
        ElasticLoadBalancerListener: undefined,
        MissingComponent: undefined,
        NatGateway: undefined,
        NetworkInterface: undefined,
        PacketField: undefined,
        VpcPeeringConnection: undefined,
        Port: undefined,
        PortRanges: undefined,
        PrefixList: undefined,
        Protocols: undefined,
        RouteTableRoute: undefined,
        RouteTable: undefined,
        SecurityGroup: undefined,
        SecurityGroupRule: undefined,
        SecurityGroups: undefined,
        SourceVpc: undefined,
        State: undefined,
        Subnet: undefined,
        SubnetRouteTable: undefined,
        Vpc: undefined,
        VpcEndpoint: undefined,
        VpnConnection: undefined,
        VpnGateway: undefined,
        TransitGateway: undefined,
        TransitGatewayRouteTable: undefined,
        TransitGatewayRouteTableRoute: undefined,
        TransitGatewayAttachment: undefined,
    };
    if (output["acl"] !== undefined) {
        contents.Acl = deserializeAws_ec2AnalysisComponent(output["acl"], context);
    }
    if (output["aclRule"] !== undefined) {
        contents.AclRule = deserializeAws_ec2AnalysisAclRule(output["aclRule"], context);
    }
    if (output["address"] !== undefined) {
        contents.Address = __expectString(output["address"]);
    }
    if (output.addressSet === "") {
        contents.Addresses = [];
    }
    else if (output["addressSet"] !== undefined && output["addressSet"]["item"] !== undefined) {
        contents.Addresses = deserializeAws_ec2IpAddressList(__getArrayIfSingleItem(output["addressSet"]["item"]), context);
    }
    if (output["attachedTo"] !== undefined) {
        contents.AttachedTo = deserializeAws_ec2AnalysisComponent(output["attachedTo"], context);
    }
    if (output.availabilityZoneSet === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["availabilityZoneSet"]["item"]), context);
    }
    if (output.cidrSet === "") {
        contents.Cidrs = [];
    }
    else if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
        contents.Cidrs = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["cidrSet"]["item"]), context);
    }
    if (output["component"] !== undefined) {
        contents.Component = deserializeAws_ec2AnalysisComponent(output["component"], context);
    }
    if (output["customerGateway"] !== undefined) {
        contents.CustomerGateway = deserializeAws_ec2AnalysisComponent(output["customerGateway"], context);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = deserializeAws_ec2AnalysisComponent(output["destination"], context);
    }
    if (output["destinationVpc"] !== undefined) {
        contents.DestinationVpc = deserializeAws_ec2AnalysisComponent(output["destinationVpc"], context);
    }
    if (output["direction"] !== undefined) {
        contents.Direction = __expectString(output["direction"]);
    }
    if (output["explanationCode"] !== undefined) {
        contents.ExplanationCode = __expectString(output["explanationCode"]);
    }
    if (output["ingressRouteTable"] !== undefined) {
        contents.IngressRouteTable = deserializeAws_ec2AnalysisComponent(output["ingressRouteTable"], context);
    }
    if (output["internetGateway"] !== undefined) {
        contents.InternetGateway = deserializeAws_ec2AnalysisComponent(output["internetGateway"], context);
    }
    if (output["loadBalancerArn"] !== undefined) {
        contents.LoadBalancerArn = __expectString(output["loadBalancerArn"]);
    }
    if (output["classicLoadBalancerListener"] !== undefined) {
        contents.ClassicLoadBalancerListener = deserializeAws_ec2AnalysisLoadBalancerListener(output["classicLoadBalancerListener"], context);
    }
    if (output["loadBalancerListenerPort"] !== undefined) {
        contents.LoadBalancerListenerPort = __strictParseInt32(output["loadBalancerListenerPort"]);
    }
    if (output["loadBalancerTarget"] !== undefined) {
        contents.LoadBalancerTarget = deserializeAws_ec2AnalysisLoadBalancerTarget(output["loadBalancerTarget"], context);
    }
    if (output["loadBalancerTargetGroup"] !== undefined) {
        contents.LoadBalancerTargetGroup = deserializeAws_ec2AnalysisComponent(output["loadBalancerTargetGroup"], context);
    }
    if (output.loadBalancerTargetGroupSet === "") {
        contents.LoadBalancerTargetGroups = [];
    }
    else if (output["loadBalancerTargetGroupSet"] !== undefined &&
        output["loadBalancerTargetGroupSet"]["item"] !== undefined) {
        contents.LoadBalancerTargetGroups = deserializeAws_ec2AnalysisComponentList(__getArrayIfSingleItem(output["loadBalancerTargetGroupSet"]["item"]), context);
    }
    if (output["loadBalancerTargetPort"] !== undefined) {
        contents.LoadBalancerTargetPort = __strictParseInt32(output["loadBalancerTargetPort"]);
    }
    if (output["elasticLoadBalancerListener"] !== undefined) {
        contents.ElasticLoadBalancerListener = deserializeAws_ec2AnalysisComponent(output["elasticLoadBalancerListener"], context);
    }
    if (output["missingComponent"] !== undefined) {
        contents.MissingComponent = __expectString(output["missingComponent"]);
    }
    if (output["natGateway"] !== undefined) {
        contents.NatGateway = deserializeAws_ec2AnalysisComponent(output["natGateway"], context);
    }
    if (output["networkInterface"] !== undefined) {
        contents.NetworkInterface = deserializeAws_ec2AnalysisComponent(output["networkInterface"], context);
    }
    if (output["packetField"] !== undefined) {
        contents.PacketField = __expectString(output["packetField"]);
    }
    if (output["vpcPeeringConnection"] !== undefined) {
        contents.VpcPeeringConnection = deserializeAws_ec2AnalysisComponent(output["vpcPeeringConnection"], context);
    }
    if (output["port"] !== undefined) {
        contents.Port = __strictParseInt32(output["port"]);
    }
    if (output.portRangeSet === "") {
        contents.PortRanges = [];
    }
    else if (output["portRangeSet"] !== undefined && output["portRangeSet"]["item"] !== undefined) {
        contents.PortRanges = deserializeAws_ec2PortRangeList(__getArrayIfSingleItem(output["portRangeSet"]["item"]), context);
    }
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2AnalysisComponent(output["prefixList"], context);
    }
    if (output.protocolSet === "") {
        contents.Protocols = [];
    }
    else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
        contents.Protocols = deserializeAws_ec2StringList(__getArrayIfSingleItem(output["protocolSet"]["item"]), context);
    }
    if (output["routeTableRoute"] !== undefined) {
        contents.RouteTableRoute = deserializeAws_ec2AnalysisRouteTableRoute(output["routeTableRoute"], context);
    }
    if (output["routeTable"] !== undefined) {
        contents.RouteTable = deserializeAws_ec2AnalysisComponent(output["routeTable"], context);
    }
    if (output["securityGroup"] !== undefined) {
        contents.SecurityGroup = deserializeAws_ec2AnalysisComponent(output["securityGroup"], context);
    }
    if (output["securityGroupRule"] !== undefined) {
        contents.SecurityGroupRule = deserializeAws_ec2AnalysisSecurityGroupRule(output["securityGroupRule"], context);
    }
    if (output.securityGroupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2AnalysisComponentList(__getArrayIfSingleItem(output["securityGroupSet"]["item"]), context);
    }
    if (output["sourceVpc"] !== undefined) {
        contents.SourceVpc = deserializeAws_ec2AnalysisComponent(output["sourceVpc"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2AnalysisComponent(output["subnet"], context);
    }
    if (output["subnetRouteTable"] !== undefined) {
        contents.SubnetRouteTable = deserializeAws_ec2AnalysisComponent(output["subnetRouteTable"], context);
    }
    if (output["vpc"] !== undefined) {
        contents.Vpc = deserializeAws_ec2AnalysisComponent(output["vpc"], context);
    }
    if (output["vpcEndpoint"] !== undefined) {
        contents.VpcEndpoint = deserializeAws_ec2AnalysisComponent(output["vpcEndpoint"], context);
    }
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2AnalysisComponent(output["vpnConnection"], context);
    }
    if (output["vpnGateway"] !== undefined) {
        contents.VpnGateway = deserializeAws_ec2AnalysisComponent(output["vpnGateway"], context);
    }
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2AnalysisComponent(output["transitGateway"], context);
    }
    if (output["transitGatewayRouteTable"] !== undefined) {
        contents.TransitGatewayRouteTable = deserializeAws_ec2AnalysisComponent(output["transitGatewayRouteTable"], context);
    }
    if (output["transitGatewayRouteTableRoute"] !== undefined) {
        contents.TransitGatewayRouteTableRoute = deserializeAws_ec2TransitGatewayRouteTableRoute(output["transitGatewayRouteTableRoute"], context);
    }
    if (output["transitGatewayAttachment"] !== undefined) {
        contents.TransitGatewayAttachment = deserializeAws_ec2AnalysisComponent(output["transitGatewayAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2ExplanationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Explanation(entry, context);
    });
};
var deserializeAws_ec2ExportClientVpnClientCertificateRevocationListResult = function (output, context) {
    var contents = {
        CertificateRevocationList: undefined,
        Status: undefined,
    };
    if (output["certificateRevocationList"] !== undefined) {
        contents.CertificateRevocationList = __expectString(output["certificateRevocationList"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientCertificateRevocationListStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2ExportClientVpnClientConfigurationResult = function (output, context) {
    var contents = {
        ClientConfiguration: undefined,
    };
    if (output["clientConfiguration"] !== undefined) {
        contents.ClientConfiguration = __expectString(output["clientConfiguration"]);
    }
    return contents;
};
var deserializeAws_ec2ExportImageResult = function (output, context) {
    var contents = {
        Description: undefined,
        DiskImageFormat: undefined,
        ExportImageTaskId: undefined,
        ImageId: undefined,
        RoleName: undefined,
        Progress: undefined,
        S3ExportLocation: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["diskImageFormat"] !== undefined) {
        contents.DiskImageFormat = __expectString(output["diskImageFormat"]);
    }
    if (output["exportImageTaskId"] !== undefined) {
        contents.ExportImageTaskId = __expectString(output["exportImageTaskId"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["roleName"] !== undefined) {
        contents.RoleName = __expectString(output["roleName"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["s3ExportLocation"] !== undefined) {
        contents.S3ExportLocation = deserializeAws_ec2ExportTaskS3Location(output["s3ExportLocation"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ExportImageTask = function (output, context) {
    var contents = {
        Description: undefined,
        ExportImageTaskId: undefined,
        ImageId: undefined,
        Progress: undefined,
        S3ExportLocation: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["exportImageTaskId"] !== undefined) {
        contents.ExportImageTaskId = __expectString(output["exportImageTaskId"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["s3ExportLocation"] !== undefined) {
        contents.S3ExportLocation = deserializeAws_ec2ExportTaskS3Location(output["s3ExportLocation"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ExportImageTaskList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ExportImageTask(entry, context);
    });
};
var deserializeAws_ec2ExportTask = function (output, context) {
    var contents = {
        Description: undefined,
        ExportTaskId: undefined,
        ExportToS3Task: undefined,
        InstanceExportDetails: undefined,
        State: undefined,
        StatusMessage: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["exportTaskId"] !== undefined) {
        contents.ExportTaskId = __expectString(output["exportTaskId"]);
    }
    if (output["exportToS3"] !== undefined) {
        contents.ExportToS3Task = deserializeAws_ec2ExportToS3Task(output["exportToS3"], context);
    }
    if (output["instanceExport"] !== undefined) {
        contents.InstanceExportDetails = deserializeAws_ec2InstanceExportDetails(output["instanceExport"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ExportTaskList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ExportTask(entry, context);
    });
};
var deserializeAws_ec2ExportTaskS3Location = function (output, context) {
    var contents = {
        S3Bucket: undefined,
        S3Prefix: undefined,
    };
    if (output["s3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["s3Bucket"]);
    }
    if (output["s3Prefix"] !== undefined) {
        contents.S3Prefix = __expectString(output["s3Prefix"]);
    }
    return contents;
};
var deserializeAws_ec2ExportToS3Task = function (output, context) {
    var contents = {
        ContainerFormat: undefined,
        DiskImageFormat: undefined,
        S3Bucket: undefined,
        S3Key: undefined,
    };
    if (output["containerFormat"] !== undefined) {
        contents.ContainerFormat = __expectString(output["containerFormat"]);
    }
    if (output["diskImageFormat"] !== undefined) {
        contents.DiskImageFormat = __expectString(output["diskImageFormat"]);
    }
    if (output["s3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["s3Bucket"]);
    }
    if (output["s3Key"] !== undefined) {
        contents.S3Key = __expectString(output["s3Key"]);
    }
    return contents;
};
var deserializeAws_ec2ExportTransitGatewayRoutesResult = function (output, context) {
    var contents = {
        S3Location: undefined,
    };
    if (output["s3Location"] !== undefined) {
        contents.S3Location = __expectString(output["s3Location"]);
    }
    return contents;
};
var deserializeAws_ec2FailedCapacityReservationFleetCancellationResult = function (output, context) {
    var contents = {
        CapacityReservationFleetId: undefined,
        CancelCapacityReservationFleetError: undefined,
    };
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
    }
    if (output["cancelCapacityReservationFleetError"] !== undefined) {
        contents.CancelCapacityReservationFleetError = deserializeAws_ec2CancelCapacityReservationFleetError(output["cancelCapacityReservationFleetError"], context);
    }
    return contents;
};
var deserializeAws_ec2FailedCapacityReservationFleetCancellationResultSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FailedCapacityReservationFleetCancellationResult(entry, context);
    });
};
var deserializeAws_ec2FailedQueuedPurchaseDeletion = function (output, context) {
    var contents = {
        Error: undefined,
        ReservedInstancesId: undefined,
    };
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2DeleteQueuedReservedInstancesError(output["error"], context);
    }
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    return contents;
};
var deserializeAws_ec2FailedQueuedPurchaseDeletionSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FailedQueuedPurchaseDeletion(entry, context);
    });
};
var deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse = function (output, context) {
    var contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        Version: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["version"] !== undefined) {
        contents.Version = __expectString(output["version"]);
    }
    return contents;
};
var deserializeAws_ec2FastLaunchSnapshotConfigurationResponse = function (output, context) {
    var contents = {
        TargetResourceCount: undefined,
    };
    if (output["targetResourceCount"] !== undefined) {
        contents.TargetResourceCount = __strictParseInt32(output["targetResourceCount"]);
    }
    return contents;
};
var deserializeAws_ec2FederatedAuthentication = function (output, context) {
    var contents = {
        SamlProviderArn: undefined,
        SelfServiceSamlProviderArn: undefined,
    };
    if (output["samlProviderArn"] !== undefined) {
        contents.SamlProviderArn = __expectString(output["samlProviderArn"]);
    }
    if (output["selfServiceSamlProviderArn"] !== undefined) {
        contents.SelfServiceSamlProviderArn = __expectString(output["selfServiceSamlProviderArn"]);
    }
    return contents;
};
var deserializeAws_ec2FleetCapacityReservation = function (output, context) {
    var contents = {
        CapacityReservationId: undefined,
        AvailabilityZoneId: undefined,
        InstanceType: undefined,
        InstancePlatform: undefined,
        AvailabilityZone: undefined,
        TotalInstanceCount: undefined,
        FulfilledCapacity: undefined,
        EbsOptimized: undefined,
        CreateDate: undefined,
        Weight: undefined,
        Priority: undefined,
    };
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["instancePlatform"] !== undefined) {
        contents.InstancePlatform = __expectString(output["instancePlatform"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["totalInstanceCount"] !== undefined) {
        contents.TotalInstanceCount = __strictParseInt32(output["totalInstanceCount"]);
    }
    if (output["fulfilledCapacity"] !== undefined) {
        contents.FulfilledCapacity = __strictParseFloat(output["fulfilledCapacity"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTime(output["createDate"]));
    }
    if (output["weight"] !== undefined) {
        contents.Weight = __strictParseFloat(output["weight"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = __strictParseInt32(output["priority"]);
    }
    return contents;
};
var deserializeAws_ec2FleetCapacityReservationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FleetCapacityReservation(entry, context);
    });
};
var deserializeAws_ec2FleetData = function (output, context) {
    var contents = {
        ActivityStatus: undefined,
        CreateTime: undefined,
        FleetId: undefined,
        FleetState: undefined,
        ClientToken: undefined,
        ExcessCapacityTerminationPolicy: undefined,
        FulfilledCapacity: undefined,
        FulfilledOnDemandCapacity: undefined,
        LaunchTemplateConfigs: undefined,
        TargetCapacitySpecification: undefined,
        TerminateInstancesWithExpiration: undefined,
        Type: undefined,
        ValidFrom: undefined,
        ValidUntil: undefined,
        ReplaceUnhealthyInstances: undefined,
        SpotOptions: undefined,
        OnDemandOptions: undefined,
        Tags: undefined,
        Errors: undefined,
        Instances: undefined,
        Context: undefined,
    };
    if (output["activityStatus"] !== undefined) {
        contents.ActivityStatus = __expectString(output["activityStatus"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = __expectString(output["fleetId"]);
    }
    if (output["fleetState"] !== undefined) {
        contents.FleetState = __expectString(output["fleetState"]);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["excessCapacityTerminationPolicy"] !== undefined) {
        contents.ExcessCapacityTerminationPolicy = __expectString(output["excessCapacityTerminationPolicy"]);
    }
    if (output["fulfilledCapacity"] !== undefined) {
        contents.FulfilledCapacity = __strictParseFloat(output["fulfilledCapacity"]);
    }
    if (output["fulfilledOnDemandCapacity"] !== undefined) {
        contents.FulfilledOnDemandCapacity = __strictParseFloat(output["fulfilledOnDemandCapacity"]);
    }
    if (output.launchTemplateConfigs === "") {
        contents.LaunchTemplateConfigs = [];
    }
    else if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
        contents.LaunchTemplateConfigs = deserializeAws_ec2FleetLaunchTemplateConfigList(__getArrayIfSingleItem(output["launchTemplateConfigs"]["item"]), context);
    }
    if (output["targetCapacitySpecification"] !== undefined) {
        contents.TargetCapacitySpecification = deserializeAws_ec2TargetCapacitySpecification(output["targetCapacitySpecification"], context);
    }
    if (output["terminateInstancesWithExpiration"] !== undefined) {
        contents.TerminateInstancesWithExpiration = __parseBoolean(output["terminateInstancesWithExpiration"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["validFrom"] !== undefined) {
        contents.ValidFrom = __expectNonNull(__parseRfc3339DateTime(output["validFrom"]));
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = __expectNonNull(__parseRfc3339DateTime(output["validUntil"]));
    }
    if (output["replaceUnhealthyInstances"] !== undefined) {
        contents.ReplaceUnhealthyInstances = __parseBoolean(output["replaceUnhealthyInstances"]);
    }
    if (output["spotOptions"] !== undefined) {
        contents.SpotOptions = deserializeAws_ec2SpotOptions(output["spotOptions"], context);
    }
    if (output["onDemandOptions"] !== undefined) {
        contents.OnDemandOptions = deserializeAws_ec2OnDemandOptions(output["onDemandOptions"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.errorSet === "") {
        contents.Errors = [];
    }
    else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
        contents.Errors = deserializeAws_ec2DescribeFleetsErrorSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
    }
    if (output.fleetInstanceSet === "") {
        contents.Instances = [];
    }
    else if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2DescribeFleetsInstancesSet(__getArrayIfSingleItem(output["fleetInstanceSet"]["item"]), context);
    }
    if (output["context"] !== undefined) {
        contents.Context = __expectString(output["context"]);
    }
    return contents;
};
var deserializeAws_ec2FleetLaunchTemplateConfig = function (output, context) {
    var contents = {
        LaunchTemplateSpecification: undefined,
        Overrides: undefined,
    };
    if (output["launchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = deserializeAws_ec2FleetLaunchTemplateSpecification(output["launchTemplateSpecification"], context);
    }
    if (output.overrides === "") {
        contents.Overrides = [];
    }
    else if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
        contents.Overrides = deserializeAws_ec2FleetLaunchTemplateOverridesList(__getArrayIfSingleItem(output["overrides"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2FleetLaunchTemplateConfigList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FleetLaunchTemplateConfig(entry, context);
    });
};
var deserializeAws_ec2FleetLaunchTemplateOverrides = function (output, context) {
    var contents = {
        InstanceType: undefined,
        MaxPrice: undefined,
        SubnetId: undefined,
        AvailabilityZone: undefined,
        WeightedCapacity: undefined,
        Priority: undefined,
        Placement: undefined,
        InstanceRequirements: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["maxPrice"] !== undefined) {
        contents.MaxPrice = __expectString(output["maxPrice"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["weightedCapacity"] !== undefined) {
        contents.WeightedCapacity = __strictParseFloat(output["weightedCapacity"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = __strictParseFloat(output["priority"]);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2PlacementResponse(output["placement"], context);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = deserializeAws_ec2InstanceRequirements(output["instanceRequirements"], context);
    }
    return contents;
};
var deserializeAws_ec2FleetLaunchTemplateOverridesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FleetLaunchTemplateOverrides(entry, context);
    });
};
var deserializeAws_ec2FleetLaunchTemplateSpecification = function (output, context) {
    var contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        Version: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["version"] !== undefined) {
        contents.Version = __expectString(output["version"]);
    }
    return contents;
};
var deserializeAws_ec2FleetSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FleetData(entry, context);
    });
};
var deserializeAws_ec2FleetSpotCapacityRebalance = function (output, context) {
    var contents = {
        ReplacementStrategy: undefined,
        TerminationDelay: undefined,
    };
    if (output["replacementStrategy"] !== undefined) {
        contents.ReplacementStrategy = __expectString(output["replacementStrategy"]);
    }
    if (output["terminationDelay"] !== undefined) {
        contents.TerminationDelay = __strictParseInt32(output["terminationDelay"]);
    }
    return contents;
};
var deserializeAws_ec2FleetSpotMaintenanceStrategies = function (output, context) {
    var contents = {
        CapacityRebalance: undefined,
    };
    if (output["capacityRebalance"] !== undefined) {
        contents.CapacityRebalance = deserializeAws_ec2FleetSpotCapacityRebalance(output["capacityRebalance"], context);
    }
    return contents;
};
var deserializeAws_ec2FlowLog = function (output, context) {
    var contents = {
        CreationTime: undefined,
        DeliverLogsErrorMessage: undefined,
        DeliverLogsPermissionArn: undefined,
        DeliverLogsStatus: undefined,
        FlowLogId: undefined,
        FlowLogStatus: undefined,
        LogGroupName: undefined,
        ResourceId: undefined,
        TrafficType: undefined,
        LogDestinationType: undefined,
        LogDestination: undefined,
        LogFormat: undefined,
        Tags: undefined,
        MaxAggregationInterval: undefined,
        DestinationOptions: undefined,
    };
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTime(output["creationTime"]));
    }
    if (output["deliverLogsErrorMessage"] !== undefined) {
        contents.DeliverLogsErrorMessage = __expectString(output["deliverLogsErrorMessage"]);
    }
    if (output["deliverLogsPermissionArn"] !== undefined) {
        contents.DeliverLogsPermissionArn = __expectString(output["deliverLogsPermissionArn"]);
    }
    if (output["deliverLogsStatus"] !== undefined) {
        contents.DeliverLogsStatus = __expectString(output["deliverLogsStatus"]);
    }
    if (output["flowLogId"] !== undefined) {
        contents.FlowLogId = __expectString(output["flowLogId"]);
    }
    if (output["flowLogStatus"] !== undefined) {
        contents.FlowLogStatus = __expectString(output["flowLogStatus"]);
    }
    if (output["logGroupName"] !== undefined) {
        contents.LogGroupName = __expectString(output["logGroupName"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["trafficType"] !== undefined) {
        contents.TrafficType = __expectString(output["trafficType"]);
    }
    if (output["logDestinationType"] !== undefined) {
        contents.LogDestinationType = __expectString(output["logDestinationType"]);
    }
    if (output["logDestination"] !== undefined) {
        contents.LogDestination = __expectString(output["logDestination"]);
    }
    if (output["logFormat"] !== undefined) {
        contents.LogFormat = __expectString(output["logFormat"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["maxAggregationInterval"] !== undefined) {
        contents.MaxAggregationInterval = __strictParseInt32(output["maxAggregationInterval"]);
    }
    if (output["destinationOptions"] !== undefined) {
        contents.DestinationOptions = deserializeAws_ec2DestinationOptionsResponse(output["destinationOptions"], context);
    }
    return contents;
};
var deserializeAws_ec2FlowLogSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FlowLog(entry, context);
    });
};
var deserializeAws_ec2FpgaDeviceInfo = function (output, context) {
    var contents = {
        Name: undefined,
        Manufacturer: undefined,
        Count: undefined,
        MemoryInfo: undefined,
    };
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["manufacturer"] !== undefined) {
        contents.Manufacturer = __expectString(output["manufacturer"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["memoryInfo"] !== undefined) {
        contents.MemoryInfo = deserializeAws_ec2FpgaDeviceMemoryInfo(output["memoryInfo"], context);
    }
    return contents;
};
var deserializeAws_ec2FpgaDeviceInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FpgaDeviceInfo(entry, context);
    });
};
var deserializeAws_ec2FpgaDeviceMemoryInfo = function (output, context) {
    var contents = {
        SizeInMiB: undefined,
    };
    if (output["sizeInMiB"] !== undefined) {
        contents.SizeInMiB = __strictParseInt32(output["sizeInMiB"]);
    }
    return contents;
};
var deserializeAws_ec2FpgaImage = function (output, context) {
    var contents = {
        FpgaImageId: undefined,
        FpgaImageGlobalId: undefined,
        Name: undefined,
        Description: undefined,
        ShellVersion: undefined,
        PciId: undefined,
        State: undefined,
        CreateTime: undefined,
        UpdateTime: undefined,
        OwnerId: undefined,
        OwnerAlias: undefined,
        ProductCodes: undefined,
        Tags: undefined,
        Public: undefined,
        DataRetentionSupport: undefined,
    };
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = __expectString(output["fpgaImageId"]);
    }
    if (output["fpgaImageGlobalId"] !== undefined) {
        contents.FpgaImageGlobalId = __expectString(output["fpgaImageGlobalId"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["shellVersion"] !== undefined) {
        contents.ShellVersion = __expectString(output["shellVersion"]);
    }
    if (output["pciId"] !== undefined) {
        contents.PciId = deserializeAws_ec2PciId(output["pciId"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = deserializeAws_ec2FpgaImageState(output["state"], context);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["updateTime"] !== undefined) {
        contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(output["updateTime"]));
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output.tags === "") {
        contents.Tags = [];
    }
    else if (output["tags"] !== undefined && output["tags"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tags"]["item"]), context);
    }
    if (output["public"] !== undefined) {
        contents.Public = __parseBoolean(output["public"]);
    }
    if (output["dataRetentionSupport"] !== undefined) {
        contents.DataRetentionSupport = __parseBoolean(output["dataRetentionSupport"]);
    }
    return contents;
};
var deserializeAws_ec2FpgaImageAttribute = function (output, context) {
    var contents = {
        FpgaImageId: undefined,
        Name: undefined,
        Description: undefined,
        LoadPermissions: undefined,
        ProductCodes: undefined,
    };
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = __expectString(output["fpgaImageId"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.loadPermissions === "") {
        contents.LoadPermissions = [];
    }
    else if (output["loadPermissions"] !== undefined && output["loadPermissions"]["item"] !== undefined) {
        contents.LoadPermissions = deserializeAws_ec2LoadPermissionList(__getArrayIfSingleItem(output["loadPermissions"]["item"]), context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2FpgaImageList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FpgaImage(entry, context);
    });
};
var deserializeAws_ec2FpgaImageState = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2FpgaInfo = function (output, context) {
    var contents = {
        Fpgas: undefined,
        TotalFpgaMemoryInMiB: undefined,
    };
    if (output.fpgas === "") {
        contents.Fpgas = [];
    }
    else if (output["fpgas"] !== undefined && output["fpgas"]["item"] !== undefined) {
        contents.Fpgas = deserializeAws_ec2FpgaDeviceInfoList(__getArrayIfSingleItem(output["fpgas"]["item"]), context);
    }
    if (output["totalFpgaMemoryInMiB"] !== undefined) {
        contents.TotalFpgaMemoryInMiB = __strictParseInt32(output["totalFpgaMemoryInMiB"]);
    }
    return contents;
};
var deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesResult = function (output, context) {
    var contents = {
        AssociatedRoles: undefined,
    };
    if (output.associatedRoleSet === "") {
        contents.AssociatedRoles = [];
    }
    else if (output["associatedRoleSet"] !== undefined && output["associatedRoleSet"]["item"] !== undefined) {
        contents.AssociatedRoles = deserializeAws_ec2AssociatedRolesList(__getArrayIfSingleItem(output["associatedRoleSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2GetAssociatedIpv6PoolCidrsResult = function (output, context) {
    var contents = {
        Ipv6CidrAssociations: undefined,
        NextToken: undefined,
    };
    if (output.ipv6CidrAssociationSet === "") {
        contents.Ipv6CidrAssociations = [];
    }
    else if (output["ipv6CidrAssociationSet"] !== undefined && output["ipv6CidrAssociationSet"]["item"] !== undefined) {
        contents.Ipv6CidrAssociations = deserializeAws_ec2Ipv6CidrAssociationSet(__getArrayIfSingleItem(output["ipv6CidrAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetCapacityReservationUsageResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        CapacityReservationId: undefined,
        InstanceType: undefined,
        TotalInstanceCount: undefined,
        AvailableInstanceCount: undefined,
        State: undefined,
        InstanceUsages: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["totalInstanceCount"] !== undefined) {
        contents.TotalInstanceCount = __strictParseInt32(output["totalInstanceCount"]);
    }
    if (output["availableInstanceCount"] !== undefined) {
        contents.AvailableInstanceCount = __strictParseInt32(output["availableInstanceCount"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.instanceUsageSet === "") {
        contents.InstanceUsages = [];
    }
    else if (output["instanceUsageSet"] !== undefined && output["instanceUsageSet"]["item"] !== undefined) {
        contents.InstanceUsages = deserializeAws_ec2InstanceUsageSet(__getArrayIfSingleItem(output["instanceUsageSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2GetCoipPoolUsageResult = function (output, context) {
    var contents = {
        CoipPoolId: undefined,
        CoipAddressUsages: undefined,
        LocalGatewayRouteTableId: undefined,
    };
    if (output["coipPoolId"] !== undefined) {
        contents.CoipPoolId = __expectString(output["coipPoolId"]);
    }
    if (output.coipAddressUsageSet === "") {
        contents.CoipAddressUsages = [];
    }
    else if (output["coipAddressUsageSet"] !== undefined && output["coipAddressUsageSet"]["item"] !== undefined) {
        contents.CoipAddressUsages = deserializeAws_ec2CoipAddressUsageSet(__getArrayIfSingleItem(output["coipAddressUsageSet"]["item"]), context);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    return contents;
};
var deserializeAws_ec2GetConsoleOutputResult = function (output, context) {
    var contents = {
        InstanceId: undefined,
        Output: undefined,
        Timestamp: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["output"] !== undefined) {
        contents.Output = __expectString(output["output"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTime(output["timestamp"]));
    }
    return contents;
};
var deserializeAws_ec2GetConsoleScreenshotResult = function (output, context) {
    var contents = {
        ImageData: undefined,
        InstanceId: undefined,
    };
    if (output["imageData"] !== undefined) {
        contents.ImageData = __expectString(output["imageData"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
var deserializeAws_ec2GetDefaultCreditSpecificationResult = function (output, context) {
    var contents = {
        InstanceFamilyCreditSpecification: undefined,
    };
    if (output["instanceFamilyCreditSpecification"] !== undefined) {
        contents.InstanceFamilyCreditSpecification = deserializeAws_ec2InstanceFamilyCreditSpecification(output["instanceFamilyCreditSpecification"], context);
    }
    return contents;
};
var deserializeAws_ec2GetEbsDefaultKmsKeyIdResult = function (output, context) {
    var contents = {
        KmsKeyId: undefined,
    };
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    return contents;
};
var deserializeAws_ec2GetEbsEncryptionByDefaultResult = function (output, context) {
    var contents = {
        EbsEncryptionByDefault: undefined,
    };
    if (output["ebsEncryptionByDefault"] !== undefined) {
        contents.EbsEncryptionByDefault = __parseBoolean(output["ebsEncryptionByDefault"]);
    }
    return contents;
};
var deserializeAws_ec2GetFlowLogsIntegrationTemplateResult = function (output, context) {
    var contents = {
        Result: undefined,
    };
    if (output["result"] !== undefined) {
        contents.Result = __expectString(output["result"]);
    }
    return contents;
};
var deserializeAws_ec2GetGroupsForCapacityReservationResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        CapacityReservationGroups: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.capacityReservationGroupSet === "") {
        contents.CapacityReservationGroups = [];
    }
    else if (output["capacityReservationGroupSet"] !== undefined &&
        output["capacityReservationGroupSet"]["item"] !== undefined) {
        contents.CapacityReservationGroups = deserializeAws_ec2CapacityReservationGroupSet(__getArrayIfSingleItem(output["capacityReservationGroupSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2GetHostReservationPurchasePreviewResult = function (output, context) {
    var contents = {
        CurrencyCode: undefined,
        Purchase: undefined,
        TotalHourlyPrice: undefined,
        TotalUpfrontPrice: undefined,
    };
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output.purchase === "") {
        contents.Purchase = [];
    }
    else if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
        contents.Purchase = deserializeAws_ec2PurchaseSet(__getArrayIfSingleItem(output["purchase"]["item"]), context);
    }
    if (output["totalHourlyPrice"] !== undefined) {
        contents.TotalHourlyPrice = __expectString(output["totalHourlyPrice"]);
    }
    if (output["totalUpfrontPrice"] !== undefined) {
        contents.TotalUpfrontPrice = __expectString(output["totalUpfrontPrice"]);
    }
    return contents;
};
var deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsResult = function (output, context) {
    var contents = {
        InstanceTypes: undefined,
        NextToken: undefined,
    };
    if (output.instanceTypeSet === "") {
        contents.InstanceTypes = [];
    }
    else if (output["instanceTypeSet"] !== undefined && output["instanceTypeSet"]["item"] !== undefined) {
        contents.InstanceTypes = deserializeAws_ec2InstanceTypeInfoFromInstanceRequirementsSet(__getArrayIfSingleItem(output["instanceTypeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetInstanceUefiDataResult = function (output, context) {
    var contents = {
        InstanceId: undefined,
        UefiData: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["uefiData"] !== undefined) {
        contents.UefiData = __expectString(output["uefiData"]);
    }
    return contents;
};
var deserializeAws_ec2GetIpamAddressHistoryResult = function (output, context) {
    var contents = {
        HistoryRecords: undefined,
        NextToken: undefined,
    };
    if (output.historyRecordSet === "") {
        contents.HistoryRecords = [];
    }
    else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
        contents.HistoryRecords = deserializeAws_ec2IpamAddressHistoryRecordSet(__getArrayIfSingleItem(output["historyRecordSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetIpamPoolAllocationsResult = function (output, context) {
    var contents = {
        IpamPoolAllocations: undefined,
        NextToken: undefined,
    };
    if (output.ipamPoolAllocationSet === "") {
        contents.IpamPoolAllocations = [];
    }
    else if (output["ipamPoolAllocationSet"] !== undefined && output["ipamPoolAllocationSet"]["item"] !== undefined) {
        contents.IpamPoolAllocations = deserializeAws_ec2IpamPoolAllocationSet(__getArrayIfSingleItem(output["ipamPoolAllocationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetIpamPoolCidrsResult = function (output, context) {
    var contents = {
        IpamPoolCidrs: undefined,
        NextToken: undefined,
    };
    if (output.ipamPoolCidrSet === "") {
        contents.IpamPoolCidrs = [];
    }
    else if (output["ipamPoolCidrSet"] !== undefined && output["ipamPoolCidrSet"]["item"] !== undefined) {
        contents.IpamPoolCidrs = deserializeAws_ec2IpamPoolCidrSet(__getArrayIfSingleItem(output["ipamPoolCidrSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetIpamResourceCidrsResult = function (output, context) {
    var contents = {
        NextToken: undefined,
        IpamResourceCidrs: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    if (output.ipamResourceCidrSet === "") {
        contents.IpamResourceCidrs = [];
    }
    else if (output["ipamResourceCidrSet"] !== undefined && output["ipamResourceCidrSet"]["item"] !== undefined) {
        contents.IpamResourceCidrs = deserializeAws_ec2IpamResourceCidrSet(__getArrayIfSingleItem(output["ipamResourceCidrSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2GetLaunchTemplateDataResult = function (output, context) {
    var contents = {
        LaunchTemplateData: undefined,
    };
    if (output["launchTemplateData"] !== undefined) {
        contents.LaunchTemplateData = deserializeAws_ec2ResponseLaunchTemplateData(output["launchTemplateData"], context);
    }
    return contents;
};
var deserializeAws_ec2GetManagedPrefixListAssociationsResult = function (output, context) {
    var contents = {
        PrefixListAssociations: undefined,
        NextToken: undefined,
    };
    if (output.prefixListAssociationSet === "") {
        contents.PrefixListAssociations = [];
    }
    else if (output["prefixListAssociationSet"] !== undefined &&
        output["prefixListAssociationSet"]["item"] !== undefined) {
        contents.PrefixListAssociations = deserializeAws_ec2PrefixListAssociationSet(__getArrayIfSingleItem(output["prefixListAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetManagedPrefixListEntriesResult = function (output, context) {
    var contents = {
        Entries: undefined,
        NextToken: undefined,
    };
    if (output.entrySet === "") {
        contents.Entries = [];
    }
    else if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
        contents.Entries = deserializeAws_ec2PrefixListEntrySet(__getArrayIfSingleItem(output["entrySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsResult = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeAnalysisId: undefined,
        AnalysisStatus: undefined,
        AnalysisFindings: undefined,
        NextToken: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
    }
    if (output["analysisStatus"] !== undefined) {
        contents.AnalysisStatus = __expectString(output["analysisStatus"]);
    }
    if (output.analysisFindingSet === "") {
        contents.AnalysisFindings = [];
    }
    else if (output["analysisFindingSet"] !== undefined && output["analysisFindingSet"]["item"] !== undefined) {
        contents.AnalysisFindings = deserializeAws_ec2AccessScopeAnalysisFindingList(__getArrayIfSingleItem(output["analysisFindingSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetNetworkInsightsAccessScopeContentResult = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeContent: undefined,
    };
    if (output["networkInsightsAccessScopeContent"] !== undefined) {
        contents.NetworkInsightsAccessScopeContent = deserializeAws_ec2NetworkInsightsAccessScopeContent(output["networkInsightsAccessScopeContent"], context);
    }
    return contents;
};
var deserializeAws_ec2GetPasswordDataResult = function (output, context) {
    var contents = {
        InstanceId: undefined,
        PasswordData: undefined,
        Timestamp: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["passwordData"] !== undefined) {
        contents.PasswordData = __expectString(output["passwordData"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTime(output["timestamp"]));
    }
    return contents;
};
var deserializeAws_ec2GetReservedInstancesExchangeQuoteResult = function (output, context) {
    var contents = {
        CurrencyCode: undefined,
        IsValidExchange: undefined,
        OutputReservedInstancesWillExpireAt: undefined,
        PaymentDue: undefined,
        ReservedInstanceValueRollup: undefined,
        ReservedInstanceValueSet: undefined,
        TargetConfigurationValueRollup: undefined,
        TargetConfigurationValueSet: undefined,
        ValidationFailureReason: undefined,
    };
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["isValidExchange"] !== undefined) {
        contents.IsValidExchange = __parseBoolean(output["isValidExchange"]);
    }
    if (output["outputReservedInstancesWillExpireAt"] !== undefined) {
        contents.OutputReservedInstancesWillExpireAt = __expectNonNull(__parseRfc3339DateTime(output["outputReservedInstancesWillExpireAt"]));
    }
    if (output["paymentDue"] !== undefined) {
        contents.PaymentDue = __expectString(output["paymentDue"]);
    }
    if (output["reservedInstanceValueRollup"] !== undefined) {
        contents.ReservedInstanceValueRollup = deserializeAws_ec2ReservationValue(output["reservedInstanceValueRollup"], context);
    }
    if (output.reservedInstanceValueSet === "") {
        contents.ReservedInstanceValueSet = [];
    }
    else if (output["reservedInstanceValueSet"] !== undefined &&
        output["reservedInstanceValueSet"]["item"] !== undefined) {
        contents.ReservedInstanceValueSet = deserializeAws_ec2ReservedInstanceReservationValueSet(__getArrayIfSingleItem(output["reservedInstanceValueSet"]["item"]), context);
    }
    if (output["targetConfigurationValueRollup"] !== undefined) {
        contents.TargetConfigurationValueRollup = deserializeAws_ec2ReservationValue(output["targetConfigurationValueRollup"], context);
    }
    if (output.targetConfigurationValueSet === "") {
        contents.TargetConfigurationValueSet = [];
    }
    else if (output["targetConfigurationValueSet"] !== undefined &&
        output["targetConfigurationValueSet"]["item"] !== undefined) {
        contents.TargetConfigurationValueSet = deserializeAws_ec2TargetReservationValueSet(__getArrayIfSingleItem(output["targetConfigurationValueSet"]["item"]), context);
    }
    if (output["validationFailureReason"] !== undefined) {
        contents.ValidationFailureReason = __expectString(output["validationFailureReason"]);
    }
    return contents;
};
var deserializeAws_ec2GetSerialConsoleAccessStatusResult = function (output, context) {
    var contents = {
        SerialConsoleAccessEnabled: undefined,
    };
    if (output["serialConsoleAccessEnabled"] !== undefined) {
        contents.SerialConsoleAccessEnabled = __parseBoolean(output["serialConsoleAccessEnabled"]);
    }
    return contents;
};
var deserializeAws_ec2GetSpotPlacementScoresResult = function (output, context) {
    var contents = {
        SpotPlacementScores: undefined,
        NextToken: undefined,
    };
    if (output.spotPlacementScoreSet === "") {
        contents.SpotPlacementScores = [];
    }
    else if (output["spotPlacementScoreSet"] !== undefined && output["spotPlacementScoreSet"]["item"] !== undefined) {
        contents.SpotPlacementScores = deserializeAws_ec2SpotPlacementScores(__getArrayIfSingleItem(output["spotPlacementScoreSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetSubnetCidrReservationsResult = function (output, context) {
    var contents = {
        SubnetIpv4CidrReservations: undefined,
        SubnetIpv6CidrReservations: undefined,
        NextToken: undefined,
    };
    if (output.subnetIpv4CidrReservationSet === "") {
        contents.SubnetIpv4CidrReservations = [];
    }
    else if (output["subnetIpv4CidrReservationSet"] !== undefined &&
        output["subnetIpv4CidrReservationSet"]["item"] !== undefined) {
        contents.SubnetIpv4CidrReservations = deserializeAws_ec2SubnetCidrReservationList(__getArrayIfSingleItem(output["subnetIpv4CidrReservationSet"]["item"]), context);
    }
    if (output.subnetIpv6CidrReservationSet === "") {
        contents.SubnetIpv6CidrReservations = [];
    }
    else if (output["subnetIpv6CidrReservationSet"] !== undefined &&
        output["subnetIpv6CidrReservationSet"]["item"] !== undefined) {
        contents.SubnetIpv6CidrReservations = deserializeAws_ec2SubnetCidrReservationList(__getArrayIfSingleItem(output["subnetIpv6CidrReservationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetTransitGatewayAttachmentPropagationsResult = function (output, context) {
    var contents = {
        TransitGatewayAttachmentPropagations: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayAttachmentPropagations === "") {
        contents.TransitGatewayAttachmentPropagations = [];
    }
    else if (output["transitGatewayAttachmentPropagations"] !== undefined &&
        output["transitGatewayAttachmentPropagations"]["item"] !== undefined) {
        contents.TransitGatewayAttachmentPropagations = deserializeAws_ec2TransitGatewayAttachmentPropagationList(__getArrayIfSingleItem(output["transitGatewayAttachmentPropagations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsResult = function (output, context) {
    var contents = {
        MulticastDomainAssociations: undefined,
        NextToken: undefined,
    };
    if (output.multicastDomainAssociations === "") {
        contents.MulticastDomainAssociations = [];
    }
    else if (output["multicastDomainAssociations"] !== undefined &&
        output["multicastDomainAssociations"]["item"] !== undefined) {
        contents.MulticastDomainAssociations = deserializeAws_ec2TransitGatewayMulticastDomainAssociationList(__getArrayIfSingleItem(output["multicastDomainAssociations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetTransitGatewayPrefixListReferencesResult = function (output, context) {
    var contents = {
        TransitGatewayPrefixListReferences: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayPrefixListReferenceSet === "") {
        contents.TransitGatewayPrefixListReferences = [];
    }
    else if (output["transitGatewayPrefixListReferenceSet"] !== undefined &&
        output["transitGatewayPrefixListReferenceSet"]["item"] !== undefined) {
        contents.TransitGatewayPrefixListReferences = deserializeAws_ec2TransitGatewayPrefixListReferenceSet(__getArrayIfSingleItem(output["transitGatewayPrefixListReferenceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetTransitGatewayRouteTableAssociationsResult = function (output, context) {
    var contents = {
        Associations: undefined,
        NextToken: undefined,
    };
    if (output.associations === "") {
        contents.Associations = [];
    }
    else if (output["associations"] !== undefined && output["associations"]["item"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayRouteTableAssociationList(__getArrayIfSingleItem(output["associations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetTransitGatewayRouteTablePropagationsResult = function (output, context) {
    var contents = {
        TransitGatewayRouteTablePropagations: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayRouteTablePropagations === "") {
        contents.TransitGatewayRouteTablePropagations = [];
    }
    else if (output["transitGatewayRouteTablePropagations"] !== undefined &&
        output["transitGatewayRouteTablePropagations"]["item"] !== undefined) {
        contents.TransitGatewayRouteTablePropagations = deserializeAws_ec2TransitGatewayRouteTablePropagationList(__getArrayIfSingleItem(output["transitGatewayRouteTablePropagations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationResult = function (output, context) {
    var contents = {
        VpnConnectionDeviceSampleConfiguration: undefined,
    };
    if (output["vpnConnectionDeviceSampleConfiguration"] !== undefined) {
        contents.VpnConnectionDeviceSampleConfiguration = __expectString(output["vpnConnectionDeviceSampleConfiguration"]);
    }
    return contents;
};
var deserializeAws_ec2GetVpnConnectionDeviceTypesResult = function (output, context) {
    var contents = {
        VpnConnectionDeviceTypes: undefined,
        NextToken: undefined,
    };
    if (output.vpnConnectionDeviceTypeSet === "") {
        contents.VpnConnectionDeviceTypes = [];
    }
    else if (output["vpnConnectionDeviceTypeSet"] !== undefined &&
        output["vpnConnectionDeviceTypeSet"]["item"] !== undefined) {
        contents.VpnConnectionDeviceTypes = deserializeAws_ec2VpnConnectionDeviceTypeList(__getArrayIfSingleItem(output["vpnConnectionDeviceTypeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2GpuDeviceInfo = function (output, context) {
    var contents = {
        Name: undefined,
        Manufacturer: undefined,
        Count: undefined,
        MemoryInfo: undefined,
    };
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["manufacturer"] !== undefined) {
        contents.Manufacturer = __expectString(output["manufacturer"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["memoryInfo"] !== undefined) {
        contents.MemoryInfo = deserializeAws_ec2GpuDeviceMemoryInfo(output["memoryInfo"], context);
    }
    return contents;
};
var deserializeAws_ec2GpuDeviceInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2GpuDeviceInfo(entry, context);
    });
};
var deserializeAws_ec2GpuDeviceMemoryInfo = function (output, context) {
    var contents = {
        SizeInMiB: undefined,
    };
    if (output["sizeInMiB"] !== undefined) {
        contents.SizeInMiB = __strictParseInt32(output["sizeInMiB"]);
    }
    return contents;
};
var deserializeAws_ec2GpuInfo = function (output, context) {
    var contents = {
        Gpus: undefined,
        TotalGpuMemoryInMiB: undefined,
    };
    if (output.gpus === "") {
        contents.Gpus = [];
    }
    else if (output["gpus"] !== undefined && output["gpus"]["item"] !== undefined) {
        contents.Gpus = deserializeAws_ec2GpuDeviceInfoList(__getArrayIfSingleItem(output["gpus"]["item"]), context);
    }
    if (output["totalGpuMemoryInMiB"] !== undefined) {
        contents.TotalGpuMemoryInMiB = __strictParseInt32(output["totalGpuMemoryInMiB"]);
    }
    return contents;
};
var deserializeAws_ec2GroupIdentifier = function (output, context) {
    var contents = {
        GroupName: undefined,
        GroupId: undefined,
    };
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    return contents;
};
var deserializeAws_ec2GroupIdentifierList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2GroupIdentifier(entry, context);
    });
};
var deserializeAws_ec2GroupIdentifierSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SecurityGroupIdentifier(entry, context);
    });
};
var deserializeAws_ec2GroupIdStringList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2HibernationOptions = function (output, context) {
    var contents = {
        Configured: undefined,
    };
    if (output["configured"] !== undefined) {
        contents.Configured = __parseBoolean(output["configured"]);
    }
    return contents;
};
var deserializeAws_ec2HistoryRecord = function (output, context) {
    var contents = {
        EventInformation: undefined,
        EventType: undefined,
        Timestamp: undefined,
    };
    if (output["eventInformation"] !== undefined) {
        contents.EventInformation = deserializeAws_ec2EventInformation(output["eventInformation"], context);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = __expectString(output["eventType"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTime(output["timestamp"]));
    }
    return contents;
};
var deserializeAws_ec2HistoryRecordEntry = function (output, context) {
    var contents = {
        EventInformation: undefined,
        EventType: undefined,
        Timestamp: undefined,
    };
    if (output["eventInformation"] !== undefined) {
        contents.EventInformation = deserializeAws_ec2EventInformation(output["eventInformation"], context);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = __expectString(output["eventType"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTime(output["timestamp"]));
    }
    return contents;
};
var deserializeAws_ec2HistoryRecords = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HistoryRecord(entry, context);
    });
};
var deserializeAws_ec2HistoryRecordSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HistoryRecordEntry(entry, context);
    });
};
var deserializeAws_ec2Host = function (output, context) {
    var contents = {
        AutoPlacement: undefined,
        AvailabilityZone: undefined,
        AvailableCapacity: undefined,
        ClientToken: undefined,
        HostId: undefined,
        HostProperties: undefined,
        HostReservationId: undefined,
        Instances: undefined,
        State: undefined,
        AllocationTime: undefined,
        ReleaseTime: undefined,
        Tags: undefined,
        HostRecovery: undefined,
        AllowsMultipleInstanceTypes: undefined,
        OwnerId: undefined,
        AvailabilityZoneId: undefined,
        MemberOfServiceLinkedResourceGroup: undefined,
        OutpostArn: undefined,
    };
    if (output["autoPlacement"] !== undefined) {
        contents.AutoPlacement = __expectString(output["autoPlacement"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["availableCapacity"] !== undefined) {
        contents.AvailableCapacity = deserializeAws_ec2AvailableCapacity(output["availableCapacity"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["hostId"] !== undefined) {
        contents.HostId = __expectString(output["hostId"]);
    }
    if (output["hostProperties"] !== undefined) {
        contents.HostProperties = deserializeAws_ec2HostProperties(output["hostProperties"], context);
    }
    if (output["hostReservationId"] !== undefined) {
        contents.HostReservationId = __expectString(output["hostReservationId"]);
    }
    if (output.instances === "") {
        contents.Instances = [];
    }
    else if (output["instances"] !== undefined && output["instances"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2HostInstanceList(__getArrayIfSingleItem(output["instances"]["item"]), context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["allocationTime"] !== undefined) {
        contents.AllocationTime = __expectNonNull(__parseRfc3339DateTime(output["allocationTime"]));
    }
    if (output["releaseTime"] !== undefined) {
        contents.ReleaseTime = __expectNonNull(__parseRfc3339DateTime(output["releaseTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["hostRecovery"] !== undefined) {
        contents.HostRecovery = __expectString(output["hostRecovery"]);
    }
    if (output["allowsMultipleInstanceTypes"] !== undefined) {
        contents.AllowsMultipleInstanceTypes = __expectString(output["allowsMultipleInstanceTypes"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["memberOfServiceLinkedResourceGroup"] !== undefined) {
        contents.MemberOfServiceLinkedResourceGroup = __parseBoolean(output["memberOfServiceLinkedResourceGroup"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    return contents;
};
var deserializeAws_ec2HostInstance = function (output, context) {
    var contents = {
        InstanceId: undefined,
        InstanceType: undefined,
        OwnerId: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
var deserializeAws_ec2HostInstanceList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HostInstance(entry, context);
    });
};
var deserializeAws_ec2HostList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Host(entry, context);
    });
};
var deserializeAws_ec2HostOffering = function (output, context) {
    var contents = {
        CurrencyCode: undefined,
        Duration: undefined,
        HourlyPrice: undefined,
        InstanceFamily: undefined,
        OfferingId: undefined,
        PaymentOption: undefined,
        UpfrontPrice: undefined,
    };
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["duration"]);
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["offeringId"] !== undefined) {
        contents.OfferingId = __expectString(output["offeringId"]);
    }
    if (output["paymentOption"] !== undefined) {
        contents.PaymentOption = __expectString(output["paymentOption"]);
    }
    if (output["upfrontPrice"] !== undefined) {
        contents.UpfrontPrice = __expectString(output["upfrontPrice"]);
    }
    return contents;
};
var deserializeAws_ec2HostOfferingSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HostOffering(entry, context);
    });
};
var deserializeAws_ec2HostProperties = function (output, context) {
    var contents = {
        Cores: undefined,
        InstanceType: undefined,
        InstanceFamily: undefined,
        Sockets: undefined,
        TotalVCpus: undefined,
    };
    if (output["cores"] !== undefined) {
        contents.Cores = __strictParseInt32(output["cores"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["sockets"] !== undefined) {
        contents.Sockets = __strictParseInt32(output["sockets"]);
    }
    if (output["totalVCpus"] !== undefined) {
        contents.TotalVCpus = __strictParseInt32(output["totalVCpus"]);
    }
    return contents;
};
var deserializeAws_ec2HostReservation = function (output, context) {
    var contents = {
        Count: undefined,
        CurrencyCode: undefined,
        Duration: undefined,
        End: undefined,
        HostIdSet: undefined,
        HostReservationId: undefined,
        HourlyPrice: undefined,
        InstanceFamily: undefined,
        OfferingId: undefined,
        PaymentOption: undefined,
        Start: undefined,
        State: undefined,
        UpfrontPrice: undefined,
        Tags: undefined,
    };
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["duration"]);
    }
    if (output["end"] !== undefined) {
        contents.End = __expectNonNull(__parseRfc3339DateTime(output["end"]));
    }
    if (output.hostIdSet === "") {
        contents.HostIdSet = [];
    }
    else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
        contents.HostIdSet = deserializeAws_ec2ResponseHostIdSet(__getArrayIfSingleItem(output["hostIdSet"]["item"]), context);
    }
    if (output["hostReservationId"] !== undefined) {
        contents.HostReservationId = __expectString(output["hostReservationId"]);
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["offeringId"] !== undefined) {
        contents.OfferingId = __expectString(output["offeringId"]);
    }
    if (output["paymentOption"] !== undefined) {
        contents.PaymentOption = __expectString(output["paymentOption"]);
    }
    if (output["start"] !== undefined) {
        contents.Start = __expectNonNull(__parseRfc3339DateTime(output["start"]));
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["upfrontPrice"] !== undefined) {
        contents.UpfrontPrice = __expectString(output["upfrontPrice"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2HostReservationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HostReservation(entry, context);
    });
};
var deserializeAws_ec2IamInstanceProfile = function (output, context) {
    var contents = {
        Arn: undefined,
        Id: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output["id"] !== undefined) {
        contents.Id = __expectString(output["id"]);
    }
    return contents;
};
var deserializeAws_ec2IamInstanceProfileAssociation = function (output, context) {
    var contents = {
        AssociationId: undefined,
        InstanceId: undefined,
        IamInstanceProfile: undefined,
        State: undefined,
        Timestamp: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfile(output["iamInstanceProfile"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTime(output["timestamp"]));
    }
    return contents;
};
var deserializeAws_ec2IamInstanceProfileAssociationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IamInstanceProfileAssociation(entry, context);
    });
};
var deserializeAws_ec2IamInstanceProfileSpecification = function (output, context) {
    var contents = {
        Arn: undefined,
        Name: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
var deserializeAws_ec2IcmpTypeCode = function (output, context) {
    var contents = {
        Code: undefined,
        Type: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __strictParseInt32(output["code"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __strictParseInt32(output["type"]);
    }
    return contents;
};
var deserializeAws_ec2IdFormat = function (output, context) {
    var contents = {
        Deadline: undefined,
        Resource: undefined,
        UseLongIds: undefined,
    };
    if (output["deadline"] !== undefined) {
        contents.Deadline = __expectNonNull(__parseRfc3339DateTime(output["deadline"]));
    }
    if (output["resource"] !== undefined) {
        contents.Resource = __expectString(output["resource"]);
    }
    if (output["useLongIds"] !== undefined) {
        contents.UseLongIds = __parseBoolean(output["useLongIds"]);
    }
    return contents;
};
var deserializeAws_ec2IdFormatList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IdFormat(entry, context);
    });
};
var deserializeAws_ec2IKEVersionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IKEVersionsListValue(entry, context);
    });
};
var deserializeAws_ec2IKEVersionsListValue = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2Image = function (output, context) {
    var contents = {
        Architecture: undefined,
        CreationDate: undefined,
        ImageId: undefined,
        ImageLocation: undefined,
        ImageType: undefined,
        Public: undefined,
        KernelId: undefined,
        OwnerId: undefined,
        Platform: undefined,
        PlatformDetails: undefined,
        UsageOperation: undefined,
        ProductCodes: undefined,
        RamdiskId: undefined,
        State: undefined,
        BlockDeviceMappings: undefined,
        Description: undefined,
        EnaSupport: undefined,
        Hypervisor: undefined,
        ImageOwnerAlias: undefined,
        Name: undefined,
        RootDeviceName: undefined,
        RootDeviceType: undefined,
        SriovNetSupport: undefined,
        StateReason: undefined,
        Tags: undefined,
        VirtualizationType: undefined,
        BootMode: undefined,
        TpmSupport: undefined,
        DeprecationTime: undefined,
    };
    if (output["architecture"] !== undefined) {
        contents.Architecture = __expectString(output["architecture"]);
    }
    if (output["creationDate"] !== undefined) {
        contents.CreationDate = __expectString(output["creationDate"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["imageLocation"] !== undefined) {
        contents.ImageLocation = __expectString(output["imageLocation"]);
    }
    if (output["imageType"] !== undefined) {
        contents.ImageType = __expectString(output["imageType"]);
    }
    if (output["isPublic"] !== undefined) {
        contents.Public = __parseBoolean(output["isPublic"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["imageOwnerId"] !== undefined) {
        contents.OwnerId = __expectString(output["imageOwnerId"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["platformDetails"] !== undefined) {
        contents.PlatformDetails = __expectString(output["platformDetails"]);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = __expectString(output["usageOperation"]);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = __expectString(output["ramdiskId"]);
    }
    if (output["imageState"] !== undefined) {
        contents.State = __expectString(output["imageState"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = __parseBoolean(output["enaSupport"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["imageOwnerAlias"] !== undefined) {
        contents.ImageOwnerAlias = __expectString(output["imageOwnerAlias"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["rootDeviceName"] !== undefined) {
        contents.RootDeviceName = __expectString(output["rootDeviceName"]);
    }
    if (output["rootDeviceType"] !== undefined) {
        contents.RootDeviceType = __expectString(output["rootDeviceType"]);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = __expectString(output["sriovNetSupport"]);
    }
    if (output["stateReason"] !== undefined) {
        contents.StateReason = deserializeAws_ec2StateReason(output["stateReason"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["virtualizationType"] !== undefined) {
        contents.VirtualizationType = __expectString(output["virtualizationType"]);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = __expectString(output["bootMode"]);
    }
    if (output["tpmSupport"] !== undefined) {
        contents.TpmSupport = __expectString(output["tpmSupport"]);
    }
    if (output["deprecationTime"] !== undefined) {
        contents.DeprecationTime = __expectString(output["deprecationTime"]);
    }
    return contents;
};
var deserializeAws_ec2ImageAttribute = function (output, context) {
    var contents = {
        BlockDeviceMappings: undefined,
        ImageId: undefined,
        LaunchPermissions: undefined,
        ProductCodes: undefined,
        Description: undefined,
        KernelId: undefined,
        RamdiskId: undefined,
        SriovNetSupport: undefined,
        BootMode: undefined,
        TpmSupport: undefined,
        UefiData: undefined,
        LastLaunchedTime: undefined,
    };
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output.launchPermission === "") {
        contents.LaunchPermissions = [];
    }
    else if (output["launchPermission"] !== undefined && output["launchPermission"]["item"] !== undefined) {
        contents.LaunchPermissions = deserializeAws_ec2LaunchPermissionList(__getArrayIfSingleItem(output["launchPermission"]["item"]), context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["description"] !== undefined) {
        contents.Description = deserializeAws_ec2AttributeValue(output["description"], context);
    }
    if (output["kernel"] !== undefined) {
        contents.KernelId = deserializeAws_ec2AttributeValue(output["kernel"], context);
    }
    if (output["ramdisk"] !== undefined) {
        contents.RamdiskId = deserializeAws_ec2AttributeValue(output["ramdisk"], context);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = deserializeAws_ec2AttributeValue(output["sriovNetSupport"], context);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = deserializeAws_ec2AttributeValue(output["bootMode"], context);
    }
    if (output["tpmSupport"] !== undefined) {
        contents.TpmSupport = deserializeAws_ec2AttributeValue(output["tpmSupport"], context);
    }
    if (output["uefiData"] !== undefined) {
        contents.UefiData = deserializeAws_ec2AttributeValue(output["uefiData"], context);
    }
    if (output["lastLaunchedTime"] !== undefined) {
        contents.LastLaunchedTime = deserializeAws_ec2AttributeValue(output["lastLaunchedTime"], context);
    }
    return contents;
};
var deserializeAws_ec2ImageList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Image(entry, context);
    });
};
var deserializeAws_ec2ImageRecycleBinInfo = function (output, context) {
    var contents = {
        ImageId: undefined,
        Name: undefined,
        Description: undefined,
        RecycleBinEnterTime: undefined,
        RecycleBinExitTime: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["recycleBinEnterTime"] !== undefined) {
        contents.RecycleBinEnterTime = __expectNonNull(__parseRfc3339DateTime(output["recycleBinEnterTime"]));
    }
    if (output["recycleBinExitTime"] !== undefined) {
        contents.RecycleBinExitTime = __expectNonNull(__parseRfc3339DateTime(output["recycleBinExitTime"]));
    }
    return contents;
};
var deserializeAws_ec2ImageRecycleBinInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImageRecycleBinInfo(entry, context);
    });
};
var deserializeAws_ec2ImportClientVpnClientCertificateRevocationListResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ImportImageLicenseConfigurationResponse = function (output, context) {
    var contents = {
        LicenseConfigurationArn: undefined,
    };
    if (output["licenseConfigurationArn"] !== undefined) {
        contents.LicenseConfigurationArn = __expectString(output["licenseConfigurationArn"]);
    }
    return contents;
};
var deserializeAws_ec2ImportImageLicenseSpecificationListResponse = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImportImageLicenseConfigurationResponse(entry, context);
    });
};
var deserializeAws_ec2ImportImageResult = function (output, context) {
    var contents = {
        Architecture: undefined,
        Description: undefined,
        Encrypted: undefined,
        Hypervisor: undefined,
        ImageId: undefined,
        ImportTaskId: undefined,
        KmsKeyId: undefined,
        LicenseType: undefined,
        Platform: undefined,
        Progress: undefined,
        SnapshotDetails: undefined,
        Status: undefined,
        StatusMessage: undefined,
        LicenseSpecifications: undefined,
        Tags: undefined,
        UsageOperation: undefined,
    };
    if (output["architecture"] !== undefined) {
        contents.Architecture = __expectString(output["architecture"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["licenseType"] !== undefined) {
        contents.LicenseType = __expectString(output["licenseType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output.snapshotDetailSet === "") {
        contents.SnapshotDetails = [];
    }
    else if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
        contents.SnapshotDetails = deserializeAws_ec2SnapshotDetailList(__getArrayIfSingleItem(output["snapshotDetailSet"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.licenseSpecifications === "") {
        contents.LicenseSpecifications = [];
    }
    else if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
        contents.LicenseSpecifications = deserializeAws_ec2ImportImageLicenseSpecificationListResponse(__getArrayIfSingleItem(output["licenseSpecifications"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = __expectString(output["usageOperation"]);
    }
    return contents;
};
var deserializeAws_ec2ImportImageTask = function (output, context) {
    var contents = {
        Architecture: undefined,
        Description: undefined,
        Encrypted: undefined,
        Hypervisor: undefined,
        ImageId: undefined,
        ImportTaskId: undefined,
        KmsKeyId: undefined,
        LicenseType: undefined,
        Platform: undefined,
        Progress: undefined,
        SnapshotDetails: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Tags: undefined,
        LicenseSpecifications: undefined,
        UsageOperation: undefined,
        BootMode: undefined,
    };
    if (output["architecture"] !== undefined) {
        contents.Architecture = __expectString(output["architecture"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["licenseType"] !== undefined) {
        contents.LicenseType = __expectString(output["licenseType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output.snapshotDetailSet === "") {
        contents.SnapshotDetails = [];
    }
    else if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
        contents.SnapshotDetails = deserializeAws_ec2SnapshotDetailList(__getArrayIfSingleItem(output["snapshotDetailSet"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.licenseSpecifications === "") {
        contents.LicenseSpecifications = [];
    }
    else if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
        contents.LicenseSpecifications = deserializeAws_ec2ImportImageLicenseSpecificationListResponse(__getArrayIfSingleItem(output["licenseSpecifications"]["item"]), context);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = __expectString(output["usageOperation"]);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = __expectString(output["bootMode"]);
    }
    return contents;
};
var deserializeAws_ec2ImportImageTaskList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImportImageTask(entry, context);
    });
};
var deserializeAws_ec2ImportInstanceResult = function (output, context) {
    var contents = {
        ConversionTask: undefined,
    };
    if (output["conversionTask"] !== undefined) {
        contents.ConversionTask = deserializeAws_ec2ConversionTask(output["conversionTask"], context);
    }
    return contents;
};
var deserializeAws_ec2ImportInstanceTaskDetails = function (output, context) {
    var contents = {
        Description: undefined,
        InstanceId: undefined,
        Platform: undefined,
        Volumes: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output.volumes === "") {
        contents.Volumes = [];
    }
    else if (output["volumes"] !== undefined && output["volumes"]["item"] !== undefined) {
        contents.Volumes = deserializeAws_ec2ImportInstanceVolumeDetailSet(__getArrayIfSingleItem(output["volumes"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ImportInstanceVolumeDetailItem = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        BytesConverted: undefined,
        Description: undefined,
        Image: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Volume: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["bytesConverted"] !== undefined) {
        contents.BytesConverted = __strictParseLong(output["bytesConverted"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["image"] !== undefined) {
        contents.Image = deserializeAws_ec2DiskImageDescription(output["image"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["volume"] !== undefined) {
        contents.Volume = deserializeAws_ec2DiskImageVolumeDescription(output["volume"], context);
    }
    return contents;
};
var deserializeAws_ec2ImportInstanceVolumeDetailSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImportInstanceVolumeDetailItem(entry, context);
    });
};
var deserializeAws_ec2ImportKeyPairResult = function (output, context) {
    var contents = {
        KeyFingerprint: undefined,
        KeyName: undefined,
        KeyPairId: undefined,
        Tags: undefined,
    };
    if (output["keyFingerprint"] !== undefined) {
        contents.KeyFingerprint = __expectString(output["keyFingerprint"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["keyPairId"] !== undefined) {
        contents.KeyPairId = __expectString(output["keyPairId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ImportSnapshotResult = function (output, context) {
    var contents = {
        Description: undefined,
        ImportTaskId: undefined,
        SnapshotTaskDetail: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["snapshotTaskDetail"] !== undefined) {
        contents.SnapshotTaskDetail = deserializeAws_ec2SnapshotTaskDetail(output["snapshotTaskDetail"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ImportSnapshotTask = function (output, context) {
    var contents = {
        Description: undefined,
        ImportTaskId: undefined,
        SnapshotTaskDetail: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = __expectString(output["importTaskId"]);
    }
    if (output["snapshotTaskDetail"] !== undefined) {
        contents.SnapshotTaskDetail = deserializeAws_ec2SnapshotTaskDetail(output["snapshotTaskDetail"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ImportSnapshotTaskList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImportSnapshotTask(entry, context);
    });
};
var deserializeAws_ec2ImportVolumeResult = function (output, context) {
    var contents = {
        ConversionTask: undefined,
    };
    if (output["conversionTask"] !== undefined) {
        contents.ConversionTask = deserializeAws_ec2ConversionTask(output["conversionTask"], context);
    }
    return contents;
};
var deserializeAws_ec2ImportVolumeTaskDetails = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        BytesConverted: undefined,
        Description: undefined,
        Image: undefined,
        Volume: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["bytesConverted"] !== undefined) {
        contents.BytesConverted = __strictParseLong(output["bytesConverted"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["image"] !== undefined) {
        contents.Image = deserializeAws_ec2DiskImageDescription(output["image"], context);
    }
    if (output["volume"] !== undefined) {
        contents.Volume = deserializeAws_ec2DiskImageVolumeDescription(output["volume"], context);
    }
    return contents;
};
var deserializeAws_ec2InferenceAcceleratorInfo = function (output, context) {
    var contents = {
        Accelerators: undefined,
    };
    if (output.accelerators === "") {
        contents.Accelerators = [];
    }
    else if (output["accelerators"] !== undefined && output["accelerators"]["member"] !== undefined) {
        contents.Accelerators = deserializeAws_ec2InferenceDeviceInfoList(__getArrayIfSingleItem(output["accelerators"]["member"]), context);
    }
    return contents;
};
var deserializeAws_ec2InferenceDeviceInfo = function (output, context) {
    var contents = {
        Count: undefined,
        Name: undefined,
        Manufacturer: undefined,
    };
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["manufacturer"] !== undefined) {
        contents.Manufacturer = __expectString(output["manufacturer"]);
    }
    return contents;
};
var deserializeAws_ec2InferenceDeviceInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InferenceDeviceInfo(entry, context);
    });
};
var deserializeAws_ec2InsideCidrBlocksStringList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2Instance = function (output, context) {
    var contents = {
        AmiLaunchIndex: undefined,
        ImageId: undefined,
        InstanceId: undefined,
        InstanceType: undefined,
        KernelId: undefined,
        KeyName: undefined,
        LaunchTime: undefined,
        Monitoring: undefined,
        Placement: undefined,
        Platform: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
        ProductCodes: undefined,
        PublicDnsName: undefined,
        PublicIpAddress: undefined,
        RamdiskId: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        SubnetId: undefined,
        VpcId: undefined,
        Architecture: undefined,
        BlockDeviceMappings: undefined,
        ClientToken: undefined,
        EbsOptimized: undefined,
        EnaSupport: undefined,
        Hypervisor: undefined,
        IamInstanceProfile: undefined,
        InstanceLifecycle: undefined,
        ElasticGpuAssociations: undefined,
        ElasticInferenceAcceleratorAssociations: undefined,
        NetworkInterfaces: undefined,
        OutpostArn: undefined,
        RootDeviceName: undefined,
        RootDeviceType: undefined,
        SecurityGroups: undefined,
        SourceDestCheck: undefined,
        SpotInstanceRequestId: undefined,
        SriovNetSupport: undefined,
        StateReason: undefined,
        Tags: undefined,
        VirtualizationType: undefined,
        CpuOptions: undefined,
        CapacityReservationId: undefined,
        CapacityReservationSpecification: undefined,
        HibernationOptions: undefined,
        Licenses: undefined,
        MetadataOptions: undefined,
        EnclaveOptions: undefined,
        BootMode: undefined,
        PlatformDetails: undefined,
        UsageOperation: undefined,
        UsageOperationUpdateTime: undefined,
        PrivateDnsNameOptions: undefined,
        Ipv6Address: undefined,
        TpmSupport: undefined,
        MaintenanceOptions: undefined,
    };
    if (output["amiLaunchIndex"] !== undefined) {
        contents.AmiLaunchIndex = __strictParseInt32(output["amiLaunchIndex"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["launchTime"] !== undefined) {
        contents.LaunchTime = __expectNonNull(__parseRfc3339DateTime(output["launchTime"]));
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2Monitoring(output["monitoring"], context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2Placement(output["placement"], context);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["dnsName"] !== undefined) {
        contents.PublicDnsName = __expectString(output["dnsName"]);
    }
    if (output["ipAddress"] !== undefined) {
        contents.PublicIpAddress = __expectString(output["ipAddress"]);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = __expectString(output["ramdiskId"]);
    }
    if (output["instanceState"] !== undefined) {
        contents.State = deserializeAws_ec2InstanceState(output["instanceState"], context);
    }
    if (output["reason"] !== undefined) {
        contents.StateTransitionReason = __expectString(output["reason"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["architecture"] !== undefined) {
        contents.Architecture = __expectString(output["architecture"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2InstanceBlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = __parseBoolean(output["enaSupport"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfile(output["iamInstanceProfile"], context);
    }
    if (output["instanceLifecycle"] !== undefined) {
        contents.InstanceLifecycle = __expectString(output["instanceLifecycle"]);
    }
    if (output.elasticGpuAssociationSet === "") {
        contents.ElasticGpuAssociations = [];
    }
    else if (output["elasticGpuAssociationSet"] !== undefined &&
        output["elasticGpuAssociationSet"]["item"] !== undefined) {
        contents.ElasticGpuAssociations = deserializeAws_ec2ElasticGpuAssociationList(__getArrayIfSingleItem(output["elasticGpuAssociationSet"]["item"]), context);
    }
    if (output.elasticInferenceAcceleratorAssociationSet === "") {
        contents.ElasticInferenceAcceleratorAssociations = [];
    }
    else if (output["elasticInferenceAcceleratorAssociationSet"] !== undefined &&
        output["elasticInferenceAcceleratorAssociationSet"]["item"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociations = deserializeAws_ec2ElasticInferenceAcceleratorAssociationList(__getArrayIfSingleItem(output["elasticInferenceAcceleratorAssociationSet"]["item"]), context);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2InstanceNetworkInterfaceList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["rootDeviceName"] !== undefined) {
        contents.RootDeviceName = __expectString(output["rootDeviceName"]);
    }
    if (output["rootDeviceType"] !== undefined) {
        contents.RootDeviceType = __expectString(output["rootDeviceType"]);
    }
    if (output.groupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = __parseBoolean(output["sourceDestCheck"]);
    }
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = __expectString(output["sriovNetSupport"]);
    }
    if (output["stateReason"] !== undefined) {
        contents.StateReason = deserializeAws_ec2StateReason(output["stateReason"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["virtualizationType"] !== undefined) {
        contents.VirtualizationType = __expectString(output["virtualizationType"]);
    }
    if (output["cpuOptions"] !== undefined) {
        contents.CpuOptions = deserializeAws_ec2CpuOptions(output["cpuOptions"], context);
    }
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
    }
    if (output["capacityReservationSpecification"] !== undefined) {
        contents.CapacityReservationSpecification = deserializeAws_ec2CapacityReservationSpecificationResponse(output["capacityReservationSpecification"], context);
    }
    if (output["hibernationOptions"] !== undefined) {
        contents.HibernationOptions = deserializeAws_ec2HibernationOptions(output["hibernationOptions"], context);
    }
    if (output.licenseSet === "") {
        contents.Licenses = [];
    }
    else if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
        contents.Licenses = deserializeAws_ec2LicenseList(__getArrayIfSingleItem(output["licenseSet"]["item"]), context);
    }
    if (output["metadataOptions"] !== undefined) {
        contents.MetadataOptions = deserializeAws_ec2InstanceMetadataOptionsResponse(output["metadataOptions"], context);
    }
    if (output["enclaveOptions"] !== undefined) {
        contents.EnclaveOptions = deserializeAws_ec2EnclaveOptions(output["enclaveOptions"], context);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = __expectString(output["bootMode"]);
    }
    if (output["platformDetails"] !== undefined) {
        contents.PlatformDetails = __expectString(output["platformDetails"]);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = __expectString(output["usageOperation"]);
    }
    if (output["usageOperationUpdateTime"] !== undefined) {
        contents.UsageOperationUpdateTime = __expectNonNull(__parseRfc3339DateTime(output["usageOperationUpdateTime"]));
    }
    if (output["privateDnsNameOptions"] !== undefined) {
        contents.PrivateDnsNameOptions = deserializeAws_ec2PrivateDnsNameOptionsResponse(output["privateDnsNameOptions"], context);
    }
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = __expectString(output["ipv6Address"]);
    }
    if (output["tpmSupport"] !== undefined) {
        contents.TpmSupport = __expectString(output["tpmSupport"]);
    }
    if (output["maintenanceOptions"] !== undefined) {
        contents.MaintenanceOptions = deserializeAws_ec2InstanceMaintenanceOptions(output["maintenanceOptions"], context);
    }
    return contents;
};
var deserializeAws_ec2InstanceAttribute = function (output, context) {
    var contents = {
        Groups: undefined,
        BlockDeviceMappings: undefined,
        DisableApiTermination: undefined,
        EnaSupport: undefined,
        EnclaveOptions: undefined,
        EbsOptimized: undefined,
        InstanceId: undefined,
        InstanceInitiatedShutdownBehavior: undefined,
        InstanceType: undefined,
        KernelId: undefined,
        ProductCodes: undefined,
        RamdiskId: undefined,
        RootDeviceName: undefined,
        SourceDestCheck: undefined,
        SriovNetSupport: undefined,
        UserData: undefined,
        DisableApiStop: undefined,
    };
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2InstanceBlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["disableApiTermination"] !== undefined) {
        contents.DisableApiTermination = deserializeAws_ec2AttributeBooleanValue(output["disableApiTermination"], context);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = deserializeAws_ec2AttributeBooleanValue(output["enaSupport"], context);
    }
    if (output["enclaveOptions"] !== undefined) {
        contents.EnclaveOptions = deserializeAws_ec2EnclaveOptions(output["enclaveOptions"], context);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = deserializeAws_ec2AttributeBooleanValue(output["ebsOptimized"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
        contents.InstanceInitiatedShutdownBehavior = deserializeAws_ec2AttributeValue(output["instanceInitiatedShutdownBehavior"], context);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = deserializeAws_ec2AttributeValue(output["instanceType"], context);
    }
    if (output["kernel"] !== undefined) {
        contents.KernelId = deserializeAws_ec2AttributeValue(output["kernel"], context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
    }
    if (output["ramdisk"] !== undefined) {
        contents.RamdiskId = deserializeAws_ec2AttributeValue(output["ramdisk"], context);
    }
    if (output["rootDeviceName"] !== undefined) {
        contents.RootDeviceName = deserializeAws_ec2AttributeValue(output["rootDeviceName"], context);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = deserializeAws_ec2AttributeBooleanValue(output["sourceDestCheck"], context);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = deserializeAws_ec2AttributeValue(output["sriovNetSupport"], context);
    }
    if (output["userData"] !== undefined) {
        contents.UserData = deserializeAws_ec2AttributeValue(output["userData"], context);
    }
    if (output["disableApiStop"] !== undefined) {
        contents.DisableApiStop = deserializeAws_ec2AttributeBooleanValue(output["disableApiStop"], context);
    }
    return contents;
};
var deserializeAws_ec2InstanceBlockDeviceMapping = function (output, context) {
    var contents = {
        DeviceName: undefined,
        Ebs: undefined,
    };
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output["ebs"] !== undefined) {
        contents.Ebs = deserializeAws_ec2EbsInstanceBlockDevice(output["ebs"], context);
    }
    return contents;
};
var deserializeAws_ec2InstanceBlockDeviceMappingList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceBlockDeviceMapping(entry, context);
    });
};
var deserializeAws_ec2InstanceCapacity = function (output, context) {
    var contents = {
        AvailableCapacity: undefined,
        InstanceType: undefined,
        TotalCapacity: undefined,
    };
    if (output["availableCapacity"] !== undefined) {
        contents.AvailableCapacity = __strictParseInt32(output["availableCapacity"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["totalCapacity"] !== undefined) {
        contents.TotalCapacity = __strictParseInt32(output["totalCapacity"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceCount = function (output, context) {
    var contents = {
        InstanceCount: undefined,
        State: undefined,
    };
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceCountList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceCount(entry, context);
    });
};
var deserializeAws_ec2InstanceCreditSpecification = function (output, context) {
    var contents = {
        InstanceId: undefined,
        CpuCredits: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["cpuCredits"] !== undefined) {
        contents.CpuCredits = __expectString(output["cpuCredits"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceCreditSpecificationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceCreditSpecification(entry, context);
    });
};
var deserializeAws_ec2InstanceEventWindow = function (output, context) {
    var contents = {
        InstanceEventWindowId: undefined,
        TimeRanges: undefined,
        Name: undefined,
        CronExpression: undefined,
        AssociationTarget: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["instanceEventWindowId"] !== undefined) {
        contents.InstanceEventWindowId = __expectString(output["instanceEventWindowId"]);
    }
    if (output.timeRangeSet === "") {
        contents.TimeRanges = [];
    }
    else if (output["timeRangeSet"] !== undefined && output["timeRangeSet"]["item"] !== undefined) {
        contents.TimeRanges = deserializeAws_ec2InstanceEventWindowTimeRangeList(__getArrayIfSingleItem(output["timeRangeSet"]["item"]), context);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["cronExpression"] !== undefined) {
        contents.CronExpression = __expectString(output["cronExpression"]);
    }
    if (output["associationTarget"] !== undefined) {
        contents.AssociationTarget = deserializeAws_ec2InstanceEventWindowAssociationTarget(output["associationTarget"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2InstanceEventWindowAssociationTarget = function (output, context) {
    var contents = {
        InstanceIds: undefined,
        Tags: undefined,
        DedicatedHostIds: undefined,
    };
    if (output.instanceIdSet === "") {
        contents.InstanceIds = [];
    }
    else if (output["instanceIdSet"] !== undefined && output["instanceIdSet"]["item"] !== undefined) {
        contents.InstanceIds = deserializeAws_ec2InstanceIdList(__getArrayIfSingleItem(output["instanceIdSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.dedicatedHostIdSet === "") {
        contents.DedicatedHostIds = [];
    }
    else if (output["dedicatedHostIdSet"] !== undefined && output["dedicatedHostIdSet"]["item"] !== undefined) {
        contents.DedicatedHostIds = deserializeAws_ec2DedicatedHostIdList(__getArrayIfSingleItem(output["dedicatedHostIdSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2InstanceEventWindowSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceEventWindow(entry, context);
    });
};
var deserializeAws_ec2InstanceEventWindowStateChange = function (output, context) {
    var contents = {
        InstanceEventWindowId: undefined,
        State: undefined,
    };
    if (output["instanceEventWindowId"] !== undefined) {
        contents.InstanceEventWindowId = __expectString(output["instanceEventWindowId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceEventWindowTimeRange = function (output, context) {
    var contents = {
        StartWeekDay: undefined,
        StartHour: undefined,
        EndWeekDay: undefined,
        EndHour: undefined,
    };
    if (output["startWeekDay"] !== undefined) {
        contents.StartWeekDay = __expectString(output["startWeekDay"]);
    }
    if (output["startHour"] !== undefined) {
        contents.StartHour = __strictParseInt32(output["startHour"]);
    }
    if (output["endWeekDay"] !== undefined) {
        contents.EndWeekDay = __expectString(output["endWeekDay"]);
    }
    if (output["endHour"] !== undefined) {
        contents.EndHour = __strictParseInt32(output["endHour"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceEventWindowTimeRangeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceEventWindowTimeRange(entry, context);
    });
};
var deserializeAws_ec2InstanceExportDetails = function (output, context) {
    var contents = {
        InstanceId: undefined,
        TargetEnvironment: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["targetEnvironment"] !== undefined) {
        contents.TargetEnvironment = __expectString(output["targetEnvironment"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceFamilyCreditSpecification = function (output, context) {
    var contents = {
        InstanceFamily: undefined,
        CpuCredits: undefined,
    };
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["cpuCredits"] !== undefined) {
        contents.CpuCredits = __expectString(output["cpuCredits"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceGenerationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2InstanceIdList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2InstanceIdSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2InstanceIdsSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2InstanceIpv4Prefix = function (output, context) {
    var contents = {
        Ipv4Prefix: undefined,
    };
    if (output["ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = __expectString(output["ipv4Prefix"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceIpv4PrefixList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceIpv4Prefix(entry, context);
    });
};
var deserializeAws_ec2InstanceIpv6Address = function (output, context) {
    var contents = {
        Ipv6Address: undefined,
    };
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = __expectString(output["ipv6Address"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceIpv6AddressList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceIpv6Address(entry, context);
    });
};
var deserializeAws_ec2InstanceIpv6Prefix = function (output, context) {
    var contents = {
        Ipv6Prefix: undefined,
    };
    if (output["ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = __expectString(output["ipv6Prefix"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceIpv6PrefixList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceIpv6Prefix(entry, context);
    });
};
var deserializeAws_ec2InstanceList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Instance(entry, context);
    });
};
var deserializeAws_ec2InstanceMaintenanceOptions = function (output, context) {
    var contents = {
        AutoRecovery: undefined,
    };
    if (output["autoRecovery"] !== undefined) {
        contents.AutoRecovery = __expectString(output["autoRecovery"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceMetadataOptionsResponse = function (output, context) {
    var contents = {
        State: undefined,
        HttpTokens: undefined,
        HttpPutResponseHopLimit: undefined,
        HttpEndpoint: undefined,
        HttpProtocolIpv6: undefined,
        InstanceMetadataTags: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["httpTokens"] !== undefined) {
        contents.HttpTokens = __expectString(output["httpTokens"]);
    }
    if (output["httpPutResponseHopLimit"] !== undefined) {
        contents.HttpPutResponseHopLimit = __strictParseInt32(output["httpPutResponseHopLimit"]);
    }
    if (output["httpEndpoint"] !== undefined) {
        contents.HttpEndpoint = __expectString(output["httpEndpoint"]);
    }
    if (output["httpProtocolIpv6"] !== undefined) {
        contents.HttpProtocolIpv6 = __expectString(output["httpProtocolIpv6"]);
    }
    if (output["instanceMetadataTags"] !== undefined) {
        contents.InstanceMetadataTags = __expectString(output["instanceMetadataTags"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceMonitoring = function (output, context) {
    var contents = {
        InstanceId: undefined,
        Monitoring: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2Monitoring(output["monitoring"], context);
    }
    return contents;
};
var deserializeAws_ec2InstanceMonitoringList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceMonitoring(entry, context);
    });
};
var deserializeAws_ec2InstanceNetworkInterface = function (output, context) {
    var contents = {
        Association: undefined,
        Attachment: undefined,
        Description: undefined,
        Groups: undefined,
        Ipv6Addresses: undefined,
        MacAddress: undefined,
        NetworkInterfaceId: undefined,
        OwnerId: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
        PrivateIpAddresses: undefined,
        SourceDestCheck: undefined,
        Status: undefined,
        SubnetId: undefined,
        VpcId: undefined,
        InterfaceType: undefined,
        Ipv4Prefixes: undefined,
        Ipv6Prefixes: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2InstanceNetworkInterfaceAssociation(output["association"], context);
    }
    if (output["attachment"] !== undefined) {
        contents.Attachment = deserializeAws_ec2InstanceNetworkInterfaceAttachment(output["attachment"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = deserializeAws_ec2InstanceIpv6AddressList(__getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["macAddress"] !== undefined) {
        contents.MacAddress = __expectString(output["macAddress"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = deserializeAws_ec2InstancePrivateIpAddressList(__getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = __parseBoolean(output["sourceDestCheck"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["interfaceType"] !== undefined) {
        contents.InterfaceType = __expectString(output["interfaceType"]);
    }
    if (output.ipv4PrefixSet === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
        contents.Ipv4Prefixes = deserializeAws_ec2InstanceIpv4PrefixList(__getArrayIfSingleItem(output["ipv4PrefixSet"]["item"]), context);
    }
    if (output.ipv6PrefixSet === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
        contents.Ipv6Prefixes = deserializeAws_ec2InstanceIpv6PrefixList(__getArrayIfSingleItem(output["ipv6PrefixSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2InstanceNetworkInterfaceAssociation = function (output, context) {
    var contents = {
        CarrierIp: undefined,
        CustomerOwnedIp: undefined,
        IpOwnerId: undefined,
        PublicDnsName: undefined,
        PublicIp: undefined,
    };
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = __expectString(output["carrierIp"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
    }
    if (output["ipOwnerId"] !== undefined) {
        contents.IpOwnerId = __expectString(output["ipOwnerId"]);
    }
    if (output["publicDnsName"] !== undefined) {
        contents.PublicDnsName = __expectString(output["publicDnsName"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceNetworkInterfaceAttachment = function (output, context) {
    var contents = {
        AttachTime: undefined,
        AttachmentId: undefined,
        DeleteOnTermination: undefined,
        DeviceIndex: undefined,
        Status: undefined,
        NetworkCardIndex: undefined,
    };
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = __expectNonNull(__parseRfc3339DateTime(output["attachTime"]));
    }
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = __expectString(output["attachmentId"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceNetworkInterfaceList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceNetworkInterface(entry, context);
    });
};
var deserializeAws_ec2InstanceNetworkInterfaceSpecification = function (output, context) {
    var contents = {
        AssociatePublicIpAddress: undefined,
        DeleteOnTermination: undefined,
        Description: undefined,
        DeviceIndex: undefined,
        Groups: undefined,
        Ipv6AddressCount: undefined,
        Ipv6Addresses: undefined,
        NetworkInterfaceId: undefined,
        PrivateIpAddress: undefined,
        PrivateIpAddresses: undefined,
        SecondaryPrivateIpAddressCount: undefined,
        SubnetId: undefined,
        AssociateCarrierIpAddress: undefined,
        InterfaceType: undefined,
        NetworkCardIndex: undefined,
        Ipv4Prefixes: undefined,
        Ipv4PrefixCount: undefined,
        Ipv6Prefixes: undefined,
        Ipv6PrefixCount: undefined,
    };
    if (output["associatePublicIpAddress"] !== undefined) {
        contents.AssociatePublicIpAddress = __parseBoolean(output["associatePublicIpAddress"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]);
    }
    if (output.SecurityGroupId === "") {
        contents.Groups = [];
    }
    else if (output["SecurityGroupId"] !== undefined && output["SecurityGroupId"]["SecurityGroupId"] !== undefined) {
        contents.Groups = deserializeAws_ec2SecurityGroupIdStringList(__getArrayIfSingleItem(output["SecurityGroupId"]["SecurityGroupId"]), context);
    }
    if (output["ipv6AddressCount"] !== undefined) {
        contents.Ipv6AddressCount = __strictParseInt32(output["ipv6AddressCount"]);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = deserializeAws_ec2InstanceIpv6AddressList(__getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = deserializeAws_ec2PrivateIpAddressSpecificationList(__getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output["secondaryPrivateIpAddressCount"] !== undefined) {
        contents.SecondaryPrivateIpAddressCount = __strictParseInt32(output["secondaryPrivateIpAddressCount"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["AssociateCarrierIpAddress"] !== undefined) {
        contents.AssociateCarrierIpAddress = __parseBoolean(output["AssociateCarrierIpAddress"]);
    }
    if (output["InterfaceType"] !== undefined) {
        contents.InterfaceType = __expectString(output["InterfaceType"]);
    }
    if (output["NetworkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["NetworkCardIndex"]);
    }
    if (output.Ipv4Prefix === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["Ipv4Prefix"] !== undefined && output["Ipv4Prefix"]["item"] !== undefined) {
        contents.Ipv4Prefixes = deserializeAws_ec2Ipv4PrefixList(__getArrayIfSingleItem(output["Ipv4Prefix"]["item"]), context);
    }
    if (output["Ipv4PrefixCount"] !== undefined) {
        contents.Ipv4PrefixCount = __strictParseInt32(output["Ipv4PrefixCount"]);
    }
    if (output.Ipv6Prefix === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["Ipv6Prefix"] !== undefined && output["Ipv6Prefix"]["item"] !== undefined) {
        contents.Ipv6Prefixes = deserializeAws_ec2Ipv6PrefixList(__getArrayIfSingleItem(output["Ipv6Prefix"]["item"]), context);
    }
    if (output["Ipv6PrefixCount"] !== undefined) {
        contents.Ipv6PrefixCount = __strictParseInt32(output["Ipv6PrefixCount"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceNetworkInterfaceSpecificationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceNetworkInterfaceSpecification(entry, context);
    });
};
var deserializeAws_ec2InstancePrivateIpAddress = function (output, context) {
    var contents = {
        Association: undefined,
        Primary: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2InstanceNetworkInterfaceAssociation(output["association"], context);
    }
    if (output["primary"] !== undefined) {
        contents.Primary = __parseBoolean(output["primary"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    return contents;
};
var deserializeAws_ec2InstancePrivateIpAddressList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstancePrivateIpAddress(entry, context);
    });
};
var deserializeAws_ec2InstanceRequirements = function (output, context) {
    var contents = {
        VCpuCount: undefined,
        MemoryMiB: undefined,
        CpuManufacturers: undefined,
        MemoryGiBPerVCpu: undefined,
        ExcludedInstanceTypes: undefined,
        InstanceGenerations: undefined,
        SpotMaxPricePercentageOverLowestPrice: undefined,
        OnDemandMaxPricePercentageOverLowestPrice: undefined,
        BareMetal: undefined,
        BurstablePerformance: undefined,
        RequireHibernateSupport: undefined,
        NetworkInterfaceCount: undefined,
        LocalStorage: undefined,
        LocalStorageTypes: undefined,
        TotalLocalStorageGB: undefined,
        BaselineEbsBandwidthMbps: undefined,
        AcceleratorTypes: undefined,
        AcceleratorCount: undefined,
        AcceleratorManufacturers: undefined,
        AcceleratorNames: undefined,
        AcceleratorTotalMemoryMiB: undefined,
    };
    if (output["vCpuCount"] !== undefined) {
        contents.VCpuCount = deserializeAws_ec2VCpuCountRange(output["vCpuCount"], context);
    }
    if (output["memoryMiB"] !== undefined) {
        contents.MemoryMiB = deserializeAws_ec2MemoryMiB(output["memoryMiB"], context);
    }
    if (output.cpuManufacturerSet === "") {
        contents.CpuManufacturers = [];
    }
    else if (output["cpuManufacturerSet"] !== undefined && output["cpuManufacturerSet"]["item"] !== undefined) {
        contents.CpuManufacturers = deserializeAws_ec2CpuManufacturerSet(__getArrayIfSingleItem(output["cpuManufacturerSet"]["item"]), context);
    }
    if (output["memoryGiBPerVCpu"] !== undefined) {
        contents.MemoryGiBPerVCpu = deserializeAws_ec2MemoryGiBPerVCpu(output["memoryGiBPerVCpu"], context);
    }
    if (output.excludedInstanceTypeSet === "") {
        contents.ExcludedInstanceTypes = [];
    }
    else if (output["excludedInstanceTypeSet"] !== undefined &&
        output["excludedInstanceTypeSet"]["item"] !== undefined) {
        contents.ExcludedInstanceTypes = deserializeAws_ec2ExcludedInstanceTypeSet(__getArrayIfSingleItem(output["excludedInstanceTypeSet"]["item"]), context);
    }
    if (output.instanceGenerationSet === "") {
        contents.InstanceGenerations = [];
    }
    else if (output["instanceGenerationSet"] !== undefined && output["instanceGenerationSet"]["item"] !== undefined) {
        contents.InstanceGenerations = deserializeAws_ec2InstanceGenerationSet(__getArrayIfSingleItem(output["instanceGenerationSet"]["item"]), context);
    }
    if (output["spotMaxPricePercentageOverLowestPrice"] !== undefined) {
        contents.SpotMaxPricePercentageOverLowestPrice = __strictParseInt32(output["spotMaxPricePercentageOverLowestPrice"]);
    }
    if (output["onDemandMaxPricePercentageOverLowestPrice"] !== undefined) {
        contents.OnDemandMaxPricePercentageOverLowestPrice = __strictParseInt32(output["onDemandMaxPricePercentageOverLowestPrice"]);
    }
    if (output["bareMetal"] !== undefined) {
        contents.BareMetal = __expectString(output["bareMetal"]);
    }
    if (output["burstablePerformance"] !== undefined) {
        contents.BurstablePerformance = __expectString(output["burstablePerformance"]);
    }
    if (output["requireHibernateSupport"] !== undefined) {
        contents.RequireHibernateSupport = __parseBoolean(output["requireHibernateSupport"]);
    }
    if (output["networkInterfaceCount"] !== undefined) {
        contents.NetworkInterfaceCount = deserializeAws_ec2NetworkInterfaceCount(output["networkInterfaceCount"], context);
    }
    if (output["localStorage"] !== undefined) {
        contents.LocalStorage = __expectString(output["localStorage"]);
    }
    if (output.localStorageTypeSet === "") {
        contents.LocalStorageTypes = [];
    }
    else if (output["localStorageTypeSet"] !== undefined && output["localStorageTypeSet"]["item"] !== undefined) {
        contents.LocalStorageTypes = deserializeAws_ec2LocalStorageTypeSet(__getArrayIfSingleItem(output["localStorageTypeSet"]["item"]), context);
    }
    if (output["totalLocalStorageGB"] !== undefined) {
        contents.TotalLocalStorageGB = deserializeAws_ec2TotalLocalStorageGB(output["totalLocalStorageGB"], context);
    }
    if (output["baselineEbsBandwidthMbps"] !== undefined) {
        contents.BaselineEbsBandwidthMbps = deserializeAws_ec2BaselineEbsBandwidthMbps(output["baselineEbsBandwidthMbps"], context);
    }
    if (output.acceleratorTypeSet === "") {
        contents.AcceleratorTypes = [];
    }
    else if (output["acceleratorTypeSet"] !== undefined && output["acceleratorTypeSet"]["item"] !== undefined) {
        contents.AcceleratorTypes = deserializeAws_ec2AcceleratorTypeSet(__getArrayIfSingleItem(output["acceleratorTypeSet"]["item"]), context);
    }
    if (output["acceleratorCount"] !== undefined) {
        contents.AcceleratorCount = deserializeAws_ec2AcceleratorCount(output["acceleratorCount"], context);
    }
    if (output.acceleratorManufacturerSet === "") {
        contents.AcceleratorManufacturers = [];
    }
    else if (output["acceleratorManufacturerSet"] !== undefined &&
        output["acceleratorManufacturerSet"]["item"] !== undefined) {
        contents.AcceleratorManufacturers = deserializeAws_ec2AcceleratorManufacturerSet(__getArrayIfSingleItem(output["acceleratorManufacturerSet"]["item"]), context);
    }
    if (output.acceleratorNameSet === "") {
        contents.AcceleratorNames = [];
    }
    else if (output["acceleratorNameSet"] !== undefined && output["acceleratorNameSet"]["item"] !== undefined) {
        contents.AcceleratorNames = deserializeAws_ec2AcceleratorNameSet(__getArrayIfSingleItem(output["acceleratorNameSet"]["item"]), context);
    }
    if (output["acceleratorTotalMemoryMiB"] !== undefined) {
        contents.AcceleratorTotalMemoryMiB = deserializeAws_ec2AcceleratorTotalMemoryMiB(output["acceleratorTotalMemoryMiB"], context);
    }
    return contents;
};
var deserializeAws_ec2InstanceState = function (output, context) {
    var contents = {
        Code: undefined,
        Name: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __strictParseInt32(output["code"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceStateChange = function (output, context) {
    var contents = {
        CurrentState: undefined,
        InstanceId: undefined,
        PreviousState: undefined,
    };
    if (output["currentState"] !== undefined) {
        contents.CurrentState = deserializeAws_ec2InstanceState(output["currentState"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["previousState"] !== undefined) {
        contents.PreviousState = deserializeAws_ec2InstanceState(output["previousState"], context);
    }
    return contents;
};
var deserializeAws_ec2InstanceStateChangeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceStateChange(entry, context);
    });
};
var deserializeAws_ec2InstanceStatus = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        OutpostArn: undefined,
        Events: undefined,
        InstanceId: undefined,
        InstanceState: undefined,
        InstanceStatus: undefined,
        SystemStatus: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output.eventsSet === "") {
        contents.Events = [];
    }
    else if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
        contents.Events = deserializeAws_ec2InstanceStatusEventList(__getArrayIfSingleItem(output["eventsSet"]["item"]), context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceState"] !== undefined) {
        contents.InstanceState = deserializeAws_ec2InstanceState(output["instanceState"], context);
    }
    if (output["instanceStatus"] !== undefined) {
        contents.InstanceStatus = deserializeAws_ec2InstanceStatusSummary(output["instanceStatus"], context);
    }
    if (output["systemStatus"] !== undefined) {
        contents.SystemStatus = deserializeAws_ec2InstanceStatusSummary(output["systemStatus"], context);
    }
    return contents;
};
var deserializeAws_ec2InstanceStatusDetails = function (output, context) {
    var contents = {
        ImpairedSince: undefined,
        Name: undefined,
        Status: undefined,
    };
    if (output["impairedSince"] !== undefined) {
        contents.ImpairedSince = __expectNonNull(__parseRfc3339DateTime(output["impairedSince"]));
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceStatusDetailsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceStatusDetails(entry, context);
    });
};
var deserializeAws_ec2InstanceStatusEvent = function (output, context) {
    var contents = {
        InstanceEventId: undefined,
        Code: undefined,
        Description: undefined,
        NotAfter: undefined,
        NotBefore: undefined,
        NotBeforeDeadline: undefined,
    };
    if (output["instanceEventId"] !== undefined) {
        contents.InstanceEventId = __expectString(output["instanceEventId"]);
    }
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["notAfter"] !== undefined) {
        contents.NotAfter = __expectNonNull(__parseRfc3339DateTime(output["notAfter"]));
    }
    if (output["notBefore"] !== undefined) {
        contents.NotBefore = __expectNonNull(__parseRfc3339DateTime(output["notBefore"]));
    }
    if (output["notBeforeDeadline"] !== undefined) {
        contents.NotBeforeDeadline = __expectNonNull(__parseRfc3339DateTime(output["notBeforeDeadline"]));
    }
    return contents;
};
var deserializeAws_ec2InstanceStatusEventList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceStatusEvent(entry, context);
    });
};
var deserializeAws_ec2InstanceStatusList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceStatus(entry, context);
    });
};
var deserializeAws_ec2InstanceStatusSummary = function (output, context) {
    var contents = {
        Details: undefined,
        Status: undefined,
    };
    if (output.details === "") {
        contents.Details = [];
    }
    else if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
        contents.Details = deserializeAws_ec2InstanceStatusDetailsList(__getArrayIfSingleItem(output["details"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceStorageInfo = function (output, context) {
    var contents = {
        TotalSizeInGB: undefined,
        Disks: undefined,
        NvmeSupport: undefined,
        EncryptionSupport: undefined,
    };
    if (output["totalSizeInGB"] !== undefined) {
        contents.TotalSizeInGB = __strictParseLong(output["totalSizeInGB"]);
    }
    if (output.disks === "") {
        contents.Disks = [];
    }
    else if (output["disks"] !== undefined && output["disks"]["item"] !== undefined) {
        contents.Disks = deserializeAws_ec2DiskInfoList(__getArrayIfSingleItem(output["disks"]["item"]), context);
    }
    if (output["nvmeSupport"] !== undefined) {
        contents.NvmeSupport = __expectString(output["nvmeSupport"]);
    }
    if (output["encryptionSupport"] !== undefined) {
        contents.EncryptionSupport = __expectString(output["encryptionSupport"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceTagKeySet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2InstanceTagNotificationAttribute = function (output, context) {
    var contents = {
        InstanceTagKeys: undefined,
        IncludeAllTagsOfInstance: undefined,
    };
    if (output.instanceTagKeySet === "") {
        contents.InstanceTagKeys = [];
    }
    else if (output["instanceTagKeySet"] !== undefined && output["instanceTagKeySet"]["item"] !== undefined) {
        contents.InstanceTagKeys = deserializeAws_ec2InstanceTagKeySet(__getArrayIfSingleItem(output["instanceTagKeySet"]["item"]), context);
    }
    if (output["includeAllTagsOfInstance"] !== undefined) {
        contents.IncludeAllTagsOfInstance = __parseBoolean(output["includeAllTagsOfInstance"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceTypeInfo = function (output, context) {
    var contents = {
        InstanceType: undefined,
        CurrentGeneration: undefined,
        FreeTierEligible: undefined,
        SupportedUsageClasses: undefined,
        SupportedRootDeviceTypes: undefined,
        SupportedVirtualizationTypes: undefined,
        BareMetal: undefined,
        Hypervisor: undefined,
        ProcessorInfo: undefined,
        VCpuInfo: undefined,
        MemoryInfo: undefined,
        InstanceStorageSupported: undefined,
        InstanceStorageInfo: undefined,
        EbsInfo: undefined,
        NetworkInfo: undefined,
        GpuInfo: undefined,
        FpgaInfo: undefined,
        PlacementGroupInfo: undefined,
        InferenceAcceleratorInfo: undefined,
        HibernationSupported: undefined,
        BurstablePerformanceSupported: undefined,
        DedicatedHostsSupported: undefined,
        AutoRecoverySupported: undefined,
        SupportedBootModes: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["currentGeneration"] !== undefined) {
        contents.CurrentGeneration = __parseBoolean(output["currentGeneration"]);
    }
    if (output["freeTierEligible"] !== undefined) {
        contents.FreeTierEligible = __parseBoolean(output["freeTierEligible"]);
    }
    if (output.supportedUsageClasses === "") {
        contents.SupportedUsageClasses = [];
    }
    else if (output["supportedUsageClasses"] !== undefined && output["supportedUsageClasses"]["item"] !== undefined) {
        contents.SupportedUsageClasses = deserializeAws_ec2UsageClassTypeList(__getArrayIfSingleItem(output["supportedUsageClasses"]["item"]), context);
    }
    if (output.supportedRootDeviceTypes === "") {
        contents.SupportedRootDeviceTypes = [];
    }
    else if (output["supportedRootDeviceTypes"] !== undefined &&
        output["supportedRootDeviceTypes"]["item"] !== undefined) {
        contents.SupportedRootDeviceTypes = deserializeAws_ec2RootDeviceTypeList(__getArrayIfSingleItem(output["supportedRootDeviceTypes"]["item"]), context);
    }
    if (output.supportedVirtualizationTypes === "") {
        contents.SupportedVirtualizationTypes = [];
    }
    else if (output["supportedVirtualizationTypes"] !== undefined &&
        output["supportedVirtualizationTypes"]["item"] !== undefined) {
        contents.SupportedVirtualizationTypes = deserializeAws_ec2VirtualizationTypeList(__getArrayIfSingleItem(output["supportedVirtualizationTypes"]["item"]), context);
    }
    if (output["bareMetal"] !== undefined) {
        contents.BareMetal = __parseBoolean(output["bareMetal"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = __expectString(output["hypervisor"]);
    }
    if (output["processorInfo"] !== undefined) {
        contents.ProcessorInfo = deserializeAws_ec2ProcessorInfo(output["processorInfo"], context);
    }
    if (output["vCpuInfo"] !== undefined) {
        contents.VCpuInfo = deserializeAws_ec2VCpuInfo(output["vCpuInfo"], context);
    }
    if (output["memoryInfo"] !== undefined) {
        contents.MemoryInfo = deserializeAws_ec2MemoryInfo(output["memoryInfo"], context);
    }
    if (output["instanceStorageSupported"] !== undefined) {
        contents.InstanceStorageSupported = __parseBoolean(output["instanceStorageSupported"]);
    }
    if (output["instanceStorageInfo"] !== undefined) {
        contents.InstanceStorageInfo = deserializeAws_ec2InstanceStorageInfo(output["instanceStorageInfo"], context);
    }
    if (output["ebsInfo"] !== undefined) {
        contents.EbsInfo = deserializeAws_ec2EbsInfo(output["ebsInfo"], context);
    }
    if (output["networkInfo"] !== undefined) {
        contents.NetworkInfo = deserializeAws_ec2NetworkInfo(output["networkInfo"], context);
    }
    if (output["gpuInfo"] !== undefined) {
        contents.GpuInfo = deserializeAws_ec2GpuInfo(output["gpuInfo"], context);
    }
    if (output["fpgaInfo"] !== undefined) {
        contents.FpgaInfo = deserializeAws_ec2FpgaInfo(output["fpgaInfo"], context);
    }
    if (output["placementGroupInfo"] !== undefined) {
        contents.PlacementGroupInfo = deserializeAws_ec2PlacementGroupInfo(output["placementGroupInfo"], context);
    }
    if (output["inferenceAcceleratorInfo"] !== undefined) {
        contents.InferenceAcceleratorInfo = deserializeAws_ec2InferenceAcceleratorInfo(output["inferenceAcceleratorInfo"], context);
    }
    if (output["hibernationSupported"] !== undefined) {
        contents.HibernationSupported = __parseBoolean(output["hibernationSupported"]);
    }
    if (output["burstablePerformanceSupported"] !== undefined) {
        contents.BurstablePerformanceSupported = __parseBoolean(output["burstablePerformanceSupported"]);
    }
    if (output["dedicatedHostsSupported"] !== undefined) {
        contents.DedicatedHostsSupported = __parseBoolean(output["dedicatedHostsSupported"]);
    }
    if (output["autoRecoverySupported"] !== undefined) {
        contents.AutoRecoverySupported = __parseBoolean(output["autoRecoverySupported"]);
    }
    if (output.supportedBootModes === "") {
        contents.SupportedBootModes = [];
    }
    else if (output["supportedBootModes"] !== undefined && output["supportedBootModes"]["item"] !== undefined) {
        contents.SupportedBootModes = deserializeAws_ec2BootModeTypeList(__getArrayIfSingleItem(output["supportedBootModes"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2InstanceTypeInfoFromInstanceRequirements = function (output, context) {
    var contents = {
        InstanceType: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceTypeInfoFromInstanceRequirementsSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceTypeInfoFromInstanceRequirements(entry, context);
    });
};
var deserializeAws_ec2InstanceTypeInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceTypeInfo(entry, context);
    });
};
var deserializeAws_ec2InstanceTypeOffering = function (output, context) {
    var contents = {
        InstanceType: undefined,
        LocationType: undefined,
        Location: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["locationType"] !== undefined) {
        contents.LocationType = __expectString(output["locationType"]);
    }
    if (output["location"] !== undefined) {
        contents.Location = __expectString(output["location"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceTypeOfferingsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceTypeOffering(entry, context);
    });
};
var deserializeAws_ec2InstanceUsage = function (output, context) {
    var contents = {
        AccountId: undefined,
        UsedInstanceCount: undefined,
    };
    if (output["accountId"] !== undefined) {
        contents.AccountId = __expectString(output["accountId"]);
    }
    if (output["usedInstanceCount"] !== undefined) {
        contents.UsedInstanceCount = __strictParseInt32(output["usedInstanceCount"]);
    }
    return contents;
};
var deserializeAws_ec2InstanceUsageSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceUsage(entry, context);
    });
};
var deserializeAws_ec2InternetGateway = function (output, context) {
    var contents = {
        Attachments: undefined,
        InternetGatewayId: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output.attachmentSet === "") {
        contents.Attachments = [];
    }
    else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
        contents.Attachments = deserializeAws_ec2InternetGatewayAttachmentList(__getArrayIfSingleItem(output["attachmentSet"]["item"]), context);
    }
    if (output["internetGatewayId"] !== undefined) {
        contents.InternetGatewayId = __expectString(output["internetGatewayId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2InternetGatewayAttachment = function (output, context) {
    var contents = {
        State: undefined,
        VpcId: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2InternetGatewayAttachmentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InternetGatewayAttachment(entry, context);
    });
};
var deserializeAws_ec2InternetGatewayList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InternetGateway(entry, context);
    });
};
var deserializeAws_ec2IpAddressList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2Ipam = function (output, context) {
    var contents = {
        OwnerId: undefined,
        IpamId: undefined,
        IpamArn: undefined,
        IpamRegion: undefined,
        PublicDefaultScopeId: undefined,
        PrivateDefaultScopeId: undefined,
        ScopeCount: undefined,
        Description: undefined,
        OperatingRegions: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ipamId"] !== undefined) {
        contents.IpamId = __expectString(output["ipamId"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = __expectString(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = __expectString(output["ipamRegion"]);
    }
    if (output["publicDefaultScopeId"] !== undefined) {
        contents.PublicDefaultScopeId = __expectString(output["publicDefaultScopeId"]);
    }
    if (output["privateDefaultScopeId"] !== undefined) {
        contents.PrivateDefaultScopeId = __expectString(output["privateDefaultScopeId"]);
    }
    if (output["scopeCount"] !== undefined) {
        contents.ScopeCount = __strictParseInt32(output["scopeCount"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.operatingRegionSet === "") {
        contents.OperatingRegions = [];
    }
    else if (output["operatingRegionSet"] !== undefined && output["operatingRegionSet"]["item"] !== undefined) {
        contents.OperatingRegions = deserializeAws_ec2IpamOperatingRegionSet(__getArrayIfSingleItem(output["operatingRegionSet"]["item"]), context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2IpamAddressHistoryRecord = function (output, context) {
    var contents = {
        ResourceOwnerId: undefined,
        ResourceRegion: undefined,
        ResourceType: undefined,
        ResourceId: undefined,
        ResourceCidr: undefined,
        ResourceName: undefined,
        ResourceComplianceStatus: undefined,
        ResourceOverlapStatus: undefined,
        VpcId: undefined,
        SampledStartTime: undefined,
        SampledEndTime: undefined,
    };
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = __expectString(output["resourceRegion"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceCidr"] !== undefined) {
        contents.ResourceCidr = __expectString(output["resourceCidr"]);
    }
    if (output["resourceName"] !== undefined) {
        contents.ResourceName = __expectString(output["resourceName"]);
    }
    if (output["resourceComplianceStatus"] !== undefined) {
        contents.ResourceComplianceStatus = __expectString(output["resourceComplianceStatus"]);
    }
    if (output["resourceOverlapStatus"] !== undefined) {
        contents.ResourceOverlapStatus = __expectString(output["resourceOverlapStatus"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["sampledStartTime"] !== undefined) {
        contents.SampledStartTime = __expectNonNull(__parseRfc3339DateTime(output["sampledStartTime"]));
    }
    if (output["sampledEndTime"] !== undefined) {
        contents.SampledEndTime = __expectNonNull(__parseRfc3339DateTime(output["sampledEndTime"]));
    }
    return contents;
};
var deserializeAws_ec2IpamAddressHistoryRecordSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamAddressHistoryRecord(entry, context);
    });
};
var deserializeAws_ec2IpamOperatingRegion = function (output, context) {
    var contents = {
        RegionName: undefined,
    };
    if (output["regionName"] !== undefined) {
        contents.RegionName = __expectString(output["regionName"]);
    }
    return contents;
};
var deserializeAws_ec2IpamOperatingRegionSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamOperatingRegion(entry, context);
    });
};
var deserializeAws_ec2IpamPool = function (output, context) {
    var contents = {
        OwnerId: undefined,
        IpamPoolId: undefined,
        SourceIpamPoolId: undefined,
        IpamPoolArn: undefined,
        IpamScopeArn: undefined,
        IpamScopeType: undefined,
        IpamArn: undefined,
        IpamRegion: undefined,
        Locale: undefined,
        PoolDepth: undefined,
        State: undefined,
        StateMessage: undefined,
        Description: undefined,
        AutoImport: undefined,
        PubliclyAdvertisable: undefined,
        AddressFamily: undefined,
        AllocationMinNetmaskLength: undefined,
        AllocationMaxNetmaskLength: undefined,
        AllocationDefaultNetmaskLength: undefined,
        AllocationResourceTags: undefined,
        Tags: undefined,
        AwsService: undefined,
    };
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ipamPoolId"] !== undefined) {
        contents.IpamPoolId = __expectString(output["ipamPoolId"]);
    }
    if (output["sourceIpamPoolId"] !== undefined) {
        contents.SourceIpamPoolId = __expectString(output["sourceIpamPoolId"]);
    }
    if (output["ipamPoolArn"] !== undefined) {
        contents.IpamPoolArn = __expectString(output["ipamPoolArn"]);
    }
    if (output["ipamScopeArn"] !== undefined) {
        contents.IpamScopeArn = __expectString(output["ipamScopeArn"]);
    }
    if (output["ipamScopeType"] !== undefined) {
        contents.IpamScopeType = __expectString(output["ipamScopeType"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = __expectString(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = __expectString(output["ipamRegion"]);
    }
    if (output["locale"] !== undefined) {
        contents.Locale = __expectString(output["locale"]);
    }
    if (output["poolDepth"] !== undefined) {
        contents.PoolDepth = __strictParseInt32(output["poolDepth"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateMessage"] !== undefined) {
        contents.StateMessage = __expectString(output["stateMessage"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["autoImport"] !== undefined) {
        contents.AutoImport = __parseBoolean(output["autoImport"]);
    }
    if (output["publiclyAdvertisable"] !== undefined) {
        contents.PubliclyAdvertisable = __parseBoolean(output["publiclyAdvertisable"]);
    }
    if (output["addressFamily"] !== undefined) {
        contents.AddressFamily = __expectString(output["addressFamily"]);
    }
    if (output["allocationMinNetmaskLength"] !== undefined) {
        contents.AllocationMinNetmaskLength = __strictParseInt32(output["allocationMinNetmaskLength"]);
    }
    if (output["allocationMaxNetmaskLength"] !== undefined) {
        contents.AllocationMaxNetmaskLength = __strictParseInt32(output["allocationMaxNetmaskLength"]);
    }
    if (output["allocationDefaultNetmaskLength"] !== undefined) {
        contents.AllocationDefaultNetmaskLength = __strictParseInt32(output["allocationDefaultNetmaskLength"]);
    }
    if (output.allocationResourceTagSet === "") {
        contents.AllocationResourceTags = [];
    }
    else if (output["allocationResourceTagSet"] !== undefined &&
        output["allocationResourceTagSet"]["item"] !== undefined) {
        contents.AllocationResourceTags = deserializeAws_ec2IpamResourceTagList(__getArrayIfSingleItem(output["allocationResourceTagSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["awsService"] !== undefined) {
        contents.AwsService = __expectString(output["awsService"]);
    }
    return contents;
};
var deserializeAws_ec2IpamPoolAllocation = function (output, context) {
    var contents = {
        Cidr: undefined,
        IpamPoolAllocationId: undefined,
        Description: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        ResourceRegion: undefined,
        ResourceOwner: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["ipamPoolAllocationId"] !== undefined) {
        contents.IpamPoolAllocationId = __expectString(output["ipamPoolAllocationId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = __expectString(output["resourceRegion"]);
    }
    if (output["resourceOwner"] !== undefined) {
        contents.ResourceOwner = __expectString(output["resourceOwner"]);
    }
    return contents;
};
var deserializeAws_ec2IpamPoolAllocationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamPoolAllocation(entry, context);
    });
};
var deserializeAws_ec2IpamPoolCidr = function (output, context) {
    var contents = {
        Cidr: undefined,
        State: undefined,
        FailureReason: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["failureReason"] !== undefined) {
        contents.FailureReason = deserializeAws_ec2IpamPoolCidrFailureReason(output["failureReason"], context);
    }
    return contents;
};
var deserializeAws_ec2IpamPoolCidrFailureReason = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2IpamPoolCidrSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamPoolCidr(entry, context);
    });
};
var deserializeAws_ec2IpamPoolSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamPool(entry, context);
    });
};
var deserializeAws_ec2IpamResourceCidr = function (output, context) {
    var contents = {
        IpamId: undefined,
        IpamScopeId: undefined,
        IpamPoolId: undefined,
        ResourceRegion: undefined,
        ResourceOwnerId: undefined,
        ResourceId: undefined,
        ResourceName: undefined,
        ResourceCidr: undefined,
        ResourceType: undefined,
        ResourceTags: undefined,
        IpUsage: undefined,
        ComplianceStatus: undefined,
        ManagementState: undefined,
        OverlapStatus: undefined,
        VpcId: undefined,
    };
    if (output["ipamId"] !== undefined) {
        contents.IpamId = __expectString(output["ipamId"]);
    }
    if (output["ipamScopeId"] !== undefined) {
        contents.IpamScopeId = __expectString(output["ipamScopeId"]);
    }
    if (output["ipamPoolId"] !== undefined) {
        contents.IpamPoolId = __expectString(output["ipamPoolId"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = __expectString(output["resourceRegion"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceName"] !== undefined) {
        contents.ResourceName = __expectString(output["resourceName"]);
    }
    if (output["resourceCidr"] !== undefined) {
        contents.ResourceCidr = __expectString(output["resourceCidr"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output.resourceTagSet === "") {
        contents.ResourceTags = [];
    }
    else if (output["resourceTagSet"] !== undefined && output["resourceTagSet"]["item"] !== undefined) {
        contents.ResourceTags = deserializeAws_ec2IpamResourceTagList(__getArrayIfSingleItem(output["resourceTagSet"]["item"]), context);
    }
    if (output["ipUsage"] !== undefined) {
        contents.IpUsage = __strictParseFloat(output["ipUsage"]);
    }
    if (output["complianceStatus"] !== undefined) {
        contents.ComplianceStatus = __expectString(output["complianceStatus"]);
    }
    if (output["managementState"] !== undefined) {
        contents.ManagementState = __expectString(output["managementState"]);
    }
    if (output["overlapStatus"] !== undefined) {
        contents.OverlapStatus = __expectString(output["overlapStatus"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2IpamResourceCidrSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamResourceCidr(entry, context);
    });
};
var deserializeAws_ec2IpamResourceTag = function (output, context) {
    var contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["key"] !== undefined) {
        contents.Key = __expectString(output["key"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2IpamResourceTagList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamResourceTag(entry, context);
    });
};
var deserializeAws_ec2IpamScope = function (output, context) {
    var contents = {
        OwnerId: undefined,
        IpamScopeId: undefined,
        IpamScopeArn: undefined,
        IpamArn: undefined,
        IpamRegion: undefined,
        IpamScopeType: undefined,
        IsDefault: undefined,
        Description: undefined,
        PoolCount: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["ipamScopeId"] !== undefined) {
        contents.IpamScopeId = __expectString(output["ipamScopeId"]);
    }
    if (output["ipamScopeArn"] !== undefined) {
        contents.IpamScopeArn = __expectString(output["ipamScopeArn"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = __expectString(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = __expectString(output["ipamRegion"]);
    }
    if (output["ipamScopeType"] !== undefined) {
        contents.IpamScopeType = __expectString(output["ipamScopeType"]);
    }
    if (output["isDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["isDefault"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["poolCount"] !== undefined) {
        contents.PoolCount = __strictParseInt32(output["poolCount"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2IpamScopeSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamScope(entry, context);
    });
};
var deserializeAws_ec2IpamSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipam(entry, context);
    });
};
var deserializeAws_ec2IpPermission = function (output, context) {
    var contents = {
        FromPort: undefined,
        IpProtocol: undefined,
        IpRanges: undefined,
        Ipv6Ranges: undefined,
        PrefixListIds: undefined,
        ToPort: undefined,
        UserIdGroupPairs: undefined,
    };
    if (output["fromPort"] !== undefined) {
        contents.FromPort = __strictParseInt32(output["fromPort"]);
    }
    if (output["ipProtocol"] !== undefined) {
        contents.IpProtocol = __expectString(output["ipProtocol"]);
    }
    if (output.ipRanges === "") {
        contents.IpRanges = [];
    }
    else if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
        contents.IpRanges = deserializeAws_ec2IpRangeList(__getArrayIfSingleItem(output["ipRanges"]["item"]), context);
    }
    if (output.ipv6Ranges === "") {
        contents.Ipv6Ranges = [];
    }
    else if (output["ipv6Ranges"] !== undefined && output["ipv6Ranges"]["item"] !== undefined) {
        contents.Ipv6Ranges = deserializeAws_ec2Ipv6RangeList(__getArrayIfSingleItem(output["ipv6Ranges"]["item"]), context);
    }
    if (output.prefixListIds === "") {
        contents.PrefixListIds = [];
    }
    else if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
        contents.PrefixListIds = deserializeAws_ec2PrefixListIdList(__getArrayIfSingleItem(output["prefixListIds"]["item"]), context);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = __strictParseInt32(output["toPort"]);
    }
    if (output.groups === "") {
        contents.UserIdGroupPairs = [];
    }
    else if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
        contents.UserIdGroupPairs = deserializeAws_ec2UserIdGroupPairList(__getArrayIfSingleItem(output["groups"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2IpPermissionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpPermission(entry, context);
    });
};
var deserializeAws_ec2IpPrefixList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2IpRange = function (output, context) {
    var contents = {
        CidrIp: undefined,
        Description: undefined,
    };
    if (output["cidrIp"] !== undefined) {
        contents.CidrIp = __expectString(output["cidrIp"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
var deserializeAws_ec2IpRangeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpRange(entry, context);
    });
};
var deserializeAws_ec2IpRanges = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2Ipv4PrefixesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv4PrefixSpecification(entry, context);
    });
};
var deserializeAws_ec2Ipv4PrefixList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv4PrefixSpecificationRequest(entry, context);
    });
};
var deserializeAws_ec2Ipv4PrefixListResponse = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv4PrefixSpecificationResponse(entry, context);
    });
};
var deserializeAws_ec2Ipv4PrefixSpecification = function (output, context) {
    var contents = {
        Ipv4Prefix: undefined,
    };
    if (output["ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = __expectString(output["ipv4Prefix"]);
    }
    return contents;
};
var deserializeAws_ec2Ipv4PrefixSpecificationRequest = function (output, context) {
    var contents = {
        Ipv4Prefix: undefined,
    };
    if (output["Ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = __expectString(output["Ipv4Prefix"]);
    }
    return contents;
};
var deserializeAws_ec2Ipv4PrefixSpecificationResponse = function (output, context) {
    var contents = {
        Ipv4Prefix: undefined,
    };
    if (output["ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = __expectString(output["ipv4Prefix"]);
    }
    return contents;
};
var deserializeAws_ec2Ipv6AddressList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2Ipv6CidrAssociation = function (output, context) {
    var contents = {
        Ipv6Cidr: undefined,
        AssociatedResource: undefined,
    };
    if (output["ipv6Cidr"] !== undefined) {
        contents.Ipv6Cidr = __expectString(output["ipv6Cidr"]);
    }
    if (output["associatedResource"] !== undefined) {
        contents.AssociatedResource = __expectString(output["associatedResource"]);
    }
    return contents;
};
var deserializeAws_ec2Ipv6CidrAssociationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6CidrAssociation(entry, context);
    });
};
var deserializeAws_ec2Ipv6CidrBlock = function (output, context) {
    var contents = {
        Ipv6CidrBlock: undefined,
    };
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
    }
    return contents;
};
var deserializeAws_ec2Ipv6CidrBlockSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6CidrBlock(entry, context);
    });
};
var deserializeAws_ec2Ipv6Pool = function (output, context) {
    var contents = {
        PoolId: undefined,
        Description: undefined,
        PoolCidrBlocks: undefined,
        Tags: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.poolCidrBlockSet === "") {
        contents.PoolCidrBlocks = [];
    }
    else if (output["poolCidrBlockSet"] !== undefined && output["poolCidrBlockSet"]["item"] !== undefined) {
        contents.PoolCidrBlocks = deserializeAws_ec2PoolCidrBlocksSet(__getArrayIfSingleItem(output["poolCidrBlockSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2Ipv6PoolSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6Pool(entry, context);
    });
};
var deserializeAws_ec2Ipv6PrefixesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6PrefixSpecification(entry, context);
    });
};
var deserializeAws_ec2Ipv6PrefixList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6PrefixSpecificationRequest(entry, context);
    });
};
var deserializeAws_ec2Ipv6PrefixListResponse = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6PrefixSpecificationResponse(entry, context);
    });
};
var deserializeAws_ec2Ipv6PrefixSpecification = function (output, context) {
    var contents = {
        Ipv6Prefix: undefined,
    };
    if (output["ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = __expectString(output["ipv6Prefix"]);
    }
    return contents;
};
var deserializeAws_ec2Ipv6PrefixSpecificationRequest = function (output, context) {
    var contents = {
        Ipv6Prefix: undefined,
    };
    if (output["Ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = __expectString(output["Ipv6Prefix"]);
    }
    return contents;
};
var deserializeAws_ec2Ipv6PrefixSpecificationResponse = function (output, context) {
    var contents = {
        Ipv6Prefix: undefined,
    };
    if (output["ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = __expectString(output["ipv6Prefix"]);
    }
    return contents;
};
var deserializeAws_ec2Ipv6Range = function (output, context) {
    var contents = {
        CidrIpv6: undefined,
        Description: undefined,
    };
    if (output["cidrIpv6"] !== undefined) {
        contents.CidrIpv6 = __expectString(output["cidrIpv6"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
var deserializeAws_ec2Ipv6RangeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6Range(entry, context);
    });
};
var deserializeAws_ec2KeyPair = function (output, context) {
    var contents = {
        KeyFingerprint: undefined,
        KeyMaterial: undefined,
        KeyName: undefined,
        KeyPairId: undefined,
        Tags: undefined,
    };
    if (output["keyFingerprint"] !== undefined) {
        contents.KeyFingerprint = __expectString(output["keyFingerprint"]);
    }
    if (output["keyMaterial"] !== undefined) {
        contents.KeyMaterial = __expectString(output["keyMaterial"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["keyPairId"] !== undefined) {
        contents.KeyPairId = __expectString(output["keyPairId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2KeyPairInfo = function (output, context) {
    var contents = {
        KeyPairId: undefined,
        KeyFingerprint: undefined,
        KeyName: undefined,
        KeyType: undefined,
        Tags: undefined,
        PublicKey: undefined,
        CreateTime: undefined,
    };
    if (output["keyPairId"] !== undefined) {
        contents.KeyPairId = __expectString(output["keyPairId"]);
    }
    if (output["keyFingerprint"] !== undefined) {
        contents.KeyFingerprint = __expectString(output["keyFingerprint"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["keyType"] !== undefined) {
        contents.KeyType = __expectString(output["keyType"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["publicKey"] !== undefined) {
        contents.PublicKey = __expectString(output["publicKey"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    return contents;
};
var deserializeAws_ec2KeyPairList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2KeyPairInfo(entry, context);
    });
};
var deserializeAws_ec2LastError = function (output, context) {
    var contents = {
        Message: undefined,
        Code: undefined,
    };
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchPermission = function (output, context) {
    var contents = {
        Group: undefined,
        UserId: undefined,
        OrganizationArn: undefined,
        OrganizationalUnitArn: undefined,
    };
    if (output["group"] !== undefined) {
        contents.Group = __expectString(output["group"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    if (output["organizationArn"] !== undefined) {
        contents.OrganizationArn = __expectString(output["organizationArn"]);
    }
    if (output["organizationalUnitArn"] !== undefined) {
        contents.OrganizationalUnitArn = __expectString(output["organizationalUnitArn"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchPermissionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchPermission(entry, context);
    });
};
var deserializeAws_ec2LaunchSpecification = function (output, context) {
    var contents = {
        UserData: undefined,
        SecurityGroups: undefined,
        AddressingType: undefined,
        BlockDeviceMappings: undefined,
        EbsOptimized: undefined,
        IamInstanceProfile: undefined,
        ImageId: undefined,
        InstanceType: undefined,
        KernelId: undefined,
        KeyName: undefined,
        NetworkInterfaces: undefined,
        Placement: undefined,
        RamdiskId: undefined,
        SubnetId: undefined,
        Monitoring: undefined,
    };
    if (output["userData"] !== undefined) {
        contents.UserData = __expectString(output["userData"]);
    }
    if (output.groupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["addressingType"] !== undefined) {
        contents.AddressingType = __expectString(output["addressingType"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfileSpecification(output["iamInstanceProfile"], context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2InstanceNetworkInterfaceSpecificationList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2SpotPlacement(output["placement"], context);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = __expectString(output["ramdiskId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2RunInstancesMonitoringEnabled(output["monitoring"], context);
    }
    return contents;
};
var deserializeAws_ec2LaunchSpecsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotFleetLaunchSpecification(entry, context);
    });
};
var deserializeAws_ec2LaunchTemplate = function (output, context) {
    var contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        CreateTime: undefined,
        CreatedBy: undefined,
        DefaultVersionNumber: undefined,
        LatestVersionNumber: undefined,
        Tags: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["createdBy"] !== undefined) {
        contents.CreatedBy = __expectString(output["createdBy"]);
    }
    if (output["defaultVersionNumber"] !== undefined) {
        contents.DefaultVersionNumber = __strictParseLong(output["defaultVersionNumber"]);
    }
    if (output["latestVersionNumber"] !== undefined) {
        contents.LatestVersionNumber = __strictParseLong(output["latestVersionNumber"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateAndOverridesResponse = function (output, context) {
    var contents = {
        LaunchTemplateSpecification: undefined,
        Overrides: undefined,
    };
    if (output["launchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = deserializeAws_ec2FleetLaunchTemplateSpecification(output["launchTemplateSpecification"], context);
    }
    if (output["overrides"] !== undefined) {
        contents.Overrides = deserializeAws_ec2FleetLaunchTemplateOverrides(output["overrides"], context);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateBlockDeviceMapping = function (output, context) {
    var contents = {
        DeviceName: undefined,
        VirtualName: undefined,
        Ebs: undefined,
        NoDevice: undefined,
    };
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output["virtualName"] !== undefined) {
        contents.VirtualName = __expectString(output["virtualName"]);
    }
    if (output["ebs"] !== undefined) {
        contents.Ebs = deserializeAws_ec2LaunchTemplateEbsBlockDevice(output["ebs"], context);
    }
    if (output["noDevice"] !== undefined) {
        contents.NoDevice = __expectString(output["noDevice"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateBlockDeviceMappingList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateBlockDeviceMapping(entry, context);
    });
};
var deserializeAws_ec2LaunchTemplateCapacityReservationSpecificationResponse = function (output, context) {
    var contents = {
        CapacityReservationPreference: undefined,
        CapacityReservationTarget: undefined,
    };
    if (output["capacityReservationPreference"] !== undefined) {
        contents.CapacityReservationPreference = __expectString(output["capacityReservationPreference"]);
    }
    if (output["capacityReservationTarget"] !== undefined) {
        contents.CapacityReservationTarget = deserializeAws_ec2CapacityReservationTargetResponse(output["capacityReservationTarget"], context);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateConfig = function (output, context) {
    var contents = {
        LaunchTemplateSpecification: undefined,
        Overrides: undefined,
    };
    if (output["launchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = deserializeAws_ec2FleetLaunchTemplateSpecification(output["launchTemplateSpecification"], context);
    }
    if (output.overrides === "") {
        contents.Overrides = [];
    }
    else if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
        contents.Overrides = deserializeAws_ec2LaunchTemplateOverridesList(__getArrayIfSingleItem(output["overrides"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateConfigList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateConfig(entry, context);
    });
};
var deserializeAws_ec2LaunchTemplateCpuOptions = function (output, context) {
    var contents = {
        CoreCount: undefined,
        ThreadsPerCore: undefined,
    };
    if (output["coreCount"] !== undefined) {
        contents.CoreCount = __strictParseInt32(output["coreCount"]);
    }
    if (output["threadsPerCore"] !== undefined) {
        contents.ThreadsPerCore = __strictParseInt32(output["threadsPerCore"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateEbsBlockDevice = function (output, context) {
    var contents = {
        Encrypted: undefined,
        DeleteOnTermination: undefined,
        Iops: undefined,
        KmsKeyId: undefined,
        SnapshotId: undefined,
        VolumeSize: undefined,
        VolumeType: undefined,
        Throughput: undefined,
    };
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["iops"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    if (output["volumeType"] !== undefined) {
        contents.VolumeType = __expectString(output["volumeType"]);
    }
    if (output["throughput"] !== undefined) {
        contents.Throughput = __strictParseInt32(output["throughput"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponse = function (output, context) {
    var contents = {
        Type: undefined,
        Count: undefined,
    };
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponseList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponse(entry, context);
    });
};
var deserializeAws_ec2LaunchTemplateEnclaveOptions = function (output, context) {
    var contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateHibernationOptions = function (output, context) {
    var contents = {
        Configured: undefined,
    };
    if (output["configured"] !== undefined) {
        contents.Configured = __parseBoolean(output["configured"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateIamInstanceProfileSpecification = function (output, context) {
    var contents = {
        Arn: undefined,
        Name: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateInstanceMaintenanceOptions = function (output, context) {
    var contents = {
        AutoRecovery: undefined,
    };
    if (output["autoRecovery"] !== undefined) {
        contents.AutoRecovery = __expectString(output["autoRecovery"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateInstanceMarketOptions = function (output, context) {
    var contents = {
        MarketType: undefined,
        SpotOptions: undefined,
    };
    if (output["marketType"] !== undefined) {
        contents.MarketType = __expectString(output["marketType"]);
    }
    if (output["spotOptions"] !== undefined) {
        contents.SpotOptions = deserializeAws_ec2LaunchTemplateSpotMarketOptions(output["spotOptions"], context);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateInstanceMetadataOptions = function (output, context) {
    var contents = {
        State: undefined,
        HttpTokens: undefined,
        HttpPutResponseHopLimit: undefined,
        HttpEndpoint: undefined,
        HttpProtocolIpv6: undefined,
        InstanceMetadataTags: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["httpTokens"] !== undefined) {
        contents.HttpTokens = __expectString(output["httpTokens"]);
    }
    if (output["httpPutResponseHopLimit"] !== undefined) {
        contents.HttpPutResponseHopLimit = __strictParseInt32(output["httpPutResponseHopLimit"]);
    }
    if (output["httpEndpoint"] !== undefined) {
        contents.HttpEndpoint = __expectString(output["httpEndpoint"]);
    }
    if (output["httpProtocolIpv6"] !== undefined) {
        contents.HttpProtocolIpv6 = __expectString(output["httpProtocolIpv6"]);
    }
    if (output["instanceMetadataTags"] !== undefined) {
        contents.InstanceMetadataTags = __expectString(output["instanceMetadataTags"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecification = function (output, context) {
    var contents = {
        AssociateCarrierIpAddress: undefined,
        AssociatePublicIpAddress: undefined,
        DeleteOnTermination: undefined,
        Description: undefined,
        DeviceIndex: undefined,
        Groups: undefined,
        InterfaceType: undefined,
        Ipv6AddressCount: undefined,
        Ipv6Addresses: undefined,
        NetworkInterfaceId: undefined,
        PrivateIpAddress: undefined,
        PrivateIpAddresses: undefined,
        SecondaryPrivateIpAddressCount: undefined,
        SubnetId: undefined,
        NetworkCardIndex: undefined,
        Ipv4Prefixes: undefined,
        Ipv4PrefixCount: undefined,
        Ipv6Prefixes: undefined,
        Ipv6PrefixCount: undefined,
    };
    if (output["associateCarrierIpAddress"] !== undefined) {
        contents.AssociateCarrierIpAddress = __parseBoolean(output["associateCarrierIpAddress"]);
    }
    if (output["associatePublicIpAddress"] !== undefined) {
        contents.AssociatePublicIpAddress = __parseBoolean(output["associatePublicIpAddress"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["groupId"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdStringList(__getArrayIfSingleItem(output["groupSet"]["groupId"]), context);
    }
    if (output["interfaceType"] !== undefined) {
        contents.InterfaceType = __expectString(output["interfaceType"]);
    }
    if (output["ipv6AddressCount"] !== undefined) {
        contents.Ipv6AddressCount = __strictParseInt32(output["ipv6AddressCount"]);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = deserializeAws_ec2InstanceIpv6AddressList(__getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = deserializeAws_ec2PrivateIpAddressSpecificationList(__getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output["secondaryPrivateIpAddressCount"] !== undefined) {
        contents.SecondaryPrivateIpAddressCount = __strictParseInt32(output["secondaryPrivateIpAddressCount"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    if (output.ipv4PrefixSet === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
        contents.Ipv4Prefixes = deserializeAws_ec2Ipv4PrefixListResponse(__getArrayIfSingleItem(output["ipv4PrefixSet"]["item"]), context);
    }
    if (output["ipv4PrefixCount"] !== undefined) {
        contents.Ipv4PrefixCount = __strictParseInt32(output["ipv4PrefixCount"]);
    }
    if (output.ipv6PrefixSet === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
        contents.Ipv6Prefixes = deserializeAws_ec2Ipv6PrefixListResponse(__getArrayIfSingleItem(output["ipv6PrefixSet"]["item"]), context);
    }
    if (output["ipv6PrefixCount"] !== undefined) {
        contents.Ipv6PrefixCount = __strictParseInt32(output["ipv6PrefixCount"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecification(entry, context);
    });
};
var deserializeAws_ec2LaunchTemplateLicenseConfiguration = function (output, context) {
    var contents = {
        LicenseConfigurationArn: undefined,
    };
    if (output["licenseConfigurationArn"] !== undefined) {
        contents.LicenseConfigurationArn = __expectString(output["licenseConfigurationArn"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateLicenseList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateLicenseConfiguration(entry, context);
    });
};
var deserializeAws_ec2LaunchTemplateOverrides = function (output, context) {
    var contents = {
        InstanceType: undefined,
        SpotPrice: undefined,
        SubnetId: undefined,
        AvailabilityZone: undefined,
        WeightedCapacity: undefined,
        Priority: undefined,
        InstanceRequirements: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["weightedCapacity"] !== undefined) {
        contents.WeightedCapacity = __strictParseFloat(output["weightedCapacity"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = __strictParseFloat(output["priority"]);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = deserializeAws_ec2InstanceRequirements(output["instanceRequirements"], context);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateOverridesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateOverrides(entry, context);
    });
};
var deserializeAws_ec2LaunchTemplatePlacement = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        Affinity: undefined,
        GroupName: undefined,
        HostId: undefined,
        Tenancy: undefined,
        SpreadDomain: undefined,
        HostResourceGroupArn: undefined,
        PartitionNumber: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["affinity"] !== undefined) {
        contents.Affinity = __expectString(output["affinity"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["hostId"] !== undefined) {
        contents.HostId = __expectString(output["hostId"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output["spreadDomain"] !== undefined) {
        contents.SpreadDomain = __expectString(output["spreadDomain"]);
    }
    if (output["hostResourceGroupArn"] !== undefined) {
        contents.HostResourceGroupArn = __expectString(output["hostResourceGroupArn"]);
    }
    if (output["partitionNumber"] !== undefined) {
        contents.PartitionNumber = __strictParseInt32(output["partitionNumber"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplatePrivateDnsNameOptions = function (output, context) {
    var contents = {
        HostnameType: undefined,
        EnableResourceNameDnsARecord: undefined,
        EnableResourceNameDnsAAAARecord: undefined,
    };
    if (output["hostnameType"] !== undefined) {
        contents.HostnameType = __expectString(output["hostnameType"]);
    }
    if (output["enableResourceNameDnsARecord"] !== undefined) {
        contents.EnableResourceNameDnsARecord = __parseBoolean(output["enableResourceNameDnsARecord"]);
    }
    if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
        contents.EnableResourceNameDnsAAAARecord = __parseBoolean(output["enableResourceNameDnsAAAARecord"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplate(entry, context);
    });
};
var deserializeAws_ec2LaunchTemplatesMonitoring = function (output, context) {
    var contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateSpotMarketOptions = function (output, context) {
    var contents = {
        MaxPrice: undefined,
        SpotInstanceType: undefined,
        BlockDurationMinutes: undefined,
        ValidUntil: undefined,
        InstanceInterruptionBehavior: undefined,
    };
    if (output["maxPrice"] !== undefined) {
        contents.MaxPrice = __expectString(output["maxPrice"]);
    }
    if (output["spotInstanceType"] !== undefined) {
        contents.SpotInstanceType = __expectString(output["spotInstanceType"]);
    }
    if (output["blockDurationMinutes"] !== undefined) {
        contents.BlockDurationMinutes = __strictParseInt32(output["blockDurationMinutes"]);
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = __expectNonNull(__parseRfc3339DateTime(output["validUntil"]));
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateTagSpecification = function (output, context) {
    var contents = {
        ResourceType: undefined,
        Tags: undefined,
    };
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateTagSpecificationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateTagSpecification(entry, context);
    });
};
var deserializeAws_ec2LaunchTemplateVersion = function (output, context) {
    var contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        VersionNumber: undefined,
        VersionDescription: undefined,
        CreateTime: undefined,
        CreatedBy: undefined,
        DefaultVersion: undefined,
        LaunchTemplateData: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
    }
    if (output["versionNumber"] !== undefined) {
        contents.VersionNumber = __strictParseLong(output["versionNumber"]);
    }
    if (output["versionDescription"] !== undefined) {
        contents.VersionDescription = __expectString(output["versionDescription"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["createdBy"] !== undefined) {
        contents.CreatedBy = __expectString(output["createdBy"]);
    }
    if (output["defaultVersion"] !== undefined) {
        contents.DefaultVersion = __parseBoolean(output["defaultVersion"]);
    }
    if (output["launchTemplateData"] !== undefined) {
        contents.LaunchTemplateData = deserializeAws_ec2ResponseLaunchTemplateData(output["launchTemplateData"], context);
    }
    return contents;
};
var deserializeAws_ec2LaunchTemplateVersionSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateVersion(entry, context);
    });
};
var deserializeAws_ec2LicenseConfiguration = function (output, context) {
    var contents = {
        LicenseConfigurationArn: undefined,
    };
    if (output["licenseConfigurationArn"] !== undefined) {
        contents.LicenseConfigurationArn = __expectString(output["licenseConfigurationArn"]);
    }
    return contents;
};
var deserializeAws_ec2LicenseList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LicenseConfiguration(entry, context);
    });
};
var deserializeAws_ec2ListImagesInRecycleBinResult = function (output, context) {
    var contents = {
        Images: undefined,
        NextToken: undefined,
    };
    if (output.imageSet === "") {
        contents.Images = [];
    }
    else if (output["imageSet"] !== undefined && output["imageSet"]["item"] !== undefined) {
        contents.Images = deserializeAws_ec2ImageRecycleBinInfoList(__getArrayIfSingleItem(output["imageSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2ListSnapshotsInRecycleBinResult = function (output, context) {
    var contents = {
        Snapshots: undefined,
        NextToken: undefined,
    };
    if (output.snapshotSet === "") {
        contents.Snapshots = [];
    }
    else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
        contents.Snapshots = deserializeAws_ec2SnapshotRecycleBinInfoList(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2LoadBalancersConfig = function (output, context) {
    var contents = {
        ClassicLoadBalancersConfig: undefined,
        TargetGroupsConfig: undefined,
    };
    if (output["classicLoadBalancersConfig"] !== undefined) {
        contents.ClassicLoadBalancersConfig = deserializeAws_ec2ClassicLoadBalancersConfig(output["classicLoadBalancersConfig"], context);
    }
    if (output["targetGroupsConfig"] !== undefined) {
        contents.TargetGroupsConfig = deserializeAws_ec2TargetGroupsConfig(output["targetGroupsConfig"], context);
    }
    return contents;
};
var deserializeAws_ec2LoadPermission = function (output, context) {
    var contents = {
        UserId: undefined,
        Group: undefined,
    };
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    if (output["group"] !== undefined) {
        contents.Group = __expectString(output["group"]);
    }
    return contents;
};
var deserializeAws_ec2LoadPermissionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LoadPermission(entry, context);
    });
};
var deserializeAws_ec2LocalGateway = function (output, context) {
    var contents = {
        LocalGatewayId: undefined,
        OutpostArn: undefined,
        OwnerId: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2LocalGatewayRoute = function (output, context) {
    var contents = {
        DestinationCidrBlock: undefined,
        LocalGatewayVirtualInterfaceGroupId: undefined,
        Type: undefined,
        State: undefined,
        LocalGatewayRouteTableId: undefined,
        LocalGatewayRouteTableArn: undefined,
        OwnerId: undefined,
    };
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroupId = __expectString(output["localGatewayVirtualInterfaceGroupId"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
var deserializeAws_ec2LocalGatewayRouteList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayRoute(entry, context);
    });
};
var deserializeAws_ec2LocalGatewayRouteTable = function (output, context) {
    var contents = {
        LocalGatewayRouteTableId: undefined,
        LocalGatewayRouteTableArn: undefined,
        LocalGatewayId: undefined,
        OutpostArn: undefined,
        OwnerId: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2LocalGatewayRouteTableSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayRouteTable(entry, context);
    });
};
var deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation = function (output, context) {
    var contents = {
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationId: undefined,
        LocalGatewayVirtualInterfaceGroupId: undefined,
        LocalGatewayId: undefined,
        LocalGatewayRouteTableId: undefined,
        LocalGatewayRouteTableArn: undefined,
        OwnerId: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"] !== undefined) {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId = __expectString(output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"]);
    }
    if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroupId = __expectString(output["localGatewayVirtualInterfaceGroupId"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation(entry, context);
    });
};
var deserializeAws_ec2LocalGatewayRouteTableVpcAssociation = function (output, context) {
    var contents = {
        LocalGatewayRouteTableVpcAssociationId: undefined,
        LocalGatewayRouteTableId: undefined,
        LocalGatewayRouteTableArn: undefined,
        LocalGatewayId: undefined,
        VpcId: undefined,
        OwnerId: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["localGatewayRouteTableVpcAssociationId"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociationId = __expectString(output["localGatewayRouteTableVpcAssociationId"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2LocalGatewayRouteTableVpcAssociationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayRouteTableVpcAssociation(entry, context);
    });
};
var deserializeAws_ec2LocalGatewaySet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGateway(entry, context);
    });
};
var deserializeAws_ec2LocalGatewayVirtualInterface = function (output, context) {
    var contents = {
        LocalGatewayVirtualInterfaceId: undefined,
        LocalGatewayId: undefined,
        Vlan: undefined,
        LocalAddress: undefined,
        PeerAddress: undefined,
        LocalBgpAsn: undefined,
        PeerBgpAsn: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output["localGatewayVirtualInterfaceId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceId = __expectString(output["localGatewayVirtualInterfaceId"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["vlan"] !== undefined) {
        contents.Vlan = __strictParseInt32(output["vlan"]);
    }
    if (output["localAddress"] !== undefined) {
        contents.LocalAddress = __expectString(output["localAddress"]);
    }
    if (output["peerAddress"] !== undefined) {
        contents.PeerAddress = __expectString(output["peerAddress"]);
    }
    if (output["localBgpAsn"] !== undefined) {
        contents.LocalBgpAsn = __strictParseInt32(output["localBgpAsn"]);
    }
    if (output["peerBgpAsn"] !== undefined) {
        contents.PeerBgpAsn = __strictParseInt32(output["peerBgpAsn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2LocalGatewayVirtualInterfaceGroup = function (output, context) {
    var contents = {
        LocalGatewayVirtualInterfaceGroupId: undefined,
        LocalGatewayVirtualInterfaceIds: undefined,
        LocalGatewayId: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroupId = __expectString(output["localGatewayVirtualInterfaceGroupId"]);
    }
    if (output.localGatewayVirtualInterfaceIdSet === "") {
        contents.LocalGatewayVirtualInterfaceIds = [];
    }
    else if (output["localGatewayVirtualInterfaceIdSet"] !== undefined &&
        output["localGatewayVirtualInterfaceIdSet"]["item"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceIds = deserializeAws_ec2LocalGatewayVirtualInterfaceIdSet(__getArrayIfSingleItem(output["localGatewayVirtualInterfaceIdSet"]["item"]), context);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2LocalGatewayVirtualInterfaceGroupSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayVirtualInterfaceGroup(entry, context);
    });
};
var deserializeAws_ec2LocalGatewayVirtualInterfaceIdSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2LocalGatewayVirtualInterfaceSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayVirtualInterface(entry, context);
    });
};
var deserializeAws_ec2LocalStorageTypeSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2ManagedPrefixList = function (output, context) {
    var contents = {
        PrefixListId: undefined,
        AddressFamily: undefined,
        State: undefined,
        StateMessage: undefined,
        PrefixListArn: undefined,
        PrefixListName: undefined,
        MaxEntries: undefined,
        Version: undefined,
        Tags: undefined,
        OwnerId: undefined,
    };
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["addressFamily"] !== undefined) {
        contents.AddressFamily = __expectString(output["addressFamily"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["stateMessage"] !== undefined) {
        contents.StateMessage = __expectString(output["stateMessage"]);
    }
    if (output["prefixListArn"] !== undefined) {
        contents.PrefixListArn = __expectString(output["prefixListArn"]);
    }
    if (output["prefixListName"] !== undefined) {
        contents.PrefixListName = __expectString(output["prefixListName"]);
    }
    if (output["maxEntries"] !== undefined) {
        contents.MaxEntries = __strictParseInt32(output["maxEntries"]);
    }
    if (output["version"] !== undefined) {
        contents.Version = __strictParseLong(output["version"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
var deserializeAws_ec2ManagedPrefixListSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ManagedPrefixList(entry, context);
    });
};
var deserializeAws_ec2MemoryGiBPerVCpu = function (output, context) {
    var contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = __strictParseFloat(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseFloat(output["max"]);
    }
    return contents;
};
var deserializeAws_ec2MemoryInfo = function (output, context) {
    var contents = {
        SizeInMiB: undefined,
    };
    if (output["sizeInMiB"] !== undefined) {
        contents.SizeInMiB = __strictParseLong(output["sizeInMiB"]);
    }
    return contents;
};
var deserializeAws_ec2MemoryMiB = function (output, context) {
    var contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyAddressAttributeResult = function (output, context) {
    var contents = {
        Address: undefined,
    };
    if (output["address"] !== undefined) {
        contents.Address = deserializeAws_ec2AddressAttribute(output["address"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyAvailabilityZoneGroupResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyCapacityReservationFleetResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyCapacityReservationResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyClientVpnEndpointResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyDefaultCreditSpecificationResult = function (output, context) {
    var contents = {
        InstanceFamilyCreditSpecification: undefined,
    };
    if (output["instanceFamilyCreditSpecification"] !== undefined) {
        contents.InstanceFamilyCreditSpecification = deserializeAws_ec2InstanceFamilyCreditSpecification(output["instanceFamilyCreditSpecification"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyEbsDefaultKmsKeyIdResult = function (output, context) {
    var contents = {
        KmsKeyId: undefined,
    };
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyFleetResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyFpgaImageAttributeResult = function (output, context) {
    var contents = {
        FpgaImageAttribute: undefined,
    };
    if (output["fpgaImageAttribute"] !== undefined) {
        contents.FpgaImageAttribute = deserializeAws_ec2FpgaImageAttribute(output["fpgaImageAttribute"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyHostsResult = function (output, context) {
    var contents = {
        Successful: undefined,
        Unsuccessful: undefined,
    };
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = deserializeAws_ec2ResponseHostIdList(__getArrayIfSingleItem(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemList(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ModifyInstanceCapacityReservationAttributesResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyInstanceCreditSpecificationResult = function (output, context) {
    var contents = {
        SuccessfulInstanceCreditSpecifications: undefined,
        UnsuccessfulInstanceCreditSpecifications: undefined,
    };
    if (output.successfulInstanceCreditSpecificationSet === "") {
        contents.SuccessfulInstanceCreditSpecifications = [];
    }
    else if (output["successfulInstanceCreditSpecificationSet"] !== undefined &&
        output["successfulInstanceCreditSpecificationSet"]["item"] !== undefined) {
        contents.SuccessfulInstanceCreditSpecifications = deserializeAws_ec2SuccessfulInstanceCreditSpecificationSet(__getArrayIfSingleItem(output["successfulInstanceCreditSpecificationSet"]["item"]), context);
    }
    if (output.unsuccessfulInstanceCreditSpecificationSet === "") {
        contents.UnsuccessfulInstanceCreditSpecifications = [];
    }
    else if (output["unsuccessfulInstanceCreditSpecificationSet"] !== undefined &&
        output["unsuccessfulInstanceCreditSpecificationSet"]["item"] !== undefined) {
        contents.UnsuccessfulInstanceCreditSpecifications = deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationSet(__getArrayIfSingleItem(output["unsuccessfulInstanceCreditSpecificationSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ModifyInstanceEventStartTimeResult = function (output, context) {
    var contents = {
        Event: undefined,
    };
    if (output["event"] !== undefined) {
        contents.Event = deserializeAws_ec2InstanceStatusEvent(output["event"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyInstanceEventWindowResult = function (output, context) {
    var contents = {
        InstanceEventWindow: undefined,
    };
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = deserializeAws_ec2InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyInstanceMaintenanceOptionsResult = function (output, context) {
    var contents = {
        InstanceId: undefined,
        AutoRecovery: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["autoRecovery"] !== undefined) {
        contents.AutoRecovery = __expectString(output["autoRecovery"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyInstanceMetadataOptionsResult = function (output, context) {
    var contents = {
        InstanceId: undefined,
        InstanceMetadataOptions: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceMetadataOptions"] !== undefined) {
        contents.InstanceMetadataOptions = deserializeAws_ec2InstanceMetadataOptionsResponse(output["instanceMetadataOptions"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyInstancePlacementResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyIpamPoolResult = function (output, context) {
    var contents = {
        IpamPool: undefined,
    };
    if (output["ipamPool"] !== undefined) {
        contents.IpamPool = deserializeAws_ec2IpamPool(output["ipamPool"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyIpamResourceCidrResult = function (output, context) {
    var contents = {
        IpamResourceCidr: undefined,
    };
    if (output["ipamResourceCidr"] !== undefined) {
        contents.IpamResourceCidr = deserializeAws_ec2IpamResourceCidr(output["ipamResourceCidr"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyIpamResult = function (output, context) {
    var contents = {
        Ipam: undefined,
    };
    if (output["ipam"] !== undefined) {
        contents.Ipam = deserializeAws_ec2Ipam(output["ipam"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyIpamScopeResult = function (output, context) {
    var contents = {
        IpamScope: undefined,
    };
    if (output["ipamScope"] !== undefined) {
        contents.IpamScope = deserializeAws_ec2IpamScope(output["ipamScope"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyLaunchTemplateResult = function (output, context) {
    var contents = {
        LaunchTemplate: undefined,
    };
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2LaunchTemplate(output["launchTemplate"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyManagedPrefixListResult = function (output, context) {
    var contents = {
        PrefixList: undefined,
    };
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyPrivateDnsNameOptionsResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyReservedInstancesResult = function (output, context) {
    var contents = {
        ReservedInstancesModificationId: undefined,
    };
    if (output["reservedInstancesModificationId"] !== undefined) {
        contents.ReservedInstancesModificationId = __expectString(output["reservedInstancesModificationId"]);
    }
    return contents;
};
var deserializeAws_ec2ModifySecurityGroupRulesResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifySnapshotTierResult = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        TieringStartTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["tieringStartTime"] !== undefined) {
        contents.TieringStartTime = __expectNonNull(__parseRfc3339DateTime(output["tieringStartTime"]));
    }
    return contents;
};
var deserializeAws_ec2ModifySpotFleetRequestResponse = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesResult = function (output, context) {
    var contents = {
        TrafficMirrorFilter: undefined,
    };
    if (output["trafficMirrorFilter"] !== undefined) {
        contents.TrafficMirrorFilter = deserializeAws_ec2TrafficMirrorFilter(output["trafficMirrorFilter"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyTrafficMirrorFilterRuleResult = function (output, context) {
    var contents = {
        TrafficMirrorFilterRule: undefined,
    };
    if (output["trafficMirrorFilterRule"] !== undefined) {
        contents.TrafficMirrorFilterRule = deserializeAws_ec2TrafficMirrorFilterRule(output["trafficMirrorFilterRule"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyTrafficMirrorSessionResult = function (output, context) {
    var contents = {
        TrafficMirrorSession: undefined,
    };
    if (output["trafficMirrorSession"] !== undefined) {
        contents.TrafficMirrorSession = deserializeAws_ec2TrafficMirrorSession(output["trafficMirrorSession"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceResult = function (output, context) {
    var contents = {
        TransitGatewayPrefixListReference: undefined,
    };
    if (output["transitGatewayPrefixListReference"] !== undefined) {
        contents.TransitGatewayPrefixListReference = deserializeAws_ec2TransitGatewayPrefixListReference(output["transitGatewayPrefixListReference"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyTransitGatewayResult = function (output, context) {
    var contents = {
        TransitGateway: undefined,
    };
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2TransitGateway(output["transitGateway"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyTransitGatewayVpcAttachmentResult = function (output, context) {
    var contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyVolumeResult = function (output, context) {
    var contents = {
        VolumeModification: undefined,
    };
    if (output["volumeModification"] !== undefined) {
        contents.VolumeModification = deserializeAws_ec2VolumeModification(output["volumeModification"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpcEndpointConnectionNotificationResult = function (output, context) {
    var contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpcEndpointResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpcEndpointServiceConfigurationResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityResult = function (output, context) {
    var contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpcEndpointServicePermissionsResult = function (output, context) {
    var contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpcPeeringConnectionOptionsResult = function (output, context) {
    var contents = {
        AccepterPeeringConnectionOptions: undefined,
        RequesterPeeringConnectionOptions: undefined,
    };
    if (output["accepterPeeringConnectionOptions"] !== undefined) {
        contents.AccepterPeeringConnectionOptions = deserializeAws_ec2PeeringConnectionOptions(output["accepterPeeringConnectionOptions"], context);
    }
    if (output["requesterPeeringConnectionOptions"] !== undefined) {
        contents.RequesterPeeringConnectionOptions = deserializeAws_ec2PeeringConnectionOptions(output["requesterPeeringConnectionOptions"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpcTenancyResult = function (output, context) {
    var contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpnConnectionOptionsResult = function (output, context) {
    var contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpnConnectionResult = function (output, context) {
    var contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpnTunnelCertificateResult = function (output, context) {
    var contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
var deserializeAws_ec2ModifyVpnTunnelOptionsResult = function (output, context) {
    var contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
var deserializeAws_ec2Monitoring = function (output, context) {
    var contents = {
        State: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2MonitorInstancesResult = function (output, context) {
    var contents = {
        InstanceMonitorings: undefined,
    };
    if (output.instancesSet === "") {
        contents.InstanceMonitorings = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.InstanceMonitorings = deserializeAws_ec2InstanceMonitoringList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2MoveAddressToVpcResult = function (output, context) {
    var contents = {
        AllocationId: undefined,
        Status: undefined,
    };
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
var deserializeAws_ec2MoveByoipCidrToIpamResult = function (output, context) {
    var contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
var deserializeAws_ec2MovingAddressStatus = function (output, context) {
    var contents = {
        MoveStatus: undefined,
        PublicIp: undefined,
    };
    if (output["moveStatus"] !== undefined) {
        contents.MoveStatus = __expectString(output["moveStatus"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    return contents;
};
var deserializeAws_ec2MovingAddressStatusSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2MovingAddressStatus(entry, context);
    });
};
var deserializeAws_ec2NatGateway = function (output, context) {
    var contents = {
        CreateTime: undefined,
        DeleteTime: undefined,
        FailureCode: undefined,
        FailureMessage: undefined,
        NatGatewayAddresses: undefined,
        NatGatewayId: undefined,
        ProvisionedBandwidth: undefined,
        State: undefined,
        SubnetId: undefined,
        VpcId: undefined,
        Tags: undefined,
        ConnectivityType: undefined,
    };
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["deleteTime"] !== undefined) {
        contents.DeleteTime = __expectNonNull(__parseRfc3339DateTime(output["deleteTime"]));
    }
    if (output["failureCode"] !== undefined) {
        contents.FailureCode = __expectString(output["failureCode"]);
    }
    if (output["failureMessage"] !== undefined) {
        contents.FailureMessage = __expectString(output["failureMessage"]);
    }
    if (output.natGatewayAddressSet === "") {
        contents.NatGatewayAddresses = [];
    }
    else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
        contents.NatGatewayAddresses = deserializeAws_ec2NatGatewayAddressList(__getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]), context);
    }
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output["provisionedBandwidth"] !== undefined) {
        contents.ProvisionedBandwidth = deserializeAws_ec2ProvisionedBandwidth(output["provisionedBandwidth"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["connectivityType"] !== undefined) {
        contents.ConnectivityType = __expectString(output["connectivityType"]);
    }
    return contents;
};
var deserializeAws_ec2NatGatewayAddress = function (output, context) {
    var contents = {
        AllocationId: undefined,
        NetworkInterfaceId: undefined,
        PrivateIp: undefined,
        PublicIp: undefined,
    };
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["privateIp"] !== undefined) {
        contents.PrivateIp = __expectString(output["privateIp"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    return contents;
};
var deserializeAws_ec2NatGatewayAddressList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NatGatewayAddress(entry, context);
    });
};
var deserializeAws_ec2NatGatewayList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NatGateway(entry, context);
    });
};
var deserializeAws_ec2NetworkAcl = function (output, context) {
    var contents = {
        Associations: undefined,
        Entries: undefined,
        IsDefault: undefined,
        NetworkAclId: undefined,
        Tags: undefined,
        VpcId: undefined,
        OwnerId: undefined,
    };
    if (output.associationSet === "") {
        contents.Associations = [];
    }
    else if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
        contents.Associations = deserializeAws_ec2NetworkAclAssociationList(__getArrayIfSingleItem(output["associationSet"]["item"]), context);
    }
    if (output.entrySet === "") {
        contents.Entries = [];
    }
    else if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
        contents.Entries = deserializeAws_ec2NetworkAclEntryList(__getArrayIfSingleItem(output["entrySet"]["item"]), context);
    }
    if (output["default"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["default"]);
    }
    if (output["networkAclId"] !== undefined) {
        contents.NetworkAclId = __expectString(output["networkAclId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkAclAssociation = function (output, context) {
    var contents = {
        NetworkAclAssociationId: undefined,
        NetworkAclId: undefined,
        SubnetId: undefined,
    };
    if (output["networkAclAssociationId"] !== undefined) {
        contents.NetworkAclAssociationId = __expectString(output["networkAclAssociationId"]);
    }
    if (output["networkAclId"] !== undefined) {
        contents.NetworkAclId = __expectString(output["networkAclId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkAclAssociationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkAclAssociation(entry, context);
    });
};
var deserializeAws_ec2NetworkAclEntry = function (output, context) {
    var contents = {
        CidrBlock: undefined,
        Egress: undefined,
        IcmpTypeCode: undefined,
        Ipv6CidrBlock: undefined,
        PortRange: undefined,
        Protocol: undefined,
        RuleAction: undefined,
        RuleNumber: undefined,
    };
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output["egress"] !== undefined) {
        contents.Egress = __parseBoolean(output["egress"]);
    }
    if (output["icmpTypeCode"] !== undefined) {
        contents.IcmpTypeCode = deserializeAws_ec2IcmpTypeCode(output["icmpTypeCode"], context);
    }
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
    }
    if (output["portRange"] !== undefined) {
        contents.PortRange = deserializeAws_ec2PortRange(output["portRange"], context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = __expectString(output["ruleAction"]);
    }
    if (output["ruleNumber"] !== undefined) {
        contents.RuleNumber = __strictParseInt32(output["ruleNumber"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkAclEntryList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkAclEntry(entry, context);
    });
};
var deserializeAws_ec2NetworkAclList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkAcl(entry, context);
    });
};
var deserializeAws_ec2NetworkCardInfo = function (output, context) {
    var contents = {
        NetworkCardIndex: undefined,
        NetworkPerformance: undefined,
        MaximumNetworkInterfaces: undefined,
    };
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    if (output["networkPerformance"] !== undefined) {
        contents.NetworkPerformance = __expectString(output["networkPerformance"]);
    }
    if (output["maximumNetworkInterfaces"] !== undefined) {
        contents.MaximumNetworkInterfaces = __strictParseInt32(output["maximumNetworkInterfaces"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkCardInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkCardInfo(entry, context);
    });
};
var deserializeAws_ec2NetworkInfo = function (output, context) {
    var contents = {
        NetworkPerformance: undefined,
        MaximumNetworkInterfaces: undefined,
        MaximumNetworkCards: undefined,
        DefaultNetworkCardIndex: undefined,
        NetworkCards: undefined,
        Ipv4AddressesPerInterface: undefined,
        Ipv6AddressesPerInterface: undefined,
        Ipv6Supported: undefined,
        EnaSupport: undefined,
        EfaSupported: undefined,
        EfaInfo: undefined,
        EncryptionInTransitSupported: undefined,
    };
    if (output["networkPerformance"] !== undefined) {
        contents.NetworkPerformance = __expectString(output["networkPerformance"]);
    }
    if (output["maximumNetworkInterfaces"] !== undefined) {
        contents.MaximumNetworkInterfaces = __strictParseInt32(output["maximumNetworkInterfaces"]);
    }
    if (output["maximumNetworkCards"] !== undefined) {
        contents.MaximumNetworkCards = __strictParseInt32(output["maximumNetworkCards"]);
    }
    if (output["defaultNetworkCardIndex"] !== undefined) {
        contents.DefaultNetworkCardIndex = __strictParseInt32(output["defaultNetworkCardIndex"]);
    }
    if (output.networkCards === "") {
        contents.NetworkCards = [];
    }
    else if (output["networkCards"] !== undefined && output["networkCards"]["item"] !== undefined) {
        contents.NetworkCards = deserializeAws_ec2NetworkCardInfoList(__getArrayIfSingleItem(output["networkCards"]["item"]), context);
    }
    if (output["ipv4AddressesPerInterface"] !== undefined) {
        contents.Ipv4AddressesPerInterface = __strictParseInt32(output["ipv4AddressesPerInterface"]);
    }
    if (output["ipv6AddressesPerInterface"] !== undefined) {
        contents.Ipv6AddressesPerInterface = __strictParseInt32(output["ipv6AddressesPerInterface"]);
    }
    if (output["ipv6Supported"] !== undefined) {
        contents.Ipv6Supported = __parseBoolean(output["ipv6Supported"]);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = __expectString(output["enaSupport"]);
    }
    if (output["efaSupported"] !== undefined) {
        contents.EfaSupported = __parseBoolean(output["efaSupported"]);
    }
    if (output["efaInfo"] !== undefined) {
        contents.EfaInfo = deserializeAws_ec2EfaInfo(output["efaInfo"], context);
    }
    if (output["encryptionInTransitSupported"] !== undefined) {
        contents.EncryptionInTransitSupported = __parseBoolean(output["encryptionInTransitSupported"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkInsightsAccessScope = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeId: undefined,
        NetworkInsightsAccessScopeArn: undefined,
        CreatedDate: undefined,
        UpdatedDate: undefined,
        Tags: undefined,
    };
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    if (output["networkInsightsAccessScopeArn"] !== undefined) {
        contents.NetworkInsightsAccessScopeArn = __expectString(output["networkInsightsAccessScopeArn"]);
    }
    if (output["createdDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTime(output["createdDate"]));
    }
    if (output["updatedDate"] !== undefined) {
        contents.UpdatedDate = __expectNonNull(__parseRfc3339DateTime(output["updatedDate"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2NetworkInsightsAccessScopeAnalysis = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeAnalysisId: undefined,
        NetworkInsightsAccessScopeAnalysisArn: undefined,
        NetworkInsightsAccessScopeId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        WarningMessage: undefined,
        StartDate: undefined,
        EndDate: undefined,
        FindingsFound: undefined,
        AnalyzedEniCount: undefined,
        Tags: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
    }
    if (output["networkInsightsAccessScopeAnalysisArn"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisArn = __expectString(output["networkInsightsAccessScopeAnalysisArn"]);
    }
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["warningMessage"] !== undefined) {
        contents.WarningMessage = __expectString(output["warningMessage"]);
    }
    if (output["startDate"] !== undefined) {
        contents.StartDate = __expectNonNull(__parseRfc3339DateTime(output["startDate"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = __expectNonNull(__parseRfc3339DateTime(output["endDate"]));
    }
    if (output["findingsFound"] !== undefined) {
        contents.FindingsFound = __expectString(output["findingsFound"]);
    }
    if (output["analyzedEniCount"] !== undefined) {
        contents.AnalyzedEniCount = __strictParseInt32(output["analyzedEniCount"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2NetworkInsightsAccessScopeAnalysisList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInsightsAccessScopeAnalysis(entry, context);
    });
};
var deserializeAws_ec2NetworkInsightsAccessScopeContent = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeId: undefined,
        MatchPaths: undefined,
        ExcludePaths: undefined,
    };
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
    }
    if (output.matchPathSet === "") {
        contents.MatchPaths = [];
    }
    else if (output["matchPathSet"] !== undefined && output["matchPathSet"]["item"] !== undefined) {
        contents.MatchPaths = deserializeAws_ec2AccessScopePathList(__getArrayIfSingleItem(output["matchPathSet"]["item"]), context);
    }
    if (output.excludePathSet === "") {
        contents.ExcludePaths = [];
    }
    else if (output["excludePathSet"] !== undefined && output["excludePathSet"]["item"] !== undefined) {
        contents.ExcludePaths = deserializeAws_ec2AccessScopePathList(__getArrayIfSingleItem(output["excludePathSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2NetworkInsightsAccessScopeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInsightsAccessScope(entry, context);
    });
};
var deserializeAws_ec2NetworkInsightsAnalysis = function (output, context) {
    var contents = {
        NetworkInsightsAnalysisId: undefined,
        NetworkInsightsAnalysisArn: undefined,
        NetworkInsightsPathId: undefined,
        FilterInArns: undefined,
        StartDate: undefined,
        Status: undefined,
        StatusMessage: undefined,
        WarningMessage: undefined,
        NetworkPathFound: undefined,
        ForwardPathComponents: undefined,
        ReturnPathComponents: undefined,
        Explanations: undefined,
        AlternatePathHints: undefined,
        Tags: undefined,
    };
    if (output["networkInsightsAnalysisId"] !== undefined) {
        contents.NetworkInsightsAnalysisId = __expectString(output["networkInsightsAnalysisId"]);
    }
    if (output["networkInsightsAnalysisArn"] !== undefined) {
        contents.NetworkInsightsAnalysisArn = __expectString(output["networkInsightsAnalysisArn"]);
    }
    if (output["networkInsightsPathId"] !== undefined) {
        contents.NetworkInsightsPathId = __expectString(output["networkInsightsPathId"]);
    }
    if (output.filterInArnSet === "") {
        contents.FilterInArns = [];
    }
    else if (output["filterInArnSet"] !== undefined && output["filterInArnSet"]["item"] !== undefined) {
        contents.FilterInArns = deserializeAws_ec2ArnList(__getArrayIfSingleItem(output["filterInArnSet"]["item"]), context);
    }
    if (output["startDate"] !== undefined) {
        contents.StartDate = __expectNonNull(__parseRfc3339DateTime(output["startDate"]));
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["warningMessage"] !== undefined) {
        contents.WarningMessage = __expectString(output["warningMessage"]);
    }
    if (output["networkPathFound"] !== undefined) {
        contents.NetworkPathFound = __parseBoolean(output["networkPathFound"]);
    }
    if (output.forwardPathComponentSet === "") {
        contents.ForwardPathComponents = [];
    }
    else if (output["forwardPathComponentSet"] !== undefined &&
        output["forwardPathComponentSet"]["item"] !== undefined) {
        contents.ForwardPathComponents = deserializeAws_ec2PathComponentList(__getArrayIfSingleItem(output["forwardPathComponentSet"]["item"]), context);
    }
    if (output.returnPathComponentSet === "") {
        contents.ReturnPathComponents = [];
    }
    else if (output["returnPathComponentSet"] !== undefined && output["returnPathComponentSet"]["item"] !== undefined) {
        contents.ReturnPathComponents = deserializeAws_ec2PathComponentList(__getArrayIfSingleItem(output["returnPathComponentSet"]["item"]), context);
    }
    if (output.explanationSet === "") {
        contents.Explanations = [];
    }
    else if (output["explanationSet"] !== undefined && output["explanationSet"]["item"] !== undefined) {
        contents.Explanations = deserializeAws_ec2ExplanationList(__getArrayIfSingleItem(output["explanationSet"]["item"]), context);
    }
    if (output.alternatePathHintSet === "") {
        contents.AlternatePathHints = [];
    }
    else if (output["alternatePathHintSet"] !== undefined && output["alternatePathHintSet"]["item"] !== undefined) {
        contents.AlternatePathHints = deserializeAws_ec2AlternatePathHintList(__getArrayIfSingleItem(output["alternatePathHintSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2NetworkInsightsAnalysisList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInsightsAnalysis(entry, context);
    });
};
var deserializeAws_ec2NetworkInsightsPath = function (output, context) {
    var contents = {
        NetworkInsightsPathId: undefined,
        NetworkInsightsPathArn: undefined,
        CreatedDate: undefined,
        Source: undefined,
        Destination: undefined,
        SourceIp: undefined,
        DestinationIp: undefined,
        Protocol: undefined,
        DestinationPort: undefined,
        Tags: undefined,
    };
    if (output["networkInsightsPathId"] !== undefined) {
        contents.NetworkInsightsPathId = __expectString(output["networkInsightsPathId"]);
    }
    if (output["networkInsightsPathArn"] !== undefined) {
        contents.NetworkInsightsPathArn = __expectString(output["networkInsightsPathArn"]);
    }
    if (output["createdDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTime(output["createdDate"]));
    }
    if (output["source"] !== undefined) {
        contents.Source = __expectString(output["source"]);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = __expectString(output["destination"]);
    }
    if (output["sourceIp"] !== undefined) {
        contents.SourceIp = __expectString(output["sourceIp"]);
    }
    if (output["destinationIp"] !== undefined) {
        contents.DestinationIp = __expectString(output["destinationIp"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output["destinationPort"] !== undefined) {
        contents.DestinationPort = __strictParseInt32(output["destinationPort"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2NetworkInsightsPathList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInsightsPath(entry, context);
    });
};
var deserializeAws_ec2NetworkInterface = function (output, context) {
    var contents = {
        Association: undefined,
        Attachment: undefined,
        AvailabilityZone: undefined,
        Description: undefined,
        Groups: undefined,
        InterfaceType: undefined,
        Ipv6Addresses: undefined,
        MacAddress: undefined,
        NetworkInterfaceId: undefined,
        OutpostArn: undefined,
        OwnerId: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
        PrivateIpAddresses: undefined,
        Ipv4Prefixes: undefined,
        Ipv6Prefixes: undefined,
        RequesterId: undefined,
        RequesterManaged: undefined,
        SourceDestCheck: undefined,
        Status: undefined,
        SubnetId: undefined,
        TagSet: undefined,
        VpcId: undefined,
        DenyAllIgwTraffic: undefined,
        Ipv6Native: undefined,
        Ipv6Address: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2NetworkInterfaceAssociation(output["association"], context);
    }
    if (output["attachment"] !== undefined) {
        contents.Attachment = deserializeAws_ec2NetworkInterfaceAttachment(output["attachment"], context);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["interfaceType"] !== undefined) {
        contents.InterfaceType = __expectString(output["interfaceType"]);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = deserializeAws_ec2NetworkInterfaceIpv6AddressesList(__getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["macAddress"] !== undefined) {
        contents.MacAddress = __expectString(output["macAddress"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = deserializeAws_ec2NetworkInterfacePrivateIpAddressList(__getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output.ipv4PrefixSet === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
        contents.Ipv4Prefixes = deserializeAws_ec2Ipv4PrefixesList(__getArrayIfSingleItem(output["ipv4PrefixSet"]["item"]), context);
    }
    if (output.ipv6PrefixSet === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
        contents.Ipv6Prefixes = deserializeAws_ec2Ipv6PrefixesList(__getArrayIfSingleItem(output["ipv6PrefixSet"]["item"]), context);
    }
    if (output["requesterId"] !== undefined) {
        contents.RequesterId = __expectString(output["requesterId"]);
    }
    if (output["requesterManaged"] !== undefined) {
        contents.RequesterManaged = __parseBoolean(output["requesterManaged"]);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = __parseBoolean(output["sourceDestCheck"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output.tagSet === "") {
        contents.TagSet = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.TagSet = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["denyAllIgwTraffic"] !== undefined) {
        contents.DenyAllIgwTraffic = __parseBoolean(output["denyAllIgwTraffic"]);
    }
    if (output["ipv6Native"] !== undefined) {
        contents.Ipv6Native = __parseBoolean(output["ipv6Native"]);
    }
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = __expectString(output["ipv6Address"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkInterfaceAssociation = function (output, context) {
    var contents = {
        AllocationId: undefined,
        AssociationId: undefined,
        IpOwnerId: undefined,
        PublicDnsName: undefined,
        PublicIp: undefined,
        CustomerOwnedIp: undefined,
        CarrierIp: undefined,
    };
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = __expectString(output["allocationId"]);
    }
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["ipOwnerId"] !== undefined) {
        contents.IpOwnerId = __expectString(output["ipOwnerId"]);
    }
    if (output["publicDnsName"] !== undefined) {
        contents.PublicDnsName = __expectString(output["publicDnsName"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
    }
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = __expectString(output["carrierIp"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkInterfaceAttachment = function (output, context) {
    var contents = {
        AttachTime: undefined,
        AttachmentId: undefined,
        DeleteOnTermination: undefined,
        DeviceIndex: undefined,
        NetworkCardIndex: undefined,
        InstanceId: undefined,
        InstanceOwnerId: undefined,
        Status: undefined,
    };
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = __expectNonNull(__parseRfc3339DateTime(output["attachTime"]));
    }
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = __expectString(output["attachmentId"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceOwnerId"] !== undefined) {
        contents.InstanceOwnerId = __expectString(output["instanceOwnerId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkInterfaceCount = function (output, context) {
    var contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkInterfaceIpv6Address = function (output, context) {
    var contents = {
        Ipv6Address: undefined,
    };
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = __expectString(output["ipv6Address"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkInterfaceIpv6AddressesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInterfaceIpv6Address(entry, context);
    });
};
var deserializeAws_ec2NetworkInterfaceList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInterface(entry, context);
    });
};
var deserializeAws_ec2NetworkInterfacePermission = function (output, context) {
    var contents = {
        NetworkInterfacePermissionId: undefined,
        NetworkInterfaceId: undefined,
        AwsAccountId: undefined,
        AwsService: undefined,
        Permission: undefined,
        PermissionState: undefined,
    };
    if (output["networkInterfacePermissionId"] !== undefined) {
        contents.NetworkInterfacePermissionId = __expectString(output["networkInterfacePermissionId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["awsAccountId"] !== undefined) {
        contents.AwsAccountId = __expectString(output["awsAccountId"]);
    }
    if (output["awsService"] !== undefined) {
        contents.AwsService = __expectString(output["awsService"]);
    }
    if (output["permission"] !== undefined) {
        contents.Permission = __expectString(output["permission"]);
    }
    if (output["permissionState"] !== undefined) {
        contents.PermissionState = deserializeAws_ec2NetworkInterfacePermissionState(output["permissionState"], context);
    }
    return contents;
};
var deserializeAws_ec2NetworkInterfacePermissionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInterfacePermission(entry, context);
    });
};
var deserializeAws_ec2NetworkInterfacePermissionState = function (output, context) {
    var contents = {
        State: undefined,
        StatusMessage: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkInterfacePrivateIpAddress = function (output, context) {
    var contents = {
        Association: undefined,
        Primary: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2NetworkInterfaceAssociation(output["association"], context);
    }
    if (output["primary"] !== undefined) {
        contents.Primary = __parseBoolean(output["primary"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    return contents;
};
var deserializeAws_ec2NetworkInterfacePrivateIpAddressList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInterfacePrivateIpAddress(entry, context);
    });
};
var deserializeAws_ec2OccurrenceDaySet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __strictParseInt32(entry);
    });
};
var deserializeAws_ec2OnDemandOptions = function (output, context) {
    var contents = {
        AllocationStrategy: undefined,
        CapacityReservationOptions: undefined,
        SingleInstanceType: undefined,
        SingleAvailabilityZone: undefined,
        MinTargetCapacity: undefined,
        MaxTotalPrice: undefined,
    };
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output["capacityReservationOptions"] !== undefined) {
        contents.CapacityReservationOptions = deserializeAws_ec2CapacityReservationOptions(output["capacityReservationOptions"], context);
    }
    if (output["singleInstanceType"] !== undefined) {
        contents.SingleInstanceType = __parseBoolean(output["singleInstanceType"]);
    }
    if (output["singleAvailabilityZone"] !== undefined) {
        contents.SingleAvailabilityZone = __parseBoolean(output["singleAvailabilityZone"]);
    }
    if (output["minTargetCapacity"] !== undefined) {
        contents.MinTargetCapacity = __strictParseInt32(output["minTargetCapacity"]);
    }
    if (output["maxTotalPrice"] !== undefined) {
        contents.MaxTotalPrice = __expectString(output["maxTotalPrice"]);
    }
    return contents;
};
var deserializeAws_ec2PacketHeaderStatement = function (output, context) {
    var contents = {
        SourceAddresses: undefined,
        DestinationAddresses: undefined,
        SourcePorts: undefined,
        DestinationPorts: undefined,
        SourcePrefixLists: undefined,
        DestinationPrefixLists: undefined,
        Protocols: undefined,
    };
    if (output.sourceAddressSet === "") {
        contents.SourceAddresses = [];
    }
    else if (output["sourceAddressSet"] !== undefined && output["sourceAddressSet"]["item"] !== undefined) {
        contents.SourceAddresses = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["sourceAddressSet"]["item"]), context);
    }
    if (output.destinationAddressSet === "") {
        contents.DestinationAddresses = [];
    }
    else if (output["destinationAddressSet"] !== undefined && output["destinationAddressSet"]["item"] !== undefined) {
        contents.DestinationAddresses = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["destinationAddressSet"]["item"]), context);
    }
    if (output.sourcePortSet === "") {
        contents.SourcePorts = [];
    }
    else if (output["sourcePortSet"] !== undefined && output["sourcePortSet"]["item"] !== undefined) {
        contents.SourcePorts = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["sourcePortSet"]["item"]), context);
    }
    if (output.destinationPortSet === "") {
        contents.DestinationPorts = [];
    }
    else if (output["destinationPortSet"] !== undefined && output["destinationPortSet"]["item"] !== undefined) {
        contents.DestinationPorts = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["destinationPortSet"]["item"]), context);
    }
    if (output.sourcePrefixListSet === "") {
        contents.SourcePrefixLists = [];
    }
    else if (output["sourcePrefixListSet"] !== undefined && output["sourcePrefixListSet"]["item"] !== undefined) {
        contents.SourcePrefixLists = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["sourcePrefixListSet"]["item"]), context);
    }
    if (output.destinationPrefixListSet === "") {
        contents.DestinationPrefixLists = [];
    }
    else if (output["destinationPrefixListSet"] !== undefined &&
        output["destinationPrefixListSet"]["item"] !== undefined) {
        contents.DestinationPrefixLists = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["destinationPrefixListSet"]["item"]), context);
    }
    if (output.protocolSet === "") {
        contents.Protocols = [];
    }
    else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
        contents.Protocols = deserializeAws_ec2ProtocolList(__getArrayIfSingleItem(output["protocolSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2PathComponent = function (output, context) {
    var contents = {
        SequenceNumber: undefined,
        AclRule: undefined,
        AttachedTo: undefined,
        Component: undefined,
        DestinationVpc: undefined,
        OutboundHeader: undefined,
        InboundHeader: undefined,
        RouteTableRoute: undefined,
        SecurityGroupRule: undefined,
        SourceVpc: undefined,
        Subnet: undefined,
        Vpc: undefined,
        AdditionalDetails: undefined,
        TransitGateway: undefined,
        TransitGatewayRouteTableRoute: undefined,
    };
    if (output["sequenceNumber"] !== undefined) {
        contents.SequenceNumber = __strictParseInt32(output["sequenceNumber"]);
    }
    if (output["aclRule"] !== undefined) {
        contents.AclRule = deserializeAws_ec2AnalysisAclRule(output["aclRule"], context);
    }
    if (output["attachedTo"] !== undefined) {
        contents.AttachedTo = deserializeAws_ec2AnalysisComponent(output["attachedTo"], context);
    }
    if (output["component"] !== undefined) {
        contents.Component = deserializeAws_ec2AnalysisComponent(output["component"], context);
    }
    if (output["destinationVpc"] !== undefined) {
        contents.DestinationVpc = deserializeAws_ec2AnalysisComponent(output["destinationVpc"], context);
    }
    if (output["outboundHeader"] !== undefined) {
        contents.OutboundHeader = deserializeAws_ec2AnalysisPacketHeader(output["outboundHeader"], context);
    }
    if (output["inboundHeader"] !== undefined) {
        contents.InboundHeader = deserializeAws_ec2AnalysisPacketHeader(output["inboundHeader"], context);
    }
    if (output["routeTableRoute"] !== undefined) {
        contents.RouteTableRoute = deserializeAws_ec2AnalysisRouteTableRoute(output["routeTableRoute"], context);
    }
    if (output["securityGroupRule"] !== undefined) {
        contents.SecurityGroupRule = deserializeAws_ec2AnalysisSecurityGroupRule(output["securityGroupRule"], context);
    }
    if (output["sourceVpc"] !== undefined) {
        contents.SourceVpc = deserializeAws_ec2AnalysisComponent(output["sourceVpc"], context);
    }
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2AnalysisComponent(output["subnet"], context);
    }
    if (output["vpc"] !== undefined) {
        contents.Vpc = deserializeAws_ec2AnalysisComponent(output["vpc"], context);
    }
    if (output.additionalDetailSet === "") {
        contents.AdditionalDetails = [];
    }
    else if (output["additionalDetailSet"] !== undefined && output["additionalDetailSet"]["item"] !== undefined) {
        contents.AdditionalDetails = deserializeAws_ec2AdditionalDetailList(__getArrayIfSingleItem(output["additionalDetailSet"]["item"]), context);
    }
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2AnalysisComponent(output["transitGateway"], context);
    }
    if (output["transitGatewayRouteTableRoute"] !== undefined) {
        contents.TransitGatewayRouteTableRoute = deserializeAws_ec2TransitGatewayRouteTableRoute(output["transitGatewayRouteTableRoute"], context);
    }
    return contents;
};
var deserializeAws_ec2PathComponentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PathComponent(entry, context);
    });
};
var deserializeAws_ec2PathStatement = function (output, context) {
    var contents = {
        PacketHeaderStatement: undefined,
        ResourceStatement: undefined,
    };
    if (output["packetHeaderStatement"] !== undefined) {
        contents.PacketHeaderStatement = deserializeAws_ec2PacketHeaderStatement(output["packetHeaderStatement"], context);
    }
    if (output["resourceStatement"] !== undefined) {
        contents.ResourceStatement = deserializeAws_ec2ResourceStatement(output["resourceStatement"], context);
    }
    return contents;
};
var deserializeAws_ec2PciId = function (output, context) {
    var contents = {
        DeviceId: undefined,
        VendorId: undefined,
        SubsystemId: undefined,
        SubsystemVendorId: undefined,
    };
    if (output["DeviceId"] !== undefined) {
        contents.DeviceId = __expectString(output["DeviceId"]);
    }
    if (output["VendorId"] !== undefined) {
        contents.VendorId = __expectString(output["VendorId"]);
    }
    if (output["SubsystemId"] !== undefined) {
        contents.SubsystemId = __expectString(output["SubsystemId"]);
    }
    if (output["SubsystemVendorId"] !== undefined) {
        contents.SubsystemVendorId = __expectString(output["SubsystemVendorId"]);
    }
    return contents;
};
var deserializeAws_ec2PeeringAttachmentStatus = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2PeeringConnectionOptions = function (output, context) {
    var contents = {
        AllowDnsResolutionFromRemoteVpc: undefined,
        AllowEgressFromLocalClassicLinkToRemoteVpc: undefined,
        AllowEgressFromLocalVpcToRemoteClassicLink: undefined,
    };
    if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
        contents.AllowDnsResolutionFromRemoteVpc = __parseBoolean(output["allowDnsResolutionFromRemoteVpc"]);
    }
    if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
        contents.AllowEgressFromLocalClassicLinkToRemoteVpc = __parseBoolean(output["allowEgressFromLocalClassicLinkToRemoteVpc"]);
    }
    if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
        contents.AllowEgressFromLocalVpcToRemoteClassicLink = __parseBoolean(output["allowEgressFromLocalVpcToRemoteClassicLink"]);
    }
    return contents;
};
var deserializeAws_ec2PeeringTgwInfo = function (output, context) {
    var contents = {
        TransitGatewayId: undefined,
        OwnerId: undefined,
        Region: undefined,
    };
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["region"] !== undefined) {
        contents.Region = __expectString(output["region"]);
    }
    return contents;
};
var deserializeAws_ec2Phase1DHGroupNumbersList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase1DHGroupNumbersListValue(entry, context);
    });
};
var deserializeAws_ec2Phase1DHGroupNumbersListValue = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __strictParseInt32(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2Phase1EncryptionAlgorithmsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase1EncryptionAlgorithmsListValue(entry, context);
    });
};
var deserializeAws_ec2Phase1EncryptionAlgorithmsListValue = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2Phase1IntegrityAlgorithmsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase1IntegrityAlgorithmsListValue(entry, context);
    });
};
var deserializeAws_ec2Phase1IntegrityAlgorithmsListValue = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2Phase2DHGroupNumbersList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase2DHGroupNumbersListValue(entry, context);
    });
};
var deserializeAws_ec2Phase2DHGroupNumbersListValue = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __strictParseInt32(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2Phase2EncryptionAlgorithmsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase2EncryptionAlgorithmsListValue(entry, context);
    });
};
var deserializeAws_ec2Phase2EncryptionAlgorithmsListValue = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2Phase2IntegrityAlgorithmsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase2IntegrityAlgorithmsListValue(entry, context);
    });
};
var deserializeAws_ec2Phase2IntegrityAlgorithmsListValue = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2Placement = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        Affinity: undefined,
        GroupName: undefined,
        PartitionNumber: undefined,
        HostId: undefined,
        Tenancy: undefined,
        SpreadDomain: undefined,
        HostResourceGroupArn: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["affinity"] !== undefined) {
        contents.Affinity = __expectString(output["affinity"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["partitionNumber"] !== undefined) {
        contents.PartitionNumber = __strictParseInt32(output["partitionNumber"]);
    }
    if (output["hostId"] !== undefined) {
        contents.HostId = __expectString(output["hostId"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    if (output["spreadDomain"] !== undefined) {
        contents.SpreadDomain = __expectString(output["spreadDomain"]);
    }
    if (output["hostResourceGroupArn"] !== undefined) {
        contents.HostResourceGroupArn = __expectString(output["hostResourceGroupArn"]);
    }
    return contents;
};
var deserializeAws_ec2PlacementGroup = function (output, context) {
    var contents = {
        GroupName: undefined,
        State: undefined,
        Strategy: undefined,
        PartitionCount: undefined,
        GroupId: undefined,
        Tags: undefined,
        GroupArn: undefined,
    };
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["strategy"] !== undefined) {
        contents.Strategy = __expectString(output["strategy"]);
    }
    if (output["partitionCount"] !== undefined) {
        contents.PartitionCount = __strictParseInt32(output["partitionCount"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["groupArn"] !== undefined) {
        contents.GroupArn = __expectString(output["groupArn"]);
    }
    return contents;
};
var deserializeAws_ec2PlacementGroupInfo = function (output, context) {
    var contents = {
        SupportedStrategies: undefined,
    };
    if (output.supportedStrategies === "") {
        contents.SupportedStrategies = [];
    }
    else if (output["supportedStrategies"] !== undefined && output["supportedStrategies"]["item"] !== undefined) {
        contents.SupportedStrategies = deserializeAws_ec2PlacementGroupStrategyList(__getArrayIfSingleItem(output["supportedStrategies"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2PlacementGroupList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PlacementGroup(entry, context);
    });
};
var deserializeAws_ec2PlacementGroupStrategyList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2PlacementResponse = function (output, context) {
    var contents = {
        GroupName: undefined,
    };
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    return contents;
};
var deserializeAws_ec2PoolCidrBlock = function (output, context) {
    var contents = {
        Cidr: undefined,
    };
    if (output["poolCidrBlock"] !== undefined) {
        contents.Cidr = __expectString(output["poolCidrBlock"]);
    }
    return contents;
};
var deserializeAws_ec2PoolCidrBlocksSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PoolCidrBlock(entry, context);
    });
};
var deserializeAws_ec2PortRange = function (output, context) {
    var contents = {
        From: undefined,
        To: undefined,
    };
    if (output["from"] !== undefined) {
        contents.From = __strictParseInt32(output["from"]);
    }
    if (output["to"] !== undefined) {
        contents.To = __strictParseInt32(output["to"]);
    }
    return contents;
};
var deserializeAws_ec2PortRangeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PortRange(entry, context);
    });
};
var deserializeAws_ec2PrefixList = function (output, context) {
    var contents = {
        Cidrs: undefined,
        PrefixListId: undefined,
        PrefixListName: undefined,
    };
    if (output.cidrSet === "") {
        contents.Cidrs = [];
    }
    else if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
        contents.Cidrs = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["cidrSet"]["item"]), context);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["prefixListName"] !== undefined) {
        contents.PrefixListName = __expectString(output["prefixListName"]);
    }
    return contents;
};
var deserializeAws_ec2PrefixListAssociation = function (output, context) {
    var contents = {
        ResourceId: undefined,
        ResourceOwner: undefined,
    };
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceOwner"] !== undefined) {
        contents.ResourceOwner = __expectString(output["resourceOwner"]);
    }
    return contents;
};
var deserializeAws_ec2PrefixListAssociationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrefixListAssociation(entry, context);
    });
};
var deserializeAws_ec2PrefixListEntry = function (output, context) {
    var contents = {
        Cidr: undefined,
        Description: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
var deserializeAws_ec2PrefixListEntrySet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrefixListEntry(entry, context);
    });
};
var deserializeAws_ec2PrefixListId = function (output, context) {
    var contents = {
        Description: undefined,
        PrefixListId: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    return contents;
};
var deserializeAws_ec2PrefixListIdList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrefixListId(entry, context);
    });
};
var deserializeAws_ec2PrefixListIdSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2PrefixListSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrefixList(entry, context);
    });
};
var deserializeAws_ec2PriceSchedule = function (output, context) {
    var contents = {
        Active: undefined,
        CurrencyCode: undefined,
        Price: undefined,
        Term: undefined,
    };
    if (output["active"] !== undefined) {
        contents.Active = __parseBoolean(output["active"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["price"] !== undefined) {
        contents.Price = __strictParseFloat(output["price"]);
    }
    if (output["term"] !== undefined) {
        contents.Term = __strictParseLong(output["term"]);
    }
    return contents;
};
var deserializeAws_ec2PriceScheduleList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PriceSchedule(entry, context);
    });
};
var deserializeAws_ec2PricingDetail = function (output, context) {
    var contents = {
        Count: undefined,
        Price: undefined,
    };
    if (output["count"] !== undefined) {
        contents.Count = __strictParseInt32(output["count"]);
    }
    if (output["price"] !== undefined) {
        contents.Price = __strictParseFloat(output["price"]);
    }
    return contents;
};
var deserializeAws_ec2PricingDetailsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PricingDetail(entry, context);
    });
};
var deserializeAws_ec2PrincipalIdFormat = function (output, context) {
    var contents = {
        Arn: undefined,
        Statuses: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = deserializeAws_ec2IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2PrincipalIdFormatList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrincipalIdFormat(entry, context);
    });
};
var deserializeAws_ec2PrivateDnsDetails = function (output, context) {
    var contents = {
        PrivateDnsName: undefined,
    };
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    return contents;
};
var deserializeAws_ec2PrivateDnsDetailsSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrivateDnsDetails(entry, context);
    });
};
var deserializeAws_ec2PrivateDnsNameConfiguration = function (output, context) {
    var contents = {
        State: undefined,
        Type: undefined,
        Value: undefined,
        Name: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    return contents;
};
var deserializeAws_ec2PrivateDnsNameOptionsOnLaunch = function (output, context) {
    var contents = {
        HostnameType: undefined,
        EnableResourceNameDnsARecord: undefined,
        EnableResourceNameDnsAAAARecord: undefined,
    };
    if (output["hostnameType"] !== undefined) {
        contents.HostnameType = __expectString(output["hostnameType"]);
    }
    if (output["enableResourceNameDnsARecord"] !== undefined) {
        contents.EnableResourceNameDnsARecord = __parseBoolean(output["enableResourceNameDnsARecord"]);
    }
    if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
        contents.EnableResourceNameDnsAAAARecord = __parseBoolean(output["enableResourceNameDnsAAAARecord"]);
    }
    return contents;
};
var deserializeAws_ec2PrivateDnsNameOptionsResponse = function (output, context) {
    var contents = {
        HostnameType: undefined,
        EnableResourceNameDnsARecord: undefined,
        EnableResourceNameDnsAAAARecord: undefined,
    };
    if (output["hostnameType"] !== undefined) {
        contents.HostnameType = __expectString(output["hostnameType"]);
    }
    if (output["enableResourceNameDnsARecord"] !== undefined) {
        contents.EnableResourceNameDnsARecord = __parseBoolean(output["enableResourceNameDnsARecord"]);
    }
    if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
        contents.EnableResourceNameDnsAAAARecord = __parseBoolean(output["enableResourceNameDnsAAAARecord"]);
    }
    return contents;
};
var deserializeAws_ec2PrivateIpAddressSpecification = function (output, context) {
    var contents = {
        Primary: undefined,
        PrivateIpAddress: undefined,
    };
    if (output["primary"] !== undefined) {
        contents.Primary = __parseBoolean(output["primary"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
    }
    return contents;
};
var deserializeAws_ec2PrivateIpAddressSpecificationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrivateIpAddressSpecification(entry, context);
    });
};
var deserializeAws_ec2ProcessorInfo = function (output, context) {
    var contents = {
        SupportedArchitectures: undefined,
        SustainedClockSpeedInGhz: undefined,
    };
    if (output.supportedArchitectures === "") {
        contents.SupportedArchitectures = [];
    }
    else if (output["supportedArchitectures"] !== undefined && output["supportedArchitectures"]["item"] !== undefined) {
        contents.SupportedArchitectures = deserializeAws_ec2ArchitectureTypeList(__getArrayIfSingleItem(output["supportedArchitectures"]["item"]), context);
    }
    if (output["sustainedClockSpeedInGhz"] !== undefined) {
        contents.SustainedClockSpeedInGhz = __strictParseFloat(output["sustainedClockSpeedInGhz"]);
    }
    return contents;
};
var deserializeAws_ec2ProductCode = function (output, context) {
    var contents = {
        ProductCodeId: undefined,
        ProductCodeType: undefined,
    };
    if (output["productCode"] !== undefined) {
        contents.ProductCodeId = __expectString(output["productCode"]);
    }
    if (output["type"] !== undefined) {
        contents.ProductCodeType = __expectString(output["type"]);
    }
    return contents;
};
var deserializeAws_ec2ProductCodeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ProductCode(entry, context);
    });
};
var deserializeAws_ec2PropagatingVgw = function (output, context) {
    var contents = {
        GatewayId: undefined,
    };
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = __expectString(output["gatewayId"]);
    }
    return contents;
};
var deserializeAws_ec2PropagatingVgwList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PropagatingVgw(entry, context);
    });
};
var deserializeAws_ec2ProtocolList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2ProvisionByoipCidrResult = function (output, context) {
    var contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
var deserializeAws_ec2ProvisionedBandwidth = function (output, context) {
    var contents = {
        ProvisionTime: undefined,
        Provisioned: undefined,
        RequestTime: undefined,
        Requested: undefined,
        Status: undefined,
    };
    if (output["provisionTime"] !== undefined) {
        contents.ProvisionTime = __expectNonNull(__parseRfc3339DateTime(output["provisionTime"]));
    }
    if (output["provisioned"] !== undefined) {
        contents.Provisioned = __expectString(output["provisioned"]);
    }
    if (output["requestTime"] !== undefined) {
        contents.RequestTime = __expectNonNull(__parseRfc3339DateTime(output["requestTime"]));
    }
    if (output["requested"] !== undefined) {
        contents.Requested = __expectString(output["requested"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
var deserializeAws_ec2ProvisionIpamPoolCidrResult = function (output, context) {
    var contents = {
        IpamPoolCidr: undefined,
    };
    if (output["ipamPoolCidr"] !== undefined) {
        contents.IpamPoolCidr = deserializeAws_ec2IpamPoolCidr(output["ipamPoolCidr"], context);
    }
    return contents;
};
var deserializeAws_ec2ProvisionPublicIpv4PoolCidrResult = function (output, context) {
    var contents = {
        PoolId: undefined,
        PoolAddressRange: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output["poolAddressRange"] !== undefined) {
        contents.PoolAddressRange = deserializeAws_ec2PublicIpv4PoolRange(output["poolAddressRange"], context);
    }
    return contents;
};
var deserializeAws_ec2PtrUpdateStatus = function (output, context) {
    var contents = {
        Value: undefined,
        Status: undefined,
        Reason: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["reason"] !== undefined) {
        contents.Reason = __expectString(output["reason"]);
    }
    return contents;
};
var deserializeAws_ec2PublicIpv4Pool = function (output, context) {
    var contents = {
        PoolId: undefined,
        Description: undefined,
        PoolAddressRanges: undefined,
        TotalAddressCount: undefined,
        TotalAvailableAddressCount: undefined,
        NetworkBorderGroup: undefined,
        Tags: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = __expectString(output["poolId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.poolAddressRangeSet === "") {
        contents.PoolAddressRanges = [];
    }
    else if (output["poolAddressRangeSet"] !== undefined && output["poolAddressRangeSet"]["item"] !== undefined) {
        contents.PoolAddressRanges = deserializeAws_ec2PublicIpv4PoolRangeSet(__getArrayIfSingleItem(output["poolAddressRangeSet"]["item"]), context);
    }
    if (output["totalAddressCount"] !== undefined) {
        contents.TotalAddressCount = __strictParseInt32(output["totalAddressCount"]);
    }
    if (output["totalAvailableAddressCount"] !== undefined) {
        contents.TotalAvailableAddressCount = __strictParseInt32(output["totalAvailableAddressCount"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2PublicIpv4PoolRange = function (output, context) {
    var contents = {
        FirstAddress: undefined,
        LastAddress: undefined,
        AddressCount: undefined,
        AvailableAddressCount: undefined,
    };
    if (output["firstAddress"] !== undefined) {
        contents.FirstAddress = __expectString(output["firstAddress"]);
    }
    if (output["lastAddress"] !== undefined) {
        contents.LastAddress = __expectString(output["lastAddress"]);
    }
    if (output["addressCount"] !== undefined) {
        contents.AddressCount = __strictParseInt32(output["addressCount"]);
    }
    if (output["availableAddressCount"] !== undefined) {
        contents.AvailableAddressCount = __strictParseInt32(output["availableAddressCount"]);
    }
    return contents;
};
var deserializeAws_ec2PublicIpv4PoolRangeSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PublicIpv4PoolRange(entry, context);
    });
};
var deserializeAws_ec2PublicIpv4PoolSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PublicIpv4Pool(entry, context);
    });
};
var deserializeAws_ec2Purchase = function (output, context) {
    var contents = {
        CurrencyCode: undefined,
        Duration: undefined,
        HostIdSet: undefined,
        HostReservationId: undefined,
        HourlyPrice: undefined,
        InstanceFamily: undefined,
        PaymentOption: undefined,
        UpfrontPrice: undefined,
    };
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["duration"]);
    }
    if (output.hostIdSet === "") {
        contents.HostIdSet = [];
    }
    else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
        contents.HostIdSet = deserializeAws_ec2ResponseHostIdSet(__getArrayIfSingleItem(output["hostIdSet"]["item"]), context);
    }
    if (output["hostReservationId"] !== undefined) {
        contents.HostReservationId = __expectString(output["hostReservationId"]);
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = __expectString(output["instanceFamily"]);
    }
    if (output["paymentOption"] !== undefined) {
        contents.PaymentOption = __expectString(output["paymentOption"]);
    }
    if (output["upfrontPrice"] !== undefined) {
        contents.UpfrontPrice = __expectString(output["upfrontPrice"]);
    }
    return contents;
};
var deserializeAws_ec2PurchasedScheduledInstanceSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ScheduledInstance(entry, context);
    });
};
var deserializeAws_ec2PurchaseHostReservationResult = function (output, context) {
    var contents = {
        ClientToken: undefined,
        CurrencyCode: undefined,
        Purchase: undefined,
        TotalHourlyPrice: undefined,
        TotalUpfrontPrice: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output.purchase === "") {
        contents.Purchase = [];
    }
    else if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
        contents.Purchase = deserializeAws_ec2PurchaseSet(__getArrayIfSingleItem(output["purchase"]["item"]), context);
    }
    if (output["totalHourlyPrice"] !== undefined) {
        contents.TotalHourlyPrice = __expectString(output["totalHourlyPrice"]);
    }
    if (output["totalUpfrontPrice"] !== undefined) {
        contents.TotalUpfrontPrice = __expectString(output["totalUpfrontPrice"]);
    }
    return contents;
};
var deserializeAws_ec2PurchaseReservedInstancesOfferingResult = function (output, context) {
    var contents = {
        ReservedInstancesId: undefined,
    };
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    return contents;
};
var deserializeAws_ec2PurchaseScheduledInstancesResult = function (output, context) {
    var contents = {
        ScheduledInstanceSet: undefined,
    };
    if (output.scheduledInstanceSet === "") {
        contents.ScheduledInstanceSet = [];
    }
    else if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
        contents.ScheduledInstanceSet = deserializeAws_ec2PurchasedScheduledInstanceSet(__getArrayIfSingleItem(output["scheduledInstanceSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2PurchaseSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Purchase(entry, context);
    });
};
var deserializeAws_ec2RecurringCharge = function (output, context) {
    var contents = {
        Amount: undefined,
        Frequency: undefined,
    };
    if (output["amount"] !== undefined) {
        contents.Amount = __strictParseFloat(output["amount"]);
    }
    if (output["frequency"] !== undefined) {
        contents.Frequency = __expectString(output["frequency"]);
    }
    return contents;
};
var deserializeAws_ec2RecurringChargesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2RecurringCharge(entry, context);
    });
};
var deserializeAws_ec2ReferencedSecurityGroup = function (output, context) {
    var contents = {
        GroupId: undefined,
        PeeringStatus: undefined,
        UserId: undefined,
        VpcId: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["peeringStatus"] !== undefined) {
        contents.PeeringStatus = __expectString(output["peeringStatus"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
var deserializeAws_ec2Region = function (output, context) {
    var contents = {
        Endpoint: undefined,
        RegionName: undefined,
        OptInStatus: undefined,
    };
    if (output["regionEndpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["regionEndpoint"]);
    }
    if (output["regionName"] !== undefined) {
        contents.RegionName = __expectString(output["regionName"]);
    }
    if (output["optInStatus"] !== undefined) {
        contents.OptInStatus = __expectString(output["optInStatus"]);
    }
    return contents;
};
var deserializeAws_ec2RegionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Region(entry, context);
    });
};
var deserializeAws_ec2RegisterImageResult = function (output, context) {
    var contents = {
        ImageId: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    return contents;
};
var deserializeAws_ec2RegisterInstanceEventNotificationAttributesResult = function (output, context) {
    var contents = {
        InstanceTagAttribute: undefined,
    };
    if (output["instanceTagAttribute"] !== undefined) {
        contents.InstanceTagAttribute = deserializeAws_ec2InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
    }
    return contents;
};
var deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersResult = function (output, context) {
    var contents = {
        RegisteredMulticastGroupMembers: undefined,
    };
    if (output["registeredMulticastGroupMembers"] !== undefined) {
        contents.RegisteredMulticastGroupMembers = deserializeAws_ec2TransitGatewayMulticastRegisteredGroupMembers(output["registeredMulticastGroupMembers"], context);
    }
    return contents;
};
var deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesResult = function (output, context) {
    var contents = {
        RegisteredMulticastGroupSources: undefined,
    };
    if (output["registeredMulticastGroupSources"] !== undefined) {
        contents.RegisteredMulticastGroupSources = deserializeAws_ec2TransitGatewayMulticastRegisteredGroupSources(output["registeredMulticastGroupSources"], context);
    }
    return contents;
};
var deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsResult = function (output, context) {
    var contents = {
        Associations: undefined,
    };
    if (output["associations"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
var deserializeAws_ec2RejectTransitGatewayPeeringAttachmentResult = function (output, context) {
    var contents = {
        TransitGatewayPeeringAttachment: undefined,
    };
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2RejectTransitGatewayVpcAttachmentResult = function (output, context) {
    var contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2RejectVpcEndpointConnectionsResult = function (output, context) {
    var contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2RejectVpcPeeringConnectionResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ReleaseHostsResult = function (output, context) {
    var contents = {
        Successful: undefined,
        Unsuccessful: undefined,
    };
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = deserializeAws_ec2ResponseHostIdList(__getArrayIfSingleItem(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemList(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ReleaseIpamPoolAllocationResult = function (output, context) {
    var contents = {
        Success: undefined,
    };
    if (output["success"] !== undefined) {
        contents.Success = __parseBoolean(output["success"]);
    }
    return contents;
};
var deserializeAws_ec2ReplaceIamInstanceProfileAssociationResult = function (output, context) {
    var contents = {
        IamInstanceProfileAssociation: undefined,
    };
    if (output["iamInstanceProfileAssociation"] !== undefined) {
        contents.IamInstanceProfileAssociation = deserializeAws_ec2IamInstanceProfileAssociation(output["iamInstanceProfileAssociation"], context);
    }
    return contents;
};
var deserializeAws_ec2ReplaceNetworkAclAssociationResult = function (output, context) {
    var contents = {
        NewAssociationId: undefined,
    };
    if (output["newAssociationId"] !== undefined) {
        contents.NewAssociationId = __expectString(output["newAssociationId"]);
    }
    return contents;
};
var deserializeAws_ec2ReplaceRootVolumeTask = function (output, context) {
    var contents = {
        ReplaceRootVolumeTaskId: undefined,
        InstanceId: undefined,
        TaskState: undefined,
        StartTime: undefined,
        CompleteTime: undefined,
        Tags: undefined,
    };
    if (output["replaceRootVolumeTaskId"] !== undefined) {
        contents.ReplaceRootVolumeTaskId = __expectString(output["replaceRootVolumeTaskId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["taskState"] !== undefined) {
        contents.TaskState = __expectString(output["taskState"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectString(output["startTime"]);
    }
    if (output["completeTime"] !== undefined) {
        contents.CompleteTime = __expectString(output["completeTime"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ReplaceRootVolumeTasks = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReplaceRootVolumeTask(entry, context);
    });
};
var deserializeAws_ec2ReplaceRouteTableAssociationResult = function (output, context) {
    var contents = {
        NewAssociationId: undefined,
        AssociationState: undefined,
    };
    if (output["newAssociationId"] !== undefined) {
        contents.NewAssociationId = __expectString(output["newAssociationId"]);
    }
    if (output["associationState"] !== undefined) {
        contents.AssociationState = deserializeAws_ec2RouteTableAssociationState(output["associationState"], context);
    }
    return contents;
};
var deserializeAws_ec2ReplaceTransitGatewayRouteResult = function (output, context) {
    var contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2TransitGatewayRoute(output["route"], context);
    }
    return contents;
};
var deserializeAws_ec2RequestSpotFleetResponse = function (output, context) {
    var contents = {
        SpotFleetRequestId: undefined,
    };
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    return contents;
};
var deserializeAws_ec2RequestSpotInstancesResult = function (output, context) {
    var contents = {
        SpotInstanceRequests: undefined,
    };
    if (output.spotInstanceRequestSet === "") {
        contents.SpotInstanceRequests = [];
    }
    else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
        contents.SpotInstanceRequests = deserializeAws_ec2SpotInstanceRequestList(__getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2Reservation = function (output, context) {
    var contents = {
        Groups: undefined,
        Instances: undefined,
        OwnerId: undefined,
        RequesterId: undefined,
        ReservationId: undefined,
    };
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output.instancesSet === "") {
        contents.Instances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2InstanceList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["requesterId"] !== undefined) {
        contents.RequesterId = __expectString(output["requesterId"]);
    }
    if (output["reservationId"] !== undefined) {
        contents.ReservationId = __expectString(output["reservationId"]);
    }
    return contents;
};
var deserializeAws_ec2ReservationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Reservation(entry, context);
    });
};
var deserializeAws_ec2ReservationValue = function (output, context) {
    var contents = {
        HourlyPrice: undefined,
        RemainingTotalValue: undefined,
        RemainingUpfrontValue: undefined,
    };
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["remainingTotalValue"] !== undefined) {
        contents.RemainingTotalValue = __expectString(output["remainingTotalValue"]);
    }
    if (output["remainingUpfrontValue"] !== undefined) {
        contents.RemainingUpfrontValue = __expectString(output["remainingUpfrontValue"]);
    }
    return contents;
};
var deserializeAws_ec2ReservedInstanceReservationValue = function (output, context) {
    var contents = {
        ReservationValue: undefined,
        ReservedInstanceId: undefined,
    };
    if (output["reservationValue"] !== undefined) {
        contents.ReservationValue = deserializeAws_ec2ReservationValue(output["reservationValue"], context);
    }
    if (output["reservedInstanceId"] !== undefined) {
        contents.ReservedInstanceId = __expectString(output["reservedInstanceId"]);
    }
    return contents;
};
var deserializeAws_ec2ReservedInstanceReservationValueSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstanceReservationValue(entry, context);
    });
};
var deserializeAws_ec2ReservedInstances = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        Duration: undefined,
        End: undefined,
        FixedPrice: undefined,
        InstanceCount: undefined,
        InstanceType: undefined,
        ProductDescription: undefined,
        ReservedInstancesId: undefined,
        Start: undefined,
        State: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        InstanceTenancy: undefined,
        OfferingClass: undefined,
        OfferingType: undefined,
        RecurringCharges: undefined,
        Scope: undefined,
        Tags: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseLong(output["duration"]);
    }
    if (output["end"] !== undefined) {
        contents.End = __expectNonNull(__parseRfc3339DateTime(output["end"]));
    }
    if (output["fixedPrice"] !== undefined) {
        contents.FixedPrice = __strictParseFloat(output["fixedPrice"]);
    }
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["productDescription"]);
    }
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    if (output["start"] !== undefined) {
        contents.Start = __expectNonNull(__parseRfc3339DateTime(output["start"]));
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["usagePrice"] !== undefined) {
        contents.UsagePrice = __strictParseFloat(output["usagePrice"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["instanceTenancy"] !== undefined) {
        contents.InstanceTenancy = __expectString(output["instanceTenancy"]);
    }
    if (output["offeringClass"] !== undefined) {
        contents.OfferingClass = __expectString(output["offeringClass"]);
    }
    if (output["offeringType"] !== undefined) {
        contents.OfferingType = __expectString(output["offeringType"]);
    }
    if (output.recurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
        contents.RecurringCharges = deserializeAws_ec2RecurringChargesList(__getArrayIfSingleItem(output["recurringCharges"]["item"]), context);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = __expectString(output["scope"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ReservedInstancesConfiguration = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        InstanceCount: undefined,
        InstanceType: undefined,
        Platform: undefined,
        Scope: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = __expectString(output["scope"]);
    }
    return contents;
};
var deserializeAws_ec2ReservedInstancesId = function (output, context) {
    var contents = {
        ReservedInstancesId: undefined,
    };
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    return contents;
};
var deserializeAws_ec2ReservedInstancesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstances(entry, context);
    });
};
var deserializeAws_ec2ReservedInstancesListing = function (output, context) {
    var contents = {
        ClientToken: undefined,
        CreateDate: undefined,
        InstanceCounts: undefined,
        PriceSchedules: undefined,
        ReservedInstancesId: undefined,
        ReservedInstancesListingId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Tags: undefined,
        UpdateDate: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTime(output["createDate"]));
    }
    if (output.instanceCounts === "") {
        contents.InstanceCounts = [];
    }
    else if (output["instanceCounts"] !== undefined && output["instanceCounts"]["item"] !== undefined) {
        contents.InstanceCounts = deserializeAws_ec2InstanceCountList(__getArrayIfSingleItem(output["instanceCounts"]["item"]), context);
    }
    if (output.priceSchedules === "") {
        contents.PriceSchedules = [];
    }
    else if (output["priceSchedules"] !== undefined && output["priceSchedules"]["item"] !== undefined) {
        contents.PriceSchedules = deserializeAws_ec2PriceScheduleList(__getArrayIfSingleItem(output["priceSchedules"]["item"]), context);
    }
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    if (output["reservedInstancesListingId"] !== undefined) {
        contents.ReservedInstancesListingId = __expectString(output["reservedInstancesListingId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["updateDate"] !== undefined) {
        contents.UpdateDate = __expectNonNull(__parseRfc3339DateTime(output["updateDate"]));
    }
    return contents;
};
var deserializeAws_ec2ReservedInstancesListingList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesListing(entry, context);
    });
};
var deserializeAws_ec2ReservedInstancesModification = function (output, context) {
    var contents = {
        ClientToken: undefined,
        CreateDate: undefined,
        EffectiveDate: undefined,
        ModificationResults: undefined,
        ReservedInstancesIds: undefined,
        ReservedInstancesModificationId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        UpdateDate: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTime(output["createDate"]));
    }
    if (output["effectiveDate"] !== undefined) {
        contents.EffectiveDate = __expectNonNull(__parseRfc3339DateTime(output["effectiveDate"]));
    }
    if (output.modificationResultSet === "") {
        contents.ModificationResults = [];
    }
    else if (output["modificationResultSet"] !== undefined && output["modificationResultSet"]["item"] !== undefined) {
        contents.ModificationResults = deserializeAws_ec2ReservedInstancesModificationResultList(__getArrayIfSingleItem(output["modificationResultSet"]["item"]), context);
    }
    if (output.reservedInstancesSet === "") {
        contents.ReservedInstancesIds = [];
    }
    else if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
        contents.ReservedInstancesIds = deserializeAws_ec2ReservedIntancesIds(__getArrayIfSingleItem(output["reservedInstancesSet"]["item"]), context);
    }
    if (output["reservedInstancesModificationId"] !== undefined) {
        contents.ReservedInstancesModificationId = __expectString(output["reservedInstancesModificationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["updateDate"] !== undefined) {
        contents.UpdateDate = __expectNonNull(__parseRfc3339DateTime(output["updateDate"]));
    }
    return contents;
};
var deserializeAws_ec2ReservedInstancesModificationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesModification(entry, context);
    });
};
var deserializeAws_ec2ReservedInstancesModificationResult = function (output, context) {
    var contents = {
        ReservedInstancesId: undefined,
        TargetConfiguration: undefined,
    };
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    if (output["targetConfiguration"] !== undefined) {
        contents.TargetConfiguration = deserializeAws_ec2ReservedInstancesConfiguration(output["targetConfiguration"], context);
    }
    return contents;
};
var deserializeAws_ec2ReservedInstancesModificationResultList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesModificationResult(entry, context);
    });
};
var deserializeAws_ec2ReservedInstancesOffering = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        Duration: undefined,
        FixedPrice: undefined,
        InstanceType: undefined,
        ProductDescription: undefined,
        ReservedInstancesOfferingId: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        InstanceTenancy: undefined,
        Marketplace: undefined,
        OfferingClass: undefined,
        OfferingType: undefined,
        PricingDetails: undefined,
        RecurringCharges: undefined,
        Scope: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = __strictParseLong(output["duration"]);
    }
    if (output["fixedPrice"] !== undefined) {
        contents.FixedPrice = __strictParseFloat(output["fixedPrice"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["productDescription"]);
    }
    if (output["reservedInstancesOfferingId"] !== undefined) {
        contents.ReservedInstancesOfferingId = __expectString(output["reservedInstancesOfferingId"]);
    }
    if (output["usagePrice"] !== undefined) {
        contents.UsagePrice = __strictParseFloat(output["usagePrice"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["currencyCode"]);
    }
    if (output["instanceTenancy"] !== undefined) {
        contents.InstanceTenancy = __expectString(output["instanceTenancy"]);
    }
    if (output["marketplace"] !== undefined) {
        contents.Marketplace = __parseBoolean(output["marketplace"]);
    }
    if (output["offeringClass"] !== undefined) {
        contents.OfferingClass = __expectString(output["offeringClass"]);
    }
    if (output["offeringType"] !== undefined) {
        contents.OfferingType = __expectString(output["offeringType"]);
    }
    if (output.pricingDetailsSet === "") {
        contents.PricingDetails = [];
    }
    else if (output["pricingDetailsSet"] !== undefined && output["pricingDetailsSet"]["item"] !== undefined) {
        contents.PricingDetails = deserializeAws_ec2PricingDetailsList(__getArrayIfSingleItem(output["pricingDetailsSet"]["item"]), context);
    }
    if (output.recurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
        contents.RecurringCharges = deserializeAws_ec2RecurringChargesList(__getArrayIfSingleItem(output["recurringCharges"]["item"]), context);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = __expectString(output["scope"]);
    }
    return contents;
};
var deserializeAws_ec2ReservedInstancesOfferingList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesOffering(entry, context);
    });
};
var deserializeAws_ec2ReservedIntancesIds = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesId(entry, context);
    });
};
var deserializeAws_ec2ResetAddressAttributeResult = function (output, context) {
    var contents = {
        Address: undefined,
    };
    if (output["address"] !== undefined) {
        contents.Address = deserializeAws_ec2AddressAttribute(output["address"], context);
    }
    return contents;
};
var deserializeAws_ec2ResetEbsDefaultKmsKeyIdResult = function (output, context) {
    var contents = {
        KmsKeyId: undefined,
    };
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    return contents;
};
var deserializeAws_ec2ResetFpgaImageAttributeResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2ResourceStatement = function (output, context) {
    var contents = {
        Resources: undefined,
        ResourceTypes: undefined,
    };
    if (output.resourceSet === "") {
        contents.Resources = [];
    }
    else if (output["resourceSet"] !== undefined && output["resourceSet"]["item"] !== undefined) {
        contents.Resources = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["resourceSet"]["item"]), context);
    }
    if (output.resourceTypeSet === "") {
        contents.ResourceTypes = [];
    }
    else if (output["resourceTypeSet"] !== undefined && output["resourceTypeSet"]["item"] !== undefined) {
        contents.ResourceTypes = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["resourceTypeSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ResponseError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2ResponseHostIdList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2ResponseHostIdSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2ResponseLaunchTemplateData = function (output, context) {
    var contents = {
        KernelId: undefined,
        EbsOptimized: undefined,
        IamInstanceProfile: undefined,
        BlockDeviceMappings: undefined,
        NetworkInterfaces: undefined,
        ImageId: undefined,
        InstanceType: undefined,
        KeyName: undefined,
        Monitoring: undefined,
        Placement: undefined,
        RamDiskId: undefined,
        DisableApiTermination: undefined,
        InstanceInitiatedShutdownBehavior: undefined,
        UserData: undefined,
        TagSpecifications: undefined,
        ElasticGpuSpecifications: undefined,
        ElasticInferenceAccelerators: undefined,
        SecurityGroupIds: undefined,
        SecurityGroups: undefined,
        InstanceMarketOptions: undefined,
        CreditSpecification: undefined,
        CpuOptions: undefined,
        CapacityReservationSpecification: undefined,
        LicenseSpecifications: undefined,
        HibernationOptions: undefined,
        MetadataOptions: undefined,
        EnclaveOptions: undefined,
        InstanceRequirements: undefined,
        PrivateDnsNameOptions: undefined,
        MaintenanceOptions: undefined,
        DisableApiStop: undefined,
    };
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2LaunchTemplateIamInstanceProfileSpecification(output["iamInstanceProfile"], context);
    }
    if (output.blockDeviceMappingSet === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMappingSet"] !== undefined && output["blockDeviceMappingSet"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2LaunchTemplateBlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMappingSet"]["item"]), context);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2LaunchTemplatesMonitoring(output["monitoring"], context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2LaunchTemplatePlacement(output["placement"], context);
    }
    if (output["ramDiskId"] !== undefined) {
        contents.RamDiskId = __expectString(output["ramDiskId"]);
    }
    if (output["disableApiTermination"] !== undefined) {
        contents.DisableApiTermination = __parseBoolean(output["disableApiTermination"]);
    }
    if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
        contents.InstanceInitiatedShutdownBehavior = __expectString(output["instanceInitiatedShutdownBehavior"]);
    }
    if (output["userData"] !== undefined) {
        contents.UserData = __expectString(output["userData"]);
    }
    if (output.tagSpecificationSet === "") {
        contents.TagSpecifications = [];
    }
    else if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
        contents.TagSpecifications = deserializeAws_ec2LaunchTemplateTagSpecificationList(__getArrayIfSingleItem(output["tagSpecificationSet"]["item"]), context);
    }
    if (output.elasticGpuSpecificationSet === "") {
        contents.ElasticGpuSpecifications = [];
    }
    else if (output["elasticGpuSpecificationSet"] !== undefined &&
        output["elasticGpuSpecificationSet"]["item"] !== undefined) {
        contents.ElasticGpuSpecifications = deserializeAws_ec2ElasticGpuSpecificationResponseList(__getArrayIfSingleItem(output["elasticGpuSpecificationSet"]["item"]), context);
    }
    if (output.elasticInferenceAcceleratorSet === "") {
        contents.ElasticInferenceAccelerators = [];
    }
    else if (output["elasticInferenceAcceleratorSet"] !== undefined &&
        output["elasticInferenceAcceleratorSet"]["item"] !== undefined) {
        contents.ElasticInferenceAccelerators = deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponseList(__getArrayIfSingleItem(output["elasticInferenceAcceleratorSet"]["item"]), context);
    }
    if (output.securityGroupIdSet === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
        contents.SecurityGroupIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["securityGroupIdSet"]["item"]), context);
    }
    if (output.securityGroupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["securityGroupSet"]["item"]), context);
    }
    if (output["instanceMarketOptions"] !== undefined) {
        contents.InstanceMarketOptions = deserializeAws_ec2LaunchTemplateInstanceMarketOptions(output["instanceMarketOptions"], context);
    }
    if (output["creditSpecification"] !== undefined) {
        contents.CreditSpecification = deserializeAws_ec2CreditSpecification(output["creditSpecification"], context);
    }
    if (output["cpuOptions"] !== undefined) {
        contents.CpuOptions = deserializeAws_ec2LaunchTemplateCpuOptions(output["cpuOptions"], context);
    }
    if (output["capacityReservationSpecification"] !== undefined) {
        contents.CapacityReservationSpecification =
            deserializeAws_ec2LaunchTemplateCapacityReservationSpecificationResponse(output["capacityReservationSpecification"], context);
    }
    if (output.licenseSet === "") {
        contents.LicenseSpecifications = [];
    }
    else if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
        contents.LicenseSpecifications = deserializeAws_ec2LaunchTemplateLicenseList(__getArrayIfSingleItem(output["licenseSet"]["item"]), context);
    }
    if (output["hibernationOptions"] !== undefined) {
        contents.HibernationOptions = deserializeAws_ec2LaunchTemplateHibernationOptions(output["hibernationOptions"], context);
    }
    if (output["metadataOptions"] !== undefined) {
        contents.MetadataOptions = deserializeAws_ec2LaunchTemplateInstanceMetadataOptions(output["metadataOptions"], context);
    }
    if (output["enclaveOptions"] !== undefined) {
        contents.EnclaveOptions = deserializeAws_ec2LaunchTemplateEnclaveOptions(output["enclaveOptions"], context);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = deserializeAws_ec2InstanceRequirements(output["instanceRequirements"], context);
    }
    if (output["privateDnsNameOptions"] !== undefined) {
        contents.PrivateDnsNameOptions = deserializeAws_ec2LaunchTemplatePrivateDnsNameOptions(output["privateDnsNameOptions"], context);
    }
    if (output["maintenanceOptions"] !== undefined) {
        contents.MaintenanceOptions = deserializeAws_ec2LaunchTemplateInstanceMaintenanceOptions(output["maintenanceOptions"], context);
    }
    if (output["disableApiStop"] !== undefined) {
        contents.DisableApiStop = __parseBoolean(output["disableApiStop"]);
    }
    return contents;
};
var deserializeAws_ec2RestoreAddressToClassicResult = function (output, context) {
    var contents = {
        PublicIp: undefined,
        Status: undefined,
    };
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = __expectString(output["publicIp"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
var deserializeAws_ec2RestoreImageFromRecycleBinResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2RestoreManagedPrefixListVersionResult = function (output, context) {
    var contents = {
        PrefixList: undefined,
    };
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
var deserializeAws_ec2RestoreSnapshotFromRecycleBinResult = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        OutpostArn: undefined,
        Description: undefined,
        Encrypted: undefined,
        OwnerId: undefined,
        Progress: undefined,
        StartTime: undefined,
        State: undefined,
        VolumeId: undefined,
        VolumeSize: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTime(output["startTime"]));
    }
    if (output["status"] !== undefined) {
        contents.State = __expectString(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    return contents;
};
var deserializeAws_ec2RestoreSnapshotTierResult = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        RestoreStartTime: undefined,
        RestoreDuration: undefined,
        IsPermanentRestore: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["restoreStartTime"] !== undefined) {
        contents.RestoreStartTime = __expectNonNull(__parseRfc3339DateTime(output["restoreStartTime"]));
    }
    if (output["restoreDuration"] !== undefined) {
        contents.RestoreDuration = __strictParseInt32(output["restoreDuration"]);
    }
    if (output["isPermanentRestore"] !== undefined) {
        contents.IsPermanentRestore = __parseBoolean(output["isPermanentRestore"]);
    }
    return contents;
};
var deserializeAws_ec2RevokeClientVpnIngressResult = function (output, context) {
    var contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnAuthorizationRuleStatus(output["status"], context);
    }
    return contents;
};
var deserializeAws_ec2RevokeSecurityGroupEgressResult = function (output, context) {
    var contents = {
        Return: undefined,
        UnknownIpPermissions: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output.unknownIpPermissionSet === "") {
        contents.UnknownIpPermissions = [];
    }
    else if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
        contents.UnknownIpPermissions = deserializeAws_ec2IpPermissionList(__getArrayIfSingleItem(output["unknownIpPermissionSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2RevokeSecurityGroupIngressResult = function (output, context) {
    var contents = {
        Return: undefined,
        UnknownIpPermissions: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    if (output.unknownIpPermissionSet === "") {
        contents.UnknownIpPermissions = [];
    }
    else if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
        contents.UnknownIpPermissions = deserializeAws_ec2IpPermissionList(__getArrayIfSingleItem(output["unknownIpPermissionSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2RootDeviceTypeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2Route = function (output, context) {
    var contents = {
        DestinationCidrBlock: undefined,
        DestinationIpv6CidrBlock: undefined,
        DestinationPrefixListId: undefined,
        EgressOnlyInternetGatewayId: undefined,
        GatewayId: undefined,
        InstanceId: undefined,
        InstanceOwnerId: undefined,
        NatGatewayId: undefined,
        TransitGatewayId: undefined,
        LocalGatewayId: undefined,
        CarrierGatewayId: undefined,
        NetworkInterfaceId: undefined,
        Origin: undefined,
        State: undefined,
        VpcPeeringConnectionId: undefined,
        CoreNetworkArn: undefined,
    };
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["destinationIpv6CidrBlock"] !== undefined) {
        contents.DestinationIpv6CidrBlock = __expectString(output["destinationIpv6CidrBlock"]);
    }
    if (output["destinationPrefixListId"] !== undefined) {
        contents.DestinationPrefixListId = __expectString(output["destinationPrefixListId"]);
    }
    if (output["egressOnlyInternetGatewayId"] !== undefined) {
        contents.EgressOnlyInternetGatewayId = __expectString(output["egressOnlyInternetGatewayId"]);
    }
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = __expectString(output["gatewayId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["instanceOwnerId"] !== undefined) {
        contents.InstanceOwnerId = __expectString(output["instanceOwnerId"]);
    }
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = __expectString(output["natGatewayId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = __expectString(output["localGatewayId"]);
    }
    if (output["carrierGatewayId"] !== undefined) {
        contents.CarrierGatewayId = __expectString(output["carrierGatewayId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["origin"] !== undefined) {
        contents.Origin = __expectString(output["origin"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    if (output["coreNetworkArn"] !== undefined) {
        contents.CoreNetworkArn = __expectString(output["coreNetworkArn"]);
    }
    return contents;
};
var deserializeAws_ec2RouteList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Route(entry, context);
    });
};
var deserializeAws_ec2RouteTable = function (output, context) {
    var contents = {
        Associations: undefined,
        PropagatingVgws: undefined,
        RouteTableId: undefined,
        Routes: undefined,
        Tags: undefined,
        VpcId: undefined,
        OwnerId: undefined,
    };
    if (output.associationSet === "") {
        contents.Associations = [];
    }
    else if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
        contents.Associations = deserializeAws_ec2RouteTableAssociationList(__getArrayIfSingleItem(output["associationSet"]["item"]), context);
    }
    if (output.propagatingVgwSet === "") {
        contents.PropagatingVgws = [];
    }
    else if (output["propagatingVgwSet"] !== undefined && output["propagatingVgwSet"]["item"] !== undefined) {
        contents.PropagatingVgws = deserializeAws_ec2PropagatingVgwList(__getArrayIfSingleItem(output["propagatingVgwSet"]["item"]), context);
    }
    if (output["routeTableId"] !== undefined) {
        contents.RouteTableId = __expectString(output["routeTableId"]);
    }
    if (output.routeSet === "") {
        contents.Routes = [];
    }
    else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2RouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    return contents;
};
var deserializeAws_ec2RouteTableAssociation = function (output, context) {
    var contents = {
        Main: undefined,
        RouteTableAssociationId: undefined,
        RouteTableId: undefined,
        SubnetId: undefined,
        GatewayId: undefined,
        AssociationState: undefined,
    };
    if (output["main"] !== undefined) {
        contents.Main = __parseBoolean(output["main"]);
    }
    if (output["routeTableAssociationId"] !== undefined) {
        contents.RouteTableAssociationId = __expectString(output["routeTableAssociationId"]);
    }
    if (output["routeTableId"] !== undefined) {
        contents.RouteTableId = __expectString(output["routeTableId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = __expectString(output["gatewayId"]);
    }
    if (output["associationState"] !== undefined) {
        contents.AssociationState = deserializeAws_ec2RouteTableAssociationState(output["associationState"], context);
    }
    return contents;
};
var deserializeAws_ec2RouteTableAssociationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2RouteTableAssociation(entry, context);
    });
};
var deserializeAws_ec2RouteTableAssociationState = function (output, context) {
    var contents = {
        State: undefined,
        StatusMessage: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    return contents;
};
var deserializeAws_ec2RouteTableList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2RouteTable(entry, context);
    });
};
var deserializeAws_ec2RunInstancesMonitoringEnabled = function (output, context) {
    var contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
var deserializeAws_ec2RunScheduledInstancesResult = function (output, context) {
    var contents = {
        InstanceIdSet: undefined,
    };
    if (output.instanceIdSet === "") {
        contents.InstanceIdSet = [];
    }
    else if (output["instanceIdSet"] !== undefined && output["instanceIdSet"]["item"] !== undefined) {
        contents.InstanceIdSet = deserializeAws_ec2InstanceIdSet(__getArrayIfSingleItem(output["instanceIdSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2S3Storage = function (output, context) {
    var contents = {
        AWSAccessKeyId: undefined,
        Bucket: undefined,
        Prefix: undefined,
        UploadPolicy: undefined,
        UploadPolicySignature: undefined,
    };
    if (output["AWSAccessKeyId"] !== undefined) {
        contents.AWSAccessKeyId = __expectString(output["AWSAccessKeyId"]);
    }
    if (output["bucket"] !== undefined) {
        contents.Bucket = __expectString(output["bucket"]);
    }
    if (output["prefix"] !== undefined) {
        contents.Prefix = __expectString(output["prefix"]);
    }
    if (output["uploadPolicy"] !== undefined) {
        contents.UploadPolicy = context.base64Decoder(output["uploadPolicy"]);
    }
    if (output["uploadPolicySignature"] !== undefined) {
        contents.UploadPolicySignature = __expectString(output["uploadPolicySignature"]);
    }
    return contents;
};
var deserializeAws_ec2ScheduledInstance = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        CreateDate: undefined,
        HourlyPrice: undefined,
        InstanceCount: undefined,
        InstanceType: undefined,
        NetworkPlatform: undefined,
        NextSlotStartTime: undefined,
        Platform: undefined,
        PreviousSlotEndTime: undefined,
        Recurrence: undefined,
        ScheduledInstanceId: undefined,
        SlotDurationInHours: undefined,
        TermEndDate: undefined,
        TermStartDate: undefined,
        TotalScheduledInstanceHours: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = __expectNonNull(__parseRfc3339DateTime(output["createDate"]));
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["networkPlatform"] !== undefined) {
        contents.NetworkPlatform = __expectString(output["networkPlatform"]);
    }
    if (output["nextSlotStartTime"] !== undefined) {
        contents.NextSlotStartTime = __expectNonNull(__parseRfc3339DateTime(output["nextSlotStartTime"]));
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["previousSlotEndTime"] !== undefined) {
        contents.PreviousSlotEndTime = __expectNonNull(__parseRfc3339DateTime(output["previousSlotEndTime"]));
    }
    if (output["recurrence"] !== undefined) {
        contents.Recurrence = deserializeAws_ec2ScheduledInstanceRecurrence(output["recurrence"], context);
    }
    if (output["scheduledInstanceId"] !== undefined) {
        contents.ScheduledInstanceId = __expectString(output["scheduledInstanceId"]);
    }
    if (output["slotDurationInHours"] !== undefined) {
        contents.SlotDurationInHours = __strictParseInt32(output["slotDurationInHours"]);
    }
    if (output["termEndDate"] !== undefined) {
        contents.TermEndDate = __expectNonNull(__parseRfc3339DateTime(output["termEndDate"]));
    }
    if (output["termStartDate"] !== undefined) {
        contents.TermStartDate = __expectNonNull(__parseRfc3339DateTime(output["termStartDate"]));
    }
    if (output["totalScheduledInstanceHours"] !== undefined) {
        contents.TotalScheduledInstanceHours = __strictParseInt32(output["totalScheduledInstanceHours"]);
    }
    return contents;
};
var deserializeAws_ec2ScheduledInstanceAvailability = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        AvailableInstanceCount: undefined,
        FirstSlotStartTime: undefined,
        HourlyPrice: undefined,
        InstanceType: undefined,
        MaxTermDurationInDays: undefined,
        MinTermDurationInDays: undefined,
        NetworkPlatform: undefined,
        Platform: undefined,
        PurchaseToken: undefined,
        Recurrence: undefined,
        SlotDurationInHours: undefined,
        TotalScheduledInstanceHours: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["availableInstanceCount"] !== undefined) {
        contents.AvailableInstanceCount = __strictParseInt32(output["availableInstanceCount"]);
    }
    if (output["firstSlotStartTime"] !== undefined) {
        contents.FirstSlotStartTime = __expectNonNull(__parseRfc3339DateTime(output["firstSlotStartTime"]));
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = __expectString(output["hourlyPrice"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["maxTermDurationInDays"] !== undefined) {
        contents.MaxTermDurationInDays = __strictParseInt32(output["maxTermDurationInDays"]);
    }
    if (output["minTermDurationInDays"] !== undefined) {
        contents.MinTermDurationInDays = __strictParseInt32(output["minTermDurationInDays"]);
    }
    if (output["networkPlatform"] !== undefined) {
        contents.NetworkPlatform = __expectString(output["networkPlatform"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["purchaseToken"] !== undefined) {
        contents.PurchaseToken = __expectString(output["purchaseToken"]);
    }
    if (output["recurrence"] !== undefined) {
        contents.Recurrence = deserializeAws_ec2ScheduledInstanceRecurrence(output["recurrence"], context);
    }
    if (output["slotDurationInHours"] !== undefined) {
        contents.SlotDurationInHours = __strictParseInt32(output["slotDurationInHours"]);
    }
    if (output["totalScheduledInstanceHours"] !== undefined) {
        contents.TotalScheduledInstanceHours = __strictParseInt32(output["totalScheduledInstanceHours"]);
    }
    return contents;
};
var deserializeAws_ec2ScheduledInstanceAvailabilitySet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ScheduledInstanceAvailability(entry, context);
    });
};
var deserializeAws_ec2ScheduledInstanceRecurrence = function (output, context) {
    var contents = {
        Frequency: undefined,
        Interval: undefined,
        OccurrenceDaySet: undefined,
        OccurrenceRelativeToEnd: undefined,
        OccurrenceUnit: undefined,
    };
    if (output["frequency"] !== undefined) {
        contents.Frequency = __expectString(output["frequency"]);
    }
    if (output["interval"] !== undefined) {
        contents.Interval = __strictParseInt32(output["interval"]);
    }
    if (output.occurrenceDaySet === "") {
        contents.OccurrenceDaySet = [];
    }
    else if (output["occurrenceDaySet"] !== undefined && output["occurrenceDaySet"]["item"] !== undefined) {
        contents.OccurrenceDaySet = deserializeAws_ec2OccurrenceDaySet(__getArrayIfSingleItem(output["occurrenceDaySet"]["item"]), context);
    }
    if (output["occurrenceRelativeToEnd"] !== undefined) {
        contents.OccurrenceRelativeToEnd = __parseBoolean(output["occurrenceRelativeToEnd"]);
    }
    if (output["occurrenceUnit"] !== undefined) {
        contents.OccurrenceUnit = __expectString(output["occurrenceUnit"]);
    }
    return contents;
};
var deserializeAws_ec2ScheduledInstanceSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ScheduledInstance(entry, context);
    });
};
var deserializeAws_ec2SearchLocalGatewayRoutesResult = function (output, context) {
    var contents = {
        Routes: undefined,
        NextToken: undefined,
    };
    if (output.routeSet === "") {
        contents.Routes = [];
    }
    else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2LocalGatewayRouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2SearchTransitGatewayMulticastGroupsResult = function (output, context) {
    var contents = {
        MulticastGroups: undefined,
        NextToken: undefined,
    };
    if (output.multicastGroups === "") {
        contents.MulticastGroups = [];
    }
    else if (output["multicastGroups"] !== undefined && output["multicastGroups"]["item"] !== undefined) {
        contents.MulticastGroups = deserializeAws_ec2TransitGatewayMulticastGroupList(__getArrayIfSingleItem(output["multicastGroups"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = __expectString(output["nextToken"]);
    }
    return contents;
};
var deserializeAws_ec2SearchTransitGatewayRoutesResult = function (output, context) {
    var contents = {
        Routes: undefined,
        AdditionalRoutesAvailable: undefined,
    };
    if (output.routeSet === "") {
        contents.Routes = [];
    }
    else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2TransitGatewayRouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
    }
    if (output["additionalRoutesAvailable"] !== undefined) {
        contents.AdditionalRoutesAvailable = __parseBoolean(output["additionalRoutesAvailable"]);
    }
    return contents;
};
var deserializeAws_ec2SecurityGroup = function (output, context) {
    var contents = {
        Description: undefined,
        GroupName: undefined,
        IpPermissions: undefined,
        OwnerId: undefined,
        GroupId: undefined,
        IpPermissionsEgress: undefined,
        Tags: undefined,
        VpcId: undefined,
    };
    if (output["groupDescription"] !== undefined) {
        contents.Description = __expectString(output["groupDescription"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output.ipPermissions === "") {
        contents.IpPermissions = [];
    }
    else if (output["ipPermissions"] !== undefined && output["ipPermissions"]["item"] !== undefined) {
        contents.IpPermissions = deserializeAws_ec2IpPermissionList(__getArrayIfSingleItem(output["ipPermissions"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output.ipPermissionsEgress === "") {
        contents.IpPermissionsEgress = [];
    }
    else if (output["ipPermissionsEgress"] !== undefined && output["ipPermissionsEgress"]["item"] !== undefined) {
        contents.IpPermissionsEgress = deserializeAws_ec2IpPermissionList(__getArrayIfSingleItem(output["ipPermissionsEgress"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2SecurityGroupIdentifier = function (output, context) {
    var contents = {
        GroupId: undefined,
        GroupName: undefined,
    };
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    return contents;
};
var deserializeAws_ec2SecurityGroupIdStringList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2SecurityGroupList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SecurityGroup(entry, context);
    });
};
var deserializeAws_ec2SecurityGroupReference = function (output, context) {
    var contents = {
        GroupId: undefined,
        ReferencingVpcId: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["referencingVpcId"] !== undefined) {
        contents.ReferencingVpcId = __expectString(output["referencingVpcId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
var deserializeAws_ec2SecurityGroupReferences = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SecurityGroupReference(entry, context);
    });
};
var deserializeAws_ec2SecurityGroupRule = function (output, context) {
    var contents = {
        SecurityGroupRuleId: undefined,
        GroupId: undefined,
        GroupOwnerId: undefined,
        IsEgress: undefined,
        IpProtocol: undefined,
        FromPort: undefined,
        ToPort: undefined,
        CidrIpv4: undefined,
        CidrIpv6: undefined,
        PrefixListId: undefined,
        ReferencedGroupInfo: undefined,
        Description: undefined,
        Tags: undefined,
    };
    if (output["securityGroupRuleId"] !== undefined) {
        contents.SecurityGroupRuleId = __expectString(output["securityGroupRuleId"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["groupOwnerId"] !== undefined) {
        contents.GroupOwnerId = __expectString(output["groupOwnerId"]);
    }
    if (output["isEgress"] !== undefined) {
        contents.IsEgress = __parseBoolean(output["isEgress"]);
    }
    if (output["ipProtocol"] !== undefined) {
        contents.IpProtocol = __expectString(output["ipProtocol"]);
    }
    if (output["fromPort"] !== undefined) {
        contents.FromPort = __strictParseInt32(output["fromPort"]);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = __strictParseInt32(output["toPort"]);
    }
    if (output["cidrIpv4"] !== undefined) {
        contents.CidrIpv4 = __expectString(output["cidrIpv4"]);
    }
    if (output["cidrIpv6"] !== undefined) {
        contents.CidrIpv6 = __expectString(output["cidrIpv6"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["referencedGroupInfo"] !== undefined) {
        contents.ReferencedGroupInfo = deserializeAws_ec2ReferencedSecurityGroup(output["referencedGroupInfo"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2SecurityGroupRuleList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SecurityGroupRule(entry, context);
    });
};
var deserializeAws_ec2ServiceConfiguration = function (output, context) {
    var contents = {
        ServiceType: undefined,
        ServiceId: undefined,
        ServiceName: undefined,
        ServiceState: undefined,
        AvailabilityZones: undefined,
        AcceptanceRequired: undefined,
        ManagesVpcEndpoints: undefined,
        NetworkLoadBalancerArns: undefined,
        GatewayLoadBalancerArns: undefined,
        SupportedIpAddressTypes: undefined,
        BaseEndpointDnsNames: undefined,
        PrivateDnsName: undefined,
        PrivateDnsNameConfiguration: undefined,
        PayerResponsibility: undefined,
        Tags: undefined,
    };
    if (output.serviceType === "") {
        contents.ServiceType = [];
    }
    else if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
        contents.ServiceType = deserializeAws_ec2ServiceTypeDetailSet(__getArrayIfSingleItem(output["serviceType"]["item"]), context);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = __expectString(output["serviceName"]);
    }
    if (output["serviceState"] !== undefined) {
        contents.ServiceState = __expectString(output["serviceState"]);
    }
    if (output.availabilityZoneSet === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["availabilityZoneSet"]["item"]), context);
    }
    if (output["acceptanceRequired"] !== undefined) {
        contents.AcceptanceRequired = __parseBoolean(output["acceptanceRequired"]);
    }
    if (output["managesVpcEndpoints"] !== undefined) {
        contents.ManagesVpcEndpoints = __parseBoolean(output["managesVpcEndpoints"]);
    }
    if (output.networkLoadBalancerArnSet === "") {
        contents.NetworkLoadBalancerArns = [];
    }
    else if (output["networkLoadBalancerArnSet"] !== undefined &&
        output["networkLoadBalancerArnSet"]["item"] !== undefined) {
        contents.NetworkLoadBalancerArns = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["networkLoadBalancerArnSet"]["item"]), context);
    }
    if (output.gatewayLoadBalancerArnSet === "") {
        contents.GatewayLoadBalancerArns = [];
    }
    else if (output["gatewayLoadBalancerArnSet"] !== undefined &&
        output["gatewayLoadBalancerArnSet"]["item"] !== undefined) {
        contents.GatewayLoadBalancerArns = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["gatewayLoadBalancerArnSet"]["item"]), context);
    }
    if (output.supportedIpAddressTypeSet === "") {
        contents.SupportedIpAddressTypes = [];
    }
    else if (output["supportedIpAddressTypeSet"] !== undefined &&
        output["supportedIpAddressTypeSet"]["item"] !== undefined) {
        contents.SupportedIpAddressTypes = deserializeAws_ec2SupportedIpAddressTypes(__getArrayIfSingleItem(output["supportedIpAddressTypeSet"]["item"]), context);
    }
    if (output.baseEndpointDnsNameSet === "") {
        contents.BaseEndpointDnsNames = [];
    }
    else if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
        contents.BaseEndpointDnsNames = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["baseEndpointDnsNameSet"]["item"]), context);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output["privateDnsNameConfiguration"] !== undefined) {
        contents.PrivateDnsNameConfiguration = deserializeAws_ec2PrivateDnsNameConfiguration(output["privateDnsNameConfiguration"], context);
    }
    if (output["payerResponsibility"] !== undefined) {
        contents.PayerResponsibility = __expectString(output["payerResponsibility"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ServiceConfigurationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ServiceConfiguration(entry, context);
    });
};
var deserializeAws_ec2ServiceDetail = function (output, context) {
    var contents = {
        ServiceName: undefined,
        ServiceId: undefined,
        ServiceType: undefined,
        AvailabilityZones: undefined,
        Owner: undefined,
        BaseEndpointDnsNames: undefined,
        PrivateDnsName: undefined,
        PrivateDnsNames: undefined,
        VpcEndpointPolicySupported: undefined,
        AcceptanceRequired: undefined,
        ManagesVpcEndpoints: undefined,
        PayerResponsibility: undefined,
        Tags: undefined,
        PrivateDnsNameVerificationState: undefined,
        SupportedIpAddressTypes: undefined,
    };
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = __expectString(output["serviceName"]);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    if (output.serviceType === "") {
        contents.ServiceType = [];
    }
    else if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
        contents.ServiceType = deserializeAws_ec2ServiceTypeDetailSet(__getArrayIfSingleItem(output["serviceType"]["item"]), context);
    }
    if (output.availabilityZoneSet === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["availabilityZoneSet"]["item"]), context);
    }
    if (output["owner"] !== undefined) {
        contents.Owner = __expectString(output["owner"]);
    }
    if (output.baseEndpointDnsNameSet === "") {
        contents.BaseEndpointDnsNames = [];
    }
    else if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
        contents.BaseEndpointDnsNames = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["baseEndpointDnsNameSet"]["item"]), context);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = __expectString(output["privateDnsName"]);
    }
    if (output.privateDnsNameSet === "") {
        contents.PrivateDnsNames = [];
    }
    else if (output["privateDnsNameSet"] !== undefined && output["privateDnsNameSet"]["item"] !== undefined) {
        contents.PrivateDnsNames = deserializeAws_ec2PrivateDnsDetailsSet(__getArrayIfSingleItem(output["privateDnsNameSet"]["item"]), context);
    }
    if (output["vpcEndpointPolicySupported"] !== undefined) {
        contents.VpcEndpointPolicySupported = __parseBoolean(output["vpcEndpointPolicySupported"]);
    }
    if (output["acceptanceRequired"] !== undefined) {
        contents.AcceptanceRequired = __parseBoolean(output["acceptanceRequired"]);
    }
    if (output["managesVpcEndpoints"] !== undefined) {
        contents.ManagesVpcEndpoints = __parseBoolean(output["managesVpcEndpoints"]);
    }
    if (output["payerResponsibility"] !== undefined) {
        contents.PayerResponsibility = __expectString(output["payerResponsibility"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["privateDnsNameVerificationState"] !== undefined) {
        contents.PrivateDnsNameVerificationState = __expectString(output["privateDnsNameVerificationState"]);
    }
    if (output.supportedIpAddressTypeSet === "") {
        contents.SupportedIpAddressTypes = [];
    }
    else if (output["supportedIpAddressTypeSet"] !== undefined &&
        output["supportedIpAddressTypeSet"]["item"] !== undefined) {
        contents.SupportedIpAddressTypes = deserializeAws_ec2SupportedIpAddressTypes(__getArrayIfSingleItem(output["supportedIpAddressTypeSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ServiceDetailSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ServiceDetail(entry, context);
    });
};
var deserializeAws_ec2ServiceTypeDetail = function (output, context) {
    var contents = {
        ServiceType: undefined,
    };
    if (output["serviceType"] !== undefined) {
        contents.ServiceType = __expectString(output["serviceType"]);
    }
    return contents;
};
var deserializeAws_ec2ServiceTypeDetailSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ServiceTypeDetail(entry, context);
    });
};
var deserializeAws_ec2Snapshot = function (output, context) {
    var contents = {
        DataEncryptionKeyId: undefined,
        Description: undefined,
        Encrypted: undefined,
        KmsKeyId: undefined,
        OwnerId: undefined,
        Progress: undefined,
        SnapshotId: undefined,
        StartTime: undefined,
        State: undefined,
        StateMessage: undefined,
        VolumeId: undefined,
        VolumeSize: undefined,
        OwnerAlias: undefined,
        OutpostArn: undefined,
        Tags: undefined,
        StorageTier: undefined,
        RestoreExpiryTime: undefined,
    };
    if (output["dataEncryptionKeyId"] !== undefined) {
        contents.DataEncryptionKeyId = __expectString(output["dataEncryptionKeyId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTime(output["startTime"]));
    }
    if (output["status"] !== undefined) {
        contents.State = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StateMessage = __expectString(output["statusMessage"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = __expectString(output["ownerAlias"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["storageTier"] !== undefined) {
        contents.StorageTier = __expectString(output["storageTier"]);
    }
    if (output["restoreExpiryTime"] !== undefined) {
        contents.RestoreExpiryTime = __expectNonNull(__parseRfc3339DateTime(output["restoreExpiryTime"]));
    }
    return contents;
};
var deserializeAws_ec2SnapshotDetail = function (output, context) {
    var contents = {
        Description: undefined,
        DeviceName: undefined,
        DiskImageSize: undefined,
        Format: undefined,
        Progress: undefined,
        SnapshotId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Url: undefined,
        UserBucket: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = __expectString(output["deviceName"]);
    }
    if (output["diskImageSize"] !== undefined) {
        contents.DiskImageSize = __strictParseFloat(output["diskImageSize"]);
    }
    if (output["format"] !== undefined) {
        contents.Format = __expectString(output["format"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["url"] !== undefined) {
        contents.Url = __expectString(output["url"]);
    }
    if (output["userBucket"] !== undefined) {
        contents.UserBucket = deserializeAws_ec2UserBucketDetails(output["userBucket"], context);
    }
    return contents;
};
var deserializeAws_ec2SnapshotDetailList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SnapshotDetail(entry, context);
    });
};
var deserializeAws_ec2SnapshotInfo = function (output, context) {
    var contents = {
        Description: undefined,
        Tags: undefined,
        Encrypted: undefined,
        VolumeId: undefined,
        State: undefined,
        VolumeSize: undefined,
        StartTime: undefined,
        Progress: undefined,
        OwnerId: undefined,
        SnapshotId: undefined,
        OutpostArn: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = __strictParseInt32(output["volumeSize"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTime(output["startTime"]));
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    return contents;
};
var deserializeAws_ec2SnapshotList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Snapshot(entry, context);
    });
};
var deserializeAws_ec2SnapshotRecycleBinInfo = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        RecycleBinEnterTime: undefined,
        RecycleBinExitTime: undefined,
        Description: undefined,
        VolumeId: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["recycleBinEnterTime"] !== undefined) {
        contents.RecycleBinEnterTime = __expectNonNull(__parseRfc3339DateTime(output["recycleBinEnterTime"]));
    }
    if (output["recycleBinExitTime"] !== undefined) {
        contents.RecycleBinExitTime = __expectNonNull(__parseRfc3339DateTime(output["recycleBinExitTime"]));
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    return contents;
};
var deserializeAws_ec2SnapshotRecycleBinInfoList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SnapshotRecycleBinInfo(entry, context);
    });
};
var deserializeAws_ec2SnapshotSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SnapshotInfo(entry, context);
    });
};
var deserializeAws_ec2SnapshotTaskDetail = function (output, context) {
    var contents = {
        Description: undefined,
        DiskImageSize: undefined,
        Encrypted: undefined,
        Format: undefined,
        KmsKeyId: undefined,
        Progress: undefined,
        SnapshotId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Url: undefined,
        UserBucket: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["diskImageSize"] !== undefined) {
        contents.DiskImageSize = __strictParseFloat(output["diskImageSize"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["format"] !== undefined) {
        contents.Format = __expectString(output["format"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __expectString(output["progress"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["url"] !== undefined) {
        contents.Url = __expectString(output["url"]);
    }
    if (output["userBucket"] !== undefined) {
        contents.UserBucket = deserializeAws_ec2UserBucketDetails(output["userBucket"], context);
    }
    return contents;
};
var deserializeAws_ec2SnapshotTierStatus = function (output, context) {
    var contents = {
        SnapshotId: undefined,
        VolumeId: undefined,
        Status: undefined,
        OwnerId: undefined,
        Tags: undefined,
        StorageTier: undefined,
        LastTieringStartTime: undefined,
        LastTieringProgress: undefined,
        LastTieringOperationStatus: undefined,
        LastTieringOperationStatusDetail: undefined,
        ArchivalCompleteTime: undefined,
        RestoreExpiryTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["storageTier"] !== undefined) {
        contents.StorageTier = __expectString(output["storageTier"]);
    }
    if (output["lastTieringStartTime"] !== undefined) {
        contents.LastTieringStartTime = __expectNonNull(__parseRfc3339DateTime(output["lastTieringStartTime"]));
    }
    if (output["lastTieringProgress"] !== undefined) {
        contents.LastTieringProgress = __strictParseInt32(output["lastTieringProgress"]);
    }
    if (output["lastTieringOperationStatus"] !== undefined) {
        contents.LastTieringOperationStatus = __expectString(output["lastTieringOperationStatus"]);
    }
    if (output["lastTieringOperationStatusDetail"] !== undefined) {
        contents.LastTieringOperationStatusDetail = __expectString(output["lastTieringOperationStatusDetail"]);
    }
    if (output["archivalCompleteTime"] !== undefined) {
        contents.ArchivalCompleteTime = __expectNonNull(__parseRfc3339DateTime(output["archivalCompleteTime"]));
    }
    if (output["restoreExpiryTime"] !== undefined) {
        contents.RestoreExpiryTime = __expectNonNull(__parseRfc3339DateTime(output["restoreExpiryTime"]));
    }
    return contents;
};
var deserializeAws_ec2snapshotTierStatusSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SnapshotTierStatus(entry, context);
    });
};
var deserializeAws_ec2SpotCapacityRebalance = function (output, context) {
    var contents = {
        ReplacementStrategy: undefined,
        TerminationDelay: undefined,
    };
    if (output["replacementStrategy"] !== undefined) {
        contents.ReplacementStrategy = __expectString(output["replacementStrategy"]);
    }
    if (output["terminationDelay"] !== undefined) {
        contents.TerminationDelay = __strictParseInt32(output["terminationDelay"]);
    }
    return contents;
};
var deserializeAws_ec2SpotDatafeedSubscription = function (output, context) {
    var contents = {
        Bucket: undefined,
        Fault: undefined,
        OwnerId: undefined,
        Prefix: undefined,
        State: undefined,
    };
    if (output["bucket"] !== undefined) {
        contents.Bucket = __expectString(output["bucket"]);
    }
    if (output["fault"] !== undefined) {
        contents.Fault = deserializeAws_ec2SpotInstanceStateFault(output["fault"], context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["prefix"] !== undefined) {
        contents.Prefix = __expectString(output["prefix"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2SpotFleetLaunchSpecification = function (output, context) {
    var contents = {
        SecurityGroups: undefined,
        AddressingType: undefined,
        BlockDeviceMappings: undefined,
        EbsOptimized: undefined,
        IamInstanceProfile: undefined,
        ImageId: undefined,
        InstanceType: undefined,
        KernelId: undefined,
        KeyName: undefined,
        Monitoring: undefined,
        NetworkInterfaces: undefined,
        Placement: undefined,
        RamdiskId: undefined,
        SpotPrice: undefined,
        SubnetId: undefined,
        UserData: undefined,
        WeightedCapacity: undefined,
        TagSpecifications: undefined,
        InstanceRequirements: undefined,
    };
    if (output.groupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["addressingType"] !== undefined) {
        contents.AddressingType = __expectString(output["addressingType"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList(__getArrayIfSingleItem(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfileSpecification(output["iamInstanceProfile"], context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = __expectString(output["imageId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = __expectString(output["kernelId"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = __expectString(output["keyName"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2SpotFleetMonitoring(output["monitoring"], context);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2InstanceNetworkInterfaceSpecificationList(__getArrayIfSingleItem(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2SpotPlacement(output["placement"], context);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = __expectString(output["ramdiskId"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["userData"] !== undefined) {
        contents.UserData = __expectString(output["userData"]);
    }
    if (output["weightedCapacity"] !== undefined) {
        contents.WeightedCapacity = __strictParseFloat(output["weightedCapacity"]);
    }
    if (output.tagSpecificationSet === "") {
        contents.TagSpecifications = [];
    }
    else if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
        contents.TagSpecifications = deserializeAws_ec2SpotFleetTagSpecificationList(__getArrayIfSingleItem(output["tagSpecificationSet"]["item"]), context);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = deserializeAws_ec2InstanceRequirements(output["instanceRequirements"], context);
    }
    return contents;
};
var deserializeAws_ec2SpotFleetMonitoring = function (output, context) {
    var contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["enabled"]);
    }
    return contents;
};
var deserializeAws_ec2SpotFleetRequestConfig = function (output, context) {
    var contents = {
        ActivityStatus: undefined,
        CreateTime: undefined,
        SpotFleetRequestConfig: undefined,
        SpotFleetRequestId: undefined,
        SpotFleetRequestState: undefined,
        Tags: undefined,
    };
    if (output["activityStatus"] !== undefined) {
        contents.ActivityStatus = __expectString(output["activityStatus"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["spotFleetRequestConfig"] !== undefined) {
        contents.SpotFleetRequestConfig = deserializeAws_ec2SpotFleetRequestConfigData(output["spotFleetRequestConfig"], context);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
    }
    if (output["spotFleetRequestState"] !== undefined) {
        contents.SpotFleetRequestState = __expectString(output["spotFleetRequestState"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2SpotFleetRequestConfigData = function (output, context) {
    var contents = {
        AllocationStrategy: undefined,
        OnDemandAllocationStrategy: undefined,
        SpotMaintenanceStrategies: undefined,
        ClientToken: undefined,
        ExcessCapacityTerminationPolicy: undefined,
        FulfilledCapacity: undefined,
        OnDemandFulfilledCapacity: undefined,
        IamFleetRole: undefined,
        LaunchSpecifications: undefined,
        LaunchTemplateConfigs: undefined,
        SpotPrice: undefined,
        TargetCapacity: undefined,
        OnDemandTargetCapacity: undefined,
        OnDemandMaxTotalPrice: undefined,
        SpotMaxTotalPrice: undefined,
        TerminateInstancesWithExpiration: undefined,
        Type: undefined,
        ValidFrom: undefined,
        ValidUntil: undefined,
        ReplaceUnhealthyInstances: undefined,
        InstanceInterruptionBehavior: undefined,
        LoadBalancersConfig: undefined,
        InstancePoolsToUseCount: undefined,
        Context: undefined,
        TargetCapacityUnitType: undefined,
        TagSpecifications: undefined,
    };
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output["onDemandAllocationStrategy"] !== undefined) {
        contents.OnDemandAllocationStrategy = __expectString(output["onDemandAllocationStrategy"]);
    }
    if (output["spotMaintenanceStrategies"] !== undefined) {
        contents.SpotMaintenanceStrategies = deserializeAws_ec2SpotMaintenanceStrategies(output["spotMaintenanceStrategies"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = __expectString(output["clientToken"]);
    }
    if (output["excessCapacityTerminationPolicy"] !== undefined) {
        contents.ExcessCapacityTerminationPolicy = __expectString(output["excessCapacityTerminationPolicy"]);
    }
    if (output["fulfilledCapacity"] !== undefined) {
        contents.FulfilledCapacity = __strictParseFloat(output["fulfilledCapacity"]);
    }
    if (output["onDemandFulfilledCapacity"] !== undefined) {
        contents.OnDemandFulfilledCapacity = __strictParseFloat(output["onDemandFulfilledCapacity"]);
    }
    if (output["iamFleetRole"] !== undefined) {
        contents.IamFleetRole = __expectString(output["iamFleetRole"]);
    }
    if (output.launchSpecifications === "") {
        contents.LaunchSpecifications = [];
    }
    else if (output["launchSpecifications"] !== undefined && output["launchSpecifications"]["item"] !== undefined) {
        contents.LaunchSpecifications = deserializeAws_ec2LaunchSpecsList(__getArrayIfSingleItem(output["launchSpecifications"]["item"]), context);
    }
    if (output.launchTemplateConfigs === "") {
        contents.LaunchTemplateConfigs = [];
    }
    else if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
        contents.LaunchTemplateConfigs = deserializeAws_ec2LaunchTemplateConfigList(__getArrayIfSingleItem(output["launchTemplateConfigs"]["item"]), context);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["targetCapacity"] !== undefined) {
        contents.TargetCapacity = __strictParseInt32(output["targetCapacity"]);
    }
    if (output["onDemandTargetCapacity"] !== undefined) {
        contents.OnDemandTargetCapacity = __strictParseInt32(output["onDemandTargetCapacity"]);
    }
    if (output["onDemandMaxTotalPrice"] !== undefined) {
        contents.OnDemandMaxTotalPrice = __expectString(output["onDemandMaxTotalPrice"]);
    }
    if (output["spotMaxTotalPrice"] !== undefined) {
        contents.SpotMaxTotalPrice = __expectString(output["spotMaxTotalPrice"]);
    }
    if (output["terminateInstancesWithExpiration"] !== undefined) {
        contents.TerminateInstancesWithExpiration = __parseBoolean(output["terminateInstancesWithExpiration"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["validFrom"] !== undefined) {
        contents.ValidFrom = __expectNonNull(__parseRfc3339DateTime(output["validFrom"]));
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = __expectNonNull(__parseRfc3339DateTime(output["validUntil"]));
    }
    if (output["replaceUnhealthyInstances"] !== undefined) {
        contents.ReplaceUnhealthyInstances = __parseBoolean(output["replaceUnhealthyInstances"]);
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
    }
    if (output["loadBalancersConfig"] !== undefined) {
        contents.LoadBalancersConfig = deserializeAws_ec2LoadBalancersConfig(output["loadBalancersConfig"], context);
    }
    if (output["instancePoolsToUseCount"] !== undefined) {
        contents.InstancePoolsToUseCount = __strictParseInt32(output["instancePoolsToUseCount"]);
    }
    if (output["context"] !== undefined) {
        contents.Context = __expectString(output["context"]);
    }
    if (output["targetCapacityUnitType"] !== undefined) {
        contents.TargetCapacityUnitType = __expectString(output["targetCapacityUnitType"]);
    }
    if (output.TagSpecification === "") {
        contents.TagSpecifications = [];
    }
    else if (output["TagSpecification"] !== undefined && output["TagSpecification"]["item"] !== undefined) {
        contents.TagSpecifications = deserializeAws_ec2TagSpecificationList(__getArrayIfSingleItem(output["TagSpecification"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2SpotFleetRequestConfigSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotFleetRequestConfig(entry, context);
    });
};
var deserializeAws_ec2SpotFleetTagSpecification = function (output, context) {
    var contents = {
        ResourceType: undefined,
        Tags: undefined,
    };
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output.tag === "") {
        contents.Tags = [];
    }
    else if (output["tag"] !== undefined && output["tag"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tag"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2SpotFleetTagSpecificationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotFleetTagSpecification(entry, context);
    });
};
var deserializeAws_ec2SpotInstanceRequest = function (output, context) {
    var contents = {
        ActualBlockHourlyPrice: undefined,
        AvailabilityZoneGroup: undefined,
        BlockDurationMinutes: undefined,
        CreateTime: undefined,
        Fault: undefined,
        InstanceId: undefined,
        LaunchGroup: undefined,
        LaunchSpecification: undefined,
        LaunchedAvailabilityZone: undefined,
        ProductDescription: undefined,
        SpotInstanceRequestId: undefined,
        SpotPrice: undefined,
        State: undefined,
        Status: undefined,
        Tags: undefined,
        Type: undefined,
        ValidFrom: undefined,
        ValidUntil: undefined,
        InstanceInterruptionBehavior: undefined,
    };
    if (output["actualBlockHourlyPrice"] !== undefined) {
        contents.ActualBlockHourlyPrice = __expectString(output["actualBlockHourlyPrice"]);
    }
    if (output["availabilityZoneGroup"] !== undefined) {
        contents.AvailabilityZoneGroup = __expectString(output["availabilityZoneGroup"]);
    }
    if (output["blockDurationMinutes"] !== undefined) {
        contents.BlockDurationMinutes = __strictParseInt32(output["blockDurationMinutes"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["fault"] !== undefined) {
        contents.Fault = deserializeAws_ec2SpotInstanceStateFault(output["fault"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["launchGroup"] !== undefined) {
        contents.LaunchGroup = __expectString(output["launchGroup"]);
    }
    if (output["launchSpecification"] !== undefined) {
        contents.LaunchSpecification = deserializeAws_ec2LaunchSpecification(output["launchSpecification"], context);
    }
    if (output["launchedAvailabilityZone"] !== undefined) {
        contents.LaunchedAvailabilityZone = __expectString(output["launchedAvailabilityZone"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["productDescription"]);
    }
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2SpotInstanceStatus(output["status"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["validFrom"] !== undefined) {
        contents.ValidFrom = __expectNonNull(__parseRfc3339DateTime(output["validFrom"]));
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = __expectNonNull(__parseRfc3339DateTime(output["validUntil"]));
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
    }
    return contents;
};
var deserializeAws_ec2SpotInstanceRequestList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotInstanceRequest(entry, context);
    });
};
var deserializeAws_ec2SpotInstanceStateFault = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2SpotInstanceStatus = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
        UpdateTime: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    if (output["updateTime"] !== undefined) {
        contents.UpdateTime = __expectNonNull(__parseRfc3339DateTime(output["updateTime"]));
    }
    return contents;
};
var deserializeAws_ec2SpotMaintenanceStrategies = function (output, context) {
    var contents = {
        CapacityRebalance: undefined,
    };
    if (output["capacityRebalance"] !== undefined) {
        contents.CapacityRebalance = deserializeAws_ec2SpotCapacityRebalance(output["capacityRebalance"], context);
    }
    return contents;
};
var deserializeAws_ec2SpotOptions = function (output, context) {
    var contents = {
        AllocationStrategy: undefined,
        MaintenanceStrategies: undefined,
        InstanceInterruptionBehavior: undefined,
        InstancePoolsToUseCount: undefined,
        SingleInstanceType: undefined,
        SingleAvailabilityZone: undefined,
        MinTargetCapacity: undefined,
        MaxTotalPrice: undefined,
    };
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
    }
    if (output["maintenanceStrategies"] !== undefined) {
        contents.MaintenanceStrategies = deserializeAws_ec2FleetSpotMaintenanceStrategies(output["maintenanceStrategies"], context);
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
    }
    if (output["instancePoolsToUseCount"] !== undefined) {
        contents.InstancePoolsToUseCount = __strictParseInt32(output["instancePoolsToUseCount"]);
    }
    if (output["singleInstanceType"] !== undefined) {
        contents.SingleInstanceType = __parseBoolean(output["singleInstanceType"]);
    }
    if (output["singleAvailabilityZone"] !== undefined) {
        contents.SingleAvailabilityZone = __parseBoolean(output["singleAvailabilityZone"]);
    }
    if (output["minTargetCapacity"] !== undefined) {
        contents.MinTargetCapacity = __strictParseInt32(output["minTargetCapacity"]);
    }
    if (output["maxTotalPrice"] !== undefined) {
        contents.MaxTotalPrice = __expectString(output["maxTotalPrice"]);
    }
    return contents;
};
var deserializeAws_ec2SpotPlacement = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        GroupName: undefined,
        Tenancy: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = __expectString(output["tenancy"]);
    }
    return contents;
};
var deserializeAws_ec2SpotPlacementScore = function (output, context) {
    var contents = {
        Region: undefined,
        AvailabilityZoneId: undefined,
        Score: undefined,
    };
    if (output["region"] !== undefined) {
        contents.Region = __expectString(output["region"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["score"] !== undefined) {
        contents.Score = __strictParseInt32(output["score"]);
    }
    return contents;
};
var deserializeAws_ec2SpotPlacementScores = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotPlacementScore(entry, context);
    });
};
var deserializeAws_ec2SpotPrice = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        InstanceType: undefined,
        ProductDescription: undefined,
        SpotPrice: undefined,
        Timestamp: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["instanceType"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["productDescription"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = __expectString(output["spotPrice"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTime(output["timestamp"]));
    }
    return contents;
};
var deserializeAws_ec2SpotPriceHistoryList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotPrice(entry, context);
    });
};
var deserializeAws_ec2StaleIpPermission = function (output, context) {
    var contents = {
        FromPort: undefined,
        IpProtocol: undefined,
        IpRanges: undefined,
        PrefixListIds: undefined,
        ToPort: undefined,
        UserIdGroupPairs: undefined,
    };
    if (output["fromPort"] !== undefined) {
        contents.FromPort = __strictParseInt32(output["fromPort"]);
    }
    if (output["ipProtocol"] !== undefined) {
        contents.IpProtocol = __expectString(output["ipProtocol"]);
    }
    if (output.ipRanges === "") {
        contents.IpRanges = [];
    }
    else if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
        contents.IpRanges = deserializeAws_ec2IpRanges(__getArrayIfSingleItem(output["ipRanges"]["item"]), context);
    }
    if (output.prefixListIds === "") {
        contents.PrefixListIds = [];
    }
    else if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
        contents.PrefixListIds = deserializeAws_ec2PrefixListIdSet(__getArrayIfSingleItem(output["prefixListIds"]["item"]), context);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = __strictParseInt32(output["toPort"]);
    }
    if (output.groups === "") {
        contents.UserIdGroupPairs = [];
    }
    else if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
        contents.UserIdGroupPairs = deserializeAws_ec2UserIdGroupPairSet(__getArrayIfSingleItem(output["groups"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2StaleIpPermissionSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2StaleIpPermission(entry, context);
    });
};
var deserializeAws_ec2StaleSecurityGroup = function (output, context) {
    var contents = {
        Description: undefined,
        GroupId: undefined,
        GroupName: undefined,
        StaleIpPermissions: undefined,
        StaleIpPermissionsEgress: undefined,
        VpcId: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output.staleIpPermissions === "") {
        contents.StaleIpPermissions = [];
    }
    else if (output["staleIpPermissions"] !== undefined && output["staleIpPermissions"]["item"] !== undefined) {
        contents.StaleIpPermissions = deserializeAws_ec2StaleIpPermissionSet(__getArrayIfSingleItem(output["staleIpPermissions"]["item"]), context);
    }
    if (output.staleIpPermissionsEgress === "") {
        contents.StaleIpPermissionsEgress = [];
    }
    else if (output["staleIpPermissionsEgress"] !== undefined &&
        output["staleIpPermissionsEgress"]["item"] !== undefined) {
        contents.StaleIpPermissionsEgress = deserializeAws_ec2StaleIpPermissionSet(__getArrayIfSingleItem(output["staleIpPermissionsEgress"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2StaleSecurityGroupSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2StaleSecurityGroup(entry, context);
    });
};
var deserializeAws_ec2StartInstancesResult = function (output, context) {
    var contents = {
        StartingInstances: undefined,
    };
    if (output.instancesSet === "") {
        contents.StartingInstances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.StartingInstances = deserializeAws_ec2InstanceStateChangeList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisResult = function (output, context) {
    var contents = {
        NetworkInsightsAccessScopeAnalysis: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysis"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysis = deserializeAws_ec2NetworkInsightsAccessScopeAnalysis(output["networkInsightsAccessScopeAnalysis"], context);
    }
    return contents;
};
var deserializeAws_ec2StartNetworkInsightsAnalysisResult = function (output, context) {
    var contents = {
        NetworkInsightsAnalysis: undefined,
    };
    if (output["networkInsightsAnalysis"] !== undefined) {
        contents.NetworkInsightsAnalysis = deserializeAws_ec2NetworkInsightsAnalysis(output["networkInsightsAnalysis"], context);
    }
    return contents;
};
var deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationResult = function (output, context) {
    var contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2StateReason = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2StopInstancesResult = function (output, context) {
    var contents = {
        StoppingInstances: undefined,
    };
    if (output.instancesSet === "") {
        contents.StoppingInstances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.StoppingInstances = deserializeAws_ec2InstanceStateChangeList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2Storage = function (output, context) {
    var contents = {
        S3: undefined,
    };
    if (output["S3"] !== undefined) {
        contents.S3 = deserializeAws_ec2S3Storage(output["S3"], context);
    }
    return contents;
};
var deserializeAws_ec2StoreImageTaskResult = function (output, context) {
    var contents = {
        AmiId: undefined,
        TaskStartTime: undefined,
        Bucket: undefined,
        S3objectKey: undefined,
        ProgressPercentage: undefined,
        StoreTaskState: undefined,
        StoreTaskFailureReason: undefined,
    };
    if (output["amiId"] !== undefined) {
        contents.AmiId = __expectString(output["amiId"]);
    }
    if (output["taskStartTime"] !== undefined) {
        contents.TaskStartTime = __expectNonNull(__parseRfc3339DateTime(output["taskStartTime"]));
    }
    if (output["bucket"] !== undefined) {
        contents.Bucket = __expectString(output["bucket"]);
    }
    if (output["s3objectKey"] !== undefined) {
        contents.S3objectKey = __expectString(output["s3objectKey"]);
    }
    if (output["progressPercentage"] !== undefined) {
        contents.ProgressPercentage = __strictParseInt32(output["progressPercentage"]);
    }
    if (output["storeTaskState"] !== undefined) {
        contents.StoreTaskState = __expectString(output["storeTaskState"]);
    }
    if (output["storeTaskFailureReason"] !== undefined) {
        contents.StoreTaskFailureReason = __expectString(output["storeTaskFailureReason"]);
    }
    return contents;
};
var deserializeAws_ec2StoreImageTaskResultSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2StoreImageTaskResult(entry, context);
    });
};
var deserializeAws_ec2StringList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2Subnet = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        AvailabilityZoneId: undefined,
        AvailableIpAddressCount: undefined,
        CidrBlock: undefined,
        DefaultForAz: undefined,
        EnableLniAtDeviceIndex: undefined,
        MapPublicIpOnLaunch: undefined,
        MapCustomerOwnedIpOnLaunch: undefined,
        CustomerOwnedIpv4Pool: undefined,
        State: undefined,
        SubnetId: undefined,
        VpcId: undefined,
        OwnerId: undefined,
        AssignIpv6AddressOnCreation: undefined,
        Ipv6CidrBlockAssociationSet: undefined,
        Tags: undefined,
        SubnetArn: undefined,
        OutpostArn: undefined,
        EnableDns64: undefined,
        Ipv6Native: undefined,
        PrivateDnsNameOptionsOnLaunch: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
    }
    if (output["availableIpAddressCount"] !== undefined) {
        contents.AvailableIpAddressCount = __strictParseInt32(output["availableIpAddressCount"]);
    }
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output["defaultForAz"] !== undefined) {
        contents.DefaultForAz = __parseBoolean(output["defaultForAz"]);
    }
    if (output["enableLniAtDeviceIndex"] !== undefined) {
        contents.EnableLniAtDeviceIndex = __strictParseInt32(output["enableLniAtDeviceIndex"]);
    }
    if (output["mapPublicIpOnLaunch"] !== undefined) {
        contents.MapPublicIpOnLaunch = __parseBoolean(output["mapPublicIpOnLaunch"]);
    }
    if (output["mapCustomerOwnedIpOnLaunch"] !== undefined) {
        contents.MapCustomerOwnedIpOnLaunch = __parseBoolean(output["mapCustomerOwnedIpOnLaunch"]);
    }
    if (output["customerOwnedIpv4Pool"] !== undefined) {
        contents.CustomerOwnedIpv4Pool = __expectString(output["customerOwnedIpv4Pool"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["assignIpv6AddressOnCreation"] !== undefined) {
        contents.AssignIpv6AddressOnCreation = __parseBoolean(output["assignIpv6AddressOnCreation"]);
    }
    if (output.ipv6CidrBlockAssociationSet === "") {
        contents.Ipv6CidrBlockAssociationSet = [];
    }
    else if (output["ipv6CidrBlockAssociationSet"] !== undefined &&
        output["ipv6CidrBlockAssociationSet"]["item"] !== undefined) {
        contents.Ipv6CidrBlockAssociationSet = deserializeAws_ec2SubnetIpv6CidrBlockAssociationSet(__getArrayIfSingleItem(output["ipv6CidrBlockAssociationSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["subnetArn"] !== undefined) {
        contents.SubnetArn = __expectString(output["subnetArn"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["enableDns64"] !== undefined) {
        contents.EnableDns64 = __parseBoolean(output["enableDns64"]);
    }
    if (output["ipv6Native"] !== undefined) {
        contents.Ipv6Native = __parseBoolean(output["ipv6Native"]);
    }
    if (output["privateDnsNameOptionsOnLaunch"] !== undefined) {
        contents.PrivateDnsNameOptionsOnLaunch = deserializeAws_ec2PrivateDnsNameOptionsOnLaunch(output["privateDnsNameOptionsOnLaunch"], context);
    }
    return contents;
};
var deserializeAws_ec2SubnetAssociation = function (output, context) {
    var contents = {
        SubnetId: undefined,
        State: undefined,
    };
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2SubnetAssociationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SubnetAssociation(entry, context);
    });
};
var deserializeAws_ec2SubnetCidrBlockState = function (output, context) {
    var contents = {
        State: undefined,
        StatusMessage: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    return contents;
};
var deserializeAws_ec2SubnetCidrReservation = function (output, context) {
    var contents = {
        SubnetCidrReservationId: undefined,
        SubnetId: undefined,
        Cidr: undefined,
        ReservationType: undefined,
        OwnerId: undefined,
        Description: undefined,
        Tags: undefined,
    };
    if (output["subnetCidrReservationId"] !== undefined) {
        contents.SubnetCidrReservationId = __expectString(output["subnetCidrReservationId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["cidr"] !== undefined) {
        contents.Cidr = __expectString(output["cidr"]);
    }
    if (output["reservationType"] !== undefined) {
        contents.ReservationType = __expectString(output["reservationType"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2SubnetCidrReservationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SubnetCidrReservation(entry, context);
    });
};
var deserializeAws_ec2SubnetIpv6CidrBlockAssociation = function (output, context) {
    var contents = {
        AssociationId: undefined,
        Ipv6CidrBlock: undefined,
        Ipv6CidrBlockState: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
    }
    if (output["ipv6CidrBlockState"] !== undefined) {
        contents.Ipv6CidrBlockState = deserializeAws_ec2SubnetCidrBlockState(output["ipv6CidrBlockState"], context);
    }
    return contents;
};
var deserializeAws_ec2SubnetIpv6CidrBlockAssociationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SubnetIpv6CidrBlockAssociation(entry, context);
    });
};
var deserializeAws_ec2SubnetList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Subnet(entry, context);
    });
};
var deserializeAws_ec2SuccessfulInstanceCreditSpecificationItem = function (output, context) {
    var contents = {
        InstanceId: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
var deserializeAws_ec2SuccessfulInstanceCreditSpecificationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};
var deserializeAws_ec2SuccessfulQueuedPurchaseDeletion = function (output, context) {
    var contents = {
        ReservedInstancesId: undefined,
    };
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
    }
    return contents;
};
var deserializeAws_ec2SuccessfulQueuedPurchaseDeletionSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SuccessfulQueuedPurchaseDeletion(entry, context);
    });
};
var deserializeAws_ec2SupportedIpAddressTypes = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2Tag = function (output, context) {
    var contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["key"] !== undefined) {
        contents.Key = __expectString(output["key"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2TagDescription = function (output, context) {
    var contents = {
        Key: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        Value: undefined,
    };
    if (output["key"] !== undefined) {
        contents.Key = __expectString(output["key"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = __expectString(output["value"]);
    }
    return contents;
};
var deserializeAws_ec2TagDescriptionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TagDescription(entry, context);
    });
};
var deserializeAws_ec2TagList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Tag(entry, context);
    });
};
var deserializeAws_ec2TagSpecification = function (output, context) {
    var contents = {
        ResourceType: undefined,
        Tags: undefined,
    };
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined && output["Tag"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["Tag"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TagSpecificationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TagSpecification(entry, context);
    });
};
var deserializeAws_ec2TargetCapacitySpecification = function (output, context) {
    var contents = {
        TotalTargetCapacity: undefined,
        OnDemandTargetCapacity: undefined,
        SpotTargetCapacity: undefined,
        DefaultTargetCapacityType: undefined,
        TargetCapacityUnitType: undefined,
    };
    if (output["totalTargetCapacity"] !== undefined) {
        contents.TotalTargetCapacity = __strictParseInt32(output["totalTargetCapacity"]);
    }
    if (output["onDemandTargetCapacity"] !== undefined) {
        contents.OnDemandTargetCapacity = __strictParseInt32(output["onDemandTargetCapacity"]);
    }
    if (output["spotTargetCapacity"] !== undefined) {
        contents.SpotTargetCapacity = __strictParseInt32(output["spotTargetCapacity"]);
    }
    if (output["defaultTargetCapacityType"] !== undefined) {
        contents.DefaultTargetCapacityType = __expectString(output["defaultTargetCapacityType"]);
    }
    if (output["targetCapacityUnitType"] !== undefined) {
        contents.TargetCapacityUnitType = __expectString(output["targetCapacityUnitType"]);
    }
    return contents;
};
var deserializeAws_ec2TargetConfiguration = function (output, context) {
    var contents = {
        InstanceCount: undefined,
        OfferingId: undefined,
    };
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = __strictParseInt32(output["instanceCount"]);
    }
    if (output["offeringId"] !== undefined) {
        contents.OfferingId = __expectString(output["offeringId"]);
    }
    return contents;
};
var deserializeAws_ec2TargetGroup = function (output, context) {
    var contents = {
        Arn: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = __expectString(output["arn"]);
    }
    return contents;
};
var deserializeAws_ec2TargetGroups = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TargetGroup(entry, context);
    });
};
var deserializeAws_ec2TargetGroupsConfig = function (output, context) {
    var contents = {
        TargetGroups: undefined,
    };
    if (output.targetGroups === "") {
        contents.TargetGroups = [];
    }
    else if (output["targetGroups"] !== undefined && output["targetGroups"]["item"] !== undefined) {
        contents.TargetGroups = deserializeAws_ec2TargetGroups(__getArrayIfSingleItem(output["targetGroups"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TargetNetwork = function (output, context) {
    var contents = {
        AssociationId: undefined,
        VpcId: undefined,
        TargetNetworkId: undefined,
        ClientVpnEndpointId: undefined,
        Status: undefined,
        SecurityGroups: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["targetNetworkId"] !== undefined) {
        contents.TargetNetworkId = __expectString(output["targetNetworkId"]);
    }
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2AssociationStatus(output["status"], context);
    }
    if (output.securityGroups === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroups"] !== undefined && output["securityGroups"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["securityGroups"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TargetNetworkSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TargetNetwork(entry, context);
    });
};
var deserializeAws_ec2TargetReservationValue = function (output, context) {
    var contents = {
        ReservationValue: undefined,
        TargetConfiguration: undefined,
    };
    if (output["reservationValue"] !== undefined) {
        contents.ReservationValue = deserializeAws_ec2ReservationValue(output["reservationValue"], context);
    }
    if (output["targetConfiguration"] !== undefined) {
        contents.TargetConfiguration = deserializeAws_ec2TargetConfiguration(output["targetConfiguration"], context);
    }
    return contents;
};
var deserializeAws_ec2TargetReservationValueSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TargetReservationValue(entry, context);
    });
};
var deserializeAws_ec2TerminateClientVpnConnectionsResult = function (output, context) {
    var contents = {
        ClientVpnEndpointId: undefined,
        Username: undefined,
        ConnectionStatuses: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
    }
    if (output["username"] !== undefined) {
        contents.Username = __expectString(output["username"]);
    }
    if (output.connectionStatuses === "") {
        contents.ConnectionStatuses = [];
    }
    else if (output["connectionStatuses"] !== undefined && output["connectionStatuses"]["item"] !== undefined) {
        contents.ConnectionStatuses = deserializeAws_ec2TerminateConnectionStatusSet(__getArrayIfSingleItem(output["connectionStatuses"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TerminateConnectionStatus = function (output, context) {
    var contents = {
        ConnectionId: undefined,
        PreviousStatus: undefined,
        CurrentStatus: undefined,
    };
    if (output["connectionId"] !== undefined) {
        contents.ConnectionId = __expectString(output["connectionId"]);
    }
    if (output["previousStatus"] !== undefined) {
        contents.PreviousStatus = deserializeAws_ec2ClientVpnConnectionStatus(output["previousStatus"], context);
    }
    if (output["currentStatus"] !== undefined) {
        contents.CurrentStatus = deserializeAws_ec2ClientVpnConnectionStatus(output["currentStatus"], context);
    }
    return contents;
};
var deserializeAws_ec2TerminateConnectionStatusSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TerminateConnectionStatus(entry, context);
    });
};
var deserializeAws_ec2TerminateInstancesResult = function (output, context) {
    var contents = {
        TerminatingInstances: undefined,
    };
    if (output.instancesSet === "") {
        contents.TerminatingInstances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.TerminatingInstances = deserializeAws_ec2InstanceStateChangeList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ThreadsPerCoreList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __strictParseInt32(entry);
    });
};
var deserializeAws_ec2ThroughResourcesStatement = function (output, context) {
    var contents = {
        ResourceStatement: undefined,
    };
    if (output["resourceStatement"] !== undefined) {
        contents.ResourceStatement = deserializeAws_ec2ResourceStatement(output["resourceStatement"], context);
    }
    return contents;
};
var deserializeAws_ec2ThroughResourcesStatementList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ThroughResourcesStatement(entry, context);
    });
};
var deserializeAws_ec2TotalLocalStorageGB = function (output, context) {
    var contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = __strictParseFloat(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseFloat(output["max"]);
    }
    return contents;
};
var deserializeAws_ec2TrafficMirrorFilter = function (output, context) {
    var contents = {
        TrafficMirrorFilterId: undefined,
        IngressFilterRules: undefined,
        EgressFilterRules: undefined,
        NetworkServices: undefined,
        Description: undefined,
        Tags: undefined,
    };
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
    }
    if (output.ingressFilterRuleSet === "") {
        contents.IngressFilterRules = [];
    }
    else if (output["ingressFilterRuleSet"] !== undefined && output["ingressFilterRuleSet"]["item"] !== undefined) {
        contents.IngressFilterRules = deserializeAws_ec2TrafficMirrorFilterRuleList(__getArrayIfSingleItem(output["ingressFilterRuleSet"]["item"]), context);
    }
    if (output.egressFilterRuleSet === "") {
        contents.EgressFilterRules = [];
    }
    else if (output["egressFilterRuleSet"] !== undefined && output["egressFilterRuleSet"]["item"] !== undefined) {
        contents.EgressFilterRules = deserializeAws_ec2TrafficMirrorFilterRuleList(__getArrayIfSingleItem(output["egressFilterRuleSet"]["item"]), context);
    }
    if (output.networkServiceSet === "") {
        contents.NetworkServices = [];
    }
    else if (output["networkServiceSet"] !== undefined && output["networkServiceSet"]["item"] !== undefined) {
        contents.NetworkServices = deserializeAws_ec2TrafficMirrorNetworkServiceList(__getArrayIfSingleItem(output["networkServiceSet"]["item"]), context);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TrafficMirrorFilterRule = function (output, context) {
    var contents = {
        TrafficMirrorFilterRuleId: undefined,
        TrafficMirrorFilterId: undefined,
        TrafficDirection: undefined,
        RuleNumber: undefined,
        RuleAction: undefined,
        Protocol: undefined,
        DestinationPortRange: undefined,
        SourcePortRange: undefined,
        DestinationCidrBlock: undefined,
        SourceCidrBlock: undefined,
        Description: undefined,
    };
    if (output["trafficMirrorFilterRuleId"] !== undefined) {
        contents.TrafficMirrorFilterRuleId = __expectString(output["trafficMirrorFilterRuleId"]);
    }
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
    }
    if (output["trafficDirection"] !== undefined) {
        contents.TrafficDirection = __expectString(output["trafficDirection"]);
    }
    if (output["ruleNumber"] !== undefined) {
        contents.RuleNumber = __strictParseInt32(output["ruleNumber"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = __expectString(output["ruleAction"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __strictParseInt32(output["protocol"]);
    }
    if (output["destinationPortRange"] !== undefined) {
        contents.DestinationPortRange = deserializeAws_ec2TrafficMirrorPortRange(output["destinationPortRange"], context);
    }
    if (output["sourcePortRange"] !== undefined) {
        contents.SourcePortRange = deserializeAws_ec2TrafficMirrorPortRange(output["sourcePortRange"], context);
    }
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["sourceCidrBlock"] !== undefined) {
        contents.SourceCidrBlock = __expectString(output["sourceCidrBlock"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    return contents;
};
var deserializeAws_ec2TrafficMirrorFilterRuleList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrafficMirrorFilterRule(entry, context);
    });
};
var deserializeAws_ec2TrafficMirrorFilterSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrafficMirrorFilter(entry, context);
    });
};
var deserializeAws_ec2TrafficMirrorNetworkServiceList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2TrafficMirrorPortRange = function (output, context) {
    var contents = {
        FromPort: undefined,
        ToPort: undefined,
    };
    if (output["fromPort"] !== undefined) {
        contents.FromPort = __strictParseInt32(output["fromPort"]);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = __strictParseInt32(output["toPort"]);
    }
    return contents;
};
var deserializeAws_ec2TrafficMirrorSession = function (output, context) {
    var contents = {
        TrafficMirrorSessionId: undefined,
        TrafficMirrorTargetId: undefined,
        TrafficMirrorFilterId: undefined,
        NetworkInterfaceId: undefined,
        OwnerId: undefined,
        PacketLength: undefined,
        SessionNumber: undefined,
        VirtualNetworkId: undefined,
        Description: undefined,
        Tags: undefined,
    };
    if (output["trafficMirrorSessionId"] !== undefined) {
        contents.TrafficMirrorSessionId = __expectString(output["trafficMirrorSessionId"]);
    }
    if (output["trafficMirrorTargetId"] !== undefined) {
        contents.TrafficMirrorTargetId = __expectString(output["trafficMirrorTargetId"]);
    }
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["packetLength"] !== undefined) {
        contents.PacketLength = __strictParseInt32(output["packetLength"]);
    }
    if (output["sessionNumber"] !== undefined) {
        contents.SessionNumber = __strictParseInt32(output["sessionNumber"]);
    }
    if (output["virtualNetworkId"] !== undefined) {
        contents.VirtualNetworkId = __strictParseInt32(output["virtualNetworkId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TrafficMirrorSessionSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrafficMirrorSession(entry, context);
    });
};
var deserializeAws_ec2TrafficMirrorTarget = function (output, context) {
    var contents = {
        TrafficMirrorTargetId: undefined,
        NetworkInterfaceId: undefined,
        NetworkLoadBalancerArn: undefined,
        Type: undefined,
        Description: undefined,
        OwnerId: undefined,
        Tags: undefined,
        GatewayLoadBalancerEndpointId: undefined,
    };
    if (output["trafficMirrorTargetId"] !== undefined) {
        contents.TrafficMirrorTargetId = __expectString(output["trafficMirrorTargetId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["networkLoadBalancerArn"] !== undefined) {
        contents.NetworkLoadBalancerArn = __expectString(output["networkLoadBalancerArn"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["gatewayLoadBalancerEndpointId"] !== undefined) {
        contents.GatewayLoadBalancerEndpointId = __expectString(output["gatewayLoadBalancerEndpointId"]);
    }
    return contents;
};
var deserializeAws_ec2TrafficMirrorTargetSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrafficMirrorTarget(entry, context);
    });
};
var deserializeAws_ec2TransitGateway = function (output, context) {
    var contents = {
        TransitGatewayId: undefined,
        TransitGatewayArn: undefined,
        State: undefined,
        OwnerId: undefined,
        Description: undefined,
        CreationTime: undefined,
        Options: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["transitGatewayArn"] !== undefined) {
        contents.TransitGatewayArn = __expectString(output["transitGatewayArn"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTime(output["creationTime"]));
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2TransitGatewayOptions(output["options"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayAssociation = function (output, context) {
    var contents = {
        TransitGatewayRouteTableId: undefined,
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        State: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayAttachment = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        TransitGatewayId: undefined,
        TransitGatewayOwnerId: undefined,
        ResourceOwnerId: undefined,
        ResourceType: undefined,
        ResourceId: undefined,
        State: undefined,
        Association: undefined,
        CreationTime: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["transitGatewayOwnerId"] !== undefined) {
        contents.TransitGatewayOwnerId = __expectString(output["transitGatewayOwnerId"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2TransitGatewayAttachmentAssociation(output["association"], context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTime(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayAttachmentAssociation = function (output, context) {
    var contents = {
        TransitGatewayRouteTableId: undefined,
        State: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayAttachmentBgpConfiguration = function (output, context) {
    var contents = {
        TransitGatewayAsn: undefined,
        PeerAsn: undefined,
        TransitGatewayAddress: undefined,
        PeerAddress: undefined,
        BgpStatus: undefined,
    };
    if (output["transitGatewayAsn"] !== undefined) {
        contents.TransitGatewayAsn = __strictParseLong(output["transitGatewayAsn"]);
    }
    if (output["peerAsn"] !== undefined) {
        contents.PeerAsn = __strictParseLong(output["peerAsn"]);
    }
    if (output["transitGatewayAddress"] !== undefined) {
        contents.TransitGatewayAddress = __expectString(output["transitGatewayAddress"]);
    }
    if (output["peerAddress"] !== undefined) {
        contents.PeerAddress = __expectString(output["peerAddress"]);
    }
    if (output["bgpStatus"] !== undefined) {
        contents.BgpStatus = __expectString(output["bgpStatus"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayAttachmentBgpConfigurationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayAttachmentBgpConfiguration(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayAttachmentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayAttachment(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayAttachmentPropagation = function (output, context) {
    var contents = {
        TransitGatewayRouteTableId: undefined,
        State: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayAttachmentPropagationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayAttachmentPropagation(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayConnect = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        TransportTransitGatewayAttachmentId: undefined,
        TransitGatewayId: undefined,
        State: undefined,
        CreationTime: undefined,
        Options: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["transportTransitGatewayAttachmentId"] !== undefined) {
        contents.TransportTransitGatewayAttachmentId = __expectString(output["transportTransitGatewayAttachmentId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTime(output["creationTime"]));
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2TransitGatewayConnectOptions(output["options"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayConnectList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayConnect(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayConnectOptions = function (output, context) {
    var contents = {
        Protocol: undefined,
    };
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayConnectPeer = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        TransitGatewayConnectPeerId: undefined,
        State: undefined,
        CreationTime: undefined,
        ConnectPeerConfiguration: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["transitGatewayConnectPeerId"] !== undefined) {
        contents.TransitGatewayConnectPeerId = __expectString(output["transitGatewayConnectPeerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTime(output["creationTime"]));
    }
    if (output["connectPeerConfiguration"] !== undefined) {
        contents.ConnectPeerConfiguration = deserializeAws_ec2TransitGatewayConnectPeerConfiguration(output["connectPeerConfiguration"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayConnectPeerConfiguration = function (output, context) {
    var contents = {
        TransitGatewayAddress: undefined,
        PeerAddress: undefined,
        InsideCidrBlocks: undefined,
        Protocol: undefined,
        BgpConfigurations: undefined,
    };
    if (output["transitGatewayAddress"] !== undefined) {
        contents.TransitGatewayAddress = __expectString(output["transitGatewayAddress"]);
    }
    if (output["peerAddress"] !== undefined) {
        contents.PeerAddress = __expectString(output["peerAddress"]);
    }
    if (output.insideCidrBlocks === "") {
        contents.InsideCidrBlocks = [];
    }
    else if (output["insideCidrBlocks"] !== undefined && output["insideCidrBlocks"]["item"] !== undefined) {
        contents.InsideCidrBlocks = deserializeAws_ec2InsideCidrBlocksStringList(__getArrayIfSingleItem(output["insideCidrBlocks"]["item"]), context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = __expectString(output["protocol"]);
    }
    if (output.bgpConfigurations === "") {
        contents.BgpConfigurations = [];
    }
    else if (output["bgpConfigurations"] !== undefined && output["bgpConfigurations"]["item"] !== undefined) {
        contents.BgpConfigurations = deserializeAws_ec2TransitGatewayAttachmentBgpConfigurationList(__getArrayIfSingleItem(output["bgpConfigurations"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayConnectPeerList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayConnectPeer(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGateway(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupMembers = function (output, context) {
    var contents = {
        TransitGatewayMulticastDomainId: undefined,
        DeregisteredNetworkInterfaceIds: undefined,
        GroupIpAddress: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output.deregisteredNetworkInterfaceIds === "") {
        contents.DeregisteredNetworkInterfaceIds = [];
    }
    else if (output["deregisteredNetworkInterfaceIds"] !== undefined &&
        output["deregisteredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.DeregisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["deregisteredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupSources = function (output, context) {
    var contents = {
        TransitGatewayMulticastDomainId: undefined,
        DeregisteredNetworkInterfaceIds: undefined,
        GroupIpAddress: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output.deregisteredNetworkInterfaceIds === "") {
        contents.DeregisteredNetworkInterfaceIds = [];
    }
    else if (output["deregisteredNetworkInterfaceIds"] !== undefined &&
        output["deregisteredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.DeregisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["deregisteredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayMulticastDomain = function (output, context) {
    var contents = {
        TransitGatewayMulticastDomainId: undefined,
        TransitGatewayId: undefined,
        TransitGatewayMulticastDomainArn: undefined,
        OwnerId: undefined,
        Options: undefined,
        State: undefined,
        CreationTime: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["transitGatewayMulticastDomainArn"] !== undefined) {
        contents.TransitGatewayMulticastDomainArn = __expectString(output["transitGatewayMulticastDomainArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2TransitGatewayMulticastDomainOptions(output["options"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTime(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayMulticastDomainAssociation = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        ResourceOwnerId: undefined,
        Subnet: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2SubnetAssociation(output["subnet"], context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayMulticastDomainAssociationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayMulticastDomainAssociation(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayMulticastDomainAssociations = function (output, context) {
    var contents = {
        TransitGatewayMulticastDomainId: undefined,
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        ResourceOwnerId: undefined,
        Subnets: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output.subnets === "") {
        contents.Subnets = [];
    }
    else if (output["subnets"] !== undefined && output["subnets"]["item"] !== undefined) {
        contents.Subnets = deserializeAws_ec2SubnetAssociationList(__getArrayIfSingleItem(output["subnets"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayMulticastDomainList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayMulticastDomain(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayMulticastDomainOptions = function (output, context) {
    var contents = {
        Igmpv2Support: undefined,
        StaticSourcesSupport: undefined,
        AutoAcceptSharedAssociations: undefined,
    };
    if (output["igmpv2Support"] !== undefined) {
        contents.Igmpv2Support = __expectString(output["igmpv2Support"]);
    }
    if (output["staticSourcesSupport"] !== undefined) {
        contents.StaticSourcesSupport = __expectString(output["staticSourcesSupport"]);
    }
    if (output["autoAcceptSharedAssociations"] !== undefined) {
        contents.AutoAcceptSharedAssociations = __expectString(output["autoAcceptSharedAssociations"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayMulticastGroup = function (output, context) {
    var contents = {
        GroupIpAddress: undefined,
        TransitGatewayAttachmentId: undefined,
        SubnetId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        ResourceOwnerId: undefined,
        NetworkInterfaceId: undefined,
        GroupMember: undefined,
        GroupSource: undefined,
        MemberType: undefined,
        SourceType: undefined,
    };
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = __expectString(output["subnetId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output["groupMember"] !== undefined) {
        contents.GroupMember = __parseBoolean(output["groupMember"]);
    }
    if (output["groupSource"] !== undefined) {
        contents.GroupSource = __parseBoolean(output["groupSource"]);
    }
    if (output["memberType"] !== undefined) {
        contents.MemberType = __expectString(output["memberType"]);
    }
    if (output["sourceType"] !== undefined) {
        contents.SourceType = __expectString(output["sourceType"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayMulticastGroupList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayMulticastGroup(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayMulticastRegisteredGroupMembers = function (output, context) {
    var contents = {
        TransitGatewayMulticastDomainId: undefined,
        RegisteredNetworkInterfaceIds: undefined,
        GroupIpAddress: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output.registeredNetworkInterfaceIds === "") {
        contents.RegisteredNetworkInterfaceIds = [];
    }
    else if (output["registeredNetworkInterfaceIds"] !== undefined &&
        output["registeredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.RegisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["registeredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayMulticastRegisteredGroupSources = function (output, context) {
    var contents = {
        TransitGatewayMulticastDomainId: undefined,
        RegisteredNetworkInterfaceIds: undefined,
        GroupIpAddress: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
    }
    if (output.registeredNetworkInterfaceIds === "") {
        contents.RegisteredNetworkInterfaceIds = [];
    }
    else if (output["registeredNetworkInterfaceIds"] !== undefined &&
        output["registeredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.RegisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["registeredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayOptions = function (output, context) {
    var contents = {
        AmazonSideAsn: undefined,
        TransitGatewayCidrBlocks: undefined,
        AutoAcceptSharedAttachments: undefined,
        DefaultRouteTableAssociation: undefined,
        AssociationDefaultRouteTableId: undefined,
        DefaultRouteTablePropagation: undefined,
        PropagationDefaultRouteTableId: undefined,
        VpnEcmpSupport: undefined,
        DnsSupport: undefined,
        MulticastSupport: undefined,
    };
    if (output["amazonSideAsn"] !== undefined) {
        contents.AmazonSideAsn = __strictParseLong(output["amazonSideAsn"]);
    }
    if (output.transitGatewayCidrBlocks === "") {
        contents.TransitGatewayCidrBlocks = [];
    }
    else if (output["transitGatewayCidrBlocks"] !== undefined &&
        output["transitGatewayCidrBlocks"]["item"] !== undefined) {
        contents.TransitGatewayCidrBlocks = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["transitGatewayCidrBlocks"]["item"]), context);
    }
    if (output["autoAcceptSharedAttachments"] !== undefined) {
        contents.AutoAcceptSharedAttachments = __expectString(output["autoAcceptSharedAttachments"]);
    }
    if (output["defaultRouteTableAssociation"] !== undefined) {
        contents.DefaultRouteTableAssociation = __expectString(output["defaultRouteTableAssociation"]);
    }
    if (output["associationDefaultRouteTableId"] !== undefined) {
        contents.AssociationDefaultRouteTableId = __expectString(output["associationDefaultRouteTableId"]);
    }
    if (output["defaultRouteTablePropagation"] !== undefined) {
        contents.DefaultRouteTablePropagation = __expectString(output["defaultRouteTablePropagation"]);
    }
    if (output["propagationDefaultRouteTableId"] !== undefined) {
        contents.PropagationDefaultRouteTableId = __expectString(output["propagationDefaultRouteTableId"]);
    }
    if (output["vpnEcmpSupport"] !== undefined) {
        contents.VpnEcmpSupport = __expectString(output["vpnEcmpSupport"]);
    }
    if (output["dnsSupport"] !== undefined) {
        contents.DnsSupport = __expectString(output["dnsSupport"]);
    }
    if (output["multicastSupport"] !== undefined) {
        contents.MulticastSupport = __expectString(output["multicastSupport"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayPeeringAttachment = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        RequesterTgwInfo: undefined,
        AccepterTgwInfo: undefined,
        Status: undefined,
        State: undefined,
        CreationTime: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["requesterTgwInfo"] !== undefined) {
        contents.RequesterTgwInfo = deserializeAws_ec2PeeringTgwInfo(output["requesterTgwInfo"], context);
    }
    if (output["accepterTgwInfo"] !== undefined) {
        contents.AccepterTgwInfo = deserializeAws_ec2PeeringTgwInfo(output["accepterTgwInfo"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2PeeringAttachmentStatus(output["status"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTime(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayPeeringAttachmentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayPeeringAttachment(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayPrefixListAttachment = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceType: undefined,
        ResourceId: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayPrefixListReference = function (output, context) {
    var contents = {
        TransitGatewayRouteTableId: undefined,
        PrefixListId: undefined,
        PrefixListOwnerId: undefined,
        State: undefined,
        Blackhole: undefined,
        TransitGatewayAttachment: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["prefixListOwnerId"] !== undefined) {
        contents.PrefixListOwnerId = __expectString(output["prefixListOwnerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["blackhole"] !== undefined) {
        contents.Blackhole = __parseBoolean(output["blackhole"]);
    }
    if (output["transitGatewayAttachment"] !== undefined) {
        contents.TransitGatewayAttachment = deserializeAws_ec2TransitGatewayPrefixListAttachment(output["transitGatewayAttachment"], context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayPrefixListReferenceSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayPrefixListReference(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayPropagation = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        TransitGatewayRouteTableId: undefined,
        State: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayRoute = function (output, context) {
    var contents = {
        DestinationCidrBlock: undefined,
        PrefixListId: undefined,
        TransitGatewayAttachments: undefined,
        Type: undefined,
        State: undefined,
    };
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output.transitGatewayAttachments === "") {
        contents.TransitGatewayAttachments = [];
    }
    else if (output["transitGatewayAttachments"] !== undefined &&
        output["transitGatewayAttachments"]["item"] !== undefined) {
        contents.TransitGatewayAttachments = deserializeAws_ec2TransitGatewayRouteAttachmentList(__getArrayIfSingleItem(output["transitGatewayAttachments"]["item"]), context);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayRouteAttachment = function (output, context) {
    var contents = {
        ResourceId: undefined,
        TransitGatewayAttachmentId: undefined,
        ResourceType: undefined,
    };
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayRouteAttachmentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRouteAttachment(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayRouteList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRoute(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayRouteTable = function (output, context) {
    var contents = {
        TransitGatewayRouteTableId: undefined,
        TransitGatewayId: undefined,
        State: undefined,
        DefaultAssociationRouteTable: undefined,
        DefaultPropagationRouteTable: undefined,
        CreationTime: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["defaultAssociationRouteTable"] !== undefined) {
        contents.DefaultAssociationRouteTable = __parseBoolean(output["defaultAssociationRouteTable"]);
    }
    if (output["defaultPropagationRouteTable"] !== undefined) {
        contents.DefaultPropagationRouteTable = __parseBoolean(output["defaultPropagationRouteTable"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTime(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayRouteTableAssociation = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        State: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayRouteTableAssociationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRouteTableAssociation(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayRouteTableList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRouteTable(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayRouteTablePropagation = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        State: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayRouteTablePropagationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRouteTablePropagation(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayRouteTableRoute = function (output, context) {
    var contents = {
        DestinationCidr: undefined,
        State: undefined,
        RouteOrigin: undefined,
        PrefixListId: undefined,
        AttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
    };
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = __expectString(output["destinationCidr"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["routeOrigin"] !== undefined) {
        contents.RouteOrigin = __expectString(output["routeOrigin"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = __expectString(output["prefixListId"]);
    }
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = __expectString(output["attachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["resourceType"]);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayVpcAttachment = function (output, context) {
    var contents = {
        TransitGatewayAttachmentId: undefined,
        TransitGatewayId: undefined,
        VpcId: undefined,
        VpcOwnerId: undefined,
        State: undefined,
        SubnetIds: undefined,
        CreationTime: undefined,
        Options: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["vpcOwnerId"] !== undefined) {
        contents.VpcOwnerId = __expectString(output["vpcOwnerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output.subnetIds === "") {
        contents.SubnetIds = [];
    }
    else if (output["subnetIds"] !== undefined && output["subnetIds"]["item"] !== undefined) {
        contents.SubnetIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["subnetIds"]["item"]), context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTime(output["creationTime"]));
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2TransitGatewayVpcAttachmentOptions(output["options"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TransitGatewayVpcAttachmentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayVpcAttachment(entry, context);
    });
};
var deserializeAws_ec2TransitGatewayVpcAttachmentOptions = function (output, context) {
    var contents = {
        DnsSupport: undefined,
        Ipv6Support: undefined,
        ApplianceModeSupport: undefined,
    };
    if (output["dnsSupport"] !== undefined) {
        contents.DnsSupport = __expectString(output["dnsSupport"]);
    }
    if (output["ipv6Support"] !== undefined) {
        contents.Ipv6Support = __expectString(output["ipv6Support"]);
    }
    if (output["applianceModeSupport"] !== undefined) {
        contents.ApplianceModeSupport = __expectString(output["applianceModeSupport"]);
    }
    return contents;
};
var deserializeAws_ec2TrunkInterfaceAssociation = function (output, context) {
    var contents = {
        AssociationId: undefined,
        BranchInterfaceId: undefined,
        TrunkInterfaceId: undefined,
        InterfaceProtocol: undefined,
        VlanId: undefined,
        GreKey: undefined,
        Tags: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["branchInterfaceId"] !== undefined) {
        contents.BranchInterfaceId = __expectString(output["branchInterfaceId"]);
    }
    if (output["trunkInterfaceId"] !== undefined) {
        contents.TrunkInterfaceId = __expectString(output["trunkInterfaceId"]);
    }
    if (output["interfaceProtocol"] !== undefined) {
        contents.InterfaceProtocol = __expectString(output["interfaceProtocol"]);
    }
    if (output["vlanId"] !== undefined) {
        contents.VlanId = __strictParseInt32(output["vlanId"]);
    }
    if (output["greKey"] !== undefined) {
        contents.GreKey = __strictParseInt32(output["greKey"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2TrunkInterfaceAssociationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrunkInterfaceAssociation(entry, context);
    });
};
var deserializeAws_ec2TunnelOption = function (output, context) {
    var contents = {
        OutsideIpAddress: undefined,
        TunnelInsideCidr: undefined,
        TunnelInsideIpv6Cidr: undefined,
        PreSharedKey: undefined,
        Phase1LifetimeSeconds: undefined,
        Phase2LifetimeSeconds: undefined,
        RekeyMarginTimeSeconds: undefined,
        RekeyFuzzPercentage: undefined,
        ReplayWindowSize: undefined,
        DpdTimeoutSeconds: undefined,
        DpdTimeoutAction: undefined,
        Phase1EncryptionAlgorithms: undefined,
        Phase2EncryptionAlgorithms: undefined,
        Phase1IntegrityAlgorithms: undefined,
        Phase2IntegrityAlgorithms: undefined,
        Phase1DHGroupNumbers: undefined,
        Phase2DHGroupNumbers: undefined,
        IkeVersions: undefined,
        StartupAction: undefined,
    };
    if (output["outsideIpAddress"] !== undefined) {
        contents.OutsideIpAddress = __expectString(output["outsideIpAddress"]);
    }
    if (output["tunnelInsideCidr"] !== undefined) {
        contents.TunnelInsideCidr = __expectString(output["tunnelInsideCidr"]);
    }
    if (output["tunnelInsideIpv6Cidr"] !== undefined) {
        contents.TunnelInsideIpv6Cidr = __expectString(output["tunnelInsideIpv6Cidr"]);
    }
    if (output["preSharedKey"] !== undefined) {
        contents.PreSharedKey = __expectString(output["preSharedKey"]);
    }
    if (output["phase1LifetimeSeconds"] !== undefined) {
        contents.Phase1LifetimeSeconds = __strictParseInt32(output["phase1LifetimeSeconds"]);
    }
    if (output["phase2LifetimeSeconds"] !== undefined) {
        contents.Phase2LifetimeSeconds = __strictParseInt32(output["phase2LifetimeSeconds"]);
    }
    if (output["rekeyMarginTimeSeconds"] !== undefined) {
        contents.RekeyMarginTimeSeconds = __strictParseInt32(output["rekeyMarginTimeSeconds"]);
    }
    if (output["rekeyFuzzPercentage"] !== undefined) {
        contents.RekeyFuzzPercentage = __strictParseInt32(output["rekeyFuzzPercentage"]);
    }
    if (output["replayWindowSize"] !== undefined) {
        contents.ReplayWindowSize = __strictParseInt32(output["replayWindowSize"]);
    }
    if (output["dpdTimeoutSeconds"] !== undefined) {
        contents.DpdTimeoutSeconds = __strictParseInt32(output["dpdTimeoutSeconds"]);
    }
    if (output["dpdTimeoutAction"] !== undefined) {
        contents.DpdTimeoutAction = __expectString(output["dpdTimeoutAction"]);
    }
    if (output.phase1EncryptionAlgorithmSet === "") {
        contents.Phase1EncryptionAlgorithms = [];
    }
    else if (output["phase1EncryptionAlgorithmSet"] !== undefined &&
        output["phase1EncryptionAlgorithmSet"]["item"] !== undefined) {
        contents.Phase1EncryptionAlgorithms = deserializeAws_ec2Phase1EncryptionAlgorithmsList(__getArrayIfSingleItem(output["phase1EncryptionAlgorithmSet"]["item"]), context);
    }
    if (output.phase2EncryptionAlgorithmSet === "") {
        contents.Phase2EncryptionAlgorithms = [];
    }
    else if (output["phase2EncryptionAlgorithmSet"] !== undefined &&
        output["phase2EncryptionAlgorithmSet"]["item"] !== undefined) {
        contents.Phase2EncryptionAlgorithms = deserializeAws_ec2Phase2EncryptionAlgorithmsList(__getArrayIfSingleItem(output["phase2EncryptionAlgorithmSet"]["item"]), context);
    }
    if (output.phase1IntegrityAlgorithmSet === "") {
        contents.Phase1IntegrityAlgorithms = [];
    }
    else if (output["phase1IntegrityAlgorithmSet"] !== undefined &&
        output["phase1IntegrityAlgorithmSet"]["item"] !== undefined) {
        contents.Phase1IntegrityAlgorithms = deserializeAws_ec2Phase1IntegrityAlgorithmsList(__getArrayIfSingleItem(output["phase1IntegrityAlgorithmSet"]["item"]), context);
    }
    if (output.phase2IntegrityAlgorithmSet === "") {
        contents.Phase2IntegrityAlgorithms = [];
    }
    else if (output["phase2IntegrityAlgorithmSet"] !== undefined &&
        output["phase2IntegrityAlgorithmSet"]["item"] !== undefined) {
        contents.Phase2IntegrityAlgorithms = deserializeAws_ec2Phase2IntegrityAlgorithmsList(__getArrayIfSingleItem(output["phase2IntegrityAlgorithmSet"]["item"]), context);
    }
    if (output.phase1DHGroupNumberSet === "") {
        contents.Phase1DHGroupNumbers = [];
    }
    else if (output["phase1DHGroupNumberSet"] !== undefined && output["phase1DHGroupNumberSet"]["item"] !== undefined) {
        contents.Phase1DHGroupNumbers = deserializeAws_ec2Phase1DHGroupNumbersList(__getArrayIfSingleItem(output["phase1DHGroupNumberSet"]["item"]), context);
    }
    if (output.phase2DHGroupNumberSet === "") {
        contents.Phase2DHGroupNumbers = [];
    }
    else if (output["phase2DHGroupNumberSet"] !== undefined && output["phase2DHGroupNumberSet"]["item"] !== undefined) {
        contents.Phase2DHGroupNumbers = deserializeAws_ec2Phase2DHGroupNumbersList(__getArrayIfSingleItem(output["phase2DHGroupNumberSet"]["item"]), context);
    }
    if (output.ikeVersionSet === "") {
        contents.IkeVersions = [];
    }
    else if (output["ikeVersionSet"] !== undefined && output["ikeVersionSet"]["item"] !== undefined) {
        contents.IkeVersions = deserializeAws_ec2IKEVersionsList(__getArrayIfSingleItem(output["ikeVersionSet"]["item"]), context);
    }
    if (output["startupAction"] !== undefined) {
        contents.StartupAction = __expectString(output["startupAction"]);
    }
    return contents;
};
var deserializeAws_ec2TunnelOptionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TunnelOption(entry, context);
    });
};
var deserializeAws_ec2UnassignIpv6AddressesResult = function (output, context) {
    var contents = {
        NetworkInterfaceId: undefined,
        UnassignedIpv6Addresses: undefined,
        UnassignedIpv6Prefixes: undefined,
    };
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
    }
    if (output.unassignedIpv6Addresses === "") {
        contents.UnassignedIpv6Addresses = [];
    }
    else if (output["unassignedIpv6Addresses"] !== undefined &&
        output["unassignedIpv6Addresses"]["item"] !== undefined) {
        contents.UnassignedIpv6Addresses = deserializeAws_ec2Ipv6AddressList(__getArrayIfSingleItem(output["unassignedIpv6Addresses"]["item"]), context);
    }
    if (output.unassignedIpv6PrefixSet === "") {
        contents.UnassignedIpv6Prefixes = [];
    }
    else if (output["unassignedIpv6PrefixSet"] !== undefined &&
        output["unassignedIpv6PrefixSet"]["item"] !== undefined) {
        contents.UnassignedIpv6Prefixes = deserializeAws_ec2IpPrefixList(__getArrayIfSingleItem(output["unassignedIpv6PrefixSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2UnmonitorInstancesResult = function (output, context) {
    var contents = {
        InstanceMonitorings: undefined,
    };
    if (output.instancesSet === "") {
        contents.InstanceMonitorings = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.InstanceMonitorings = deserializeAws_ec2InstanceMonitoringList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItem = function (output, context) {
    var contents = {
        InstanceId: undefined,
        Error: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItemError(output["error"], context);
    }
    return contents;
};
var deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItemError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};
var deserializeAws_ec2UnsuccessfulItem = function (output, context) {
    var contents = {
        Error: undefined,
        ResourceId: undefined,
    };
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2UnsuccessfulItemError(output["error"], context);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["resourceId"]);
    }
    return contents;
};
var deserializeAws_ec2UnsuccessfulItemError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2UnsuccessfulItemList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UnsuccessfulItem(entry, context);
    });
};
var deserializeAws_ec2UnsuccessfulItemSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UnsuccessfulItem(entry, context);
    });
};
var deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressResult = function (output, context) {
    var contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = __parseBoolean(output["return"]);
    }
    return contents;
};
var deserializeAws_ec2UsageClassTypeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2UserBucketDetails = function (output, context) {
    var contents = {
        S3Bucket: undefined,
        S3Key: undefined,
    };
    if (output["s3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["s3Bucket"]);
    }
    if (output["s3Key"] !== undefined) {
        contents.S3Key = __expectString(output["s3Key"]);
    }
    return contents;
};
var deserializeAws_ec2UserIdGroupPair = function (output, context) {
    var contents = {
        Description: undefined,
        GroupId: undefined,
        GroupName: undefined,
        PeeringStatus: undefined,
        UserId: undefined,
        VpcId: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = __expectString(output["groupId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = __expectString(output["groupName"]);
    }
    if (output["peeringStatus"] !== undefined) {
        contents.PeeringStatus = __expectString(output["peeringStatus"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = __expectString(output["userId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
var deserializeAws_ec2UserIdGroupPairList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UserIdGroupPair(entry, context);
    });
};
var deserializeAws_ec2UserIdGroupPairSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UserIdGroupPair(entry, context);
    });
};
var deserializeAws_ec2ValidationError = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2ValidationWarning = function (output, context) {
    var contents = {
        Errors: undefined,
    };
    if (output.errorSet === "") {
        contents.Errors = [];
    }
    else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
        contents.Errors = deserializeAws_ec2ErrorSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2ValueStringList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2VCpuCountRange = function (output, context) {
    var contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = __strictParseInt32(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = __strictParseInt32(output["max"]);
    }
    return contents;
};
var deserializeAws_ec2VCpuInfo = function (output, context) {
    var contents = {
        DefaultVCpus: undefined,
        DefaultCores: undefined,
        DefaultThreadsPerCore: undefined,
        ValidCores: undefined,
        ValidThreadsPerCore: undefined,
    };
    if (output["defaultVCpus"] !== undefined) {
        contents.DefaultVCpus = __strictParseInt32(output["defaultVCpus"]);
    }
    if (output["defaultCores"] !== undefined) {
        contents.DefaultCores = __strictParseInt32(output["defaultCores"]);
    }
    if (output["defaultThreadsPerCore"] !== undefined) {
        contents.DefaultThreadsPerCore = __strictParseInt32(output["defaultThreadsPerCore"]);
    }
    if (output.validCores === "") {
        contents.ValidCores = [];
    }
    else if (output["validCores"] !== undefined && output["validCores"]["item"] !== undefined) {
        contents.ValidCores = deserializeAws_ec2CoreCountList(__getArrayIfSingleItem(output["validCores"]["item"]), context);
    }
    if (output.validThreadsPerCore === "") {
        contents.ValidThreadsPerCore = [];
    }
    else if (output["validThreadsPerCore"] !== undefined && output["validThreadsPerCore"]["item"] !== undefined) {
        contents.ValidThreadsPerCore = deserializeAws_ec2ThreadsPerCoreList(__getArrayIfSingleItem(output["validThreadsPerCore"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2VgwTelemetry = function (output, context) {
    var contents = {
        AcceptedRouteCount: undefined,
        LastStatusChange: undefined,
        OutsideIpAddress: undefined,
        Status: undefined,
        StatusMessage: undefined,
        CertificateArn: undefined,
    };
    if (output["acceptedRouteCount"] !== undefined) {
        contents.AcceptedRouteCount = __strictParseInt32(output["acceptedRouteCount"]);
    }
    if (output["lastStatusChange"] !== undefined) {
        contents.LastStatusChange = __expectNonNull(__parseRfc3339DateTime(output["lastStatusChange"]));
    }
    if (output["outsideIpAddress"] !== undefined) {
        contents.OutsideIpAddress = __expectString(output["outsideIpAddress"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["certificateArn"] !== undefined) {
        contents.CertificateArn = __expectString(output["certificateArn"]);
    }
    return contents;
};
var deserializeAws_ec2VgwTelemetryList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VgwTelemetry(entry, context);
    });
};
var deserializeAws_ec2VirtualizationTypeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
};
var deserializeAws_ec2Volume = function (output, context) {
    var contents = {
        Attachments: undefined,
        AvailabilityZone: undefined,
        CreateTime: undefined,
        Encrypted: undefined,
        KmsKeyId: undefined,
        OutpostArn: undefined,
        Size: undefined,
        SnapshotId: undefined,
        State: undefined,
        VolumeId: undefined,
        Iops: undefined,
        Tags: undefined,
        VolumeType: undefined,
        FastRestored: undefined,
        MultiAttachEnabled: undefined,
        Throughput: undefined,
    };
    if (output.attachmentSet === "") {
        contents.Attachments = [];
    }
    else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
        contents.Attachments = deserializeAws_ec2VolumeAttachmentList(__getArrayIfSingleItem(output["attachmentSet"]["item"]), context);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["createTime"]));
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["encrypted"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["kmsKeyId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output["size"] !== undefined) {
        contents.Size = __strictParseInt32(output["size"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = __expectString(output["snapshotId"]);
    }
    if (output["status"] !== undefined) {
        contents.State = __expectString(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["iops"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["volumeType"] !== undefined) {
        contents.VolumeType = __expectString(output["volumeType"]);
    }
    if (output["fastRestored"] !== undefined) {
        contents.FastRestored = __parseBoolean(output["fastRestored"]);
    }
    if (output["multiAttachEnabled"] !== undefined) {
        contents.MultiAttachEnabled = __parseBoolean(output["multiAttachEnabled"]);
    }
    if (output["throughput"] !== undefined) {
        contents.Throughput = __strictParseInt32(output["throughput"]);
    }
    return contents;
};
var deserializeAws_ec2VolumeAttachment = function (output, context) {
    var contents = {
        AttachTime: undefined,
        Device: undefined,
        InstanceId: undefined,
        State: undefined,
        VolumeId: undefined,
        DeleteOnTermination: undefined,
    };
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = __expectNonNull(__parseRfc3339DateTime(output["attachTime"]));
    }
    if (output["device"] !== undefined) {
        contents.Device = __expectString(output["device"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    if (output["status"] !== undefined) {
        contents.State = __expectString(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
    }
    return contents;
};
var deserializeAws_ec2VolumeAttachmentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeAttachment(entry, context);
    });
};
var deserializeAws_ec2VolumeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Volume(entry, context);
    });
};
var deserializeAws_ec2VolumeModification = function (output, context) {
    var contents = {
        VolumeId: undefined,
        ModificationState: undefined,
        StatusMessage: undefined,
        TargetSize: undefined,
        TargetIops: undefined,
        TargetVolumeType: undefined,
        TargetThroughput: undefined,
        TargetMultiAttachEnabled: undefined,
        OriginalSize: undefined,
        OriginalIops: undefined,
        OriginalVolumeType: undefined,
        OriginalThroughput: undefined,
        OriginalMultiAttachEnabled: undefined,
        Progress: undefined,
        StartTime: undefined,
        EndTime: undefined,
    };
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["modificationState"] !== undefined) {
        contents.ModificationState = __expectString(output["modificationState"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    if (output["targetSize"] !== undefined) {
        contents.TargetSize = __strictParseInt32(output["targetSize"]);
    }
    if (output["targetIops"] !== undefined) {
        contents.TargetIops = __strictParseInt32(output["targetIops"]);
    }
    if (output["targetVolumeType"] !== undefined) {
        contents.TargetVolumeType = __expectString(output["targetVolumeType"]);
    }
    if (output["targetThroughput"] !== undefined) {
        contents.TargetThroughput = __strictParseInt32(output["targetThroughput"]);
    }
    if (output["targetMultiAttachEnabled"] !== undefined) {
        contents.TargetMultiAttachEnabled = __parseBoolean(output["targetMultiAttachEnabled"]);
    }
    if (output["originalSize"] !== undefined) {
        contents.OriginalSize = __strictParseInt32(output["originalSize"]);
    }
    if (output["originalIops"] !== undefined) {
        contents.OriginalIops = __strictParseInt32(output["originalIops"]);
    }
    if (output["originalVolumeType"] !== undefined) {
        contents.OriginalVolumeType = __expectString(output["originalVolumeType"]);
    }
    if (output["originalThroughput"] !== undefined) {
        contents.OriginalThroughput = __strictParseInt32(output["originalThroughput"]);
    }
    if (output["originalMultiAttachEnabled"] !== undefined) {
        contents.OriginalMultiAttachEnabled = __parseBoolean(output["originalMultiAttachEnabled"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = __strictParseLong(output["progress"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTime(output["startTime"]));
    }
    if (output["endTime"] !== undefined) {
        contents.EndTime = __expectNonNull(__parseRfc3339DateTime(output["endTime"]));
    }
    return contents;
};
var deserializeAws_ec2VolumeModificationList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeModification(entry, context);
    });
};
var deserializeAws_ec2VolumeStatusAction = function (output, context) {
    var contents = {
        Code: undefined,
        Description: undefined,
        EventId: undefined,
        EventType: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["eventId"] !== undefined) {
        contents.EventId = __expectString(output["eventId"]);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = __expectString(output["eventType"]);
    }
    return contents;
};
var deserializeAws_ec2VolumeStatusActionsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusAction(entry, context);
    });
};
var deserializeAws_ec2VolumeStatusAttachmentStatus = function (output, context) {
    var contents = {
        IoPerformance: undefined,
        InstanceId: undefined,
    };
    if (output["ioPerformance"] !== undefined) {
        contents.IoPerformance = __expectString(output["ioPerformance"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
var deserializeAws_ec2VolumeStatusAttachmentStatusList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusAttachmentStatus(entry, context);
    });
};
var deserializeAws_ec2VolumeStatusDetails = function (output, context) {
    var contents = {
        Name: undefined,
        Status: undefined,
    };
    if (output["name"] !== undefined) {
        contents.Name = __expectString(output["name"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
var deserializeAws_ec2VolumeStatusDetailsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusDetails(entry, context);
    });
};
var deserializeAws_ec2VolumeStatusEvent = function (output, context) {
    var contents = {
        Description: undefined,
        EventId: undefined,
        EventType: undefined,
        NotAfter: undefined,
        NotBefore: undefined,
        InstanceId: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = __expectString(output["description"]);
    }
    if (output["eventId"] !== undefined) {
        contents.EventId = __expectString(output["eventId"]);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = __expectString(output["eventType"]);
    }
    if (output["notAfter"] !== undefined) {
        contents.NotAfter = __expectNonNull(__parseRfc3339DateTime(output["notAfter"]));
    }
    if (output["notBefore"] !== undefined) {
        contents.NotBefore = __expectNonNull(__parseRfc3339DateTime(output["notBefore"]));
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["instanceId"]);
    }
    return contents;
};
var deserializeAws_ec2VolumeStatusEventsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusEvent(entry, context);
    });
};
var deserializeAws_ec2VolumeStatusInfo = function (output, context) {
    var contents = {
        Details: undefined,
        Status: undefined,
    };
    if (output.details === "") {
        contents.Details = [];
    }
    else if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
        contents.Details = deserializeAws_ec2VolumeStatusDetailsList(__getArrayIfSingleItem(output["details"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = __expectString(output["status"]);
    }
    return contents;
};
var deserializeAws_ec2VolumeStatusItem = function (output, context) {
    var contents = {
        Actions: undefined,
        AvailabilityZone: undefined,
        OutpostArn: undefined,
        Events: undefined,
        VolumeId: undefined,
        VolumeStatus: undefined,
        AttachmentStatuses: undefined,
    };
    if (output.actionsSet === "") {
        contents.Actions = [];
    }
    else if (output["actionsSet"] !== undefined && output["actionsSet"]["item"] !== undefined) {
        contents.Actions = deserializeAws_ec2VolumeStatusActionsList(__getArrayIfSingleItem(output["actionsSet"]["item"]), context);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = __expectString(output["outpostArn"]);
    }
    if (output.eventsSet === "") {
        contents.Events = [];
    }
    else if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
        contents.Events = deserializeAws_ec2VolumeStatusEventsList(__getArrayIfSingleItem(output["eventsSet"]["item"]), context);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = __expectString(output["volumeId"]);
    }
    if (output["volumeStatus"] !== undefined) {
        contents.VolumeStatus = deserializeAws_ec2VolumeStatusInfo(output["volumeStatus"], context);
    }
    if (output.attachmentStatuses === "") {
        contents.AttachmentStatuses = [];
    }
    else if (output["attachmentStatuses"] !== undefined && output["attachmentStatuses"]["item"] !== undefined) {
        contents.AttachmentStatuses = deserializeAws_ec2VolumeStatusAttachmentStatusList(__getArrayIfSingleItem(output["attachmentStatuses"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2VolumeStatusList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusItem(entry, context);
    });
};
var deserializeAws_ec2Vpc = function (output, context) {
    var contents = {
        CidrBlock: undefined,
        DhcpOptionsId: undefined,
        State: undefined,
        VpcId: undefined,
        OwnerId: undefined,
        InstanceTenancy: undefined,
        Ipv6CidrBlockAssociationSet: undefined,
        CidrBlockAssociationSet: undefined,
        IsDefault: undefined,
        Tags: undefined,
    };
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output["dhcpOptionsId"] !== undefined) {
        contents.DhcpOptionsId = __expectString(output["dhcpOptionsId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["instanceTenancy"] !== undefined) {
        contents.InstanceTenancy = __expectString(output["instanceTenancy"]);
    }
    if (output.ipv6CidrBlockAssociationSet === "") {
        contents.Ipv6CidrBlockAssociationSet = [];
    }
    else if (output["ipv6CidrBlockAssociationSet"] !== undefined &&
        output["ipv6CidrBlockAssociationSet"]["item"] !== undefined) {
        contents.Ipv6CidrBlockAssociationSet = deserializeAws_ec2VpcIpv6CidrBlockAssociationSet(__getArrayIfSingleItem(output["ipv6CidrBlockAssociationSet"]["item"]), context);
    }
    if (output.cidrBlockAssociationSet === "") {
        contents.CidrBlockAssociationSet = [];
    }
    else if (output["cidrBlockAssociationSet"] !== undefined &&
        output["cidrBlockAssociationSet"]["item"] !== undefined) {
        contents.CidrBlockAssociationSet = deserializeAws_ec2VpcCidrBlockAssociationSet(__getArrayIfSingleItem(output["cidrBlockAssociationSet"]["item"]), context);
    }
    if (output["isDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["isDefault"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2VpcAttachment = function (output, context) {
    var contents = {
        State: undefined,
        VpcId: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2VpcAttachmentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcAttachment(entry, context);
    });
};
var deserializeAws_ec2VpcCidrBlockAssociation = function (output, context) {
    var contents = {
        AssociationId: undefined,
        CidrBlock: undefined,
        CidrBlockState: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output["cidrBlockState"] !== undefined) {
        contents.CidrBlockState = deserializeAws_ec2VpcCidrBlockState(output["cidrBlockState"], context);
    }
    return contents;
};
var deserializeAws_ec2VpcCidrBlockAssociationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcCidrBlockAssociation(entry, context);
    });
};
var deserializeAws_ec2VpcCidrBlockState = function (output, context) {
    var contents = {
        State: undefined,
        StatusMessage: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["statusMessage"]);
    }
    return contents;
};
var deserializeAws_ec2VpcClassicLink = function (output, context) {
    var contents = {
        ClassicLinkEnabled: undefined,
        Tags: undefined,
        VpcId: undefined,
    };
    if (output["classicLinkEnabled"] !== undefined) {
        contents.ClassicLinkEnabled = __parseBoolean(output["classicLinkEnabled"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    return contents;
};
var deserializeAws_ec2VpcClassicLinkList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcClassicLink(entry, context);
    });
};
var deserializeAws_ec2VpcEndpoint = function (output, context) {
    var contents = {
        VpcEndpointId: undefined,
        VpcEndpointType: undefined,
        VpcId: undefined,
        ServiceName: undefined,
        State: undefined,
        PolicyDocument: undefined,
        RouteTableIds: undefined,
        SubnetIds: undefined,
        Groups: undefined,
        IpAddressType: undefined,
        DnsOptions: undefined,
        PrivateDnsEnabled: undefined,
        RequesterManaged: undefined,
        NetworkInterfaceIds: undefined,
        DnsEntries: undefined,
        CreationTimestamp: undefined,
        Tags: undefined,
        OwnerId: undefined,
        LastError: undefined,
    };
    if (output["vpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = __expectString(output["vpcEndpointId"]);
    }
    if (output["vpcEndpointType"] !== undefined) {
        contents.VpcEndpointType = __expectString(output["vpcEndpointType"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = __expectString(output["serviceName"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["policyDocument"] !== undefined) {
        contents.PolicyDocument = __expectString(output["policyDocument"]);
    }
    if (output.routeTableIdSet === "") {
        contents.RouteTableIds = [];
    }
    else if (output["routeTableIdSet"] !== undefined && output["routeTableIdSet"]["item"] !== undefined) {
        contents.RouteTableIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["routeTableIdSet"]["item"]), context);
    }
    if (output.subnetIdSet === "") {
        contents.SubnetIds = [];
    }
    else if (output["subnetIdSet"] !== undefined && output["subnetIdSet"]["item"] !== undefined) {
        contents.SubnetIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["subnetIdSet"]["item"]), context);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierSet(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
    }
    if (output["ipAddressType"] !== undefined) {
        contents.IpAddressType = __expectString(output["ipAddressType"]);
    }
    if (output["dnsOptions"] !== undefined) {
        contents.DnsOptions = deserializeAws_ec2DnsOptions(output["dnsOptions"], context);
    }
    if (output["privateDnsEnabled"] !== undefined) {
        contents.PrivateDnsEnabled = __parseBoolean(output["privateDnsEnabled"]);
    }
    if (output["requesterManaged"] !== undefined) {
        contents.RequesterManaged = __parseBoolean(output["requesterManaged"]);
    }
    if (output.networkInterfaceIdSet === "") {
        contents.NetworkInterfaceIds = [];
    }
    else if (output["networkInterfaceIdSet"] !== undefined && output["networkInterfaceIdSet"]["item"] !== undefined) {
        contents.NetworkInterfaceIds = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["networkInterfaceIdSet"]["item"]), context);
    }
    if (output.dnsEntrySet === "") {
        contents.DnsEntries = [];
    }
    else if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
        contents.DnsEntries = deserializeAws_ec2DnsEntrySet(__getArrayIfSingleItem(output["dnsEntrySet"]["item"]), context);
    }
    if (output["creationTimestamp"] !== undefined) {
        contents.CreationTimestamp = __expectNonNull(__parseRfc3339DateTime(output["creationTimestamp"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["lastError"] !== undefined) {
        contents.LastError = deserializeAws_ec2LastError(output["lastError"], context);
    }
    return contents;
};
var deserializeAws_ec2VpcEndpointConnection = function (output, context) {
    var contents = {
        ServiceId: undefined,
        VpcEndpointId: undefined,
        VpcEndpointOwner: undefined,
        VpcEndpointState: undefined,
        CreationTimestamp: undefined,
        DnsEntries: undefined,
        NetworkLoadBalancerArns: undefined,
        GatewayLoadBalancerArns: undefined,
        IpAddressType: undefined,
    };
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = __expectString(output["serviceId"]);
    }
    if (output["vpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = __expectString(output["vpcEndpointId"]);
    }
    if (output["vpcEndpointOwner"] !== undefined) {
        contents.VpcEndpointOwner = __expectString(output["vpcEndpointOwner"]);
    }
    if (output["vpcEndpointState"] !== undefined) {
        contents.VpcEndpointState = __expectString(output["vpcEndpointState"]);
    }
    if (output["creationTimestamp"] !== undefined) {
        contents.CreationTimestamp = __expectNonNull(__parseRfc3339DateTime(output["creationTimestamp"]));
    }
    if (output.dnsEntrySet === "") {
        contents.DnsEntries = [];
    }
    else if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
        contents.DnsEntries = deserializeAws_ec2DnsEntrySet(__getArrayIfSingleItem(output["dnsEntrySet"]["item"]), context);
    }
    if (output.networkLoadBalancerArnSet === "") {
        contents.NetworkLoadBalancerArns = [];
    }
    else if (output["networkLoadBalancerArnSet"] !== undefined &&
        output["networkLoadBalancerArnSet"]["item"] !== undefined) {
        contents.NetworkLoadBalancerArns = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["networkLoadBalancerArnSet"]["item"]), context);
    }
    if (output.gatewayLoadBalancerArnSet === "") {
        contents.GatewayLoadBalancerArns = [];
    }
    else if (output["gatewayLoadBalancerArnSet"] !== undefined &&
        output["gatewayLoadBalancerArnSet"]["item"] !== undefined) {
        contents.GatewayLoadBalancerArns = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["gatewayLoadBalancerArnSet"]["item"]), context);
    }
    if (output["ipAddressType"] !== undefined) {
        contents.IpAddressType = __expectString(output["ipAddressType"]);
    }
    return contents;
};
var deserializeAws_ec2VpcEndpointConnectionSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcEndpointConnection(entry, context);
    });
};
var deserializeAws_ec2VpcEndpointSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcEndpoint(entry, context);
    });
};
var deserializeAws_ec2VpcIpv6CidrBlockAssociation = function (output, context) {
    var contents = {
        AssociationId: undefined,
        Ipv6CidrBlock: undefined,
        Ipv6CidrBlockState: undefined,
        NetworkBorderGroup: undefined,
        Ipv6Pool: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = __expectString(output["associationId"]);
    }
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
    }
    if (output["ipv6CidrBlockState"] !== undefined) {
        contents.Ipv6CidrBlockState = deserializeAws_ec2VpcCidrBlockState(output["ipv6CidrBlockState"], context);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
    }
    if (output["ipv6Pool"] !== undefined) {
        contents.Ipv6Pool = __expectString(output["ipv6Pool"]);
    }
    return contents;
};
var deserializeAws_ec2VpcIpv6CidrBlockAssociationSet = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcIpv6CidrBlockAssociation(entry, context);
    });
};
var deserializeAws_ec2VpcList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Vpc(entry, context);
    });
};
var deserializeAws_ec2VpcPeeringConnection = function (output, context) {
    var contents = {
        AccepterVpcInfo: undefined,
        ExpirationTime: undefined,
        RequesterVpcInfo: undefined,
        Status: undefined,
        Tags: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["accepterVpcInfo"] !== undefined) {
        contents.AccepterVpcInfo = deserializeAws_ec2VpcPeeringConnectionVpcInfo(output["accepterVpcInfo"], context);
    }
    if (output["expirationTime"] !== undefined) {
        contents.ExpirationTime = __expectNonNull(__parseRfc3339DateTime(output["expirationTime"]));
    }
    if (output["requesterVpcInfo"] !== undefined) {
        contents.RequesterVpcInfo = deserializeAws_ec2VpcPeeringConnectionVpcInfo(output["requesterVpcInfo"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2VpcPeeringConnectionStateReason(output["status"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
var deserializeAws_ec2VpcPeeringConnectionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcPeeringConnection(entry, context);
    });
};
var deserializeAws_ec2VpcPeeringConnectionOptionsDescription = function (output, context) {
    var contents = {
        AllowDnsResolutionFromRemoteVpc: undefined,
        AllowEgressFromLocalClassicLinkToRemoteVpc: undefined,
        AllowEgressFromLocalVpcToRemoteClassicLink: undefined,
    };
    if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
        contents.AllowDnsResolutionFromRemoteVpc = __parseBoolean(output["allowDnsResolutionFromRemoteVpc"]);
    }
    if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
        contents.AllowEgressFromLocalClassicLinkToRemoteVpc = __parseBoolean(output["allowEgressFromLocalClassicLinkToRemoteVpc"]);
    }
    if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
        contents.AllowEgressFromLocalVpcToRemoteClassicLink = __parseBoolean(output["allowEgressFromLocalVpcToRemoteClassicLink"]);
    }
    return contents;
};
var deserializeAws_ec2VpcPeeringConnectionStateReason = function (output, context) {
    var contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = __expectString(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = __expectString(output["message"]);
    }
    return contents;
};
var deserializeAws_ec2VpcPeeringConnectionVpcInfo = function (output, context) {
    var contents = {
        CidrBlock: undefined,
        Ipv6CidrBlockSet: undefined,
        CidrBlockSet: undefined,
        OwnerId: undefined,
        PeeringOptions: undefined,
        VpcId: undefined,
        Region: undefined,
    };
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["cidrBlock"]);
    }
    if (output.ipv6CidrBlockSet === "") {
        contents.Ipv6CidrBlockSet = [];
    }
    else if (output["ipv6CidrBlockSet"] !== undefined && output["ipv6CidrBlockSet"]["item"] !== undefined) {
        contents.Ipv6CidrBlockSet = deserializeAws_ec2Ipv6CidrBlockSet(__getArrayIfSingleItem(output["ipv6CidrBlockSet"]["item"]), context);
    }
    if (output.cidrBlockSet === "") {
        contents.CidrBlockSet = [];
    }
    else if (output["cidrBlockSet"] !== undefined && output["cidrBlockSet"]["item"] !== undefined) {
        contents.CidrBlockSet = deserializeAws_ec2CidrBlockSet(__getArrayIfSingleItem(output["cidrBlockSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = __expectString(output["ownerId"]);
    }
    if (output["peeringOptions"] !== undefined) {
        contents.PeeringOptions = deserializeAws_ec2VpcPeeringConnectionOptionsDescription(output["peeringOptions"], context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = __expectString(output["vpcId"]);
    }
    if (output["region"] !== undefined) {
        contents.Region = __expectString(output["region"]);
    }
    return contents;
};
var deserializeAws_ec2VpnConnection = function (output, context) {
    var contents = {
        CustomerGatewayConfiguration: undefined,
        CustomerGatewayId: undefined,
        Category: undefined,
        State: undefined,
        Type: undefined,
        VpnConnectionId: undefined,
        VpnGatewayId: undefined,
        TransitGatewayId: undefined,
        CoreNetworkArn: undefined,
        CoreNetworkAttachmentArn: undefined,
        GatewayAssociationState: undefined,
        Options: undefined,
        Routes: undefined,
        Tags: undefined,
        VgwTelemetry: undefined,
    };
    if (output["customerGatewayConfiguration"] !== undefined) {
        contents.CustomerGatewayConfiguration = __expectString(output["customerGatewayConfiguration"]);
    }
    if (output["customerGatewayId"] !== undefined) {
        contents.CustomerGatewayId = __expectString(output["customerGatewayId"]);
    }
    if (output["category"] !== undefined) {
        contents.Category = __expectString(output["category"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output["vpnConnectionId"] !== undefined) {
        contents.VpnConnectionId = __expectString(output["vpnConnectionId"]);
    }
    if (output["vpnGatewayId"] !== undefined) {
        contents.VpnGatewayId = __expectString(output["vpnGatewayId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
    }
    if (output["coreNetworkArn"] !== undefined) {
        contents.CoreNetworkArn = __expectString(output["coreNetworkArn"]);
    }
    if (output["coreNetworkAttachmentArn"] !== undefined) {
        contents.CoreNetworkAttachmentArn = __expectString(output["coreNetworkAttachmentArn"]);
    }
    if (output["gatewayAssociationState"] !== undefined) {
        contents.GatewayAssociationState = __expectString(output["gatewayAssociationState"]);
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2VpnConnectionOptions(output["options"], context);
    }
    if (output.routes === "") {
        contents.Routes = [];
    }
    else if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2VpnStaticRouteList(__getArrayIfSingleItem(output["routes"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    if (output.vgwTelemetry === "") {
        contents.VgwTelemetry = [];
    }
    else if (output["vgwTelemetry"] !== undefined && output["vgwTelemetry"]["item"] !== undefined) {
        contents.VgwTelemetry = deserializeAws_ec2VgwTelemetryList(__getArrayIfSingleItem(output["vgwTelemetry"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2VpnConnectionDeviceType = function (output, context) {
    var contents = {
        VpnConnectionDeviceTypeId: undefined,
        Vendor: undefined,
        Platform: undefined,
        Software: undefined,
    };
    if (output["vpnConnectionDeviceTypeId"] !== undefined) {
        contents.VpnConnectionDeviceTypeId = __expectString(output["vpnConnectionDeviceTypeId"]);
    }
    if (output["vendor"] !== undefined) {
        contents.Vendor = __expectString(output["vendor"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = __expectString(output["platform"]);
    }
    if (output["software"] !== undefined) {
        contents.Software = __expectString(output["software"]);
    }
    return contents;
};
var deserializeAws_ec2VpnConnectionDeviceTypeList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpnConnectionDeviceType(entry, context);
    });
};
var deserializeAws_ec2VpnConnectionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpnConnection(entry, context);
    });
};
var deserializeAws_ec2VpnConnectionOptions = function (output, context) {
    var contents = {
        EnableAcceleration: undefined,
        StaticRoutesOnly: undefined,
        LocalIpv4NetworkCidr: undefined,
        RemoteIpv4NetworkCidr: undefined,
        LocalIpv6NetworkCidr: undefined,
        RemoteIpv6NetworkCidr: undefined,
        TunnelInsideIpVersion: undefined,
        TunnelOptions: undefined,
    };
    if (output["enableAcceleration"] !== undefined) {
        contents.EnableAcceleration = __parseBoolean(output["enableAcceleration"]);
    }
    if (output["staticRoutesOnly"] !== undefined) {
        contents.StaticRoutesOnly = __parseBoolean(output["staticRoutesOnly"]);
    }
    if (output["localIpv4NetworkCidr"] !== undefined) {
        contents.LocalIpv4NetworkCidr = __expectString(output["localIpv4NetworkCidr"]);
    }
    if (output["remoteIpv4NetworkCidr"] !== undefined) {
        contents.RemoteIpv4NetworkCidr = __expectString(output["remoteIpv4NetworkCidr"]);
    }
    if (output["localIpv6NetworkCidr"] !== undefined) {
        contents.LocalIpv6NetworkCidr = __expectString(output["localIpv6NetworkCidr"]);
    }
    if (output["remoteIpv6NetworkCidr"] !== undefined) {
        contents.RemoteIpv6NetworkCidr = __expectString(output["remoteIpv6NetworkCidr"]);
    }
    if (output["tunnelInsideIpVersion"] !== undefined) {
        contents.TunnelInsideIpVersion = __expectString(output["tunnelInsideIpVersion"]);
    }
    if (output.tunnelOptionSet === "") {
        contents.TunnelOptions = [];
    }
    else if (output["tunnelOptionSet"] !== undefined && output["tunnelOptionSet"]["item"] !== undefined) {
        contents.TunnelOptions = deserializeAws_ec2TunnelOptionsList(__getArrayIfSingleItem(output["tunnelOptionSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2VpnGateway = function (output, context) {
    var contents = {
        AvailabilityZone: undefined,
        State: undefined,
        Type: undefined,
        VpcAttachments: undefined,
        VpnGatewayId: undefined,
        AmazonSideAsn: undefined,
        Tags: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = __expectString(output["type"]);
    }
    if (output.attachments === "") {
        contents.VpcAttachments = [];
    }
    else if (output["attachments"] !== undefined && output["attachments"]["item"] !== undefined) {
        contents.VpcAttachments = deserializeAws_ec2VpcAttachmentList(__getArrayIfSingleItem(output["attachments"]["item"]), context);
    }
    if (output["vpnGatewayId"] !== undefined) {
        contents.VpnGatewayId = __expectString(output["vpnGatewayId"]);
    }
    if (output["amazonSideAsn"] !== undefined) {
        contents.AmazonSideAsn = __strictParseLong(output["amazonSideAsn"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
    }
    return contents;
};
var deserializeAws_ec2VpnGatewayList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpnGateway(entry, context);
    });
};
var deserializeAws_ec2VpnStaticRoute = function (output, context) {
    var contents = {
        DestinationCidrBlock: undefined,
        Source: undefined,
        State: undefined,
    };
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
    }
    if (output["source"] !== undefined) {
        contents.Source = __expectString(output["source"]);
    }
    if (output["state"] !== undefined) {
        contents.State = __expectString(output["state"]);
    }
    return contents;
};
var deserializeAws_ec2VpnStaticRouteList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpnStaticRoute(entry, context);
    });
};
var deserializeAws_ec2WithdrawByoipCidrResult = function (output, context) {
    var contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                contents = {
                    protocol: protocol,
                    hostname: hostname,
                    port: port,
                    method: "POST",
                    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
                    headers: headers,
                };
                if (resolvedHostname !== undefined) {
                    contents.hostname = resolvedHostname;
                }
                if (body !== undefined) {
                    contents.body = body;
                }
                return [2, new __HttpRequest(contents)];
        }
    });
}); };
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            var parsedObj = xmlParse(encoded, {
                attributeNamePrefix: "",
                ignoreAttributes: false,
                parseNodeValue: false,
                trimValues: false,
                tagValueProcessor: function (val) { return (val.trim() === "" && val.includes("\n") ? "" : decodeHTML(val)); },
            });
            var textNodeName = "#text";
            var key = Object.keys(parsedObj)[0];
            var parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
                parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                delete parsedObjToReturn[textNodeName];
            }
            return __getValueFromTextNode(parsedObjToReturn);
        }
        return {};
    });
};
var buildFormUrlencodedString = function (formEntries) {
    return Object.entries(formEntries)
        .map(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        return __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value);
    })
        .join("&");
};
var loadEc2ErrorCode = function (output, data) {
    if (data.Errors.Error.Code !== undefined) {
        return data.Errors.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
    return "";
};
