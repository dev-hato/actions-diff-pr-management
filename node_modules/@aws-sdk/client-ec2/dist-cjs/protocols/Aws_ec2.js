"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_ec2CreateCarrierGatewayCommand = exports.serializeAws_ec2CreateCapacityReservationFleetCommand = exports.serializeAws_ec2CreateCapacityReservationCommand = exports.serializeAws_ec2CopySnapshotCommand = exports.serializeAws_ec2CopyImageCommand = exports.serializeAws_ec2CopyFpgaImageCommand = exports.serializeAws_ec2ConfirmProductInstanceCommand = exports.serializeAws_ec2CancelSpotInstanceRequestsCommand = exports.serializeAws_ec2CancelSpotFleetRequestsCommand = exports.serializeAws_ec2CancelReservedInstancesListingCommand = exports.serializeAws_ec2CancelImportTaskCommand = exports.serializeAws_ec2CancelExportTaskCommand = exports.serializeAws_ec2CancelConversionTaskCommand = exports.serializeAws_ec2CancelCapacityReservationFleetsCommand = exports.serializeAws_ec2CancelCapacityReservationCommand = exports.serializeAws_ec2CancelBundleTaskCommand = exports.serializeAws_ec2BundleInstanceCommand = exports.serializeAws_ec2AuthorizeSecurityGroupIngressCommand = exports.serializeAws_ec2AuthorizeSecurityGroupEgressCommand = exports.serializeAws_ec2AuthorizeClientVpnIngressCommand = exports.serializeAws_ec2AttachVpnGatewayCommand = exports.serializeAws_ec2AttachVolumeCommand = exports.serializeAws_ec2AttachNetworkInterfaceCommand = exports.serializeAws_ec2AttachInternetGatewayCommand = exports.serializeAws_ec2AttachClassicLinkVpcCommand = exports.serializeAws_ec2AssociateVpcCidrBlockCommand = exports.serializeAws_ec2AssociateTrunkInterfaceCommand = exports.serializeAws_ec2AssociateTransitGatewayRouteTableCommand = exports.serializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = exports.serializeAws_ec2AssociateSubnetCidrBlockCommand = exports.serializeAws_ec2AssociateRouteTableCommand = exports.serializeAws_ec2AssociateInstanceEventWindowCommand = exports.serializeAws_ec2AssociateIamInstanceProfileCommand = exports.serializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = exports.serializeAws_ec2AssociateDhcpOptionsCommand = exports.serializeAws_ec2AssociateClientVpnTargetNetworkCommand = exports.serializeAws_ec2AssociateAddressCommand = exports.serializeAws_ec2AssignPrivateIpAddressesCommand = exports.serializeAws_ec2AssignIpv6AddressesCommand = exports.serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = exports.serializeAws_ec2AllocateIpamPoolCidrCommand = exports.serializeAws_ec2AllocateHostsCommand = exports.serializeAws_ec2AllocateAddressCommand = exports.serializeAws_ec2AdvertiseByoipCidrCommand = exports.serializeAws_ec2AcceptVpcPeeringConnectionCommand = exports.serializeAws_ec2AcceptVpcEndpointConnectionsCommand = exports.serializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = exports.serializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = exports.serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = exports.serializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = void 0;
exports.serializeAws_ec2CreateTransitGatewayCommand = exports.serializeAws_ec2CreateTrafficMirrorTargetCommand = exports.serializeAws_ec2CreateTrafficMirrorSessionCommand = exports.serializeAws_ec2CreateTrafficMirrorFilterRuleCommand = exports.serializeAws_ec2CreateTrafficMirrorFilterCommand = exports.serializeAws_ec2CreateTagsCommand = exports.serializeAws_ec2CreateSubnetCidrReservationCommand = exports.serializeAws_ec2CreateSubnetCommand = exports.serializeAws_ec2CreateStoreImageTaskCommand = exports.serializeAws_ec2CreateSpotDatafeedSubscriptionCommand = exports.serializeAws_ec2CreateSnapshotsCommand = exports.serializeAws_ec2CreateSnapshotCommand = exports.serializeAws_ec2CreateSecurityGroupCommand = exports.serializeAws_ec2CreateRouteTableCommand = exports.serializeAws_ec2CreateRouteCommand = exports.serializeAws_ec2CreateRestoreImageTaskCommand = exports.serializeAws_ec2CreateReservedInstancesListingCommand = exports.serializeAws_ec2CreateReplaceRootVolumeTaskCommand = exports.serializeAws_ec2CreatePublicIpv4PoolCommand = exports.serializeAws_ec2CreatePlacementGroupCommand = exports.serializeAws_ec2CreateNetworkInterfacePermissionCommand = exports.serializeAws_ec2CreateNetworkInterfaceCommand = exports.serializeAws_ec2CreateNetworkInsightsPathCommand = exports.serializeAws_ec2CreateNetworkInsightsAccessScopeCommand = exports.serializeAws_ec2CreateNetworkAclEntryCommand = exports.serializeAws_ec2CreateNetworkAclCommand = exports.serializeAws_ec2CreateNatGatewayCommand = exports.serializeAws_ec2CreateManagedPrefixListCommand = exports.serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = exports.serializeAws_ec2CreateLocalGatewayRouteCommand = exports.serializeAws_ec2CreateLaunchTemplateVersionCommand = exports.serializeAws_ec2CreateLaunchTemplateCommand = exports.serializeAws_ec2CreateKeyPairCommand = exports.serializeAws_ec2CreateIpamScopeCommand = exports.serializeAws_ec2CreateIpamPoolCommand = exports.serializeAws_ec2CreateIpamCommand = exports.serializeAws_ec2CreateInternetGatewayCommand = exports.serializeAws_ec2CreateInstanceExportTaskCommand = exports.serializeAws_ec2CreateInstanceEventWindowCommand = exports.serializeAws_ec2CreateImageCommand = exports.serializeAws_ec2CreateFpgaImageCommand = exports.serializeAws_ec2CreateFlowLogsCommand = exports.serializeAws_ec2CreateFleetCommand = exports.serializeAws_ec2CreateEgressOnlyInternetGatewayCommand = exports.serializeAws_ec2CreateDhcpOptionsCommand = exports.serializeAws_ec2CreateDefaultVpcCommand = exports.serializeAws_ec2CreateDefaultSubnetCommand = exports.serializeAws_ec2CreateCustomerGatewayCommand = exports.serializeAws_ec2CreateClientVpnRouteCommand = exports.serializeAws_ec2CreateClientVpnEndpointCommand = void 0;
exports.serializeAws_ec2DeleteRouteCommand = exports.serializeAws_ec2DeleteQueuedReservedInstancesCommand = exports.serializeAws_ec2DeletePublicIpv4PoolCommand = exports.serializeAws_ec2DeletePlacementGroupCommand = exports.serializeAws_ec2DeleteNetworkInterfacePermissionCommand = exports.serializeAws_ec2DeleteNetworkInterfaceCommand = exports.serializeAws_ec2DeleteNetworkInsightsPathCommand = exports.serializeAws_ec2DeleteNetworkInsightsAnalysisCommand = exports.serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand = exports.serializeAws_ec2DeleteNetworkInsightsAccessScopeCommand = exports.serializeAws_ec2DeleteNetworkAclEntryCommand = exports.serializeAws_ec2DeleteNetworkAclCommand = exports.serializeAws_ec2DeleteNatGatewayCommand = exports.serializeAws_ec2DeleteManagedPrefixListCommand = exports.serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = exports.serializeAws_ec2DeleteLocalGatewayRouteCommand = exports.serializeAws_ec2DeleteLaunchTemplateVersionsCommand = exports.serializeAws_ec2DeleteLaunchTemplateCommand = exports.serializeAws_ec2DeleteKeyPairCommand = exports.serializeAws_ec2DeleteIpamScopeCommand = exports.serializeAws_ec2DeleteIpamPoolCommand = exports.serializeAws_ec2DeleteIpamCommand = exports.serializeAws_ec2DeleteInternetGatewayCommand = exports.serializeAws_ec2DeleteInstanceEventWindowCommand = exports.serializeAws_ec2DeleteFpgaImageCommand = exports.serializeAws_ec2DeleteFlowLogsCommand = exports.serializeAws_ec2DeleteFleetsCommand = exports.serializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = exports.serializeAws_ec2DeleteDhcpOptionsCommand = exports.serializeAws_ec2DeleteCustomerGatewayCommand = exports.serializeAws_ec2DeleteClientVpnRouteCommand = exports.serializeAws_ec2DeleteClientVpnEndpointCommand = exports.serializeAws_ec2DeleteCarrierGatewayCommand = exports.serializeAws_ec2CreateVpnGatewayCommand = exports.serializeAws_ec2CreateVpnConnectionRouteCommand = exports.serializeAws_ec2CreateVpnConnectionCommand = exports.serializeAws_ec2CreateVpcPeeringConnectionCommand = exports.serializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = exports.serializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = exports.serializeAws_ec2CreateVpcEndpointCommand = exports.serializeAws_ec2CreateVpcCommand = exports.serializeAws_ec2CreateVolumeCommand = exports.serializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = exports.serializeAws_ec2CreateTransitGatewayRouteTableCommand = exports.serializeAws_ec2CreateTransitGatewayRouteCommand = exports.serializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = exports.serializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = exports.serializeAws_ec2CreateTransitGatewayMulticastDomainCommand = exports.serializeAws_ec2CreateTransitGatewayConnectPeerCommand = exports.serializeAws_ec2CreateTransitGatewayConnectCommand = void 0;
exports.serializeAws_ec2DescribeClientVpnEndpointsCommand = exports.serializeAws_ec2DescribeClientVpnConnectionsCommand = exports.serializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = exports.serializeAws_ec2DescribeClassicLinkInstancesCommand = exports.serializeAws_ec2DescribeCarrierGatewaysCommand = exports.serializeAws_ec2DescribeCapacityReservationsCommand = exports.serializeAws_ec2DescribeCapacityReservationFleetsCommand = exports.serializeAws_ec2DescribeByoipCidrsCommand = exports.serializeAws_ec2DescribeBundleTasksCommand = exports.serializeAws_ec2DescribeAvailabilityZonesCommand = exports.serializeAws_ec2DescribeAggregateIdFormatCommand = exports.serializeAws_ec2DescribeAddressesAttributeCommand = exports.serializeAws_ec2DescribeAddressesCommand = exports.serializeAws_ec2DescribeAccountAttributesCommand = exports.serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = exports.serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = exports.serializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = exports.serializeAws_ec2DeregisterImageCommand = exports.serializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand = exports.serializeAws_ec2DeprovisionIpamPoolCidrCommand = exports.serializeAws_ec2DeprovisionByoipCidrCommand = exports.serializeAws_ec2DeleteVpnGatewayCommand = exports.serializeAws_ec2DeleteVpnConnectionRouteCommand = exports.serializeAws_ec2DeleteVpnConnectionCommand = exports.serializeAws_ec2DeleteVpcPeeringConnectionCommand = exports.serializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = exports.serializeAws_ec2DeleteVpcEndpointsCommand = exports.serializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = exports.serializeAws_ec2DeleteVpcCommand = exports.serializeAws_ec2DeleteVolumeCommand = exports.serializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = exports.serializeAws_ec2DeleteTransitGatewayRouteTableCommand = exports.serializeAws_ec2DeleteTransitGatewayRouteCommand = exports.serializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = exports.serializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = exports.serializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = exports.serializeAws_ec2DeleteTransitGatewayConnectPeerCommand = exports.serializeAws_ec2DeleteTransitGatewayConnectCommand = exports.serializeAws_ec2DeleteTransitGatewayCommand = exports.serializeAws_ec2DeleteTrafficMirrorTargetCommand = exports.serializeAws_ec2DeleteTrafficMirrorSessionCommand = exports.serializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = exports.serializeAws_ec2DeleteTrafficMirrorFilterCommand = exports.serializeAws_ec2DeleteTagsCommand = exports.serializeAws_ec2DeleteSubnetCidrReservationCommand = exports.serializeAws_ec2DeleteSubnetCommand = exports.serializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = exports.serializeAws_ec2DeleteSnapshotCommand = exports.serializeAws_ec2DeleteSecurityGroupCommand = exports.serializeAws_ec2DeleteRouteTableCommand = void 0;
exports.serializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = exports.serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = exports.serializeAws_ec2DescribeLocalGatewaysCommand = exports.serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = exports.serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = exports.serializeAws_ec2DescribeLocalGatewayRouteTablesCommand = exports.serializeAws_ec2DescribeLaunchTemplateVersionsCommand = exports.serializeAws_ec2DescribeLaunchTemplatesCommand = exports.serializeAws_ec2DescribeKeyPairsCommand = exports.serializeAws_ec2DescribeIpv6PoolsCommand = exports.serializeAws_ec2DescribeIpamScopesCommand = exports.serializeAws_ec2DescribeIpamsCommand = exports.serializeAws_ec2DescribeIpamPoolsCommand = exports.serializeAws_ec2DescribeInternetGatewaysCommand = exports.serializeAws_ec2DescribeInstanceTypesCommand = exports.serializeAws_ec2DescribeInstanceTypeOfferingsCommand = exports.serializeAws_ec2DescribeInstanceStatusCommand = exports.serializeAws_ec2DescribeInstancesCommand = exports.serializeAws_ec2DescribeInstanceEventWindowsCommand = exports.serializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = exports.serializeAws_ec2DescribeInstanceCreditSpecificationsCommand = exports.serializeAws_ec2DescribeInstanceAttributeCommand = exports.serializeAws_ec2DescribeImportSnapshotTasksCommand = exports.serializeAws_ec2DescribeImportImageTasksCommand = exports.serializeAws_ec2DescribeImagesCommand = exports.serializeAws_ec2DescribeImageAttributeCommand = exports.serializeAws_ec2DescribeIdFormatCommand = exports.serializeAws_ec2DescribeIdentityIdFormatCommand = exports.serializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = exports.serializeAws_ec2DescribeHostsCommand = exports.serializeAws_ec2DescribeHostReservationsCommand = exports.serializeAws_ec2DescribeHostReservationOfferingsCommand = exports.serializeAws_ec2DescribeFpgaImagesCommand = exports.serializeAws_ec2DescribeFpgaImageAttributeCommand = exports.serializeAws_ec2DescribeFlowLogsCommand = exports.serializeAws_ec2DescribeFleetsCommand = exports.serializeAws_ec2DescribeFleetInstancesCommand = exports.serializeAws_ec2DescribeFleetHistoryCommand = exports.serializeAws_ec2DescribeFastSnapshotRestoresCommand = exports.serializeAws_ec2DescribeFastLaunchImagesCommand = exports.serializeAws_ec2DescribeExportTasksCommand = exports.serializeAws_ec2DescribeExportImageTasksCommand = exports.serializeAws_ec2DescribeElasticGpusCommand = exports.serializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = exports.serializeAws_ec2DescribeDhcpOptionsCommand = exports.serializeAws_ec2DescribeCustomerGatewaysCommand = exports.serializeAws_ec2DescribeConversionTasksCommand = exports.serializeAws_ec2DescribeCoipPoolsCommand = exports.serializeAws_ec2DescribeClientVpnTargetNetworksCommand = exports.serializeAws_ec2DescribeClientVpnRoutesCommand = void 0;
exports.serializeAws_ec2DescribeTransitGatewaysCommand = exports.serializeAws_ec2DescribeTransitGatewayRouteTablesCommand = exports.serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = exports.serializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = exports.serializeAws_ec2DescribeTransitGatewayConnectsCommand = exports.serializeAws_ec2DescribeTransitGatewayConnectPeersCommand = exports.serializeAws_ec2DescribeTransitGatewayAttachmentsCommand = exports.serializeAws_ec2DescribeTrafficMirrorTargetsCommand = exports.serializeAws_ec2DescribeTrafficMirrorSessionsCommand = exports.serializeAws_ec2DescribeTrafficMirrorFiltersCommand = exports.serializeAws_ec2DescribeTagsCommand = exports.serializeAws_ec2DescribeSubnetsCommand = exports.serializeAws_ec2DescribeStoreImageTasksCommand = exports.serializeAws_ec2DescribeStaleSecurityGroupsCommand = exports.serializeAws_ec2DescribeSpotPriceHistoryCommand = exports.serializeAws_ec2DescribeSpotInstanceRequestsCommand = exports.serializeAws_ec2DescribeSpotFleetRequestsCommand = exports.serializeAws_ec2DescribeSpotFleetRequestHistoryCommand = exports.serializeAws_ec2DescribeSpotFleetInstancesCommand = exports.serializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = exports.serializeAws_ec2DescribeSnapshotTierStatusCommand = exports.serializeAws_ec2DescribeSnapshotsCommand = exports.serializeAws_ec2DescribeSnapshotAttributeCommand = exports.serializeAws_ec2DescribeSecurityGroupsCommand = exports.serializeAws_ec2DescribeSecurityGroupRulesCommand = exports.serializeAws_ec2DescribeSecurityGroupReferencesCommand = exports.serializeAws_ec2DescribeScheduledInstancesCommand = exports.serializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = exports.serializeAws_ec2DescribeRouteTablesCommand = exports.serializeAws_ec2DescribeReservedInstancesOfferingsCommand = exports.serializeAws_ec2DescribeReservedInstancesModificationsCommand = exports.serializeAws_ec2DescribeReservedInstancesListingsCommand = exports.serializeAws_ec2DescribeReservedInstancesCommand = exports.serializeAws_ec2DescribeReplaceRootVolumeTasksCommand = exports.serializeAws_ec2DescribeRegionsCommand = exports.serializeAws_ec2DescribePublicIpv4PoolsCommand = exports.serializeAws_ec2DescribePrincipalIdFormatCommand = exports.serializeAws_ec2DescribePrefixListsCommand = exports.serializeAws_ec2DescribePlacementGroupsCommand = exports.serializeAws_ec2DescribeNetworkInterfacesCommand = exports.serializeAws_ec2DescribeNetworkInterfacePermissionsCommand = exports.serializeAws_ec2DescribeNetworkInterfaceAttributeCommand = exports.serializeAws_ec2DescribeNetworkInsightsPathsCommand = exports.serializeAws_ec2DescribeNetworkInsightsAnalysesCommand = exports.serializeAws_ec2DescribeNetworkInsightsAccessScopesCommand = exports.serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand = exports.serializeAws_ec2DescribeNetworkAclsCommand = exports.serializeAws_ec2DescribeNatGatewaysCommand = exports.serializeAws_ec2DescribeMovingAddressesCommand = exports.serializeAws_ec2DescribeManagedPrefixListsCommand = void 0;
exports.serializeAws_ec2EnableIpamOrganizationAdminAccountCommand = exports.serializeAws_ec2EnableImageDeprecationCommand = exports.serializeAws_ec2EnableFastSnapshotRestoresCommand = exports.serializeAws_ec2EnableFastLaunchCommand = exports.serializeAws_ec2EnableEbsEncryptionByDefaultCommand = exports.serializeAws_ec2DisassociateVpcCidrBlockCommand = exports.serializeAws_ec2DisassociateTrunkInterfaceCommand = exports.serializeAws_ec2DisassociateTransitGatewayRouteTableCommand = exports.serializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = exports.serializeAws_ec2DisassociateSubnetCidrBlockCommand = exports.serializeAws_ec2DisassociateRouteTableCommand = exports.serializeAws_ec2DisassociateInstanceEventWindowCommand = exports.serializeAws_ec2DisassociateIamInstanceProfileCommand = exports.serializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = exports.serializeAws_ec2DisassociateClientVpnTargetNetworkCommand = exports.serializeAws_ec2DisassociateAddressCommand = exports.serializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = exports.serializeAws_ec2DisableVpcClassicLinkCommand = exports.serializeAws_ec2DisableVgwRoutePropagationCommand = exports.serializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = exports.serializeAws_ec2DisableSerialConsoleAccessCommand = exports.serializeAws_ec2DisableIpamOrganizationAdminAccountCommand = exports.serializeAws_ec2DisableImageDeprecationCommand = exports.serializeAws_ec2DisableFastSnapshotRestoresCommand = exports.serializeAws_ec2DisableFastLaunchCommand = exports.serializeAws_ec2DisableEbsEncryptionByDefaultCommand = exports.serializeAws_ec2DetachVpnGatewayCommand = exports.serializeAws_ec2DetachVolumeCommand = exports.serializeAws_ec2DetachNetworkInterfaceCommand = exports.serializeAws_ec2DetachInternetGatewayCommand = exports.serializeAws_ec2DetachClassicLinkVpcCommand = exports.serializeAws_ec2DescribeVpnGatewaysCommand = exports.serializeAws_ec2DescribeVpnConnectionsCommand = exports.serializeAws_ec2DescribeVpcsCommand = exports.serializeAws_ec2DescribeVpcPeeringConnectionsCommand = exports.serializeAws_ec2DescribeVpcEndpointServicesCommand = exports.serializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = exports.serializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = exports.serializeAws_ec2DescribeVpcEndpointsCommand = exports.serializeAws_ec2DescribeVpcEndpointConnectionsCommand = exports.serializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = exports.serializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = exports.serializeAws_ec2DescribeVpcClassicLinkCommand = exports.serializeAws_ec2DescribeVpcAttributeCommand = exports.serializeAws_ec2DescribeVolumeStatusCommand = exports.serializeAws_ec2DescribeVolumesModificationsCommand = exports.serializeAws_ec2DescribeVolumesCommand = exports.serializeAws_ec2DescribeVolumeAttributeCommand = exports.serializeAws_ec2DescribeTrunkInterfaceAssociationsCommand = exports.serializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = void 0;
exports.serializeAws_ec2ImportSnapshotCommand = exports.serializeAws_ec2ImportKeyPairCommand = exports.serializeAws_ec2ImportInstanceCommand = exports.serializeAws_ec2ImportImageCommand = exports.serializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = exports.serializeAws_ec2GetVpnConnectionDeviceTypesCommand = exports.serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand = exports.serializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = exports.serializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = exports.serializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = exports.serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = exports.serializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = exports.serializeAws_ec2GetSubnetCidrReservationsCommand = exports.serializeAws_ec2GetSpotPlacementScoresCommand = exports.serializeAws_ec2GetSerialConsoleAccessStatusCommand = exports.serializeAws_ec2GetReservedInstancesExchangeQuoteCommand = exports.serializeAws_ec2GetPasswordDataCommand = exports.serializeAws_ec2GetNetworkInsightsAccessScopeContentCommand = exports.serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand = exports.serializeAws_ec2GetManagedPrefixListEntriesCommand = exports.serializeAws_ec2GetManagedPrefixListAssociationsCommand = exports.serializeAws_ec2GetLaunchTemplateDataCommand = exports.serializeAws_ec2GetIpamResourceCidrsCommand = exports.serializeAws_ec2GetIpamPoolCidrsCommand = exports.serializeAws_ec2GetIpamPoolAllocationsCommand = exports.serializeAws_ec2GetIpamAddressHistoryCommand = exports.serializeAws_ec2GetInstanceUefiDataCommand = exports.serializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand = exports.serializeAws_ec2GetHostReservationPurchasePreviewCommand = exports.serializeAws_ec2GetGroupsForCapacityReservationCommand = exports.serializeAws_ec2GetFlowLogsIntegrationTemplateCommand = exports.serializeAws_ec2GetEbsEncryptionByDefaultCommand = exports.serializeAws_ec2GetEbsDefaultKmsKeyIdCommand = exports.serializeAws_ec2GetDefaultCreditSpecificationCommand = exports.serializeAws_ec2GetConsoleScreenshotCommand = exports.serializeAws_ec2GetConsoleOutputCommand = exports.serializeAws_ec2GetCoipPoolUsageCommand = exports.serializeAws_ec2GetCapacityReservationUsageCommand = exports.serializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = exports.serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = exports.serializeAws_ec2ExportTransitGatewayRoutesCommand = exports.serializeAws_ec2ExportImageCommand = exports.serializeAws_ec2ExportClientVpnClientConfigurationCommand = exports.serializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = exports.serializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = exports.serializeAws_ec2EnableVpcClassicLinkCommand = exports.serializeAws_ec2EnableVolumeIOCommand = exports.serializeAws_ec2EnableVgwRoutePropagationCommand = exports.serializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = exports.serializeAws_ec2EnableSerialConsoleAccessCommand = void 0;
exports.serializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = exports.serializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = exports.serializeAws_ec2ModifyVpcEndpointCommand = exports.serializeAws_ec2ModifyVpcAttributeCommand = exports.serializeAws_ec2ModifyVolumeAttributeCommand = exports.serializeAws_ec2ModifyVolumeCommand = exports.serializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = exports.serializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = exports.serializeAws_ec2ModifyTransitGatewayCommand = exports.serializeAws_ec2ModifyTrafficMirrorSessionCommand = exports.serializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = exports.serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = exports.serializeAws_ec2ModifySubnetAttributeCommand = exports.serializeAws_ec2ModifySpotFleetRequestCommand = exports.serializeAws_ec2ModifySnapshotTierCommand = exports.serializeAws_ec2ModifySnapshotAttributeCommand = exports.serializeAws_ec2ModifySecurityGroupRulesCommand = exports.serializeAws_ec2ModifyReservedInstancesCommand = exports.serializeAws_ec2ModifyPrivateDnsNameOptionsCommand = exports.serializeAws_ec2ModifyNetworkInterfaceAttributeCommand = exports.serializeAws_ec2ModifyManagedPrefixListCommand = exports.serializeAws_ec2ModifyLaunchTemplateCommand = exports.serializeAws_ec2ModifyIpamScopeCommand = exports.serializeAws_ec2ModifyIpamResourceCidrCommand = exports.serializeAws_ec2ModifyIpamPoolCommand = exports.serializeAws_ec2ModifyIpamCommand = exports.serializeAws_ec2ModifyInstancePlacementCommand = exports.serializeAws_ec2ModifyInstanceMetadataOptionsCommand = exports.serializeAws_ec2ModifyInstanceMaintenanceOptionsCommand = exports.serializeAws_ec2ModifyInstanceEventWindowCommand = exports.serializeAws_ec2ModifyInstanceEventStartTimeCommand = exports.serializeAws_ec2ModifyInstanceCreditSpecificationCommand = exports.serializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = exports.serializeAws_ec2ModifyInstanceAttributeCommand = exports.serializeAws_ec2ModifyImageAttributeCommand = exports.serializeAws_ec2ModifyIdFormatCommand = exports.serializeAws_ec2ModifyIdentityIdFormatCommand = exports.serializeAws_ec2ModifyHostsCommand = exports.serializeAws_ec2ModifyFpgaImageAttributeCommand = exports.serializeAws_ec2ModifyFleetCommand = exports.serializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = exports.serializeAws_ec2ModifyDefaultCreditSpecificationCommand = exports.serializeAws_ec2ModifyClientVpnEndpointCommand = exports.serializeAws_ec2ModifyCapacityReservationFleetCommand = exports.serializeAws_ec2ModifyCapacityReservationCommand = exports.serializeAws_ec2ModifyAvailabilityZoneGroupCommand = exports.serializeAws_ec2ModifyAddressAttributeCommand = exports.serializeAws_ec2ListSnapshotsInRecycleBinCommand = exports.serializeAws_ec2ListImagesInRecycleBinCommand = exports.serializeAws_ec2ImportVolumeCommand = void 0;
exports.serializeAws_ec2RestoreSnapshotFromRecycleBinCommand = exports.serializeAws_ec2RestoreManagedPrefixListVersionCommand = exports.serializeAws_ec2RestoreImageFromRecycleBinCommand = exports.serializeAws_ec2RestoreAddressToClassicCommand = exports.serializeAws_ec2ResetSnapshotAttributeCommand = exports.serializeAws_ec2ResetNetworkInterfaceAttributeCommand = exports.serializeAws_ec2ResetInstanceAttributeCommand = exports.serializeAws_ec2ResetImageAttributeCommand = exports.serializeAws_ec2ResetFpgaImageAttributeCommand = exports.serializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = exports.serializeAws_ec2ResetAddressAttributeCommand = exports.serializeAws_ec2RequestSpotInstancesCommand = exports.serializeAws_ec2RequestSpotFleetCommand = exports.serializeAws_ec2ReportInstanceStatusCommand = exports.serializeAws_ec2ReplaceTransitGatewayRouteCommand = exports.serializeAws_ec2ReplaceRouteTableAssociationCommand = exports.serializeAws_ec2ReplaceRouteCommand = exports.serializeAws_ec2ReplaceNetworkAclEntryCommand = exports.serializeAws_ec2ReplaceNetworkAclAssociationCommand = exports.serializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = exports.serializeAws_ec2ReleaseIpamPoolAllocationCommand = exports.serializeAws_ec2ReleaseHostsCommand = exports.serializeAws_ec2ReleaseAddressCommand = exports.serializeAws_ec2RejectVpcPeeringConnectionCommand = exports.serializeAws_ec2RejectVpcEndpointConnectionsCommand = exports.serializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = exports.serializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = exports.serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = exports.serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = exports.serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = exports.serializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = exports.serializeAws_ec2RegisterImageCommand = exports.serializeAws_ec2RebootInstancesCommand = exports.serializeAws_ec2PurchaseScheduledInstancesCommand = exports.serializeAws_ec2PurchaseReservedInstancesOfferingCommand = exports.serializeAws_ec2PurchaseHostReservationCommand = exports.serializeAws_ec2ProvisionPublicIpv4PoolCidrCommand = exports.serializeAws_ec2ProvisionIpamPoolCidrCommand = exports.serializeAws_ec2ProvisionByoipCidrCommand = exports.serializeAws_ec2MoveByoipCidrToIpamCommand = exports.serializeAws_ec2MoveAddressToVpcCommand = exports.serializeAws_ec2MonitorInstancesCommand = exports.serializeAws_ec2ModifyVpnTunnelOptionsCommand = exports.serializeAws_ec2ModifyVpnTunnelCertificateCommand = exports.serializeAws_ec2ModifyVpnConnectionOptionsCommand = exports.serializeAws_ec2ModifyVpnConnectionCommand = exports.serializeAws_ec2ModifyVpcTenancyCommand = exports.serializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = exports.serializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = exports.serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand = void 0;
exports.deserializeAws_ec2AttachInternetGatewayCommand = exports.deserializeAws_ec2AttachClassicLinkVpcCommand = exports.deserializeAws_ec2AssociateVpcCidrBlockCommand = exports.deserializeAws_ec2AssociateTrunkInterfaceCommand = exports.deserializeAws_ec2AssociateTransitGatewayRouteTableCommand = exports.deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = exports.deserializeAws_ec2AssociateSubnetCidrBlockCommand = exports.deserializeAws_ec2AssociateRouteTableCommand = exports.deserializeAws_ec2AssociateInstanceEventWindowCommand = exports.deserializeAws_ec2AssociateIamInstanceProfileCommand = exports.deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = exports.deserializeAws_ec2AssociateDhcpOptionsCommand = exports.deserializeAws_ec2AssociateClientVpnTargetNetworkCommand = exports.deserializeAws_ec2AssociateAddressCommand = exports.deserializeAws_ec2AssignPrivateIpAddressesCommand = exports.deserializeAws_ec2AssignIpv6AddressesCommand = exports.deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = exports.deserializeAws_ec2AllocateIpamPoolCidrCommand = exports.deserializeAws_ec2AllocateHostsCommand = exports.deserializeAws_ec2AllocateAddressCommand = exports.deserializeAws_ec2AdvertiseByoipCidrCommand = exports.deserializeAws_ec2AcceptVpcPeeringConnectionCommand = exports.deserializeAws_ec2AcceptVpcEndpointConnectionsCommand = exports.deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = exports.deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = exports.deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = exports.deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = exports.serializeAws_ec2WithdrawByoipCidrCommand = exports.serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = exports.serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = exports.serializeAws_ec2UnmonitorInstancesCommand = exports.serializeAws_ec2UnassignPrivateIpAddressesCommand = exports.serializeAws_ec2UnassignIpv6AddressesCommand = exports.serializeAws_ec2TerminateInstancesCommand = exports.serializeAws_ec2TerminateClientVpnConnectionsCommand = exports.serializeAws_ec2StopInstancesCommand = exports.serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = exports.serializeAws_ec2StartNetworkInsightsAnalysisCommand = exports.serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand = exports.serializeAws_ec2StartInstancesCommand = exports.serializeAws_ec2SendDiagnosticInterruptCommand = exports.serializeAws_ec2SearchTransitGatewayRoutesCommand = exports.serializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = exports.serializeAws_ec2SearchLocalGatewayRoutesCommand = exports.serializeAws_ec2RunScheduledInstancesCommand = exports.serializeAws_ec2RunInstancesCommand = exports.serializeAws_ec2RevokeSecurityGroupIngressCommand = exports.serializeAws_ec2RevokeSecurityGroupEgressCommand = exports.serializeAws_ec2RevokeClientVpnIngressCommand = exports.serializeAws_ec2RestoreSnapshotTierCommand = void 0;
exports.deserializeAws_ec2CreateNetworkInsightsAccessScopeCommand = exports.deserializeAws_ec2CreateNetworkAclEntryCommand = exports.deserializeAws_ec2CreateNetworkAclCommand = exports.deserializeAws_ec2CreateNatGatewayCommand = exports.deserializeAws_ec2CreateManagedPrefixListCommand = exports.deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = exports.deserializeAws_ec2CreateLocalGatewayRouteCommand = exports.deserializeAws_ec2CreateLaunchTemplateVersionCommand = exports.deserializeAws_ec2CreateLaunchTemplateCommand = exports.deserializeAws_ec2CreateKeyPairCommand = exports.deserializeAws_ec2CreateIpamScopeCommand = exports.deserializeAws_ec2CreateIpamPoolCommand = exports.deserializeAws_ec2CreateIpamCommand = exports.deserializeAws_ec2CreateInternetGatewayCommand = exports.deserializeAws_ec2CreateInstanceExportTaskCommand = exports.deserializeAws_ec2CreateInstanceEventWindowCommand = exports.deserializeAws_ec2CreateImageCommand = exports.deserializeAws_ec2CreateFpgaImageCommand = exports.deserializeAws_ec2CreateFlowLogsCommand = exports.deserializeAws_ec2CreateFleetCommand = exports.deserializeAws_ec2CreateEgressOnlyInternetGatewayCommand = exports.deserializeAws_ec2CreateDhcpOptionsCommand = exports.deserializeAws_ec2CreateDefaultVpcCommand = exports.deserializeAws_ec2CreateDefaultSubnetCommand = exports.deserializeAws_ec2CreateCustomerGatewayCommand = exports.deserializeAws_ec2CreateClientVpnRouteCommand = exports.deserializeAws_ec2CreateClientVpnEndpointCommand = exports.deserializeAws_ec2CreateCarrierGatewayCommand = exports.deserializeAws_ec2CreateCapacityReservationFleetCommand = exports.deserializeAws_ec2CreateCapacityReservationCommand = exports.deserializeAws_ec2CopySnapshotCommand = exports.deserializeAws_ec2CopyImageCommand = exports.deserializeAws_ec2CopyFpgaImageCommand = exports.deserializeAws_ec2ConfirmProductInstanceCommand = exports.deserializeAws_ec2CancelSpotInstanceRequestsCommand = exports.deserializeAws_ec2CancelSpotFleetRequestsCommand = exports.deserializeAws_ec2CancelReservedInstancesListingCommand = exports.deserializeAws_ec2CancelImportTaskCommand = exports.deserializeAws_ec2CancelExportTaskCommand = exports.deserializeAws_ec2CancelConversionTaskCommand = exports.deserializeAws_ec2CancelCapacityReservationFleetsCommand = exports.deserializeAws_ec2CancelCapacityReservationCommand = exports.deserializeAws_ec2CancelBundleTaskCommand = exports.deserializeAws_ec2BundleInstanceCommand = exports.deserializeAws_ec2AuthorizeSecurityGroupIngressCommand = exports.deserializeAws_ec2AuthorizeSecurityGroupEgressCommand = exports.deserializeAws_ec2AuthorizeClientVpnIngressCommand = exports.deserializeAws_ec2AttachVpnGatewayCommand = exports.deserializeAws_ec2AttachVolumeCommand = exports.deserializeAws_ec2AttachNetworkInterfaceCommand = void 0;
exports.deserializeAws_ec2DeleteInstanceEventWindowCommand = exports.deserializeAws_ec2DeleteFpgaImageCommand = exports.deserializeAws_ec2DeleteFlowLogsCommand = exports.deserializeAws_ec2DeleteFleetsCommand = exports.deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = exports.deserializeAws_ec2DeleteDhcpOptionsCommand = exports.deserializeAws_ec2DeleteCustomerGatewayCommand = exports.deserializeAws_ec2DeleteClientVpnRouteCommand = exports.deserializeAws_ec2DeleteClientVpnEndpointCommand = exports.deserializeAws_ec2DeleteCarrierGatewayCommand = exports.deserializeAws_ec2CreateVpnGatewayCommand = exports.deserializeAws_ec2CreateVpnConnectionRouteCommand = exports.deserializeAws_ec2CreateVpnConnectionCommand = exports.deserializeAws_ec2CreateVpcPeeringConnectionCommand = exports.deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = exports.deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = exports.deserializeAws_ec2CreateVpcEndpointCommand = exports.deserializeAws_ec2CreateVpcCommand = exports.deserializeAws_ec2CreateVolumeCommand = exports.deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = exports.deserializeAws_ec2CreateTransitGatewayRouteTableCommand = exports.deserializeAws_ec2CreateTransitGatewayRouteCommand = exports.deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = exports.deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = exports.deserializeAws_ec2CreateTransitGatewayMulticastDomainCommand = exports.deserializeAws_ec2CreateTransitGatewayConnectPeerCommand = exports.deserializeAws_ec2CreateTransitGatewayConnectCommand = exports.deserializeAws_ec2CreateTransitGatewayCommand = exports.deserializeAws_ec2CreateTrafficMirrorTargetCommand = exports.deserializeAws_ec2CreateTrafficMirrorSessionCommand = exports.deserializeAws_ec2CreateTrafficMirrorFilterRuleCommand = exports.deserializeAws_ec2CreateTrafficMirrorFilterCommand = exports.deserializeAws_ec2CreateTagsCommand = exports.deserializeAws_ec2CreateSubnetCidrReservationCommand = exports.deserializeAws_ec2CreateSubnetCommand = exports.deserializeAws_ec2CreateStoreImageTaskCommand = exports.deserializeAws_ec2CreateSpotDatafeedSubscriptionCommand = exports.deserializeAws_ec2CreateSnapshotsCommand = exports.deserializeAws_ec2CreateSnapshotCommand = exports.deserializeAws_ec2CreateSecurityGroupCommand = exports.deserializeAws_ec2CreateRouteTableCommand = exports.deserializeAws_ec2CreateRouteCommand = exports.deserializeAws_ec2CreateRestoreImageTaskCommand = exports.deserializeAws_ec2CreateReservedInstancesListingCommand = exports.deserializeAws_ec2CreateReplaceRootVolumeTaskCommand = exports.deserializeAws_ec2CreatePublicIpv4PoolCommand = exports.deserializeAws_ec2CreatePlacementGroupCommand = exports.deserializeAws_ec2CreateNetworkInterfacePermissionCommand = exports.deserializeAws_ec2CreateNetworkInterfaceCommand = exports.deserializeAws_ec2CreateNetworkInsightsPathCommand = void 0;
exports.deserializeAws_ec2DeleteVpnConnectionCommand = exports.deserializeAws_ec2DeleteVpcPeeringConnectionCommand = exports.deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = exports.deserializeAws_ec2DeleteVpcEndpointsCommand = exports.deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = exports.deserializeAws_ec2DeleteVpcCommand = exports.deserializeAws_ec2DeleteVolumeCommand = exports.deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = exports.deserializeAws_ec2DeleteTransitGatewayRouteTableCommand = exports.deserializeAws_ec2DeleteTransitGatewayRouteCommand = exports.deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = exports.deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = exports.deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = exports.deserializeAws_ec2DeleteTransitGatewayConnectPeerCommand = exports.deserializeAws_ec2DeleteTransitGatewayConnectCommand = exports.deserializeAws_ec2DeleteTransitGatewayCommand = exports.deserializeAws_ec2DeleteTrafficMirrorTargetCommand = exports.deserializeAws_ec2DeleteTrafficMirrorSessionCommand = exports.deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = exports.deserializeAws_ec2DeleteTrafficMirrorFilterCommand = exports.deserializeAws_ec2DeleteTagsCommand = exports.deserializeAws_ec2DeleteSubnetCidrReservationCommand = exports.deserializeAws_ec2DeleteSubnetCommand = exports.deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = exports.deserializeAws_ec2DeleteSnapshotCommand = exports.deserializeAws_ec2DeleteSecurityGroupCommand = exports.deserializeAws_ec2DeleteRouteTableCommand = exports.deserializeAws_ec2DeleteRouteCommand = exports.deserializeAws_ec2DeleteQueuedReservedInstancesCommand = exports.deserializeAws_ec2DeletePublicIpv4PoolCommand = exports.deserializeAws_ec2DeletePlacementGroupCommand = exports.deserializeAws_ec2DeleteNetworkInterfacePermissionCommand = exports.deserializeAws_ec2DeleteNetworkInterfaceCommand = exports.deserializeAws_ec2DeleteNetworkInsightsPathCommand = exports.deserializeAws_ec2DeleteNetworkInsightsAnalysisCommand = exports.deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand = exports.deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommand = exports.deserializeAws_ec2DeleteNetworkAclEntryCommand = exports.deserializeAws_ec2DeleteNetworkAclCommand = exports.deserializeAws_ec2DeleteNatGatewayCommand = exports.deserializeAws_ec2DeleteManagedPrefixListCommand = exports.deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = exports.deserializeAws_ec2DeleteLocalGatewayRouteCommand = exports.deserializeAws_ec2DeleteLaunchTemplateVersionsCommand = exports.deserializeAws_ec2DeleteLaunchTemplateCommand = exports.deserializeAws_ec2DeleteKeyPairCommand = exports.deserializeAws_ec2DeleteIpamScopeCommand = exports.deserializeAws_ec2DeleteIpamPoolCommand = exports.deserializeAws_ec2DeleteIpamCommand = exports.deserializeAws_ec2DeleteInternetGatewayCommand = void 0;
exports.deserializeAws_ec2DescribeImportImageTasksCommand = exports.deserializeAws_ec2DescribeImagesCommand = exports.deserializeAws_ec2DescribeImageAttributeCommand = exports.deserializeAws_ec2DescribeIdFormatCommand = exports.deserializeAws_ec2DescribeIdentityIdFormatCommand = exports.deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = exports.deserializeAws_ec2DescribeHostsCommand = exports.deserializeAws_ec2DescribeHostReservationsCommand = exports.deserializeAws_ec2DescribeHostReservationOfferingsCommand = exports.deserializeAws_ec2DescribeFpgaImagesCommand = exports.deserializeAws_ec2DescribeFpgaImageAttributeCommand = exports.deserializeAws_ec2DescribeFlowLogsCommand = exports.deserializeAws_ec2DescribeFleetsCommand = exports.deserializeAws_ec2DescribeFleetInstancesCommand = exports.deserializeAws_ec2DescribeFleetHistoryCommand = exports.deserializeAws_ec2DescribeFastSnapshotRestoresCommand = exports.deserializeAws_ec2DescribeFastLaunchImagesCommand = exports.deserializeAws_ec2DescribeExportTasksCommand = exports.deserializeAws_ec2DescribeExportImageTasksCommand = exports.deserializeAws_ec2DescribeElasticGpusCommand = exports.deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = exports.deserializeAws_ec2DescribeDhcpOptionsCommand = exports.deserializeAws_ec2DescribeCustomerGatewaysCommand = exports.deserializeAws_ec2DescribeConversionTasksCommand = exports.deserializeAws_ec2DescribeCoipPoolsCommand = exports.deserializeAws_ec2DescribeClientVpnTargetNetworksCommand = exports.deserializeAws_ec2DescribeClientVpnRoutesCommand = exports.deserializeAws_ec2DescribeClientVpnEndpointsCommand = exports.deserializeAws_ec2DescribeClientVpnConnectionsCommand = exports.deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = exports.deserializeAws_ec2DescribeClassicLinkInstancesCommand = exports.deserializeAws_ec2DescribeCarrierGatewaysCommand = exports.deserializeAws_ec2DescribeCapacityReservationsCommand = exports.deserializeAws_ec2DescribeCapacityReservationFleetsCommand = exports.deserializeAws_ec2DescribeByoipCidrsCommand = exports.deserializeAws_ec2DescribeBundleTasksCommand = exports.deserializeAws_ec2DescribeAvailabilityZonesCommand = exports.deserializeAws_ec2DescribeAggregateIdFormatCommand = exports.deserializeAws_ec2DescribeAddressesAttributeCommand = exports.deserializeAws_ec2DescribeAddressesCommand = exports.deserializeAws_ec2DescribeAccountAttributesCommand = exports.deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = exports.deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = exports.deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = exports.deserializeAws_ec2DeregisterImageCommand = exports.deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand = exports.deserializeAws_ec2DeprovisionIpamPoolCidrCommand = exports.deserializeAws_ec2DeprovisionByoipCidrCommand = exports.deserializeAws_ec2DeleteVpnGatewayCommand = exports.deserializeAws_ec2DeleteVpnConnectionRouteCommand = void 0;
exports.deserializeAws_ec2DescribeSecurityGroupsCommand = exports.deserializeAws_ec2DescribeSecurityGroupRulesCommand = exports.deserializeAws_ec2DescribeSecurityGroupReferencesCommand = exports.deserializeAws_ec2DescribeScheduledInstancesCommand = exports.deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = exports.deserializeAws_ec2DescribeRouteTablesCommand = exports.deserializeAws_ec2DescribeReservedInstancesOfferingsCommand = exports.deserializeAws_ec2DescribeReservedInstancesModificationsCommand = exports.deserializeAws_ec2DescribeReservedInstancesListingsCommand = exports.deserializeAws_ec2DescribeReservedInstancesCommand = exports.deserializeAws_ec2DescribeReplaceRootVolumeTasksCommand = exports.deserializeAws_ec2DescribeRegionsCommand = exports.deserializeAws_ec2DescribePublicIpv4PoolsCommand = exports.deserializeAws_ec2DescribePrincipalIdFormatCommand = exports.deserializeAws_ec2DescribePrefixListsCommand = exports.deserializeAws_ec2DescribePlacementGroupsCommand = exports.deserializeAws_ec2DescribeNetworkInterfacesCommand = exports.deserializeAws_ec2DescribeNetworkInterfacePermissionsCommand = exports.deserializeAws_ec2DescribeNetworkInterfaceAttributeCommand = exports.deserializeAws_ec2DescribeNetworkInsightsPathsCommand = exports.deserializeAws_ec2DescribeNetworkInsightsAnalysesCommand = exports.deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommand = exports.deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand = exports.deserializeAws_ec2DescribeNetworkAclsCommand = exports.deserializeAws_ec2DescribeNatGatewaysCommand = exports.deserializeAws_ec2DescribeMovingAddressesCommand = exports.deserializeAws_ec2DescribeManagedPrefixListsCommand = exports.deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = exports.deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = exports.deserializeAws_ec2DescribeLocalGatewaysCommand = exports.deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = exports.deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = exports.deserializeAws_ec2DescribeLocalGatewayRouteTablesCommand = exports.deserializeAws_ec2DescribeLaunchTemplateVersionsCommand = exports.deserializeAws_ec2DescribeLaunchTemplatesCommand = exports.deserializeAws_ec2DescribeKeyPairsCommand = exports.deserializeAws_ec2DescribeIpv6PoolsCommand = exports.deserializeAws_ec2DescribeIpamScopesCommand = exports.deserializeAws_ec2DescribeIpamsCommand = exports.deserializeAws_ec2DescribeIpamPoolsCommand = exports.deserializeAws_ec2DescribeInternetGatewaysCommand = exports.deserializeAws_ec2DescribeInstanceTypesCommand = exports.deserializeAws_ec2DescribeInstanceTypeOfferingsCommand = exports.deserializeAws_ec2DescribeInstanceStatusCommand = exports.deserializeAws_ec2DescribeInstancesCommand = exports.deserializeAws_ec2DescribeInstanceEventWindowsCommand = exports.deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = exports.deserializeAws_ec2DescribeInstanceCreditSpecificationsCommand = exports.deserializeAws_ec2DescribeInstanceAttributeCommand = exports.deserializeAws_ec2DescribeImportSnapshotTasksCommand = void 0;
exports.deserializeAws_ec2DisableFastSnapshotRestoresCommand = exports.deserializeAws_ec2DisableFastLaunchCommand = exports.deserializeAws_ec2DisableEbsEncryptionByDefaultCommand = exports.deserializeAws_ec2DetachVpnGatewayCommand = exports.deserializeAws_ec2DetachVolumeCommand = exports.deserializeAws_ec2DetachNetworkInterfaceCommand = exports.deserializeAws_ec2DetachInternetGatewayCommand = exports.deserializeAws_ec2DetachClassicLinkVpcCommand = exports.deserializeAws_ec2DescribeVpnGatewaysCommand = exports.deserializeAws_ec2DescribeVpnConnectionsCommand = exports.deserializeAws_ec2DescribeVpcsCommand = exports.deserializeAws_ec2DescribeVpcPeeringConnectionsCommand = exports.deserializeAws_ec2DescribeVpcEndpointServicesCommand = exports.deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = exports.deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = exports.deserializeAws_ec2DescribeVpcEndpointsCommand = exports.deserializeAws_ec2DescribeVpcEndpointConnectionsCommand = exports.deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = exports.deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = exports.deserializeAws_ec2DescribeVpcClassicLinkCommand = exports.deserializeAws_ec2DescribeVpcAttributeCommand = exports.deserializeAws_ec2DescribeVolumeStatusCommand = exports.deserializeAws_ec2DescribeVolumesModificationsCommand = exports.deserializeAws_ec2DescribeVolumesCommand = exports.deserializeAws_ec2DescribeVolumeAttributeCommand = exports.deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommand = exports.deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = exports.deserializeAws_ec2DescribeTransitGatewaysCommand = exports.deserializeAws_ec2DescribeTransitGatewayRouteTablesCommand = exports.deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = exports.deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = exports.deserializeAws_ec2DescribeTransitGatewayConnectsCommand = exports.deserializeAws_ec2DescribeTransitGatewayConnectPeersCommand = exports.deserializeAws_ec2DescribeTransitGatewayAttachmentsCommand = exports.deserializeAws_ec2DescribeTrafficMirrorTargetsCommand = exports.deserializeAws_ec2DescribeTrafficMirrorSessionsCommand = exports.deserializeAws_ec2DescribeTrafficMirrorFiltersCommand = exports.deserializeAws_ec2DescribeTagsCommand = exports.deserializeAws_ec2DescribeSubnetsCommand = exports.deserializeAws_ec2DescribeStoreImageTasksCommand = exports.deserializeAws_ec2DescribeStaleSecurityGroupsCommand = exports.deserializeAws_ec2DescribeSpotPriceHistoryCommand = exports.deserializeAws_ec2DescribeSpotInstanceRequestsCommand = exports.deserializeAws_ec2DescribeSpotFleetRequestsCommand = exports.deserializeAws_ec2DescribeSpotFleetRequestHistoryCommand = exports.deserializeAws_ec2DescribeSpotFleetInstancesCommand = exports.deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = exports.deserializeAws_ec2DescribeSnapshotTierStatusCommand = exports.deserializeAws_ec2DescribeSnapshotsCommand = exports.deserializeAws_ec2DescribeSnapshotAttributeCommand = void 0;
exports.deserializeAws_ec2GetIpamPoolCidrsCommand = exports.deserializeAws_ec2GetIpamPoolAllocationsCommand = exports.deserializeAws_ec2GetIpamAddressHistoryCommand = exports.deserializeAws_ec2GetInstanceUefiDataCommand = exports.deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand = exports.deserializeAws_ec2GetHostReservationPurchasePreviewCommand = exports.deserializeAws_ec2GetGroupsForCapacityReservationCommand = exports.deserializeAws_ec2GetFlowLogsIntegrationTemplateCommand = exports.deserializeAws_ec2GetEbsEncryptionByDefaultCommand = exports.deserializeAws_ec2GetEbsDefaultKmsKeyIdCommand = exports.deserializeAws_ec2GetDefaultCreditSpecificationCommand = exports.deserializeAws_ec2GetConsoleScreenshotCommand = exports.deserializeAws_ec2GetConsoleOutputCommand = exports.deserializeAws_ec2GetCoipPoolUsageCommand = exports.deserializeAws_ec2GetCapacityReservationUsageCommand = exports.deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = exports.deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = exports.deserializeAws_ec2ExportTransitGatewayRoutesCommand = exports.deserializeAws_ec2ExportImageCommand = exports.deserializeAws_ec2ExportClientVpnClientConfigurationCommand = exports.deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = exports.deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = exports.deserializeAws_ec2EnableVpcClassicLinkCommand = exports.deserializeAws_ec2EnableVolumeIOCommand = exports.deserializeAws_ec2EnableVgwRoutePropagationCommand = exports.deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = exports.deserializeAws_ec2EnableSerialConsoleAccessCommand = exports.deserializeAws_ec2EnableIpamOrganizationAdminAccountCommand = exports.deserializeAws_ec2EnableImageDeprecationCommand = exports.deserializeAws_ec2EnableFastSnapshotRestoresCommand = exports.deserializeAws_ec2EnableFastLaunchCommand = exports.deserializeAws_ec2EnableEbsEncryptionByDefaultCommand = exports.deserializeAws_ec2DisassociateVpcCidrBlockCommand = exports.deserializeAws_ec2DisassociateTrunkInterfaceCommand = exports.deserializeAws_ec2DisassociateTransitGatewayRouteTableCommand = exports.deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = exports.deserializeAws_ec2DisassociateSubnetCidrBlockCommand = exports.deserializeAws_ec2DisassociateRouteTableCommand = exports.deserializeAws_ec2DisassociateInstanceEventWindowCommand = exports.deserializeAws_ec2DisassociateIamInstanceProfileCommand = exports.deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = exports.deserializeAws_ec2DisassociateClientVpnTargetNetworkCommand = exports.deserializeAws_ec2DisassociateAddressCommand = exports.deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = exports.deserializeAws_ec2DisableVpcClassicLinkCommand = exports.deserializeAws_ec2DisableVgwRoutePropagationCommand = exports.deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = exports.deserializeAws_ec2DisableSerialConsoleAccessCommand = exports.deserializeAws_ec2DisableIpamOrganizationAdminAccountCommand = exports.deserializeAws_ec2DisableImageDeprecationCommand = void 0;
exports.deserializeAws_ec2ModifyIpamResourceCidrCommand = exports.deserializeAws_ec2ModifyIpamPoolCommand = exports.deserializeAws_ec2ModifyIpamCommand = exports.deserializeAws_ec2ModifyInstancePlacementCommand = exports.deserializeAws_ec2ModifyInstanceMetadataOptionsCommand = exports.deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommand = exports.deserializeAws_ec2ModifyInstanceEventWindowCommand = exports.deserializeAws_ec2ModifyInstanceEventStartTimeCommand = exports.deserializeAws_ec2ModifyInstanceCreditSpecificationCommand = exports.deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = exports.deserializeAws_ec2ModifyInstanceAttributeCommand = exports.deserializeAws_ec2ModifyImageAttributeCommand = exports.deserializeAws_ec2ModifyIdFormatCommand = exports.deserializeAws_ec2ModifyIdentityIdFormatCommand = exports.deserializeAws_ec2ModifyHostsCommand = exports.deserializeAws_ec2ModifyFpgaImageAttributeCommand = exports.deserializeAws_ec2ModifyFleetCommand = exports.deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = exports.deserializeAws_ec2ModifyDefaultCreditSpecificationCommand = exports.deserializeAws_ec2ModifyClientVpnEndpointCommand = exports.deserializeAws_ec2ModifyCapacityReservationFleetCommand = exports.deserializeAws_ec2ModifyCapacityReservationCommand = exports.deserializeAws_ec2ModifyAvailabilityZoneGroupCommand = exports.deserializeAws_ec2ModifyAddressAttributeCommand = exports.deserializeAws_ec2ListSnapshotsInRecycleBinCommand = exports.deserializeAws_ec2ListImagesInRecycleBinCommand = exports.deserializeAws_ec2ImportVolumeCommand = exports.deserializeAws_ec2ImportSnapshotCommand = exports.deserializeAws_ec2ImportKeyPairCommand = exports.deserializeAws_ec2ImportInstanceCommand = exports.deserializeAws_ec2ImportImageCommand = exports.deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = exports.deserializeAws_ec2GetVpnConnectionDeviceTypesCommand = exports.deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand = exports.deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = exports.deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = exports.deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = exports.deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = exports.deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = exports.deserializeAws_ec2GetSubnetCidrReservationsCommand = exports.deserializeAws_ec2GetSpotPlacementScoresCommand = exports.deserializeAws_ec2GetSerialConsoleAccessStatusCommand = exports.deserializeAws_ec2GetReservedInstancesExchangeQuoteCommand = exports.deserializeAws_ec2GetPasswordDataCommand = exports.deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommand = exports.deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand = exports.deserializeAws_ec2GetManagedPrefixListEntriesCommand = exports.deserializeAws_ec2GetManagedPrefixListAssociationsCommand = exports.deserializeAws_ec2GetLaunchTemplateDataCommand = exports.deserializeAws_ec2GetIpamResourceCidrsCommand = void 0;
exports.deserializeAws_ec2RejectVpcPeeringConnectionCommand = exports.deserializeAws_ec2RejectVpcEndpointConnectionsCommand = exports.deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = exports.deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = exports.deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = exports.deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = exports.deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = exports.deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = exports.deserializeAws_ec2RegisterImageCommand = exports.deserializeAws_ec2RebootInstancesCommand = exports.deserializeAws_ec2PurchaseScheduledInstancesCommand = exports.deserializeAws_ec2PurchaseReservedInstancesOfferingCommand = exports.deserializeAws_ec2PurchaseHostReservationCommand = exports.deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommand = exports.deserializeAws_ec2ProvisionIpamPoolCidrCommand = exports.deserializeAws_ec2ProvisionByoipCidrCommand = exports.deserializeAws_ec2MoveByoipCidrToIpamCommand = exports.deserializeAws_ec2MoveAddressToVpcCommand = exports.deserializeAws_ec2MonitorInstancesCommand = exports.deserializeAws_ec2ModifyVpnTunnelOptionsCommand = exports.deserializeAws_ec2ModifyVpnTunnelCertificateCommand = exports.deserializeAws_ec2ModifyVpnConnectionOptionsCommand = exports.deserializeAws_ec2ModifyVpnConnectionCommand = exports.deserializeAws_ec2ModifyVpcTenancyCommand = exports.deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = exports.deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = exports.deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand = exports.deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = exports.deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = exports.deserializeAws_ec2ModifyVpcEndpointCommand = exports.deserializeAws_ec2ModifyVpcAttributeCommand = exports.deserializeAws_ec2ModifyVolumeAttributeCommand = exports.deserializeAws_ec2ModifyVolumeCommand = exports.deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = exports.deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = exports.deserializeAws_ec2ModifyTransitGatewayCommand = exports.deserializeAws_ec2ModifyTrafficMirrorSessionCommand = exports.deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = exports.deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = exports.deserializeAws_ec2ModifySubnetAttributeCommand = exports.deserializeAws_ec2ModifySpotFleetRequestCommand = exports.deserializeAws_ec2ModifySnapshotTierCommand = exports.deserializeAws_ec2ModifySnapshotAttributeCommand = exports.deserializeAws_ec2ModifySecurityGroupRulesCommand = exports.deserializeAws_ec2ModifyReservedInstancesCommand = exports.deserializeAws_ec2ModifyPrivateDnsNameOptionsCommand = exports.deserializeAws_ec2ModifyNetworkInterfaceAttributeCommand = exports.deserializeAws_ec2ModifyManagedPrefixListCommand = exports.deserializeAws_ec2ModifyLaunchTemplateCommand = exports.deserializeAws_ec2ModifyIpamScopeCommand = void 0;
exports.deserializeAws_ec2WithdrawByoipCidrCommand = exports.deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = exports.deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = exports.deserializeAws_ec2UnmonitorInstancesCommand = exports.deserializeAws_ec2UnassignPrivateIpAddressesCommand = exports.deserializeAws_ec2UnassignIpv6AddressesCommand = exports.deserializeAws_ec2TerminateInstancesCommand = exports.deserializeAws_ec2TerminateClientVpnConnectionsCommand = exports.deserializeAws_ec2StopInstancesCommand = exports.deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = exports.deserializeAws_ec2StartNetworkInsightsAnalysisCommand = exports.deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand = exports.deserializeAws_ec2StartInstancesCommand = exports.deserializeAws_ec2SendDiagnosticInterruptCommand = exports.deserializeAws_ec2SearchTransitGatewayRoutesCommand = exports.deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = exports.deserializeAws_ec2SearchLocalGatewayRoutesCommand = exports.deserializeAws_ec2RunScheduledInstancesCommand = exports.deserializeAws_ec2RunInstancesCommand = exports.deserializeAws_ec2RevokeSecurityGroupIngressCommand = exports.deserializeAws_ec2RevokeSecurityGroupEgressCommand = exports.deserializeAws_ec2RevokeClientVpnIngressCommand = exports.deserializeAws_ec2RestoreSnapshotTierCommand = exports.deserializeAws_ec2RestoreSnapshotFromRecycleBinCommand = exports.deserializeAws_ec2RestoreManagedPrefixListVersionCommand = exports.deserializeAws_ec2RestoreImageFromRecycleBinCommand = exports.deserializeAws_ec2RestoreAddressToClassicCommand = exports.deserializeAws_ec2ResetSnapshotAttributeCommand = exports.deserializeAws_ec2ResetNetworkInterfaceAttributeCommand = exports.deserializeAws_ec2ResetInstanceAttributeCommand = exports.deserializeAws_ec2ResetImageAttributeCommand = exports.deserializeAws_ec2ResetFpgaImageAttributeCommand = exports.deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = exports.deserializeAws_ec2ResetAddressAttributeCommand = exports.deserializeAws_ec2RequestSpotInstancesCommand = exports.deserializeAws_ec2RequestSpotFleetCommand = exports.deserializeAws_ec2ReportInstanceStatusCommand = exports.deserializeAws_ec2ReplaceTransitGatewayRouteCommand = exports.deserializeAws_ec2ReplaceRouteTableAssociationCommand = exports.deserializeAws_ec2ReplaceRouteCommand = exports.deserializeAws_ec2ReplaceNetworkAclEntryCommand = exports.deserializeAws_ec2ReplaceNetworkAclAssociationCommand = exports.deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = exports.deserializeAws_ec2ReleaseIpamPoolAllocationCommand = exports.deserializeAws_ec2ReleaseHostsCommand = exports.deserializeAws_ec2ReleaseAddressCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const entities_1 = require("entities");
const fast_xml_parser_1 = require("fast-xml-parser");
const uuid_1 = require("uuid");
const EC2ServiceException_1 = require("../models/EC2ServiceException");
const serializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AcceptReservedInstancesExchangeQuoteRequest(input, context),
        Action: "AcceptReservedInstancesExchangeQuote",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = serializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand;
const serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsRequest(input, context),
        Action: "AcceptTransitGatewayMulticastDomainAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand;
const serializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AcceptTransitGatewayPeeringAttachmentRequest(input, context),
        Action: "AcceptTransitGatewayPeeringAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = serializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand;
const serializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AcceptTransitGatewayVpcAttachmentRequest(input, context),
        Action: "AcceptTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = serializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand;
const serializeAws_ec2AcceptVpcEndpointConnectionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AcceptVpcEndpointConnectionsRequest(input, context),
        Action: "AcceptVpcEndpointConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AcceptVpcEndpointConnectionsCommand = serializeAws_ec2AcceptVpcEndpointConnectionsCommand;
const serializeAws_ec2AcceptVpcPeeringConnectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AcceptVpcPeeringConnectionRequest(input, context),
        Action: "AcceptVpcPeeringConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AcceptVpcPeeringConnectionCommand = serializeAws_ec2AcceptVpcPeeringConnectionCommand;
const serializeAws_ec2AdvertiseByoipCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AdvertiseByoipCidrRequest(input, context),
        Action: "AdvertiseByoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AdvertiseByoipCidrCommand = serializeAws_ec2AdvertiseByoipCidrCommand;
const serializeAws_ec2AllocateAddressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AllocateAddressRequest(input, context),
        Action: "AllocateAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AllocateAddressCommand = serializeAws_ec2AllocateAddressCommand;
const serializeAws_ec2AllocateHostsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AllocateHostsRequest(input, context),
        Action: "AllocateHosts",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AllocateHostsCommand = serializeAws_ec2AllocateHostsCommand;
const serializeAws_ec2AllocateIpamPoolCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AllocateIpamPoolCidrRequest(input, context),
        Action: "AllocateIpamPoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AllocateIpamPoolCidrCommand = serializeAws_ec2AllocateIpamPoolCidrCommand;
const serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest(input, context),
        Action: "ApplySecurityGroupsToClientVpnTargetNetwork",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand;
const serializeAws_ec2AssignIpv6AddressesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssignIpv6AddressesRequest(input, context),
        Action: "AssignIpv6Addresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssignIpv6AddressesCommand = serializeAws_ec2AssignIpv6AddressesCommand;
const serializeAws_ec2AssignPrivateIpAddressesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssignPrivateIpAddressesRequest(input, context),
        Action: "AssignPrivateIpAddresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssignPrivateIpAddressesCommand = serializeAws_ec2AssignPrivateIpAddressesCommand;
const serializeAws_ec2AssociateAddressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateAddressRequest(input, context),
        Action: "AssociateAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateAddressCommand = serializeAws_ec2AssociateAddressCommand;
const serializeAws_ec2AssociateClientVpnTargetNetworkCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateClientVpnTargetNetworkRequest(input, context),
        Action: "AssociateClientVpnTargetNetwork",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateClientVpnTargetNetworkCommand = serializeAws_ec2AssociateClientVpnTargetNetworkCommand;
const serializeAws_ec2AssociateDhcpOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateDhcpOptionsRequest(input, context),
        Action: "AssociateDhcpOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateDhcpOptionsCommand = serializeAws_ec2AssociateDhcpOptionsCommand;
const serializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateEnclaveCertificateIamRoleRequest(input, context),
        Action: "AssociateEnclaveCertificateIamRole",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = serializeAws_ec2AssociateEnclaveCertificateIamRoleCommand;
const serializeAws_ec2AssociateIamInstanceProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateIamInstanceProfileRequest(input, context),
        Action: "AssociateIamInstanceProfile",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateIamInstanceProfileCommand = serializeAws_ec2AssociateIamInstanceProfileCommand;
const serializeAws_ec2AssociateInstanceEventWindowCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateInstanceEventWindowRequest(input, context),
        Action: "AssociateInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateInstanceEventWindowCommand = serializeAws_ec2AssociateInstanceEventWindowCommand;
const serializeAws_ec2AssociateRouteTableCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateRouteTableRequest(input, context),
        Action: "AssociateRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateRouteTableCommand = serializeAws_ec2AssociateRouteTableCommand;
const serializeAws_ec2AssociateSubnetCidrBlockCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateSubnetCidrBlockRequest(input, context),
        Action: "AssociateSubnetCidrBlock",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateSubnetCidrBlockCommand = serializeAws_ec2AssociateSubnetCidrBlockCommand;
const serializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateTransitGatewayMulticastDomainRequest(input, context),
        Action: "AssociateTransitGatewayMulticastDomain",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = serializeAws_ec2AssociateTransitGatewayMulticastDomainCommand;
const serializeAws_ec2AssociateTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateTransitGatewayRouteTableRequest(input, context),
        Action: "AssociateTransitGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateTransitGatewayRouteTableCommand = serializeAws_ec2AssociateTransitGatewayRouteTableCommand;
const serializeAws_ec2AssociateTrunkInterfaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateTrunkInterfaceRequest(input, context),
        Action: "AssociateTrunkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateTrunkInterfaceCommand = serializeAws_ec2AssociateTrunkInterfaceCommand;
const serializeAws_ec2AssociateVpcCidrBlockCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AssociateVpcCidrBlockRequest(input, context),
        Action: "AssociateVpcCidrBlock",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AssociateVpcCidrBlockCommand = serializeAws_ec2AssociateVpcCidrBlockCommand;
const serializeAws_ec2AttachClassicLinkVpcCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AttachClassicLinkVpcRequest(input, context),
        Action: "AttachClassicLinkVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AttachClassicLinkVpcCommand = serializeAws_ec2AttachClassicLinkVpcCommand;
const serializeAws_ec2AttachInternetGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AttachInternetGatewayRequest(input, context),
        Action: "AttachInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AttachInternetGatewayCommand = serializeAws_ec2AttachInternetGatewayCommand;
const serializeAws_ec2AttachNetworkInterfaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AttachNetworkInterfaceRequest(input, context),
        Action: "AttachNetworkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AttachNetworkInterfaceCommand = serializeAws_ec2AttachNetworkInterfaceCommand;
const serializeAws_ec2AttachVolumeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AttachVolumeRequest(input, context),
        Action: "AttachVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AttachVolumeCommand = serializeAws_ec2AttachVolumeCommand;
const serializeAws_ec2AttachVpnGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AttachVpnGatewayRequest(input, context),
        Action: "AttachVpnGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AttachVpnGatewayCommand = serializeAws_ec2AttachVpnGatewayCommand;
const serializeAws_ec2AuthorizeClientVpnIngressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AuthorizeClientVpnIngressRequest(input, context),
        Action: "AuthorizeClientVpnIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AuthorizeClientVpnIngressCommand = serializeAws_ec2AuthorizeClientVpnIngressCommand;
const serializeAws_ec2AuthorizeSecurityGroupEgressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AuthorizeSecurityGroupEgressRequest(input, context),
        Action: "AuthorizeSecurityGroupEgress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AuthorizeSecurityGroupEgressCommand = serializeAws_ec2AuthorizeSecurityGroupEgressCommand;
const serializeAws_ec2AuthorizeSecurityGroupIngressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2AuthorizeSecurityGroupIngressRequest(input, context),
        Action: "AuthorizeSecurityGroupIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2AuthorizeSecurityGroupIngressCommand = serializeAws_ec2AuthorizeSecurityGroupIngressCommand;
const serializeAws_ec2BundleInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2BundleInstanceRequest(input, context),
        Action: "BundleInstance",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2BundleInstanceCommand = serializeAws_ec2BundleInstanceCommand;
const serializeAws_ec2CancelBundleTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CancelBundleTaskRequest(input, context),
        Action: "CancelBundleTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CancelBundleTaskCommand = serializeAws_ec2CancelBundleTaskCommand;
const serializeAws_ec2CancelCapacityReservationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CancelCapacityReservationRequest(input, context),
        Action: "CancelCapacityReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CancelCapacityReservationCommand = serializeAws_ec2CancelCapacityReservationCommand;
const serializeAws_ec2CancelCapacityReservationFleetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CancelCapacityReservationFleetsRequest(input, context),
        Action: "CancelCapacityReservationFleets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CancelCapacityReservationFleetsCommand = serializeAws_ec2CancelCapacityReservationFleetsCommand;
const serializeAws_ec2CancelConversionTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CancelConversionRequest(input, context),
        Action: "CancelConversionTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CancelConversionTaskCommand = serializeAws_ec2CancelConversionTaskCommand;
const serializeAws_ec2CancelExportTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CancelExportTaskRequest(input, context),
        Action: "CancelExportTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CancelExportTaskCommand = serializeAws_ec2CancelExportTaskCommand;
const serializeAws_ec2CancelImportTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CancelImportTaskRequest(input, context),
        Action: "CancelImportTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CancelImportTaskCommand = serializeAws_ec2CancelImportTaskCommand;
const serializeAws_ec2CancelReservedInstancesListingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CancelReservedInstancesListingRequest(input, context),
        Action: "CancelReservedInstancesListing",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CancelReservedInstancesListingCommand = serializeAws_ec2CancelReservedInstancesListingCommand;
const serializeAws_ec2CancelSpotFleetRequestsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CancelSpotFleetRequestsRequest(input, context),
        Action: "CancelSpotFleetRequests",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CancelSpotFleetRequestsCommand = serializeAws_ec2CancelSpotFleetRequestsCommand;
const serializeAws_ec2CancelSpotInstanceRequestsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CancelSpotInstanceRequestsRequest(input, context),
        Action: "CancelSpotInstanceRequests",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CancelSpotInstanceRequestsCommand = serializeAws_ec2CancelSpotInstanceRequestsCommand;
const serializeAws_ec2ConfirmProductInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ConfirmProductInstanceRequest(input, context),
        Action: "ConfirmProductInstance",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ConfirmProductInstanceCommand = serializeAws_ec2ConfirmProductInstanceCommand;
const serializeAws_ec2CopyFpgaImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CopyFpgaImageRequest(input, context),
        Action: "CopyFpgaImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CopyFpgaImageCommand = serializeAws_ec2CopyFpgaImageCommand;
const serializeAws_ec2CopyImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CopyImageRequest(input, context),
        Action: "CopyImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CopyImageCommand = serializeAws_ec2CopyImageCommand;
const serializeAws_ec2CopySnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CopySnapshotRequest(input, context),
        Action: "CopySnapshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CopySnapshotCommand = serializeAws_ec2CopySnapshotCommand;
const serializeAws_ec2CreateCapacityReservationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateCapacityReservationRequest(input, context),
        Action: "CreateCapacityReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateCapacityReservationCommand = serializeAws_ec2CreateCapacityReservationCommand;
const serializeAws_ec2CreateCapacityReservationFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateCapacityReservationFleetRequest(input, context),
        Action: "CreateCapacityReservationFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateCapacityReservationFleetCommand = serializeAws_ec2CreateCapacityReservationFleetCommand;
const serializeAws_ec2CreateCarrierGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateCarrierGatewayRequest(input, context),
        Action: "CreateCarrierGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateCarrierGatewayCommand = serializeAws_ec2CreateCarrierGatewayCommand;
const serializeAws_ec2CreateClientVpnEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateClientVpnEndpointRequest(input, context),
        Action: "CreateClientVpnEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateClientVpnEndpointCommand = serializeAws_ec2CreateClientVpnEndpointCommand;
const serializeAws_ec2CreateClientVpnRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateClientVpnRouteRequest(input, context),
        Action: "CreateClientVpnRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateClientVpnRouteCommand = serializeAws_ec2CreateClientVpnRouteCommand;
const serializeAws_ec2CreateCustomerGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateCustomerGatewayRequest(input, context),
        Action: "CreateCustomerGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateCustomerGatewayCommand = serializeAws_ec2CreateCustomerGatewayCommand;
const serializeAws_ec2CreateDefaultSubnetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateDefaultSubnetRequest(input, context),
        Action: "CreateDefaultSubnet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateDefaultSubnetCommand = serializeAws_ec2CreateDefaultSubnetCommand;
const serializeAws_ec2CreateDefaultVpcCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateDefaultVpcRequest(input, context),
        Action: "CreateDefaultVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateDefaultVpcCommand = serializeAws_ec2CreateDefaultVpcCommand;
const serializeAws_ec2CreateDhcpOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateDhcpOptionsRequest(input, context),
        Action: "CreateDhcpOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateDhcpOptionsCommand = serializeAws_ec2CreateDhcpOptionsCommand;
const serializeAws_ec2CreateEgressOnlyInternetGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateEgressOnlyInternetGatewayRequest(input, context),
        Action: "CreateEgressOnlyInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateEgressOnlyInternetGatewayCommand = serializeAws_ec2CreateEgressOnlyInternetGatewayCommand;
const serializeAws_ec2CreateFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateFleetRequest(input, context),
        Action: "CreateFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateFleetCommand = serializeAws_ec2CreateFleetCommand;
const serializeAws_ec2CreateFlowLogsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateFlowLogsRequest(input, context),
        Action: "CreateFlowLogs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateFlowLogsCommand = serializeAws_ec2CreateFlowLogsCommand;
const serializeAws_ec2CreateFpgaImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateFpgaImageRequest(input, context),
        Action: "CreateFpgaImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateFpgaImageCommand = serializeAws_ec2CreateFpgaImageCommand;
const serializeAws_ec2CreateImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateImageRequest(input, context),
        Action: "CreateImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateImageCommand = serializeAws_ec2CreateImageCommand;
const serializeAws_ec2CreateInstanceEventWindowCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateInstanceEventWindowRequest(input, context),
        Action: "CreateInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateInstanceEventWindowCommand = serializeAws_ec2CreateInstanceEventWindowCommand;
const serializeAws_ec2CreateInstanceExportTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateInstanceExportTaskRequest(input, context),
        Action: "CreateInstanceExportTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateInstanceExportTaskCommand = serializeAws_ec2CreateInstanceExportTaskCommand;
const serializeAws_ec2CreateInternetGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateInternetGatewayRequest(input, context),
        Action: "CreateInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateInternetGatewayCommand = serializeAws_ec2CreateInternetGatewayCommand;
const serializeAws_ec2CreateIpamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateIpamRequest(input, context),
        Action: "CreateIpam",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateIpamCommand = serializeAws_ec2CreateIpamCommand;
const serializeAws_ec2CreateIpamPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateIpamPoolRequest(input, context),
        Action: "CreateIpamPool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateIpamPoolCommand = serializeAws_ec2CreateIpamPoolCommand;
const serializeAws_ec2CreateIpamScopeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateIpamScopeRequest(input, context),
        Action: "CreateIpamScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateIpamScopeCommand = serializeAws_ec2CreateIpamScopeCommand;
const serializeAws_ec2CreateKeyPairCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateKeyPairRequest(input, context),
        Action: "CreateKeyPair",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateKeyPairCommand = serializeAws_ec2CreateKeyPairCommand;
const serializeAws_ec2CreateLaunchTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateLaunchTemplateRequest(input, context),
        Action: "CreateLaunchTemplate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateLaunchTemplateCommand = serializeAws_ec2CreateLaunchTemplateCommand;
const serializeAws_ec2CreateLaunchTemplateVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateLaunchTemplateVersionRequest(input, context),
        Action: "CreateLaunchTemplateVersion",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateLaunchTemplateVersionCommand = serializeAws_ec2CreateLaunchTemplateVersionCommand;
const serializeAws_ec2CreateLocalGatewayRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateLocalGatewayRouteRequest(input, context),
        Action: "CreateLocalGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateLocalGatewayRouteCommand = serializeAws_ec2CreateLocalGatewayRouteCommand;
const serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationRequest(input, context),
        Action: "CreateLocalGatewayRouteTableVpcAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand;
const serializeAws_ec2CreateManagedPrefixListCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateManagedPrefixListRequest(input, context),
        Action: "CreateManagedPrefixList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateManagedPrefixListCommand = serializeAws_ec2CreateManagedPrefixListCommand;
const serializeAws_ec2CreateNatGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateNatGatewayRequest(input, context),
        Action: "CreateNatGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateNatGatewayCommand = serializeAws_ec2CreateNatGatewayCommand;
const serializeAws_ec2CreateNetworkAclCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateNetworkAclRequest(input, context),
        Action: "CreateNetworkAcl",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateNetworkAclCommand = serializeAws_ec2CreateNetworkAclCommand;
const serializeAws_ec2CreateNetworkAclEntryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateNetworkAclEntryRequest(input, context),
        Action: "CreateNetworkAclEntry",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateNetworkAclEntryCommand = serializeAws_ec2CreateNetworkAclEntryCommand;
const serializeAws_ec2CreateNetworkInsightsAccessScopeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateNetworkInsightsAccessScopeRequest(input, context),
        Action: "CreateNetworkInsightsAccessScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateNetworkInsightsAccessScopeCommand = serializeAws_ec2CreateNetworkInsightsAccessScopeCommand;
const serializeAws_ec2CreateNetworkInsightsPathCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateNetworkInsightsPathRequest(input, context),
        Action: "CreateNetworkInsightsPath",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateNetworkInsightsPathCommand = serializeAws_ec2CreateNetworkInsightsPathCommand;
const serializeAws_ec2CreateNetworkInterfaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateNetworkInterfaceRequest(input, context),
        Action: "CreateNetworkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateNetworkInterfaceCommand = serializeAws_ec2CreateNetworkInterfaceCommand;
const serializeAws_ec2CreateNetworkInterfacePermissionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateNetworkInterfacePermissionRequest(input, context),
        Action: "CreateNetworkInterfacePermission",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateNetworkInterfacePermissionCommand = serializeAws_ec2CreateNetworkInterfacePermissionCommand;
const serializeAws_ec2CreatePlacementGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreatePlacementGroupRequest(input, context),
        Action: "CreatePlacementGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreatePlacementGroupCommand = serializeAws_ec2CreatePlacementGroupCommand;
const serializeAws_ec2CreatePublicIpv4PoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreatePublicIpv4PoolRequest(input, context),
        Action: "CreatePublicIpv4Pool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreatePublicIpv4PoolCommand = serializeAws_ec2CreatePublicIpv4PoolCommand;
const serializeAws_ec2CreateReplaceRootVolumeTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateReplaceRootVolumeTaskRequest(input, context),
        Action: "CreateReplaceRootVolumeTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateReplaceRootVolumeTaskCommand = serializeAws_ec2CreateReplaceRootVolumeTaskCommand;
const serializeAws_ec2CreateReservedInstancesListingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateReservedInstancesListingRequest(input, context),
        Action: "CreateReservedInstancesListing",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateReservedInstancesListingCommand = serializeAws_ec2CreateReservedInstancesListingCommand;
const serializeAws_ec2CreateRestoreImageTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateRestoreImageTaskRequest(input, context),
        Action: "CreateRestoreImageTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateRestoreImageTaskCommand = serializeAws_ec2CreateRestoreImageTaskCommand;
const serializeAws_ec2CreateRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateRouteRequest(input, context),
        Action: "CreateRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateRouteCommand = serializeAws_ec2CreateRouteCommand;
const serializeAws_ec2CreateRouteTableCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateRouteTableRequest(input, context),
        Action: "CreateRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateRouteTableCommand = serializeAws_ec2CreateRouteTableCommand;
const serializeAws_ec2CreateSecurityGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateSecurityGroupRequest(input, context),
        Action: "CreateSecurityGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateSecurityGroupCommand = serializeAws_ec2CreateSecurityGroupCommand;
const serializeAws_ec2CreateSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateSnapshotRequest(input, context),
        Action: "CreateSnapshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateSnapshotCommand = serializeAws_ec2CreateSnapshotCommand;
const serializeAws_ec2CreateSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateSnapshotsRequest(input, context),
        Action: "CreateSnapshots",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateSnapshotsCommand = serializeAws_ec2CreateSnapshotsCommand;
const serializeAws_ec2CreateSpotDatafeedSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateSpotDatafeedSubscriptionRequest(input, context),
        Action: "CreateSpotDatafeedSubscription",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateSpotDatafeedSubscriptionCommand = serializeAws_ec2CreateSpotDatafeedSubscriptionCommand;
const serializeAws_ec2CreateStoreImageTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateStoreImageTaskRequest(input, context),
        Action: "CreateStoreImageTask",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateStoreImageTaskCommand = serializeAws_ec2CreateStoreImageTaskCommand;
const serializeAws_ec2CreateSubnetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateSubnetRequest(input, context),
        Action: "CreateSubnet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateSubnetCommand = serializeAws_ec2CreateSubnetCommand;
const serializeAws_ec2CreateSubnetCidrReservationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateSubnetCidrReservationRequest(input, context),
        Action: "CreateSubnetCidrReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateSubnetCidrReservationCommand = serializeAws_ec2CreateSubnetCidrReservationCommand;
const serializeAws_ec2CreateTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTagsRequest(input, context),
        Action: "CreateTags",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTagsCommand = serializeAws_ec2CreateTagsCommand;
const serializeAws_ec2CreateTrafficMirrorFilterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTrafficMirrorFilterRequest(input, context),
        Action: "CreateTrafficMirrorFilter",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTrafficMirrorFilterCommand = serializeAws_ec2CreateTrafficMirrorFilterCommand;
const serializeAws_ec2CreateTrafficMirrorFilterRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTrafficMirrorFilterRuleRequest(input, context),
        Action: "CreateTrafficMirrorFilterRule",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTrafficMirrorFilterRuleCommand = serializeAws_ec2CreateTrafficMirrorFilterRuleCommand;
const serializeAws_ec2CreateTrafficMirrorSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTrafficMirrorSessionRequest(input, context),
        Action: "CreateTrafficMirrorSession",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTrafficMirrorSessionCommand = serializeAws_ec2CreateTrafficMirrorSessionCommand;
const serializeAws_ec2CreateTrafficMirrorTargetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTrafficMirrorTargetRequest(input, context),
        Action: "CreateTrafficMirrorTarget",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTrafficMirrorTargetCommand = serializeAws_ec2CreateTrafficMirrorTargetCommand;
const serializeAws_ec2CreateTransitGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTransitGatewayRequest(input, context),
        Action: "CreateTransitGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTransitGatewayCommand = serializeAws_ec2CreateTransitGatewayCommand;
const serializeAws_ec2CreateTransitGatewayConnectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTransitGatewayConnectRequest(input, context),
        Action: "CreateTransitGatewayConnect",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTransitGatewayConnectCommand = serializeAws_ec2CreateTransitGatewayConnectCommand;
const serializeAws_ec2CreateTransitGatewayConnectPeerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTransitGatewayConnectPeerRequest(input, context),
        Action: "CreateTransitGatewayConnectPeer",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTransitGatewayConnectPeerCommand = serializeAws_ec2CreateTransitGatewayConnectPeerCommand;
const serializeAws_ec2CreateTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTransitGatewayMulticastDomainRequest(input, context),
        Action: "CreateTransitGatewayMulticastDomain",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTransitGatewayMulticastDomainCommand = serializeAws_ec2CreateTransitGatewayMulticastDomainCommand;
const serializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequest(input, context),
        Action: "CreateTransitGatewayPeeringAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = serializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand;
const serializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTransitGatewayPrefixListReferenceRequest(input, context),
        Action: "CreateTransitGatewayPrefixListReference",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = serializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand;
const serializeAws_ec2CreateTransitGatewayRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTransitGatewayRouteRequest(input, context),
        Action: "CreateTransitGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTransitGatewayRouteCommand = serializeAws_ec2CreateTransitGatewayRouteCommand;
const serializeAws_ec2CreateTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTransitGatewayRouteTableRequest(input, context),
        Action: "CreateTransitGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTransitGatewayRouteTableCommand = serializeAws_ec2CreateTransitGatewayRouteTableCommand;
const serializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateTransitGatewayVpcAttachmentRequest(input, context),
        Action: "CreateTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = serializeAws_ec2CreateTransitGatewayVpcAttachmentCommand;
const serializeAws_ec2CreateVolumeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateVolumeRequest(input, context),
        Action: "CreateVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateVolumeCommand = serializeAws_ec2CreateVolumeCommand;
const serializeAws_ec2CreateVpcCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateVpcRequest(input, context),
        Action: "CreateVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateVpcCommand = serializeAws_ec2CreateVpcCommand;
const serializeAws_ec2CreateVpcEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateVpcEndpointRequest(input, context),
        Action: "CreateVpcEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateVpcEndpointCommand = serializeAws_ec2CreateVpcEndpointCommand;
const serializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateVpcEndpointConnectionNotificationRequest(input, context),
        Action: "CreateVpcEndpointConnectionNotification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = serializeAws_ec2CreateVpcEndpointConnectionNotificationCommand;
const serializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateVpcEndpointServiceConfigurationRequest(input, context),
        Action: "CreateVpcEndpointServiceConfiguration",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = serializeAws_ec2CreateVpcEndpointServiceConfigurationCommand;
const serializeAws_ec2CreateVpcPeeringConnectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateVpcPeeringConnectionRequest(input, context),
        Action: "CreateVpcPeeringConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateVpcPeeringConnectionCommand = serializeAws_ec2CreateVpcPeeringConnectionCommand;
const serializeAws_ec2CreateVpnConnectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateVpnConnectionRequest(input, context),
        Action: "CreateVpnConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateVpnConnectionCommand = serializeAws_ec2CreateVpnConnectionCommand;
const serializeAws_ec2CreateVpnConnectionRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateVpnConnectionRouteRequest(input, context),
        Action: "CreateVpnConnectionRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateVpnConnectionRouteCommand = serializeAws_ec2CreateVpnConnectionRouteCommand;
const serializeAws_ec2CreateVpnGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2CreateVpnGatewayRequest(input, context),
        Action: "CreateVpnGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2CreateVpnGatewayCommand = serializeAws_ec2CreateVpnGatewayCommand;
const serializeAws_ec2DeleteCarrierGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteCarrierGatewayRequest(input, context),
        Action: "DeleteCarrierGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteCarrierGatewayCommand = serializeAws_ec2DeleteCarrierGatewayCommand;
const serializeAws_ec2DeleteClientVpnEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteClientVpnEndpointRequest(input, context),
        Action: "DeleteClientVpnEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteClientVpnEndpointCommand = serializeAws_ec2DeleteClientVpnEndpointCommand;
const serializeAws_ec2DeleteClientVpnRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteClientVpnRouteRequest(input, context),
        Action: "DeleteClientVpnRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteClientVpnRouteCommand = serializeAws_ec2DeleteClientVpnRouteCommand;
const serializeAws_ec2DeleteCustomerGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteCustomerGatewayRequest(input, context),
        Action: "DeleteCustomerGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteCustomerGatewayCommand = serializeAws_ec2DeleteCustomerGatewayCommand;
const serializeAws_ec2DeleteDhcpOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteDhcpOptionsRequest(input, context),
        Action: "DeleteDhcpOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteDhcpOptionsCommand = serializeAws_ec2DeleteDhcpOptionsCommand;
const serializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteEgressOnlyInternetGatewayRequest(input, context),
        Action: "DeleteEgressOnlyInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = serializeAws_ec2DeleteEgressOnlyInternetGatewayCommand;
const serializeAws_ec2DeleteFleetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteFleetsRequest(input, context),
        Action: "DeleteFleets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteFleetsCommand = serializeAws_ec2DeleteFleetsCommand;
const serializeAws_ec2DeleteFlowLogsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteFlowLogsRequest(input, context),
        Action: "DeleteFlowLogs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteFlowLogsCommand = serializeAws_ec2DeleteFlowLogsCommand;
const serializeAws_ec2DeleteFpgaImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteFpgaImageRequest(input, context),
        Action: "DeleteFpgaImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteFpgaImageCommand = serializeAws_ec2DeleteFpgaImageCommand;
const serializeAws_ec2DeleteInstanceEventWindowCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteInstanceEventWindowRequest(input, context),
        Action: "DeleteInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteInstanceEventWindowCommand = serializeAws_ec2DeleteInstanceEventWindowCommand;
const serializeAws_ec2DeleteInternetGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteInternetGatewayRequest(input, context),
        Action: "DeleteInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteInternetGatewayCommand = serializeAws_ec2DeleteInternetGatewayCommand;
const serializeAws_ec2DeleteIpamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteIpamRequest(input, context),
        Action: "DeleteIpam",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteIpamCommand = serializeAws_ec2DeleteIpamCommand;
const serializeAws_ec2DeleteIpamPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteIpamPoolRequest(input, context),
        Action: "DeleteIpamPool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteIpamPoolCommand = serializeAws_ec2DeleteIpamPoolCommand;
const serializeAws_ec2DeleteIpamScopeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteIpamScopeRequest(input, context),
        Action: "DeleteIpamScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteIpamScopeCommand = serializeAws_ec2DeleteIpamScopeCommand;
const serializeAws_ec2DeleteKeyPairCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteKeyPairRequest(input, context),
        Action: "DeleteKeyPair",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteKeyPairCommand = serializeAws_ec2DeleteKeyPairCommand;
const serializeAws_ec2DeleteLaunchTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteLaunchTemplateRequest(input, context),
        Action: "DeleteLaunchTemplate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteLaunchTemplateCommand = serializeAws_ec2DeleteLaunchTemplateCommand;
const serializeAws_ec2DeleteLaunchTemplateVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteLaunchTemplateVersionsRequest(input, context),
        Action: "DeleteLaunchTemplateVersions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteLaunchTemplateVersionsCommand = serializeAws_ec2DeleteLaunchTemplateVersionsCommand;
const serializeAws_ec2DeleteLocalGatewayRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteLocalGatewayRouteRequest(input, context),
        Action: "DeleteLocalGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteLocalGatewayRouteCommand = serializeAws_ec2DeleteLocalGatewayRouteCommand;
const serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationRequest(input, context),
        Action: "DeleteLocalGatewayRouteTableVpcAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand;
const serializeAws_ec2DeleteManagedPrefixListCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteManagedPrefixListRequest(input, context),
        Action: "DeleteManagedPrefixList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteManagedPrefixListCommand = serializeAws_ec2DeleteManagedPrefixListCommand;
const serializeAws_ec2DeleteNatGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteNatGatewayRequest(input, context),
        Action: "DeleteNatGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteNatGatewayCommand = serializeAws_ec2DeleteNatGatewayCommand;
const serializeAws_ec2DeleteNetworkAclCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteNetworkAclRequest(input, context),
        Action: "DeleteNetworkAcl",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteNetworkAclCommand = serializeAws_ec2DeleteNetworkAclCommand;
const serializeAws_ec2DeleteNetworkAclEntryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteNetworkAclEntryRequest(input, context),
        Action: "DeleteNetworkAclEntry",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteNetworkAclEntryCommand = serializeAws_ec2DeleteNetworkAclEntryCommand;
const serializeAws_ec2DeleteNetworkInsightsAccessScopeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteNetworkInsightsAccessScopeRequest(input, context),
        Action: "DeleteNetworkInsightsAccessScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteNetworkInsightsAccessScopeCommand = serializeAws_ec2DeleteNetworkInsightsAccessScopeCommand;
const serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisRequest(input, context),
        Action: "DeleteNetworkInsightsAccessScopeAnalysis",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand = serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand;
const serializeAws_ec2DeleteNetworkInsightsAnalysisCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteNetworkInsightsAnalysisRequest(input, context),
        Action: "DeleteNetworkInsightsAnalysis",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteNetworkInsightsAnalysisCommand = serializeAws_ec2DeleteNetworkInsightsAnalysisCommand;
const serializeAws_ec2DeleteNetworkInsightsPathCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteNetworkInsightsPathRequest(input, context),
        Action: "DeleteNetworkInsightsPath",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteNetworkInsightsPathCommand = serializeAws_ec2DeleteNetworkInsightsPathCommand;
const serializeAws_ec2DeleteNetworkInterfaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteNetworkInterfaceRequest(input, context),
        Action: "DeleteNetworkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteNetworkInterfaceCommand = serializeAws_ec2DeleteNetworkInterfaceCommand;
const serializeAws_ec2DeleteNetworkInterfacePermissionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteNetworkInterfacePermissionRequest(input, context),
        Action: "DeleteNetworkInterfacePermission",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteNetworkInterfacePermissionCommand = serializeAws_ec2DeleteNetworkInterfacePermissionCommand;
const serializeAws_ec2DeletePlacementGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeletePlacementGroupRequest(input, context),
        Action: "DeletePlacementGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeletePlacementGroupCommand = serializeAws_ec2DeletePlacementGroupCommand;
const serializeAws_ec2DeletePublicIpv4PoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeletePublicIpv4PoolRequest(input, context),
        Action: "DeletePublicIpv4Pool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeletePublicIpv4PoolCommand = serializeAws_ec2DeletePublicIpv4PoolCommand;
const serializeAws_ec2DeleteQueuedReservedInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteQueuedReservedInstancesRequest(input, context),
        Action: "DeleteQueuedReservedInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteQueuedReservedInstancesCommand = serializeAws_ec2DeleteQueuedReservedInstancesCommand;
const serializeAws_ec2DeleteRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteRouteRequest(input, context),
        Action: "DeleteRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteRouteCommand = serializeAws_ec2DeleteRouteCommand;
const serializeAws_ec2DeleteRouteTableCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteRouteTableRequest(input, context),
        Action: "DeleteRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteRouteTableCommand = serializeAws_ec2DeleteRouteTableCommand;
const serializeAws_ec2DeleteSecurityGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteSecurityGroupRequest(input, context),
        Action: "DeleteSecurityGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteSecurityGroupCommand = serializeAws_ec2DeleteSecurityGroupCommand;
const serializeAws_ec2DeleteSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteSnapshotRequest(input, context),
        Action: "DeleteSnapshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteSnapshotCommand = serializeAws_ec2DeleteSnapshotCommand;
const serializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteSpotDatafeedSubscriptionRequest(input, context),
        Action: "DeleteSpotDatafeedSubscription",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = serializeAws_ec2DeleteSpotDatafeedSubscriptionCommand;
const serializeAws_ec2DeleteSubnetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteSubnetRequest(input, context),
        Action: "DeleteSubnet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteSubnetCommand = serializeAws_ec2DeleteSubnetCommand;
const serializeAws_ec2DeleteSubnetCidrReservationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteSubnetCidrReservationRequest(input, context),
        Action: "DeleteSubnetCidrReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteSubnetCidrReservationCommand = serializeAws_ec2DeleteSubnetCidrReservationCommand;
const serializeAws_ec2DeleteTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTagsRequest(input, context),
        Action: "DeleteTags",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTagsCommand = serializeAws_ec2DeleteTagsCommand;
const serializeAws_ec2DeleteTrafficMirrorFilterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTrafficMirrorFilterRequest(input, context),
        Action: "DeleteTrafficMirrorFilter",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTrafficMirrorFilterCommand = serializeAws_ec2DeleteTrafficMirrorFilterCommand;
const serializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTrafficMirrorFilterRuleRequest(input, context),
        Action: "DeleteTrafficMirrorFilterRule",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = serializeAws_ec2DeleteTrafficMirrorFilterRuleCommand;
const serializeAws_ec2DeleteTrafficMirrorSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTrafficMirrorSessionRequest(input, context),
        Action: "DeleteTrafficMirrorSession",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTrafficMirrorSessionCommand = serializeAws_ec2DeleteTrafficMirrorSessionCommand;
const serializeAws_ec2DeleteTrafficMirrorTargetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTrafficMirrorTargetRequest(input, context),
        Action: "DeleteTrafficMirrorTarget",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTrafficMirrorTargetCommand = serializeAws_ec2DeleteTrafficMirrorTargetCommand;
const serializeAws_ec2DeleteTransitGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTransitGatewayRequest(input, context),
        Action: "DeleteTransitGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTransitGatewayCommand = serializeAws_ec2DeleteTransitGatewayCommand;
const serializeAws_ec2DeleteTransitGatewayConnectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTransitGatewayConnectRequest(input, context),
        Action: "DeleteTransitGatewayConnect",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTransitGatewayConnectCommand = serializeAws_ec2DeleteTransitGatewayConnectCommand;
const serializeAws_ec2DeleteTransitGatewayConnectPeerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTransitGatewayConnectPeerRequest(input, context),
        Action: "DeleteTransitGatewayConnectPeer",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTransitGatewayConnectPeerCommand = serializeAws_ec2DeleteTransitGatewayConnectPeerCommand;
const serializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTransitGatewayMulticastDomainRequest(input, context),
        Action: "DeleteTransitGatewayMulticastDomain",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = serializeAws_ec2DeleteTransitGatewayMulticastDomainCommand;
const serializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTransitGatewayPeeringAttachmentRequest(input, context),
        Action: "DeleteTransitGatewayPeeringAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = serializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand;
const serializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTransitGatewayPrefixListReferenceRequest(input, context),
        Action: "DeleteTransitGatewayPrefixListReference",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = serializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand;
const serializeAws_ec2DeleteTransitGatewayRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTransitGatewayRouteRequest(input, context),
        Action: "DeleteTransitGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTransitGatewayRouteCommand = serializeAws_ec2DeleteTransitGatewayRouteCommand;
const serializeAws_ec2DeleteTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTransitGatewayRouteTableRequest(input, context),
        Action: "DeleteTransitGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTransitGatewayRouteTableCommand = serializeAws_ec2DeleteTransitGatewayRouteTableCommand;
const serializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteTransitGatewayVpcAttachmentRequest(input, context),
        Action: "DeleteTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = serializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand;
const serializeAws_ec2DeleteVolumeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteVolumeRequest(input, context),
        Action: "DeleteVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteVolumeCommand = serializeAws_ec2DeleteVolumeCommand;
const serializeAws_ec2DeleteVpcCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteVpcRequest(input, context),
        Action: "DeleteVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteVpcCommand = serializeAws_ec2DeleteVpcCommand;
const serializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteVpcEndpointConnectionNotificationsRequest(input, context),
        Action: "DeleteVpcEndpointConnectionNotifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = serializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand;
const serializeAws_ec2DeleteVpcEndpointsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteVpcEndpointsRequest(input, context),
        Action: "DeleteVpcEndpoints",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteVpcEndpointsCommand = serializeAws_ec2DeleteVpcEndpointsCommand;
const serializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteVpcEndpointServiceConfigurationsRequest(input, context),
        Action: "DeleteVpcEndpointServiceConfigurations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = serializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand;
const serializeAws_ec2DeleteVpcPeeringConnectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteVpcPeeringConnectionRequest(input, context),
        Action: "DeleteVpcPeeringConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteVpcPeeringConnectionCommand = serializeAws_ec2DeleteVpcPeeringConnectionCommand;
const serializeAws_ec2DeleteVpnConnectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteVpnConnectionRequest(input, context),
        Action: "DeleteVpnConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteVpnConnectionCommand = serializeAws_ec2DeleteVpnConnectionCommand;
const serializeAws_ec2DeleteVpnConnectionRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteVpnConnectionRouteRequest(input, context),
        Action: "DeleteVpnConnectionRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteVpnConnectionRouteCommand = serializeAws_ec2DeleteVpnConnectionRouteCommand;
const serializeAws_ec2DeleteVpnGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeleteVpnGatewayRequest(input, context),
        Action: "DeleteVpnGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeleteVpnGatewayCommand = serializeAws_ec2DeleteVpnGatewayCommand;
const serializeAws_ec2DeprovisionByoipCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeprovisionByoipCidrRequest(input, context),
        Action: "DeprovisionByoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeprovisionByoipCidrCommand = serializeAws_ec2DeprovisionByoipCidrCommand;
const serializeAws_ec2DeprovisionIpamPoolCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeprovisionIpamPoolCidrRequest(input, context),
        Action: "DeprovisionIpamPoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeprovisionIpamPoolCidrCommand = serializeAws_ec2DeprovisionIpamPoolCidrCommand;
const serializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeprovisionPublicIpv4PoolCidrRequest(input, context),
        Action: "DeprovisionPublicIpv4PoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand = serializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand;
const serializeAws_ec2DeregisterImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeregisterImageRequest(input, context),
        Action: "DeregisterImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeregisterImageCommand = serializeAws_ec2DeregisterImageCommand;
const serializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeregisterInstanceEventNotificationAttributesRequest(input, context),
        Action: "DeregisterInstanceEventNotificationAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = serializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand;
const serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersRequest(input, context),
        Action: "DeregisterTransitGatewayMulticastGroupMembers",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand;
const serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesRequest(input, context),
        Action: "DeregisterTransitGatewayMulticastGroupSources",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand;
const serializeAws_ec2DescribeAccountAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeAccountAttributesRequest(input, context),
        Action: "DescribeAccountAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeAccountAttributesCommand = serializeAws_ec2DescribeAccountAttributesCommand;
const serializeAws_ec2DescribeAddressesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeAddressesRequest(input, context),
        Action: "DescribeAddresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeAddressesCommand = serializeAws_ec2DescribeAddressesCommand;
const serializeAws_ec2DescribeAddressesAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeAddressesAttributeRequest(input, context),
        Action: "DescribeAddressesAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeAddressesAttributeCommand = serializeAws_ec2DescribeAddressesAttributeCommand;
const serializeAws_ec2DescribeAggregateIdFormatCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeAggregateIdFormatRequest(input, context),
        Action: "DescribeAggregateIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeAggregateIdFormatCommand = serializeAws_ec2DescribeAggregateIdFormatCommand;
const serializeAws_ec2DescribeAvailabilityZonesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeAvailabilityZonesRequest(input, context),
        Action: "DescribeAvailabilityZones",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeAvailabilityZonesCommand = serializeAws_ec2DescribeAvailabilityZonesCommand;
const serializeAws_ec2DescribeBundleTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeBundleTasksRequest(input, context),
        Action: "DescribeBundleTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeBundleTasksCommand = serializeAws_ec2DescribeBundleTasksCommand;
const serializeAws_ec2DescribeByoipCidrsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeByoipCidrsRequest(input, context),
        Action: "DescribeByoipCidrs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeByoipCidrsCommand = serializeAws_ec2DescribeByoipCidrsCommand;
const serializeAws_ec2DescribeCapacityReservationFleetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeCapacityReservationFleetsRequest(input, context),
        Action: "DescribeCapacityReservationFleets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeCapacityReservationFleetsCommand = serializeAws_ec2DescribeCapacityReservationFleetsCommand;
const serializeAws_ec2DescribeCapacityReservationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeCapacityReservationsRequest(input, context),
        Action: "DescribeCapacityReservations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeCapacityReservationsCommand = serializeAws_ec2DescribeCapacityReservationsCommand;
const serializeAws_ec2DescribeCarrierGatewaysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeCarrierGatewaysRequest(input, context),
        Action: "DescribeCarrierGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeCarrierGatewaysCommand = serializeAws_ec2DescribeCarrierGatewaysCommand;
const serializeAws_ec2DescribeClassicLinkInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeClassicLinkInstancesRequest(input, context),
        Action: "DescribeClassicLinkInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeClassicLinkInstancesCommand = serializeAws_ec2DescribeClassicLinkInstancesCommand;
const serializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeClientVpnAuthorizationRulesRequest(input, context),
        Action: "DescribeClientVpnAuthorizationRules",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = serializeAws_ec2DescribeClientVpnAuthorizationRulesCommand;
const serializeAws_ec2DescribeClientVpnConnectionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeClientVpnConnectionsRequest(input, context),
        Action: "DescribeClientVpnConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeClientVpnConnectionsCommand = serializeAws_ec2DescribeClientVpnConnectionsCommand;
const serializeAws_ec2DescribeClientVpnEndpointsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeClientVpnEndpointsRequest(input, context),
        Action: "DescribeClientVpnEndpoints",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeClientVpnEndpointsCommand = serializeAws_ec2DescribeClientVpnEndpointsCommand;
const serializeAws_ec2DescribeClientVpnRoutesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeClientVpnRoutesRequest(input, context),
        Action: "DescribeClientVpnRoutes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeClientVpnRoutesCommand = serializeAws_ec2DescribeClientVpnRoutesCommand;
const serializeAws_ec2DescribeClientVpnTargetNetworksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeClientVpnTargetNetworksRequest(input, context),
        Action: "DescribeClientVpnTargetNetworks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeClientVpnTargetNetworksCommand = serializeAws_ec2DescribeClientVpnTargetNetworksCommand;
const serializeAws_ec2DescribeCoipPoolsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeCoipPoolsRequest(input, context),
        Action: "DescribeCoipPools",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeCoipPoolsCommand = serializeAws_ec2DescribeCoipPoolsCommand;
const serializeAws_ec2DescribeConversionTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeConversionTasksRequest(input, context),
        Action: "DescribeConversionTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeConversionTasksCommand = serializeAws_ec2DescribeConversionTasksCommand;
const serializeAws_ec2DescribeCustomerGatewaysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeCustomerGatewaysRequest(input, context),
        Action: "DescribeCustomerGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeCustomerGatewaysCommand = serializeAws_ec2DescribeCustomerGatewaysCommand;
const serializeAws_ec2DescribeDhcpOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeDhcpOptionsRequest(input, context),
        Action: "DescribeDhcpOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeDhcpOptionsCommand = serializeAws_ec2DescribeDhcpOptionsCommand;
const serializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeEgressOnlyInternetGatewaysRequest(input, context),
        Action: "DescribeEgressOnlyInternetGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = serializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand;
const serializeAws_ec2DescribeElasticGpusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeElasticGpusRequest(input, context),
        Action: "DescribeElasticGpus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeElasticGpusCommand = serializeAws_ec2DescribeElasticGpusCommand;
const serializeAws_ec2DescribeExportImageTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeExportImageTasksRequest(input, context),
        Action: "DescribeExportImageTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeExportImageTasksCommand = serializeAws_ec2DescribeExportImageTasksCommand;
const serializeAws_ec2DescribeExportTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeExportTasksRequest(input, context),
        Action: "DescribeExportTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeExportTasksCommand = serializeAws_ec2DescribeExportTasksCommand;
const serializeAws_ec2DescribeFastLaunchImagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeFastLaunchImagesRequest(input, context),
        Action: "DescribeFastLaunchImages",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeFastLaunchImagesCommand = serializeAws_ec2DescribeFastLaunchImagesCommand;
const serializeAws_ec2DescribeFastSnapshotRestoresCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeFastSnapshotRestoresRequest(input, context),
        Action: "DescribeFastSnapshotRestores",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeFastSnapshotRestoresCommand = serializeAws_ec2DescribeFastSnapshotRestoresCommand;
const serializeAws_ec2DescribeFleetHistoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeFleetHistoryRequest(input, context),
        Action: "DescribeFleetHistory",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeFleetHistoryCommand = serializeAws_ec2DescribeFleetHistoryCommand;
const serializeAws_ec2DescribeFleetInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeFleetInstancesRequest(input, context),
        Action: "DescribeFleetInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeFleetInstancesCommand = serializeAws_ec2DescribeFleetInstancesCommand;
const serializeAws_ec2DescribeFleetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeFleetsRequest(input, context),
        Action: "DescribeFleets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeFleetsCommand = serializeAws_ec2DescribeFleetsCommand;
const serializeAws_ec2DescribeFlowLogsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeFlowLogsRequest(input, context),
        Action: "DescribeFlowLogs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeFlowLogsCommand = serializeAws_ec2DescribeFlowLogsCommand;
const serializeAws_ec2DescribeFpgaImageAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeFpgaImageAttributeRequest(input, context),
        Action: "DescribeFpgaImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeFpgaImageAttributeCommand = serializeAws_ec2DescribeFpgaImageAttributeCommand;
const serializeAws_ec2DescribeFpgaImagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeFpgaImagesRequest(input, context),
        Action: "DescribeFpgaImages",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeFpgaImagesCommand = serializeAws_ec2DescribeFpgaImagesCommand;
const serializeAws_ec2DescribeHostReservationOfferingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeHostReservationOfferingsRequest(input, context),
        Action: "DescribeHostReservationOfferings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeHostReservationOfferingsCommand = serializeAws_ec2DescribeHostReservationOfferingsCommand;
const serializeAws_ec2DescribeHostReservationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeHostReservationsRequest(input, context),
        Action: "DescribeHostReservations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeHostReservationsCommand = serializeAws_ec2DescribeHostReservationsCommand;
const serializeAws_ec2DescribeHostsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeHostsRequest(input, context),
        Action: "DescribeHosts",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeHostsCommand = serializeAws_ec2DescribeHostsCommand;
const serializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeIamInstanceProfileAssociationsRequest(input, context),
        Action: "DescribeIamInstanceProfileAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = serializeAws_ec2DescribeIamInstanceProfileAssociationsCommand;
const serializeAws_ec2DescribeIdentityIdFormatCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeIdentityIdFormatRequest(input, context),
        Action: "DescribeIdentityIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeIdentityIdFormatCommand = serializeAws_ec2DescribeIdentityIdFormatCommand;
const serializeAws_ec2DescribeIdFormatCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeIdFormatRequest(input, context),
        Action: "DescribeIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeIdFormatCommand = serializeAws_ec2DescribeIdFormatCommand;
const serializeAws_ec2DescribeImageAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeImageAttributeRequest(input, context),
        Action: "DescribeImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeImageAttributeCommand = serializeAws_ec2DescribeImageAttributeCommand;
const serializeAws_ec2DescribeImagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeImagesRequest(input, context),
        Action: "DescribeImages",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeImagesCommand = serializeAws_ec2DescribeImagesCommand;
const serializeAws_ec2DescribeImportImageTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeImportImageTasksRequest(input, context),
        Action: "DescribeImportImageTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeImportImageTasksCommand = serializeAws_ec2DescribeImportImageTasksCommand;
const serializeAws_ec2DescribeImportSnapshotTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeImportSnapshotTasksRequest(input, context),
        Action: "DescribeImportSnapshotTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeImportSnapshotTasksCommand = serializeAws_ec2DescribeImportSnapshotTasksCommand;
const serializeAws_ec2DescribeInstanceAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeInstanceAttributeRequest(input, context),
        Action: "DescribeInstanceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeInstanceAttributeCommand = serializeAws_ec2DescribeInstanceAttributeCommand;
const serializeAws_ec2DescribeInstanceCreditSpecificationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeInstanceCreditSpecificationsRequest(input, context),
        Action: "DescribeInstanceCreditSpecifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeInstanceCreditSpecificationsCommand = serializeAws_ec2DescribeInstanceCreditSpecificationsCommand;
const serializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeInstanceEventNotificationAttributesRequest(input, context),
        Action: "DescribeInstanceEventNotificationAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = serializeAws_ec2DescribeInstanceEventNotificationAttributesCommand;
const serializeAws_ec2DescribeInstanceEventWindowsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeInstanceEventWindowsRequest(input, context),
        Action: "DescribeInstanceEventWindows",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeInstanceEventWindowsCommand = serializeAws_ec2DescribeInstanceEventWindowsCommand;
const serializeAws_ec2DescribeInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeInstancesRequest(input, context),
        Action: "DescribeInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeInstancesCommand = serializeAws_ec2DescribeInstancesCommand;
const serializeAws_ec2DescribeInstanceStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeInstanceStatusRequest(input, context),
        Action: "DescribeInstanceStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeInstanceStatusCommand = serializeAws_ec2DescribeInstanceStatusCommand;
const serializeAws_ec2DescribeInstanceTypeOfferingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeInstanceTypeOfferingsRequest(input, context),
        Action: "DescribeInstanceTypeOfferings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeInstanceTypeOfferingsCommand = serializeAws_ec2DescribeInstanceTypeOfferingsCommand;
const serializeAws_ec2DescribeInstanceTypesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeInstanceTypesRequest(input, context),
        Action: "DescribeInstanceTypes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeInstanceTypesCommand = serializeAws_ec2DescribeInstanceTypesCommand;
const serializeAws_ec2DescribeInternetGatewaysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeInternetGatewaysRequest(input, context),
        Action: "DescribeInternetGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeInternetGatewaysCommand = serializeAws_ec2DescribeInternetGatewaysCommand;
const serializeAws_ec2DescribeIpamPoolsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeIpamPoolsRequest(input, context),
        Action: "DescribeIpamPools",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeIpamPoolsCommand = serializeAws_ec2DescribeIpamPoolsCommand;
const serializeAws_ec2DescribeIpamsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeIpamsRequest(input, context),
        Action: "DescribeIpams",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeIpamsCommand = serializeAws_ec2DescribeIpamsCommand;
const serializeAws_ec2DescribeIpamScopesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeIpamScopesRequest(input, context),
        Action: "DescribeIpamScopes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeIpamScopesCommand = serializeAws_ec2DescribeIpamScopesCommand;
const serializeAws_ec2DescribeIpv6PoolsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeIpv6PoolsRequest(input, context),
        Action: "DescribeIpv6Pools",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeIpv6PoolsCommand = serializeAws_ec2DescribeIpv6PoolsCommand;
const serializeAws_ec2DescribeKeyPairsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeKeyPairsRequest(input, context),
        Action: "DescribeKeyPairs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeKeyPairsCommand = serializeAws_ec2DescribeKeyPairsCommand;
const serializeAws_ec2DescribeLaunchTemplatesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeLaunchTemplatesRequest(input, context),
        Action: "DescribeLaunchTemplates",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeLaunchTemplatesCommand = serializeAws_ec2DescribeLaunchTemplatesCommand;
const serializeAws_ec2DescribeLaunchTemplateVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeLaunchTemplateVersionsRequest(input, context),
        Action: "DescribeLaunchTemplateVersions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeLaunchTemplateVersionsCommand = serializeAws_ec2DescribeLaunchTemplateVersionsCommand;
const serializeAws_ec2DescribeLocalGatewayRouteTablesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeLocalGatewayRouteTablesRequest(input, context),
        Action: "DescribeLocalGatewayRouteTables",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeLocalGatewayRouteTablesCommand = serializeAws_ec2DescribeLocalGatewayRouteTablesCommand;
const serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(input, context),
        Action: "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand;
const serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest(input, context),
        Action: "DescribeLocalGatewayRouteTableVpcAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand;
const serializeAws_ec2DescribeLocalGatewaysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeLocalGatewaysRequest(input, context),
        Action: "DescribeLocalGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeLocalGatewaysCommand = serializeAws_ec2DescribeLocalGatewaysCommand;
const serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest(input, context),
        Action: "DescribeLocalGatewayVirtualInterfaceGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand;
const serializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeLocalGatewayVirtualInterfacesRequest(input, context),
        Action: "DescribeLocalGatewayVirtualInterfaces",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = serializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand;
const serializeAws_ec2DescribeManagedPrefixListsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeManagedPrefixListsRequest(input, context),
        Action: "DescribeManagedPrefixLists",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeManagedPrefixListsCommand = serializeAws_ec2DescribeManagedPrefixListsCommand;
const serializeAws_ec2DescribeMovingAddressesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeMovingAddressesRequest(input, context),
        Action: "DescribeMovingAddresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeMovingAddressesCommand = serializeAws_ec2DescribeMovingAddressesCommand;
const serializeAws_ec2DescribeNatGatewaysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeNatGatewaysRequest(input, context),
        Action: "DescribeNatGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeNatGatewaysCommand = serializeAws_ec2DescribeNatGatewaysCommand;
const serializeAws_ec2DescribeNetworkAclsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeNetworkAclsRequest(input, context),
        Action: "DescribeNetworkAcls",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeNetworkAclsCommand = serializeAws_ec2DescribeNetworkAclsCommand;
const serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesRequest(input, context),
        Action: "DescribeNetworkInsightsAccessScopeAnalyses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand = serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand;
const serializeAws_ec2DescribeNetworkInsightsAccessScopesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeNetworkInsightsAccessScopesRequest(input, context),
        Action: "DescribeNetworkInsightsAccessScopes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeNetworkInsightsAccessScopesCommand = serializeAws_ec2DescribeNetworkInsightsAccessScopesCommand;
const serializeAws_ec2DescribeNetworkInsightsAnalysesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeNetworkInsightsAnalysesRequest(input, context),
        Action: "DescribeNetworkInsightsAnalyses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeNetworkInsightsAnalysesCommand = serializeAws_ec2DescribeNetworkInsightsAnalysesCommand;
const serializeAws_ec2DescribeNetworkInsightsPathsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeNetworkInsightsPathsRequest(input, context),
        Action: "DescribeNetworkInsightsPaths",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeNetworkInsightsPathsCommand = serializeAws_ec2DescribeNetworkInsightsPathsCommand;
const serializeAws_ec2DescribeNetworkInterfaceAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeNetworkInterfaceAttributeRequest(input, context),
        Action: "DescribeNetworkInterfaceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeNetworkInterfaceAttributeCommand = serializeAws_ec2DescribeNetworkInterfaceAttributeCommand;
const serializeAws_ec2DescribeNetworkInterfacePermissionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeNetworkInterfacePermissionsRequest(input, context),
        Action: "DescribeNetworkInterfacePermissions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeNetworkInterfacePermissionsCommand = serializeAws_ec2DescribeNetworkInterfacePermissionsCommand;
const serializeAws_ec2DescribeNetworkInterfacesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeNetworkInterfacesRequest(input, context),
        Action: "DescribeNetworkInterfaces",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeNetworkInterfacesCommand = serializeAws_ec2DescribeNetworkInterfacesCommand;
const serializeAws_ec2DescribePlacementGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribePlacementGroupsRequest(input, context),
        Action: "DescribePlacementGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribePlacementGroupsCommand = serializeAws_ec2DescribePlacementGroupsCommand;
const serializeAws_ec2DescribePrefixListsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribePrefixListsRequest(input, context),
        Action: "DescribePrefixLists",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribePrefixListsCommand = serializeAws_ec2DescribePrefixListsCommand;
const serializeAws_ec2DescribePrincipalIdFormatCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribePrincipalIdFormatRequest(input, context),
        Action: "DescribePrincipalIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribePrincipalIdFormatCommand = serializeAws_ec2DescribePrincipalIdFormatCommand;
const serializeAws_ec2DescribePublicIpv4PoolsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribePublicIpv4PoolsRequest(input, context),
        Action: "DescribePublicIpv4Pools",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribePublicIpv4PoolsCommand = serializeAws_ec2DescribePublicIpv4PoolsCommand;
const serializeAws_ec2DescribeRegionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeRegionsRequest(input, context),
        Action: "DescribeRegions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeRegionsCommand = serializeAws_ec2DescribeRegionsCommand;
const serializeAws_ec2DescribeReplaceRootVolumeTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeReplaceRootVolumeTasksRequest(input, context),
        Action: "DescribeReplaceRootVolumeTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeReplaceRootVolumeTasksCommand = serializeAws_ec2DescribeReplaceRootVolumeTasksCommand;
const serializeAws_ec2DescribeReservedInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeReservedInstancesRequest(input, context),
        Action: "DescribeReservedInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeReservedInstancesCommand = serializeAws_ec2DescribeReservedInstancesCommand;
const serializeAws_ec2DescribeReservedInstancesListingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeReservedInstancesListingsRequest(input, context),
        Action: "DescribeReservedInstancesListings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeReservedInstancesListingsCommand = serializeAws_ec2DescribeReservedInstancesListingsCommand;
const serializeAws_ec2DescribeReservedInstancesModificationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeReservedInstancesModificationsRequest(input, context),
        Action: "DescribeReservedInstancesModifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeReservedInstancesModificationsCommand = serializeAws_ec2DescribeReservedInstancesModificationsCommand;
const serializeAws_ec2DescribeReservedInstancesOfferingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeReservedInstancesOfferingsRequest(input, context),
        Action: "DescribeReservedInstancesOfferings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeReservedInstancesOfferingsCommand = serializeAws_ec2DescribeReservedInstancesOfferingsCommand;
const serializeAws_ec2DescribeRouteTablesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeRouteTablesRequest(input, context),
        Action: "DescribeRouteTables",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeRouteTablesCommand = serializeAws_ec2DescribeRouteTablesCommand;
const serializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeScheduledInstanceAvailabilityRequest(input, context),
        Action: "DescribeScheduledInstanceAvailability",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = serializeAws_ec2DescribeScheduledInstanceAvailabilityCommand;
const serializeAws_ec2DescribeScheduledInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeScheduledInstancesRequest(input, context),
        Action: "DescribeScheduledInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeScheduledInstancesCommand = serializeAws_ec2DescribeScheduledInstancesCommand;
const serializeAws_ec2DescribeSecurityGroupReferencesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSecurityGroupReferencesRequest(input, context),
        Action: "DescribeSecurityGroupReferences",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSecurityGroupReferencesCommand = serializeAws_ec2DescribeSecurityGroupReferencesCommand;
const serializeAws_ec2DescribeSecurityGroupRulesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSecurityGroupRulesRequest(input, context),
        Action: "DescribeSecurityGroupRules",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSecurityGroupRulesCommand = serializeAws_ec2DescribeSecurityGroupRulesCommand;
const serializeAws_ec2DescribeSecurityGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSecurityGroupsRequest(input, context),
        Action: "DescribeSecurityGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSecurityGroupsCommand = serializeAws_ec2DescribeSecurityGroupsCommand;
const serializeAws_ec2DescribeSnapshotAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSnapshotAttributeRequest(input, context),
        Action: "DescribeSnapshotAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSnapshotAttributeCommand = serializeAws_ec2DescribeSnapshotAttributeCommand;
const serializeAws_ec2DescribeSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSnapshotsRequest(input, context),
        Action: "DescribeSnapshots",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSnapshotsCommand = serializeAws_ec2DescribeSnapshotsCommand;
const serializeAws_ec2DescribeSnapshotTierStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSnapshotTierStatusRequest(input, context),
        Action: "DescribeSnapshotTierStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSnapshotTierStatusCommand = serializeAws_ec2DescribeSnapshotTierStatusCommand;
const serializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSpotDatafeedSubscriptionRequest(input, context),
        Action: "DescribeSpotDatafeedSubscription",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = serializeAws_ec2DescribeSpotDatafeedSubscriptionCommand;
const serializeAws_ec2DescribeSpotFleetInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSpotFleetInstancesRequest(input, context),
        Action: "DescribeSpotFleetInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSpotFleetInstancesCommand = serializeAws_ec2DescribeSpotFleetInstancesCommand;
const serializeAws_ec2DescribeSpotFleetRequestHistoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSpotFleetRequestHistoryRequest(input, context),
        Action: "DescribeSpotFleetRequestHistory",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSpotFleetRequestHistoryCommand = serializeAws_ec2DescribeSpotFleetRequestHistoryCommand;
const serializeAws_ec2DescribeSpotFleetRequestsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSpotFleetRequestsRequest(input, context),
        Action: "DescribeSpotFleetRequests",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSpotFleetRequestsCommand = serializeAws_ec2DescribeSpotFleetRequestsCommand;
const serializeAws_ec2DescribeSpotInstanceRequestsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSpotInstanceRequestsRequest(input, context),
        Action: "DescribeSpotInstanceRequests",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSpotInstanceRequestsCommand = serializeAws_ec2DescribeSpotInstanceRequestsCommand;
const serializeAws_ec2DescribeSpotPriceHistoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSpotPriceHistoryRequest(input, context),
        Action: "DescribeSpotPriceHistory",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSpotPriceHistoryCommand = serializeAws_ec2DescribeSpotPriceHistoryCommand;
const serializeAws_ec2DescribeStaleSecurityGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeStaleSecurityGroupsRequest(input, context),
        Action: "DescribeStaleSecurityGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeStaleSecurityGroupsCommand = serializeAws_ec2DescribeStaleSecurityGroupsCommand;
const serializeAws_ec2DescribeStoreImageTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeStoreImageTasksRequest(input, context),
        Action: "DescribeStoreImageTasks",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeStoreImageTasksCommand = serializeAws_ec2DescribeStoreImageTasksCommand;
const serializeAws_ec2DescribeSubnetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeSubnetsRequest(input, context),
        Action: "DescribeSubnets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeSubnetsCommand = serializeAws_ec2DescribeSubnetsCommand;
const serializeAws_ec2DescribeTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTagsRequest(input, context),
        Action: "DescribeTags",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTagsCommand = serializeAws_ec2DescribeTagsCommand;
const serializeAws_ec2DescribeTrafficMirrorFiltersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTrafficMirrorFiltersRequest(input, context),
        Action: "DescribeTrafficMirrorFilters",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTrafficMirrorFiltersCommand = serializeAws_ec2DescribeTrafficMirrorFiltersCommand;
const serializeAws_ec2DescribeTrafficMirrorSessionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTrafficMirrorSessionsRequest(input, context),
        Action: "DescribeTrafficMirrorSessions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTrafficMirrorSessionsCommand = serializeAws_ec2DescribeTrafficMirrorSessionsCommand;
const serializeAws_ec2DescribeTrafficMirrorTargetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTrafficMirrorTargetsRequest(input, context),
        Action: "DescribeTrafficMirrorTargets",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTrafficMirrorTargetsCommand = serializeAws_ec2DescribeTrafficMirrorTargetsCommand;
const serializeAws_ec2DescribeTransitGatewayAttachmentsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTransitGatewayAttachmentsRequest(input, context),
        Action: "DescribeTransitGatewayAttachments",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTransitGatewayAttachmentsCommand = serializeAws_ec2DescribeTransitGatewayAttachmentsCommand;
const serializeAws_ec2DescribeTransitGatewayConnectPeersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTransitGatewayConnectPeersRequest(input, context),
        Action: "DescribeTransitGatewayConnectPeers",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTransitGatewayConnectPeersCommand = serializeAws_ec2DescribeTransitGatewayConnectPeersCommand;
const serializeAws_ec2DescribeTransitGatewayConnectsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTransitGatewayConnectsRequest(input, context),
        Action: "DescribeTransitGatewayConnects",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTransitGatewayConnectsCommand = serializeAws_ec2DescribeTransitGatewayConnectsCommand;
const serializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTransitGatewayMulticastDomainsRequest(input, context),
        Action: "DescribeTransitGatewayMulticastDomains",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = serializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand;
const serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsRequest(input, context),
        Action: "DescribeTransitGatewayPeeringAttachments",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand;
const serializeAws_ec2DescribeTransitGatewayRouteTablesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTransitGatewayRouteTablesRequest(input, context),
        Action: "DescribeTransitGatewayRouteTables",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTransitGatewayRouteTablesCommand = serializeAws_ec2DescribeTransitGatewayRouteTablesCommand;
const serializeAws_ec2DescribeTransitGatewaysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTransitGatewaysRequest(input, context),
        Action: "DescribeTransitGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTransitGatewaysCommand = serializeAws_ec2DescribeTransitGatewaysCommand;
const serializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTransitGatewayVpcAttachmentsRequest(input, context),
        Action: "DescribeTransitGatewayVpcAttachments",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = serializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand;
const serializeAws_ec2DescribeTrunkInterfaceAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeTrunkInterfaceAssociationsRequest(input, context),
        Action: "DescribeTrunkInterfaceAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeTrunkInterfaceAssociationsCommand = serializeAws_ec2DescribeTrunkInterfaceAssociationsCommand;
const serializeAws_ec2DescribeVolumeAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVolumeAttributeRequest(input, context),
        Action: "DescribeVolumeAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVolumeAttributeCommand = serializeAws_ec2DescribeVolumeAttributeCommand;
const serializeAws_ec2DescribeVolumesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVolumesRequest(input, context),
        Action: "DescribeVolumes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVolumesCommand = serializeAws_ec2DescribeVolumesCommand;
const serializeAws_ec2DescribeVolumesModificationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVolumesModificationsRequest(input, context),
        Action: "DescribeVolumesModifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVolumesModificationsCommand = serializeAws_ec2DescribeVolumesModificationsCommand;
const serializeAws_ec2DescribeVolumeStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVolumeStatusRequest(input, context),
        Action: "DescribeVolumeStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVolumeStatusCommand = serializeAws_ec2DescribeVolumeStatusCommand;
const serializeAws_ec2DescribeVpcAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcAttributeRequest(input, context),
        Action: "DescribeVpcAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcAttributeCommand = serializeAws_ec2DescribeVpcAttributeCommand;
const serializeAws_ec2DescribeVpcClassicLinkCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcClassicLinkRequest(input, context),
        Action: "DescribeVpcClassicLink",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcClassicLinkCommand = serializeAws_ec2DescribeVpcClassicLinkCommand;
const serializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcClassicLinkDnsSupportRequest(input, context),
        Action: "DescribeVpcClassicLinkDnsSupport",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = serializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand;
const serializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcEndpointConnectionNotificationsRequest(input, context),
        Action: "DescribeVpcEndpointConnectionNotifications",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = serializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand;
const serializeAws_ec2DescribeVpcEndpointConnectionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcEndpointConnectionsRequest(input, context),
        Action: "DescribeVpcEndpointConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcEndpointConnectionsCommand = serializeAws_ec2DescribeVpcEndpointConnectionsCommand;
const serializeAws_ec2DescribeVpcEndpointsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcEndpointsRequest(input, context),
        Action: "DescribeVpcEndpoints",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcEndpointsCommand = serializeAws_ec2DescribeVpcEndpointsCommand;
const serializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcEndpointServiceConfigurationsRequest(input, context),
        Action: "DescribeVpcEndpointServiceConfigurations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = serializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand;
const serializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcEndpointServicePermissionsRequest(input, context),
        Action: "DescribeVpcEndpointServicePermissions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = serializeAws_ec2DescribeVpcEndpointServicePermissionsCommand;
const serializeAws_ec2DescribeVpcEndpointServicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcEndpointServicesRequest(input, context),
        Action: "DescribeVpcEndpointServices",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcEndpointServicesCommand = serializeAws_ec2DescribeVpcEndpointServicesCommand;
const serializeAws_ec2DescribeVpcPeeringConnectionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcPeeringConnectionsRequest(input, context),
        Action: "DescribeVpcPeeringConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcPeeringConnectionsCommand = serializeAws_ec2DescribeVpcPeeringConnectionsCommand;
const serializeAws_ec2DescribeVpcsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpcsRequest(input, context),
        Action: "DescribeVpcs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpcsCommand = serializeAws_ec2DescribeVpcsCommand;
const serializeAws_ec2DescribeVpnConnectionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpnConnectionsRequest(input, context),
        Action: "DescribeVpnConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpnConnectionsCommand = serializeAws_ec2DescribeVpnConnectionsCommand;
const serializeAws_ec2DescribeVpnGatewaysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DescribeVpnGatewaysRequest(input, context),
        Action: "DescribeVpnGateways",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DescribeVpnGatewaysCommand = serializeAws_ec2DescribeVpnGatewaysCommand;
const serializeAws_ec2DetachClassicLinkVpcCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DetachClassicLinkVpcRequest(input, context),
        Action: "DetachClassicLinkVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DetachClassicLinkVpcCommand = serializeAws_ec2DetachClassicLinkVpcCommand;
const serializeAws_ec2DetachInternetGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DetachInternetGatewayRequest(input, context),
        Action: "DetachInternetGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DetachInternetGatewayCommand = serializeAws_ec2DetachInternetGatewayCommand;
const serializeAws_ec2DetachNetworkInterfaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DetachNetworkInterfaceRequest(input, context),
        Action: "DetachNetworkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DetachNetworkInterfaceCommand = serializeAws_ec2DetachNetworkInterfaceCommand;
const serializeAws_ec2DetachVolumeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DetachVolumeRequest(input, context),
        Action: "DetachVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DetachVolumeCommand = serializeAws_ec2DetachVolumeCommand;
const serializeAws_ec2DetachVpnGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DetachVpnGatewayRequest(input, context),
        Action: "DetachVpnGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DetachVpnGatewayCommand = serializeAws_ec2DetachVpnGatewayCommand;
const serializeAws_ec2DisableEbsEncryptionByDefaultCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableEbsEncryptionByDefaultRequest(input, context),
        Action: "DisableEbsEncryptionByDefault",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableEbsEncryptionByDefaultCommand = serializeAws_ec2DisableEbsEncryptionByDefaultCommand;
const serializeAws_ec2DisableFastLaunchCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableFastLaunchRequest(input, context),
        Action: "DisableFastLaunch",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableFastLaunchCommand = serializeAws_ec2DisableFastLaunchCommand;
const serializeAws_ec2DisableFastSnapshotRestoresCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableFastSnapshotRestoresRequest(input, context),
        Action: "DisableFastSnapshotRestores",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableFastSnapshotRestoresCommand = serializeAws_ec2DisableFastSnapshotRestoresCommand;
const serializeAws_ec2DisableImageDeprecationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableImageDeprecationRequest(input, context),
        Action: "DisableImageDeprecation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableImageDeprecationCommand = serializeAws_ec2DisableImageDeprecationCommand;
const serializeAws_ec2DisableIpamOrganizationAdminAccountCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableIpamOrganizationAdminAccountRequest(input, context),
        Action: "DisableIpamOrganizationAdminAccount",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableIpamOrganizationAdminAccountCommand = serializeAws_ec2DisableIpamOrganizationAdminAccountCommand;
const serializeAws_ec2DisableSerialConsoleAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableSerialConsoleAccessRequest(input, context),
        Action: "DisableSerialConsoleAccess",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableSerialConsoleAccessCommand = serializeAws_ec2DisableSerialConsoleAccessCommand;
const serializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableTransitGatewayRouteTablePropagationRequest(input, context),
        Action: "DisableTransitGatewayRouteTablePropagation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = serializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand;
const serializeAws_ec2DisableVgwRoutePropagationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableVgwRoutePropagationRequest(input, context),
        Action: "DisableVgwRoutePropagation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableVgwRoutePropagationCommand = serializeAws_ec2DisableVgwRoutePropagationCommand;
const serializeAws_ec2DisableVpcClassicLinkCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableVpcClassicLinkRequest(input, context),
        Action: "DisableVpcClassicLink",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableVpcClassicLinkCommand = serializeAws_ec2DisableVpcClassicLinkCommand;
const serializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisableVpcClassicLinkDnsSupportRequest(input, context),
        Action: "DisableVpcClassicLinkDnsSupport",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = serializeAws_ec2DisableVpcClassicLinkDnsSupportCommand;
const serializeAws_ec2DisassociateAddressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateAddressRequest(input, context),
        Action: "DisassociateAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateAddressCommand = serializeAws_ec2DisassociateAddressCommand;
const serializeAws_ec2DisassociateClientVpnTargetNetworkCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateClientVpnTargetNetworkRequest(input, context),
        Action: "DisassociateClientVpnTargetNetwork",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateClientVpnTargetNetworkCommand = serializeAws_ec2DisassociateClientVpnTargetNetworkCommand;
const serializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateEnclaveCertificateIamRoleRequest(input, context),
        Action: "DisassociateEnclaveCertificateIamRole",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = serializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand;
const serializeAws_ec2DisassociateIamInstanceProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateIamInstanceProfileRequest(input, context),
        Action: "DisassociateIamInstanceProfile",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateIamInstanceProfileCommand = serializeAws_ec2DisassociateIamInstanceProfileCommand;
const serializeAws_ec2DisassociateInstanceEventWindowCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateInstanceEventWindowRequest(input, context),
        Action: "DisassociateInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateInstanceEventWindowCommand = serializeAws_ec2DisassociateInstanceEventWindowCommand;
const serializeAws_ec2DisassociateRouteTableCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateRouteTableRequest(input, context),
        Action: "DisassociateRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateRouteTableCommand = serializeAws_ec2DisassociateRouteTableCommand;
const serializeAws_ec2DisassociateSubnetCidrBlockCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateSubnetCidrBlockRequest(input, context),
        Action: "DisassociateSubnetCidrBlock",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateSubnetCidrBlockCommand = serializeAws_ec2DisassociateSubnetCidrBlockCommand;
const serializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateTransitGatewayMulticastDomainRequest(input, context),
        Action: "DisassociateTransitGatewayMulticastDomain",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = serializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand;
const serializeAws_ec2DisassociateTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateTransitGatewayRouteTableRequest(input, context),
        Action: "DisassociateTransitGatewayRouteTable",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateTransitGatewayRouteTableCommand = serializeAws_ec2DisassociateTransitGatewayRouteTableCommand;
const serializeAws_ec2DisassociateTrunkInterfaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateTrunkInterfaceRequest(input, context),
        Action: "DisassociateTrunkInterface",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateTrunkInterfaceCommand = serializeAws_ec2DisassociateTrunkInterfaceCommand;
const serializeAws_ec2DisassociateVpcCidrBlockCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2DisassociateVpcCidrBlockRequest(input, context),
        Action: "DisassociateVpcCidrBlock",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2DisassociateVpcCidrBlockCommand = serializeAws_ec2DisassociateVpcCidrBlockCommand;
const serializeAws_ec2EnableEbsEncryptionByDefaultCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableEbsEncryptionByDefaultRequest(input, context),
        Action: "EnableEbsEncryptionByDefault",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableEbsEncryptionByDefaultCommand = serializeAws_ec2EnableEbsEncryptionByDefaultCommand;
const serializeAws_ec2EnableFastLaunchCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableFastLaunchRequest(input, context),
        Action: "EnableFastLaunch",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableFastLaunchCommand = serializeAws_ec2EnableFastLaunchCommand;
const serializeAws_ec2EnableFastSnapshotRestoresCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableFastSnapshotRestoresRequest(input, context),
        Action: "EnableFastSnapshotRestores",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableFastSnapshotRestoresCommand = serializeAws_ec2EnableFastSnapshotRestoresCommand;
const serializeAws_ec2EnableImageDeprecationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableImageDeprecationRequest(input, context),
        Action: "EnableImageDeprecation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableImageDeprecationCommand = serializeAws_ec2EnableImageDeprecationCommand;
const serializeAws_ec2EnableIpamOrganizationAdminAccountCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableIpamOrganizationAdminAccountRequest(input, context),
        Action: "EnableIpamOrganizationAdminAccount",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableIpamOrganizationAdminAccountCommand = serializeAws_ec2EnableIpamOrganizationAdminAccountCommand;
const serializeAws_ec2EnableSerialConsoleAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableSerialConsoleAccessRequest(input, context),
        Action: "EnableSerialConsoleAccess",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableSerialConsoleAccessCommand = serializeAws_ec2EnableSerialConsoleAccessCommand;
const serializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableTransitGatewayRouteTablePropagationRequest(input, context),
        Action: "EnableTransitGatewayRouteTablePropagation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = serializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand;
const serializeAws_ec2EnableVgwRoutePropagationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableVgwRoutePropagationRequest(input, context),
        Action: "EnableVgwRoutePropagation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableVgwRoutePropagationCommand = serializeAws_ec2EnableVgwRoutePropagationCommand;
const serializeAws_ec2EnableVolumeIOCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableVolumeIORequest(input, context),
        Action: "EnableVolumeIO",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableVolumeIOCommand = serializeAws_ec2EnableVolumeIOCommand;
const serializeAws_ec2EnableVpcClassicLinkCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableVpcClassicLinkRequest(input, context),
        Action: "EnableVpcClassicLink",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableVpcClassicLinkCommand = serializeAws_ec2EnableVpcClassicLinkCommand;
const serializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2EnableVpcClassicLinkDnsSupportRequest(input, context),
        Action: "EnableVpcClassicLinkDnsSupport",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = serializeAws_ec2EnableVpcClassicLinkDnsSupportCommand;
const serializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ExportClientVpnClientCertificateRevocationListRequest(input, context),
        Action: "ExportClientVpnClientCertificateRevocationList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = serializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand;
const serializeAws_ec2ExportClientVpnClientConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ExportClientVpnClientConfigurationRequest(input, context),
        Action: "ExportClientVpnClientConfiguration",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ExportClientVpnClientConfigurationCommand = serializeAws_ec2ExportClientVpnClientConfigurationCommand;
const serializeAws_ec2ExportImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ExportImageRequest(input, context),
        Action: "ExportImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ExportImageCommand = serializeAws_ec2ExportImageCommand;
const serializeAws_ec2ExportTransitGatewayRoutesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ExportTransitGatewayRoutesRequest(input, context),
        Action: "ExportTransitGatewayRoutes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ExportTransitGatewayRoutesCommand = serializeAws_ec2ExportTransitGatewayRoutesCommand;
const serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesRequest(input, context),
        Action: "GetAssociatedEnclaveCertificateIamRoles",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand;
const serializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetAssociatedIpv6PoolCidrsRequest(input, context),
        Action: "GetAssociatedIpv6PoolCidrs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = serializeAws_ec2GetAssociatedIpv6PoolCidrsCommand;
const serializeAws_ec2GetCapacityReservationUsageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetCapacityReservationUsageRequest(input, context),
        Action: "GetCapacityReservationUsage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetCapacityReservationUsageCommand = serializeAws_ec2GetCapacityReservationUsageCommand;
const serializeAws_ec2GetCoipPoolUsageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetCoipPoolUsageRequest(input, context),
        Action: "GetCoipPoolUsage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetCoipPoolUsageCommand = serializeAws_ec2GetCoipPoolUsageCommand;
const serializeAws_ec2GetConsoleOutputCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetConsoleOutputRequest(input, context),
        Action: "GetConsoleOutput",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetConsoleOutputCommand = serializeAws_ec2GetConsoleOutputCommand;
const serializeAws_ec2GetConsoleScreenshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetConsoleScreenshotRequest(input, context),
        Action: "GetConsoleScreenshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetConsoleScreenshotCommand = serializeAws_ec2GetConsoleScreenshotCommand;
const serializeAws_ec2GetDefaultCreditSpecificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetDefaultCreditSpecificationRequest(input, context),
        Action: "GetDefaultCreditSpecification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetDefaultCreditSpecificationCommand = serializeAws_ec2GetDefaultCreditSpecificationCommand;
const serializeAws_ec2GetEbsDefaultKmsKeyIdCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetEbsDefaultKmsKeyIdRequest(input, context),
        Action: "GetEbsDefaultKmsKeyId",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetEbsDefaultKmsKeyIdCommand = serializeAws_ec2GetEbsDefaultKmsKeyIdCommand;
const serializeAws_ec2GetEbsEncryptionByDefaultCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetEbsEncryptionByDefaultRequest(input, context),
        Action: "GetEbsEncryptionByDefault",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetEbsEncryptionByDefaultCommand = serializeAws_ec2GetEbsEncryptionByDefaultCommand;
const serializeAws_ec2GetFlowLogsIntegrationTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetFlowLogsIntegrationTemplateRequest(input, context),
        Action: "GetFlowLogsIntegrationTemplate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetFlowLogsIntegrationTemplateCommand = serializeAws_ec2GetFlowLogsIntegrationTemplateCommand;
const serializeAws_ec2GetGroupsForCapacityReservationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetGroupsForCapacityReservationRequest(input, context),
        Action: "GetGroupsForCapacityReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetGroupsForCapacityReservationCommand = serializeAws_ec2GetGroupsForCapacityReservationCommand;
const serializeAws_ec2GetHostReservationPurchasePreviewCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetHostReservationPurchasePreviewRequest(input, context),
        Action: "GetHostReservationPurchasePreview",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetHostReservationPurchasePreviewCommand = serializeAws_ec2GetHostReservationPurchasePreviewCommand;
const serializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetInstanceTypesFromInstanceRequirementsRequest(input, context),
        Action: "GetInstanceTypesFromInstanceRequirements",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand = serializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand;
const serializeAws_ec2GetInstanceUefiDataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetInstanceUefiDataRequest(input, context),
        Action: "GetInstanceUefiData",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetInstanceUefiDataCommand = serializeAws_ec2GetInstanceUefiDataCommand;
const serializeAws_ec2GetIpamAddressHistoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetIpamAddressHistoryRequest(input, context),
        Action: "GetIpamAddressHistory",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetIpamAddressHistoryCommand = serializeAws_ec2GetIpamAddressHistoryCommand;
const serializeAws_ec2GetIpamPoolAllocationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetIpamPoolAllocationsRequest(input, context),
        Action: "GetIpamPoolAllocations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetIpamPoolAllocationsCommand = serializeAws_ec2GetIpamPoolAllocationsCommand;
const serializeAws_ec2GetIpamPoolCidrsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetIpamPoolCidrsRequest(input, context),
        Action: "GetIpamPoolCidrs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetIpamPoolCidrsCommand = serializeAws_ec2GetIpamPoolCidrsCommand;
const serializeAws_ec2GetIpamResourceCidrsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetIpamResourceCidrsRequest(input, context),
        Action: "GetIpamResourceCidrs",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetIpamResourceCidrsCommand = serializeAws_ec2GetIpamResourceCidrsCommand;
const serializeAws_ec2GetLaunchTemplateDataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetLaunchTemplateDataRequest(input, context),
        Action: "GetLaunchTemplateData",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetLaunchTemplateDataCommand = serializeAws_ec2GetLaunchTemplateDataCommand;
const serializeAws_ec2GetManagedPrefixListAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetManagedPrefixListAssociationsRequest(input, context),
        Action: "GetManagedPrefixListAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetManagedPrefixListAssociationsCommand = serializeAws_ec2GetManagedPrefixListAssociationsCommand;
const serializeAws_ec2GetManagedPrefixListEntriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetManagedPrefixListEntriesRequest(input, context),
        Action: "GetManagedPrefixListEntries",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetManagedPrefixListEntriesCommand = serializeAws_ec2GetManagedPrefixListEntriesCommand;
const serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsRequest(input, context),
        Action: "GetNetworkInsightsAccessScopeAnalysisFindings",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand = serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand;
const serializeAws_ec2GetNetworkInsightsAccessScopeContentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetNetworkInsightsAccessScopeContentRequest(input, context),
        Action: "GetNetworkInsightsAccessScopeContent",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetNetworkInsightsAccessScopeContentCommand = serializeAws_ec2GetNetworkInsightsAccessScopeContentCommand;
const serializeAws_ec2GetPasswordDataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetPasswordDataRequest(input, context),
        Action: "GetPasswordData",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetPasswordDataCommand = serializeAws_ec2GetPasswordDataCommand;
const serializeAws_ec2GetReservedInstancesExchangeQuoteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetReservedInstancesExchangeQuoteRequest(input, context),
        Action: "GetReservedInstancesExchangeQuote",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetReservedInstancesExchangeQuoteCommand = serializeAws_ec2GetReservedInstancesExchangeQuoteCommand;
const serializeAws_ec2GetSerialConsoleAccessStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetSerialConsoleAccessStatusRequest(input, context),
        Action: "GetSerialConsoleAccessStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetSerialConsoleAccessStatusCommand = serializeAws_ec2GetSerialConsoleAccessStatusCommand;
const serializeAws_ec2GetSpotPlacementScoresCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetSpotPlacementScoresRequest(input, context),
        Action: "GetSpotPlacementScores",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetSpotPlacementScoresCommand = serializeAws_ec2GetSpotPlacementScoresCommand;
const serializeAws_ec2GetSubnetCidrReservationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetSubnetCidrReservationsRequest(input, context),
        Action: "GetSubnetCidrReservations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetSubnetCidrReservationsCommand = serializeAws_ec2GetSubnetCidrReservationsCommand;
const serializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetTransitGatewayAttachmentPropagationsRequest(input, context),
        Action: "GetTransitGatewayAttachmentPropagations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = serializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand;
const serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsRequest(input, context),
        Action: "GetTransitGatewayMulticastDomainAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand;
const serializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetTransitGatewayPrefixListReferencesRequest(input, context),
        Action: "GetTransitGatewayPrefixListReferences",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = serializeAws_ec2GetTransitGatewayPrefixListReferencesCommand;
const serializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetTransitGatewayRouteTableAssociationsRequest(input, context),
        Action: "GetTransitGatewayRouteTableAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = serializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand;
const serializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetTransitGatewayRouteTablePropagationsRequest(input, context),
        Action: "GetTransitGatewayRouteTablePropagations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = serializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand;
const serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationRequest(input, context),
        Action: "GetVpnConnectionDeviceSampleConfiguration",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand = serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand;
const serializeAws_ec2GetVpnConnectionDeviceTypesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2GetVpnConnectionDeviceTypesRequest(input, context),
        Action: "GetVpnConnectionDeviceTypes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2GetVpnConnectionDeviceTypesCommand = serializeAws_ec2GetVpnConnectionDeviceTypesCommand;
const serializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ImportClientVpnClientCertificateRevocationListRequest(input, context),
        Action: "ImportClientVpnClientCertificateRevocationList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = serializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand;
const serializeAws_ec2ImportImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ImportImageRequest(input, context),
        Action: "ImportImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ImportImageCommand = serializeAws_ec2ImportImageCommand;
const serializeAws_ec2ImportInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ImportInstanceRequest(input, context),
        Action: "ImportInstance",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ImportInstanceCommand = serializeAws_ec2ImportInstanceCommand;
const serializeAws_ec2ImportKeyPairCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ImportKeyPairRequest(input, context),
        Action: "ImportKeyPair",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ImportKeyPairCommand = serializeAws_ec2ImportKeyPairCommand;
const serializeAws_ec2ImportSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ImportSnapshotRequest(input, context),
        Action: "ImportSnapshot",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ImportSnapshotCommand = serializeAws_ec2ImportSnapshotCommand;
const serializeAws_ec2ImportVolumeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ImportVolumeRequest(input, context),
        Action: "ImportVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ImportVolumeCommand = serializeAws_ec2ImportVolumeCommand;
const serializeAws_ec2ListImagesInRecycleBinCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ListImagesInRecycleBinRequest(input, context),
        Action: "ListImagesInRecycleBin",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ListImagesInRecycleBinCommand = serializeAws_ec2ListImagesInRecycleBinCommand;
const serializeAws_ec2ListSnapshotsInRecycleBinCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ListSnapshotsInRecycleBinRequest(input, context),
        Action: "ListSnapshotsInRecycleBin",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ListSnapshotsInRecycleBinCommand = serializeAws_ec2ListSnapshotsInRecycleBinCommand;
const serializeAws_ec2ModifyAddressAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyAddressAttributeRequest(input, context),
        Action: "ModifyAddressAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyAddressAttributeCommand = serializeAws_ec2ModifyAddressAttributeCommand;
const serializeAws_ec2ModifyAvailabilityZoneGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyAvailabilityZoneGroupRequest(input, context),
        Action: "ModifyAvailabilityZoneGroup",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyAvailabilityZoneGroupCommand = serializeAws_ec2ModifyAvailabilityZoneGroupCommand;
const serializeAws_ec2ModifyCapacityReservationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyCapacityReservationRequest(input, context),
        Action: "ModifyCapacityReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyCapacityReservationCommand = serializeAws_ec2ModifyCapacityReservationCommand;
const serializeAws_ec2ModifyCapacityReservationFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyCapacityReservationFleetRequest(input, context),
        Action: "ModifyCapacityReservationFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyCapacityReservationFleetCommand = serializeAws_ec2ModifyCapacityReservationFleetCommand;
const serializeAws_ec2ModifyClientVpnEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyClientVpnEndpointRequest(input, context),
        Action: "ModifyClientVpnEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyClientVpnEndpointCommand = serializeAws_ec2ModifyClientVpnEndpointCommand;
const serializeAws_ec2ModifyDefaultCreditSpecificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyDefaultCreditSpecificationRequest(input, context),
        Action: "ModifyDefaultCreditSpecification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyDefaultCreditSpecificationCommand = serializeAws_ec2ModifyDefaultCreditSpecificationCommand;
const serializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyEbsDefaultKmsKeyIdRequest(input, context),
        Action: "ModifyEbsDefaultKmsKeyId",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = serializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand;
const serializeAws_ec2ModifyFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyFleetRequest(input, context),
        Action: "ModifyFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyFleetCommand = serializeAws_ec2ModifyFleetCommand;
const serializeAws_ec2ModifyFpgaImageAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyFpgaImageAttributeRequest(input, context),
        Action: "ModifyFpgaImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyFpgaImageAttributeCommand = serializeAws_ec2ModifyFpgaImageAttributeCommand;
const serializeAws_ec2ModifyHostsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyHostsRequest(input, context),
        Action: "ModifyHosts",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyHostsCommand = serializeAws_ec2ModifyHostsCommand;
const serializeAws_ec2ModifyIdentityIdFormatCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyIdentityIdFormatRequest(input, context),
        Action: "ModifyIdentityIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyIdentityIdFormatCommand = serializeAws_ec2ModifyIdentityIdFormatCommand;
const serializeAws_ec2ModifyIdFormatCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyIdFormatRequest(input, context),
        Action: "ModifyIdFormat",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyIdFormatCommand = serializeAws_ec2ModifyIdFormatCommand;
const serializeAws_ec2ModifyImageAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyImageAttributeRequest(input, context),
        Action: "ModifyImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyImageAttributeCommand = serializeAws_ec2ModifyImageAttributeCommand;
const serializeAws_ec2ModifyInstanceAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyInstanceAttributeRequest(input, context),
        Action: "ModifyInstanceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyInstanceAttributeCommand = serializeAws_ec2ModifyInstanceAttributeCommand;
const serializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyInstanceCapacityReservationAttributesRequest(input, context),
        Action: "ModifyInstanceCapacityReservationAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = serializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand;
const serializeAws_ec2ModifyInstanceCreditSpecificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyInstanceCreditSpecificationRequest(input, context),
        Action: "ModifyInstanceCreditSpecification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyInstanceCreditSpecificationCommand = serializeAws_ec2ModifyInstanceCreditSpecificationCommand;
const serializeAws_ec2ModifyInstanceEventStartTimeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyInstanceEventStartTimeRequest(input, context),
        Action: "ModifyInstanceEventStartTime",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyInstanceEventStartTimeCommand = serializeAws_ec2ModifyInstanceEventStartTimeCommand;
const serializeAws_ec2ModifyInstanceEventWindowCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyInstanceEventWindowRequest(input, context),
        Action: "ModifyInstanceEventWindow",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyInstanceEventWindowCommand = serializeAws_ec2ModifyInstanceEventWindowCommand;
const serializeAws_ec2ModifyInstanceMaintenanceOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyInstanceMaintenanceOptionsRequest(input, context),
        Action: "ModifyInstanceMaintenanceOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyInstanceMaintenanceOptionsCommand = serializeAws_ec2ModifyInstanceMaintenanceOptionsCommand;
const serializeAws_ec2ModifyInstanceMetadataOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyInstanceMetadataOptionsRequest(input, context),
        Action: "ModifyInstanceMetadataOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyInstanceMetadataOptionsCommand = serializeAws_ec2ModifyInstanceMetadataOptionsCommand;
const serializeAws_ec2ModifyInstancePlacementCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyInstancePlacementRequest(input, context),
        Action: "ModifyInstancePlacement",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyInstancePlacementCommand = serializeAws_ec2ModifyInstancePlacementCommand;
const serializeAws_ec2ModifyIpamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyIpamRequest(input, context),
        Action: "ModifyIpam",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyIpamCommand = serializeAws_ec2ModifyIpamCommand;
const serializeAws_ec2ModifyIpamPoolCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyIpamPoolRequest(input, context),
        Action: "ModifyIpamPool",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyIpamPoolCommand = serializeAws_ec2ModifyIpamPoolCommand;
const serializeAws_ec2ModifyIpamResourceCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyIpamResourceCidrRequest(input, context),
        Action: "ModifyIpamResourceCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyIpamResourceCidrCommand = serializeAws_ec2ModifyIpamResourceCidrCommand;
const serializeAws_ec2ModifyIpamScopeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyIpamScopeRequest(input, context),
        Action: "ModifyIpamScope",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyIpamScopeCommand = serializeAws_ec2ModifyIpamScopeCommand;
const serializeAws_ec2ModifyLaunchTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyLaunchTemplateRequest(input, context),
        Action: "ModifyLaunchTemplate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyLaunchTemplateCommand = serializeAws_ec2ModifyLaunchTemplateCommand;
const serializeAws_ec2ModifyManagedPrefixListCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyManagedPrefixListRequest(input, context),
        Action: "ModifyManagedPrefixList",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyManagedPrefixListCommand = serializeAws_ec2ModifyManagedPrefixListCommand;
const serializeAws_ec2ModifyNetworkInterfaceAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyNetworkInterfaceAttributeRequest(input, context),
        Action: "ModifyNetworkInterfaceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyNetworkInterfaceAttributeCommand = serializeAws_ec2ModifyNetworkInterfaceAttributeCommand;
const serializeAws_ec2ModifyPrivateDnsNameOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyPrivateDnsNameOptionsRequest(input, context),
        Action: "ModifyPrivateDnsNameOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyPrivateDnsNameOptionsCommand = serializeAws_ec2ModifyPrivateDnsNameOptionsCommand;
const serializeAws_ec2ModifyReservedInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyReservedInstancesRequest(input, context),
        Action: "ModifyReservedInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyReservedInstancesCommand = serializeAws_ec2ModifyReservedInstancesCommand;
const serializeAws_ec2ModifySecurityGroupRulesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifySecurityGroupRulesRequest(input, context),
        Action: "ModifySecurityGroupRules",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifySecurityGroupRulesCommand = serializeAws_ec2ModifySecurityGroupRulesCommand;
const serializeAws_ec2ModifySnapshotAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifySnapshotAttributeRequest(input, context),
        Action: "ModifySnapshotAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifySnapshotAttributeCommand = serializeAws_ec2ModifySnapshotAttributeCommand;
const serializeAws_ec2ModifySnapshotTierCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifySnapshotTierRequest(input, context),
        Action: "ModifySnapshotTier",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifySnapshotTierCommand = serializeAws_ec2ModifySnapshotTierCommand;
const serializeAws_ec2ModifySpotFleetRequestCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifySpotFleetRequestRequest(input, context),
        Action: "ModifySpotFleetRequest",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifySpotFleetRequestCommand = serializeAws_ec2ModifySpotFleetRequestCommand;
const serializeAws_ec2ModifySubnetAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifySubnetAttributeRequest(input, context),
        Action: "ModifySubnetAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifySubnetAttributeCommand = serializeAws_ec2ModifySubnetAttributeCommand;
const serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesRequest(input, context),
        Action: "ModifyTrafficMirrorFilterNetworkServices",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand;
const serializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyTrafficMirrorFilterRuleRequest(input, context),
        Action: "ModifyTrafficMirrorFilterRule",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = serializeAws_ec2ModifyTrafficMirrorFilterRuleCommand;
const serializeAws_ec2ModifyTrafficMirrorSessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyTrafficMirrorSessionRequest(input, context),
        Action: "ModifyTrafficMirrorSession",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyTrafficMirrorSessionCommand = serializeAws_ec2ModifyTrafficMirrorSessionCommand;
const serializeAws_ec2ModifyTransitGatewayCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyTransitGatewayRequest(input, context),
        Action: "ModifyTransitGateway",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyTransitGatewayCommand = serializeAws_ec2ModifyTransitGatewayCommand;
const serializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyTransitGatewayPrefixListReferenceRequest(input, context),
        Action: "ModifyTransitGatewayPrefixListReference",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = serializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand;
const serializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequest(input, context),
        Action: "ModifyTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = serializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand;
const serializeAws_ec2ModifyVolumeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVolumeRequest(input, context),
        Action: "ModifyVolume",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVolumeCommand = serializeAws_ec2ModifyVolumeCommand;
const serializeAws_ec2ModifyVolumeAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVolumeAttributeRequest(input, context),
        Action: "ModifyVolumeAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVolumeAttributeCommand = serializeAws_ec2ModifyVolumeAttributeCommand;
const serializeAws_ec2ModifyVpcAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpcAttributeRequest(input, context),
        Action: "ModifyVpcAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpcAttributeCommand = serializeAws_ec2ModifyVpcAttributeCommand;
const serializeAws_ec2ModifyVpcEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpcEndpointRequest(input, context),
        Action: "ModifyVpcEndpoint",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpcEndpointCommand = serializeAws_ec2ModifyVpcEndpointCommand;
const serializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpcEndpointConnectionNotificationRequest(input, context),
        Action: "ModifyVpcEndpointConnectionNotification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = serializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand;
const serializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpcEndpointServiceConfigurationRequest(input, context),
        Action: "ModifyVpcEndpointServiceConfiguration",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = serializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand;
const serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityRequest(input, context),
        Action: "ModifyVpcEndpointServicePayerResponsibility",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand = serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand;
const serializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpcEndpointServicePermissionsRequest(input, context),
        Action: "ModifyVpcEndpointServicePermissions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = serializeAws_ec2ModifyVpcEndpointServicePermissionsCommand;
const serializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpcPeeringConnectionOptionsRequest(input, context),
        Action: "ModifyVpcPeeringConnectionOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = serializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand;
const serializeAws_ec2ModifyVpcTenancyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpcTenancyRequest(input, context),
        Action: "ModifyVpcTenancy",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpcTenancyCommand = serializeAws_ec2ModifyVpcTenancyCommand;
const serializeAws_ec2ModifyVpnConnectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpnConnectionRequest(input, context),
        Action: "ModifyVpnConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpnConnectionCommand = serializeAws_ec2ModifyVpnConnectionCommand;
const serializeAws_ec2ModifyVpnConnectionOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpnConnectionOptionsRequest(input, context),
        Action: "ModifyVpnConnectionOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpnConnectionOptionsCommand = serializeAws_ec2ModifyVpnConnectionOptionsCommand;
const serializeAws_ec2ModifyVpnTunnelCertificateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpnTunnelCertificateRequest(input, context),
        Action: "ModifyVpnTunnelCertificate",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpnTunnelCertificateCommand = serializeAws_ec2ModifyVpnTunnelCertificateCommand;
const serializeAws_ec2ModifyVpnTunnelOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ModifyVpnTunnelOptionsRequest(input, context),
        Action: "ModifyVpnTunnelOptions",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ModifyVpnTunnelOptionsCommand = serializeAws_ec2ModifyVpnTunnelOptionsCommand;
const serializeAws_ec2MonitorInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2MonitorInstancesRequest(input, context),
        Action: "MonitorInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2MonitorInstancesCommand = serializeAws_ec2MonitorInstancesCommand;
const serializeAws_ec2MoveAddressToVpcCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2MoveAddressToVpcRequest(input, context),
        Action: "MoveAddressToVpc",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2MoveAddressToVpcCommand = serializeAws_ec2MoveAddressToVpcCommand;
const serializeAws_ec2MoveByoipCidrToIpamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2MoveByoipCidrToIpamRequest(input, context),
        Action: "MoveByoipCidrToIpam",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2MoveByoipCidrToIpamCommand = serializeAws_ec2MoveByoipCidrToIpamCommand;
const serializeAws_ec2ProvisionByoipCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ProvisionByoipCidrRequest(input, context),
        Action: "ProvisionByoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ProvisionByoipCidrCommand = serializeAws_ec2ProvisionByoipCidrCommand;
const serializeAws_ec2ProvisionIpamPoolCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ProvisionIpamPoolCidrRequest(input, context),
        Action: "ProvisionIpamPoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ProvisionIpamPoolCidrCommand = serializeAws_ec2ProvisionIpamPoolCidrCommand;
const serializeAws_ec2ProvisionPublicIpv4PoolCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ProvisionPublicIpv4PoolCidrRequest(input, context),
        Action: "ProvisionPublicIpv4PoolCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ProvisionPublicIpv4PoolCidrCommand = serializeAws_ec2ProvisionPublicIpv4PoolCidrCommand;
const serializeAws_ec2PurchaseHostReservationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2PurchaseHostReservationRequest(input, context),
        Action: "PurchaseHostReservation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2PurchaseHostReservationCommand = serializeAws_ec2PurchaseHostReservationCommand;
const serializeAws_ec2PurchaseReservedInstancesOfferingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2PurchaseReservedInstancesOfferingRequest(input, context),
        Action: "PurchaseReservedInstancesOffering",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2PurchaseReservedInstancesOfferingCommand = serializeAws_ec2PurchaseReservedInstancesOfferingCommand;
const serializeAws_ec2PurchaseScheduledInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2PurchaseScheduledInstancesRequest(input, context),
        Action: "PurchaseScheduledInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2PurchaseScheduledInstancesCommand = serializeAws_ec2PurchaseScheduledInstancesCommand;
const serializeAws_ec2RebootInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RebootInstancesRequest(input, context),
        Action: "RebootInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RebootInstancesCommand = serializeAws_ec2RebootInstancesCommand;
const serializeAws_ec2RegisterImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RegisterImageRequest(input, context),
        Action: "RegisterImage",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RegisterImageCommand = serializeAws_ec2RegisterImageCommand;
const serializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RegisterInstanceEventNotificationAttributesRequest(input, context),
        Action: "RegisterInstanceEventNotificationAttributes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = serializeAws_ec2RegisterInstanceEventNotificationAttributesCommand;
const serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersRequest(input, context),
        Action: "RegisterTransitGatewayMulticastGroupMembers",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand;
const serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesRequest(input, context),
        Action: "RegisterTransitGatewayMulticastGroupSources",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand;
const serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsRequest(input, context),
        Action: "RejectTransitGatewayMulticastDomainAssociations",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand;
const serializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RejectTransitGatewayPeeringAttachmentRequest(input, context),
        Action: "RejectTransitGatewayPeeringAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = serializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand;
const serializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RejectTransitGatewayVpcAttachmentRequest(input, context),
        Action: "RejectTransitGatewayVpcAttachment",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = serializeAws_ec2RejectTransitGatewayVpcAttachmentCommand;
const serializeAws_ec2RejectVpcEndpointConnectionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RejectVpcEndpointConnectionsRequest(input, context),
        Action: "RejectVpcEndpointConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RejectVpcEndpointConnectionsCommand = serializeAws_ec2RejectVpcEndpointConnectionsCommand;
const serializeAws_ec2RejectVpcPeeringConnectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RejectVpcPeeringConnectionRequest(input, context),
        Action: "RejectVpcPeeringConnection",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RejectVpcPeeringConnectionCommand = serializeAws_ec2RejectVpcPeeringConnectionCommand;
const serializeAws_ec2ReleaseAddressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReleaseAddressRequest(input, context),
        Action: "ReleaseAddress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReleaseAddressCommand = serializeAws_ec2ReleaseAddressCommand;
const serializeAws_ec2ReleaseHostsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReleaseHostsRequest(input, context),
        Action: "ReleaseHosts",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReleaseHostsCommand = serializeAws_ec2ReleaseHostsCommand;
const serializeAws_ec2ReleaseIpamPoolAllocationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReleaseIpamPoolAllocationRequest(input, context),
        Action: "ReleaseIpamPoolAllocation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReleaseIpamPoolAllocationCommand = serializeAws_ec2ReleaseIpamPoolAllocationCommand;
const serializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReplaceIamInstanceProfileAssociationRequest(input, context),
        Action: "ReplaceIamInstanceProfileAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = serializeAws_ec2ReplaceIamInstanceProfileAssociationCommand;
const serializeAws_ec2ReplaceNetworkAclAssociationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReplaceNetworkAclAssociationRequest(input, context),
        Action: "ReplaceNetworkAclAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReplaceNetworkAclAssociationCommand = serializeAws_ec2ReplaceNetworkAclAssociationCommand;
const serializeAws_ec2ReplaceNetworkAclEntryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReplaceNetworkAclEntryRequest(input, context),
        Action: "ReplaceNetworkAclEntry",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReplaceNetworkAclEntryCommand = serializeAws_ec2ReplaceNetworkAclEntryCommand;
const serializeAws_ec2ReplaceRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReplaceRouteRequest(input, context),
        Action: "ReplaceRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReplaceRouteCommand = serializeAws_ec2ReplaceRouteCommand;
const serializeAws_ec2ReplaceRouteTableAssociationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReplaceRouteTableAssociationRequest(input, context),
        Action: "ReplaceRouteTableAssociation",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReplaceRouteTableAssociationCommand = serializeAws_ec2ReplaceRouteTableAssociationCommand;
const serializeAws_ec2ReplaceTransitGatewayRouteCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReplaceTransitGatewayRouteRequest(input, context),
        Action: "ReplaceTransitGatewayRoute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReplaceTransitGatewayRouteCommand = serializeAws_ec2ReplaceTransitGatewayRouteCommand;
const serializeAws_ec2ReportInstanceStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ReportInstanceStatusRequest(input, context),
        Action: "ReportInstanceStatus",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ReportInstanceStatusCommand = serializeAws_ec2ReportInstanceStatusCommand;
const serializeAws_ec2RequestSpotFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RequestSpotFleetRequest(input, context),
        Action: "RequestSpotFleet",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RequestSpotFleetCommand = serializeAws_ec2RequestSpotFleetCommand;
const serializeAws_ec2RequestSpotInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RequestSpotInstancesRequest(input, context),
        Action: "RequestSpotInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RequestSpotInstancesCommand = serializeAws_ec2RequestSpotInstancesCommand;
const serializeAws_ec2ResetAddressAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ResetAddressAttributeRequest(input, context),
        Action: "ResetAddressAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ResetAddressAttributeCommand = serializeAws_ec2ResetAddressAttributeCommand;
const serializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ResetEbsDefaultKmsKeyIdRequest(input, context),
        Action: "ResetEbsDefaultKmsKeyId",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = serializeAws_ec2ResetEbsDefaultKmsKeyIdCommand;
const serializeAws_ec2ResetFpgaImageAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ResetFpgaImageAttributeRequest(input, context),
        Action: "ResetFpgaImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ResetFpgaImageAttributeCommand = serializeAws_ec2ResetFpgaImageAttributeCommand;
const serializeAws_ec2ResetImageAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ResetImageAttributeRequest(input, context),
        Action: "ResetImageAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ResetImageAttributeCommand = serializeAws_ec2ResetImageAttributeCommand;
const serializeAws_ec2ResetInstanceAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ResetInstanceAttributeRequest(input, context),
        Action: "ResetInstanceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ResetInstanceAttributeCommand = serializeAws_ec2ResetInstanceAttributeCommand;
const serializeAws_ec2ResetNetworkInterfaceAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ResetNetworkInterfaceAttributeRequest(input, context),
        Action: "ResetNetworkInterfaceAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ResetNetworkInterfaceAttributeCommand = serializeAws_ec2ResetNetworkInterfaceAttributeCommand;
const serializeAws_ec2ResetSnapshotAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2ResetSnapshotAttributeRequest(input, context),
        Action: "ResetSnapshotAttribute",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2ResetSnapshotAttributeCommand = serializeAws_ec2ResetSnapshotAttributeCommand;
const serializeAws_ec2RestoreAddressToClassicCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RestoreAddressToClassicRequest(input, context),
        Action: "RestoreAddressToClassic",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RestoreAddressToClassicCommand = serializeAws_ec2RestoreAddressToClassicCommand;
const serializeAws_ec2RestoreImageFromRecycleBinCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RestoreImageFromRecycleBinRequest(input, context),
        Action: "RestoreImageFromRecycleBin",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RestoreImageFromRecycleBinCommand = serializeAws_ec2RestoreImageFromRecycleBinCommand;
const serializeAws_ec2RestoreManagedPrefixListVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RestoreManagedPrefixListVersionRequest(input, context),
        Action: "RestoreManagedPrefixListVersion",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RestoreManagedPrefixListVersionCommand = serializeAws_ec2RestoreManagedPrefixListVersionCommand;
const serializeAws_ec2RestoreSnapshotFromRecycleBinCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RestoreSnapshotFromRecycleBinRequest(input, context),
        Action: "RestoreSnapshotFromRecycleBin",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RestoreSnapshotFromRecycleBinCommand = serializeAws_ec2RestoreSnapshotFromRecycleBinCommand;
const serializeAws_ec2RestoreSnapshotTierCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RestoreSnapshotTierRequest(input, context),
        Action: "RestoreSnapshotTier",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RestoreSnapshotTierCommand = serializeAws_ec2RestoreSnapshotTierCommand;
const serializeAws_ec2RevokeClientVpnIngressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RevokeClientVpnIngressRequest(input, context),
        Action: "RevokeClientVpnIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RevokeClientVpnIngressCommand = serializeAws_ec2RevokeClientVpnIngressCommand;
const serializeAws_ec2RevokeSecurityGroupEgressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RevokeSecurityGroupEgressRequest(input, context),
        Action: "RevokeSecurityGroupEgress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RevokeSecurityGroupEgressCommand = serializeAws_ec2RevokeSecurityGroupEgressCommand;
const serializeAws_ec2RevokeSecurityGroupIngressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RevokeSecurityGroupIngressRequest(input, context),
        Action: "RevokeSecurityGroupIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RevokeSecurityGroupIngressCommand = serializeAws_ec2RevokeSecurityGroupIngressCommand;
const serializeAws_ec2RunInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RunInstancesRequest(input, context),
        Action: "RunInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RunInstancesCommand = serializeAws_ec2RunInstancesCommand;
const serializeAws_ec2RunScheduledInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2RunScheduledInstancesRequest(input, context),
        Action: "RunScheduledInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2RunScheduledInstancesCommand = serializeAws_ec2RunScheduledInstancesCommand;
const serializeAws_ec2SearchLocalGatewayRoutesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2SearchLocalGatewayRoutesRequest(input, context),
        Action: "SearchLocalGatewayRoutes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2SearchLocalGatewayRoutesCommand = serializeAws_ec2SearchLocalGatewayRoutesCommand;
const serializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2SearchTransitGatewayMulticastGroupsRequest(input, context),
        Action: "SearchTransitGatewayMulticastGroups",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = serializeAws_ec2SearchTransitGatewayMulticastGroupsCommand;
const serializeAws_ec2SearchTransitGatewayRoutesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2SearchTransitGatewayRoutesRequest(input, context),
        Action: "SearchTransitGatewayRoutes",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2SearchTransitGatewayRoutesCommand = serializeAws_ec2SearchTransitGatewayRoutesCommand;
const serializeAws_ec2SendDiagnosticInterruptCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2SendDiagnosticInterruptRequest(input, context),
        Action: "SendDiagnosticInterrupt",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2SendDiagnosticInterruptCommand = serializeAws_ec2SendDiagnosticInterruptCommand;
const serializeAws_ec2StartInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2StartInstancesRequest(input, context),
        Action: "StartInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2StartInstancesCommand = serializeAws_ec2StartInstancesCommand;
const serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisRequest(input, context),
        Action: "StartNetworkInsightsAccessScopeAnalysis",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand = serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand;
const serializeAws_ec2StartNetworkInsightsAnalysisCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2StartNetworkInsightsAnalysisRequest(input, context),
        Action: "StartNetworkInsightsAnalysis",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2StartNetworkInsightsAnalysisCommand = serializeAws_ec2StartNetworkInsightsAnalysisCommand;
const serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationRequest(input, context),
        Action: "StartVpcEndpointServicePrivateDnsVerification",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand;
const serializeAws_ec2StopInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2StopInstancesRequest(input, context),
        Action: "StopInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2StopInstancesCommand = serializeAws_ec2StopInstancesCommand;
const serializeAws_ec2TerminateClientVpnConnectionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2TerminateClientVpnConnectionsRequest(input, context),
        Action: "TerminateClientVpnConnections",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2TerminateClientVpnConnectionsCommand = serializeAws_ec2TerminateClientVpnConnectionsCommand;
const serializeAws_ec2TerminateInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2TerminateInstancesRequest(input, context),
        Action: "TerminateInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2TerminateInstancesCommand = serializeAws_ec2TerminateInstancesCommand;
const serializeAws_ec2UnassignIpv6AddressesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2UnassignIpv6AddressesRequest(input, context),
        Action: "UnassignIpv6Addresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2UnassignIpv6AddressesCommand = serializeAws_ec2UnassignIpv6AddressesCommand;
const serializeAws_ec2UnassignPrivateIpAddressesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2UnassignPrivateIpAddressesRequest(input, context),
        Action: "UnassignPrivateIpAddresses",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2UnassignPrivateIpAddressesCommand = serializeAws_ec2UnassignPrivateIpAddressesCommand;
const serializeAws_ec2UnmonitorInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2UnmonitorInstancesRequest(input, context),
        Action: "UnmonitorInstances",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2UnmonitorInstancesCommand = serializeAws_ec2UnmonitorInstancesCommand;
const serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressRequest(input, context),
        Action: "UpdateSecurityGroupRuleDescriptionsEgress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand;
const serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressRequest(input, context),
        Action: "UpdateSecurityGroupRuleDescriptionsIngress",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand;
const serializeAws_ec2WithdrawByoipCidrCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_ec2WithdrawByoipCidrRequest(input, context),
        Action: "WithdrawByoipCidr",
        Version: "2016-11-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_ec2WithdrawByoipCidrCommand = serializeAws_ec2WithdrawByoipCidrCommand;
const deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AcceptReservedInstancesExchangeQuoteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand;
const deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand;
const deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand;
const deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AcceptTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand;
const deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AcceptVpcEndpointConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AcceptVpcEndpointConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AcceptVpcEndpointConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AcceptVpcEndpointConnectionsCommand = deserializeAws_ec2AcceptVpcEndpointConnectionsCommand;
const deserializeAws_ec2AcceptVpcEndpointConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AcceptVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AcceptVpcPeeringConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AcceptVpcPeeringConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AcceptVpcPeeringConnectionCommand = deserializeAws_ec2AcceptVpcPeeringConnectionCommand;
const deserializeAws_ec2AcceptVpcPeeringConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AdvertiseByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AdvertiseByoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AdvertiseByoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AdvertiseByoipCidrCommand = deserializeAws_ec2AdvertiseByoipCidrCommand;
const deserializeAws_ec2AdvertiseByoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AllocateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AllocateAddressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AllocateAddressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AllocateAddressCommand = deserializeAws_ec2AllocateAddressCommand;
const deserializeAws_ec2AllocateAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AllocateHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AllocateHostsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AllocateHostsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AllocateHostsCommand = deserializeAws_ec2AllocateHostsCommand;
const deserializeAws_ec2AllocateHostsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AllocateIpamPoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AllocateIpamPoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AllocateIpamPoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AllocateIpamPoolCidrCommand = deserializeAws_ec2AllocateIpamPoolCidrCommand;
const deserializeAws_ec2AllocateIpamPoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand;
const deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssignIpv6AddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssignIpv6AddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssignIpv6AddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssignIpv6AddressesCommand = deserializeAws_ec2AssignIpv6AddressesCommand;
const deserializeAws_ec2AssignIpv6AddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssignPrivateIpAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssignPrivateIpAddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssignPrivateIpAddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssignPrivateIpAddressesCommand = deserializeAws_ec2AssignPrivateIpAddressesCommand;
const deserializeAws_ec2AssignPrivateIpAddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateAddressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateAddressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateAddressCommand = deserializeAws_ec2AssociateAddressCommand;
const deserializeAws_ec2AssociateAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateClientVpnTargetNetworkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateClientVpnTargetNetworkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateClientVpnTargetNetworkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateClientVpnTargetNetworkCommand = deserializeAws_ec2AssociateClientVpnTargetNetworkCommand;
const deserializeAws_ec2AssociateClientVpnTargetNetworkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateDhcpOptionsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateDhcpOptionsCommand = deserializeAws_ec2AssociateDhcpOptionsCommand;
const deserializeAws_ec2AssociateDhcpOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateEnclaveCertificateIamRoleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommand;
const deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateIamInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateIamInstanceProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateIamInstanceProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateIamInstanceProfileCommand = deserializeAws_ec2AssociateIamInstanceProfileCommand;
const deserializeAws_ec2AssociateIamInstanceProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateInstanceEventWindowCommand = deserializeAws_ec2AssociateInstanceEventWindowCommand;
const deserializeAws_ec2AssociateInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateRouteTableCommand = deserializeAws_ec2AssociateRouteTableCommand;
const deserializeAws_ec2AssociateRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateSubnetCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateSubnetCidrBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateSubnetCidrBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateSubnetCidrBlockCommand = deserializeAws_ec2AssociateSubnetCidrBlockCommand;
const deserializeAws_ec2AssociateSubnetCidrBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateTransitGatewayMulticastDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommand;
const deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateTransitGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateTransitGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateTransitGatewayRouteTableCommand = deserializeAws_ec2AssociateTransitGatewayRouteTableCommand;
const deserializeAws_ec2AssociateTransitGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateTrunkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateTrunkInterfaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateTrunkInterfaceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateTrunkInterfaceCommand = deserializeAws_ec2AssociateTrunkInterfaceCommand;
const deserializeAws_ec2AssociateTrunkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AssociateVpcCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AssociateVpcCidrBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AssociateVpcCidrBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AssociateVpcCidrBlockCommand = deserializeAws_ec2AssociateVpcCidrBlockCommand;
const deserializeAws_ec2AssociateVpcCidrBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AttachClassicLinkVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AttachClassicLinkVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AttachClassicLinkVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AttachClassicLinkVpcCommand = deserializeAws_ec2AttachClassicLinkVpcCommand;
const deserializeAws_ec2AttachClassicLinkVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AttachInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AttachInternetGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AttachInternetGatewayCommand = deserializeAws_ec2AttachInternetGatewayCommand;
const deserializeAws_ec2AttachInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AttachNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AttachNetworkInterfaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AttachNetworkInterfaceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AttachNetworkInterfaceCommand = deserializeAws_ec2AttachNetworkInterfaceCommand;
const deserializeAws_ec2AttachNetworkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AttachVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AttachVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2VolumeAttachment(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AttachVolumeCommand = deserializeAws_ec2AttachVolumeCommand;
const deserializeAws_ec2AttachVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AttachVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AttachVpnGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AttachVpnGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AttachVpnGatewayCommand = deserializeAws_ec2AttachVpnGatewayCommand;
const deserializeAws_ec2AttachVpnGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AuthorizeClientVpnIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AuthorizeClientVpnIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AuthorizeClientVpnIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AuthorizeClientVpnIngressCommand = deserializeAws_ec2AuthorizeClientVpnIngressCommand;
const deserializeAws_ec2AuthorizeClientVpnIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AuthorizeSecurityGroupEgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AuthorizeSecurityGroupEgressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AuthorizeSecurityGroupEgressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AuthorizeSecurityGroupEgressCommand = deserializeAws_ec2AuthorizeSecurityGroupEgressCommand;
const deserializeAws_ec2AuthorizeSecurityGroupEgressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2AuthorizeSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2AuthorizeSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2AuthorizeSecurityGroupIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2AuthorizeSecurityGroupIngressCommand = deserializeAws_ec2AuthorizeSecurityGroupIngressCommand;
const deserializeAws_ec2AuthorizeSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2BundleInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2BundleInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2BundleInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2BundleInstanceCommand = deserializeAws_ec2BundleInstanceCommand;
const deserializeAws_ec2BundleInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CancelBundleTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CancelBundleTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CancelBundleTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CancelBundleTaskCommand = deserializeAws_ec2CancelBundleTaskCommand;
const deserializeAws_ec2CancelBundleTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CancelCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CancelCapacityReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CancelCapacityReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CancelCapacityReservationCommand = deserializeAws_ec2CancelCapacityReservationCommand;
const deserializeAws_ec2CancelCapacityReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CancelCapacityReservationFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CancelCapacityReservationFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CancelCapacityReservationFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CancelCapacityReservationFleetsCommand = deserializeAws_ec2CancelCapacityReservationFleetsCommand;
const deserializeAws_ec2CancelCapacityReservationFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CancelConversionTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CancelConversionTaskCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CancelConversionTaskCommand = deserializeAws_ec2CancelConversionTaskCommand;
const deserializeAws_ec2CancelConversionTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CancelExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CancelExportTaskCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CancelExportTaskCommand = deserializeAws_ec2CancelExportTaskCommand;
const deserializeAws_ec2CancelExportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CancelImportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CancelImportTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CancelImportTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CancelImportTaskCommand = deserializeAws_ec2CancelImportTaskCommand;
const deserializeAws_ec2CancelImportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CancelReservedInstancesListingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CancelReservedInstancesListingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CancelReservedInstancesListingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CancelReservedInstancesListingCommand = deserializeAws_ec2CancelReservedInstancesListingCommand;
const deserializeAws_ec2CancelReservedInstancesListingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CancelSpotFleetRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CancelSpotFleetRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CancelSpotFleetRequestsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CancelSpotFleetRequestsCommand = deserializeAws_ec2CancelSpotFleetRequestsCommand;
const deserializeAws_ec2CancelSpotFleetRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CancelSpotInstanceRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CancelSpotInstanceRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CancelSpotInstanceRequestsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CancelSpotInstanceRequestsCommand = deserializeAws_ec2CancelSpotInstanceRequestsCommand;
const deserializeAws_ec2CancelSpotInstanceRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ConfirmProductInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ConfirmProductInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ConfirmProductInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ConfirmProductInstanceCommand = deserializeAws_ec2ConfirmProductInstanceCommand;
const deserializeAws_ec2ConfirmProductInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CopyFpgaImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CopyFpgaImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CopyFpgaImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CopyFpgaImageCommand = deserializeAws_ec2CopyFpgaImageCommand;
const deserializeAws_ec2CopyFpgaImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CopyImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CopyImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CopyImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CopyImageCommand = deserializeAws_ec2CopyImageCommand;
const deserializeAws_ec2CopyImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CopySnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CopySnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CopySnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CopySnapshotCommand = deserializeAws_ec2CopySnapshotCommand;
const deserializeAws_ec2CopySnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateCapacityReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateCapacityReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateCapacityReservationCommand = deserializeAws_ec2CreateCapacityReservationCommand;
const deserializeAws_ec2CreateCapacityReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateCapacityReservationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateCapacityReservationFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateCapacityReservationFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateCapacityReservationFleetCommand = deserializeAws_ec2CreateCapacityReservationFleetCommand;
const deserializeAws_ec2CreateCapacityReservationFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateCarrierGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateCarrierGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateCarrierGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateCarrierGatewayCommand = deserializeAws_ec2CreateCarrierGatewayCommand;
const deserializeAws_ec2CreateCarrierGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateClientVpnEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateClientVpnEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateClientVpnEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateClientVpnEndpointCommand = deserializeAws_ec2CreateClientVpnEndpointCommand;
const deserializeAws_ec2CreateClientVpnEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateClientVpnRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateClientVpnRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateClientVpnRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateClientVpnRouteCommand = deserializeAws_ec2CreateClientVpnRouteCommand;
const deserializeAws_ec2CreateClientVpnRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateCustomerGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateCustomerGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateCustomerGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateCustomerGatewayCommand = deserializeAws_ec2CreateCustomerGatewayCommand;
const deserializeAws_ec2CreateCustomerGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateDefaultSubnetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateDefaultSubnetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateDefaultSubnetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateDefaultSubnetCommand = deserializeAws_ec2CreateDefaultSubnetCommand;
const deserializeAws_ec2CreateDefaultSubnetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateDefaultVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateDefaultVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateDefaultVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateDefaultVpcCommand = deserializeAws_ec2CreateDefaultVpcCommand;
const deserializeAws_ec2CreateDefaultVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateDhcpOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateDhcpOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateDhcpOptionsCommand = deserializeAws_ec2CreateDhcpOptionsCommand;
const deserializeAws_ec2CreateDhcpOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateEgressOnlyInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateEgressOnlyInternetGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateEgressOnlyInternetGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateEgressOnlyInternetGatewayCommand = deserializeAws_ec2CreateEgressOnlyInternetGatewayCommand;
const deserializeAws_ec2CreateEgressOnlyInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateFleetCommand = deserializeAws_ec2CreateFleetCommand;
const deserializeAws_ec2CreateFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateFlowLogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateFlowLogsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateFlowLogsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateFlowLogsCommand = deserializeAws_ec2CreateFlowLogsCommand;
const deserializeAws_ec2CreateFlowLogsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateFpgaImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateFpgaImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateFpgaImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateFpgaImageCommand = deserializeAws_ec2CreateFpgaImageCommand;
const deserializeAws_ec2CreateFpgaImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateImageCommand = deserializeAws_ec2CreateImageCommand;
const deserializeAws_ec2CreateImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateInstanceEventWindowCommand = deserializeAws_ec2CreateInstanceEventWindowCommand;
const deserializeAws_ec2CreateInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateInstanceExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateInstanceExportTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateInstanceExportTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateInstanceExportTaskCommand = deserializeAws_ec2CreateInstanceExportTaskCommand;
const deserializeAws_ec2CreateInstanceExportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateInternetGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateInternetGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateInternetGatewayCommand = deserializeAws_ec2CreateInternetGatewayCommand;
const deserializeAws_ec2CreateInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateIpamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateIpamResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateIpamCommand = deserializeAws_ec2CreateIpamCommand;
const deserializeAws_ec2CreateIpamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateIpamPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateIpamPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateIpamPoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateIpamPoolCommand = deserializeAws_ec2CreateIpamPoolCommand;
const deserializeAws_ec2CreateIpamPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateIpamScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateIpamScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateIpamScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateIpamScopeCommand = deserializeAws_ec2CreateIpamScopeCommand;
const deserializeAws_ec2CreateIpamScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2KeyPair(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateKeyPairCommand = deserializeAws_ec2CreateKeyPairCommand;
const deserializeAws_ec2CreateKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateLaunchTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateLaunchTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateLaunchTemplateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateLaunchTemplateCommand = deserializeAws_ec2CreateLaunchTemplateCommand;
const deserializeAws_ec2CreateLaunchTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateLaunchTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateLaunchTemplateVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateLaunchTemplateVersionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateLaunchTemplateVersionCommand = deserializeAws_ec2CreateLaunchTemplateVersionCommand;
const deserializeAws_ec2CreateLaunchTemplateVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateLocalGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateLocalGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateLocalGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateLocalGatewayRouteCommand = deserializeAws_ec2CreateLocalGatewayRouteCommand;
const deserializeAws_ec2CreateLocalGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand;
const deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateManagedPrefixListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateManagedPrefixListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateManagedPrefixListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateManagedPrefixListCommand = deserializeAws_ec2CreateManagedPrefixListCommand;
const deserializeAws_ec2CreateManagedPrefixListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateNatGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateNatGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateNatGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateNatGatewayCommand = deserializeAws_ec2CreateNatGatewayCommand;
const deserializeAws_ec2CreateNatGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateNetworkAclCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateNetworkAclCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateNetworkAclResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateNetworkAclCommand = deserializeAws_ec2CreateNetworkAclCommand;
const deserializeAws_ec2CreateNetworkAclCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateNetworkAclEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateNetworkAclEntryCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateNetworkAclEntryCommand = deserializeAws_ec2CreateNetworkAclEntryCommand;
const deserializeAws_ec2CreateNetworkAclEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateNetworkInsightsAccessScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateNetworkInsightsAccessScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateNetworkInsightsAccessScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateNetworkInsightsAccessScopeCommand = deserializeAws_ec2CreateNetworkInsightsAccessScopeCommand;
const deserializeAws_ec2CreateNetworkInsightsAccessScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateNetworkInsightsPathCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateNetworkInsightsPathCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateNetworkInsightsPathResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateNetworkInsightsPathCommand = deserializeAws_ec2CreateNetworkInsightsPathCommand;
const deserializeAws_ec2CreateNetworkInsightsPathCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateNetworkInterfaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateNetworkInterfaceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateNetworkInterfaceCommand = deserializeAws_ec2CreateNetworkInterfaceCommand;
const deserializeAws_ec2CreateNetworkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateNetworkInterfacePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateNetworkInterfacePermissionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateNetworkInterfacePermissionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateNetworkInterfacePermissionCommand = deserializeAws_ec2CreateNetworkInterfacePermissionCommand;
const deserializeAws_ec2CreateNetworkInterfacePermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreatePlacementGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreatePlacementGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreatePlacementGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreatePlacementGroupCommand = deserializeAws_ec2CreatePlacementGroupCommand;
const deserializeAws_ec2CreatePlacementGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreatePublicIpv4PoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreatePublicIpv4PoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreatePublicIpv4PoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreatePublicIpv4PoolCommand = deserializeAws_ec2CreatePublicIpv4PoolCommand;
const deserializeAws_ec2CreatePublicIpv4PoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateReplaceRootVolumeTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateReplaceRootVolumeTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateReplaceRootVolumeTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateReplaceRootVolumeTaskCommand = deserializeAws_ec2CreateReplaceRootVolumeTaskCommand;
const deserializeAws_ec2CreateReplaceRootVolumeTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateReservedInstancesListingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateReservedInstancesListingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateReservedInstancesListingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateReservedInstancesListingCommand = deserializeAws_ec2CreateReservedInstancesListingCommand;
const deserializeAws_ec2CreateReservedInstancesListingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateRestoreImageTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateRestoreImageTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateRestoreImageTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateRestoreImageTaskCommand = deserializeAws_ec2CreateRestoreImageTaskCommand;
const deserializeAws_ec2CreateRestoreImageTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateRouteCommand = deserializeAws_ec2CreateRouteCommand;
const deserializeAws_ec2CreateRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateRouteTableCommand = deserializeAws_ec2CreateRouteTableCommand;
const deserializeAws_ec2CreateRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateSecurityGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateSecurityGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateSecurityGroupCommand = deserializeAws_ec2CreateSecurityGroupCommand;
const deserializeAws_ec2CreateSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2Snapshot(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateSnapshotCommand = deserializeAws_ec2CreateSnapshotCommand;
const deserializeAws_ec2CreateSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateSnapshotsCommand = deserializeAws_ec2CreateSnapshotsCommand;
const deserializeAws_ec2CreateSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateSpotDatafeedSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateSpotDatafeedSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateSpotDatafeedSubscriptionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateSpotDatafeedSubscriptionCommand = deserializeAws_ec2CreateSpotDatafeedSubscriptionCommand;
const deserializeAws_ec2CreateSpotDatafeedSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateStoreImageTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateStoreImageTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateStoreImageTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateStoreImageTaskCommand = deserializeAws_ec2CreateStoreImageTaskCommand;
const deserializeAws_ec2CreateStoreImageTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateSubnetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateSubnetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateSubnetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateSubnetCommand = deserializeAws_ec2CreateSubnetCommand;
const deserializeAws_ec2CreateSubnetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateSubnetCidrReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateSubnetCidrReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateSubnetCidrReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateSubnetCidrReservationCommand = deserializeAws_ec2CreateSubnetCidrReservationCommand;
const deserializeAws_ec2CreateSubnetCidrReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTagsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTagsCommand = deserializeAws_ec2CreateTagsCommand;
const deserializeAws_ec2CreateTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTrafficMirrorFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTrafficMirrorFilterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTrafficMirrorFilterResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTrafficMirrorFilterCommand = deserializeAws_ec2CreateTrafficMirrorFilterCommand;
const deserializeAws_ec2CreateTrafficMirrorFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTrafficMirrorFilterRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTrafficMirrorFilterRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTrafficMirrorFilterRuleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTrafficMirrorFilterRuleCommand = deserializeAws_ec2CreateTrafficMirrorFilterRuleCommand;
const deserializeAws_ec2CreateTrafficMirrorFilterRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTrafficMirrorSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTrafficMirrorSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTrafficMirrorSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTrafficMirrorSessionCommand = deserializeAws_ec2CreateTrafficMirrorSessionCommand;
const deserializeAws_ec2CreateTrafficMirrorSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTrafficMirrorTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTrafficMirrorTargetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTrafficMirrorTargetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTrafficMirrorTargetCommand = deserializeAws_ec2CreateTrafficMirrorTargetCommand;
const deserializeAws_ec2CreateTrafficMirrorTargetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTransitGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTransitGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTransitGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTransitGatewayCommand = deserializeAws_ec2CreateTransitGatewayCommand;
const deserializeAws_ec2CreateTransitGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTransitGatewayConnectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTransitGatewayConnectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTransitGatewayConnectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTransitGatewayConnectCommand = deserializeAws_ec2CreateTransitGatewayConnectCommand;
const deserializeAws_ec2CreateTransitGatewayConnectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTransitGatewayConnectPeerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTransitGatewayConnectPeerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTransitGatewayConnectPeerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTransitGatewayConnectPeerCommand = deserializeAws_ec2CreateTransitGatewayConnectPeerCommand;
const deserializeAws_ec2CreateTransitGatewayConnectPeerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTransitGatewayMulticastDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTransitGatewayMulticastDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTransitGatewayMulticastDomainCommand = deserializeAws_ec2CreateTransitGatewayMulticastDomainCommand;
const deserializeAws_ec2CreateTransitGatewayMulticastDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTransitGatewayPeeringAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand;
const deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTransitGatewayPrefixListReferenceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand;
const deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTransitGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTransitGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTransitGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTransitGatewayRouteCommand = deserializeAws_ec2CreateTransitGatewayRouteCommand;
const deserializeAws_ec2CreateTransitGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTransitGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTransitGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTransitGatewayRouteTableCommand = deserializeAws_ec2CreateTransitGatewayRouteTableCommand;
const deserializeAws_ec2CreateTransitGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommand;
const deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2Volume(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateVolumeCommand = deserializeAws_ec2CreateVolumeCommand;
const deserializeAws_ec2CreateVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateVpcCommand = deserializeAws_ec2CreateVpcCommand;
const deserializeAws_ec2CreateVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateVpcEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateVpcEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateVpcEndpointCommand = deserializeAws_ec2CreateVpcEndpointCommand;
const deserializeAws_ec2CreateVpcEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateVpcEndpointConnectionNotificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommand;
const deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateVpcEndpointServiceConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommand;
const deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateVpcPeeringConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateVpcPeeringConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateVpcPeeringConnectionCommand = deserializeAws_ec2CreateVpcPeeringConnectionCommand;
const deserializeAws_ec2CreateVpcPeeringConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateVpnConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateVpnConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateVpnConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateVpnConnectionCommand = deserializeAws_ec2CreateVpnConnectionCommand;
const deserializeAws_ec2CreateVpnConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateVpnConnectionRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateVpnConnectionRouteCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateVpnConnectionRouteCommand = deserializeAws_ec2CreateVpnConnectionRouteCommand;
const deserializeAws_ec2CreateVpnConnectionRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2CreateVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2CreateVpnGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2CreateVpnGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2CreateVpnGatewayCommand = deserializeAws_ec2CreateVpnGatewayCommand;
const deserializeAws_ec2CreateVpnGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteCarrierGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteCarrierGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteCarrierGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteCarrierGatewayCommand = deserializeAws_ec2DeleteCarrierGatewayCommand;
const deserializeAws_ec2DeleteCarrierGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteClientVpnEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteClientVpnEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteClientVpnEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteClientVpnEndpointCommand = deserializeAws_ec2DeleteClientVpnEndpointCommand;
const deserializeAws_ec2DeleteClientVpnEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteClientVpnRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteClientVpnRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteClientVpnRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteClientVpnRouteCommand = deserializeAws_ec2DeleteClientVpnRouteCommand;
const deserializeAws_ec2DeleteClientVpnRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteCustomerGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteCustomerGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteCustomerGatewayCommand = deserializeAws_ec2DeleteCustomerGatewayCommand;
const deserializeAws_ec2DeleteCustomerGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteDhcpOptionsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteDhcpOptionsCommand = deserializeAws_ec2DeleteDhcpOptionsCommand;
const deserializeAws_ec2DeleteDhcpOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteEgressOnlyInternetGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommand;
const deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteFleetsCommand = deserializeAws_ec2DeleteFleetsCommand;
const deserializeAws_ec2DeleteFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteFlowLogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteFlowLogsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteFlowLogsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteFlowLogsCommand = deserializeAws_ec2DeleteFlowLogsCommand;
const deserializeAws_ec2DeleteFlowLogsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteFpgaImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteFpgaImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteFpgaImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteFpgaImageCommand = deserializeAws_ec2DeleteFpgaImageCommand;
const deserializeAws_ec2DeleteFpgaImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteInstanceEventWindowCommand = deserializeAws_ec2DeleteInstanceEventWindowCommand;
const deserializeAws_ec2DeleteInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteInternetGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteInternetGatewayCommand = deserializeAws_ec2DeleteInternetGatewayCommand;
const deserializeAws_ec2DeleteInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteIpamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteIpamResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteIpamCommand = deserializeAws_ec2DeleteIpamCommand;
const deserializeAws_ec2DeleteIpamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteIpamPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteIpamPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteIpamPoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteIpamPoolCommand = deserializeAws_ec2DeleteIpamPoolCommand;
const deserializeAws_ec2DeleteIpamPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteIpamScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteIpamScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteIpamScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteIpamScopeCommand = deserializeAws_ec2DeleteIpamScopeCommand;
const deserializeAws_ec2DeleteIpamScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteKeyPairCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteKeyPairCommand = deserializeAws_ec2DeleteKeyPairCommand;
const deserializeAws_ec2DeleteKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteLaunchTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteLaunchTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteLaunchTemplateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteLaunchTemplateCommand = deserializeAws_ec2DeleteLaunchTemplateCommand;
const deserializeAws_ec2DeleteLaunchTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteLaunchTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteLaunchTemplateVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteLaunchTemplateVersionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteLaunchTemplateVersionsCommand = deserializeAws_ec2DeleteLaunchTemplateVersionsCommand;
const deserializeAws_ec2DeleteLaunchTemplateVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteLocalGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteLocalGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteLocalGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteLocalGatewayRouteCommand = deserializeAws_ec2DeleteLocalGatewayRouteCommand;
const deserializeAws_ec2DeleteLocalGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand;
const deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteManagedPrefixListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteManagedPrefixListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteManagedPrefixListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteManagedPrefixListCommand = deserializeAws_ec2DeleteManagedPrefixListCommand;
const deserializeAws_ec2DeleteManagedPrefixListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteNatGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteNatGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteNatGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteNatGatewayCommand = deserializeAws_ec2DeleteNatGatewayCommand;
const deserializeAws_ec2DeleteNatGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteNetworkAclCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteNetworkAclCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteNetworkAclCommand = deserializeAws_ec2DeleteNetworkAclCommand;
const deserializeAws_ec2DeleteNetworkAclCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteNetworkAclEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteNetworkAclEntryCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteNetworkAclEntryCommand = deserializeAws_ec2DeleteNetworkAclEntryCommand;
const deserializeAws_ec2DeleteNetworkAclEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteNetworkInsightsAccessScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommand = deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommand;
const deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand = deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand;
const deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteNetworkInsightsAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteNetworkInsightsAnalysisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteNetworkInsightsAnalysisResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteNetworkInsightsAnalysisCommand = deserializeAws_ec2DeleteNetworkInsightsAnalysisCommand;
const deserializeAws_ec2DeleteNetworkInsightsAnalysisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteNetworkInsightsPathCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteNetworkInsightsPathCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteNetworkInsightsPathResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteNetworkInsightsPathCommand = deserializeAws_ec2DeleteNetworkInsightsPathCommand;
const deserializeAws_ec2DeleteNetworkInsightsPathCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteNetworkInterfaceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteNetworkInterfaceCommand = deserializeAws_ec2DeleteNetworkInterfaceCommand;
const deserializeAws_ec2DeleteNetworkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteNetworkInterfacePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteNetworkInterfacePermissionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteNetworkInterfacePermissionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteNetworkInterfacePermissionCommand = deserializeAws_ec2DeleteNetworkInterfacePermissionCommand;
const deserializeAws_ec2DeleteNetworkInterfacePermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeletePlacementGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeletePlacementGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeletePlacementGroupCommand = deserializeAws_ec2DeletePlacementGroupCommand;
const deserializeAws_ec2DeletePlacementGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeletePublicIpv4PoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeletePublicIpv4PoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeletePublicIpv4PoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeletePublicIpv4PoolCommand = deserializeAws_ec2DeletePublicIpv4PoolCommand;
const deserializeAws_ec2DeletePublicIpv4PoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteQueuedReservedInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteQueuedReservedInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteQueuedReservedInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteQueuedReservedInstancesCommand = deserializeAws_ec2DeleteQueuedReservedInstancesCommand;
const deserializeAws_ec2DeleteQueuedReservedInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteRouteCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteRouteCommand = deserializeAws_ec2DeleteRouteCommand;
const deserializeAws_ec2DeleteRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteRouteTableCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteRouteTableCommand = deserializeAws_ec2DeleteRouteTableCommand;
const deserializeAws_ec2DeleteRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteSecurityGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteSecurityGroupCommand = deserializeAws_ec2DeleteSecurityGroupCommand;
const deserializeAws_ec2DeleteSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteSnapshotCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteSnapshotCommand = deserializeAws_ec2DeleteSnapshotCommand;
const deserializeAws_ec2DeleteSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommand;
const deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteSubnetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteSubnetCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteSubnetCommand = deserializeAws_ec2DeleteSubnetCommand;
const deserializeAws_ec2DeleteSubnetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteSubnetCidrReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteSubnetCidrReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteSubnetCidrReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteSubnetCidrReservationCommand = deserializeAws_ec2DeleteSubnetCidrReservationCommand;
const deserializeAws_ec2DeleteSubnetCidrReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTagsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTagsCommand = deserializeAws_ec2DeleteTagsCommand;
const deserializeAws_ec2DeleteTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTrafficMirrorFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTrafficMirrorFilterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTrafficMirrorFilterResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTrafficMirrorFilterCommand = deserializeAws_ec2DeleteTrafficMirrorFilterCommand;
const deserializeAws_ec2DeleteTrafficMirrorFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTrafficMirrorFilterRuleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommand;
const deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTrafficMirrorSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTrafficMirrorSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTrafficMirrorSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTrafficMirrorSessionCommand = deserializeAws_ec2DeleteTrafficMirrorSessionCommand;
const deserializeAws_ec2DeleteTrafficMirrorSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTrafficMirrorTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTrafficMirrorTargetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTrafficMirrorTargetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTrafficMirrorTargetCommand = deserializeAws_ec2DeleteTrafficMirrorTargetCommand;
const deserializeAws_ec2DeleteTrafficMirrorTargetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTransitGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTransitGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTransitGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTransitGatewayCommand = deserializeAws_ec2DeleteTransitGatewayCommand;
const deserializeAws_ec2DeleteTransitGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTransitGatewayConnectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTransitGatewayConnectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTransitGatewayConnectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTransitGatewayConnectCommand = deserializeAws_ec2DeleteTransitGatewayConnectCommand;
const deserializeAws_ec2DeleteTransitGatewayConnectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTransitGatewayConnectPeerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTransitGatewayConnectPeerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTransitGatewayConnectPeerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTransitGatewayConnectPeerCommand = deserializeAws_ec2DeleteTransitGatewayConnectPeerCommand;
const deserializeAws_ec2DeleteTransitGatewayConnectPeerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTransitGatewayMulticastDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommand;
const deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand;
const deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand;
const deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTransitGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTransitGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTransitGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTransitGatewayRouteCommand = deserializeAws_ec2DeleteTransitGatewayRouteCommand;
const deserializeAws_ec2DeleteTransitGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTransitGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTransitGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTransitGatewayRouteTableCommand = deserializeAws_ec2DeleteTransitGatewayRouteTableCommand;
const deserializeAws_ec2DeleteTransitGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand;
const deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteVolumeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteVolumeCommand = deserializeAws_ec2DeleteVolumeCommand;
const deserializeAws_ec2DeleteVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteVpcCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteVpcCommand = deserializeAws_ec2DeleteVpcCommand;
const deserializeAws_ec2DeleteVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand;
const deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteVpcEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteVpcEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteVpcEndpointsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteVpcEndpointsCommand = deserializeAws_ec2DeleteVpcEndpointsCommand;
const deserializeAws_ec2DeleteVpcEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand;
const deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteVpcPeeringConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeleteVpcPeeringConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteVpcPeeringConnectionCommand = deserializeAws_ec2DeleteVpcPeeringConnectionCommand;
const deserializeAws_ec2DeleteVpcPeeringConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteVpnConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteVpnConnectionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteVpnConnectionCommand = deserializeAws_ec2DeleteVpnConnectionCommand;
const deserializeAws_ec2DeleteVpnConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteVpnConnectionRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteVpnConnectionRouteCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteVpnConnectionRouteCommand = deserializeAws_ec2DeleteVpnConnectionRouteCommand;
const deserializeAws_ec2DeleteVpnConnectionRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeleteVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeleteVpnGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeleteVpnGatewayCommand = deserializeAws_ec2DeleteVpnGatewayCommand;
const deserializeAws_ec2DeleteVpnGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeprovisionByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeprovisionByoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeprovisionByoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeprovisionByoipCidrCommand = deserializeAws_ec2DeprovisionByoipCidrCommand;
const deserializeAws_ec2DeprovisionByoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeprovisionIpamPoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeprovisionIpamPoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeprovisionIpamPoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeprovisionIpamPoolCidrCommand = deserializeAws_ec2DeprovisionIpamPoolCidrCommand;
const deserializeAws_ec2DeprovisionIpamPoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeprovisionPublicIpv4PoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand = deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand;
const deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeregisterImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeregisterImageCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeregisterImageCommand = deserializeAws_ec2DeregisterImageCommand;
const deserializeAws_ec2DeregisterImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeregisterInstanceEventNotificationAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand;
const deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand;
const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand;
const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeAccountAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeAccountAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeAccountAttributesCommand = deserializeAws_ec2DescribeAccountAttributesCommand;
const deserializeAws_ec2DescribeAccountAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeAddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeAddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeAddressesCommand = deserializeAws_ec2DescribeAddressesCommand;
const deserializeAws_ec2DescribeAddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeAddressesAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeAddressesAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeAddressesAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeAddressesAttributeCommand = deserializeAws_ec2DescribeAddressesAttributeCommand;
const deserializeAws_ec2DescribeAddressesAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeAggregateIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeAggregateIdFormatCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeAggregateIdFormatResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeAggregateIdFormatCommand = deserializeAws_ec2DescribeAggregateIdFormatCommand;
const deserializeAws_ec2DescribeAggregateIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeAvailabilityZonesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeAvailabilityZonesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeAvailabilityZonesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeAvailabilityZonesCommand = deserializeAws_ec2DescribeAvailabilityZonesCommand;
const deserializeAws_ec2DescribeAvailabilityZonesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeBundleTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeBundleTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeBundleTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeBundleTasksCommand = deserializeAws_ec2DescribeBundleTasksCommand;
const deserializeAws_ec2DescribeBundleTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeByoipCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeByoipCidrsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeByoipCidrsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeByoipCidrsCommand = deserializeAws_ec2DescribeByoipCidrsCommand;
const deserializeAws_ec2DescribeByoipCidrsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeCapacityReservationFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeCapacityReservationFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeCapacityReservationFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeCapacityReservationFleetsCommand = deserializeAws_ec2DescribeCapacityReservationFleetsCommand;
const deserializeAws_ec2DescribeCapacityReservationFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeCapacityReservationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeCapacityReservationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeCapacityReservationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeCapacityReservationsCommand = deserializeAws_ec2DescribeCapacityReservationsCommand;
const deserializeAws_ec2DescribeCapacityReservationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeCarrierGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeCarrierGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeCarrierGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeCarrierGatewaysCommand = deserializeAws_ec2DescribeCarrierGatewaysCommand;
const deserializeAws_ec2DescribeCarrierGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeClassicLinkInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeClassicLinkInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeClassicLinkInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeClassicLinkInstancesCommand = deserializeAws_ec2DescribeClassicLinkInstancesCommand;
const deserializeAws_ec2DescribeClassicLinkInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeClientVpnAuthorizationRulesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommand;
const deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeClientVpnConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeClientVpnConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeClientVpnConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeClientVpnConnectionsCommand = deserializeAws_ec2DescribeClientVpnConnectionsCommand;
const deserializeAws_ec2DescribeClientVpnConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeClientVpnEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeClientVpnEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeClientVpnEndpointsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeClientVpnEndpointsCommand = deserializeAws_ec2DescribeClientVpnEndpointsCommand;
const deserializeAws_ec2DescribeClientVpnEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeClientVpnRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeClientVpnRoutesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeClientVpnRoutesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeClientVpnRoutesCommand = deserializeAws_ec2DescribeClientVpnRoutesCommand;
const deserializeAws_ec2DescribeClientVpnRoutesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeClientVpnTargetNetworksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeClientVpnTargetNetworksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeClientVpnTargetNetworksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeClientVpnTargetNetworksCommand = deserializeAws_ec2DescribeClientVpnTargetNetworksCommand;
const deserializeAws_ec2DescribeClientVpnTargetNetworksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeCoipPoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeCoipPoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeCoipPoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeCoipPoolsCommand = deserializeAws_ec2DescribeCoipPoolsCommand;
const deserializeAws_ec2DescribeCoipPoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeConversionTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeConversionTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeConversionTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeConversionTasksCommand = deserializeAws_ec2DescribeConversionTasksCommand;
const deserializeAws_ec2DescribeConversionTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeCustomerGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeCustomerGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeCustomerGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeCustomerGatewaysCommand = deserializeAws_ec2DescribeCustomerGatewaysCommand;
const deserializeAws_ec2DescribeCustomerGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeDhcpOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeDhcpOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeDhcpOptionsCommand = deserializeAws_ec2DescribeDhcpOptionsCommand;
const deserializeAws_ec2DescribeDhcpOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeEgressOnlyInternetGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand;
const deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeElasticGpusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeElasticGpusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeElasticGpusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeElasticGpusCommand = deserializeAws_ec2DescribeElasticGpusCommand;
const deserializeAws_ec2DescribeElasticGpusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeExportImageTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeExportImageTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeExportImageTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeExportImageTasksCommand = deserializeAws_ec2DescribeExportImageTasksCommand;
const deserializeAws_ec2DescribeExportImageTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeExportTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeExportTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeExportTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeExportTasksCommand = deserializeAws_ec2DescribeExportTasksCommand;
const deserializeAws_ec2DescribeExportTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeFastLaunchImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeFastLaunchImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeFastLaunchImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeFastLaunchImagesCommand = deserializeAws_ec2DescribeFastLaunchImagesCommand;
const deserializeAws_ec2DescribeFastLaunchImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeFastSnapshotRestoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeFastSnapshotRestoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeFastSnapshotRestoresResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeFastSnapshotRestoresCommand = deserializeAws_ec2DescribeFastSnapshotRestoresCommand;
const deserializeAws_ec2DescribeFastSnapshotRestoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeFleetHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeFleetHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeFleetHistoryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeFleetHistoryCommand = deserializeAws_ec2DescribeFleetHistoryCommand;
const deserializeAws_ec2DescribeFleetHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeFleetInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeFleetInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeFleetInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeFleetInstancesCommand = deserializeAws_ec2DescribeFleetInstancesCommand;
const deserializeAws_ec2DescribeFleetInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeFleetsCommand = deserializeAws_ec2DescribeFleetsCommand;
const deserializeAws_ec2DescribeFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeFlowLogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeFlowLogsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeFlowLogsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeFlowLogsCommand = deserializeAws_ec2DescribeFlowLogsCommand;
const deserializeAws_ec2DescribeFlowLogsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeFpgaImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeFpgaImageAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeFpgaImageAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeFpgaImageAttributeCommand = deserializeAws_ec2DescribeFpgaImageAttributeCommand;
const deserializeAws_ec2DescribeFpgaImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeFpgaImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeFpgaImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeFpgaImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeFpgaImagesCommand = deserializeAws_ec2DescribeFpgaImagesCommand;
const deserializeAws_ec2DescribeFpgaImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeHostReservationOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeHostReservationOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeHostReservationOfferingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeHostReservationOfferingsCommand = deserializeAws_ec2DescribeHostReservationOfferingsCommand;
const deserializeAws_ec2DescribeHostReservationOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeHostReservationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeHostReservationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeHostReservationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeHostReservationsCommand = deserializeAws_ec2DescribeHostReservationsCommand;
const deserializeAws_ec2DescribeHostReservationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeHostsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeHostsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeHostsCommand = deserializeAws_ec2DescribeHostsCommand;
const deserializeAws_ec2DescribeHostsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeIamInstanceProfileAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommand;
const deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeIdentityIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeIdentityIdFormatCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeIdentityIdFormatResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeIdentityIdFormatCommand = deserializeAws_ec2DescribeIdentityIdFormatCommand;
const deserializeAws_ec2DescribeIdentityIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeIdFormatCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeIdFormatResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeIdFormatCommand = deserializeAws_ec2DescribeIdFormatCommand;
const deserializeAws_ec2DescribeIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeImageAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ImageAttribute(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeImageAttributeCommand = deserializeAws_ec2DescribeImageAttributeCommand;
const deserializeAws_ec2DescribeImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeImagesCommand = deserializeAws_ec2DescribeImagesCommand;
const deserializeAws_ec2DescribeImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeImportImageTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeImportImageTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeImportImageTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeImportImageTasksCommand = deserializeAws_ec2DescribeImportImageTasksCommand;
const deserializeAws_ec2DescribeImportImageTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeImportSnapshotTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeImportSnapshotTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeImportSnapshotTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeImportSnapshotTasksCommand = deserializeAws_ec2DescribeImportSnapshotTasksCommand;
const deserializeAws_ec2DescribeImportSnapshotTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeInstanceAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2InstanceAttribute(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeInstanceAttributeCommand = deserializeAws_ec2DescribeInstanceAttributeCommand;
const deserializeAws_ec2DescribeInstanceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeInstanceCreditSpecificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeInstanceCreditSpecificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeInstanceCreditSpecificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeInstanceCreditSpecificationsCommand = deserializeAws_ec2DescribeInstanceCreditSpecificationsCommand;
const deserializeAws_ec2DescribeInstanceCreditSpecificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeInstanceEventNotificationAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommand;
const deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeInstanceEventWindowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeInstanceEventWindowsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeInstanceEventWindowsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeInstanceEventWindowsCommand = deserializeAws_ec2DescribeInstanceEventWindowsCommand;
const deserializeAws_ec2DescribeInstanceEventWindowsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeInstancesCommand = deserializeAws_ec2DescribeInstancesCommand;
const deserializeAws_ec2DescribeInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeInstanceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeInstanceStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeInstanceStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeInstanceStatusCommand = deserializeAws_ec2DescribeInstanceStatusCommand;
const deserializeAws_ec2DescribeInstanceStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeInstanceTypeOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeInstanceTypeOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeInstanceTypeOfferingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeInstanceTypeOfferingsCommand = deserializeAws_ec2DescribeInstanceTypeOfferingsCommand;
const deserializeAws_ec2DescribeInstanceTypeOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeInstanceTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeInstanceTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeInstanceTypesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeInstanceTypesCommand = deserializeAws_ec2DescribeInstanceTypesCommand;
const deserializeAws_ec2DescribeInstanceTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeInternetGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeInternetGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeInternetGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeInternetGatewaysCommand = deserializeAws_ec2DescribeInternetGatewaysCommand;
const deserializeAws_ec2DescribeInternetGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeIpamPoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeIpamPoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeIpamPoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeIpamPoolsCommand = deserializeAws_ec2DescribeIpamPoolsCommand;
const deserializeAws_ec2DescribeIpamPoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeIpamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeIpamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeIpamsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeIpamsCommand = deserializeAws_ec2DescribeIpamsCommand;
const deserializeAws_ec2DescribeIpamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeIpamScopesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeIpamScopesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeIpamScopesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeIpamScopesCommand = deserializeAws_ec2DescribeIpamScopesCommand;
const deserializeAws_ec2DescribeIpamScopesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeIpv6PoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeIpv6PoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeIpv6PoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeIpv6PoolsCommand = deserializeAws_ec2DescribeIpv6PoolsCommand;
const deserializeAws_ec2DescribeIpv6PoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeKeyPairsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeKeyPairsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeKeyPairsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeKeyPairsCommand = deserializeAws_ec2DescribeKeyPairsCommand;
const deserializeAws_ec2DescribeKeyPairsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeLaunchTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeLaunchTemplatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeLaunchTemplatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeLaunchTemplatesCommand = deserializeAws_ec2DescribeLaunchTemplatesCommand;
const deserializeAws_ec2DescribeLaunchTemplatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeLaunchTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeLaunchTemplateVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeLaunchTemplateVersionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeLaunchTemplateVersionsCommand = deserializeAws_ec2DescribeLaunchTemplateVersionsCommand;
const deserializeAws_ec2DescribeLaunchTemplateVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeLocalGatewayRouteTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeLocalGatewayRouteTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeLocalGatewayRouteTablesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeLocalGatewayRouteTablesCommand = deserializeAws_ec2DescribeLocalGatewayRouteTablesCommand;
const deserializeAws_ec2DescribeLocalGatewayRouteTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand;
const deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand;
const deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeLocalGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeLocalGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeLocalGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeLocalGatewaysCommand = deserializeAws_ec2DescribeLocalGatewaysCommand;
const deserializeAws_ec2DescribeLocalGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand;
const deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand;
const deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeManagedPrefixListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeManagedPrefixListsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeManagedPrefixListsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeManagedPrefixListsCommand = deserializeAws_ec2DescribeManagedPrefixListsCommand;
const deserializeAws_ec2DescribeManagedPrefixListsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeMovingAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeMovingAddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeMovingAddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeMovingAddressesCommand = deserializeAws_ec2DescribeMovingAddressesCommand;
const deserializeAws_ec2DescribeMovingAddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeNatGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeNatGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeNatGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeNatGatewaysCommand = deserializeAws_ec2DescribeNatGatewaysCommand;
const deserializeAws_ec2DescribeNatGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeNetworkAclsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeNetworkAclsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeNetworkAclsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeNetworkAclsCommand = deserializeAws_ec2DescribeNetworkAclsCommand;
const deserializeAws_ec2DescribeNetworkAclsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand = deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand;
const deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeNetworkInsightsAccessScopesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommand = deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommand;
const deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeNetworkInsightsAnalysesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeNetworkInsightsAnalysesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeNetworkInsightsAnalysesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeNetworkInsightsAnalysesCommand = deserializeAws_ec2DescribeNetworkInsightsAnalysesCommand;
const deserializeAws_ec2DescribeNetworkInsightsAnalysesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeNetworkInsightsPathsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeNetworkInsightsPathsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeNetworkInsightsPathsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeNetworkInsightsPathsCommand = deserializeAws_ec2DescribeNetworkInsightsPathsCommand;
const deserializeAws_ec2DescribeNetworkInsightsPathsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeNetworkInterfaceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeNetworkInterfaceAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeNetworkInterfaceAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeNetworkInterfaceAttributeCommand = deserializeAws_ec2DescribeNetworkInterfaceAttributeCommand;
const deserializeAws_ec2DescribeNetworkInterfaceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeNetworkInterfacePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeNetworkInterfacePermissionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeNetworkInterfacePermissionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeNetworkInterfacePermissionsCommand = deserializeAws_ec2DescribeNetworkInterfacePermissionsCommand;
const deserializeAws_ec2DescribeNetworkInterfacePermissionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeNetworkInterfacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeNetworkInterfacesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeNetworkInterfacesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeNetworkInterfacesCommand = deserializeAws_ec2DescribeNetworkInterfacesCommand;
const deserializeAws_ec2DescribeNetworkInterfacesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribePlacementGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribePlacementGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribePlacementGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribePlacementGroupsCommand = deserializeAws_ec2DescribePlacementGroupsCommand;
const deserializeAws_ec2DescribePlacementGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribePrefixListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribePrefixListsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribePrefixListsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribePrefixListsCommand = deserializeAws_ec2DescribePrefixListsCommand;
const deserializeAws_ec2DescribePrefixListsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribePrincipalIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribePrincipalIdFormatCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribePrincipalIdFormatResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribePrincipalIdFormatCommand = deserializeAws_ec2DescribePrincipalIdFormatCommand;
const deserializeAws_ec2DescribePrincipalIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribePublicIpv4PoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribePublicIpv4PoolsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribePublicIpv4PoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribePublicIpv4PoolsCommand = deserializeAws_ec2DescribePublicIpv4PoolsCommand;
const deserializeAws_ec2DescribePublicIpv4PoolsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeRegionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeRegionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeRegionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeRegionsCommand = deserializeAws_ec2DescribeRegionsCommand;
const deserializeAws_ec2DescribeRegionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeReplaceRootVolumeTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeReplaceRootVolumeTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeReplaceRootVolumeTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeReplaceRootVolumeTasksCommand = deserializeAws_ec2DescribeReplaceRootVolumeTasksCommand;
const deserializeAws_ec2DescribeReplaceRootVolumeTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeReservedInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeReservedInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeReservedInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeReservedInstancesCommand = deserializeAws_ec2DescribeReservedInstancesCommand;
const deserializeAws_ec2DescribeReservedInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeReservedInstancesListingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeReservedInstancesListingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeReservedInstancesListingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeReservedInstancesListingsCommand = deserializeAws_ec2DescribeReservedInstancesListingsCommand;
const deserializeAws_ec2DescribeReservedInstancesListingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeReservedInstancesModificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeReservedInstancesModificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeReservedInstancesModificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeReservedInstancesModificationsCommand = deserializeAws_ec2DescribeReservedInstancesModificationsCommand;
const deserializeAws_ec2DescribeReservedInstancesModificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeReservedInstancesOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeReservedInstancesOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeReservedInstancesOfferingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeReservedInstancesOfferingsCommand = deserializeAws_ec2DescribeReservedInstancesOfferingsCommand;
const deserializeAws_ec2DescribeReservedInstancesOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeRouteTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeRouteTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeRouteTablesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeRouteTablesCommand = deserializeAws_ec2DescribeRouteTablesCommand;
const deserializeAws_ec2DescribeRouteTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeScheduledInstanceAvailabilityResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommand;
const deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeScheduledInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeScheduledInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeScheduledInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeScheduledInstancesCommand = deserializeAws_ec2DescribeScheduledInstancesCommand;
const deserializeAws_ec2DescribeScheduledInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSecurityGroupReferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSecurityGroupReferencesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSecurityGroupReferencesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSecurityGroupReferencesCommand = deserializeAws_ec2DescribeSecurityGroupReferencesCommand;
const deserializeAws_ec2DescribeSecurityGroupReferencesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSecurityGroupRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSecurityGroupRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSecurityGroupRulesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSecurityGroupRulesCommand = deserializeAws_ec2DescribeSecurityGroupRulesCommand;
const deserializeAws_ec2DescribeSecurityGroupRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSecurityGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSecurityGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSecurityGroupsCommand = deserializeAws_ec2DescribeSecurityGroupsCommand;
const deserializeAws_ec2DescribeSecurityGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSnapshotAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSnapshotAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSnapshotAttributeCommand = deserializeAws_ec2DescribeSnapshotAttributeCommand;
const deserializeAws_ec2DescribeSnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSnapshotsCommand = deserializeAws_ec2DescribeSnapshotsCommand;
const deserializeAws_ec2DescribeSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSnapshotTierStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSnapshotTierStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSnapshotTierStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSnapshotTierStatusCommand = deserializeAws_ec2DescribeSnapshotTierStatusCommand;
const deserializeAws_ec2DescribeSnapshotTierStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSpotDatafeedSubscriptionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommand;
const deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSpotFleetInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSpotFleetInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSpotFleetInstancesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSpotFleetInstancesCommand = deserializeAws_ec2DescribeSpotFleetInstancesCommand;
const deserializeAws_ec2DescribeSpotFleetInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSpotFleetRequestHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSpotFleetRequestHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSpotFleetRequestHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSpotFleetRequestHistoryCommand = deserializeAws_ec2DescribeSpotFleetRequestHistoryCommand;
const deserializeAws_ec2DescribeSpotFleetRequestHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSpotFleetRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSpotFleetRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSpotFleetRequestsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSpotFleetRequestsCommand = deserializeAws_ec2DescribeSpotFleetRequestsCommand;
const deserializeAws_ec2DescribeSpotFleetRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSpotInstanceRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSpotInstanceRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSpotInstanceRequestsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSpotInstanceRequestsCommand = deserializeAws_ec2DescribeSpotInstanceRequestsCommand;
const deserializeAws_ec2DescribeSpotInstanceRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSpotPriceHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSpotPriceHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSpotPriceHistoryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSpotPriceHistoryCommand = deserializeAws_ec2DescribeSpotPriceHistoryCommand;
const deserializeAws_ec2DescribeSpotPriceHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeStaleSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeStaleSecurityGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeStaleSecurityGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeStaleSecurityGroupsCommand = deserializeAws_ec2DescribeStaleSecurityGroupsCommand;
const deserializeAws_ec2DescribeStaleSecurityGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeStoreImageTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeStoreImageTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeStoreImageTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeStoreImageTasksCommand = deserializeAws_ec2DescribeStoreImageTasksCommand;
const deserializeAws_ec2DescribeStoreImageTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeSubnetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeSubnetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeSubnetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeSubnetsCommand = deserializeAws_ec2DescribeSubnetsCommand;
const deserializeAws_ec2DescribeSubnetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTagsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTagsCommand = deserializeAws_ec2DescribeTagsCommand;
const deserializeAws_ec2DescribeTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTrafficMirrorFiltersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTrafficMirrorFiltersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTrafficMirrorFiltersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTrafficMirrorFiltersCommand = deserializeAws_ec2DescribeTrafficMirrorFiltersCommand;
const deserializeAws_ec2DescribeTrafficMirrorFiltersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTrafficMirrorSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTrafficMirrorSessionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTrafficMirrorSessionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTrafficMirrorSessionsCommand = deserializeAws_ec2DescribeTrafficMirrorSessionsCommand;
const deserializeAws_ec2DescribeTrafficMirrorSessionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTrafficMirrorTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTrafficMirrorTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTrafficMirrorTargetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTrafficMirrorTargetsCommand = deserializeAws_ec2DescribeTrafficMirrorTargetsCommand;
const deserializeAws_ec2DescribeTrafficMirrorTargetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTransitGatewayAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTransitGatewayAttachmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTransitGatewayAttachmentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTransitGatewayAttachmentsCommand = deserializeAws_ec2DescribeTransitGatewayAttachmentsCommand;
const deserializeAws_ec2DescribeTransitGatewayAttachmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTransitGatewayConnectPeersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTransitGatewayConnectPeersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTransitGatewayConnectPeersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTransitGatewayConnectPeersCommand = deserializeAws_ec2DescribeTransitGatewayConnectPeersCommand;
const deserializeAws_ec2DescribeTransitGatewayConnectPeersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTransitGatewayConnectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTransitGatewayConnectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTransitGatewayConnectsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTransitGatewayConnectsCommand = deserializeAws_ec2DescribeTransitGatewayConnectsCommand;
const deserializeAws_ec2DescribeTransitGatewayConnectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTransitGatewayMulticastDomainsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand;
const deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand;
const deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTransitGatewayRouteTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTransitGatewayRouteTablesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTransitGatewayRouteTablesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTransitGatewayRouteTablesCommand = deserializeAws_ec2DescribeTransitGatewayRouteTablesCommand;
const deserializeAws_ec2DescribeTransitGatewayRouteTablesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTransitGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTransitGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTransitGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTransitGatewaysCommand = deserializeAws_ec2DescribeTransitGatewaysCommand;
const deserializeAws_ec2DescribeTransitGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand;
const deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeTrunkInterfaceAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommand = deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommand;
const deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVolumeAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVolumeAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVolumeAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVolumeAttributeCommand = deserializeAws_ec2DescribeVolumeAttributeCommand;
const deserializeAws_ec2DescribeVolumeAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVolumesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVolumesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVolumesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVolumesCommand = deserializeAws_ec2DescribeVolumesCommand;
const deserializeAws_ec2DescribeVolumesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVolumesModificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVolumesModificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVolumesModificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVolumesModificationsCommand = deserializeAws_ec2DescribeVolumesModificationsCommand;
const deserializeAws_ec2DescribeVolumesModificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVolumeStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVolumeStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVolumeStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVolumeStatusCommand = deserializeAws_ec2DescribeVolumeStatusCommand;
const deserializeAws_ec2DescribeVolumeStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcAttributeCommand = deserializeAws_ec2DescribeVpcAttributeCommand;
const deserializeAws_ec2DescribeVpcAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcClassicLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcClassicLinkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcClassicLinkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcClassicLinkCommand = deserializeAws_ec2DescribeVpcClassicLinkCommand;
const deserializeAws_ec2DescribeVpcClassicLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcClassicLinkDnsSupportResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand;
const deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand;
const deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcEndpointConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcEndpointConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcEndpointConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcEndpointConnectionsCommand = deserializeAws_ec2DescribeVpcEndpointConnectionsCommand;
const deserializeAws_ec2DescribeVpcEndpointConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcEndpointsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcEndpointsCommand = deserializeAws_ec2DescribeVpcEndpointsCommand;
const deserializeAws_ec2DescribeVpcEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand;
const deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcEndpointServicePermissionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommand;
const deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcEndpointServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcEndpointServicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcEndpointServicesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcEndpointServicesCommand = deserializeAws_ec2DescribeVpcEndpointServicesCommand;
const deserializeAws_ec2DescribeVpcEndpointServicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcPeeringConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcPeeringConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcPeeringConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcPeeringConnectionsCommand = deserializeAws_ec2DescribeVpcPeeringConnectionsCommand;
const deserializeAws_ec2DescribeVpcPeeringConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpcsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpcsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpcsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpcsCommand = deserializeAws_ec2DescribeVpcsCommand;
const deserializeAws_ec2DescribeVpcsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpnConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpnConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpnConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpnConnectionsCommand = deserializeAws_ec2DescribeVpnConnectionsCommand;
const deserializeAws_ec2DescribeVpnConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DescribeVpnGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DescribeVpnGatewaysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DescribeVpnGatewaysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DescribeVpnGatewaysCommand = deserializeAws_ec2DescribeVpnGatewaysCommand;
const deserializeAws_ec2DescribeVpnGatewaysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DetachClassicLinkVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DetachClassicLinkVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DetachClassicLinkVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DetachClassicLinkVpcCommand = deserializeAws_ec2DetachClassicLinkVpcCommand;
const deserializeAws_ec2DetachClassicLinkVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DetachInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DetachInternetGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DetachInternetGatewayCommand = deserializeAws_ec2DetachInternetGatewayCommand;
const deserializeAws_ec2DetachInternetGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DetachNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DetachNetworkInterfaceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DetachNetworkInterfaceCommand = deserializeAws_ec2DetachNetworkInterfaceCommand;
const deserializeAws_ec2DetachNetworkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DetachVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DetachVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2VolumeAttachment(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DetachVolumeCommand = deserializeAws_ec2DetachVolumeCommand;
const deserializeAws_ec2DetachVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DetachVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DetachVpnGatewayCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DetachVpnGatewayCommand = deserializeAws_ec2DetachVpnGatewayCommand;
const deserializeAws_ec2DetachVpnGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableEbsEncryptionByDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableEbsEncryptionByDefaultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisableEbsEncryptionByDefaultResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableEbsEncryptionByDefaultCommand = deserializeAws_ec2DisableEbsEncryptionByDefaultCommand;
const deserializeAws_ec2DisableEbsEncryptionByDefaultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableFastLaunchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableFastLaunchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisableFastLaunchResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableFastLaunchCommand = deserializeAws_ec2DisableFastLaunchCommand;
const deserializeAws_ec2DisableFastLaunchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableFastSnapshotRestoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableFastSnapshotRestoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisableFastSnapshotRestoresResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableFastSnapshotRestoresCommand = deserializeAws_ec2DisableFastSnapshotRestoresCommand;
const deserializeAws_ec2DisableFastSnapshotRestoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableImageDeprecationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableImageDeprecationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisableImageDeprecationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableImageDeprecationCommand = deserializeAws_ec2DisableImageDeprecationCommand;
const deserializeAws_ec2DisableImageDeprecationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableIpamOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableIpamOrganizationAdminAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisableIpamOrganizationAdminAccountResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableIpamOrganizationAdminAccountCommand = deserializeAws_ec2DisableIpamOrganizationAdminAccountCommand;
const deserializeAws_ec2DisableIpamOrganizationAdminAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableSerialConsoleAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableSerialConsoleAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisableSerialConsoleAccessResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableSerialConsoleAccessCommand = deserializeAws_ec2DisableSerialConsoleAccessCommand;
const deserializeAws_ec2DisableSerialConsoleAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisableTransitGatewayRouteTablePropagationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand;
const deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableVgwRoutePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableVgwRoutePropagationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableVgwRoutePropagationCommand = deserializeAws_ec2DisableVgwRoutePropagationCommand;
const deserializeAws_ec2DisableVgwRoutePropagationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableVpcClassicLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableVpcClassicLinkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisableVpcClassicLinkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableVpcClassicLinkCommand = deserializeAws_ec2DisableVpcClassicLinkCommand;
const deserializeAws_ec2DisableVpcClassicLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisableVpcClassicLinkDnsSupportResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommand;
const deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateAddressCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateAddressCommand = deserializeAws_ec2DisassociateAddressCommand;
const deserializeAws_ec2DisassociateAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateClientVpnTargetNetworkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateClientVpnTargetNetworkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisassociateClientVpnTargetNetworkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateClientVpnTargetNetworkCommand = deserializeAws_ec2DisassociateClientVpnTargetNetworkCommand;
const deserializeAws_ec2DisassociateClientVpnTargetNetworkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisassociateEnclaveCertificateIamRoleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand;
const deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateIamInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateIamInstanceProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisassociateIamInstanceProfileResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateIamInstanceProfileCommand = deserializeAws_ec2DisassociateIamInstanceProfileCommand;
const deserializeAws_ec2DisassociateIamInstanceProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisassociateInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateInstanceEventWindowCommand = deserializeAws_ec2DisassociateInstanceEventWindowCommand;
const deserializeAws_ec2DisassociateInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateRouteTableCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateRouteTableCommand = deserializeAws_ec2DisassociateRouteTableCommand;
const deserializeAws_ec2DisassociateRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateSubnetCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateSubnetCidrBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisassociateSubnetCidrBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateSubnetCidrBlockCommand = deserializeAws_ec2DisassociateSubnetCidrBlockCommand;
const deserializeAws_ec2DisassociateSubnetCidrBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisassociateTransitGatewayMulticastDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand;
const deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateTransitGatewayRouteTableCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisassociateTransitGatewayRouteTableResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateTransitGatewayRouteTableCommand = deserializeAws_ec2DisassociateTransitGatewayRouteTableCommand;
const deserializeAws_ec2DisassociateTransitGatewayRouteTableCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateTrunkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateTrunkInterfaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisassociateTrunkInterfaceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateTrunkInterfaceCommand = deserializeAws_ec2DisassociateTrunkInterfaceCommand;
const deserializeAws_ec2DisassociateTrunkInterfaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2DisassociateVpcCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2DisassociateVpcCidrBlockCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2DisassociateVpcCidrBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2DisassociateVpcCidrBlockCommand = deserializeAws_ec2DisassociateVpcCidrBlockCommand;
const deserializeAws_ec2DisassociateVpcCidrBlockCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableEbsEncryptionByDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableEbsEncryptionByDefaultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2EnableEbsEncryptionByDefaultResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableEbsEncryptionByDefaultCommand = deserializeAws_ec2EnableEbsEncryptionByDefaultCommand;
const deserializeAws_ec2EnableEbsEncryptionByDefaultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableFastLaunchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableFastLaunchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2EnableFastLaunchResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableFastLaunchCommand = deserializeAws_ec2EnableFastLaunchCommand;
const deserializeAws_ec2EnableFastLaunchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableFastSnapshotRestoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableFastSnapshotRestoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2EnableFastSnapshotRestoresResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableFastSnapshotRestoresCommand = deserializeAws_ec2EnableFastSnapshotRestoresCommand;
const deserializeAws_ec2EnableFastSnapshotRestoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableImageDeprecationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableImageDeprecationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2EnableImageDeprecationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableImageDeprecationCommand = deserializeAws_ec2EnableImageDeprecationCommand;
const deserializeAws_ec2EnableImageDeprecationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableIpamOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableIpamOrganizationAdminAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2EnableIpamOrganizationAdminAccountResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableIpamOrganizationAdminAccountCommand = deserializeAws_ec2EnableIpamOrganizationAdminAccountCommand;
const deserializeAws_ec2EnableIpamOrganizationAdminAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableSerialConsoleAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableSerialConsoleAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2EnableSerialConsoleAccessResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableSerialConsoleAccessCommand = deserializeAws_ec2EnableSerialConsoleAccessCommand;
const deserializeAws_ec2EnableSerialConsoleAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2EnableTransitGatewayRouteTablePropagationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand;
const deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableVgwRoutePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableVgwRoutePropagationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableVgwRoutePropagationCommand = deserializeAws_ec2EnableVgwRoutePropagationCommand;
const deserializeAws_ec2EnableVgwRoutePropagationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableVolumeIOCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableVolumeIOCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableVolumeIOCommand = deserializeAws_ec2EnableVolumeIOCommand;
const deserializeAws_ec2EnableVolumeIOCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableVpcClassicLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableVpcClassicLinkCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2EnableVpcClassicLinkResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableVpcClassicLinkCommand = deserializeAws_ec2EnableVpcClassicLinkCommand;
const deserializeAws_ec2EnableVpcClassicLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2EnableVpcClassicLinkDnsSupportResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommand;
const deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ExportClientVpnClientCertificateRevocationListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand;
const deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ExportClientVpnClientConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ExportClientVpnClientConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ExportClientVpnClientConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ExportClientVpnClientConfigurationCommand = deserializeAws_ec2ExportClientVpnClientConfigurationCommand;
const deserializeAws_ec2ExportClientVpnClientConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ExportImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ExportImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ExportImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ExportImageCommand = deserializeAws_ec2ExportImageCommand;
const deserializeAws_ec2ExportImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ExportTransitGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ExportTransitGatewayRoutesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ExportTransitGatewayRoutesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ExportTransitGatewayRoutesCommand = deserializeAws_ec2ExportTransitGatewayRoutesCommand;
const deserializeAws_ec2ExportTransitGatewayRoutesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand;
const deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetAssociatedIpv6PoolCidrsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommand;
const deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetCapacityReservationUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetCapacityReservationUsageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetCapacityReservationUsageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetCapacityReservationUsageCommand = deserializeAws_ec2GetCapacityReservationUsageCommand;
const deserializeAws_ec2GetCapacityReservationUsageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetCoipPoolUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetCoipPoolUsageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetCoipPoolUsageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetCoipPoolUsageCommand = deserializeAws_ec2GetCoipPoolUsageCommand;
const deserializeAws_ec2GetCoipPoolUsageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetConsoleOutputCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetConsoleOutputCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetConsoleOutputResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetConsoleOutputCommand = deserializeAws_ec2GetConsoleOutputCommand;
const deserializeAws_ec2GetConsoleOutputCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetConsoleScreenshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetConsoleScreenshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetConsoleScreenshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetConsoleScreenshotCommand = deserializeAws_ec2GetConsoleScreenshotCommand;
const deserializeAws_ec2GetConsoleScreenshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetDefaultCreditSpecificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetDefaultCreditSpecificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetDefaultCreditSpecificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetDefaultCreditSpecificationCommand = deserializeAws_ec2GetDefaultCreditSpecificationCommand;
const deserializeAws_ec2GetDefaultCreditSpecificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetEbsDefaultKmsKeyIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetEbsDefaultKmsKeyIdCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetEbsDefaultKmsKeyIdResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetEbsDefaultKmsKeyIdCommand = deserializeAws_ec2GetEbsDefaultKmsKeyIdCommand;
const deserializeAws_ec2GetEbsDefaultKmsKeyIdCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetEbsEncryptionByDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetEbsEncryptionByDefaultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetEbsEncryptionByDefaultResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetEbsEncryptionByDefaultCommand = deserializeAws_ec2GetEbsEncryptionByDefaultCommand;
const deserializeAws_ec2GetEbsEncryptionByDefaultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetFlowLogsIntegrationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetFlowLogsIntegrationTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetFlowLogsIntegrationTemplateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetFlowLogsIntegrationTemplateCommand = deserializeAws_ec2GetFlowLogsIntegrationTemplateCommand;
const deserializeAws_ec2GetFlowLogsIntegrationTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetGroupsForCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetGroupsForCapacityReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetGroupsForCapacityReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetGroupsForCapacityReservationCommand = deserializeAws_ec2GetGroupsForCapacityReservationCommand;
const deserializeAws_ec2GetGroupsForCapacityReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetHostReservationPurchasePreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetHostReservationPurchasePreviewCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetHostReservationPurchasePreviewResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetHostReservationPurchasePreviewCommand = deserializeAws_ec2GetHostReservationPurchasePreviewCommand;
const deserializeAws_ec2GetHostReservationPurchasePreviewCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand = deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand;
const deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetInstanceUefiDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetInstanceUefiDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetInstanceUefiDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetInstanceUefiDataCommand = deserializeAws_ec2GetInstanceUefiDataCommand;
const deserializeAws_ec2GetInstanceUefiDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetIpamAddressHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetIpamAddressHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetIpamAddressHistoryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetIpamAddressHistoryCommand = deserializeAws_ec2GetIpamAddressHistoryCommand;
const deserializeAws_ec2GetIpamAddressHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetIpamPoolAllocationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetIpamPoolAllocationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetIpamPoolAllocationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetIpamPoolAllocationsCommand = deserializeAws_ec2GetIpamPoolAllocationsCommand;
const deserializeAws_ec2GetIpamPoolAllocationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetIpamPoolCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetIpamPoolCidrsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetIpamPoolCidrsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetIpamPoolCidrsCommand = deserializeAws_ec2GetIpamPoolCidrsCommand;
const deserializeAws_ec2GetIpamPoolCidrsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetIpamResourceCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetIpamResourceCidrsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetIpamResourceCidrsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetIpamResourceCidrsCommand = deserializeAws_ec2GetIpamResourceCidrsCommand;
const deserializeAws_ec2GetIpamResourceCidrsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetLaunchTemplateDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetLaunchTemplateDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetLaunchTemplateDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetLaunchTemplateDataCommand = deserializeAws_ec2GetLaunchTemplateDataCommand;
const deserializeAws_ec2GetLaunchTemplateDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetManagedPrefixListAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetManagedPrefixListAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetManagedPrefixListAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetManagedPrefixListAssociationsCommand = deserializeAws_ec2GetManagedPrefixListAssociationsCommand;
const deserializeAws_ec2GetManagedPrefixListAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetManagedPrefixListEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetManagedPrefixListEntriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetManagedPrefixListEntriesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetManagedPrefixListEntriesCommand = deserializeAws_ec2GetManagedPrefixListEntriesCommand;
const deserializeAws_ec2GetManagedPrefixListEntriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand = deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand;
const deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetNetworkInsightsAccessScopeContentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommand = deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommand;
const deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetPasswordDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetPasswordDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetPasswordDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetPasswordDataCommand = deserializeAws_ec2GetPasswordDataCommand;
const deserializeAws_ec2GetPasswordDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetReservedInstancesExchangeQuoteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetReservedInstancesExchangeQuoteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetReservedInstancesExchangeQuoteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetReservedInstancesExchangeQuoteCommand = deserializeAws_ec2GetReservedInstancesExchangeQuoteCommand;
const deserializeAws_ec2GetReservedInstancesExchangeQuoteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetSerialConsoleAccessStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetSerialConsoleAccessStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetSerialConsoleAccessStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetSerialConsoleAccessStatusCommand = deserializeAws_ec2GetSerialConsoleAccessStatusCommand;
const deserializeAws_ec2GetSerialConsoleAccessStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetSpotPlacementScoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetSpotPlacementScoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetSpotPlacementScoresResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetSpotPlacementScoresCommand = deserializeAws_ec2GetSpotPlacementScoresCommand;
const deserializeAws_ec2GetSpotPlacementScoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetSubnetCidrReservationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetSubnetCidrReservationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetSubnetCidrReservationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetSubnetCidrReservationsCommand = deserializeAws_ec2GetSubnetCidrReservationsCommand;
const deserializeAws_ec2GetSubnetCidrReservationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetTransitGatewayAttachmentPropagationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand;
const deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand;
const deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetTransitGatewayPrefixListReferencesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommand;
const deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetTransitGatewayRouteTableAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand;
const deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetTransitGatewayRouteTablePropagationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand;
const deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand = deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand;
const deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2GetVpnConnectionDeviceTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2GetVpnConnectionDeviceTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2GetVpnConnectionDeviceTypesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2GetVpnConnectionDeviceTypesCommand = deserializeAws_ec2GetVpnConnectionDeviceTypesCommand;
const deserializeAws_ec2GetVpnConnectionDeviceTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ImportClientVpnClientCertificateRevocationListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand;
const deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ImportImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ImportImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ImportImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ImportImageCommand = deserializeAws_ec2ImportImageCommand;
const deserializeAws_ec2ImportImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ImportInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ImportInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ImportInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ImportInstanceCommand = deserializeAws_ec2ImportInstanceCommand;
const deserializeAws_ec2ImportInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ImportKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ImportKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ImportKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ImportKeyPairCommand = deserializeAws_ec2ImportKeyPairCommand;
const deserializeAws_ec2ImportKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ImportSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ImportSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ImportSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ImportSnapshotCommand = deserializeAws_ec2ImportSnapshotCommand;
const deserializeAws_ec2ImportSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ImportVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ImportVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ImportVolumeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ImportVolumeCommand = deserializeAws_ec2ImportVolumeCommand;
const deserializeAws_ec2ImportVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ListImagesInRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ListImagesInRecycleBinCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ListImagesInRecycleBinResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ListImagesInRecycleBinCommand = deserializeAws_ec2ListImagesInRecycleBinCommand;
const deserializeAws_ec2ListImagesInRecycleBinCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ListSnapshotsInRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ListSnapshotsInRecycleBinCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ListSnapshotsInRecycleBinResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ListSnapshotsInRecycleBinCommand = deserializeAws_ec2ListSnapshotsInRecycleBinCommand;
const deserializeAws_ec2ListSnapshotsInRecycleBinCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyAddressAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyAddressAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyAddressAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyAddressAttributeCommand = deserializeAws_ec2ModifyAddressAttributeCommand;
const deserializeAws_ec2ModifyAddressAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyAvailabilityZoneGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyAvailabilityZoneGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyAvailabilityZoneGroupResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyAvailabilityZoneGroupCommand = deserializeAws_ec2ModifyAvailabilityZoneGroupCommand;
const deserializeAws_ec2ModifyAvailabilityZoneGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyCapacityReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyCapacityReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyCapacityReservationCommand = deserializeAws_ec2ModifyCapacityReservationCommand;
const deserializeAws_ec2ModifyCapacityReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyCapacityReservationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyCapacityReservationFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyCapacityReservationFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyCapacityReservationFleetCommand = deserializeAws_ec2ModifyCapacityReservationFleetCommand;
const deserializeAws_ec2ModifyCapacityReservationFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyClientVpnEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyClientVpnEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyClientVpnEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyClientVpnEndpointCommand = deserializeAws_ec2ModifyClientVpnEndpointCommand;
const deserializeAws_ec2ModifyClientVpnEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyDefaultCreditSpecificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyDefaultCreditSpecificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyDefaultCreditSpecificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyDefaultCreditSpecificationCommand = deserializeAws_ec2ModifyDefaultCreditSpecificationCommand;
const deserializeAws_ec2ModifyDefaultCreditSpecificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyEbsDefaultKmsKeyIdResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand;
const deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyFleetCommand = deserializeAws_ec2ModifyFleetCommand;
const deserializeAws_ec2ModifyFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyFpgaImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyFpgaImageAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyFpgaImageAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyFpgaImageAttributeCommand = deserializeAws_ec2ModifyFpgaImageAttributeCommand;
const deserializeAws_ec2ModifyFpgaImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyHostsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyHostsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyHostsCommand = deserializeAws_ec2ModifyHostsCommand;
const deserializeAws_ec2ModifyHostsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyIdentityIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyIdentityIdFormatCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyIdentityIdFormatCommand = deserializeAws_ec2ModifyIdentityIdFormatCommand;
const deserializeAws_ec2ModifyIdentityIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyIdFormatCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyIdFormatCommand = deserializeAws_ec2ModifyIdFormatCommand;
const deserializeAws_ec2ModifyIdFormatCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyImageAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyImageAttributeCommand = deserializeAws_ec2ModifyImageAttributeCommand;
const deserializeAws_ec2ModifyImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyInstanceAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyInstanceAttributeCommand = deserializeAws_ec2ModifyInstanceAttributeCommand;
const deserializeAws_ec2ModifyInstanceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyInstanceCapacityReservationAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand;
const deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyInstanceCreditSpecificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyInstanceCreditSpecificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyInstanceCreditSpecificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyInstanceCreditSpecificationCommand = deserializeAws_ec2ModifyInstanceCreditSpecificationCommand;
const deserializeAws_ec2ModifyInstanceCreditSpecificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyInstanceEventStartTimeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyInstanceEventStartTimeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyInstanceEventStartTimeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyInstanceEventStartTimeCommand = deserializeAws_ec2ModifyInstanceEventStartTimeCommand;
const deserializeAws_ec2ModifyInstanceEventStartTimeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyInstanceEventWindowCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyInstanceEventWindowResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyInstanceEventWindowCommand = deserializeAws_ec2ModifyInstanceEventWindowCommand;
const deserializeAws_ec2ModifyInstanceEventWindowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyInstanceMaintenanceOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommand = deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommand;
const deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyInstanceMetadataOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyInstanceMetadataOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyInstanceMetadataOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyInstanceMetadataOptionsCommand = deserializeAws_ec2ModifyInstanceMetadataOptionsCommand;
const deserializeAws_ec2ModifyInstanceMetadataOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyInstancePlacementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyInstancePlacementCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyInstancePlacementResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyInstancePlacementCommand = deserializeAws_ec2ModifyInstancePlacementCommand;
const deserializeAws_ec2ModifyInstancePlacementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyIpamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyIpamResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyIpamCommand = deserializeAws_ec2ModifyIpamCommand;
const deserializeAws_ec2ModifyIpamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyIpamPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyIpamPoolCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyIpamPoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyIpamPoolCommand = deserializeAws_ec2ModifyIpamPoolCommand;
const deserializeAws_ec2ModifyIpamPoolCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyIpamResourceCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyIpamResourceCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyIpamResourceCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyIpamResourceCidrCommand = deserializeAws_ec2ModifyIpamResourceCidrCommand;
const deserializeAws_ec2ModifyIpamResourceCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyIpamScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyIpamScopeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyIpamScopeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyIpamScopeCommand = deserializeAws_ec2ModifyIpamScopeCommand;
const deserializeAws_ec2ModifyIpamScopeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyLaunchTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyLaunchTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyLaunchTemplateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyLaunchTemplateCommand = deserializeAws_ec2ModifyLaunchTemplateCommand;
const deserializeAws_ec2ModifyLaunchTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyManagedPrefixListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyManagedPrefixListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyManagedPrefixListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyManagedPrefixListCommand = deserializeAws_ec2ModifyManagedPrefixListCommand;
const deserializeAws_ec2ModifyManagedPrefixListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyNetworkInterfaceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyNetworkInterfaceAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyNetworkInterfaceAttributeCommand = deserializeAws_ec2ModifyNetworkInterfaceAttributeCommand;
const deserializeAws_ec2ModifyNetworkInterfaceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyPrivateDnsNameOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyPrivateDnsNameOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyPrivateDnsNameOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyPrivateDnsNameOptionsCommand = deserializeAws_ec2ModifyPrivateDnsNameOptionsCommand;
const deserializeAws_ec2ModifyPrivateDnsNameOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyReservedInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyReservedInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyReservedInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyReservedInstancesCommand = deserializeAws_ec2ModifyReservedInstancesCommand;
const deserializeAws_ec2ModifyReservedInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifySecurityGroupRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifySecurityGroupRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifySecurityGroupRulesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifySecurityGroupRulesCommand = deserializeAws_ec2ModifySecurityGroupRulesCommand;
const deserializeAws_ec2ModifySecurityGroupRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifySnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifySnapshotAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifySnapshotAttributeCommand = deserializeAws_ec2ModifySnapshotAttributeCommand;
const deserializeAws_ec2ModifySnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifySnapshotTierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifySnapshotTierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifySnapshotTierResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifySnapshotTierCommand = deserializeAws_ec2ModifySnapshotTierCommand;
const deserializeAws_ec2ModifySnapshotTierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifySpotFleetRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifySpotFleetRequestCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifySpotFleetRequestResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifySpotFleetRequestCommand = deserializeAws_ec2ModifySpotFleetRequestCommand;
const deserializeAws_ec2ModifySpotFleetRequestCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifySubnetAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifySubnetAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifySubnetAttributeCommand = deserializeAws_ec2ModifySubnetAttributeCommand;
const deserializeAws_ec2ModifySubnetAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand;
const deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyTrafficMirrorFilterRuleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommand;
const deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyTrafficMirrorSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyTrafficMirrorSessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyTrafficMirrorSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyTrafficMirrorSessionCommand = deserializeAws_ec2ModifyTrafficMirrorSessionCommand;
const deserializeAws_ec2ModifyTrafficMirrorSessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyTransitGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyTransitGatewayCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyTransitGatewayResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyTransitGatewayCommand = deserializeAws_ec2ModifyTransitGatewayCommand;
const deserializeAws_ec2ModifyTransitGatewayCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand;
const deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand;
const deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVolumeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVolumeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVolumeCommand = deserializeAws_ec2ModifyVolumeCommand;
const deserializeAws_ec2ModifyVolumeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVolumeAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVolumeAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVolumeAttributeCommand = deserializeAws_ec2ModifyVolumeAttributeCommand;
const deserializeAws_ec2ModifyVolumeAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpcAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpcAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpcAttributeCommand = deserializeAws_ec2ModifyVpcAttributeCommand;
const deserializeAws_ec2ModifyVpcAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpcEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpcEndpointResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpcEndpointCommand = deserializeAws_ec2ModifyVpcEndpointCommand;
const deserializeAws_ec2ModifyVpcEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpcEndpointConnectionNotificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand;
const deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpcEndpointServiceConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand;
const deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand = deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand;
const deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpcEndpointServicePermissionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommand;
const deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpcPeeringConnectionOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand;
const deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpcTenancyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpcTenancyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpcTenancyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpcTenancyCommand = deserializeAws_ec2ModifyVpcTenancyCommand;
const deserializeAws_ec2ModifyVpcTenancyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpnConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpnConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpnConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpnConnectionCommand = deserializeAws_ec2ModifyVpnConnectionCommand;
const deserializeAws_ec2ModifyVpnConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpnConnectionOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpnConnectionOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpnConnectionOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpnConnectionOptionsCommand = deserializeAws_ec2ModifyVpnConnectionOptionsCommand;
const deserializeAws_ec2ModifyVpnConnectionOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpnTunnelCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpnTunnelCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpnTunnelCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpnTunnelCertificateCommand = deserializeAws_ec2ModifyVpnTunnelCertificateCommand;
const deserializeAws_ec2ModifyVpnTunnelCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ModifyVpnTunnelOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ModifyVpnTunnelOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ModifyVpnTunnelOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ModifyVpnTunnelOptionsCommand = deserializeAws_ec2ModifyVpnTunnelOptionsCommand;
const deserializeAws_ec2ModifyVpnTunnelOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2MonitorInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2MonitorInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2MonitorInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2MonitorInstancesCommand = deserializeAws_ec2MonitorInstancesCommand;
const deserializeAws_ec2MonitorInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2MoveAddressToVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2MoveAddressToVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2MoveAddressToVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2MoveAddressToVpcCommand = deserializeAws_ec2MoveAddressToVpcCommand;
const deserializeAws_ec2MoveAddressToVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2MoveByoipCidrToIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2MoveByoipCidrToIpamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2MoveByoipCidrToIpamResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2MoveByoipCidrToIpamCommand = deserializeAws_ec2MoveByoipCidrToIpamCommand;
const deserializeAws_ec2MoveByoipCidrToIpamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ProvisionByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ProvisionByoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ProvisionByoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ProvisionByoipCidrCommand = deserializeAws_ec2ProvisionByoipCidrCommand;
const deserializeAws_ec2ProvisionByoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ProvisionIpamPoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ProvisionIpamPoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ProvisionIpamPoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ProvisionIpamPoolCidrCommand = deserializeAws_ec2ProvisionIpamPoolCidrCommand;
const deserializeAws_ec2ProvisionIpamPoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ProvisionPublicIpv4PoolCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommand = deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommand;
const deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2PurchaseHostReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2PurchaseHostReservationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2PurchaseHostReservationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2PurchaseHostReservationCommand = deserializeAws_ec2PurchaseHostReservationCommand;
const deserializeAws_ec2PurchaseHostReservationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2PurchaseReservedInstancesOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2PurchaseReservedInstancesOfferingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2PurchaseReservedInstancesOfferingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2PurchaseReservedInstancesOfferingCommand = deserializeAws_ec2PurchaseReservedInstancesOfferingCommand;
const deserializeAws_ec2PurchaseReservedInstancesOfferingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2PurchaseScheduledInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2PurchaseScheduledInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2PurchaseScheduledInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2PurchaseScheduledInstancesCommand = deserializeAws_ec2PurchaseScheduledInstancesCommand;
const deserializeAws_ec2PurchaseScheduledInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RebootInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RebootInstancesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RebootInstancesCommand = deserializeAws_ec2RebootInstancesCommand;
const deserializeAws_ec2RebootInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RegisterImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RegisterImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RegisterImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RegisterImageCommand = deserializeAws_ec2RegisterImageCommand;
const deserializeAws_ec2RegisterImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RegisterInstanceEventNotificationAttributesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommand;
const deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand;
const deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand;
const deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand;
const deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RejectTransitGatewayPeeringAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand;
const deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RejectTransitGatewayVpcAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommand;
const deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RejectVpcEndpointConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RejectVpcEndpointConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RejectVpcEndpointConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RejectVpcEndpointConnectionsCommand = deserializeAws_ec2RejectVpcEndpointConnectionsCommand;
const deserializeAws_ec2RejectVpcEndpointConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RejectVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RejectVpcPeeringConnectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RejectVpcPeeringConnectionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RejectVpcPeeringConnectionCommand = deserializeAws_ec2RejectVpcPeeringConnectionCommand;
const deserializeAws_ec2RejectVpcPeeringConnectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReleaseAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReleaseAddressCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReleaseAddressCommand = deserializeAws_ec2ReleaseAddressCommand;
const deserializeAws_ec2ReleaseAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReleaseHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReleaseHostsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ReleaseHostsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReleaseHostsCommand = deserializeAws_ec2ReleaseHostsCommand;
const deserializeAws_ec2ReleaseHostsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReleaseIpamPoolAllocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReleaseIpamPoolAllocationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ReleaseIpamPoolAllocationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReleaseIpamPoolAllocationCommand = deserializeAws_ec2ReleaseIpamPoolAllocationCommand;
const deserializeAws_ec2ReleaseIpamPoolAllocationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ReplaceIamInstanceProfileAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommand;
const deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReplaceNetworkAclAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReplaceNetworkAclAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ReplaceNetworkAclAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReplaceNetworkAclAssociationCommand = deserializeAws_ec2ReplaceNetworkAclAssociationCommand;
const deserializeAws_ec2ReplaceNetworkAclAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReplaceNetworkAclEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReplaceNetworkAclEntryCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReplaceNetworkAclEntryCommand = deserializeAws_ec2ReplaceNetworkAclEntryCommand;
const deserializeAws_ec2ReplaceNetworkAclEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReplaceRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReplaceRouteCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReplaceRouteCommand = deserializeAws_ec2ReplaceRouteCommand;
const deserializeAws_ec2ReplaceRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReplaceRouteTableAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReplaceRouteTableAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ReplaceRouteTableAssociationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReplaceRouteTableAssociationCommand = deserializeAws_ec2ReplaceRouteTableAssociationCommand;
const deserializeAws_ec2ReplaceRouteTableAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReplaceTransitGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReplaceTransitGatewayRouteCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ReplaceTransitGatewayRouteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReplaceTransitGatewayRouteCommand = deserializeAws_ec2ReplaceTransitGatewayRouteCommand;
const deserializeAws_ec2ReplaceTransitGatewayRouteCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ReportInstanceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ReportInstanceStatusCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ReportInstanceStatusCommand = deserializeAws_ec2ReportInstanceStatusCommand;
const deserializeAws_ec2ReportInstanceStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RequestSpotFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RequestSpotFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RequestSpotFleetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RequestSpotFleetCommand = deserializeAws_ec2RequestSpotFleetCommand;
const deserializeAws_ec2RequestSpotFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RequestSpotInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RequestSpotInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RequestSpotInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RequestSpotInstancesCommand = deserializeAws_ec2RequestSpotInstancesCommand;
const deserializeAws_ec2RequestSpotInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ResetAddressAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ResetAddressAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ResetAddressAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ResetAddressAttributeCommand = deserializeAws_ec2ResetAddressAttributeCommand;
const deserializeAws_ec2ResetAddressAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ResetEbsDefaultKmsKeyIdResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommand;
const deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ResetFpgaImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ResetFpgaImageAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2ResetFpgaImageAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ResetFpgaImageAttributeCommand = deserializeAws_ec2ResetFpgaImageAttributeCommand;
const deserializeAws_ec2ResetFpgaImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ResetImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ResetImageAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ResetImageAttributeCommand = deserializeAws_ec2ResetImageAttributeCommand;
const deserializeAws_ec2ResetImageAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ResetInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ResetInstanceAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ResetInstanceAttributeCommand = deserializeAws_ec2ResetInstanceAttributeCommand;
const deserializeAws_ec2ResetInstanceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ResetNetworkInterfaceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ResetNetworkInterfaceAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ResetNetworkInterfaceAttributeCommand = deserializeAws_ec2ResetNetworkInterfaceAttributeCommand;
const deserializeAws_ec2ResetNetworkInterfaceAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2ResetSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2ResetSnapshotAttributeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2ResetSnapshotAttributeCommand = deserializeAws_ec2ResetSnapshotAttributeCommand;
const deserializeAws_ec2ResetSnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RestoreAddressToClassicCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RestoreAddressToClassicCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RestoreAddressToClassicResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RestoreAddressToClassicCommand = deserializeAws_ec2RestoreAddressToClassicCommand;
const deserializeAws_ec2RestoreAddressToClassicCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RestoreImageFromRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RestoreImageFromRecycleBinCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RestoreImageFromRecycleBinResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RestoreImageFromRecycleBinCommand = deserializeAws_ec2RestoreImageFromRecycleBinCommand;
const deserializeAws_ec2RestoreImageFromRecycleBinCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RestoreManagedPrefixListVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RestoreManagedPrefixListVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RestoreManagedPrefixListVersionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RestoreManagedPrefixListVersionCommand = deserializeAws_ec2RestoreManagedPrefixListVersionCommand;
const deserializeAws_ec2RestoreManagedPrefixListVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RestoreSnapshotFromRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RestoreSnapshotFromRecycleBinCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RestoreSnapshotFromRecycleBinResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RestoreSnapshotFromRecycleBinCommand = deserializeAws_ec2RestoreSnapshotFromRecycleBinCommand;
const deserializeAws_ec2RestoreSnapshotFromRecycleBinCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RestoreSnapshotTierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RestoreSnapshotTierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RestoreSnapshotTierResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RestoreSnapshotTierCommand = deserializeAws_ec2RestoreSnapshotTierCommand;
const deserializeAws_ec2RestoreSnapshotTierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RevokeClientVpnIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RevokeClientVpnIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RevokeClientVpnIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RevokeClientVpnIngressCommand = deserializeAws_ec2RevokeClientVpnIngressCommand;
const deserializeAws_ec2RevokeClientVpnIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RevokeSecurityGroupEgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RevokeSecurityGroupEgressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RevokeSecurityGroupEgressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RevokeSecurityGroupEgressCommand = deserializeAws_ec2RevokeSecurityGroupEgressCommand;
const deserializeAws_ec2RevokeSecurityGroupEgressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RevokeSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RevokeSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RevokeSecurityGroupIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RevokeSecurityGroupIngressCommand = deserializeAws_ec2RevokeSecurityGroupIngressCommand;
const deserializeAws_ec2RevokeSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RunInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RunInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2Reservation(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RunInstancesCommand = deserializeAws_ec2RunInstancesCommand;
const deserializeAws_ec2RunInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2RunScheduledInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2RunScheduledInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2RunScheduledInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2RunScheduledInstancesCommand = deserializeAws_ec2RunScheduledInstancesCommand;
const deserializeAws_ec2RunScheduledInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2SearchLocalGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2SearchLocalGatewayRoutesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2SearchLocalGatewayRoutesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2SearchLocalGatewayRoutesCommand = deserializeAws_ec2SearchLocalGatewayRoutesCommand;
const deserializeAws_ec2SearchLocalGatewayRoutesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2SearchTransitGatewayMulticastGroupsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommand;
const deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2SearchTransitGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2SearchTransitGatewayRoutesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2SearchTransitGatewayRoutesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2SearchTransitGatewayRoutesCommand = deserializeAws_ec2SearchTransitGatewayRoutesCommand;
const deserializeAws_ec2SearchTransitGatewayRoutesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2SendDiagnosticInterruptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2SendDiagnosticInterruptCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2SendDiagnosticInterruptCommand = deserializeAws_ec2SendDiagnosticInterruptCommand;
const deserializeAws_ec2SendDiagnosticInterruptCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2StartInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2StartInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2StartInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2StartInstancesCommand = deserializeAws_ec2StartInstancesCommand;
const deserializeAws_ec2StartInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand = deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand;
const deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2StartNetworkInsightsAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2StartNetworkInsightsAnalysisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2StartNetworkInsightsAnalysisResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2StartNetworkInsightsAnalysisCommand = deserializeAws_ec2StartNetworkInsightsAnalysisCommand;
const deserializeAws_ec2StartNetworkInsightsAnalysisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand;
const deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2StopInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2StopInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2StopInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2StopInstancesCommand = deserializeAws_ec2StopInstancesCommand;
const deserializeAws_ec2StopInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2TerminateClientVpnConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2TerminateClientVpnConnectionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2TerminateClientVpnConnectionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2TerminateClientVpnConnectionsCommand = deserializeAws_ec2TerminateClientVpnConnectionsCommand;
const deserializeAws_ec2TerminateClientVpnConnectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2TerminateInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2TerminateInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2TerminateInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2TerminateInstancesCommand = deserializeAws_ec2TerminateInstancesCommand;
const deserializeAws_ec2TerminateInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2UnassignIpv6AddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2UnassignIpv6AddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2UnassignIpv6AddressesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2UnassignIpv6AddressesCommand = deserializeAws_ec2UnassignIpv6AddressesCommand;
const deserializeAws_ec2UnassignIpv6AddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2UnassignPrivateIpAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2UnassignPrivateIpAddressesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2UnassignPrivateIpAddressesCommand = deserializeAws_ec2UnassignPrivateIpAddressesCommand;
const deserializeAws_ec2UnassignPrivateIpAddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2UnmonitorInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2UnmonitorInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2UnmonitorInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2UnmonitorInstancesCommand = deserializeAws_ec2UnmonitorInstancesCommand;
const deserializeAws_ec2UnmonitorInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand;
const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand;
const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const deserializeAws_ec2WithdrawByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_ec2WithdrawByoipCidrCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_ec2WithdrawByoipCidrResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_ec2WithdrawByoipCidrCommand = deserializeAws_ec2WithdrawByoipCidrCommand;
const deserializeAws_ec2WithdrawByoipCidrCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            response = new EC2ServiceException_1.EC2ServiceException({
                name: parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Errors.Error);
    }
};
const serializeAws_ec2AcceleratorCount = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2AcceleratorCountRequest = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2AcceleratorManufacturerSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2AcceleratorNameSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2AcceleratorTotalMemoryMiB = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2AcceleratorTotalMemoryMiBRequest = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2AcceleratorTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2AcceptReservedInstancesExchangeQuoteRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReservedInstanceIds !== undefined && input.ReservedInstanceIds !== null) {
        const memberEntries = serializeAws_ec2ReservedInstanceIdSet(input.ReservedInstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TargetConfigurations !== undefined && input.TargetConfigurations !== null) {
        const memberEntries = serializeAws_ec2TargetConfigurationRequestSet(input.TargetConfigurations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AcceptTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AcceptTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AcceptVpcEndpointConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2AcceptVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const serializeAws_ec2AccessScopePathListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2AccessScopePathRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2AccessScopePathRequest = (input, context) => {
    const entries = {};
    if (input.Source !== undefined && input.Source !== null) {
        const memberEntries = serializeAws_ec2PathStatementRequest(input.Source, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Source.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Destination !== undefined && input.Destination !== null) {
        const memberEntries = serializeAws_ec2PathStatementRequest(input.Destination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Destination.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ThroughResources !== undefined && input.ThroughResources !== null) {
        const memberEntries = serializeAws_ec2ThroughResourcesStatementRequestList(input.ThroughResources, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ThroughResource.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2AccountAttributeNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AttributeName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2AddIpamOperatingRegion = (input, context) => {
    const entries = {};
    if (input.RegionName !== undefined && input.RegionName !== null) {
        entries["RegionName"] = input.RegionName;
    }
    return entries;
};
const serializeAws_ec2AddIpamOperatingRegionSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2AddIpamOperatingRegion(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2AddPrefixListEntries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2AddPrefixListEntry(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2AddPrefixListEntry = (input, context) => {
    const entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const serializeAws_ec2AdvertiseByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AllocateAddressRequest = (input, context) => {
    const entries = {};
    if (input.Domain !== undefined && input.Domain !== null) {
        entries["Domain"] = input.Domain;
    }
    if (input.Address !== undefined && input.Address !== null) {
        entries["Address"] = input.Address;
    }
    if (input.PublicIpv4Pool !== undefined && input.PublicIpv4Pool !== null) {
        entries["PublicIpv4Pool"] = input.PublicIpv4Pool;
    }
    if (input.NetworkBorderGroup !== undefined && input.NetworkBorderGroup !== null) {
        entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
    }
    if (input.CustomerOwnedIpv4Pool !== undefined && input.CustomerOwnedIpv4Pool !== null) {
        entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2AllocateHostsRequest = (input, context) => {
    const entries = {};
    if (input.AutoPlacement !== undefined && input.AutoPlacement !== null) {
        entries["AutoPlacement"] = input.AutoPlacement;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    if (input.Quantity !== undefined && input.Quantity !== null) {
        entries["Quantity"] = input.Quantity;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HostRecovery !== undefined && input.HostRecovery !== null) {
        entries["HostRecovery"] = input.HostRecovery;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    return entries;
};
const serializeAws_ec2AllocateIpamPoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.NetmaskLength !== undefined && input.NetmaskLength !== null) {
        entries["NetmaskLength"] = input.NetmaskLength;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.PreviewNextCidr !== undefined && input.PreviewNextCidr !== null) {
        entries["PreviewNextCidr"] = input.PreviewNextCidr;
    }
    if (input.DisallowedCidrs !== undefined && input.DisallowedCidrs !== null) {
        const memberEntries = serializeAws_ec2IpamPoolAllocationDisallowedCidrs(input.DisallowedCidrs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisallowedCidr.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2AllocationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AllocationId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2AllocationIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ArchitectureTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ArnList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2AssignIpv6AddressesRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        const memberEntries = serializeAws_ec2Ipv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount !== undefined && input.Ipv6PrefixCount !== null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        const memberEntries = serializeAws_ec2IpPrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
const serializeAws_ec2AssignPrivateIpAddressesRequest = (input, context) => {
    const entries = {};
    if (input.AllowReassignment !== undefined && input.AllowReassignment !== null) {
        entries["AllowReassignment"] = input.AllowReassignment;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        const memberEntries = serializeAws_ec2PrivateIpAddressStringList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        const memberEntries = serializeAws_ec2IpPrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount !== undefined && input.Ipv4PrefixCount !== null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    return entries;
};
const serializeAws_ec2AssociateAddressRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.AllowReassociation !== undefined && input.AllowReassociation !== null) {
        entries["AllowReassociation"] = input.AllowReassociation;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    return entries;
};
const serializeAws_ec2AssociateClientVpnTargetNetworkRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AssociateDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DhcpOptionsId !== undefined && input.DhcpOptionsId !== null) {
        entries["DhcpOptionsId"] = input.DhcpOptionsId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AssociateEnclaveCertificateIamRoleRequest = (input, context) => {
    const entries = {};
    if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AssociateIamInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const serializeAws_ec2AssociateInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceEventWindowId !== undefined && input.InstanceEventWindowId !== null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    if (input.AssociationTarget !== undefined && input.AssociationTarget !== null) {
        const memberEntries = serializeAws_ec2InstanceEventWindowAssociationRequest(input.AssociationTarget, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2AssociateRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    return entries;
};
const serializeAws_ec2AssociateSubnetCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    return entries;
};
const serializeAws_ec2AssociateTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AssociateTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AssociateTrunkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.BranchInterfaceId !== undefined && input.BranchInterfaceId !== null) {
        entries["BranchInterfaceId"] = input.BranchInterfaceId;
    }
    if (input.TrunkInterfaceId !== undefined && input.TrunkInterfaceId !== null) {
        entries["TrunkInterfaceId"] = input.TrunkInterfaceId;
    }
    if (input.VlanId !== undefined && input.VlanId !== null) {
        entries["VlanId"] = input.VlanId;
    }
    if (input.GreKey !== undefined && input.GreKey !== null) {
        entries["GreKey"] = input.GreKey;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AssociateVpcCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input.AmazonProvidedIpv6CidrBlock !== undefined && input.AmazonProvidedIpv6CidrBlock !== null) {
        entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
    }
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.Ipv6CidrBlockNetworkBorderGroup !== undefined && input.Ipv6CidrBlockNetworkBorderGroup !== null) {
        entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
    }
    if (input.Ipv6Pool !== undefined && input.Ipv6Pool !== null) {
        entries["Ipv6Pool"] = input.Ipv6Pool;
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.Ipv4IpamPoolId !== undefined && input.Ipv4IpamPoolId !== null) {
        entries["Ipv4IpamPoolId"] = input.Ipv4IpamPoolId;
    }
    if (input.Ipv4NetmaskLength !== undefined && input.Ipv4NetmaskLength !== null) {
        entries["Ipv4NetmaskLength"] = input.Ipv4NetmaskLength;
    }
    if (input.Ipv6IpamPoolId !== undefined && input.Ipv6IpamPoolId !== null) {
        entries["Ipv6IpamPoolId"] = input.Ipv6IpamPoolId;
    }
    if (input.Ipv6NetmaskLength !== undefined && input.Ipv6NetmaskLength !== null) {
        entries["Ipv6NetmaskLength"] = input.Ipv6NetmaskLength;
    }
    return entries;
};
const serializeAws_ec2AssociationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AssociationId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2AthenaIntegration = (input, context) => {
    const entries = {};
    if (input.IntegrationResultS3DestinationArn !== undefined && input.IntegrationResultS3DestinationArn !== null) {
        entries["IntegrationResultS3DestinationArn"] = input.IntegrationResultS3DestinationArn;
    }
    if (input.PartitionLoadFrequency !== undefined && input.PartitionLoadFrequency !== null) {
        entries["PartitionLoadFrequency"] = input.PartitionLoadFrequency;
    }
    if (input.PartitionStartDate !== undefined && input.PartitionStartDate !== null) {
        entries["PartitionStartDate"] = input.PartitionStartDate.toISOString().split(".")[0] + "Z";
    }
    if (input.PartitionEndDate !== undefined && input.PartitionEndDate !== null) {
        entries["PartitionEndDate"] = input.PartitionEndDate.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_ec2AthenaIntegrationsSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2AthenaIntegration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2AttachClassicLinkVpcRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        const memberEntries = serializeAws_ec2GroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2AttachInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayId !== undefined && input.InternetGatewayId !== null) {
        entries["InternetGatewayId"] = input.InternetGatewayId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2AttachNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.NetworkCardIndex !== undefined && input.NetworkCardIndex !== null) {
        entries["NetworkCardIndex"] = input.NetworkCardIndex;
    }
    return entries;
};
const serializeAws_ec2AttachVolumeRequest = (input, context) => {
    const entries = {};
    if (input.Device !== undefined && input.Device !== null) {
        entries["Device"] = input.Device;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AttachVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AttributeBooleanValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2AttributeValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2AuthorizeClientVpnIngressRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.TargetNetworkCidr !== undefined && input.TargetNetworkCidr !== null) {
        entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
    }
    if (input.AccessGroupId !== undefined && input.AccessGroupId !== null) {
        entries["AccessGroupId"] = input.AccessGroupId;
    }
    if (input.AuthorizeAllGroups !== undefined && input.AuthorizeAllGroups !== null) {
        entries["AuthorizeAllGroups"] = input.AuthorizeAllGroups;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2AuthorizeSecurityGroupEgressRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    return entries;
};
const serializeAws_ec2AuthorizeSecurityGroupIngressRequest = (input, context) => {
    const entries = {};
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2AvailabilityZoneStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AvailabilityZone.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2BaselineEbsBandwidthMbps = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2BaselineEbsBandwidthMbpsRequest = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2BillingProductList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2BlobAttributeValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = context.base64Encoder(input.Value);
    }
    return entries;
};
const serializeAws_ec2BlockDeviceMapping = (input, context) => {
    const entries = {};
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.VirtualName !== undefined && input.VirtualName !== null) {
        entries["VirtualName"] = input.VirtualName;
    }
    if (input.Ebs !== undefined && input.Ebs !== null) {
        const memberEntries = serializeAws_ec2EbsBlockDevice(input.Ebs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NoDevice !== undefined && input.NoDevice !== null) {
        entries["NoDevice"] = input.NoDevice;
    }
    return entries;
};
const serializeAws_ec2BlockDeviceMappingList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2BlockDeviceMapping(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2BlockDeviceMappingRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2BlockDeviceMapping(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2BundleIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`BundleId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2BundleInstanceRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.Storage !== undefined && input.Storage !== null) {
        const memberEntries = serializeAws_ec2Storage(input.Storage, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Storage.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CancelBundleTaskRequest = (input, context) => {
    const entries = {};
    if (input.BundleId !== undefined && input.BundleId !== null) {
        entries["BundleId"] = input.BundleId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CancelCapacityReservationFleetsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.CapacityReservationFleetIds !== undefined && input.CapacityReservationFleetIds !== null) {
        const memberEntries = serializeAws_ec2CapacityReservationFleetIdSet(input.CapacityReservationFleetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CancelCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CancelConversionRequest = (input, context) => {
    const entries = {};
    if (input.ConversionTaskId !== undefined && input.ConversionTaskId !== null) {
        entries["ConversionTaskId"] = input.ConversionTaskId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReasonMessage !== undefined && input.ReasonMessage !== null) {
        entries["ReasonMessage"] = input.ReasonMessage;
    }
    return entries;
};
const serializeAws_ec2CancelExportTaskRequest = (input, context) => {
    const entries = {};
    if (input.ExportTaskId !== undefined && input.ExportTaskId !== null) {
        entries["ExportTaskId"] = input.ExportTaskId;
    }
    return entries;
};
const serializeAws_ec2CancelImportTaskRequest = (input, context) => {
    const entries = {};
    if (input.CancelReason !== undefined && input.CancelReason !== null) {
        entries["CancelReason"] = input.CancelReason;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ImportTaskId !== undefined && input.ImportTaskId !== null) {
        entries["ImportTaskId"] = input.ImportTaskId;
    }
    return entries;
};
const serializeAws_ec2CancelReservedInstancesListingRequest = (input, context) => {
    const entries = {};
    if (input.ReservedInstancesListingId !== undefined && input.ReservedInstancesListingId !== null) {
        entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
    }
    return entries;
};
const serializeAws_ec2CancelSpotFleetRequestsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotFleetRequestIds !== undefined && input.SpotFleetRequestIds !== null) {
        const memberEntries = serializeAws_ec2SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TerminateInstances !== undefined && input.TerminateInstances !== null) {
        entries["TerminateInstances"] = input.TerminateInstances;
    }
    return entries;
};
const serializeAws_ec2CancelSpotInstanceRequestsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotInstanceRequestIds !== undefined && input.SpotInstanceRequestIds !== null) {
        const memberEntries = serializeAws_ec2SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CapacityReservationFleetIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2CapacityReservationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2CapacityReservationOptionsRequest = (input, context) => {
    const entries = {};
    if (input.UsageStrategy !== undefined && input.UsageStrategy !== null) {
        entries["UsageStrategy"] = input.UsageStrategy;
    }
    return entries;
};
const serializeAws_ec2CapacityReservationSpecification = (input, context) => {
    const entries = {};
    if (input.CapacityReservationPreference !== undefined && input.CapacityReservationPreference !== null) {
        entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
    }
    if (input.CapacityReservationTarget !== undefined && input.CapacityReservationTarget !== null) {
        const memberEntries = serializeAws_ec2CapacityReservationTarget(input.CapacityReservationTarget, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CapacityReservationTarget = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.CapacityReservationResourceGroupArn !== undefined && input.CapacityReservationResourceGroupArn !== null) {
        entries["CapacityReservationResourceGroupArn"] = input.CapacityReservationResourceGroupArn;
    }
    return entries;
};
const serializeAws_ec2CarrierGatewayIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2CertificateAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input.ClientRootCertificateChainArn !== undefined && input.ClientRootCertificateChainArn !== null) {
        entries["ClientRootCertificateChainArn"] = input.ClientRootCertificateChainArn;
    }
    return entries;
};
const serializeAws_ec2CidrAuthorizationContext = (input, context) => {
    const entries = {};
    if (input.Message !== undefined && input.Message !== null) {
        entries["Message"] = input.Message;
    }
    if (input.Signature !== undefined && input.Signature !== null) {
        entries["Signature"] = input.Signature;
    }
    return entries;
};
const serializeAws_ec2ClassicLoadBalancer = (input, context) => {
    const entries = {};
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const serializeAws_ec2ClassicLoadBalancers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ClassicLoadBalancer(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ClassicLoadBalancersConfig = (input, context) => {
    const entries = {};
    if (input.ClassicLoadBalancers !== undefined && input.ClassicLoadBalancers !== null) {
        const memberEntries = serializeAws_ec2ClassicLoadBalancers(input.ClassicLoadBalancers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClassicLoadBalancers.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ClientConnectOptions = (input, context) => {
    const entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {
        entries["LambdaFunctionArn"] = input.LambdaFunctionArn;
    }
    return entries;
};
const serializeAws_ec2ClientData = (input, context) => {
    const entries = {};
    if (input.Comment !== undefined && input.Comment !== null) {
        entries["Comment"] = input.Comment;
    }
    if (input.UploadEnd !== undefined && input.UploadEnd !== null) {
        entries["UploadEnd"] = input.UploadEnd.toISOString().split(".")[0] + "Z";
    }
    if (input.UploadSize !== undefined && input.UploadSize !== null) {
        entries["UploadSize"] = (0, smithy_client_1.serializeFloat)(input.UploadSize);
    }
    if (input.UploadStart !== undefined && input.UploadStart !== null) {
        entries["UploadStart"] = input.UploadStart.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_ec2ClientLoginBannerOptions = (input, context) => {
    const entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.BannerText !== undefined && input.BannerText !== null) {
        entries["BannerText"] = input.BannerText;
    }
    return entries;
};
const serializeAws_ec2ClientVpnAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.ActiveDirectory !== undefined && input.ActiveDirectory !== null) {
        const memberEntries = serializeAws_ec2DirectoryServiceAuthenticationRequest(input.ActiveDirectory, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ActiveDirectory.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MutualAuthentication !== undefined && input.MutualAuthentication !== null) {
        const memberEntries = serializeAws_ec2CertificateAuthenticationRequest(input.MutualAuthentication, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MutualAuthentication.${key}`;
            entries[loc] = value;
        });
    }
    if (input.FederatedAuthentication !== undefined && input.FederatedAuthentication !== null) {
        const memberEntries = serializeAws_ec2FederatedAuthenticationRequest(input.FederatedAuthentication, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FederatedAuthentication.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ClientVpnAuthenticationRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ClientVpnAuthenticationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ClientVpnEndpointIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ClientVpnSecurityGroupIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2CoipPoolIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ConfirmProductInstanceRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.ProductCode !== undefined && input.ProductCode !== null) {
        entries["ProductCode"] = input.ProductCode;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ConnectionLogOptions = (input, context) => {
    const entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.CloudwatchLogGroup !== undefined && input.CloudwatchLogGroup !== null) {
        entries["CloudwatchLogGroup"] = input.CloudwatchLogGroup;
    }
    if (input.CloudwatchLogStream !== undefined && input.CloudwatchLogStream !== null) {
        entries["CloudwatchLogStream"] = input.CloudwatchLogStream;
    }
    return entries;
};
const serializeAws_ec2ConnectionNotificationIdsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ConversionIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2CopyFpgaImageRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SourceFpgaImageId !== undefined && input.SourceFpgaImageId !== null) {
        entries["SourceFpgaImageId"] = input.SourceFpgaImageId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.SourceRegion !== undefined && input.SourceRegion !== null) {
        entries["SourceRegion"] = input.SourceRegion;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CopyImageRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.SourceImageId !== undefined && input.SourceImageId !== null) {
        entries["SourceImageId"] = input.SourceImageId;
    }
    if (input.SourceRegion !== undefined && input.SourceRegion !== null) {
        entries["SourceRegion"] = input.SourceRegion;
    }
    if (input.DestinationOutpostArn !== undefined && input.DestinationOutpostArn !== null) {
        entries["DestinationOutpostArn"] = input.DestinationOutpostArn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CopySnapshotRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DestinationOutpostArn !== undefined && input.DestinationOutpostArn !== null) {
        entries["DestinationOutpostArn"] = input.DestinationOutpostArn;
    }
    if (input.DestinationRegion !== undefined && input.DestinationRegion !== null) {
        entries["DestinationRegion"] = input.DestinationRegion;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PresignedUrl !== undefined && input.PresignedUrl !== null) {
        entries["PresignedUrl"] = input.PresignedUrl;
    }
    if (input.SourceRegion !== undefined && input.SourceRegion !== null) {
        entries["SourceRegion"] = input.SourceRegion;
    }
    if (input.SourceSnapshotId !== undefined && input.SourceSnapshotId !== null) {
        entries["SourceSnapshotId"] = input.SourceSnapshotId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CpuManufacturerSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2CpuOptionsRequest = (input, context) => {
    const entries = {};
    if (input.CoreCount !== undefined && input.CoreCount !== null) {
        entries["CoreCount"] = input.CoreCount;
    }
    if (input.ThreadsPerCore !== undefined && input.ThreadsPerCore !== null) {
        entries["ThreadsPerCore"] = input.ThreadsPerCore;
    }
    return entries;
};
const serializeAws_ec2CreateCapacityReservationFleetRequest = (input, context) => {
    const entries = {};
    if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceTypeSpecifications !== undefined && input.InstanceTypeSpecifications !== null) {
        const memberEntries = serializeAws_ec2ReservationFleetInstanceSpecificationList(input.InstanceTypeSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTypeSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.TotalTargetCapacity !== undefined && input.TotalTargetCapacity !== null) {
        entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
    }
    if (input.EndDate !== undefined && input.EndDate !== null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceMatchCriteria !== undefined && input.InstanceMatchCriteria !== null) {
        entries["InstanceMatchCriteria"] = input.InstanceMatchCriteria;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstancePlatform !== undefined && input.InstancePlatform !== null) {
        entries["InstancePlatform"] = input.InstancePlatform;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AvailabilityZoneId !== undefined && input.AvailabilityZoneId !== null) {
        entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.EphemeralStorage !== undefined && input.EphemeralStorage !== null) {
        entries["EphemeralStorage"] = input.EphemeralStorage;
    }
    if (input.EndDate !== undefined && input.EndDate !== null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.EndDateType !== undefined && input.EndDateType !== null) {
        entries["EndDateType"] = input.EndDateType;
    }
    if (input.InstanceMatchCriteria !== undefined && input.InstanceMatchCriteria !== null) {
        entries["InstanceMatchCriteria"] = input.InstanceMatchCriteria;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.PlacementGroupArn !== undefined && input.PlacementGroupArn !== null) {
        entries["PlacementGroupArn"] = input.PlacementGroupArn;
    }
    return entries;
};
const serializeAws_ec2CreateCarrierGatewayRequest = (input, context) => {
    const entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateClientVpnEndpointRequest = (input, context) => {
    const entries = {};
    if (input.ClientCidrBlock !== undefined && input.ClientCidrBlock !== null) {
        entries["ClientCidrBlock"] = input.ClientCidrBlock;
    }
    if (input.ServerCertificateArn !== undefined && input.ServerCertificateArn !== null) {
        entries["ServerCertificateArn"] = input.ServerCertificateArn;
    }
    if (input.AuthenticationOptions !== undefined && input.AuthenticationOptions !== null) {
        const memberEntries = serializeAws_ec2ClientVpnAuthenticationRequestList(input.AuthenticationOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Authentication.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ConnectionLogOptions !== undefined && input.ConnectionLogOptions !== null) {
        const memberEntries = serializeAws_ec2ConnectionLogOptions(input.ConnectionLogOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionLogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DnsServers !== undefined && input.DnsServers !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.DnsServers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsServers.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TransportProtocol !== undefined && input.TransportProtocol !== null) {
        entries["TransportProtocol"] = input.TransportProtocol;
    }
    if (input.VpnPort !== undefined && input.VpnPort !== null) {
        entries["VpnPort"] = input.VpnPort;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.SplitTunnel !== undefined && input.SplitTunnel !== null) {
        entries["SplitTunnel"] = input.SplitTunnel;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SelfServicePortal !== undefined && input.SelfServicePortal !== null) {
        entries["SelfServicePortal"] = input.SelfServicePortal;
    }
    if (input.ClientConnectOptions !== undefined && input.ClientConnectOptions !== null) {
        const memberEntries = serializeAws_ec2ClientConnectOptions(input.ClientConnectOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientConnectOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SessionTimeoutHours !== undefined && input.SessionTimeoutHours !== null) {
        entries["SessionTimeoutHours"] = input.SessionTimeoutHours;
    }
    if (input.ClientLoginBannerOptions !== undefined && input.ClientLoginBannerOptions !== null) {
        const memberEntries = serializeAws_ec2ClientLoginBannerOptions(input.ClientLoginBannerOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientLoginBannerOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateClientVpnRouteRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.TargetVpcSubnetId !== undefined && input.TargetVpcSubnetId !== null) {
        entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateCustomerGatewayRequest = (input, context) => {
    const entries = {};
    if (input.BgpAsn !== undefined && input.BgpAsn !== null) {
        entries["BgpAsn"] = input.BgpAsn;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["IpAddress"] = input.PublicIp;
    }
    if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateDefaultSubnetRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Ipv6Native !== undefined && input.Ipv6Native !== null) {
        entries["Ipv6Native"] = input.Ipv6Native;
    }
    return entries;
};
const serializeAws_ec2CreateDefaultVpcRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DhcpConfigurations !== undefined && input.DhcpConfigurations !== null) {
        const memberEntries = serializeAws_ec2NewDhcpConfigurationList(input.DhcpConfigurations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DhcpConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateEgressOnlyInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateFleetRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.SpotOptions !== undefined && input.SpotOptions !== null) {
        const memberEntries = serializeAws_ec2SpotOptionsRequest(input.SpotOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OnDemandOptions !== undefined && input.OnDemandOptions !== null) {
        const memberEntries = serializeAws_ec2OnDemandOptionsRequest(input.OnDemandOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OnDemandOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
        const memberEntries = serializeAws_ec2FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TargetCapacitySpecification !== undefined && input.TargetCapacitySpecification !== null) {
        const memberEntries = serializeAws_ec2TargetCapacitySpecificationRequest(input.TargetCapacitySpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetCapacitySpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TerminateInstancesWithExpiration !== undefined && input.TerminateInstancesWithExpiration !== null) {
        entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.ValidFrom !== undefined && input.ValidFrom !== null) {
        entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.ReplaceUnhealthyInstances !== undefined && input.ReplaceUnhealthyInstances !== null) {
        entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Context !== undefined && input.Context !== null) {
        entries["Context"] = input.Context;
    }
    return entries;
};
const serializeAws_ec2CreateFlowLogsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DeliverLogsPermissionArn !== undefined && input.DeliverLogsPermissionArn !== null) {
        entries["DeliverLogsPermissionArn"] = input.DeliverLogsPermissionArn;
    }
    if (input.LogGroupName !== undefined && input.LogGroupName !== null) {
        entries["LogGroupName"] = input.LogGroupName;
    }
    if (input.ResourceIds !== undefined && input.ResourceIds !== null) {
        const memberEntries = serializeAws_ec2FlowLogResourceIds(input.ResourceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.TrafficType !== undefined && input.TrafficType !== null) {
        entries["TrafficType"] = input.TrafficType;
    }
    if (input.LogDestinationType !== undefined && input.LogDestinationType !== null) {
        entries["LogDestinationType"] = input.LogDestinationType;
    }
    if (input.LogDestination !== undefined && input.LogDestination !== null) {
        entries["LogDestination"] = input.LogDestination;
    }
    if (input.LogFormat !== undefined && input.LogFormat !== null) {
        entries["LogFormat"] = input.LogFormat;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxAggregationInterval !== undefined && input.MaxAggregationInterval !== null) {
        entries["MaxAggregationInterval"] = input.MaxAggregationInterval;
    }
    if (input.DestinationOptions !== undefined && input.DestinationOptions !== null) {
        const memberEntries = serializeAws_ec2DestinationOptionsRequest(input.DestinationOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateFpgaImageRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InputStorageLocation !== undefined && input.InputStorageLocation !== null) {
        const memberEntries = serializeAws_ec2StorageLocation(input.InputStorageLocation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InputStorageLocation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LogsStorageLocation !== undefined && input.LogsStorageLocation !== null) {
        const memberEntries = serializeAws_ec2StorageLocation(input.LogsStorageLocation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogsStorageLocation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateImageRequest = (input, context) => {
    const entries = {};
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        const memberEntries = serializeAws_ec2BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.NoReboot !== undefined && input.NoReboot !== null) {
        entries["NoReboot"] = input.NoReboot;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.TimeRanges !== undefined && input.TimeRanges !== null) {
        const memberEntries = serializeAws_ec2InstanceEventWindowTimeRangeRequestSet(input.TimeRanges, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.CronExpression !== undefined && input.CronExpression !== null) {
        entries["CronExpression"] = input.CronExpression;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateInstanceExportTaskRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.ExportToS3Task !== undefined && input.ExportToS3Task !== null) {
        const memberEntries = serializeAws_ec2ExportToS3TaskSpecification(input.ExportToS3Task, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportToS3.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.TargetEnvironment !== undefined && input.TargetEnvironment !== null) {
        entries["TargetEnvironment"] = input.TargetEnvironment;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateIpamPoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.Locale !== undefined && input.Locale !== null) {
        entries["Locale"] = input.Locale;
    }
    if (input.SourceIpamPoolId !== undefined && input.SourceIpamPoolId !== null) {
        entries["SourceIpamPoolId"] = input.SourceIpamPoolId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.AddressFamily !== undefined && input.AddressFamily !== null) {
        entries["AddressFamily"] = input.AddressFamily;
    }
    if (input.AutoImport !== undefined && input.AutoImport !== null) {
        entries["AutoImport"] = input.AutoImport;
    }
    if (input.PubliclyAdvertisable !== undefined && input.PubliclyAdvertisable !== null) {
        entries["PubliclyAdvertisable"] = input.PubliclyAdvertisable;
    }
    if (input.AllocationMinNetmaskLength !== undefined && input.AllocationMinNetmaskLength !== null) {
        entries["AllocationMinNetmaskLength"] = input.AllocationMinNetmaskLength;
    }
    if (input.AllocationMaxNetmaskLength !== undefined && input.AllocationMaxNetmaskLength !== null) {
        entries["AllocationMaxNetmaskLength"] = input.AllocationMaxNetmaskLength;
    }
    if (input.AllocationDefaultNetmaskLength !== undefined && input.AllocationDefaultNetmaskLength !== null) {
        entries["AllocationDefaultNetmaskLength"] = input.AllocationDefaultNetmaskLength;
    }
    if (input.AllocationResourceTags !== undefined && input.AllocationResourceTags !== null) {
        const memberEntries = serializeAws_ec2RequestIpamResourceTagList(input.AllocationResourceTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.AwsService !== undefined && input.AwsService !== null) {
        entries["AwsService"] = input.AwsService;
    }
    return entries;
};
const serializeAws_ec2CreateIpamRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.OperatingRegions !== undefined && input.OperatingRegions !== null) {
        const memberEntries = serializeAws_ec2AddIpamOperatingRegionSet(input.OperatingRegions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateIpamScopeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId !== undefined && input.IpamId !== null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateKeyPairRequest = (input, context) => {
    const entries = {};
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.KeyType !== undefined && input.KeyType !== null) {
        entries["KeyType"] = input.KeyType;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.KeyFormat !== undefined && input.KeyFormat !== null) {
        entries["KeyFormat"] = input.KeyFormat;
    }
    return entries;
};
const serializeAws_ec2CreateLaunchTemplateRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.VersionDescription !== undefined && input.VersionDescription !== null) {
        entries["VersionDescription"] = input.VersionDescription;
    }
    if (input.LaunchTemplateData !== undefined && input.LaunchTemplateData !== null) {
        const memberEntries = serializeAws_ec2RequestLaunchTemplateData(input.LaunchTemplateData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateData.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateLaunchTemplateVersionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.SourceVersion !== undefined && input.SourceVersion !== null) {
        entries["SourceVersion"] = input.SourceVersion;
    }
    if (input.VersionDescription !== undefined && input.VersionDescription !== null) {
        entries["VersionDescription"] = input.VersionDescription;
    }
    if (input.LaunchTemplateData !== undefined && input.LaunchTemplateData !== null) {
        const memberEntries = serializeAws_ec2RequestLaunchTemplateData(input.LaunchTemplateData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateData.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateLocalGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.LocalGatewayVirtualInterfaceGroupId !== undefined && input.LocalGatewayVirtualInterfaceGroupId !== null) {
        entries["LocalGatewayVirtualInterfaceGroupId"] = input.LocalGatewayVirtualInterfaceGroupId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateManagedPrefixListRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListName !== undefined && input.PrefixListName !== null) {
        entries["PrefixListName"] = input.PrefixListName;
    }
    if (input.Entries !== undefined && input.Entries !== null) {
        const memberEntries = serializeAws_ec2AddPrefixListEntries(input.Entries, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Entry.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxEntries !== undefined && input.MaxEntries !== null) {
        entries["MaxEntries"] = input.MaxEntries;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddressFamily !== undefined && input.AddressFamily !== null) {
        entries["AddressFamily"] = input.AddressFamily;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateNatGatewayRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ConnectivityType !== undefined && input.ConnectivityType !== null) {
        entries["ConnectivityType"] = input.ConnectivityType;
    }
    return entries;
};
const serializeAws_ec2CreateNetworkAclEntryRequest = (input, context) => {
    const entries = {};
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Egress !== undefined && input.Egress !== null) {
        entries["Egress"] = input.Egress;
    }
    if (input.IcmpTypeCode !== undefined && input.IcmpTypeCode !== null) {
        const memberEntries = serializeAws_ec2IcmpTypeCode(input.IcmpTypeCode, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Icmp.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    if (input.PortRange !== undefined && input.PortRange !== null) {
        const memberEntries = serializeAws_ec2PortRange(input.PortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.RuleAction !== undefined && input.RuleAction !== null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    return entries;
};
const serializeAws_ec2CreateNetworkAclRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateNetworkInsightsAccessScopeRequest = (input, context) => {
    const entries = {};
    if (input.MatchPaths !== undefined && input.MatchPaths !== null) {
        const memberEntries = serializeAws_ec2AccessScopePathListRequest(input.MatchPaths, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MatchPath.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludePaths !== undefined && input.ExcludePaths !== null) {
        const memberEntries = serializeAws_ec2AccessScopePathListRequest(input.ExcludePaths, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludePath.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateNetworkInsightsPathRequest = (input, context) => {
    const entries = {};
    if (input.SourceIp !== undefined && input.SourceIp !== null) {
        entries["SourceIp"] = input.SourceIp;
    }
    if (input.DestinationIp !== undefined && input.DestinationIp !== null) {
        entries["DestinationIp"] = input.DestinationIp;
    }
    if (input.Source !== undefined && input.Source !== null) {
        entries["Source"] = input.Source;
    }
    if (input.Destination !== undefined && input.Destination !== null) {
        entries["Destination"] = input.Destination;
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.DestinationPort !== undefined && input.DestinationPort !== null) {
        entries["DestinationPort"] = input.DestinationPort;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateNetworkInterfacePermissionRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.AwsAccountId !== undefined && input.AwsAccountId !== null) {
        entries["AwsAccountId"] = input.AwsAccountId;
    }
    if (input.AwsService !== undefined && input.AwsService !== null) {
        entries["AwsService"] = input.AwsService;
    }
    if (input.Permission !== undefined && input.Permission !== null) {
        entries["Permission"] = input.Permission;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        const memberEntries = serializeAws_ec2InstanceIpv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        const memberEntries = serializeAws_ec2PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        const memberEntries = serializeAws_ec2Ipv4PrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount !== undefined && input.Ipv4PrefixCount !== null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        const memberEntries = serializeAws_ec2Ipv6PrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount !== undefined && input.Ipv6PrefixCount !== null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    if (input.InterfaceType !== undefined && input.InterfaceType !== null) {
        entries["InterfaceType"] = input.InterfaceType;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreatePlacementGroupRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Strategy !== undefined && input.Strategy !== null) {
        entries["Strategy"] = input.Strategy;
    }
    if (input.PartitionCount !== undefined && input.PartitionCount !== null) {
        entries["PartitionCount"] = input.PartitionCount;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreatePublicIpv4PoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateReplaceRootVolumeTaskRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateReservedInstancesListingRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.PriceSchedules !== undefined && input.PriceSchedules !== null) {
        const memberEntries = serializeAws_ec2PriceScheduleSpecificationList(input.PriceSchedules, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PriceSchedules.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ReservedInstancesId !== undefined && input.ReservedInstancesId !== null) {
        entries["ReservedInstancesId"] = input.ReservedInstancesId;
    }
    return entries;
};
const serializeAws_ec2CreateRestoreImageTaskRequest = (input, context) => {
    const entries = {};
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.ObjectKey !== undefined && input.ObjectKey !== null) {
        entries["ObjectKey"] = input.ObjectKey;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DestinationIpv6CidrBlock !== undefined && input.DestinationIpv6CidrBlock !== null) {
        entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
    }
    if (input.DestinationPrefixListId !== undefined && input.DestinationPrefixListId !== null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.EgressOnlyInternetGatewayId !== undefined && input.EgressOnlyInternetGatewayId !== null) {
        entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
    }
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.NatGatewayId !== undefined && input.NatGatewayId !== null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.LocalGatewayId !== undefined && input.LocalGatewayId !== null) {
        entries["LocalGatewayId"] = input.LocalGatewayId;
    }
    if (input.CarrierGatewayId !== undefined && input.CarrierGatewayId !== null) {
        entries["CarrierGatewayId"] = input.CarrierGatewayId;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    if (input.CoreNetworkArn !== undefined && input.CoreNetworkArn !== null) {
        entries["CoreNetworkArn"] = input.CoreNetworkArn;
    }
    return entries;
};
const serializeAws_ec2CreateRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateSecurityGroupRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["GroupDescription"] = input.Description;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateSnapshotRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateSnapshotsRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.InstanceSpecification !== undefined && input.InstanceSpecification !== null) {
        const memberEntries = serializeAws_ec2InstanceSpecification(input.InstanceSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.CopyTagsFromSource !== undefined && input.CopyTagsFromSource !== null) {
        entries["CopyTagsFromSource"] = input.CopyTagsFromSource;
    }
    return entries;
};
const serializeAws_ec2CreateSpotDatafeedSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Prefix !== undefined && input.Prefix !== null) {
        entries["Prefix"] = input.Prefix;
    }
    return entries;
};
const serializeAws_ec2CreateStoreImageTaskRequest = (input, context) => {
    const entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.S3ObjectTags !== undefined && input.S3ObjectTags !== null) {
        const memberEntries = serializeAws_ec2S3ObjectTagList(input.S3ObjectTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3ObjectTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateSubnetCidrReservationRequest = (input, context) => {
    const entries = {};
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.ReservationType !== undefined && input.ReservationType !== null) {
        entries["ReservationType"] = input.ReservationType;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateSubnetRequest = (input, context) => {
    const entries = {};
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AvailabilityZoneId !== undefined && input.AvailabilityZoneId !== null) {
        entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
    }
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Ipv6Native !== undefined && input.Ipv6Native !== null) {
        entries["Ipv6Native"] = input.Ipv6Native;
    }
    return entries;
};
const serializeAws_ec2CreateTagsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Resources !== undefined && input.Resources !== null) {
        const memberEntries = serializeAws_ec2ResourceIdList(input.Resources, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        const memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateTrafficMirrorFilterRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateTrafficMirrorFilterRuleRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.TrafficDirection !== undefined && input.TrafficDirection !== null) {
        entries["TrafficDirection"] = input.TrafficDirection;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    if (input.RuleAction !== undefined && input.RuleAction !== null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.DestinationPortRange !== undefined && input.DestinationPortRange !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SourcePortRange !== undefined && input.SourcePortRange !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.SourceCidrBlock !== undefined && input.SourceCidrBlock !== null) {
        entries["SourceCidrBlock"] = input.SourceCidrBlock;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateTrafficMirrorSessionRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.TrafficMirrorTargetId !== undefined && input.TrafficMirrorTargetId !== null) {
        entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
    }
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.PacketLength !== undefined && input.PacketLength !== null) {
        entries["PacketLength"] = input.PacketLength;
    }
    if (input.SessionNumber !== undefined && input.SessionNumber !== null) {
        entries["SessionNumber"] = input.SessionNumber;
    }
    if (input.VirtualNetworkId !== undefined && input.VirtualNetworkId !== null) {
        entries["VirtualNetworkId"] = input.VirtualNetworkId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateTrafficMirrorTargetRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.NetworkLoadBalancerArn !== undefined && input.NetworkLoadBalancerArn !== null) {
        entries["NetworkLoadBalancerArn"] = input.NetworkLoadBalancerArn;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.GatewayLoadBalancerEndpointId !== undefined && input.GatewayLoadBalancerEndpointId !== null) {
        entries["GatewayLoadBalancerEndpointId"] = input.GatewayLoadBalancerEndpointId;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayConnectPeerRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.TransitGatewayAddress !== undefined && input.TransitGatewayAddress !== null) {
        entries["TransitGatewayAddress"] = input.TransitGatewayAddress;
    }
    if (input.PeerAddress !== undefined && input.PeerAddress !== null) {
        entries["PeerAddress"] = input.PeerAddress;
    }
    if (input.BgpOptions !== undefined && input.BgpOptions !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayConnectRequestBgpOptions(input.BgpOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BgpOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InsideCidrBlocks !== undefined && input.InsideCidrBlocks !== null) {
        const memberEntries = serializeAws_ec2InsideCidrBlocksStringList(input.InsideCidrBlocks, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InsideCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayConnectRequest = (input, context) => {
    const entries = {};
    if (input.TransportTransitGatewayAttachmentId !== undefined && input.TransportTransitGatewayAttachmentId !== null) {
        entries["TransportTransitGatewayAttachmentId"] = input.TransportTransitGatewayAttachmentId;
    }
    if (input.Options !== undefined && input.Options !== null) {
        const memberEntries = serializeAws_ec2CreateTransitGatewayConnectRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayConnectRequestOptions = (input, context) => {
    const entries = {};
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.Options !== undefined && input.Options !== null) {
        const memberEntries = serializeAws_ec2CreateTransitGatewayMulticastDomainRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayMulticastDomainRequestOptions = (input, context) => {
    const entries = {};
    if (input.Igmpv2Support !== undefined && input.Igmpv2Support !== null) {
        entries["Igmpv2Support"] = input.Igmpv2Support;
    }
    if (input.StaticSourcesSupport !== undefined && input.StaticSourcesSupport !== null) {
        entries["StaticSourcesSupport"] = input.StaticSourcesSupport;
    }
    if (input.AutoAcceptSharedAssociations !== undefined && input.AutoAcceptSharedAssociations !== null) {
        entries["AutoAcceptSharedAssociations"] = input.AutoAcceptSharedAssociations;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.PeerTransitGatewayId !== undefined && input.PeerTransitGatewayId !== null) {
        entries["PeerTransitGatewayId"] = input.PeerTransitGatewayId;
    }
    if (input.PeerAccountId !== undefined && input.PeerAccountId !== null) {
        entries["PeerAccountId"] = input.PeerAccountId;
    }
    if (input.PeerRegion !== undefined && input.PeerRegion !== null) {
        entries["PeerRegion"] = input.PeerRegion;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayPrefixListReferenceRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole !== undefined && input.Blackhole !== null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Options !== undefined && input.Options !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole !== undefined && input.Blackhole !== null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Options !== undefined && input.Options !== null) {
        const memberEntries = serializeAws_ec2CreateTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreateTransitGatewayVpcAttachmentRequestOptions = (input, context) => {
    const entries = {};
    if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.Ipv6Support !== undefined && input.Ipv6Support !== null) {
        entries["Ipv6Support"] = input.Ipv6Support;
    }
    if (input.ApplianceModeSupport !== undefined && input.ApplianceModeSupport !== null) {
        entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
    }
    return entries;
};
const serializeAws_ec2CreateVolumePermission = (input, context) => {
    const entries = {};
    if (input.Group !== undefined && input.Group !== null) {
        entries["Group"] = input.Group;
    }
    if (input.UserId !== undefined && input.UserId !== null) {
        entries["UserId"] = input.UserId;
    }
    return entries;
};
const serializeAws_ec2CreateVolumePermissionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2CreateVolumePermission(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2CreateVolumePermissionModifications = (input, context) => {
    const entries = {};
    if (input.Add !== undefined && input.Add !== null) {
        const memberEntries = serializeAws_ec2CreateVolumePermissionList(input.Add, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Remove !== undefined && input.Remove !== null) {
        const memberEntries = serializeAws_ec2CreateVolumePermissionList(input.Remove, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateVolumeRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.Size !== undefined && input.Size !== null) {
        entries["Size"] = input.Size;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MultiAttachEnabled !== undefined && input.MultiAttachEnabled !== null) {
        entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
    }
    if (input.Throughput !== undefined && input.Throughput !== null) {
        entries["Throughput"] = input.Throughput;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateVpcEndpointConnectionNotificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.ConnectionNotificationArn !== undefined && input.ConnectionNotificationArn !== null) {
        entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
    }
    if (input.ConnectionEvents !== undefined && input.ConnectionEvents !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.ConnectionEvents, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2CreateVpcEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointType !== undefined && input.VpcEndpointType !== null) {
        entries["VpcEndpointType"] = input.VpcEndpointType;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.ServiceName !== undefined && input.ServiceName !== null) {
        entries["ServiceName"] = input.ServiceName;
    }
    if (input.PolicyDocument !== undefined && input.PolicyDocument !== null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.RouteTableIds !== undefined && input.RouteTableIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointRouteTableIdList(input.RouteTableIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointSubnetIdList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointSecurityGroupIdList(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IpAddressType !== undefined && input.IpAddressType !== null) {
        entries["IpAddressType"] = input.IpAddressType;
    }
    if (input.DnsOptions !== undefined && input.DnsOptions !== null) {
        const memberEntries = serializeAws_ec2DnsOptionsSpecification(input.DnsOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.PrivateDnsEnabled !== undefined && input.PrivateDnsEnabled !== null) {
        entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateVpcEndpointServiceConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.AcceptanceRequired !== undefined && input.AcceptanceRequired !== null) {
        entries["AcceptanceRequired"] = input.AcceptanceRequired;
    }
    if (input.PrivateDnsName !== undefined && input.PrivateDnsName !== null) {
        entries["PrivateDnsName"] = input.PrivateDnsName;
    }
    if (input.NetworkLoadBalancerArns !== undefined && input.NetworkLoadBalancerArns !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.NetworkLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GatewayLoadBalancerArns !== undefined && input.GatewayLoadBalancerArns !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.GatewayLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SupportedIpAddressTypes !== undefined && input.SupportedIpAddressTypes !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.SupportedIpAddressTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PeerOwnerId !== undefined && input.PeerOwnerId !== null) {
        entries["PeerOwnerId"] = input.PeerOwnerId;
    }
    if (input.PeerVpcId !== undefined && input.PeerVpcId !== null) {
        entries["PeerVpcId"] = input.PeerVpcId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.PeerRegion !== undefined && input.PeerRegion !== null) {
        entries["PeerRegion"] = input.PeerRegion;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateVpcRequest = (input, context) => {
    const entries = {};
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.AmazonProvidedIpv6CidrBlock !== undefined && input.AmazonProvidedIpv6CidrBlock !== null) {
        entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
    }
    if (input.Ipv6Pool !== undefined && input.Ipv6Pool !== null) {
        entries["Ipv6Pool"] = input.Ipv6Pool;
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.Ipv4IpamPoolId !== undefined && input.Ipv4IpamPoolId !== null) {
        entries["Ipv4IpamPoolId"] = input.Ipv4IpamPoolId;
    }
    if (input.Ipv4NetmaskLength !== undefined && input.Ipv4NetmaskLength !== null) {
        entries["Ipv4NetmaskLength"] = input.Ipv4NetmaskLength;
    }
    if (input.Ipv6IpamPoolId !== undefined && input.Ipv6IpamPoolId !== null) {
        entries["Ipv6IpamPoolId"] = input.Ipv6IpamPoolId;
    }
    if (input.Ipv6NetmaskLength !== undefined && input.Ipv6NetmaskLength !== null) {
        entries["Ipv6NetmaskLength"] = input.Ipv6NetmaskLength;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTenancy !== undefined && input.InstanceTenancy !== null) {
        entries["InstanceTenancy"] = input.InstanceTenancy;
    }
    if (input.Ipv6CidrBlockNetworkBorderGroup !== undefined && input.Ipv6CidrBlockNetworkBorderGroup !== null) {
        entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateVpnConnectionRequest = (input, context) => {
    const entries = {};
    if (input.CustomerGatewayId !== undefined && input.CustomerGatewayId !== null) {
        entries["CustomerGatewayId"] = input.CustomerGatewayId;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Options !== undefined && input.Options !== null) {
        const memberEntries = serializeAws_ec2VpnConnectionOptionsSpecification(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2CreateVpnConnectionRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    return entries;
};
const serializeAws_ec2CreateVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AmazonSideAsn !== undefined && input.AmazonSideAsn !== null) {
        entries["AmazonSideAsn"] = input.AmazonSideAsn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2CreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.CpuCredits !== undefined && input.CpuCredits !== null) {
        entries["CpuCredits"] = input.CpuCredits;
    }
    return entries;
};
const serializeAws_ec2CustomerGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`CustomerGatewayId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2DedicatedHostIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2DeleteCarrierGatewayRequest = (input, context) => {
    const entries = {};
    if (input.CarrierGatewayId !== undefined && input.CarrierGatewayId !== null) {
        entries["CarrierGatewayId"] = input.CarrierGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteClientVpnEndpointRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteClientVpnRouteRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.TargetVpcSubnetId !== undefined && input.TargetVpcSubnetId !== null) {
        entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteCustomerGatewayRequest = (input, context) => {
    const entries = {};
    if (input.CustomerGatewayId !== undefined && input.CustomerGatewayId !== null) {
        entries["CustomerGatewayId"] = input.CustomerGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DhcpOptionsId !== undefined && input.DhcpOptionsId !== null) {
        entries["DhcpOptionsId"] = input.DhcpOptionsId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteEgressOnlyInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EgressOnlyInternetGatewayId !== undefined && input.EgressOnlyInternetGatewayId !== null) {
        entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
    }
    return entries;
};
const serializeAws_ec2DeleteFleetsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FleetIds !== undefined && input.FleetIds !== null) {
        const memberEntries = serializeAws_ec2FleetIdSet(input.FleetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TerminateInstances !== undefined && input.TerminateInstances !== null) {
        entries["TerminateInstances"] = input.TerminateInstances;
    }
    return entries;
};
const serializeAws_ec2DeleteFlowLogsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FlowLogIds !== undefined && input.FlowLogIds !== null) {
        const memberEntries = serializeAws_ec2FlowLogIdList(input.FlowLogIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DeleteFpgaImageRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    return entries;
};
const serializeAws_ec2DeleteInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ForceDelete !== undefined && input.ForceDelete !== null) {
        entries["ForceDelete"] = input.ForceDelete;
    }
    if (input.InstanceEventWindowId !== undefined && input.InstanceEventWindowId !== null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    return entries;
};
const serializeAws_ec2DeleteInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayId !== undefined && input.InternetGatewayId !== null) {
        entries["InternetGatewayId"] = input.InternetGatewayId;
    }
    return entries;
};
const serializeAws_ec2DeleteIpamPoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    return entries;
};
const serializeAws_ec2DeleteIpamRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId !== undefined && input.IpamId !== null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.Cascade !== undefined && input.Cascade !== null) {
        entries["Cascade"] = input.Cascade;
    }
    return entries;
};
const serializeAws_ec2DeleteIpamScopeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    return entries;
};
const serializeAws_ec2DeleteKeyPairRequest = (input, context) => {
    const entries = {};
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.KeyPairId !== undefined && input.KeyPairId !== null) {
        entries["KeyPairId"] = input.KeyPairId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteLaunchTemplateRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    return entries;
};
const serializeAws_ec2DeleteLaunchTemplateVersionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Versions !== undefined && input.Versions !== null) {
        const memberEntries = serializeAws_ec2VersionStringList(input.Versions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DeleteLocalGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableVpcAssociationId !== undefined &&
        input.LocalGatewayRouteTableVpcAssociationId !== null) {
        entries["LocalGatewayRouteTableVpcAssociationId"] = input.LocalGatewayRouteTableVpcAssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteManagedPrefixListRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    return entries;
};
const serializeAws_ec2DeleteNatGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NatGatewayId !== undefined && input.NatGatewayId !== null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    return entries;
};
const serializeAws_ec2DeleteNetworkAclEntryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Egress !== undefined && input.Egress !== null) {
        entries["Egress"] = input.Egress;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    return entries;
};
const serializeAws_ec2DeleteNetworkAclRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    return entries;
};
const serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeAnalysisId !== undefined && input.NetworkInsightsAccessScopeAnalysisId !== null) {
        entries["NetworkInsightsAccessScopeAnalysisId"] = input.NetworkInsightsAccessScopeAnalysisId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteNetworkInsightsAccessScopeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInsightsAccessScopeId !== undefined && input.NetworkInsightsAccessScopeId !== null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    return entries;
};
const serializeAws_ec2DeleteNetworkInsightsAnalysisRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInsightsAnalysisId !== undefined && input.NetworkInsightsAnalysisId !== null) {
        entries["NetworkInsightsAnalysisId"] = input.NetworkInsightsAnalysisId;
    }
    return entries;
};
const serializeAws_ec2DeleteNetworkInsightsPathRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInsightsPathId !== undefined && input.NetworkInsightsPathId !== null) {
        entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
    }
    return entries;
};
const serializeAws_ec2DeleteNetworkInterfacePermissionRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfacePermissionId !== undefined && input.NetworkInterfacePermissionId !== null) {
        entries["NetworkInterfacePermissionId"] = input.NetworkInterfacePermissionId;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
const serializeAws_ec2DeletePlacementGroupRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    return entries;
};
const serializeAws_ec2DeletePublicIpv4PoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    return entries;
};
const serializeAws_ec2DeleteQueuedReservedInstancesIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2DeleteQueuedReservedInstancesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReservedInstancesIds !== undefined && input.ReservedInstancesIds !== null) {
        const memberEntries = serializeAws_ec2DeleteQueuedReservedInstancesIdList(input.ReservedInstancesIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DeleteRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DestinationIpv6CidrBlock !== undefined && input.DestinationIpv6CidrBlock !== null) {
        entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
    }
    if (input.DestinationPrefixListId !== undefined && input.DestinationPrefixListId !== null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    return entries;
};
const serializeAws_ec2DeleteRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    return entries;
};
const serializeAws_ec2DeleteSecurityGroupRequest = (input, context) => {
    const entries = {};
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteSnapshotRequest = (input, context) => {
    const entries = {};
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteSpotDatafeedSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteSubnetCidrReservationRequest = (input, context) => {
    const entries = {};
    if (input.SubnetCidrReservationId !== undefined && input.SubnetCidrReservationId !== null) {
        entries["SubnetCidrReservationId"] = input.SubnetCidrReservationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteSubnetRequest = (input, context) => {
    const entries = {};
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTagsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Resources !== undefined && input.Resources !== null) {
        const memberEntries = serializeAws_ec2ResourceIdList(input.Resources, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        const memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DeleteTrafficMirrorFilterRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTrafficMirrorFilterRuleRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterRuleId !== undefined && input.TrafficMirrorFilterRuleId !== null) {
        entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTrafficMirrorSessionRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorSessionId !== undefined && input.TrafficMirrorSessionId !== null) {
        entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTrafficMirrorTargetRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorTargetId !== undefined && input.TrafficMirrorTargetId !== null) {
        entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTransitGatewayConnectPeerRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayConnectPeerId !== undefined && input.TransitGatewayConnectPeerId !== null) {
        entries["TransitGatewayConnectPeerId"] = input.TransitGatewayConnectPeerId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTransitGatewayConnectRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTransitGatewayPrefixListReferenceRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTransitGatewayRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTransitGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteVolumeRequest = (input, context) => {
    const entries = {};
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteVpcEndpointConnectionNotificationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ConnectionNotificationIds !== undefined && input.ConnectionNotificationIds !== null) {
        const memberEntries = serializeAws_ec2ConnectionNotificationIdsList(input.ConnectionNotificationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionNotificationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DeleteVpcEndpointServiceConfigurationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceIds !== undefined && input.ServiceIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointServiceIdList(input.ServiceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DeleteVpcEndpointsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DeleteVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const serializeAws_ec2DeleteVpcRequest = (input, context) => {
    const entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteVpnConnectionRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeleteVpnConnectionRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    return entries;
};
const serializeAws_ec2DeleteVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeprovisionByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeprovisionIpamPoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
const serializeAws_ec2DeprovisionPublicIpv4PoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
const serializeAws_ec2DeregisterImageRequest = (input, context) => {
    const entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeregisterInstanceEventNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTagAttribute !== undefined && input.InstanceTagAttribute !== null) {
        const memberEntries = serializeAws_ec2DeregisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagAttribute.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DeregisterInstanceTagAttributeRequest = (input, context) => {
    const entries = {};
    if (input.IncludeAllTagsOfInstance !== undefined && input.IncludeAllTagsOfInstance !== null) {
        entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
    }
    if (input.InstanceTagKeys !== undefined && input.InstanceTagKeys !== null) {
        const memberEntries = serializeAws_ec2InstanceTagKeySet(input.InstanceTagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeAccountAttributesRequest = (input, context) => {
    const entries = {};
    if (input.AttributeNames !== undefined && input.AttributeNames !== null) {
        const memberEntries = serializeAws_ec2AccountAttributeNameStringList(input.AttributeNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeAddressesAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AllocationIds !== undefined && input.AllocationIds !== null) {
        const memberEntries = serializeAws_ec2AllocationIds(input.AllocationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeAddressesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PublicIps !== undefined && input.PublicIps !== null) {
        const memberEntries = serializeAws_ec2PublicIpStringList(input.PublicIps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AllocationIds !== undefined && input.AllocationIds !== null) {
        const memberEntries = serializeAws_ec2AllocationIdList(input.AllocationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeAggregateIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeAvailabilityZonesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ZoneNames !== undefined && input.ZoneNames !== null) {
        const memberEntries = serializeAws_ec2ZoneNameStringList(input.ZoneNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ZoneName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ZoneIds !== undefined && input.ZoneIds !== null) {
        const memberEntries = serializeAws_ec2ZoneIdStringList(input.ZoneIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ZoneId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AllAvailabilityZones !== undefined && input.AllAvailabilityZones !== null) {
        entries["AllAvailabilityZones"] = input.AllAvailabilityZones;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeBundleTasksRequest = (input, context) => {
    const entries = {};
    if (input.BundleIds !== undefined && input.BundleIds !== null) {
        const memberEntries = serializeAws_ec2BundleIdStringList(input.BundleIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BundleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeByoipCidrsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeCapacityReservationFleetsRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationFleetIds !== undefined && input.CapacityReservationFleetIds !== null) {
        const memberEntries = serializeAws_ec2CapacityReservationFleetIdSet(input.CapacityReservationFleetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeCapacityReservationsRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationIds !== undefined && input.CapacityReservationIds !== null) {
        const memberEntries = serializeAws_ec2CapacityReservationIdSet(input.CapacityReservationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeCarrierGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.CarrierGatewayIds !== undefined && input.CarrierGatewayIds !== null) {
        const memberEntries = serializeAws_ec2CarrierGatewayIdSet(input.CarrierGatewayIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CarrierGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeClassicLinkInstancesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeClientVpnAuthorizationRulesRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeClientVpnConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeClientVpnEndpointsRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointIds !== undefined && input.ClientVpnEndpointIds !== null) {
        const memberEntries = serializeAws_ec2ClientVpnEndpointIdList(input.ClientVpnEndpointIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientVpnEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeClientVpnRoutesRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeClientVpnTargetNetworksRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.AssociationIds !== undefined && input.AssociationIds !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.AssociationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeCoipPoolsRequest = (input, context) => {
    const entries = {};
    if (input.PoolIds !== undefined && input.PoolIds !== null) {
        const memberEntries = serializeAws_ec2CoipPoolIdSet(input.PoolIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeConversionTasksRequest = (input, context) => {
    const entries = {};
    if (input.ConversionTaskIds !== undefined && input.ConversionTaskIds !== null) {
        const memberEntries = serializeAws_ec2ConversionIdStringList(input.ConversionTaskIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConversionTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeCustomerGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.CustomerGatewayIds !== undefined && input.CustomerGatewayIds !== null) {
        const memberEntries = serializeAws_ec2CustomerGatewayIdStringList(input.CustomerGatewayIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomerGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DhcpOptionsIds !== undefined && input.DhcpOptionsIds !== null) {
        const memberEntries = serializeAws_ec2DhcpOptionsIdStringList(input.DhcpOptionsIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DhcpOptionsId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeEgressOnlyInternetGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EgressOnlyInternetGatewayIds !== undefined && input.EgressOnlyInternetGatewayIds !== null) {
        const memberEntries = serializeAws_ec2EgressOnlyInternetGatewayIdList(input.EgressOnlyInternetGatewayIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EgressOnlyInternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeElasticGpusRequest = (input, context) => {
    const entries = {};
    if (input.ElasticGpuIds !== undefined && input.ElasticGpuIds !== null) {
        const memberEntries = serializeAws_ec2ElasticGpuIdSet(input.ElasticGpuIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticGpuId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeExportImageTasksRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ExportImageTaskIds !== undefined && input.ExportImageTaskIds !== null) {
        const memberEntries = serializeAws_ec2ExportImageTaskIdList(input.ExportImageTaskIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportImageTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeExportTasksRequest = (input, context) => {
    const entries = {};
    if (input.ExportTaskIds !== undefined && input.ExportTaskIds !== null) {
        const memberEntries = serializeAws_ec2ExportTaskIdStringList(input.ExportTaskIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeFastLaunchImagesRequest = (input, context) => {
    const entries = {};
    if (input.ImageIds !== undefined && input.ImageIds !== null) {
        const memberEntries = serializeAws_ec2FastLaunchImageIdList(input.ImageIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeFastSnapshotRestoresRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeFleetHistoryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EventType !== undefined && input.EventType !== null) {
        entries["EventType"] = input.EventType;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.FleetId !== undefined && input.FleetId !== null) {
        entries["FleetId"] = input.FleetId;
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_ec2DescribeFleetInstancesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.FleetId !== undefined && input.FleetId !== null) {
        entries["FleetId"] = input.FleetId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeFleetsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.FleetIds !== undefined && input.FleetIds !== null) {
        const memberEntries = serializeAws_ec2FleetIdSet(input.FleetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeFlowLogsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.FlowLogIds !== undefined && input.FlowLogIds !== null) {
        const memberEntries = serializeAws_ec2FlowLogIdList(input.FlowLogIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeFpgaImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    return entries;
};
const serializeAws_ec2DescribeFpgaImagesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageIds !== undefined && input.FpgaImageIds !== null) {
        const memberEntries = serializeAws_ec2FpgaImageIdList(input.FpgaImageIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FpgaImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Owners !== undefined && input.Owners !== null) {
        const memberEntries = serializeAws_ec2OwnerStringList(input.Owners, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeHostReservationOfferingsRequest = (input, context) => {
    const entries = {};
    if (input.Filter !== undefined && input.Filter !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxDuration !== undefined && input.MaxDuration !== null) {
        entries["MaxDuration"] = input.MaxDuration;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.MinDuration !== undefined && input.MinDuration !== null) {
        entries["MinDuration"] = input.MinDuration;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.OfferingId !== undefined && input.OfferingId !== null) {
        entries["OfferingId"] = input.OfferingId;
    }
    return entries;
};
const serializeAws_ec2DescribeHostReservationsRequest = (input, context) => {
    const entries = {};
    if (input.Filter !== undefined && input.Filter !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HostReservationIdSet !== undefined && input.HostReservationIdSet !== null) {
        const memberEntries = serializeAws_ec2HostReservationIdSet(input.HostReservationIdSet, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostReservationIdSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeHostsRequest = (input, context) => {
    const entries = {};
    if (input.Filter !== undefined && input.Filter !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HostIds !== undefined && input.HostIds !== null) {
        const memberEntries = serializeAws_ec2RequestHostIdList(input.HostIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeIamInstanceProfileAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.AssociationIds !== undefined && input.AssociationIds !== null) {
        const memberEntries = serializeAws_ec2AssociationIdList(input.AssociationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeIdentityIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.PrincipalArn !== undefined && input.PrincipalArn !== null) {
        entries["PrincipalArn"] = input.PrincipalArn;
    }
    if (input.Resource !== undefined && input.Resource !== null) {
        entries["Resource"] = input.Resource;
    }
    return entries;
};
const serializeAws_ec2DescribeIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.Resource !== undefined && input.Resource !== null) {
        entries["Resource"] = input.Resource;
    }
    return entries;
};
const serializeAws_ec2DescribeImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeImagesRequest = (input, context) => {
    const entries = {};
    if (input.ExecutableUsers !== undefined && input.ExecutableUsers !== null) {
        const memberEntries = serializeAws_ec2ExecutableByStringList(input.ExecutableUsers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExecutableBy.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImageIds !== undefined && input.ImageIds !== null) {
        const memberEntries = serializeAws_ec2ImageIdStringList(input.ImageIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Owners !== undefined && input.Owners !== null) {
        const memberEntries = serializeAws_ec2OwnerStringList(input.Owners, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IncludeDeprecated !== undefined && input.IncludeDeprecated !== null) {
        entries["IncludeDeprecated"] = input.IncludeDeprecated;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeImportImageTasksRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImportTaskIds !== undefined && input.ImportTaskIds !== null) {
        const memberEntries = serializeAws_ec2ImportTaskIdList(input.ImportTaskIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeImportSnapshotTasksRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImportTaskIds !== undefined && input.ImportTaskIds !== null) {
        const memberEntries = serializeAws_ec2ImportSnapshotTaskIdList(input.ImportTaskIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeInstanceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const serializeAws_ec2DescribeInstanceCreditSpecificationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeInstanceEventNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeInstanceEventWindowsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceEventWindowIds !== undefined && input.InstanceEventWindowIds !== null) {
        const memberEntries = serializeAws_ec2InstanceEventWindowIdSet(input.InstanceEventWindowIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceEventWindowId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeInstancesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeInstanceStatusRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IncludeAllInstances !== undefined && input.IncludeAllInstances !== null) {
        entries["IncludeAllInstances"] = input.IncludeAllInstances;
    }
    return entries;
};
const serializeAws_ec2DescribeInstanceTypeOfferingsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LocationType !== undefined && input.LocationType !== null) {
        entries["LocationType"] = input.LocationType;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeInstanceTypesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTypes !== undefined && input.InstanceTypes !== null) {
        const memberEntries = serializeAws_ec2RequestInstanceTypeList(input.InstanceTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeInternetGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayIds !== undefined && input.InternetGatewayIds !== null) {
        const memberEntries = serializeAws_ec2InternetGatewayIdList(input.InternetGatewayIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeIpamPoolsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamPoolIds !== undefined && input.IpamPoolIds !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.IpamPoolIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamPoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeIpamScopesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamScopeIds !== undefined && input.IpamScopeIds !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.IpamScopeIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamScopeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeIpamsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamIds !== undefined && input.IpamIds !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.IpamIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeIpv6PoolsRequest = (input, context) => {
    const entries = {};
    if (input.PoolIds !== undefined && input.PoolIds !== null) {
        const memberEntries = serializeAws_ec2Ipv6PoolIdList(input.PoolIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeKeyPairsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.KeyNames !== undefined && input.KeyNames !== null) {
        const memberEntries = serializeAws_ec2KeyNameStringList(input.KeyNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KeyName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.KeyPairIds !== undefined && input.KeyPairIds !== null) {
        const memberEntries = serializeAws_ec2KeyPairIdStringList(input.KeyPairIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KeyPairId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IncludePublicKey !== undefined && input.IncludePublicKey !== null) {
        entries["IncludePublicKey"] = input.IncludePublicKey;
    }
    return entries;
};
const serializeAws_ec2DescribeLaunchTemplatesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateIds !== undefined && input.LaunchTemplateIds !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateIdStringList(input.LaunchTemplateIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplateNames !== undefined && input.LaunchTemplateNames !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateNameStringList(input.LaunchTemplateNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeLaunchTemplateVersionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Versions !== undefined && input.Versions !== null) {
        const memberEntries = serializeAws_ec2VersionStringList(input.Versions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MinVersion !== undefined && input.MinVersion !== null) {
        entries["MinVersion"] = input.MinVersion;
    }
    if (input.MaxVersion !== undefined && input.MaxVersion !== null) {
        entries["MaxVersion"] = input.MaxVersion;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeLocalGatewayRouteTablesRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableIds !== undefined && input.LocalGatewayRouteTableIds !== null) {
        const memberEntries = serializeAws_ec2LocalGatewayRouteTableIdSet(input.LocalGatewayRouteTableIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds !== undefined &&
        input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds !== null) {
        const memberEntries = serializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet(input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableVpcAssociationIds !== undefined &&
        input.LocalGatewayRouteTableVpcAssociationIds !== null) {
        const memberEntries = serializeAws_ec2LocalGatewayRouteTableVpcAssociationIdSet(input.LocalGatewayRouteTableVpcAssociationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayRouteTableVpcAssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeLocalGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayIds !== undefined && input.LocalGatewayIds !== null) {
        const memberEntries = serializeAws_ec2LocalGatewayIdSet(input.LocalGatewayIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayVirtualInterfaceGroupIds !== undefined && input.LocalGatewayVirtualInterfaceGroupIds !== null) {
        const memberEntries = serializeAws_ec2LocalGatewayVirtualInterfaceGroupIdSet(input.LocalGatewayVirtualInterfaceGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayVirtualInterfaceGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeLocalGatewayVirtualInterfacesRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayVirtualInterfaceIds !== undefined && input.LocalGatewayVirtualInterfaceIds !== null) {
        const memberEntries = serializeAws_ec2LocalGatewayVirtualInterfaceIdSet(input.LocalGatewayVirtualInterfaceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayVirtualInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeManagedPrefixListsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.PrefixListIds !== undefined && input.PrefixListIds !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.PrefixListIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeMovingAddressesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.PublicIps !== undefined && input.PublicIps !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.PublicIps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeNatGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NatGatewayIds !== undefined && input.NatGatewayIds !== null) {
        const memberEntries = serializeAws_ec2NatGatewayIdStringList(input.NatGatewayIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NatGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeNetworkAclsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkAclIds !== undefined && input.NetworkAclIds !== null) {
        const memberEntries = serializeAws_ec2NetworkAclIdStringList(input.NetworkAclIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkAclId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeAnalysisIds !== undefined &&
        input.NetworkInsightsAccessScopeAnalysisIds !== null) {
        const memberEntries = serializeAws_ec2NetworkInsightsAccessScopeAnalysisIdList(input.NetworkInsightsAccessScopeAnalysisIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsAccessScopeAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInsightsAccessScopeId !== undefined && input.NetworkInsightsAccessScopeId !== null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    if (input.AnalysisStartTimeBegin !== undefined && input.AnalysisStartTimeBegin !== null) {
        entries["AnalysisStartTimeBegin"] = input.AnalysisStartTimeBegin.toISOString().split(".")[0] + "Z";
    }
    if (input.AnalysisStartTimeEnd !== undefined && input.AnalysisStartTimeEnd !== null) {
        entries["AnalysisStartTimeEnd"] = input.AnalysisStartTimeEnd.toISOString().split(".")[0] + "Z";
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeNetworkInsightsAccessScopesRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeIds !== undefined && input.NetworkInsightsAccessScopeIds !== null) {
        const memberEntries = serializeAws_ec2NetworkInsightsAccessScopeIdList(input.NetworkInsightsAccessScopeIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsAccessScopeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeNetworkInsightsAnalysesRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAnalysisIds !== undefined && input.NetworkInsightsAnalysisIds !== null) {
        const memberEntries = serializeAws_ec2NetworkInsightsAnalysisIdList(input.NetworkInsightsAnalysisIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInsightsPathId !== undefined && input.NetworkInsightsPathId !== null) {
        entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
    }
    if (input.AnalysisStartTime !== undefined && input.AnalysisStartTime !== null) {
        entries["AnalysisStartTime"] = input.AnalysisStartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.AnalysisEndTime !== undefined && input.AnalysisEndTime !== null) {
        entries["AnalysisEndTime"] = input.AnalysisEndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeNetworkInsightsPathsRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsPathIds !== undefined && input.NetworkInsightsPathIds !== null) {
        const memberEntries = serializeAws_ec2NetworkInsightsPathIdList(input.NetworkInsightsPathIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsPathId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeNetworkInterfaceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
const serializeAws_ec2DescribeNetworkInterfacePermissionsRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfacePermissionIds !== undefined && input.NetworkInterfacePermissionIds !== null) {
        const memberEntries = serializeAws_ec2NetworkInterfacePermissionIdList(input.NetworkInterfacePermissionIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfacePermissionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeNetworkInterfacesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        const memberEntries = serializeAws_ec2NetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribePlacementGroupsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupNames !== undefined && input.GroupNames !== null) {
        const memberEntries = serializeAws_ec2PlacementGroupStringList(input.GroupNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GroupIds !== undefined && input.GroupIds !== null) {
        const memberEntries = serializeAws_ec2PlacementGroupIdStringList(input.GroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribePrefixListsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.PrefixListIds !== undefined && input.PrefixListIds !== null) {
        const memberEntries = serializeAws_ec2PrefixListResourceIdStringList(input.PrefixListIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribePrincipalIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Resources !== undefined && input.Resources !== null) {
        const memberEntries = serializeAws_ec2ResourceList(input.Resources, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribePublicIpv4PoolsRequest = (input, context) => {
    const entries = {};
    if (input.PoolIds !== undefined && input.PoolIds !== null) {
        const memberEntries = serializeAws_ec2PublicIpv4PoolIdStringList(input.PoolIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeRegionsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RegionNames !== undefined && input.RegionNames !== null) {
        const memberEntries = serializeAws_ec2RegionNameStringList(input.RegionNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.AllRegions !== undefined && input.AllRegions !== null) {
        entries["AllRegions"] = input.AllRegions;
    }
    return entries;
};
const serializeAws_ec2DescribeReplaceRootVolumeTasksRequest = (input, context) => {
    const entries = {};
    if (input.ReplaceRootVolumeTaskIds !== undefined && input.ReplaceRootVolumeTaskIds !== null) {
        const memberEntries = serializeAws_ec2ReplaceRootVolumeTaskIds(input.ReplaceRootVolumeTaskIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReplaceRootVolumeTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeReservedInstancesListingsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ReservedInstancesId !== undefined && input.ReservedInstancesId !== null) {
        entries["ReservedInstancesId"] = input.ReservedInstancesId;
    }
    if (input.ReservedInstancesListingId !== undefined && input.ReservedInstancesListingId !== null) {
        entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
    }
    return entries;
};
const serializeAws_ec2DescribeReservedInstancesModificationsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ReservedInstancesModificationIds !== undefined && input.ReservedInstancesModificationIds !== null) {
        const memberEntries = serializeAws_ec2ReservedInstancesModificationIdStringList(input.ReservedInstancesModificationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesModificationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeReservedInstancesOfferingsRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IncludeMarketplace !== undefined && input.IncludeMarketplace !== null) {
        entries["IncludeMarketplace"] = input.IncludeMarketplace;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.MaxDuration !== undefined && input.MaxDuration !== null) {
        entries["MaxDuration"] = input.MaxDuration;
    }
    if (input.MaxInstanceCount !== undefined && input.MaxInstanceCount !== null) {
        entries["MaxInstanceCount"] = input.MaxInstanceCount;
    }
    if (input.MinDuration !== undefined && input.MinDuration !== null) {
        entries["MinDuration"] = input.MinDuration;
    }
    if (input.OfferingClass !== undefined && input.OfferingClass !== null) {
        entries["OfferingClass"] = input.OfferingClass;
    }
    if (input.ProductDescription !== undefined && input.ProductDescription !== null) {
        entries["ProductDescription"] = input.ProductDescription;
    }
    if (input.ReservedInstancesOfferingIds !== undefined && input.ReservedInstancesOfferingIds !== null) {
        const memberEntries = serializeAws_ec2ReservedInstancesOfferingIdStringList(input.ReservedInstancesOfferingIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesOfferingId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTenancy !== undefined && input.InstanceTenancy !== null) {
        entries["InstanceTenancy"] = input.InstanceTenancy;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.OfferingType !== undefined && input.OfferingType !== null) {
        entries["OfferingType"] = input.OfferingType;
    }
    return entries;
};
const serializeAws_ec2DescribeReservedInstancesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OfferingClass !== undefined && input.OfferingClass !== null) {
        entries["OfferingClass"] = input.OfferingClass;
    }
    if (input.ReservedInstancesIds !== undefined && input.ReservedInstancesIds !== null) {
        const memberEntries = serializeAws_ec2ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.OfferingType !== undefined && input.OfferingType !== null) {
        entries["OfferingType"] = input.OfferingType;
    }
    return entries;
};
const serializeAws_ec2DescribeRouteTablesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableIds !== undefined && input.RouteTableIds !== null) {
        const memberEntries = serializeAws_ec2RouteTableIdStringList(input.RouteTableIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeScheduledInstanceAvailabilityRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.FirstSlotStartTimeRange !== undefined && input.FirstSlotStartTimeRange !== null) {
        const memberEntries = serializeAws_ec2SlotDateTimeRangeRequest(input.FirstSlotStartTimeRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FirstSlotStartTimeRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.MaxSlotDurationInHours !== undefined && input.MaxSlotDurationInHours !== null) {
        entries["MaxSlotDurationInHours"] = input.MaxSlotDurationInHours;
    }
    if (input.MinSlotDurationInHours !== undefined && input.MinSlotDurationInHours !== null) {
        entries["MinSlotDurationInHours"] = input.MinSlotDurationInHours;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.Recurrence !== undefined && input.Recurrence !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstanceRecurrenceRequest(input.Recurrence, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Recurrence.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeScheduledInstancesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.ScheduledInstanceIds !== undefined && input.ScheduledInstanceIds !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstanceIdRequestSet(input.ScheduledInstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScheduledInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SlotStartTimeRange !== undefined && input.SlotStartTimeRange !== null) {
        const memberEntries = serializeAws_ec2SlotStartTimeRangeRequest(input.SlotStartTimeRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SlotStartTimeRange.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeSecurityGroupReferencesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        const memberEntries = serializeAws_ec2GroupIds(input.GroupId, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeSecurityGroupRulesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleIds !== undefined && input.SecurityGroupRuleIds !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeSecurityGroupsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GroupIds !== undefined && input.GroupIds !== null) {
        const memberEntries = serializeAws_ec2GroupIdStringList(input.GroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GroupNames !== undefined && input.GroupNames !== null) {
        const memberEntries = serializeAws_ec2GroupNameStringList(input.GroupNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeSnapshotAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeSnapshotsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.OwnerIds !== undefined && input.OwnerIds !== null) {
        const memberEntries = serializeAws_ec2OwnerStringList(input.OwnerIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RestorableByUserIds !== undefined && input.RestorableByUserIds !== null) {
        const memberEntries = serializeAws_ec2RestorableByStringList(input.RestorableByUserIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RestorableBy.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SnapshotIds !== undefined && input.SnapshotIds !== null) {
        const memberEntries = serializeAws_ec2SnapshotIdStringList(input.SnapshotIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeSnapshotTierStatusRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeSpotDatafeedSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeSpotFleetInstancesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SpotFleetRequestId !== undefined && input.SpotFleetRequestId !== null) {
        entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
    }
    return entries;
};
const serializeAws_ec2DescribeSpotFleetRequestHistoryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EventType !== undefined && input.EventType !== null) {
        entries["EventType"] = input.EventType;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SpotFleetRequestId !== undefined && input.SpotFleetRequestId !== null) {
        entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_ec2DescribeSpotFleetRequestsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SpotFleetRequestIds !== undefined && input.SpotFleetRequestIds !== null) {
        const memberEntries = serializeAws_ec2SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeSpotInstanceRequestsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotInstanceRequestIds !== undefined && input.SpotInstanceRequestIds !== null) {
        const memberEntries = serializeAws_ec2SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeSpotPriceHistoryRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EndTime !== undefined && input.EndTime !== null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceTypes !== undefined && input.InstanceTypes !== null) {
        const memberEntries = serializeAws_ec2InstanceTypeList(input.InstanceTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.ProductDescriptions !== undefined && input.ProductDescriptions !== null) {
        const memberEntries = serializeAws_ec2ProductDescriptionList(input.ProductDescriptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProductDescription.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_ec2DescribeStaleSecurityGroupsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2DescribeStoreImageTasksRequest = (input, context) => {
    const entries = {};
    if (input.ImageIds !== undefined && input.ImageIds !== null) {
        const memberEntries = serializeAws_ec2ImageIdList(input.ImageIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeSubnetsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        const memberEntries = serializeAws_ec2SubnetIdStringList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeTagsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeTrafficMirrorFiltersRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterIds !== undefined && input.TrafficMirrorFilterIds !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorFilterIdList(input.TrafficMirrorFilterIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorFilterId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeTrafficMirrorSessionsRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorSessionIds !== undefined && input.TrafficMirrorSessionIds !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorSessionIdList(input.TrafficMirrorSessionIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorSessionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeTrafficMirrorTargetsRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorTargetIds !== undefined && input.TrafficMirrorTargetIds !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorTargetIdList(input.TrafficMirrorTargetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorTargetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeTransitGatewayAttachmentsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeTransitGatewayConnectPeersRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayConnectPeerIds !== undefined && input.TransitGatewayConnectPeerIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayConnectPeerIdStringList(input.TransitGatewayConnectPeerIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayConnectPeerIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeTransitGatewayConnectsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeTransitGatewayMulticastDomainsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainIds !== undefined && input.TransitGatewayMulticastDomainIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayMulticastDomainIdStringList(input.TransitGatewayMulticastDomainIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayMulticastDomainIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeTransitGatewayRouteTablesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableIds !== undefined && input.TransitGatewayRouteTableIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayRouteTableIdStringList(input.TransitGatewayRouteTableIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayRouteTableIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeTransitGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayIds !== undefined && input.TransitGatewayIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayIdStringList(input.TransitGatewayIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeTransitGatewayVpcAttachmentsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeTrunkInterfaceAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.AssociationIds !== undefined && input.AssociationIds !== null) {
        const memberEntries = serializeAws_ec2TrunkInterfaceAssociationIdList(input.AssociationIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeVolumeAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeVolumesModificationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VolumeIds !== undefined && input.VolumeIds !== null) {
        const memberEntries = serializeAws_ec2VolumeIdStringList(input.VolumeIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeVolumesRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VolumeIds !== undefined && input.VolumeIds !== null) {
        const memberEntries = serializeAws_ec2VolumeIdStringList(input.VolumeIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeVolumeStatusRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.VolumeIds !== undefined && input.VolumeIds !== null) {
        const memberEntries = serializeAws_ec2VolumeIdStringList(input.VolumeIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeVpcAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeVpcClassicLinkDnsSupportRequest = (input, context) => {
    const entries = {};
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.VpcIds !== undefined && input.VpcIds !== null) {
        const memberEntries = serializeAws_ec2VpcClassicLinkIdList(input.VpcIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeVpcClassicLinkRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcIds !== undefined && input.VpcIds !== null) {
        const memberEntries = serializeAws_ec2VpcClassicLinkIdList(input.VpcIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DescribeVpcEndpointConnectionNotificationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ConnectionNotificationId !== undefined && input.ConnectionNotificationId !== null) {
        entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeVpcEndpointConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeVpcEndpointServiceConfigurationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceIds !== undefined && input.ServiceIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointServiceIdList(input.ServiceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeVpcEndpointServicePermissionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeVpcEndpointServicesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceNames !== undefined && input.ServiceNames !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.ServiceNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeVpcEndpointsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2DescribeVpcPeeringConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionIds !== undefined && input.VpcPeeringConnectionIds !== null) {
        const memberEntries = serializeAws_ec2VpcPeeringConnectionIdList(input.VpcPeeringConnectionIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcPeeringConnectionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeVpcsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpcIds !== undefined && input.VpcIds !== null) {
        const memberEntries = serializeAws_ec2VpcIdStringList(input.VpcIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2DescribeVpnConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpnConnectionIds !== undefined && input.VpnConnectionIds !== null) {
        const memberEntries = serializeAws_ec2VpnConnectionIdStringList(input.VpnConnectionIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpnConnectionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DescribeVpnGatewaysRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpnGatewayIds !== undefined && input.VpnGatewayIds !== null) {
        const memberEntries = serializeAws_ec2VpnGatewayIdStringList(input.VpnGatewayIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpnGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DestinationOptionsRequest = (input, context) => {
    const entries = {};
    if (input.FileFormat !== undefined && input.FileFormat !== null) {
        entries["FileFormat"] = input.FileFormat;
    }
    if (input.HiveCompatiblePartitions !== undefined && input.HiveCompatiblePartitions !== null) {
        entries["HiveCompatiblePartitions"] = input.HiveCompatiblePartitions;
    }
    if (input.PerHourPartition !== undefined && input.PerHourPartition !== null) {
        entries["PerHourPartition"] = input.PerHourPartition;
    }
    return entries;
};
const serializeAws_ec2DetachClassicLinkVpcRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2DetachInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InternetGatewayId !== undefined && input.InternetGatewayId !== null) {
        entries["InternetGatewayId"] = input.InternetGatewayId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2DetachNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.AttachmentId !== undefined && input.AttachmentId !== null) {
        entries["AttachmentId"] = input.AttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    return entries;
};
const serializeAws_ec2DetachVolumeRequest = (input, context) => {
    const entries = {};
    if (input.Device !== undefined && input.Device !== null) {
        entries["Device"] = input.Device;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DetachVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DhcpOptionsIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`DhcpOptionsId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2DirectoryServiceAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input.DirectoryId !== undefined && input.DirectoryId !== null) {
        entries["DirectoryId"] = input.DirectoryId;
    }
    return entries;
};
const serializeAws_ec2DisableEbsEncryptionByDefaultRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisableFastLaunchRequest = (input, context) => {
    const entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisableFastSnapshotRestoresRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones !== undefined && input.AvailabilityZones !== null) {
        const memberEntries = serializeAws_ec2AvailabilityZoneStringList(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SourceSnapshotIds !== undefined && input.SourceSnapshotIds !== null) {
        const memberEntries = serializeAws_ec2SnapshotIdStringList(input.SourceSnapshotIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisableImageDeprecationRequest = (input, context) => {
    const entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisableIpamOrganizationAdminAccountRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.DelegatedAdminAccountId !== undefined && input.DelegatedAdminAccountId !== null) {
        entries["DelegatedAdminAccountId"] = input.DelegatedAdminAccountId;
    }
    return entries;
};
const serializeAws_ec2DisableSerialConsoleAccessRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisableTransitGatewayRouteTablePropagationRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisableVgwRoutePropagationRequest = (input, context) => {
    const entries = {};
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisableVpcClassicLinkDnsSupportRequest = (input, context) => {
    const entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2DisableVpcClassicLinkRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2DisassociateAddressRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisassociateClientVpnTargetNetworkRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisassociateEnclaveCertificateIamRoleRequest = (input, context) => {
    const entries = {};
    if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.RoleArn !== undefined && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisassociateIamInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
const serializeAws_ec2DisassociateInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceEventWindowId !== undefined && input.InstanceEventWindowId !== null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    if (input.AssociationTarget !== undefined && input.AssociationTarget !== null) {
        const memberEntries = serializeAws_ec2InstanceEventWindowDisassociationRequest(input.AssociationTarget, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DisassociateRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisassociateSubnetCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
const serializeAws_ec2DisassociateTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisassociateTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisassociateTrunkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2DisassociateVpcCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
const serializeAws_ec2DiskImage = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Image !== undefined && input.Image !== null) {
        const memberEntries = serializeAws_ec2DiskImageDetail(input.Image, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Image.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Volume !== undefined && input.Volume !== null) {
        const memberEntries = serializeAws_ec2VolumeDetail(input.Volume, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Volume.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2DiskImageDetail = (input, context) => {
    const entries = {};
    if (input.Bytes !== undefined && input.Bytes !== null) {
        entries["Bytes"] = input.Bytes;
    }
    if (input.Format !== undefined && input.Format !== null) {
        entries["Format"] = input.Format;
    }
    if (input.ImportManifestUrl !== undefined && input.ImportManifestUrl !== null) {
        entries["ImportManifestUrl"] = input.ImportManifestUrl;
    }
    return entries;
};
const serializeAws_ec2DiskImageList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2DiskImage(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2DnsOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.DnsRecordIpType !== undefined && input.DnsRecordIpType !== null) {
        entries["DnsRecordIpType"] = input.DnsRecordIpType;
    }
    return entries;
};
const serializeAws_ec2DnsServersOptionsModifyStructure = (input, context) => {
    const entries = {};
    if (input.CustomDnsServers !== undefined && input.CustomDnsServers !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.CustomDnsServers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomDnsServers.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_ec2EbsBlockDevice = (input, context) => {
    const entries = {};
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize !== undefined && input.VolumeSize !== null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Throughput !== undefined && input.Throughput !== null) {
        entries["Throughput"] = input.Throughput;
    }
    if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
        entries["OutpostArn"] = input.OutpostArn;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    return entries;
};
const serializeAws_ec2EbsInstanceBlockDeviceSpecification = (input, context) => {
    const entries = {};
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    return entries;
};
const serializeAws_ec2EgressOnlyInternetGatewayIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ElasticGpuIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ElasticGpuSpecification = (input, context) => {
    const entries = {};
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    return entries;
};
const serializeAws_ec2ElasticGpuSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ElasticGpuSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`ElasticGpuSpecification.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ElasticGpuSpecifications = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ElasticGpuSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ElasticInferenceAccelerator = (input, context) => {
    const entries = {};
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.Count !== undefined && input.Count !== null) {
        entries["Count"] = input.Count;
    }
    return entries;
};
const serializeAws_ec2ElasticInferenceAccelerators = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ElasticInferenceAccelerator(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2EnableEbsEncryptionByDefaultRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2EnableFastLaunchRequest = (input, context) => {
    const entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.SnapshotConfiguration !== undefined && input.SnapshotConfiguration !== null) {
        const memberEntries = serializeAws_ec2FastLaunchSnapshotConfigurationRequest(input.SnapshotConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplate !== undefined && input.LaunchTemplate !== null) {
        const memberEntries = serializeAws_ec2FastLaunchLaunchTemplateSpecificationRequest(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxParallelLaunches !== undefined && input.MaxParallelLaunches !== null) {
        entries["MaxParallelLaunches"] = input.MaxParallelLaunches;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2EnableFastSnapshotRestoresRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones !== undefined && input.AvailabilityZones !== null) {
        const memberEntries = serializeAws_ec2AvailabilityZoneStringList(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SourceSnapshotIds !== undefined && input.SourceSnapshotIds !== null) {
        const memberEntries = serializeAws_ec2SnapshotIdStringList(input.SourceSnapshotIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2EnableImageDeprecationRequest = (input, context) => {
    const entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DeprecateAt !== undefined && input.DeprecateAt !== null) {
        entries["DeprecateAt"] = input.DeprecateAt.toISOString().split(".")[0] + "Z";
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2EnableIpamOrganizationAdminAccountRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.DelegatedAdminAccountId !== undefined && input.DelegatedAdminAccountId !== null) {
        entries["DelegatedAdminAccountId"] = input.DelegatedAdminAccountId;
    }
    return entries;
};
const serializeAws_ec2EnableSerialConsoleAccessRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2EnableTransitGatewayRouteTablePropagationRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2EnableVgwRoutePropagationRequest = (input, context) => {
    const entries = {};
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2EnableVolumeIORequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    return entries;
};
const serializeAws_ec2EnableVpcClassicLinkDnsSupportRequest = (input, context) => {
    const entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2EnableVpcClassicLinkRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2EnclaveOptionsRequest = (input, context) => {
    const entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_ec2ExcludedInstanceTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ExecutableByStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ExecutableBy.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ExportClientVpnClientCertificateRevocationListRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ExportClientVpnClientConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ExportImageRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskImageFormat !== undefined && input.DiskImageFormat !== null) {
        entries["DiskImageFormat"] = input.DiskImageFormat;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.S3ExportLocation !== undefined && input.S3ExportLocation !== null) {
        const memberEntries = serializeAws_ec2ExportTaskS3LocationRequest(input.S3ExportLocation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3ExportLocation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RoleName !== undefined && input.RoleName !== null) {
        entries["RoleName"] = input.RoleName;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ExportImageTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ExportImageTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ExportTaskIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ExportTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ExportTaskS3LocationRequest = (input, context) => {
    const entries = {};
    if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Prefix !== undefined && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    return entries;
};
const serializeAws_ec2ExportToS3TaskSpecification = (input, context) => {
    const entries = {};
    if (input.ContainerFormat !== undefined && input.ContainerFormat !== null) {
        entries["ContainerFormat"] = input.ContainerFormat;
    }
    if (input.DiskImageFormat !== undefined && input.DiskImageFormat !== null) {
        entries["DiskImageFormat"] = input.DiskImageFormat;
    }
    if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Prefix !== undefined && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    return entries;
};
const serializeAws_ec2ExportTransitGatewayRoutesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2FastLaunchImageIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImageId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2FastLaunchLaunchTemplateSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version !== undefined && input.Version !== null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const serializeAws_ec2FastLaunchSnapshotConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.TargetResourceCount !== undefined && input.TargetResourceCount !== null) {
        entries["TargetResourceCount"] = input.TargetResourceCount;
    }
    return entries;
};
const serializeAws_ec2FederatedAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input.SAMLProviderArn !== undefined && input.SAMLProviderArn !== null) {
        entries["SAMLProviderArn"] = input.SAMLProviderArn;
    }
    if (input.SelfServiceSAMLProviderArn !== undefined && input.SelfServiceSAMLProviderArn !== null) {
        entries["SelfServiceSAMLProviderArn"] = input.SelfServiceSAMLProviderArn;
    }
    return entries;
};
const serializeAws_ec2Filter = (input, context) => {
    const entries = {};
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.Values !== undefined && input.Values !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.Values, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2FilterList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Filter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Filter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2FleetIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2FleetLaunchTemplateConfigListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2FleetLaunchTemplateConfigRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2FleetLaunchTemplateConfigRequest = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateSpecification !== undefined && input.LaunchTemplateSpecification !== null) {
        const memberEntries = serializeAws_ec2FleetLaunchTemplateSpecificationRequest(input.LaunchTemplateSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Overrides !== undefined && input.Overrides !== null) {
        const memberEntries = serializeAws_ec2FleetLaunchTemplateOverridesListRequest(input.Overrides, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2FleetLaunchTemplateOverridesListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2FleetLaunchTemplateOverridesRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2FleetLaunchTemplateOverridesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.MaxPrice !== undefined && input.MaxPrice !== null) {
        entries["MaxPrice"] = input.MaxPrice;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.WeightedCapacity !== undefined && input.WeightedCapacity !== null) {
        entries["WeightedCapacity"] = (0, smithy_client_1.serializeFloat)(input.WeightedCapacity);
    }
    if (input.Priority !== undefined && input.Priority !== null) {
        entries["Priority"] = (0, smithy_client_1.serializeFloat)(input.Priority);
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        const memberEntries = serializeAws_ec2Placement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        const memberEntries = serializeAws_ec2InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2FleetLaunchTemplateSpecification = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version !== undefined && input.Version !== null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const serializeAws_ec2FleetLaunchTemplateSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version !== undefined && input.Version !== null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const serializeAws_ec2FleetSpotCapacityRebalanceRequest = (input, context) => {
    const entries = {};
    if (input.ReplacementStrategy !== undefined && input.ReplacementStrategy !== null) {
        entries["ReplacementStrategy"] = input.ReplacementStrategy;
    }
    if (input.TerminationDelay !== undefined && input.TerminationDelay !== null) {
        entries["TerminationDelay"] = input.TerminationDelay;
    }
    return entries;
};
const serializeAws_ec2FleetSpotMaintenanceStrategiesRequest = (input, context) => {
    const entries = {};
    if (input.CapacityRebalance !== undefined && input.CapacityRebalance !== null) {
        const memberEntries = serializeAws_ec2FleetSpotCapacityRebalanceRequest(input.CapacityRebalance, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityRebalance.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2FlowLogIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2FlowLogResourceIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2FpgaImageIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesRequest = (input, context) => {
    const entries = {};
    if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
        entries["CertificateArn"] = input.CertificateArn;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetAssociatedIpv6PoolCidrsRequest = (input, context) => {
    const entries = {};
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetCapacityReservationUsageRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetCoipPoolUsageRequest = (input, context) => {
    const entries = {};
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetConsoleOutputRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Latest !== undefined && input.Latest !== null) {
        entries["Latest"] = input.Latest;
    }
    return entries;
};
const serializeAws_ec2GetConsoleScreenshotRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.WakeUp !== undefined && input.WakeUp !== null) {
        entries["WakeUp"] = input.WakeUp;
    }
    return entries;
};
const serializeAws_ec2GetDefaultCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    return entries;
};
const serializeAws_ec2GetEbsDefaultKmsKeyIdRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetEbsEncryptionByDefaultRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetFlowLogsIntegrationTemplateRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FlowLogId !== undefined && input.FlowLogId !== null) {
        entries["FlowLogId"] = input.FlowLogId;
    }
    if (input.ConfigDeliveryS3DestinationArn !== undefined && input.ConfigDeliveryS3DestinationArn !== null) {
        entries["ConfigDeliveryS3DestinationArn"] = input.ConfigDeliveryS3DestinationArn;
    }
    if (input.IntegrateServices !== undefined && input.IntegrateServices !== null) {
        const memberEntries = serializeAws_ec2IntegrateServices(input.IntegrateServices, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IntegrateService.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2GetGroupsForCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetHostReservationPurchasePreviewRequest = (input, context) => {
    const entries = {};
    if (input.HostIdSet !== undefined && input.HostIdSet !== null) {
        const memberEntries = serializeAws_ec2RequestHostIdSet(input.HostIdSet, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OfferingId !== undefined && input.OfferingId !== null) {
        entries["OfferingId"] = input.OfferingId;
    }
    return entries;
};
const serializeAws_ec2GetInstanceTypesFromInstanceRequirementsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ArchitectureTypes !== undefined && input.ArchitectureTypes !== null) {
        const memberEntries = serializeAws_ec2ArchitectureTypeSet(input.ArchitectureTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VirtualizationTypes !== undefined && input.VirtualizationTypes !== null) {
        const memberEntries = serializeAws_ec2VirtualizationTypeSet(input.VirtualizationTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        const memberEntries = serializeAws_ec2InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2GetInstanceUefiDataRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetIpamAddressHistoryRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime !== undefined && input.EndTime !== null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2GetIpamPoolAllocationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.IpamPoolAllocationId !== undefined && input.IpamPoolAllocationId !== null) {
        entries["IpamPoolAllocationId"] = input.IpamPoolAllocationId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2GetIpamPoolCidrsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2GetIpamResourceCidrsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.ResourceId !== undefined && input.ResourceId !== null) {
        entries["ResourceId"] = input.ResourceId;
    }
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.ResourceTag !== undefined && input.ResourceTag !== null) {
        const memberEntries = serializeAws_ec2RequestIpamResourceTag(input.ResourceTag, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTag.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceOwner !== undefined && input.ResourceOwner !== null) {
        entries["ResourceOwner"] = input.ResourceOwner;
    }
    return entries;
};
const serializeAws_ec2GetLaunchTemplateDataRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const serializeAws_ec2GetManagedPrefixListAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2GetManagedPrefixListEntriesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.TargetVersion !== undefined && input.TargetVersion !== null) {
        entries["TargetVersion"] = input.TargetVersion;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeAnalysisId !== undefined && input.NetworkInsightsAccessScopeAnalysisId !== null) {
        entries["NetworkInsightsAccessScopeAnalysisId"] = input.NetworkInsightsAccessScopeAnalysisId;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetNetworkInsightsAccessScopeContentRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeId !== undefined && input.NetworkInsightsAccessScopeId !== null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetPasswordDataRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetReservedInstancesExchangeQuoteRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ReservedInstanceIds !== undefined && input.ReservedInstanceIds !== null) {
        const memberEntries = serializeAws_ec2ReservedInstanceIdSet(input.ReservedInstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TargetConfigurations !== undefined && input.TargetConfigurations !== null) {
        const memberEntries = serializeAws_ec2TargetConfigurationRequestSet(input.TargetConfigurations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2GetSerialConsoleAccessStatusRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetSpotPlacementScoresRequest = (input, context) => {
    const entries = {};
    if (input.InstanceTypes !== undefined && input.InstanceTypes !== null) {
        const memberEntries = serializeAws_ec2InstanceTypes(input.InstanceTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TargetCapacity !== undefined && input.TargetCapacity !== null) {
        entries["TargetCapacity"] = input.TargetCapacity;
    }
    if (input.TargetCapacityUnitType !== undefined && input.TargetCapacityUnitType !== null) {
        entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
    }
    if (input.SingleAvailabilityZone !== undefined && input.SingleAvailabilityZone !== null) {
        entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
    }
    if (input.RegionNames !== undefined && input.RegionNames !== null) {
        const memberEntries = serializeAws_ec2RegionNames(input.RegionNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirementsWithMetadata !== undefined && input.InstanceRequirementsWithMetadata !== null) {
        const memberEntries = serializeAws_ec2InstanceRequirementsWithMetadataRequest(input.InstanceRequirementsWithMetadata, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirementsWithMetadata.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_ec2GetSubnetCidrReservationsRequest = (input, context) => {
    const entries = {};
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_ec2GetTransitGatewayAttachmentPropagationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetTransitGatewayPrefixListReferencesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetTransitGatewayRouteTableAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetTransitGatewayRouteTablePropagationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnConnectionDeviceTypeId !== undefined && input.VpnConnectionDeviceTypeId !== null) {
        entries["VpnConnectionDeviceTypeId"] = input.VpnConnectionDeviceTypeId;
    }
    if (input.InternetKeyExchangeVersion !== undefined && input.InternetKeyExchangeVersion !== null) {
        entries["InternetKeyExchangeVersion"] = input.InternetKeyExchangeVersion;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GetVpnConnectionDeviceTypesRequest = (input, context) => {
    const entries = {};
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2GroupIdentifier = (input, context) => {
    const entries = {};
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    return entries;
};
const serializeAws_ec2GroupIdentifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2GroupIdentifier(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2GroupIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2GroupIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`GroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2GroupNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`GroupName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2HibernationOptionsRequest = (input, context) => {
    const entries = {};
    if (input.Configured !== undefined && input.Configured !== null) {
        entries["Configured"] = input.Configured;
    }
    return entries;
};
const serializeAws_ec2HostReservationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2IamInstanceProfileSpecification = (input, context) => {
    const entries = {};
    if (input.Arn !== undefined && input.Arn !== null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const serializeAws_ec2IcmpTypeCode = (input, context) => {
    const entries = {};
    if (input.Code !== undefined && input.Code !== null) {
        entries["Code"] = input.Code;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    return entries;
};
const serializeAws_ec2IKEVersionsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2IKEVersionsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2IKEVersionsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2ImageDiskContainer = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Format !== undefined && input.Format !== null) {
        entries["Format"] = input.Format;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.Url !== undefined && input.Url !== null) {
        entries["Url"] = input.Url;
    }
    if (input.UserBucket !== undefined && input.UserBucket !== null) {
        const memberEntries = serializeAws_ec2UserBucket(input.UserBucket, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserBucket.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ImageDiskContainerList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ImageDiskContainer(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ImageIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ImageIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImageId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ImportClientVpnClientCertificateRevocationListRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.CertificateRevocationList !== undefined && input.CertificateRevocationList !== null) {
        entries["CertificateRevocationList"] = input.CertificateRevocationList;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ImportImageLicenseConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.LicenseConfigurationArn !== undefined && input.LicenseConfigurationArn !== null) {
        entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
    }
    return entries;
};
const serializeAws_ec2ImportImageLicenseSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ImportImageLicenseConfigurationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ImportImageRequest = (input, context) => {
    const entries = {};
    if (input.Architecture !== undefined && input.Architecture !== null) {
        entries["Architecture"] = input.Architecture;
    }
    if (input.ClientData !== undefined && input.ClientData !== null) {
        const memberEntries = serializeAws_ec2ClientData(input.ClientData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientData.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskContainers !== undefined && input.DiskContainers !== null) {
        const memberEntries = serializeAws_ec2ImageDiskContainerList(input.DiskContainers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DiskContainer.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Hypervisor !== undefined && input.Hypervisor !== null) {
        entries["Hypervisor"] = input.Hypervisor;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.LicenseType !== undefined && input.LicenseType !== null) {
        entries["LicenseType"] = input.LicenseType;
    }
    if (input.Platform !== undefined && input.Platform !== null) {
        entries["Platform"] = input.Platform;
    }
    if (input.RoleName !== undefined && input.RoleName !== null) {
        entries["RoleName"] = input.RoleName;
    }
    if (input.LicenseSpecifications !== undefined && input.LicenseSpecifications !== null) {
        const memberEntries = serializeAws_ec2ImportImageLicenseSpecificationListRequest(input.LicenseSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LicenseSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.UsageOperation !== undefined && input.UsageOperation !== null) {
        entries["UsageOperation"] = input.UsageOperation;
    }
    if (input.BootMode !== undefined && input.BootMode !== null) {
        entries["BootMode"] = input.BootMode;
    }
    return entries;
};
const serializeAws_ec2ImportInstanceLaunchSpecification = (input, context) => {
    const entries = {};
    if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.Architecture !== undefined && input.Architecture !== null) {
        entries["Architecture"] = input.Architecture;
    }
    if (input.GroupIds !== undefined && input.GroupIds !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.GroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.GroupNames !== undefined && input.GroupNames !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupStringList(input.GroupNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
        entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        entries["Monitoring"] = input.Monitoring;
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        const memberEntries = serializeAws_ec2Placement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        const memberEntries = serializeAws_ec2UserData(input.UserData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserData.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ImportInstanceRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskImages !== undefined && input.DiskImages !== null) {
        const memberEntries = serializeAws_ec2DiskImageList(input.DiskImages, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DiskImage.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LaunchSpecification !== undefined && input.LaunchSpecification !== null) {
        const memberEntries = serializeAws_ec2ImportInstanceLaunchSpecification(input.LaunchSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Platform !== undefined && input.Platform !== null) {
        entries["Platform"] = input.Platform;
    }
    return entries;
};
const serializeAws_ec2ImportKeyPairRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.PublicKeyMaterial !== undefined && input.PublicKeyMaterial !== null) {
        entries["PublicKeyMaterial"] = context.base64Encoder(input.PublicKeyMaterial);
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ImportSnapshotRequest = (input, context) => {
    const entries = {};
    if (input.ClientData !== undefined && input.ClientData !== null) {
        const memberEntries = serializeAws_ec2ClientData(input.ClientData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientData.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DiskContainer !== undefined && input.DiskContainer !== null) {
        const memberEntries = serializeAws_ec2SnapshotDiskContainer(input.DiskContainer, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DiskContainer.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.RoleName !== undefined && input.RoleName !== null) {
        entries["RoleName"] = input.RoleName;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ImportSnapshotTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImportTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ImportTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImportTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ImportVolumeRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Image !== undefined && input.Image !== null) {
        const memberEntries = serializeAws_ec2DiskImageDetail(input.Image, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Image.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Volume !== undefined && input.Volume !== null) {
        const memberEntries = serializeAws_ec2VolumeDetail(input.Volume, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Volume.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2InsideCidrBlocksStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceBlockDeviceMappingSpecification = (input, context) => {
    const entries = {};
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Ebs !== undefined && input.Ebs !== null) {
        const memberEntries = serializeAws_ec2EbsInstanceBlockDeviceSpecification(input.Ebs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NoDevice !== undefined && input.NoDevice !== null) {
        entries["NoDevice"] = input.NoDevice;
    }
    if (input.VirtualName !== undefined && input.VirtualName !== null) {
        entries["VirtualName"] = input.VirtualName;
    }
    return entries;
};
const serializeAws_ec2InstanceBlockDeviceMappingSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2InstanceBlockDeviceMappingSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceCreditSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2InstanceCreditSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.CpuCredits !== undefined && input.CpuCredits !== null) {
        entries["CpuCredits"] = input.CpuCredits;
    }
    return entries;
};
const serializeAws_ec2InstanceEventWindowAssociationRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceTags !== undefined && input.InstanceTags !== null) {
        const memberEntries = serializeAws_ec2TagList(input.InstanceTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DedicatedHostIds !== undefined && input.DedicatedHostIds !== null) {
        const memberEntries = serializeAws_ec2DedicatedHostIdList(input.DedicatedHostIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2InstanceEventWindowDisassociationRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceTags !== undefined && input.InstanceTags !== null) {
        const memberEntries = serializeAws_ec2TagList(input.InstanceTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DedicatedHostIds !== undefined && input.DedicatedHostIds !== null) {
        const memberEntries = serializeAws_ec2DedicatedHostIdList(input.DedicatedHostIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2InstanceEventWindowIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`InstanceEventWindowId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceEventWindowTimeRangeRequest = (input, context) => {
    const entries = {};
    if (input.StartWeekDay !== undefined && input.StartWeekDay !== null) {
        entries["StartWeekDay"] = input.StartWeekDay;
    }
    if (input.StartHour !== undefined && input.StartHour !== null) {
        entries["StartHour"] = input.StartHour;
    }
    if (input.EndWeekDay !== undefined && input.EndWeekDay !== null) {
        entries["EndWeekDay"] = input.EndWeekDay;
    }
    if (input.EndHour !== undefined && input.EndHour !== null) {
        entries["EndHour"] = input.EndHour;
    }
    return entries;
};
const serializeAws_ec2InstanceEventWindowTimeRangeRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2InstanceEventWindowTimeRangeRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceGenerationSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`InstanceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceIpv6Address = (input, context) => {
    const entries = {};
    if (input.Ipv6Address !== undefined && input.Ipv6Address !== null) {
        entries["Ipv6Address"] = input.Ipv6Address;
    }
    return entries;
};
const serializeAws_ec2InstanceIpv6AddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2InstanceIpv6Address(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceIpv6AddressListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2InstanceIpv6AddressRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`InstanceIpv6Address.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceIpv6AddressRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6Address !== undefined && input.Ipv6Address !== null) {
        entries["Ipv6Address"] = input.Ipv6Address;
    }
    return entries;
};
const serializeAws_ec2InstanceMaintenanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AutoRecovery !== undefined && input.AutoRecovery !== null) {
        entries["AutoRecovery"] = input.AutoRecovery;
    }
    return entries;
};
const serializeAws_ec2InstanceMarketOptionsRequest = (input, context) => {
    const entries = {};
    if (input.MarketType !== undefined && input.MarketType !== null) {
        entries["MarketType"] = input.MarketType;
    }
    if (input.SpotOptions !== undefined && input.SpotOptions !== null) {
        const memberEntries = serializeAws_ec2SpotMarketOptions(input.SpotOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2InstanceMetadataOptionsRequest = (input, context) => {
    const entries = {};
    if (input.HttpTokens !== undefined && input.HttpTokens !== null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit !== undefined && input.HttpPutResponseHopLimit !== null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint !== undefined && input.HttpEndpoint !== null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    if (input.HttpProtocolIpv6 !== undefined && input.HttpProtocolIpv6 !== null) {
        entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
    }
    if (input.InstanceMetadataTags !== undefined && input.InstanceMetadataTags !== null) {
        entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
    }
    return entries;
};
const serializeAws_ec2InstanceNetworkInterfaceSpecification = (input, context) => {
    const entries = {};
    if (input.AssociatePublicIpAddress !== undefined && input.AssociatePublicIpAddress !== null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        const memberEntries = serializeAws_ec2InstanceIpv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        const memberEntries = serializeAws_ec2PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.AssociateCarrierIpAddress !== undefined && input.AssociateCarrierIpAddress !== null) {
        entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
    }
    if (input.InterfaceType !== undefined && input.InterfaceType !== null) {
        entries["InterfaceType"] = input.InterfaceType;
    }
    if (input.NetworkCardIndex !== undefined && input.NetworkCardIndex !== null) {
        entries["NetworkCardIndex"] = input.NetworkCardIndex;
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        const memberEntries = serializeAws_ec2Ipv4PrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount !== undefined && input.Ipv4PrefixCount !== null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        const memberEntries = serializeAws_ec2Ipv6PrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount !== undefined && input.Ipv6PrefixCount !== null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    return entries;
};
const serializeAws_ec2InstanceNetworkInterfaceSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceRequirements = (input, context) => {
    const entries = {};
    if (input.VCpuCount !== undefined && input.VCpuCount !== null) {
        const memberEntries = serializeAws_ec2VCpuCountRange(input.VCpuCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VCpuCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryMiB !== undefined && input.MemoryMiB !== null) {
        const memberEntries = serializeAws_ec2MemoryMiB(input.MemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CpuManufacturers !== undefined && input.CpuManufacturers !== null) {
        const memberEntries = serializeAws_ec2CpuManufacturerSet(input.CpuManufacturers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryGiBPerVCpu !== undefined && input.MemoryGiBPerVCpu !== null) {
        const memberEntries = serializeAws_ec2MemoryGiBPerVCpu(input.MemoryGiBPerVCpu, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryGiBPerVCpu.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludedInstanceTypes !== undefined && input.ExcludedInstanceTypes !== null) {
        const memberEntries = serializeAws_ec2ExcludedInstanceTypeSet(input.ExcludedInstanceTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceGenerations !== undefined && input.InstanceGenerations !== null) {
        const memberEntries = serializeAws_ec2InstanceGenerationSet(input.InstanceGenerations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceGenerationSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SpotMaxPricePercentageOverLowestPrice !== undefined &&
        input.SpotMaxPricePercentageOverLowestPrice !== null) {
        entries["SpotMaxPricePercentageOverLowestPrice"] = input.SpotMaxPricePercentageOverLowestPrice;
    }
    if (input.OnDemandMaxPricePercentageOverLowestPrice !== undefined &&
        input.OnDemandMaxPricePercentageOverLowestPrice !== null) {
        entries["OnDemandMaxPricePercentageOverLowestPrice"] = input.OnDemandMaxPricePercentageOverLowestPrice;
    }
    if (input.BareMetal !== undefined && input.BareMetal !== null) {
        entries["BareMetal"] = input.BareMetal;
    }
    if (input.BurstablePerformance !== undefined && input.BurstablePerformance !== null) {
        entries["BurstablePerformance"] = input.BurstablePerformance;
    }
    if (input.RequireHibernateSupport !== undefined && input.RequireHibernateSupport !== null) {
        entries["RequireHibernateSupport"] = input.RequireHibernateSupport;
    }
    if (input.NetworkInterfaceCount !== undefined && input.NetworkInterfaceCount !== null) {
        const memberEntries = serializeAws_ec2NetworkInterfaceCount(input.NetworkInterfaceCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LocalStorage !== undefined && input.LocalStorage !== null) {
        entries["LocalStorage"] = input.LocalStorage;
    }
    if (input.LocalStorageTypes !== undefined && input.LocalStorageTypes !== null) {
        const memberEntries = serializeAws_ec2LocalStorageTypeSet(input.LocalStorageTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalStorageTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TotalLocalStorageGB !== undefined && input.TotalLocalStorageGB !== null) {
        const memberEntries = serializeAws_ec2TotalLocalStorageGB(input.TotalLocalStorageGB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TotalLocalStorageGB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BaselineEbsBandwidthMbps !== undefined && input.BaselineEbsBandwidthMbps !== null) {
        const memberEntries = serializeAws_ec2BaselineEbsBandwidthMbps(input.BaselineEbsBandwidthMbps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BaselineEbsBandwidthMbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTypes !== undefined && input.AcceleratorTypes !== null) {
        const memberEntries = serializeAws_ec2AcceleratorTypeSet(input.AcceleratorTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorCount !== undefined && input.AcceleratorCount !== null) {
        const memberEntries = serializeAws_ec2AcceleratorCount(input.AcceleratorCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorManufacturers !== undefined && input.AcceleratorManufacturers !== null) {
        const memberEntries = serializeAws_ec2AcceleratorManufacturerSet(input.AcceleratorManufacturers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorNames !== undefined && input.AcceleratorNames !== null) {
        const memberEntries = serializeAws_ec2AcceleratorNameSet(input.AcceleratorNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorNameSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTotalMemoryMiB !== undefined && input.AcceleratorTotalMemoryMiB !== null) {
        const memberEntries = serializeAws_ec2AcceleratorTotalMemoryMiB(input.AcceleratorTotalMemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTotalMemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2InstanceRequirementsRequest = (input, context) => {
    const entries = {};
    if (input.VCpuCount !== undefined && input.VCpuCount !== null) {
        const memberEntries = serializeAws_ec2VCpuCountRangeRequest(input.VCpuCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VCpuCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryMiB !== undefined && input.MemoryMiB !== null) {
        const memberEntries = serializeAws_ec2MemoryMiBRequest(input.MemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CpuManufacturers !== undefined && input.CpuManufacturers !== null) {
        const memberEntries = serializeAws_ec2CpuManufacturerSet(input.CpuManufacturers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuManufacturer.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MemoryGiBPerVCpu !== undefined && input.MemoryGiBPerVCpu !== null) {
        const memberEntries = serializeAws_ec2MemoryGiBPerVCpuRequest(input.MemoryGiBPerVCpu, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryGiBPerVCpu.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludedInstanceTypes !== undefined && input.ExcludedInstanceTypes !== null) {
        const memberEntries = serializeAws_ec2ExcludedInstanceTypeSet(input.ExcludedInstanceTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceGenerations !== undefined && input.InstanceGenerations !== null) {
        const memberEntries = serializeAws_ec2InstanceGenerationSet(input.InstanceGenerations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceGeneration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SpotMaxPricePercentageOverLowestPrice !== undefined &&
        input.SpotMaxPricePercentageOverLowestPrice !== null) {
        entries["SpotMaxPricePercentageOverLowestPrice"] = input.SpotMaxPricePercentageOverLowestPrice;
    }
    if (input.OnDemandMaxPricePercentageOverLowestPrice !== undefined &&
        input.OnDemandMaxPricePercentageOverLowestPrice !== null) {
        entries["OnDemandMaxPricePercentageOverLowestPrice"] = input.OnDemandMaxPricePercentageOverLowestPrice;
    }
    if (input.BareMetal !== undefined && input.BareMetal !== null) {
        entries["BareMetal"] = input.BareMetal;
    }
    if (input.BurstablePerformance !== undefined && input.BurstablePerformance !== null) {
        entries["BurstablePerformance"] = input.BurstablePerformance;
    }
    if (input.RequireHibernateSupport !== undefined && input.RequireHibernateSupport !== null) {
        entries["RequireHibernateSupport"] = input.RequireHibernateSupport;
    }
    if (input.NetworkInterfaceCount !== undefined && input.NetworkInterfaceCount !== null) {
        const memberEntries = serializeAws_ec2NetworkInterfaceCountRequest(input.NetworkInterfaceCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LocalStorage !== undefined && input.LocalStorage !== null) {
        entries["LocalStorage"] = input.LocalStorage;
    }
    if (input.LocalStorageTypes !== undefined && input.LocalStorageTypes !== null) {
        const memberEntries = serializeAws_ec2LocalStorageTypeSet(input.LocalStorageTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalStorageType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TotalLocalStorageGB !== undefined && input.TotalLocalStorageGB !== null) {
        const memberEntries = serializeAws_ec2TotalLocalStorageGBRequest(input.TotalLocalStorageGB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TotalLocalStorageGB.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BaselineEbsBandwidthMbps !== undefined && input.BaselineEbsBandwidthMbps !== null) {
        const memberEntries = serializeAws_ec2BaselineEbsBandwidthMbpsRequest(input.BaselineEbsBandwidthMbps, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BaselineEbsBandwidthMbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTypes !== undefined && input.AcceleratorTypes !== null) {
        const memberEntries = serializeAws_ec2AcceleratorTypeSet(input.AcceleratorTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorCount !== undefined && input.AcceleratorCount !== null) {
        const memberEntries = serializeAws_ec2AcceleratorCountRequest(input.AcceleratorCount, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorManufacturers !== undefined && input.AcceleratorManufacturers !== null) {
        const memberEntries = serializeAws_ec2AcceleratorManufacturerSet(input.AcceleratorManufacturers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorManufacturer.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorNames !== undefined && input.AcceleratorNames !== null) {
        const memberEntries = serializeAws_ec2AcceleratorNameSet(input.AcceleratorNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AcceleratorTotalMemoryMiB !== undefined && input.AcceleratorTotalMemoryMiB !== null) {
        const memberEntries = serializeAws_ec2AcceleratorTotalMemoryMiBRequest(input.AcceleratorTotalMemoryMiB, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTotalMemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2InstanceRequirementsWithMetadataRequest = (input, context) => {
    const entries = {};
    if (input.ArchitectureTypes !== undefined && input.ArchitectureTypes !== null) {
        const memberEntries = serializeAws_ec2ArchitectureTypeSet(input.ArchitectureTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VirtualizationTypes !== undefined && input.VirtualizationTypes !== null) {
        const memberEntries = serializeAws_ec2VirtualizationTypeSet(input.VirtualizationTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        const memberEntries = serializeAws_ec2InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2InstanceSpecification = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.ExcludeBootVolume !== undefined && input.ExcludeBootVolume !== null) {
        entries["ExcludeBootVolume"] = input.ExcludeBootVolume;
    }
    return entries;
};
const serializeAws_ec2InstanceTagKeySet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceTypeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2InstanceTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2IntegrateServices = (input, context) => {
    const entries = {};
    if (input.AthenaIntegrations !== undefined && input.AthenaIntegrations !== null) {
        const memberEntries = serializeAws_ec2AthenaIntegrationsSet(input.AthenaIntegrations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AthenaIntegration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2InternetGatewayIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2IpamCidrAuthorizationContext = (input, context) => {
    const entries = {};
    if (input.Message !== undefined && input.Message !== null) {
        entries["Message"] = input.Message;
    }
    if (input.Signature !== undefined && input.Signature !== null) {
        entries["Signature"] = input.Signature;
    }
    return entries;
};
const serializeAws_ec2IpamPoolAllocationDisallowedCidrs = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2IpPermission = (input, context) => {
    const entries = {};
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.IpRanges !== undefined && input.IpRanges !== null) {
        const memberEntries = serializeAws_ec2IpRangeList(input.IpRanges, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpRanges.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6Ranges !== undefined && input.Ipv6Ranges !== null) {
        const memberEntries = serializeAws_ec2Ipv6RangeList(input.Ipv6Ranges, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Ranges.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PrefixListIds !== undefined && input.PrefixListIds !== null) {
        const memberEntries = serializeAws_ec2PrefixListIdList(input.PrefixListIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrefixListIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.UserIdGroupPairs !== undefined && input.UserIdGroupPairs !== null) {
        const memberEntries = serializeAws_ec2UserIdGroupPairList(input.UserIdGroupPairs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Groups.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2IpPermissionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2IpPermission(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2IpPrefixList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2IpRange = (input, context) => {
    const entries = {};
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const serializeAws_ec2IpRangeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2IpRange(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2Ipv4PrefixList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Ipv4PrefixSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2Ipv4PrefixSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.Ipv4Prefix !== undefined && input.Ipv4Prefix !== null) {
        entries["Ipv4Prefix"] = input.Ipv4Prefix;
    }
    return entries;
};
const serializeAws_ec2Ipv6AddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2Ipv6PoolIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2Ipv6PrefixList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Ipv6PrefixSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2Ipv6PrefixSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6Prefix !== undefined && input.Ipv6Prefix !== null) {
        entries["Ipv6Prefix"] = input.Ipv6Prefix;
    }
    return entries;
};
const serializeAws_ec2Ipv6Range = (input, context) => {
    const entries = {};
    if (input.CidrIpv6 !== undefined && input.CidrIpv6 !== null) {
        entries["CidrIpv6"] = input.CidrIpv6;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const serializeAws_ec2Ipv6RangeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Ipv6Range(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2KeyNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`KeyName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2KeyPairIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`KeyPairId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchPermission = (input, context) => {
    const entries = {};
    if (input.Group !== undefined && input.Group !== null) {
        entries["Group"] = input.Group;
    }
    if (input.UserId !== undefined && input.UserId !== null) {
        entries["UserId"] = input.UserId;
    }
    if (input.OrganizationArn !== undefined && input.OrganizationArn !== null) {
        entries["OrganizationArn"] = input.OrganizationArn;
    }
    if (input.OrganizationalUnitArn !== undefined && input.OrganizationalUnitArn !== null) {
        entries["OrganizationalUnitArn"] = input.OrganizationalUnitArn;
    }
    return entries;
};
const serializeAws_ec2LaunchPermissionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LaunchPermission(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchPermissionModifications = (input, context) => {
    const entries = {};
    if (input.Add !== undefined && input.Add !== null) {
        const memberEntries = serializeAws_ec2LaunchPermissionList(input.Add, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Remove !== undefined && input.Remove !== null) {
        const memberEntries = serializeAws_ec2LaunchPermissionList(input.Remove, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2LaunchSpecsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2SpotFleetLaunchSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateBlockDeviceMappingRequest = (input, context) => {
    const entries = {};
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.VirtualName !== undefined && input.VirtualName !== null) {
        entries["VirtualName"] = input.VirtualName;
    }
    if (input.Ebs !== undefined && input.Ebs !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateEbsBlockDeviceRequest(input.Ebs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NoDevice !== undefined && input.NoDevice !== null) {
        entries["NoDevice"] = input.NoDevice;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateBlockDeviceMappingRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LaunchTemplateBlockDeviceMappingRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateCapacityReservationSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationPreference !== undefined && input.CapacityReservationPreference !== null) {
        entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
    }
    if (input.CapacityReservationTarget !== undefined && input.CapacityReservationTarget !== null) {
        const memberEntries = serializeAws_ec2CapacityReservationTarget(input.CapacityReservationTarget, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateConfig = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateSpecification !== undefined && input.LaunchTemplateSpecification !== null) {
        const memberEntries = serializeAws_ec2FleetLaunchTemplateSpecification(input.LaunchTemplateSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Overrides !== undefined && input.Overrides !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateOverridesList(input.Overrides, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateConfigList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LaunchTemplateConfig(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateCpuOptionsRequest = (input, context) => {
    const entries = {};
    if (input.CoreCount !== undefined && input.CoreCount !== null) {
        entries["CoreCount"] = input.CoreCount;
    }
    if (input.ThreadsPerCore !== undefined && input.ThreadsPerCore !== null) {
        entries["ThreadsPerCore"] = input.ThreadsPerCore;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateEbsBlockDeviceRequest = (input, context) => {
    const entries = {};
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize !== undefined && input.VolumeSize !== null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.Throughput !== undefined && input.Throughput !== null) {
        entries["Throughput"] = input.Throughput;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateElasticInferenceAccelerator = (input, context) => {
    const entries = {};
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.Count !== undefined && input.Count !== null) {
        entries["Count"] = input.Count;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateElasticInferenceAcceleratorList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LaunchTemplateElasticInferenceAccelerator(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateEnclaveOptionsRequest = (input, context) => {
    const entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateHibernationOptionsRequest = (input, context) => {
    const entries = {};
    if (input.Configured !== undefined && input.Configured !== null) {
        entries["Configured"] = input.Configured;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateIamInstanceProfileSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.Arn !== undefined && input.Arn !== null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateInstanceMaintenanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AutoRecovery !== undefined && input.AutoRecovery !== null) {
        entries["AutoRecovery"] = input.AutoRecovery;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateInstanceMarketOptionsRequest = (input, context) => {
    const entries = {};
    if (input.MarketType !== undefined && input.MarketType !== null) {
        entries["MarketType"] = input.MarketType;
    }
    if (input.SpotOptions !== undefined && input.SpotOptions !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateSpotMarketOptionsRequest(input.SpotOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateInstanceMetadataOptionsRequest = (input, context) => {
    const entries = {};
    if (input.HttpTokens !== undefined && input.HttpTokens !== null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit !== undefined && input.HttpPutResponseHopLimit !== null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint !== undefined && input.HttpEndpoint !== null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    if (input.HttpProtocolIpv6 !== undefined && input.HttpProtocolIpv6 !== null) {
        entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
    }
    if (input.InstanceMetadataTags !== undefined && input.InstanceMetadataTags !== null) {
        entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.AssociateCarrierIpAddress !== undefined && input.AssociateCarrierIpAddress !== null) {
        entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
    }
    if (input.AssociatePublicIpAddress !== undefined && input.AssociatePublicIpAddress !== null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InterfaceType !== undefined && input.InterfaceType !== null) {
        entries["InterfaceType"] = input.InterfaceType;
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        const memberEntries = serializeAws_ec2InstanceIpv6AddressListRequest(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        const memberEntries = serializeAws_ec2PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.NetworkCardIndex !== undefined && input.NetworkCardIndex !== null) {
        entries["NetworkCardIndex"] = input.NetworkCardIndex;
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        const memberEntries = serializeAws_ec2Ipv4PrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4PrefixCount !== undefined && input.Ipv4PrefixCount !== null) {
        entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        const memberEntries = serializeAws_ec2Ipv6PrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6PrefixCount !== undefined && input.Ipv6PrefixCount !== null) {
        entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`InstanceNetworkInterfaceSpecification.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateLicenseConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.LicenseConfigurationArn !== undefined && input.LicenseConfigurationArn !== null) {
        entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateLicenseSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LaunchTemplateLicenseConfigurationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateOverrides = (input, context) => {
    const entries = {};
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.WeightedCapacity !== undefined && input.WeightedCapacity !== null) {
        entries["WeightedCapacity"] = (0, smithy_client_1.serializeFloat)(input.WeightedCapacity);
    }
    if (input.Priority !== undefined && input.Priority !== null) {
        entries["Priority"] = (0, smithy_client_1.serializeFloat)(input.Priority);
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        const memberEntries = serializeAws_ec2InstanceRequirements(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateOverridesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LaunchTemplateOverrides(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplatePlacementRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Affinity !== undefined && input.Affinity !== null) {
        entries["Affinity"] = input.Affinity;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.HostId !== undefined && input.HostId !== null) {
        entries["HostId"] = input.HostId;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.SpreadDomain !== undefined && input.SpreadDomain !== null) {
        entries["SpreadDomain"] = input.SpreadDomain;
    }
    if (input.HostResourceGroupArn !== undefined && input.HostResourceGroupArn !== null) {
        entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
    }
    if (input.PartitionNumber !== undefined && input.PartitionNumber !== null) {
        entries["PartitionNumber"] = input.PartitionNumber;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplatePrivateDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input.HostnameType !== undefined && input.HostnameType !== null) {
        entries["HostnameType"] = input.HostnameType;
    }
    if (input.EnableResourceNameDnsARecord !== undefined && input.EnableResourceNameDnsARecord !== null) {
        entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
    }
    if (input.EnableResourceNameDnsAAAARecord !== undefined && input.EnableResourceNameDnsAAAARecord !== null) {
        entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplatesMonitoringRequest = (input, context) => {
    const entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateSpecification = (input, context) => {
    const entries = {};
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.Version !== undefined && input.Version !== null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateSpotMarketOptionsRequest = (input, context) => {
    const entries = {};
    if (input.MaxPrice !== undefined && input.MaxPrice !== null) {
        entries["MaxPrice"] = input.MaxPrice;
    }
    if (input.SpotInstanceType !== undefined && input.SpotInstanceType !== null) {
        entries["SpotInstanceType"] = input.SpotInstanceType;
    }
    if (input.BlockDurationMinutes !== undefined && input.BlockDurationMinutes !== null) {
        entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateTagSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        const memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2LaunchTemplateTagSpecificationRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LaunchTemplateTagSpecificationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`LaunchTemplateTagSpecificationRequest.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LicenseConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.LicenseConfigurationArn !== undefined && input.LicenseConfigurationArn !== null) {
        entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
    }
    return entries;
};
const serializeAws_ec2LicenseSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LicenseConfigurationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ListImagesInRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input.ImageIds !== undefined && input.ImageIds !== null) {
        const memberEntries = serializeAws_ec2ImageIdStringList(input.ImageIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ListSnapshotsInRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.SnapshotIds !== undefined && input.SnapshotIds !== null) {
        const memberEntries = serializeAws_ec2SnapshotIdStringList(input.SnapshotIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2LoadBalancersConfig = (input, context) => {
    const entries = {};
    if (input.ClassicLoadBalancersConfig !== undefined && input.ClassicLoadBalancersConfig !== null) {
        const memberEntries = serializeAws_ec2ClassicLoadBalancersConfig(input.ClassicLoadBalancersConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClassicLoadBalancersConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TargetGroupsConfig !== undefined && input.TargetGroupsConfig !== null) {
        const memberEntries = serializeAws_ec2TargetGroupsConfig(input.TargetGroupsConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetGroupsConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2LoadPermissionListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2LoadPermissionRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2LoadPermissionModifications = (input, context) => {
    const entries = {};
    if (input.Add !== undefined && input.Add !== null) {
        const memberEntries = serializeAws_ec2LoadPermissionListRequest(input.Add, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Remove !== undefined && input.Remove !== null) {
        const memberEntries = serializeAws_ec2LoadPermissionListRequest(input.Remove, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2LoadPermissionRequest = (input, context) => {
    const entries = {};
    if (input.Group !== undefined && input.Group !== null) {
        entries["Group"] = input.Group;
    }
    if (input.UserId !== undefined && input.UserId !== null) {
        entries["UserId"] = input.UserId;
    }
    return entries;
};
const serializeAws_ec2LocalGatewayIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2LocalGatewayRouteTableIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2LocalGatewayRouteTableVpcAssociationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2LocalGatewayVirtualInterfaceGroupIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2LocalGatewayVirtualInterfaceIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2LocalStorageTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2MemoryGiBPerVCpu = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = (0, smithy_client_1.serializeFloat)(input.Min);
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = (0, smithy_client_1.serializeFloat)(input.Max);
    }
    return entries;
};
const serializeAws_ec2MemoryGiBPerVCpuRequest = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = (0, smithy_client_1.serializeFloat)(input.Min);
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = (0, smithy_client_1.serializeFloat)(input.Max);
    }
    return entries;
};
const serializeAws_ec2MemoryMiB = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2MemoryMiBRequest = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2ModifyAddressAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.DomainName !== undefined && input.DomainName !== null) {
        entries["DomainName"] = input.DomainName;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyAvailabilityZoneGroupRequest = (input, context) => {
    const entries = {};
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.OptInStatus !== undefined && input.OptInStatus !== null) {
        entries["OptInStatus"] = input.OptInStatus;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyCapacityReservationFleetRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationFleetId !== undefined && input.CapacityReservationFleetId !== null) {
        entries["CapacityReservationFleetId"] = input.CapacityReservationFleetId;
    }
    if (input.TotalTargetCapacity !== undefined && input.TotalTargetCapacity !== null) {
        entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
    }
    if (input.EndDate !== undefined && input.EndDate !== null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RemoveEndDate !== undefined && input.RemoveEndDate !== null) {
        entries["RemoveEndDate"] = input.RemoveEndDate;
    }
    return entries;
};
const serializeAws_ec2ModifyCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
        entries["CapacityReservationId"] = input.CapacityReservationId;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.EndDate !== undefined && input.EndDate !== null) {
        entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
    }
    if (input.EndDateType !== undefined && input.EndDateType !== null) {
        entries["EndDateType"] = input.EndDateType;
    }
    if (input.Accept !== undefined && input.Accept !== null) {
        entries["Accept"] = input.Accept;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    return entries;
};
const serializeAws_ec2ModifyClientVpnEndpointRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.ServerCertificateArn !== undefined && input.ServerCertificateArn !== null) {
        entries["ServerCertificateArn"] = input.ServerCertificateArn;
    }
    if (input.ConnectionLogOptions !== undefined && input.ConnectionLogOptions !== null) {
        const memberEntries = serializeAws_ec2ConnectionLogOptions(input.ConnectionLogOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionLogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DnsServers !== undefined && input.DnsServers !== null) {
        const memberEntries = serializeAws_ec2DnsServersOptionsModifyStructure(input.DnsServers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsServers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpnPort !== undefined && input.VpnPort !== null) {
        entries["VpnPort"] = input.VpnPort;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.SplitTunnel !== undefined && input.SplitTunnel !== null) {
        entries["SplitTunnel"] = input.SplitTunnel;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.SelfServicePortal !== undefined && input.SelfServicePortal !== null) {
        entries["SelfServicePortal"] = input.SelfServicePortal;
    }
    if (input.ClientConnectOptions !== undefined && input.ClientConnectOptions !== null) {
        const memberEntries = serializeAws_ec2ClientConnectOptions(input.ClientConnectOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientConnectOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SessionTimeoutHours !== undefined && input.SessionTimeoutHours !== null) {
        entries["SessionTimeoutHours"] = input.SessionTimeoutHours;
    }
    if (input.ClientLoginBannerOptions !== undefined && input.ClientLoginBannerOptions !== null) {
        const memberEntries = serializeAws_ec2ClientLoginBannerOptions(input.ClientLoginBannerOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientLoginBannerOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyDefaultCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    if (input.CpuCredits !== undefined && input.CpuCredits !== null) {
        entries["CpuCredits"] = input.CpuCredits;
    }
    return entries;
};
const serializeAws_ec2ModifyEbsDefaultKmsKeyIdRequest = (input, context) => {
    const entries = {};
    if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyFleetRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
        const memberEntries = serializeAws_ec2FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.FleetId !== undefined && input.FleetId !== null) {
        entries["FleetId"] = input.FleetId;
    }
    if (input.TargetCapacitySpecification !== undefined && input.TargetCapacitySpecification !== null) {
        const memberEntries = serializeAws_ec2TargetCapacitySpecificationRequest(input.TargetCapacitySpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetCapacitySpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Context !== undefined && input.Context !== null) {
        entries["Context"] = input.Context;
    }
    return entries;
};
const serializeAws_ec2ModifyFpgaImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.OperationType !== undefined && input.OperationType !== null) {
        entries["OperationType"] = input.OperationType;
    }
    if (input.UserIds !== undefined && input.UserIds !== null) {
        const memberEntries = serializeAws_ec2UserIdStringList(input.UserIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.UserGroups !== undefined && input.UserGroups !== null) {
        const memberEntries = serializeAws_ec2UserGroupStringList(input.UserGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ProductCodes !== undefined && input.ProductCodes !== null) {
        const memberEntries = serializeAws_ec2ProductCodeStringList(input.ProductCodes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LoadPermission !== undefined && input.LoadPermission !== null) {
        const memberEntries = serializeAws_ec2LoadPermissionModifications(input.LoadPermission, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadPermission.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const serializeAws_ec2ModifyHostsRequest = (input, context) => {
    const entries = {};
    if (input.AutoPlacement !== undefined && input.AutoPlacement !== null) {
        entries["AutoPlacement"] = input.AutoPlacement;
    }
    if (input.HostIds !== undefined && input.HostIds !== null) {
        const memberEntries = serializeAws_ec2RequestHostIdList(input.HostIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HostRecovery !== undefined && input.HostRecovery !== null) {
        entries["HostRecovery"] = input.HostRecovery;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
        entries["InstanceFamily"] = input.InstanceFamily;
    }
    return entries;
};
const serializeAws_ec2ModifyIdentityIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.PrincipalArn !== undefined && input.PrincipalArn !== null) {
        entries["PrincipalArn"] = input.PrincipalArn;
    }
    if (input.Resource !== undefined && input.Resource !== null) {
        entries["Resource"] = input.Resource;
    }
    if (input.UseLongIds !== undefined && input.UseLongIds !== null) {
        entries["UseLongIds"] = input.UseLongIds;
    }
    return entries;
};
const serializeAws_ec2ModifyIdFormatRequest = (input, context) => {
    const entries = {};
    if (input.Resource !== undefined && input.Resource !== null) {
        entries["Resource"] = input.Resource;
    }
    if (input.UseLongIds !== undefined && input.UseLongIds !== null) {
        entries["UseLongIds"] = input.UseLongIds;
    }
    return entries;
};
const serializeAws_ec2ModifyImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.Description !== undefined && input.Description !== null) {
        const memberEntries = serializeAws_ec2AttributeValue(input.Description, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Description.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.LaunchPermission !== undefined && input.LaunchPermission !== null) {
        const memberEntries = serializeAws_ec2LaunchPermissionModifications(input.LaunchPermission, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchPermission.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationType !== undefined && input.OperationType !== null) {
        entries["OperationType"] = input.OperationType;
    }
    if (input.ProductCodes !== undefined && input.ProductCodes !== null) {
        const memberEntries = serializeAws_ec2ProductCodeStringList(input.ProductCodes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.UserGroups !== undefined && input.UserGroups !== null) {
        const memberEntries = serializeAws_ec2UserGroupStringList(input.UserGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.UserIds !== undefined && input.UserIds !== null) {
        const memberEntries = serializeAws_ec2UserIdStringList(input.UserIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.OrganizationArns !== undefined && input.OrganizationArns !== null) {
        const memberEntries = serializeAws_ec2OrganizationArnStringList(input.OrganizationArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OrganizationalUnitArns !== undefined && input.OrganizationalUnitArns !== null) {
        const memberEntries = serializeAws_ec2OrganizationalUnitArnStringList(input.OrganizationalUnitArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationalUnitArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyInstanceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.SourceDestCheck !== undefined && input.SourceDestCheck !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.SourceDestCheck, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceDestCheck.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        const memberEntries = serializeAws_ec2InstanceBlockDeviceMappingSpecificationList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DisableApiTermination !== undefined && input.DisableApiTermination !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.DisableApiTermination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableApiTermination.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EbsOptimized, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EbsOptimized.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnaSupport !== undefined && input.EnaSupport !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnaSupport, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSupport.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        const memberEntries = serializeAws_ec2GroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
        const memberEntries = serializeAws_ec2AttributeValue(input.InstanceInitiatedShutdownBehavior, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceInitiatedShutdownBehavior.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        const memberEntries = serializeAws_ec2AttributeValue(input.InstanceType, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Kernel !== undefined && input.Kernel !== null) {
        const memberEntries = serializeAws_ec2AttributeValue(input.Kernel, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Kernel.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Ramdisk !== undefined && input.Ramdisk !== null) {
        const memberEntries = serializeAws_ec2AttributeValue(input.Ramdisk, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ramdisk.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SriovNetSupport !== undefined && input.SriovNetSupport !== null) {
        const memberEntries = serializeAws_ec2AttributeValue(input.SriovNetSupport, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SriovNetSupport.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        const memberEntries = serializeAws_ec2BlobAttributeValue(input.UserData, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserData.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    if (input.DisableApiStop !== undefined && input.DisableApiStop !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.DisableApiStop, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableApiStop.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyInstanceCapacityReservationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.CapacityReservationSpecification !== undefined && input.CapacityReservationSpecification !== null) {
        const memberEntries = serializeAws_ec2CapacityReservationSpecification(input.CapacityReservationSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyInstanceCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.InstanceCreditSpecifications !== undefined && input.InstanceCreditSpecifications !== null) {
        const memberEntries = serializeAws_ec2InstanceCreditSpecificationListRequest(input.InstanceCreditSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceCreditSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyInstanceEventStartTimeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.InstanceEventId !== undefined && input.InstanceEventId !== null) {
        entries["InstanceEventId"] = input.InstanceEventId;
    }
    if (input.NotBefore !== undefined && input.NotBefore !== null) {
        entries["NotBefore"] = input.NotBefore.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_ec2ModifyInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.InstanceEventWindowId !== undefined && input.InstanceEventWindowId !== null) {
        entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
    }
    if (input.TimeRanges !== undefined && input.TimeRanges !== null) {
        const memberEntries = serializeAws_ec2InstanceEventWindowTimeRangeRequestSet(input.TimeRanges, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.CronExpression !== undefined && input.CronExpression !== null) {
        entries["CronExpression"] = input.CronExpression;
    }
    return entries;
};
const serializeAws_ec2ModifyInstanceMaintenanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.AutoRecovery !== undefined && input.AutoRecovery !== null) {
        entries["AutoRecovery"] = input.AutoRecovery;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyInstanceMetadataOptionsRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.HttpTokens !== undefined && input.HttpTokens !== null) {
        entries["HttpTokens"] = input.HttpTokens;
    }
    if (input.HttpPutResponseHopLimit !== undefined && input.HttpPutResponseHopLimit !== null) {
        entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
    }
    if (input.HttpEndpoint !== undefined && input.HttpEndpoint !== null) {
        entries["HttpEndpoint"] = input.HttpEndpoint;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.HttpProtocolIpv6 !== undefined && input.HttpProtocolIpv6 !== null) {
        entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
    }
    if (input.InstanceMetadataTags !== undefined && input.InstanceMetadataTags !== null) {
        entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
    }
    return entries;
};
const serializeAws_ec2ModifyInstancePlacementRequest = (input, context) => {
    const entries = {};
    if (input.Affinity !== undefined && input.Affinity !== null) {
        entries["Affinity"] = input.Affinity;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.HostId !== undefined && input.HostId !== null) {
        entries["HostId"] = input.HostId;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.PartitionNumber !== undefined && input.PartitionNumber !== null) {
        entries["PartitionNumber"] = input.PartitionNumber;
    }
    if (input.HostResourceGroupArn !== undefined && input.HostResourceGroupArn !== null) {
        entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
    }
    return entries;
};
const serializeAws_ec2ModifyIpamPoolRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.AutoImport !== undefined && input.AutoImport !== null) {
        entries["AutoImport"] = input.AutoImport;
    }
    if (input.AllocationMinNetmaskLength !== undefined && input.AllocationMinNetmaskLength !== null) {
        entries["AllocationMinNetmaskLength"] = input.AllocationMinNetmaskLength;
    }
    if (input.AllocationMaxNetmaskLength !== undefined && input.AllocationMaxNetmaskLength !== null) {
        entries["AllocationMaxNetmaskLength"] = input.AllocationMaxNetmaskLength;
    }
    if (input.AllocationDefaultNetmaskLength !== undefined && input.AllocationDefaultNetmaskLength !== null) {
        entries["AllocationDefaultNetmaskLength"] = input.AllocationDefaultNetmaskLength;
    }
    if (input.ClearAllocationDefaultNetmaskLength !== undefined && input.ClearAllocationDefaultNetmaskLength !== null) {
        entries["ClearAllocationDefaultNetmaskLength"] = input.ClearAllocationDefaultNetmaskLength;
    }
    if (input.AddAllocationResourceTags !== undefined && input.AddAllocationResourceTags !== null) {
        const memberEntries = serializeAws_ec2RequestIpamResourceTagList(input.AddAllocationResourceTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveAllocationResourceTags !== undefined && input.RemoveAllocationResourceTags !== null) {
        const memberEntries = serializeAws_ec2RequestIpamResourceTagList(input.RemoveAllocationResourceTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyIpamRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamId !== undefined && input.IpamId !== null) {
        entries["IpamId"] = input.IpamId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.AddOperatingRegions !== undefined && input.AddOperatingRegions !== null) {
        const memberEntries = serializeAws_ec2AddIpamOperatingRegionSet(input.AddOperatingRegions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveOperatingRegions !== undefined && input.RemoveOperatingRegions !== null) {
        const memberEntries = serializeAws_ec2RemoveIpamOperatingRegionSet(input.RemoveOperatingRegions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyIpamResourceCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ResourceId !== undefined && input.ResourceId !== null) {
        entries["ResourceId"] = input.ResourceId;
    }
    if (input.ResourceCidr !== undefined && input.ResourceCidr !== null) {
        entries["ResourceCidr"] = input.ResourceCidr;
    }
    if (input.ResourceRegion !== undefined && input.ResourceRegion !== null) {
        entries["ResourceRegion"] = input.ResourceRegion;
    }
    if (input.CurrentIpamScopeId !== undefined && input.CurrentIpamScopeId !== null) {
        entries["CurrentIpamScopeId"] = input.CurrentIpamScopeId;
    }
    if (input.DestinationIpamScopeId !== undefined && input.DestinationIpamScopeId !== null) {
        entries["DestinationIpamScopeId"] = input.DestinationIpamScopeId;
    }
    if (input.Monitored !== undefined && input.Monitored !== null) {
        entries["Monitored"] = input.Monitored;
    }
    return entries;
};
const serializeAws_ec2ModifyIpamScopeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamScopeId !== undefined && input.IpamScopeId !== null) {
        entries["IpamScopeId"] = input.IpamScopeId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const serializeAws_ec2ModifyLaunchTemplateRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
        entries["LaunchTemplateId"] = input.LaunchTemplateId;
    }
    if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
        entries["LaunchTemplateName"] = input.LaunchTemplateName;
    }
    if (input.DefaultVersion !== undefined && input.DefaultVersion !== null) {
        entries["SetDefaultVersion"] = input.DefaultVersion;
    }
    return entries;
};
const serializeAws_ec2ModifyManagedPrefixListRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.CurrentVersion !== undefined && input.CurrentVersion !== null) {
        entries["CurrentVersion"] = input.CurrentVersion;
    }
    if (input.PrefixListName !== undefined && input.PrefixListName !== null) {
        entries["PrefixListName"] = input.PrefixListName;
    }
    if (input.AddEntries !== undefined && input.AddEntries !== null) {
        const memberEntries = serializeAws_ec2AddPrefixListEntries(input.AddEntries, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddEntry.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveEntries !== undefined && input.RemoveEntries !== null) {
        const memberEntries = serializeAws_ec2RemovePrefixListEntries(input.RemoveEntries, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveEntry.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxEntries !== undefined && input.MaxEntries !== null) {
        entries["MaxEntries"] = input.MaxEntries;
    }
    return entries;
};
const serializeAws_ec2ModifyNetworkInterfaceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attachment !== undefined && input.Attachment !== null) {
        const memberEntries = serializeAws_ec2NetworkInterfaceAttachmentChanges(input.Attachment, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attachment.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        const memberEntries = serializeAws_ec2AttributeValue(input.Description, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Description.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.SourceDestCheck !== undefined && input.SourceDestCheck !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.SourceDestCheck, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceDestCheck.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyPrivateDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.PrivateDnsHostnameType !== undefined && input.PrivateDnsHostnameType !== null) {
        entries["PrivateDnsHostnameType"] = input.PrivateDnsHostnameType;
    }
    if (input.EnableResourceNameDnsARecord !== undefined && input.EnableResourceNameDnsARecord !== null) {
        entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
    }
    if (input.EnableResourceNameDnsAAAARecord !== undefined && input.EnableResourceNameDnsAAAARecord !== null) {
        entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
    }
    return entries;
};
const serializeAws_ec2ModifyReservedInstancesRequest = (input, context) => {
    const entries = {};
    if (input.ReservedInstancesIds !== undefined && input.ReservedInstancesIds !== null) {
        const memberEntries = serializeAws_ec2ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.TargetConfigurations !== undefined && input.TargetConfigurations !== null) {
        const memberEntries = serializeAws_ec2ReservedInstancesConfigurationList(input.TargetConfigurations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesConfigurationSetItemType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifySecurityGroupRulesRequest = (input, context) => {
    const entries = {};
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.SecurityGroupRules !== undefined && input.SecurityGroupRules !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupRuleUpdateList(input.SecurityGroupRules, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRule.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifySnapshotAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.CreateVolumePermission !== undefined && input.CreateVolumePermission !== null) {
        const memberEntries = serializeAws_ec2CreateVolumePermissionModifications(input.CreateVolumePermission, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreateVolumePermission.${key}`;
            entries[loc] = value;
        });
    }
    if (input.GroupNames !== undefined && input.GroupNames !== null) {
        const memberEntries = serializeAws_ec2GroupNameStringList(input.GroupNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OperationType !== undefined && input.OperationType !== null) {
        entries["OperationType"] = input.OperationType;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.UserIds !== undefined && input.UserIds !== null) {
        const memberEntries = serializeAws_ec2UserIdStringList(input.UserIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifySnapshotTierRequest = (input, context) => {
    const entries = {};
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.StorageTier !== undefined && input.StorageTier !== null) {
        entries["StorageTier"] = input.StorageTier;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifySpotFleetRequestRequest = (input, context) => {
    const entries = {};
    if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SpotFleetRequestId !== undefined && input.SpotFleetRequestId !== null) {
        entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
    }
    if (input.TargetCapacity !== undefined && input.TargetCapacity !== null) {
        entries["TargetCapacity"] = input.TargetCapacity;
    }
    if (input.OnDemandTargetCapacity !== undefined && input.OnDemandTargetCapacity !== null) {
        entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
    }
    if (input.Context !== undefined && input.Context !== null) {
        entries["Context"] = input.Context;
    }
    return entries;
};
const serializeAws_ec2ModifySubnetAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AssignIpv6AddressOnCreation !== undefined && input.AssignIpv6AddressOnCreation !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.AssignIpv6AddressOnCreation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssignIpv6AddressOnCreation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MapPublicIpOnLaunch !== undefined && input.MapPublicIpOnLaunch !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.MapPublicIpOnLaunch, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MapPublicIpOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.MapCustomerOwnedIpOnLaunch !== undefined && input.MapCustomerOwnedIpOnLaunch !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.MapCustomerOwnedIpOnLaunch, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MapCustomerOwnedIpOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CustomerOwnedIpv4Pool !== undefined && input.CustomerOwnedIpv4Pool !== null) {
        entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
    }
    if (input.EnableDns64 !== undefined && input.EnableDns64 !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableDns64, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableDns64.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsHostnameTypeOnLaunch !== undefined && input.PrivateDnsHostnameTypeOnLaunch !== null) {
        entries["PrivateDnsHostnameTypeOnLaunch"] = input.PrivateDnsHostnameTypeOnLaunch;
    }
    if (input.EnableResourceNameDnsARecordOnLaunch !== undefined && input.EnableResourceNameDnsARecordOnLaunch !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableResourceNameDnsARecordOnLaunch, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableResourceNameDnsARecordOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnableResourceNameDnsAAAARecordOnLaunch !== undefined &&
        input.EnableResourceNameDnsAAAARecordOnLaunch !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableResourceNameDnsAAAARecordOnLaunch, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableResourceNameDnsAAAARecordOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnableLniAtDeviceIndex !== undefined && input.EnableLniAtDeviceIndex !== null) {
        entries["EnableLniAtDeviceIndex"] = input.EnableLniAtDeviceIndex;
    }
    if (input.DisableLniAtDeviceIndex !== undefined && input.DisableLniAtDeviceIndex !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.DisableLniAtDeviceIndex, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableLniAtDeviceIndex.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.AddNetworkServices !== undefined && input.AddNetworkServices !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorNetworkServiceList(input.AddNetworkServices, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddNetworkService.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveNetworkServices !== undefined && input.RemoveNetworkServices !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorNetworkServiceList(input.RemoveNetworkServices, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveNetworkService.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyTrafficMirrorFilterRuleRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorFilterRuleId !== undefined && input.TrafficMirrorFilterRuleId !== null) {
        entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
    }
    if (input.TrafficDirection !== undefined && input.TrafficDirection !== null) {
        entries["TrafficDirection"] = input.TrafficDirection;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    if (input.RuleAction !== undefined && input.RuleAction !== null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.DestinationPortRange !== undefined && input.DestinationPortRange !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SourcePortRange !== undefined && input.SourcePortRange !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.SourceCidrBlock !== undefined && input.SourceCidrBlock !== null) {
        entries["SourceCidrBlock"] = input.SourceCidrBlock;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.RemoveFields !== undefined && input.RemoveFields !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorFilterRuleFieldList(input.RemoveFields, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyTrafficMirrorSessionRequest = (input, context) => {
    const entries = {};
    if (input.TrafficMirrorSessionId !== undefined && input.TrafficMirrorSessionId !== null) {
        entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
    }
    if (input.TrafficMirrorTargetId !== undefined && input.TrafficMirrorTargetId !== null) {
        entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
    }
    if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
        entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
    }
    if (input.PacketLength !== undefined && input.PacketLength !== null) {
        entries["PacketLength"] = input.PacketLength;
    }
    if (input.SessionNumber !== undefined && input.SessionNumber !== null) {
        entries["SessionNumber"] = input.SessionNumber;
    }
    if (input.VirtualNetworkId !== undefined && input.VirtualNetworkId !== null) {
        entries["VirtualNetworkId"] = input.VirtualNetworkId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.RemoveFields !== undefined && input.RemoveFields !== null) {
        const memberEntries = serializeAws_ec2TrafficMirrorSessionFieldList(input.RemoveFields, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyTransitGatewayOptions = (input, context) => {
    const entries = {};
    if (input.AddTransitGatewayCidrBlocks !== undefined && input.AddTransitGatewayCidrBlocks !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayCidrBlockStringList(input.AddTransitGatewayCidrBlocks, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveTransitGatewayCidrBlocks !== undefined && input.RemoveTransitGatewayCidrBlocks !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayCidrBlockStringList(input.RemoveTransitGatewayCidrBlocks, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.VpnEcmpSupport !== undefined && input.VpnEcmpSupport !== null) {
        entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
    }
    if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.AutoAcceptSharedAttachments !== undefined && input.AutoAcceptSharedAttachments !== null) {
        entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
    }
    if (input.DefaultRouteTableAssociation !== undefined && input.DefaultRouteTableAssociation !== null) {
        entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
    }
    if (input.AssociationDefaultRouteTableId !== undefined && input.AssociationDefaultRouteTableId !== null) {
        entries["AssociationDefaultRouteTableId"] = input.AssociationDefaultRouteTableId;
    }
    if (input.DefaultRouteTablePropagation !== undefined && input.DefaultRouteTablePropagation !== null) {
        entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
    }
    if (input.PropagationDefaultRouteTableId !== undefined && input.PropagationDefaultRouteTableId !== null) {
        entries["PropagationDefaultRouteTableId"] = input.PropagationDefaultRouteTableId;
    }
    return entries;
};
const serializeAws_ec2ModifyTransitGatewayPrefixListReferenceRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole !== undefined && input.Blackhole !== null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyTransitGatewayRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Options !== undefined && input.Options !== null) {
        const memberEntries = serializeAws_ec2ModifyTransitGatewayOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.AddSubnetIds !== undefined && input.AddSubnetIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.AddSubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveSubnetIds !== undefined && input.RemoveSubnetIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.RemoveSubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Options !== undefined && input.Options !== null) {
        const memberEntries = serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequestOptions = (input, context) => {
    const entries = {};
    if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.Ipv6Support !== undefined && input.Ipv6Support !== null) {
        entries["Ipv6Support"] = input.Ipv6Support;
    }
    if (input.ApplianceModeSupport !== undefined && input.ApplianceModeSupport !== null) {
        entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
    }
    return entries;
};
const serializeAws_ec2ModifyVolumeAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AutoEnableIO !== undefined && input.AutoEnableIO !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.AutoEnableIO, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AutoEnableIO.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyVolumeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VolumeId !== undefined && input.VolumeId !== null) {
        entries["VolumeId"] = input.VolumeId;
    }
    if (input.Size !== undefined && input.Size !== null) {
        entries["Size"] = input.Size;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.Throughput !== undefined && input.Throughput !== null) {
        entries["Throughput"] = input.Throughput;
    }
    if (input.MultiAttachEnabled !== undefined && input.MultiAttachEnabled !== null) {
        entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
    }
    return entries;
};
const serializeAws_ec2ModifyVpcAttributeRequest = (input, context) => {
    const entries = {};
    if (input.EnableDnsHostnames !== undefined && input.EnableDnsHostnames !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableDnsHostnames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableDnsHostnames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnableDnsSupport !== undefined && input.EnableDnsSupport !== null) {
        const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableDnsSupport, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableDnsSupport.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    return entries;
};
const serializeAws_ec2ModifyVpcEndpointConnectionNotificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ConnectionNotificationId !== undefined && input.ConnectionNotificationId !== null) {
        entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
    }
    if (input.ConnectionNotificationArn !== undefined && input.ConnectionNotificationArn !== null) {
        entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
    }
    if (input.ConnectionEvents !== undefined && input.ConnectionEvents !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.ConnectionEvents, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyVpcEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.ResetPolicy !== undefined && input.ResetPolicy !== null) {
        entries["ResetPolicy"] = input.ResetPolicy;
    }
    if (input.PolicyDocument !== undefined && input.PolicyDocument !== null) {
        entries["PolicyDocument"] = input.PolicyDocument;
    }
    if (input.AddRouteTableIds !== undefined && input.AddRouteTableIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointRouteTableIdList(input.AddRouteTableIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveRouteTableIds !== undefined && input.RemoveRouteTableIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointRouteTableIdList(input.RemoveRouteTableIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddSubnetIds !== undefined && input.AddSubnetIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointSubnetIdList(input.AddSubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveSubnetIds !== undefined && input.RemoveSubnetIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointSubnetIdList(input.RemoveSubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddSecurityGroupIds !== undefined && input.AddSecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointSecurityGroupIdList(input.AddSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveSecurityGroupIds !== undefined && input.RemoveSecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointSecurityGroupIdList(input.RemoveSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IpAddressType !== undefined && input.IpAddressType !== null) {
        entries["IpAddressType"] = input.IpAddressType;
    }
    if (input.DnsOptions !== undefined && input.DnsOptions !== null) {
        const memberEntries = serializeAws_ec2DnsOptionsSpecification(input.DnsOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsEnabled !== undefined && input.PrivateDnsEnabled !== null) {
        entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
    }
    return entries;
};
const serializeAws_ec2ModifyVpcEndpointServiceConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.PrivateDnsName !== undefined && input.PrivateDnsName !== null) {
        entries["PrivateDnsName"] = input.PrivateDnsName;
    }
    if (input.RemovePrivateDnsName !== undefined && input.RemovePrivateDnsName !== null) {
        entries["RemovePrivateDnsName"] = input.RemovePrivateDnsName;
    }
    if (input.AcceptanceRequired !== undefined && input.AcceptanceRequired !== null) {
        entries["AcceptanceRequired"] = input.AcceptanceRequired;
    }
    if (input.AddNetworkLoadBalancerArns !== undefined && input.AddNetworkLoadBalancerArns !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.AddNetworkLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveNetworkLoadBalancerArns !== undefined && input.RemoveNetworkLoadBalancerArns !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.RemoveNetworkLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddGatewayLoadBalancerArns !== undefined && input.AddGatewayLoadBalancerArns !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.AddGatewayLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveGatewayLoadBalancerArns !== undefined && input.RemoveGatewayLoadBalancerArns !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.RemoveGatewayLoadBalancerArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddSupportedIpAddressTypes !== undefined && input.AddSupportedIpAddressTypes !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.AddSupportedIpAddressTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveSupportedIpAddressTypes !== undefined && input.RemoveSupportedIpAddressTypes !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.RemoveSupportedIpAddressTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.PayerResponsibility !== undefined && input.PayerResponsibility !== null) {
        entries["PayerResponsibility"] = input.PayerResponsibility;
    }
    return entries;
};
const serializeAws_ec2ModifyVpcEndpointServicePermissionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.AddAllowedPrincipals !== undefined && input.AddAllowedPrincipals !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.AddAllowedPrincipals, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveAllowedPrincipals !== undefined && input.RemoveAllowedPrincipals !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.RemoveAllowedPrincipals, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ModifyVpcPeeringConnectionOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AccepterPeeringConnectionOptions !== undefined && input.AccepterPeeringConnectionOptions !== null) {
        const memberEntries = serializeAws_ec2PeeringConnectionOptionsRequest(input.AccepterPeeringConnectionOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AccepterPeeringConnectionOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RequesterPeeringConnectionOptions !== undefined && input.RequesterPeeringConnectionOptions !== null) {
        const memberEntries = serializeAws_ec2PeeringConnectionOptionsRequest(input.RequesterPeeringConnectionOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RequesterPeeringConnectionOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const serializeAws_ec2ModifyVpcTenancyRequest = (input, context) => {
    const entries = {};
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.InstanceTenancy !== undefined && input.InstanceTenancy !== null) {
        entries["InstanceTenancy"] = input.InstanceTenancy;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyVpnConnectionOptionsRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.LocalIpv4NetworkCidr !== undefined && input.LocalIpv4NetworkCidr !== null) {
        entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
    }
    if (input.RemoteIpv4NetworkCidr !== undefined && input.RemoteIpv4NetworkCidr !== null) {
        entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
    }
    if (input.LocalIpv6NetworkCidr !== undefined && input.LocalIpv6NetworkCidr !== null) {
        entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
    }
    if (input.RemoteIpv6NetworkCidr !== undefined && input.RemoteIpv6NetworkCidr !== null) {
        entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyVpnConnectionRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.CustomerGatewayId !== undefined && input.CustomerGatewayId !== null) {
        entries["CustomerGatewayId"] = input.CustomerGatewayId;
    }
    if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
        entries["VpnGatewayId"] = input.VpnGatewayId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyVpnTunnelCertificateRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnTunnelOutsideIpAddress !== undefined && input.VpnTunnelOutsideIpAddress !== null) {
        entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyVpnTunnelOptionsRequest = (input, context) => {
    const entries = {};
    if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
        entries["VpnConnectionId"] = input.VpnConnectionId;
    }
    if (input.VpnTunnelOutsideIpAddress !== undefined && input.VpnTunnelOutsideIpAddress !== null) {
        entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
    }
    if (input.TunnelOptions !== undefined && input.TunnelOptions !== null) {
        const memberEntries = serializeAws_ec2ModifyVpnTunnelOptionsSpecification(input.TunnelOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TunnelOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ModifyVpnTunnelOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.TunnelInsideCidr !== undefined && input.TunnelInsideCidr !== null) {
        entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
    }
    if (input.TunnelInsideIpv6Cidr !== undefined && input.TunnelInsideIpv6Cidr !== null) {
        entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
    }
    if (input.PreSharedKey !== undefined && input.PreSharedKey !== null) {
        entries["PreSharedKey"] = input.PreSharedKey;
    }
    if (input.Phase1LifetimeSeconds !== undefined && input.Phase1LifetimeSeconds !== null) {
        entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
    }
    if (input.Phase2LifetimeSeconds !== undefined && input.Phase2LifetimeSeconds !== null) {
        entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
    }
    if (input.RekeyMarginTimeSeconds !== undefined && input.RekeyMarginTimeSeconds !== null) {
        entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
    }
    if (input.RekeyFuzzPercentage !== undefined && input.RekeyFuzzPercentage !== null) {
        entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
    }
    if (input.ReplayWindowSize !== undefined && input.ReplayWindowSize !== null) {
        entries["ReplayWindowSize"] = input.ReplayWindowSize;
    }
    if (input.DPDTimeoutSeconds !== undefined && input.DPDTimeoutSeconds !== null) {
        entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
    }
    if (input.DPDTimeoutAction !== undefined && input.DPDTimeoutAction !== null) {
        entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
    }
    if (input.Phase1EncryptionAlgorithms !== undefined && input.Phase1EncryptionAlgorithms !== null) {
        const memberEntries = serializeAws_ec2Phase1EncryptionAlgorithmsRequestList(input.Phase1EncryptionAlgorithms, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2EncryptionAlgorithms !== undefined && input.Phase2EncryptionAlgorithms !== null) {
        const memberEntries = serializeAws_ec2Phase2EncryptionAlgorithmsRequestList(input.Phase2EncryptionAlgorithms, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase1IntegrityAlgorithms !== undefined && input.Phase1IntegrityAlgorithms !== null) {
        const memberEntries = serializeAws_ec2Phase1IntegrityAlgorithmsRequestList(input.Phase1IntegrityAlgorithms, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2IntegrityAlgorithms !== undefined && input.Phase2IntegrityAlgorithms !== null) {
        const memberEntries = serializeAws_ec2Phase2IntegrityAlgorithmsRequestList(input.Phase2IntegrityAlgorithms, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase1DHGroupNumbers !== undefined && input.Phase1DHGroupNumbers !== null) {
        const memberEntries = serializeAws_ec2Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2DHGroupNumbers !== undefined && input.Phase2DHGroupNumbers !== null) {
        const memberEntries = serializeAws_ec2Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IKEVersions !== undefined && input.IKEVersions !== null) {
        const memberEntries = serializeAws_ec2IKEVersionsRequestList(input.IKEVersions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.StartupAction !== undefined && input.StartupAction !== null) {
        entries["StartupAction"] = input.StartupAction;
    }
    return entries;
};
const serializeAws_ec2MonitorInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2MoveAddressToVpcRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    return entries;
};
const serializeAws_ec2MoveByoipCidrToIpamRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.IpamPoolOwner !== undefined && input.IpamPoolOwner !== null) {
        entries["IpamPoolOwner"] = input.IpamPoolOwner;
    }
    return entries;
};
const serializeAws_ec2NatGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2NetworkAclIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2NetworkInsightsAccessScopeAnalysisIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2NetworkInsightsAccessScopeIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2NetworkInsightsAnalysisIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2NetworkInsightsPathIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2NetworkInterfaceAttachmentChanges = (input, context) => {
    const entries = {};
    if (input.AttachmentId !== undefined && input.AttachmentId !== null) {
        entries["AttachmentId"] = input.AttachmentId;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    return entries;
};
const serializeAws_ec2NetworkInterfaceCount = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2NetworkInterfaceCountRequest = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2NetworkInterfaceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2NetworkInterfacePermissionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2NewDhcpConfiguration = (input, context) => {
    const entries = {};
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    if (input.Values !== undefined && input.Values !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.Values, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2NewDhcpConfigurationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2NewDhcpConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2OccurrenceDayRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`OccurenceDay.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2OnDemandOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.CapacityReservationOptions !== undefined && input.CapacityReservationOptions !== null) {
        const memberEntries = serializeAws_ec2CapacityReservationOptionsRequest(input.CapacityReservationOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SingleInstanceType !== undefined && input.SingleInstanceType !== null) {
        entries["SingleInstanceType"] = input.SingleInstanceType;
    }
    if (input.SingleAvailabilityZone !== undefined && input.SingleAvailabilityZone !== null) {
        entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
    }
    if (input.MinTargetCapacity !== undefined && input.MinTargetCapacity !== null) {
        entries["MinTargetCapacity"] = input.MinTargetCapacity;
    }
    if (input.MaxTotalPrice !== undefined && input.MaxTotalPrice !== null) {
        entries["MaxTotalPrice"] = input.MaxTotalPrice;
    }
    return entries;
};
const serializeAws_ec2OrganizationalUnitArnStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`OrganizationalUnitArn.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2OrganizationArnStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`OrganizationArn.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2OwnerStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Owner.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2PacketHeaderStatementRequest = (input, context) => {
    const entries = {};
    if (input.SourceAddresses !== undefined && input.SourceAddresses !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.SourceAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DestinationAddresses !== undefined && input.DestinationAddresses !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.DestinationAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SourcePorts !== undefined && input.SourcePorts !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.SourcePorts, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePort.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DestinationPorts !== undefined && input.DestinationPorts !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.DestinationPorts, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPort.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SourcePrefixLists !== undefined && input.SourcePrefixLists !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.SourcePrefixLists, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePrefixList.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DestinationPrefixLists !== undefined && input.DestinationPrefixLists !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.DestinationPrefixLists, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPrefixList.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Protocols !== undefined && input.Protocols !== null) {
        const memberEntries = serializeAws_ec2ProtocolList(input.Protocols, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Protocol.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2PathStatementRequest = (input, context) => {
    const entries = {};
    if (input.PacketHeaderStatement !== undefined && input.PacketHeaderStatement !== null) {
        const memberEntries = serializeAws_ec2PacketHeaderStatementRequest(input.PacketHeaderStatement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PacketHeaderStatement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceStatement !== undefined && input.ResourceStatement !== null) {
        const memberEntries = serializeAws_ec2ResourceStatementRequest(input.ResourceStatement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceStatement.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2PeeringConnectionOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AllowDnsResolutionFromRemoteVpc !== undefined && input.AllowDnsResolutionFromRemoteVpc !== null) {
        entries["AllowDnsResolutionFromRemoteVpc"] = input.AllowDnsResolutionFromRemoteVpc;
    }
    if (input.AllowEgressFromLocalClassicLinkToRemoteVpc !== undefined &&
        input.AllowEgressFromLocalClassicLinkToRemoteVpc !== null) {
        entries["AllowEgressFromLocalClassicLinkToRemoteVpc"] = input.AllowEgressFromLocalClassicLinkToRemoteVpc;
    }
    if (input.AllowEgressFromLocalVpcToRemoteClassicLink !== undefined &&
        input.AllowEgressFromLocalVpcToRemoteClassicLink !== null) {
        entries["AllowEgressFromLocalVpcToRemoteClassicLink"] = input.AllowEgressFromLocalVpcToRemoteClassicLink;
    }
    return entries;
};
const serializeAws_ec2Phase1DHGroupNumbersRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Phase1DHGroupNumbersRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2Phase1DHGroupNumbersRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2Phase1EncryptionAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Phase1EncryptionAlgorithmsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2Phase1EncryptionAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2Phase1IntegrityAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Phase1IntegrityAlgorithmsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2Phase1IntegrityAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2Phase2DHGroupNumbersRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Phase2DHGroupNumbersRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2Phase2DHGroupNumbersRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2Phase2EncryptionAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Phase2EncryptionAlgorithmsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2Phase2EncryptionAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2Phase2IntegrityAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Phase2IntegrityAlgorithmsRequestListValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2Phase2IntegrityAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2Placement = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Affinity !== undefined && input.Affinity !== null) {
        entries["Affinity"] = input.Affinity;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.PartitionNumber !== undefined && input.PartitionNumber !== null) {
        entries["PartitionNumber"] = input.PartitionNumber;
    }
    if (input.HostId !== undefined && input.HostId !== null) {
        entries["HostId"] = input.HostId;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    if (input.SpreadDomain !== undefined && input.SpreadDomain !== null) {
        entries["SpreadDomain"] = input.SpreadDomain;
    }
    if (input.HostResourceGroupArn !== undefined && input.HostResourceGroupArn !== null) {
        entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
    }
    return entries;
};
const serializeAws_ec2PlacementGroupIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`GroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2PlacementGroupStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2PortRange = (input, context) => {
    const entries = {};
    if (input.From !== undefined && input.From !== null) {
        entries["From"] = input.From;
    }
    if (input.To !== undefined && input.To !== null) {
        entries["To"] = input.To;
    }
    return entries;
};
const serializeAws_ec2PrefixListId = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    return entries;
};
const serializeAws_ec2PrefixListIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2PrefixListId(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2PrefixListResourceIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2PriceScheduleSpecification = (input, context) => {
    const entries = {};
    if (input.CurrencyCode !== undefined && input.CurrencyCode !== null) {
        entries["CurrencyCode"] = input.CurrencyCode;
    }
    if (input.Price !== undefined && input.Price !== null) {
        entries["Price"] = (0, smithy_client_1.serializeFloat)(input.Price);
    }
    if (input.Term !== undefined && input.Term !== null) {
        entries["Term"] = input.Term;
    }
    return entries;
};
const serializeAws_ec2PriceScheduleSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2PriceScheduleSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2PrivateDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input.HostnameType !== undefined && input.HostnameType !== null) {
        entries["HostnameType"] = input.HostnameType;
    }
    if (input.EnableResourceNameDnsARecord !== undefined && input.EnableResourceNameDnsARecord !== null) {
        entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
    }
    if (input.EnableResourceNameDnsAAAARecord !== undefined && input.EnableResourceNameDnsAAAARecord !== null) {
        entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
    }
    return entries;
};
const serializeAws_ec2PrivateIpAddressConfigSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ScheduledInstancesPrivateIpAddressConfig(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`PrivateIpAddressConfigSet.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2PrivateIpAddressSpecification = (input, context) => {
    const entries = {};
    if (input.Primary !== undefined && input.Primary !== null) {
        entries["Primary"] = input.Primary;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    return entries;
};
const serializeAws_ec2PrivateIpAddressSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2PrivateIpAddressSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2PrivateIpAddressStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`PrivateIpAddress.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ProductCodeStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ProductCode.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ProductDescriptionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ProtocolList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ProvisionByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.CidrAuthorizationContext !== undefined && input.CidrAuthorizationContext !== null) {
        const memberEntries = serializeAws_ec2CidrAuthorizationContext(input.CidrAuthorizationContext, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CidrAuthorizationContext.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PubliclyAdvertisable !== undefined && input.PubliclyAdvertisable !== null) {
        entries["PubliclyAdvertisable"] = input.PubliclyAdvertisable;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PoolTagSpecifications !== undefined && input.PoolTagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.PoolTagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolTagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MultiRegion !== undefined && input.MultiRegion !== null) {
        entries["MultiRegion"] = input.MultiRegion;
    }
    return entries;
};
const serializeAws_ec2ProvisionIpamPoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.CidrAuthorizationContext !== undefined && input.CidrAuthorizationContext !== null) {
        const memberEntries = serializeAws_ec2IpamCidrAuthorizationContext(input.CidrAuthorizationContext, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CidrAuthorizationContext.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ProvisionPublicIpv4PoolCidrRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.PoolId !== undefined && input.PoolId !== null) {
        entries["PoolId"] = input.PoolId;
    }
    if (input.NetmaskLength !== undefined && input.NetmaskLength !== null) {
        entries["NetmaskLength"] = input.NetmaskLength;
    }
    return entries;
};
const serializeAws_ec2PublicIpStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`PublicIp.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2PublicIpv4PoolIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2PurchaseHostReservationRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.CurrencyCode !== undefined && input.CurrencyCode !== null) {
        entries["CurrencyCode"] = input.CurrencyCode;
    }
    if (input.HostIdSet !== undefined && input.HostIdSet !== null) {
        const memberEntries = serializeAws_ec2RequestHostIdSet(input.HostIdSet, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LimitPrice !== undefined && input.LimitPrice !== null) {
        entries["LimitPrice"] = input.LimitPrice;
    }
    if (input.OfferingId !== undefined && input.OfferingId !== null) {
        entries["OfferingId"] = input.OfferingId;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2PurchaseRequest = (input, context) => {
    const entries = {};
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.PurchaseToken !== undefined && input.PurchaseToken !== null) {
        entries["PurchaseToken"] = input.PurchaseToken;
    }
    return entries;
};
const serializeAws_ec2PurchaseRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2PurchaseRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`PurchaseRequest.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2PurchaseReservedInstancesOfferingRequest = (input, context) => {
    const entries = {};
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.ReservedInstancesOfferingId !== undefined && input.ReservedInstancesOfferingId !== null) {
        entries["ReservedInstancesOfferingId"] = input.ReservedInstancesOfferingId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.LimitPrice !== undefined && input.LimitPrice !== null) {
        const memberEntries = serializeAws_ec2ReservedInstanceLimitPrice(input.LimitPrice, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LimitPrice.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PurchaseTime !== undefined && input.PurchaseTime !== null) {
        entries["PurchaseTime"] = input.PurchaseTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_ec2PurchaseScheduledInstancesRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PurchaseRequests !== undefined && input.PurchaseRequests !== null) {
        const memberEntries = serializeAws_ec2PurchaseRequestSet(input.PurchaseRequests, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PurchaseRequest.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ReasonCodesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2RebootInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RegionNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2RegionNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`RegionName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2RegisterImageRequest = (input, context) => {
    const entries = {};
    if (input.ImageLocation !== undefined && input.ImageLocation !== null) {
        entries["ImageLocation"] = input.ImageLocation;
    }
    if (input.Architecture !== undefined && input.Architecture !== null) {
        entries["Architecture"] = input.Architecture;
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        const memberEntries = serializeAws_ec2BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EnaSupport !== undefined && input.EnaSupport !== null) {
        entries["EnaSupport"] = input.EnaSupport;
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    if (input.BillingProducts !== undefined && input.BillingProducts !== null) {
        const memberEntries = serializeAws_ec2BillingProductList(input.BillingProducts, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BillingProduct.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.RootDeviceName !== undefined && input.RootDeviceName !== null) {
        entries["RootDeviceName"] = input.RootDeviceName;
    }
    if (input.SriovNetSupport !== undefined && input.SriovNetSupport !== null) {
        entries["SriovNetSupport"] = input.SriovNetSupport;
    }
    if (input.VirtualizationType !== undefined && input.VirtualizationType !== null) {
        entries["VirtualizationType"] = input.VirtualizationType;
    }
    if (input.BootMode !== undefined && input.BootMode !== null) {
        entries["BootMode"] = input.BootMode;
    }
    if (input.TpmSupport !== undefined && input.TpmSupport !== null) {
        entries["TpmSupport"] = input.TpmSupport;
    }
    if (input.UefiData !== undefined && input.UefiData !== null) {
        entries["UefiData"] = input.UefiData;
    }
    return entries;
};
const serializeAws_ec2RegisterInstanceEventNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceTagAttribute !== undefined && input.InstanceTagAttribute !== null) {
        const memberEntries = serializeAws_ec2RegisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagAttribute.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2RegisterInstanceTagAttributeRequest = (input, context) => {
    const entries = {};
    if (input.IncludeAllTagsOfInstance !== undefined && input.IncludeAllTagsOfInstance !== null) {
        entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
    }
    if (input.InstanceTagKeys !== undefined && input.InstanceTagKeys !== null) {
        const memberEntries = serializeAws_ec2InstanceTagKeySet(input.InstanceTagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
        entries["GroupIpAddress"] = input.GroupIpAddress;
    }
    if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RejectTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RejectTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RejectVpcEndpointConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
        const memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2RejectVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const serializeAws_ec2ReleaseAddressRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    if (input.NetworkBorderGroup !== undefined && input.NetworkBorderGroup !== null) {
        entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ReleaseHostsRequest = (input, context) => {
    const entries = {};
    if (input.HostIds !== undefined && input.HostIds !== null) {
        const memberEntries = serializeAws_ec2RequestHostIdList(input.HostIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ReleaseIpamPoolAllocationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.IpamPoolId !== undefined && input.IpamPoolId !== null) {
        entries["IpamPoolId"] = input.IpamPoolId;
    }
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.IpamPoolAllocationId !== undefined && input.IpamPoolAllocationId !== null) {
        entries["IpamPoolAllocationId"] = input.IpamPoolAllocationId;
    }
    return entries;
};
const serializeAws_ec2RemoveIpamOperatingRegion = (input, context) => {
    const entries = {};
    if (input.RegionName !== undefined && input.RegionName !== null) {
        entries["RegionName"] = input.RegionName;
    }
    return entries;
};
const serializeAws_ec2RemoveIpamOperatingRegionSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2RemoveIpamOperatingRegion(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2RemovePrefixListEntries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2RemovePrefixListEntry(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2RemovePrefixListEntry = (input, context) => {
    const entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
const serializeAws_ec2ReplaceIamInstanceProfileAssociationRequest = (input, context) => {
    const entries = {};
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    return entries;
};
const serializeAws_ec2ReplaceNetworkAclAssociationRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    return entries;
};
const serializeAws_ec2ReplaceNetworkAclEntryRequest = (input, context) => {
    const entries = {};
    if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
        entries["CidrBlock"] = input.CidrBlock;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Egress !== undefined && input.Egress !== null) {
        entries["Egress"] = input.Egress;
    }
    if (input.IcmpTypeCode !== undefined && input.IcmpTypeCode !== null) {
        const memberEntries = serializeAws_ec2IcmpTypeCode(input.IcmpTypeCode, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Icmp.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
        entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
    }
    if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
        entries["NetworkAclId"] = input.NetworkAclId;
    }
    if (input.PortRange !== undefined && input.PortRange !== null) {
        const memberEntries = serializeAws_ec2PortRange(input.PortRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        entries["Protocol"] = input.Protocol;
    }
    if (input.RuleAction !== undefined && input.RuleAction !== null) {
        entries["RuleAction"] = input.RuleAction;
    }
    if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
        entries["RuleNumber"] = input.RuleNumber;
    }
    return entries;
};
const serializeAws_ec2ReplaceRootVolumeTaskIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReplaceRootVolumeTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ReplaceRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.DestinationIpv6CidrBlock !== undefined && input.DestinationIpv6CidrBlock !== null) {
        entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
    }
    if (input.DestinationPrefixListId !== undefined && input.DestinationPrefixListId !== null) {
        entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
        entries["VpcEndpointId"] = input.VpcEndpointId;
    }
    if (input.EgressOnlyInternetGatewayId !== undefined && input.EgressOnlyInternetGatewayId !== null) {
        entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
    }
    if (input.GatewayId !== undefined && input.GatewayId !== null) {
        entries["GatewayId"] = input.GatewayId;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.LocalTarget !== undefined && input.LocalTarget !== null) {
        entries["LocalTarget"] = input.LocalTarget;
    }
    if (input.NatGatewayId !== undefined && input.NatGatewayId !== null) {
        entries["NatGatewayId"] = input.NatGatewayId;
    }
    if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
        entries["TransitGatewayId"] = input.TransitGatewayId;
    }
    if (input.LocalGatewayId !== undefined && input.LocalGatewayId !== null) {
        entries["LocalGatewayId"] = input.LocalGatewayId;
    }
    if (input.CarrierGatewayId !== undefined && input.CarrierGatewayId !== null) {
        entries["CarrierGatewayId"] = input.CarrierGatewayId;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    if (input.CoreNetworkArn !== undefined && input.CoreNetworkArn !== null) {
        entries["CoreNetworkArn"] = input.CoreNetworkArn;
    }
    return entries;
};
const serializeAws_ec2ReplaceRouteTableAssociationRequest = (input, context) => {
    const entries = {};
    if (input.AssociationId !== undefined && input.AssociationId !== null) {
        entries["AssociationId"] = input.AssociationId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
        entries["RouteTableId"] = input.RouteTableId;
    }
    return entries;
};
const serializeAws_ec2ReplaceTransitGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
        entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
    }
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
        entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
    }
    if (input.Blackhole !== undefined && input.Blackhole !== null) {
        entries["Blackhole"] = input.Blackhole;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ReportInstanceStatusRequest = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EndTime !== undefined && input.EndTime !== null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Instances !== undefined && input.Instances !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.Instances, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ReasonCodes !== undefined && input.ReasonCodes !== null) {
        const memberEntries = serializeAws_ec2ReasonCodesList(input.ReasonCodes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReasonCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.StartTime !== undefined && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Status !== undefined && input.Status !== null) {
        entries["Status"] = input.Status;
    }
    return entries;
};
const serializeAws_ec2RequestHostIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2RequestHostIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2RequestInstanceTypeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2RequestIpamResourceTag = (input, context) => {
    const entries = {};
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2RequestIpamResourceTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2RequestIpamResourceTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2RequestLaunchTemplateData = (input, context) => {
    const entries = {};
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateIamInstanceProfileSpecificationRequest(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateBlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplatesMonitoringRequest(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplatePlacementRequest(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamDiskId !== undefined && input.RamDiskId !== null) {
        entries["RamDiskId"] = input.RamDiskId;
    }
    if (input.DisableApiTermination !== undefined && input.DisableApiTermination !== null) {
        entries["DisableApiTermination"] = input.DisableApiTermination;
    }
    if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
        entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateTagSpecificationRequestList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ElasticGpuSpecifications !== undefined && input.ElasticGpuSpecifications !== null) {
        const memberEntries = serializeAws_ec2ElasticGpuSpecificationList(input.ElasticGpuSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ElasticInferenceAccelerators !== undefined && input.ElasticInferenceAccelerators !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateElasticInferenceAcceleratorList(input.ElasticInferenceAccelerators, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupStringList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceMarketOptions !== undefined && input.InstanceMarketOptions !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateInstanceMarketOptionsRequest(input.InstanceMarketOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceMarketOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CreditSpecification !== undefined && input.CreditSpecification !== null) {
        const memberEntries = serializeAws_ec2CreditSpecificationRequest(input.CreditSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreditSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CpuOptions !== undefined && input.CpuOptions !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateCpuOptionsRequest(input.CpuOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CapacityReservationSpecification !== undefined && input.CapacityReservationSpecification !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateCapacityReservationSpecificationRequest(input.CapacityReservationSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LicenseSpecifications !== undefined && input.LicenseSpecifications !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateLicenseSpecificationListRequest(input.LicenseSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.HibernationOptions !== undefined && input.HibernationOptions !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateHibernationOptionsRequest(input.HibernationOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HibernationOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MetadataOptions !== undefined && input.MetadataOptions !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateInstanceMetadataOptionsRequest(input.MetadataOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetadataOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnclaveOptions !== undefined && input.EnclaveOptions !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateEnclaveOptionsRequest(input.EnclaveOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnclaveOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        const memberEntries = serializeAws_ec2InstanceRequirementsRequest(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsNameOptions !== undefined && input.PrivateDnsNameOptions !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplatePrivateDnsNameOptionsRequest(input.PrivateDnsNameOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateDnsNameOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaintenanceOptions !== undefined && input.MaintenanceOptions !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateInstanceMaintenanceOptionsRequest(input.MaintenanceOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaintenanceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DisableApiStop !== undefined && input.DisableApiStop !== null) {
        entries["DisableApiStop"] = input.DisableApiStop;
    }
    return entries;
};
const serializeAws_ec2RequestSpotFleetRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SpotFleetRequestConfig !== undefined && input.SpotFleetRequestConfig !== null) {
        const memberEntries = serializeAws_ec2SpotFleetRequestConfigData(input.SpotFleetRequestConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotFleetRequestConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2RequestSpotInstancesRequest = (input, context) => {
    const entries = {};
    if (input.AvailabilityZoneGroup !== undefined && input.AvailabilityZoneGroup !== null) {
        entries["AvailabilityZoneGroup"] = input.AvailabilityZoneGroup;
    }
    if (input.BlockDurationMinutes !== undefined && input.BlockDurationMinutes !== null) {
        entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.LaunchGroup !== undefined && input.LaunchGroup !== null) {
        entries["LaunchGroup"] = input.LaunchGroup;
    }
    if (input.LaunchSpecification !== undefined && input.LaunchSpecification !== null) {
        const memberEntries = serializeAws_ec2RequestSpotLaunchSpecification(input.LaunchSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.ValidFrom !== undefined && input.ValidFrom !== null) {
        entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    return entries;
};
const serializeAws_ec2RequestSpotLaunchSpecification = (input, context) => {
    const entries = {};
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupIdList(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
        const memberEntries = serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddressingType !== undefined && input.AddressingType !== null) {
        entries["AddressingType"] = input.AddressingType;
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        const memberEntries = serializeAws_ec2BlockDeviceMappingList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        const memberEntries = serializeAws_ec2RunInstancesMonitoringEnabled(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        const memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        const memberEntries = serializeAws_ec2SpotPlacement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    return entries;
};
const serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ReservationFleetInstanceSpecification = (input, context) => {
    const entries = {};
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.InstancePlatform !== undefined && input.InstancePlatform !== null) {
        entries["InstancePlatform"] = input.InstancePlatform;
    }
    if (input.Weight !== undefined && input.Weight !== null) {
        entries["Weight"] = (0, smithy_client_1.serializeFloat)(input.Weight);
    }
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AvailabilityZoneId !== undefined && input.AvailabilityZoneId !== null) {
        entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.Priority !== undefined && input.Priority !== null) {
        entries["Priority"] = input.Priority;
    }
    return entries;
};
const serializeAws_ec2ReservationFleetInstanceSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ReservationFleetInstanceSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ReservedInstanceIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReservedInstanceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ReservedInstanceLimitPrice = (input, context) => {
    const entries = {};
    if (input.Amount !== undefined && input.Amount !== null) {
        entries["Amount"] = (0, smithy_client_1.serializeFloat)(input.Amount);
    }
    if (input.CurrencyCode !== undefined && input.CurrencyCode !== null) {
        entries["CurrencyCode"] = input.CurrencyCode;
    }
    return entries;
};
const serializeAws_ec2ReservedInstancesConfiguration = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.Platform !== undefined && input.Platform !== null) {
        entries["Platform"] = input.Platform;
    }
    if (input.Scope !== undefined && input.Scope !== null) {
        entries["Scope"] = input.Scope;
    }
    return entries;
};
const serializeAws_ec2ReservedInstancesConfigurationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ReservedInstancesConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ReservedInstancesIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReservedInstancesId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ReservedInstancesModificationIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReservedInstancesModificationId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ReservedInstancesOfferingIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ResetAddressAttributeRequest = (input, context) => {
    const entries = {};
    if (input.AllocationId !== undefined && input.AllocationId !== null) {
        entries["AllocationId"] = input.AllocationId;
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ResetEbsDefaultKmsKeyIdRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ResetFpgaImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
        entries["FpgaImageId"] = input.FpgaImageId;
    }
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    return entries;
};
const serializeAws_ec2ResetImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ResetInstanceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    return entries;
};
const serializeAws_ec2ResetNetworkInterfaceAttributeRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.SourceDestCheck !== undefined && input.SourceDestCheck !== null) {
        entries["SourceDestCheck"] = input.SourceDestCheck;
    }
    return entries;
};
const serializeAws_ec2ResetSnapshotAttributeRequest = (input, context) => {
    const entries = {};
    if (input.Attribute !== undefined && input.Attribute !== null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ResourceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ResourceList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ResourceStatementRequest = (input, context) => {
    const entries = {};
    if (input.Resources !== undefined && input.Resources !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.Resources, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceTypes !== undefined && input.ResourceTypes !== null) {
        const memberEntries = serializeAws_ec2ValueStringList(input.ResourceTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2RestorableByStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2RestoreAddressToClassicRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PublicIp !== undefined && input.PublicIp !== null) {
        entries["PublicIp"] = input.PublicIp;
    }
    return entries;
};
const serializeAws_ec2RestoreImageFromRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RestoreManagedPrefixListVersionRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.PreviousVersion !== undefined && input.PreviousVersion !== null) {
        entries["PreviousVersion"] = input.PreviousVersion;
    }
    if (input.CurrentVersion !== undefined && input.CurrentVersion !== null) {
        entries["CurrentVersion"] = input.CurrentVersion;
    }
    return entries;
};
const serializeAws_ec2RestoreSnapshotFromRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RestoreSnapshotTierRequest = (input, context) => {
    const entries = {};
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.TemporaryRestoreDays !== undefined && input.TemporaryRestoreDays !== null) {
        entries["TemporaryRestoreDays"] = input.TemporaryRestoreDays;
    }
    if (input.PermanentRestore !== undefined && input.PermanentRestore !== null) {
        entries["PermanentRestore"] = input.PermanentRestore;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RevokeClientVpnIngressRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.TargetNetworkCidr !== undefined && input.TargetNetworkCidr !== null) {
        entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
    }
    if (input.AccessGroupId !== undefined && input.AccessGroupId !== null) {
        entries["AccessGroupId"] = input.AccessGroupId;
    }
    if (input.RevokeAllGroups !== undefined && input.RevokeAllGroups !== null) {
        entries["RevokeAllGroups"] = input.RevokeAllGroups;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2RevokeSecurityGroupEgressRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleIds !== undefined && input.SecurityGroupRuleIds !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    return entries;
};
const serializeAws_ec2RevokeSecurityGroupIngressRequest = (input, context) => {
    const entries = {};
    if (input.CidrIp !== undefined && input.CidrIp !== null) {
        entries["CidrIp"] = input.CidrIp;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
        entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
    }
    if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
        entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.SecurityGroupRuleIds !== undefined && input.SecurityGroupRuleIds !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2RouteTableIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2RunInstancesMonitoringEnabled = (input, context) => {
    const entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_ec2RunInstancesRequest = (input, context) => {
    const entries = {};
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        const memberEntries = serializeAws_ec2BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        const memberEntries = serializeAws_ec2InstanceIpv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.MaxCount !== undefined && input.MaxCount !== null) {
        entries["MaxCount"] = input.MaxCount;
    }
    if (input.MinCount !== undefined && input.MinCount !== null) {
        entries["MinCount"] = input.MinCount;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        const memberEntries = serializeAws_ec2RunInstancesMonitoringEnabled(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        const memberEntries = serializeAws_ec2Placement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupStringList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DisableApiTermination !== undefined && input.DisableApiTermination !== null) {
        entries["DisableApiTermination"] = input.DisableApiTermination;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
        entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        const memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.ElasticGpuSpecification !== undefined && input.ElasticGpuSpecification !== null) {
        const memberEntries = serializeAws_ec2ElasticGpuSpecifications(input.ElasticGpuSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ElasticInferenceAccelerators !== undefined && input.ElasticInferenceAccelerators !== null) {
        const memberEntries = serializeAws_ec2ElasticInferenceAccelerators(input.ElasticInferenceAccelerators, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplate !== undefined && input.LaunchTemplate !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateSpecification(input.LaunchTemplate, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceMarketOptions !== undefined && input.InstanceMarketOptions !== null) {
        const memberEntries = serializeAws_ec2InstanceMarketOptionsRequest(input.InstanceMarketOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceMarketOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CreditSpecification !== undefined && input.CreditSpecification !== null) {
        const memberEntries = serializeAws_ec2CreditSpecificationRequest(input.CreditSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreditSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CpuOptions !== undefined && input.CpuOptions !== null) {
        const memberEntries = serializeAws_ec2CpuOptionsRequest(input.CpuOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CapacityReservationSpecification !== undefined && input.CapacityReservationSpecification !== null) {
        const memberEntries = serializeAws_ec2CapacityReservationSpecification(input.CapacityReservationSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.HibernationOptions !== undefined && input.HibernationOptions !== null) {
        const memberEntries = serializeAws_ec2HibernationOptionsRequest(input.HibernationOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HibernationOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LicenseSpecifications !== undefined && input.LicenseSpecifications !== null) {
        const memberEntries = serializeAws_ec2LicenseSpecificationListRequest(input.LicenseSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MetadataOptions !== undefined && input.MetadataOptions !== null) {
        const memberEntries = serializeAws_ec2InstanceMetadataOptionsRequest(input.MetadataOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetadataOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnclaveOptions !== undefined && input.EnclaveOptions !== null) {
        const memberEntries = serializeAws_ec2EnclaveOptionsRequest(input.EnclaveOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnclaveOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PrivateDnsNameOptions !== undefined && input.PrivateDnsNameOptions !== null) {
        const memberEntries = serializeAws_ec2PrivateDnsNameOptionsRequest(input.PrivateDnsNameOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateDnsNameOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaintenanceOptions !== undefined && input.MaintenanceOptions !== null) {
        const memberEntries = serializeAws_ec2InstanceMaintenanceOptionsRequest(input.MaintenanceOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaintenanceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DisableApiStop !== undefined && input.DisableApiStop !== null) {
        entries["DisableApiStop"] = input.DisableApiStop;
    }
    return entries;
};
const serializeAws_ec2RunScheduledInstancesRequest = (input, context) => {
    const entries = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.LaunchSpecification !== undefined && input.LaunchSpecification !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesLaunchSpecification(input.LaunchSpecification, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ScheduledInstanceId !== undefined && input.ScheduledInstanceId !== null) {
        entries["ScheduledInstanceId"] = input.ScheduledInstanceId;
    }
    return entries;
};
const serializeAws_ec2S3ObjectTag = (input, context) => {
    const entries = {};
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2S3ObjectTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2S3ObjectTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2S3Storage = (input, context) => {
    const entries = {};
    if (input.AWSAccessKeyId !== undefined && input.AWSAccessKeyId !== null) {
        entries["AWSAccessKeyId"] = input.AWSAccessKeyId;
    }
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.Prefix !== undefined && input.Prefix !== null) {
        entries["Prefix"] = input.Prefix;
    }
    if (input.UploadPolicy !== undefined && input.UploadPolicy !== null) {
        entries["UploadPolicy"] = context.base64Encoder(input.UploadPolicy);
    }
    if (input.UploadPolicySignature !== undefined && input.UploadPolicySignature !== null) {
        entries["UploadPolicySignature"] = input.UploadPolicySignature;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstanceIdRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ScheduledInstanceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstanceRecurrenceRequest = (input, context) => {
    const entries = {};
    if (input.Frequency !== undefined && input.Frequency !== null) {
        entries["Frequency"] = input.Frequency;
    }
    if (input.Interval !== undefined && input.Interval !== null) {
        entries["Interval"] = input.Interval;
    }
    if (input.OccurrenceDays !== undefined && input.OccurrenceDays !== null) {
        const memberEntries = serializeAws_ec2OccurrenceDayRequestSet(input.OccurrenceDays, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OccurrenceDay.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.OccurrenceRelativeToEnd !== undefined && input.OccurrenceRelativeToEnd !== null) {
        entries["OccurrenceRelativeToEnd"] = input.OccurrenceRelativeToEnd;
    }
    if (input.OccurrenceUnit !== undefined && input.OccurrenceUnit !== null) {
        entries["OccurrenceUnit"] = input.OccurrenceUnit;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesBlockDeviceMapping = (input, context) => {
    const entries = {};
    if (input.DeviceName !== undefined && input.DeviceName !== null) {
        entries["DeviceName"] = input.DeviceName;
    }
    if (input.Ebs !== undefined && input.Ebs !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesEbs(input.Ebs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NoDevice !== undefined && input.NoDevice !== null) {
        entries["NoDevice"] = input.NoDevice;
    }
    if (input.VirtualName !== undefined && input.VirtualName !== null) {
        entries["VirtualName"] = input.VirtualName;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesBlockDeviceMappingSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ScheduledInstancesBlockDeviceMapping(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesEbs = (input, context) => {
    const entries = {};
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Encrypted !== undefined && input.Encrypted !== null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.Iops !== undefined && input.Iops !== null) {
        entries["Iops"] = input.Iops;
    }
    if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
        entries["SnapshotId"] = input.SnapshotId;
    }
    if (input.VolumeSize !== undefined && input.VolumeSize !== null) {
        entries["VolumeSize"] = input.VolumeSize;
    }
    if (input.VolumeType !== undefined && input.VolumeType !== null) {
        entries["VolumeType"] = input.VolumeType;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesIamInstanceProfile = (input, context) => {
    const entries = {};
    if (input.Arn !== undefined && input.Arn !== null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Name !== undefined && input.Name !== null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesIpv6Address = (input, context) => {
    const entries = {};
    if (input.Ipv6Address !== undefined && input.Ipv6Address !== null) {
        entries["Ipv6Address"] = input.Ipv6Address;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesIpv6AddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ScheduledInstancesIpv6Address(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Ipv6Address.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesLaunchSpecification = (input, context) => {
    const entries = {};
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesBlockDeviceMappingSet(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesIamInstanceProfile(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesMonitoring(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesNetworkInterfaceSet(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesPlacement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesSecurityGroupIdSet(input.SecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesMonitoring = (input, context) => {
    const entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesNetworkInterface = (input, context) => {
    const entries = {};
    if (input.AssociatePublicIpAddress !== undefined && input.AssociatePublicIpAddress !== null) {
        entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
    }
    if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
        entries["DeleteOnTermination"] = input.DeleteOnTermination;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
        entries["DeviceIndex"] = input.DeviceIndex;
    }
    if (input.Groups !== undefined && input.Groups !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesSecurityGroupIdSet(input.Groups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Group.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
        entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
    }
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        const memberEntries = serializeAws_ec2ScheduledInstancesIpv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    if (input.PrivateIpAddressConfigs !== undefined && input.PrivateIpAddressConfigs !== null) {
        const memberEntries = serializeAws_ec2PrivateIpAddressConfigSet(input.PrivateIpAddressConfigs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddressConfig.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
        entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesNetworkInterfaceSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ScheduledInstancesNetworkInterface(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`NetworkInterface.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesPlacement = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesPrivateIpAddressConfig = (input, context) => {
    const entries = {};
    if (input.Primary !== undefined && input.Primary !== null) {
        entries["Primary"] = input.Primary;
    }
    if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
        entries["PrivateIpAddress"] = input.PrivateIpAddress;
    }
    return entries;
};
const serializeAws_ec2ScheduledInstancesSecurityGroupIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2SearchLocalGatewayRoutesRequest = (input, context) => {
    const entries = {};
    if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
        entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2SearchTransitGatewayMulticastGroupsRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
        entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined && input.NextToken !== null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2SearchTransitGatewayRoutesRequest = (input, context) => {
    const entries = {};
    if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
        entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
    }
    if (input.Filters !== undefined && input.Filters !== null) {
        const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults !== undefined && input.MaxResults !== null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2SecurityGroupIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2SecurityGroupRuleDescription = (input, context) => {
    const entries = {};
    if (input.SecurityGroupRuleId !== undefined && input.SecurityGroupRuleId !== null) {
        entries["SecurityGroupRuleId"] = input.SecurityGroupRuleId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const serializeAws_ec2SecurityGroupRuleDescriptionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2SecurityGroupRuleDescription(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2SecurityGroupRuleIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2SecurityGroupRuleRequest = (input, context) => {
    const entries = {};
    if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
        entries["IpProtocol"] = input.IpProtocol;
    }
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    if (input.CidrIpv4 !== undefined && input.CidrIpv4 !== null) {
        entries["CidrIpv4"] = input.CidrIpv4;
    }
    if (input.CidrIpv6 !== undefined && input.CidrIpv6 !== null) {
        entries["CidrIpv6"] = input.CidrIpv6;
    }
    if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
        entries["PrefixListId"] = input.PrefixListId;
    }
    if (input.ReferencedGroupId !== undefined && input.ReferencedGroupId !== null) {
        entries["ReferencedGroupId"] = input.ReferencedGroupId;
    }
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const serializeAws_ec2SecurityGroupRuleUpdate = (input, context) => {
    const entries = {};
    if (input.SecurityGroupRuleId !== undefined && input.SecurityGroupRuleId !== null) {
        entries["SecurityGroupRuleId"] = input.SecurityGroupRuleId;
    }
    if (input.SecurityGroupRule !== undefined && input.SecurityGroupRule !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupRuleRequest(input.SecurityGroupRule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRule.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2SecurityGroupRuleUpdateList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2SecurityGroupRuleUpdate(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2SecurityGroupStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroup.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2SendDiagnosticInterruptRequest = (input, context) => {
    const entries = {};
    if (input.InstanceId !== undefined && input.InstanceId !== null) {
        entries["InstanceId"] = input.InstanceId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2SlotDateTimeRangeRequest = (input, context) => {
    const entries = {};
    if (input.EarliestTime !== undefined && input.EarliestTime !== null) {
        entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
    }
    if (input.LatestTime !== undefined && input.LatestTime !== null) {
        entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_ec2SlotStartTimeRangeRequest = (input, context) => {
    const entries = {};
    if (input.EarliestTime !== undefined && input.EarliestTime !== null) {
        entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
    }
    if (input.LatestTime !== undefined && input.LatestTime !== null) {
        entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
    }
    return entries;
};
const serializeAws_ec2SnapshotDiskContainer = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.Format !== undefined && input.Format !== null) {
        entries["Format"] = input.Format;
    }
    if (input.Url !== undefined && input.Url !== null) {
        entries["Url"] = input.Url;
    }
    if (input.UserBucket !== undefined && input.UserBucket !== null) {
        const memberEntries = serializeAws_ec2UserBucket(input.UserBucket, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserBucket.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2SnapshotIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SnapshotId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2SpotCapacityRebalance = (input, context) => {
    const entries = {};
    if (input.ReplacementStrategy !== undefined && input.ReplacementStrategy !== null) {
        entries["ReplacementStrategy"] = input.ReplacementStrategy;
    }
    if (input.TerminationDelay !== undefined && input.TerminationDelay !== null) {
        entries["TerminationDelay"] = input.TerminationDelay;
    }
    return entries;
};
const serializeAws_ec2SpotFleetLaunchSpecification = (input, context) => {
    const entries = {};
    if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
        const memberEntries = serializeAws_ec2GroupIdentifierList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AddressingType !== undefined && input.AddressingType !== null) {
        entries["AddressingType"] = input.AddressingType;
    }
    if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
        const memberEntries = serializeAws_ec2BlockDeviceMappingList(input.BlockDeviceMappings, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
        entries["EbsOptimized"] = input.EbsOptimized;
    }
    if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
        const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ImageId !== undefined && input.ImageId !== null) {
        entries["ImageId"] = input.ImageId;
    }
    if (input.InstanceType !== undefined && input.InstanceType !== null) {
        entries["InstanceType"] = input.InstanceType;
    }
    if (input.KernelId !== undefined && input.KernelId !== null) {
        entries["KernelId"] = input.KernelId;
    }
    if (input.KeyName !== undefined && input.KeyName !== null) {
        entries["KeyName"] = input.KeyName;
    }
    if (input.Monitoring !== undefined && input.Monitoring !== null) {
        const memberEntries = serializeAws_ec2SpotFleetMonitoring(input.Monitoring, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
        const memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Placement !== undefined && input.Placement !== null) {
        const memberEntries = serializeAws_ec2SpotPlacement(input.Placement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
        entries["RamdiskId"] = input.RamdiskId;
    }
    if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.SubnetId !== undefined && input.SubnetId !== null) {
        entries["SubnetId"] = input.SubnetId;
    }
    if (input.UserData !== undefined && input.UserData !== null) {
        entries["UserData"] = input.UserData;
    }
    if (input.WeightedCapacity !== undefined && input.WeightedCapacity !== null) {
        entries["WeightedCapacity"] = (0, smithy_client_1.serializeFloat)(input.WeightedCapacity);
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2SpotFleetTagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecificationSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceRequirements !== undefined && input.InstanceRequirements !== null) {
        const memberEntries = serializeAws_ec2InstanceRequirements(input.InstanceRequirements, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2SpotFleetMonitoring = (input, context) => {
    const entries = {};
    if (input.Enabled !== undefined && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_ec2SpotFleetRequestConfigData = (input, context) => {
    const entries = {};
    if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.OnDemandAllocationStrategy !== undefined && input.OnDemandAllocationStrategy !== null) {
        entries["OnDemandAllocationStrategy"] = input.OnDemandAllocationStrategy;
    }
    if (input.SpotMaintenanceStrategies !== undefined && input.SpotMaintenanceStrategies !== null) {
        const memberEntries = serializeAws_ec2SpotMaintenanceStrategies(input.SpotMaintenanceStrategies, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotMaintenanceStrategies.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
        entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
    }
    if (input.FulfilledCapacity !== undefined && input.FulfilledCapacity !== null) {
        entries["FulfilledCapacity"] = (0, smithy_client_1.serializeFloat)(input.FulfilledCapacity);
    }
    if (input.OnDemandFulfilledCapacity !== undefined && input.OnDemandFulfilledCapacity !== null) {
        entries["OnDemandFulfilledCapacity"] = (0, smithy_client_1.serializeFloat)(input.OnDemandFulfilledCapacity);
    }
    if (input.IamFleetRole !== undefined && input.IamFleetRole !== null) {
        entries["IamFleetRole"] = input.IamFleetRole;
    }
    if (input.LaunchSpecifications !== undefined && input.LaunchSpecifications !== null) {
        const memberEntries = serializeAws_ec2LaunchSpecsList(input.LaunchSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
        const memberEntries = serializeAws_ec2LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
        entries["SpotPrice"] = input.SpotPrice;
    }
    if (input.TargetCapacity !== undefined && input.TargetCapacity !== null) {
        entries["TargetCapacity"] = input.TargetCapacity;
    }
    if (input.OnDemandTargetCapacity !== undefined && input.OnDemandTargetCapacity !== null) {
        entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
    }
    if (input.OnDemandMaxTotalPrice !== undefined && input.OnDemandMaxTotalPrice !== null) {
        entries["OnDemandMaxTotalPrice"] = input.OnDemandMaxTotalPrice;
    }
    if (input.SpotMaxTotalPrice !== undefined && input.SpotMaxTotalPrice !== null) {
        entries["SpotMaxTotalPrice"] = input.SpotMaxTotalPrice;
    }
    if (input.TerminateInstancesWithExpiration !== undefined && input.TerminateInstancesWithExpiration !== null) {
        entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
    }
    if (input.Type !== undefined && input.Type !== null) {
        entries["Type"] = input.Type;
    }
    if (input.ValidFrom !== undefined && input.ValidFrom !== null) {
        entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.ReplaceUnhealthyInstances !== undefined && input.ReplaceUnhealthyInstances !== null) {
        entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    if (input.LoadBalancersConfig !== undefined && input.LoadBalancersConfig !== null) {
        const memberEntries = serializeAws_ec2LoadBalancersConfig(input.LoadBalancersConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancersConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstancePoolsToUseCount !== undefined && input.InstancePoolsToUseCount !== null) {
        entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
    }
    if (input.Context !== undefined && input.Context !== null) {
        entries["Context"] = input.Context;
    }
    if (input.TargetCapacityUnitType !== undefined && input.TargetCapacityUnitType !== null) {
        entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2SpotFleetRequestIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2SpotFleetTagSpecification = (input, context) => {
    const entries = {};
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        const memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2SpotFleetTagSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2SpotFleetTagSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2SpotInstanceRequestIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SpotInstanceRequestId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2SpotMaintenanceStrategies = (input, context) => {
    const entries = {};
    if (input.CapacityRebalance !== undefined && input.CapacityRebalance !== null) {
        const memberEntries = serializeAws_ec2SpotCapacityRebalance(input.CapacityRebalance, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityRebalance.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2SpotMarketOptions = (input, context) => {
    const entries = {};
    if (input.MaxPrice !== undefined && input.MaxPrice !== null) {
        entries["MaxPrice"] = input.MaxPrice;
    }
    if (input.SpotInstanceType !== undefined && input.SpotInstanceType !== null) {
        entries["SpotInstanceType"] = input.SpotInstanceType;
    }
    if (input.BlockDurationMinutes !== undefined && input.BlockDurationMinutes !== null) {
        entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
    }
    if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
        entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    return entries;
};
const serializeAws_ec2SpotOptionsRequest = (input, context) => {
    const entries = {};
    if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
        entries["AllocationStrategy"] = input.AllocationStrategy;
    }
    if (input.MaintenanceStrategies !== undefined && input.MaintenanceStrategies !== null) {
        const memberEntries = serializeAws_ec2FleetSpotMaintenanceStrategiesRequest(input.MaintenanceStrategies, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaintenanceStrategies.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
        entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
    }
    if (input.InstancePoolsToUseCount !== undefined && input.InstancePoolsToUseCount !== null) {
        entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
    }
    if (input.SingleInstanceType !== undefined && input.SingleInstanceType !== null) {
        entries["SingleInstanceType"] = input.SingleInstanceType;
    }
    if (input.SingleAvailabilityZone !== undefined && input.SingleAvailabilityZone !== null) {
        entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
    }
    if (input.MinTargetCapacity !== undefined && input.MinTargetCapacity !== null) {
        entries["MinTargetCapacity"] = input.MinTargetCapacity;
    }
    if (input.MaxTotalPrice !== undefined && input.MaxTotalPrice !== null) {
        entries["MaxTotalPrice"] = input.MaxTotalPrice;
    }
    return entries;
};
const serializeAws_ec2SpotPlacement = (input, context) => {
    const entries = {};
    if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Tenancy !== undefined && input.Tenancy !== null) {
        entries["Tenancy"] = input.Tenancy;
    }
    return entries;
};
const serializeAws_ec2StartInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsAccessScopeId !== undefined && input.NetworkInsightsAccessScopeId !== null) {
        entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2StartNetworkInsightsAnalysisRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInsightsPathId !== undefined && input.NetworkInsightsPathId !== null) {
        entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
    }
    if (input.FilterInArns !== undefined && input.FilterInArns !== null) {
        const memberEntries = serializeAws_ec2ArnList(input.FilterInArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FilterInArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
        const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.ClientToken === undefined) {
        input.ClientToken = (0, uuid_1.v4)();
    }
    if (input.ClientToken !== undefined && input.ClientToken !== null) {
        entries["ClientToken"] = input.ClientToken;
    }
    return entries;
};
const serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.ServiceId !== undefined && input.ServiceId !== null) {
        entries["ServiceId"] = input.ServiceId;
    }
    return entries;
};
const serializeAws_ec2StopInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Hibernate !== undefined && input.Hibernate !== null) {
        entries["Hibernate"] = input.Hibernate;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.Force !== undefined && input.Force !== null) {
        entries["Force"] = input.Force;
    }
    return entries;
};
const serializeAws_ec2Storage = (input, context) => {
    const entries = {};
    if (input.S3 !== undefined && input.S3 !== null) {
        const memberEntries = serializeAws_ec2S3Storage(input.S3, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2StorageLocation = (input, context) => {
    const entries = {};
    if (input.Bucket !== undefined && input.Bucket !== null) {
        entries["Bucket"] = input.Bucket;
    }
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    return entries;
};
const serializeAws_ec2SubnetIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SubnetId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2Tag = (input, context) => {
    const entries = {};
    if (input.Key !== undefined && input.Key !== null) {
        entries["Key"] = input.Key;
    }
    if (input.Value !== undefined && input.Value !== null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_ec2TagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2TagSpecification = (input, context) => {
    const entries = {};
    if (input.ResourceType !== undefined && input.ResourceType !== null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        const memberEntries = serializeAws_ec2TagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2TagSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2TagSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2TargetCapacitySpecificationRequest = (input, context) => {
    const entries = {};
    if (input.TotalTargetCapacity !== undefined && input.TotalTargetCapacity !== null) {
        entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
    }
    if (input.OnDemandTargetCapacity !== undefined && input.OnDemandTargetCapacity !== null) {
        entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
    }
    if (input.SpotTargetCapacity !== undefined && input.SpotTargetCapacity !== null) {
        entries["SpotTargetCapacity"] = input.SpotTargetCapacity;
    }
    if (input.DefaultTargetCapacityType !== undefined && input.DefaultTargetCapacityType !== null) {
        entries["DefaultTargetCapacityType"] = input.DefaultTargetCapacityType;
    }
    if (input.TargetCapacityUnitType !== undefined && input.TargetCapacityUnitType !== null) {
        entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
    }
    return entries;
};
const serializeAws_ec2TargetConfigurationRequest = (input, context) => {
    const entries = {};
    if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
        entries["InstanceCount"] = input.InstanceCount;
    }
    if (input.OfferingId !== undefined && input.OfferingId !== null) {
        entries["OfferingId"] = input.OfferingId;
    }
    return entries;
};
const serializeAws_ec2TargetConfigurationRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2TargetConfigurationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`TargetConfigurationRequest.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2TargetGroup = (input, context) => {
    const entries = {};
    if (input.Arn !== undefined && input.Arn !== null) {
        entries["Arn"] = input.Arn;
    }
    return entries;
};
const serializeAws_ec2TargetGroups = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2TargetGroup(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2TargetGroupsConfig = (input, context) => {
    const entries = {};
    if (input.TargetGroups !== undefined && input.TargetGroups !== null) {
        const memberEntries = serializeAws_ec2TargetGroups(input.TargetGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetGroups.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2TerminateClientVpnConnectionsRequest = (input, context) => {
    const entries = {};
    if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
        entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
    }
    if (input.ConnectionId !== undefined && input.ConnectionId !== null) {
        entries["ConnectionId"] = input.ConnectionId;
    }
    if (input.Username !== undefined && input.Username !== null) {
        entries["Username"] = input.Username;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2TerminateInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ThroughResourcesStatementRequest = (input, context) => {
    const entries = {};
    if (input.ResourceStatement !== undefined && input.ResourceStatement !== null) {
        const memberEntries = serializeAws_ec2ResourceStatementRequest(input.ResourceStatement, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceStatement.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2ThroughResourcesStatementRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2ThroughResourcesStatementRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2TotalLocalStorageGB = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = (0, smithy_client_1.serializeFloat)(input.Min);
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = (0, smithy_client_1.serializeFloat)(input.Max);
    }
    return entries;
};
const serializeAws_ec2TotalLocalStorageGBRequest = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = (0, smithy_client_1.serializeFloat)(input.Min);
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = (0, smithy_client_1.serializeFloat)(input.Max);
    }
    return entries;
};
const serializeAws_ec2TrafficMirrorFilterIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TrafficMirrorFilterRuleFieldList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TrafficMirrorNetworkServiceList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TrafficMirrorPortRangeRequest = (input, context) => {
    const entries = {};
    if (input.FromPort !== undefined && input.FromPort !== null) {
        entries["FromPort"] = input.FromPort;
    }
    if (input.ToPort !== undefined && input.ToPort !== null) {
        entries["ToPort"] = input.ToPort;
    }
    return entries;
};
const serializeAws_ec2TrafficMirrorSessionFieldList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TrafficMirrorSessionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TrafficMirrorTargetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TransitGatewayAttachmentIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TransitGatewayCidrBlockStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TransitGatewayConnectPeerIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TransitGatewayConnectRequestBgpOptions = (input, context) => {
    const entries = {};
    if (input.PeerAsn !== undefined && input.PeerAsn !== null) {
        entries["PeerAsn"] = input.PeerAsn;
    }
    return entries;
};
const serializeAws_ec2TransitGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TransitGatewayMulticastDomainIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TransitGatewayNetworkInterfaceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TransitGatewayRequestOptions = (input, context) => {
    const entries = {};
    if (input.AmazonSideAsn !== undefined && input.AmazonSideAsn !== null) {
        entries["AmazonSideAsn"] = input.AmazonSideAsn;
    }
    if (input.AutoAcceptSharedAttachments !== undefined && input.AutoAcceptSharedAttachments !== null) {
        entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
    }
    if (input.DefaultRouteTableAssociation !== undefined && input.DefaultRouteTableAssociation !== null) {
        entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
    }
    if (input.DefaultRouteTablePropagation !== undefined && input.DefaultRouteTablePropagation !== null) {
        entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
    }
    if (input.VpnEcmpSupport !== undefined && input.VpnEcmpSupport !== null) {
        entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
    }
    if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
        entries["DnsSupport"] = input.DnsSupport;
    }
    if (input.MulticastSupport !== undefined && input.MulticastSupport !== null) {
        entries["MulticastSupport"] = input.MulticastSupport;
    }
    if (input.TransitGatewayCidrBlocks !== undefined && input.TransitGatewayCidrBlocks !== null) {
        const memberEntries = serializeAws_ec2TransitGatewayCidrBlockStringList(input.TransitGatewayCidrBlocks, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2TransitGatewayRouteTableIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TransitGatewaySubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2TrunkInterfaceAssociationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2UnassignIpv6AddressesRequest = (input, context) => {
    const entries = {};
    if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
        const memberEntries = serializeAws_ec2Ipv6AddressList(input.Ipv6Addresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv6Prefixes !== undefined && input.Ipv6Prefixes !== null) {
        const memberEntries = serializeAws_ec2IpPrefixList(input.Ipv6Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    return entries;
};
const serializeAws_ec2UnassignPrivateIpAddressesRequest = (input, context) => {
    const entries = {};
    if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
        entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
    }
    if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
        const memberEntries = serializeAws_ec2PrivateIpAddressStringList(input.PrivateIpAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Ipv4Prefixes !== undefined && input.Ipv4Prefixes !== null) {
        const memberEntries = serializeAws_ec2IpPrefixList(input.Ipv4Prefixes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2UnmonitorInstancesRequest = (input, context) => {
    const entries = {};
    if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
        const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleDescriptions !== undefined && input.SecurityGroupRuleDescriptions !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupRuleDescriptionList(input.SecurityGroupRuleDescriptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressRequest = (input, context) => {
    const entries = {};
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
        const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.SecurityGroupRuleDescriptions !== undefined && input.SecurityGroupRuleDescriptions !== null) {
        const memberEntries = serializeAws_ec2SecurityGroupRuleDescriptionList(input.SecurityGroupRuleDescriptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_ec2UserBucket = (input, context) => {
    const entries = {};
    if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Key !== undefined && input.S3Key !== null) {
        entries["S3Key"] = input.S3Key;
    }
    return entries;
};
const serializeAws_ec2UserData = (input, context) => {
    const entries = {};
    if (input.Data !== undefined && input.Data !== null) {
        entries["Data"] = input.Data;
    }
    return entries;
};
const serializeAws_ec2UserGroupStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`UserGroup.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2UserIdGroupPair = (input, context) => {
    const entries = {};
    if (input.Description !== undefined && input.Description !== null) {
        entries["Description"] = input.Description;
    }
    if (input.GroupId !== undefined && input.GroupId !== null) {
        entries["GroupId"] = input.GroupId;
    }
    if (input.GroupName !== undefined && input.GroupName !== null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.PeeringStatus !== undefined && input.PeeringStatus !== null) {
        entries["PeeringStatus"] = input.PeeringStatus;
    }
    if (input.UserId !== undefined && input.UserId !== null) {
        entries["UserId"] = input.UserId;
    }
    if (input.VpcId !== undefined && input.VpcId !== null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
        entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
    }
    return entries;
};
const serializeAws_ec2UserIdGroupPairList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2UserIdGroupPair(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2UserIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`UserId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ValueStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VCpuCountRange = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2VCpuCountRangeRequest = (input, context) => {
    const entries = {};
    if (input.Min !== undefined && input.Min !== null) {
        entries["Min"] = input.Min;
    }
    if (input.Max !== undefined && input.Max !== null) {
        entries["Max"] = input.Max;
    }
    return entries;
};
const serializeAws_ec2VersionStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VirtualizationTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VolumeDetail = (input, context) => {
    const entries = {};
    if (input.Size !== undefined && input.Size !== null) {
        entries["Size"] = input.Size;
    }
    return entries;
};
const serializeAws_ec2VolumeIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VolumeId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpcClassicLinkIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpcEndpointIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpcEndpointRouteTableIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpcEndpointSecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpcEndpointServiceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpcEndpointSubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpcIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpcPeeringConnectionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpnConnectionIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpnConnectionId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpnConnectionOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.EnableAcceleration !== undefined && input.EnableAcceleration !== null) {
        entries["EnableAcceleration"] = input.EnableAcceleration;
    }
    if (input.StaticRoutesOnly !== undefined && input.StaticRoutesOnly !== null) {
        entries["StaticRoutesOnly"] = input.StaticRoutesOnly;
    }
    if (input.TunnelInsideIpVersion !== undefined && input.TunnelInsideIpVersion !== null) {
        entries["TunnelInsideIpVersion"] = input.TunnelInsideIpVersion;
    }
    if (input.TunnelOptions !== undefined && input.TunnelOptions !== null) {
        const memberEntries = serializeAws_ec2VpnTunnelOptionsSpecificationsList(input.TunnelOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TunnelOptions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.LocalIpv4NetworkCidr !== undefined && input.LocalIpv4NetworkCidr !== null) {
        entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
    }
    if (input.RemoteIpv4NetworkCidr !== undefined && input.RemoteIpv4NetworkCidr !== null) {
        entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
    }
    if (input.LocalIpv6NetworkCidr !== undefined && input.LocalIpv6NetworkCidr !== null) {
        entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
    }
    if (input.RemoteIpv6NetworkCidr !== undefined && input.RemoteIpv6NetworkCidr !== null) {
        entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
    }
    return entries;
};
const serializeAws_ec2VpnGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpnGatewayId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2VpnTunnelOptionsSpecification = (input, context) => {
    const entries = {};
    if (input.TunnelInsideCidr !== undefined && input.TunnelInsideCidr !== null) {
        entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
    }
    if (input.TunnelInsideIpv6Cidr !== undefined && input.TunnelInsideIpv6Cidr !== null) {
        entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
    }
    if (input.PreSharedKey !== undefined && input.PreSharedKey !== null) {
        entries["PreSharedKey"] = input.PreSharedKey;
    }
    if (input.Phase1LifetimeSeconds !== undefined && input.Phase1LifetimeSeconds !== null) {
        entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
    }
    if (input.Phase2LifetimeSeconds !== undefined && input.Phase2LifetimeSeconds !== null) {
        entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
    }
    if (input.RekeyMarginTimeSeconds !== undefined && input.RekeyMarginTimeSeconds !== null) {
        entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
    }
    if (input.RekeyFuzzPercentage !== undefined && input.RekeyFuzzPercentage !== null) {
        entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
    }
    if (input.ReplayWindowSize !== undefined && input.ReplayWindowSize !== null) {
        entries["ReplayWindowSize"] = input.ReplayWindowSize;
    }
    if (input.DPDTimeoutSeconds !== undefined && input.DPDTimeoutSeconds !== null) {
        entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
    }
    if (input.DPDTimeoutAction !== undefined && input.DPDTimeoutAction !== null) {
        entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
    }
    if (input.Phase1EncryptionAlgorithms !== undefined && input.Phase1EncryptionAlgorithms !== null) {
        const memberEntries = serializeAws_ec2Phase1EncryptionAlgorithmsRequestList(input.Phase1EncryptionAlgorithms, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2EncryptionAlgorithms !== undefined && input.Phase2EncryptionAlgorithms !== null) {
        const memberEntries = serializeAws_ec2Phase2EncryptionAlgorithmsRequestList(input.Phase2EncryptionAlgorithms, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase1IntegrityAlgorithms !== undefined && input.Phase1IntegrityAlgorithms !== null) {
        const memberEntries = serializeAws_ec2Phase1IntegrityAlgorithmsRequestList(input.Phase1IntegrityAlgorithms, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2IntegrityAlgorithms !== undefined && input.Phase2IntegrityAlgorithms !== null) {
        const memberEntries = serializeAws_ec2Phase2IntegrityAlgorithmsRequestList(input.Phase2IntegrityAlgorithms, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase1DHGroupNumbers !== undefined && input.Phase1DHGroupNumbers !== null) {
        const memberEntries = serializeAws_ec2Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.Phase2DHGroupNumbers !== undefined && input.Phase2DHGroupNumbers !== null) {
        const memberEntries = serializeAws_ec2Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.IKEVersions !== undefined && input.IKEVersions !== null) {
        const memberEntries = serializeAws_ec2IKEVersionsRequestList(input.IKEVersions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input.StartupAction !== undefined && input.StartupAction !== null) {
        entries["StartupAction"] = input.StartupAction;
    }
    return entries;
};
const serializeAws_ec2VpnTunnelOptionsSpecificationsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_ec2VpnTunnelOptionsSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_ec2WithdrawByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input.Cidr !== undefined && input.Cidr !== null) {
        entries["Cidr"] = input.Cidr;
    }
    if (input.DryRun !== undefined && input.DryRun !== null) {
        entries["DryRun"] = input.DryRun;
    }
    return entries;
};
const serializeAws_ec2ZoneIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ZoneId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_ec2ZoneNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ZoneName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const deserializeAws_ec2AcceleratorCount = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["max"]);
    }
    return contents;
};
const deserializeAws_ec2AcceleratorManufacturerSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2AcceleratorNameSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2AcceleratorTotalMemoryMiB = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["max"]);
    }
    return contents;
};
const deserializeAws_ec2AcceleratorTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2AcceptReservedInstancesExchangeQuoteResult = (output, context) => {
    const contents = {
        ExchangeId: undefined,
    };
    if (output["exchangeId"] !== undefined) {
        contents.ExchangeId = (0, smithy_client_1.expectString)(output["exchangeId"]);
    }
    return contents;
};
const deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
    const contents = {
        Associations: undefined,
    };
    if (output["associations"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
const deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {
        TransitGatewayPeeringAttachment: undefined,
    };
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2AcceptTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2AcceptVpcEndpointConnectionsResult = (output, context) => {
    const contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2AcceptVpcPeeringConnectionResult = (output, context) => {
    const contents = {
        VpcPeeringConnection: undefined,
    };
    if (output["vpcPeeringConnection"] !== undefined) {
        contents.VpcPeeringConnection = deserializeAws_ec2VpcPeeringConnection(output["vpcPeeringConnection"], context);
    }
    return contents;
};
const deserializeAws_ec2AccessScopeAnalysisFinding = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeAnalysisId: undefined,
        NetworkInsightsAccessScopeId: undefined,
        FindingId: undefined,
        FindingComponents: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeAnalysisId"]);
    }
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeId"]);
    }
    if (output["findingId"] !== undefined) {
        contents.FindingId = (0, smithy_client_1.expectString)(output["findingId"]);
    }
    if (output.findingComponentSet === "") {
        contents.FindingComponents = [];
    }
    else if (output["findingComponentSet"] !== undefined && output["findingComponentSet"]["item"] !== undefined) {
        contents.FindingComponents = deserializeAws_ec2PathComponentList((0, smithy_client_1.getArrayIfSingleItem)(output["findingComponentSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2AccessScopeAnalysisFindingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AccessScopeAnalysisFinding(entry, context);
    });
};
const deserializeAws_ec2AccessScopePath = (output, context) => {
    const contents = {
        Source: undefined,
        Destination: undefined,
        ThroughResources: undefined,
    };
    if (output["source"] !== undefined) {
        contents.Source = deserializeAws_ec2PathStatement(output["source"], context);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = deserializeAws_ec2PathStatement(output["destination"], context);
    }
    if (output.throughResourceSet === "") {
        contents.ThroughResources = [];
    }
    else if (output["throughResourceSet"] !== undefined && output["throughResourceSet"]["item"] !== undefined) {
        contents.ThroughResources = deserializeAws_ec2ThroughResourcesStatementList((0, smithy_client_1.getArrayIfSingleItem)(output["throughResourceSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2AccessScopePathList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AccessScopePath(entry, context);
    });
};
const deserializeAws_ec2AccountAttribute = (output, context) => {
    const contents = {
        AttributeName: undefined,
        AttributeValues: undefined,
    };
    if (output["attributeName"] !== undefined) {
        contents.AttributeName = (0, smithy_client_1.expectString)(output["attributeName"]);
    }
    if (output.attributeValueSet === "") {
        contents.AttributeValues = [];
    }
    else if (output["attributeValueSet"] !== undefined && output["attributeValueSet"]["item"] !== undefined) {
        contents.AttributeValues = deserializeAws_ec2AccountAttributeValueList((0, smithy_client_1.getArrayIfSingleItem)(output["attributeValueSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2AccountAttributeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AccountAttribute(entry, context);
    });
};
const deserializeAws_ec2AccountAttributeValue = (output, context) => {
    const contents = {
        AttributeValue: undefined,
    };
    if (output["attributeValue"] !== undefined) {
        contents.AttributeValue = (0, smithy_client_1.expectString)(output["attributeValue"]);
    }
    return contents;
};
const deserializeAws_ec2AccountAttributeValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AccountAttributeValue(entry, context);
    });
};
const deserializeAws_ec2ActiveInstance = (output, context) => {
    const contents = {
        InstanceId: undefined,
        InstanceType: undefined,
        SpotInstanceRequestId: undefined,
        InstanceHealth: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = (0, smithy_client_1.expectString)(output["spotInstanceRequestId"]);
    }
    if (output["instanceHealth"] !== undefined) {
        contents.InstanceHealth = (0, smithy_client_1.expectString)(output["instanceHealth"]);
    }
    return contents;
};
const deserializeAws_ec2ActiveInstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ActiveInstance(entry, context);
    });
};
const deserializeAws_ec2AdditionalDetail = (output, context) => {
    const contents = {
        AdditionalDetailType: undefined,
        Component: undefined,
    };
    if (output["additionalDetailType"] !== undefined) {
        contents.AdditionalDetailType = (0, smithy_client_1.expectString)(output["additionalDetailType"]);
    }
    if (output["component"] !== undefined) {
        contents.Component = deserializeAws_ec2AnalysisComponent(output["component"], context);
    }
    return contents;
};
const deserializeAws_ec2AdditionalDetailList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AdditionalDetail(entry, context);
    });
};
const deserializeAws_ec2Address = (output, context) => {
    const contents = {
        InstanceId: undefined,
        PublicIp: undefined,
        AllocationId: undefined,
        AssociationId: undefined,
        Domain: undefined,
        NetworkInterfaceId: undefined,
        NetworkInterfaceOwnerId: undefined,
        PrivateIpAddress: undefined,
        Tags: undefined,
        PublicIpv4Pool: undefined,
        NetworkBorderGroup: undefined,
        CustomerOwnedIp: undefined,
        CustomerOwnedIpv4Pool: undefined,
        CarrierIp: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = (0, smithy_client_1.expectString)(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = (0, smithy_client_1.expectString)(output["allocationId"]);
    }
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["domain"] !== undefined) {
        contents.Domain = (0, smithy_client_1.expectString)(output["domain"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["networkInterfaceOwnerId"] !== undefined) {
        contents.NetworkInterfaceOwnerId = (0, smithy_client_1.expectString)(output["networkInterfaceOwnerId"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["publicIpv4Pool"] !== undefined) {
        contents.PublicIpv4Pool = (0, smithy_client_1.expectString)(output["publicIpv4Pool"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = (0, smithy_client_1.expectString)(output["networkBorderGroup"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = (0, smithy_client_1.expectString)(output["customerOwnedIp"]);
    }
    if (output["customerOwnedIpv4Pool"] !== undefined) {
        contents.CustomerOwnedIpv4Pool = (0, smithy_client_1.expectString)(output["customerOwnedIpv4Pool"]);
    }
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = (0, smithy_client_1.expectString)(output["carrierIp"]);
    }
    return contents;
};
const deserializeAws_ec2AddressAttribute = (output, context) => {
    const contents = {
        PublicIp: undefined,
        AllocationId: undefined,
        PtrRecord: undefined,
        PtrRecordUpdate: undefined,
    };
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = (0, smithy_client_1.expectString)(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = (0, smithy_client_1.expectString)(output["allocationId"]);
    }
    if (output["ptrRecord"] !== undefined) {
        contents.PtrRecord = (0, smithy_client_1.expectString)(output["ptrRecord"]);
    }
    if (output["ptrRecordUpdate"] !== undefined) {
        contents.PtrRecordUpdate = deserializeAws_ec2PtrUpdateStatus(output["ptrRecordUpdate"], context);
    }
    return contents;
};
const deserializeAws_ec2AddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Address(entry, context);
    });
};
const deserializeAws_ec2AddressSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AddressAttribute(entry, context);
    });
};
const deserializeAws_ec2AdvertiseByoipCidrResult = (output, context) => {
    const contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const deserializeAws_ec2AllocateAddressResult = (output, context) => {
    const contents = {
        PublicIp: undefined,
        AllocationId: undefined,
        PublicIpv4Pool: undefined,
        NetworkBorderGroup: undefined,
        Domain: undefined,
        CustomerOwnedIp: undefined,
        CustomerOwnedIpv4Pool: undefined,
        CarrierIp: undefined,
    };
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = (0, smithy_client_1.expectString)(output["publicIp"]);
    }
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = (0, smithy_client_1.expectString)(output["allocationId"]);
    }
    if (output["publicIpv4Pool"] !== undefined) {
        contents.PublicIpv4Pool = (0, smithy_client_1.expectString)(output["publicIpv4Pool"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = (0, smithy_client_1.expectString)(output["networkBorderGroup"]);
    }
    if (output["domain"] !== undefined) {
        contents.Domain = (0, smithy_client_1.expectString)(output["domain"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = (0, smithy_client_1.expectString)(output["customerOwnedIp"]);
    }
    if (output["customerOwnedIpv4Pool"] !== undefined) {
        contents.CustomerOwnedIpv4Pool = (0, smithy_client_1.expectString)(output["customerOwnedIpv4Pool"]);
    }
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = (0, smithy_client_1.expectString)(output["carrierIp"]);
    }
    return contents;
};
const deserializeAws_ec2AllocateHostsResult = (output, context) => {
    const contents = {
        HostIds: undefined,
    };
    if (output.hostIdSet === "") {
        contents.HostIds = [];
    }
    else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
        contents.HostIds = deserializeAws_ec2ResponseHostIdList((0, smithy_client_1.getArrayIfSingleItem)(output["hostIdSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2AllocateIpamPoolCidrResult = (output, context) => {
    const contents = {
        IpamPoolAllocation: undefined,
    };
    if (output["ipamPoolAllocation"] !== undefined) {
        contents.IpamPoolAllocation = deserializeAws_ec2IpamPoolAllocation(output["ipamPoolAllocation"], context);
    }
    return contents;
};
const deserializeAws_ec2AllowedPrincipal = (output, context) => {
    const contents = {
        PrincipalType: undefined,
        Principal: undefined,
    };
    if (output["principalType"] !== undefined) {
        contents.PrincipalType = (0, smithy_client_1.expectString)(output["principalType"]);
    }
    if (output["principal"] !== undefined) {
        contents.Principal = (0, smithy_client_1.expectString)(output["principal"]);
    }
    return contents;
};
const deserializeAws_ec2AllowedPrincipalSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AllowedPrincipal(entry, context);
    });
};
const deserializeAws_ec2AlternatePathHint = (output, context) => {
    const contents = {
        ComponentId: undefined,
        ComponentArn: undefined,
    };
    if (output["componentId"] !== undefined) {
        contents.ComponentId = (0, smithy_client_1.expectString)(output["componentId"]);
    }
    if (output["componentArn"] !== undefined) {
        contents.ComponentArn = (0, smithy_client_1.expectString)(output["componentArn"]);
    }
    return contents;
};
const deserializeAws_ec2AlternatePathHintList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AlternatePathHint(entry, context);
    });
};
const deserializeAws_ec2AnalysisAclRule = (output, context) => {
    const contents = {
        Cidr: undefined,
        Egress: undefined,
        PortRange: undefined,
        Protocol: undefined,
        RuleAction: undefined,
        RuleNumber: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = (0, smithy_client_1.expectString)(output["cidr"]);
    }
    if (output["egress"] !== undefined) {
        contents.Egress = (0, smithy_client_1.parseBoolean)(output["egress"]);
    }
    if (output["portRange"] !== undefined) {
        contents.PortRange = deserializeAws_ec2PortRange(output["portRange"], context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["protocol"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = (0, smithy_client_1.expectString)(output["ruleAction"]);
    }
    if (output["ruleNumber"] !== undefined) {
        contents.RuleNumber = (0, smithy_client_1.strictParseInt32)(output["ruleNumber"]);
    }
    return contents;
};
const deserializeAws_ec2AnalysisComponent = (output, context) => {
    const contents = {
        Id: undefined,
        Arn: undefined,
        Name: undefined,
    };
    if (output["id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["id"]);
    }
    if (output["arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["arn"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    return contents;
};
const deserializeAws_ec2AnalysisComponentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AnalysisComponent(entry, context);
    });
};
const deserializeAws_ec2AnalysisLoadBalancerListener = (output, context) => {
    const contents = {
        LoadBalancerPort: undefined,
        InstancePort: undefined,
    };
    if (output["loadBalancerPort"] !== undefined) {
        contents.LoadBalancerPort = (0, smithy_client_1.strictParseInt32)(output["loadBalancerPort"]);
    }
    if (output["instancePort"] !== undefined) {
        contents.InstancePort = (0, smithy_client_1.strictParseInt32)(output["instancePort"]);
    }
    return contents;
};
const deserializeAws_ec2AnalysisLoadBalancerTarget = (output, context) => {
    const contents = {
        Address: undefined,
        AvailabilityZone: undefined,
        Instance: undefined,
        Port: undefined,
    };
    if (output["address"] !== undefined) {
        contents.Address = (0, smithy_client_1.expectString)(output["address"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["instance"] !== undefined) {
        contents.Instance = deserializeAws_ec2AnalysisComponent(output["instance"], context);
    }
    if (output["port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["port"]);
    }
    return contents;
};
const deserializeAws_ec2AnalysisPacketHeader = (output, context) => {
    const contents = {
        DestinationAddresses: undefined,
        DestinationPortRanges: undefined,
        Protocol: undefined,
        SourceAddresses: undefined,
        SourcePortRanges: undefined,
    };
    if (output.destinationAddressSet === "") {
        contents.DestinationAddresses = [];
    }
    else if (output["destinationAddressSet"] !== undefined && output["destinationAddressSet"]["item"] !== undefined) {
        contents.DestinationAddresses = deserializeAws_ec2IpAddressList((0, smithy_client_1.getArrayIfSingleItem)(output["destinationAddressSet"]["item"]), context);
    }
    if (output.destinationPortRangeSet === "") {
        contents.DestinationPortRanges = [];
    }
    else if (output["destinationPortRangeSet"] !== undefined &&
        output["destinationPortRangeSet"]["item"] !== undefined) {
        contents.DestinationPortRanges = deserializeAws_ec2PortRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["destinationPortRangeSet"]["item"]), context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["protocol"]);
    }
    if (output.sourceAddressSet === "") {
        contents.SourceAddresses = [];
    }
    else if (output["sourceAddressSet"] !== undefined && output["sourceAddressSet"]["item"] !== undefined) {
        contents.SourceAddresses = deserializeAws_ec2IpAddressList((0, smithy_client_1.getArrayIfSingleItem)(output["sourceAddressSet"]["item"]), context);
    }
    if (output.sourcePortRangeSet === "") {
        contents.SourcePortRanges = [];
    }
    else if (output["sourcePortRangeSet"] !== undefined && output["sourcePortRangeSet"]["item"] !== undefined) {
        contents.SourcePortRanges = deserializeAws_ec2PortRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["sourcePortRangeSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2AnalysisRouteTableRoute = (output, context) => {
    const contents = {
        DestinationCidr: undefined,
        DestinationPrefixListId: undefined,
        EgressOnlyInternetGatewayId: undefined,
        GatewayId: undefined,
        InstanceId: undefined,
        NatGatewayId: undefined,
        NetworkInterfaceId: undefined,
        Origin: undefined,
        TransitGatewayId: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = (0, smithy_client_1.expectString)(output["destinationCidr"]);
    }
    if (output["destinationPrefixListId"] !== undefined) {
        contents.DestinationPrefixListId = (0, smithy_client_1.expectString)(output["destinationPrefixListId"]);
    }
    if (output["egressOnlyInternetGatewayId"] !== undefined) {
        contents.EgressOnlyInternetGatewayId = (0, smithy_client_1.expectString)(output["egressOnlyInternetGatewayId"]);
    }
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = (0, smithy_client_1.expectString)(output["gatewayId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = (0, smithy_client_1.expectString)(output["natGatewayId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["origin"] !== undefined) {
        contents.Origin = (0, smithy_client_1.expectString)(output["origin"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = (0, smithy_client_1.expectString)(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
const deserializeAws_ec2AnalysisSecurityGroupRule = (output, context) => {
    const contents = {
        Cidr: undefined,
        Direction: undefined,
        SecurityGroupId: undefined,
        PortRange: undefined,
        PrefixListId: undefined,
        Protocol: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = (0, smithy_client_1.expectString)(output["cidr"]);
    }
    if (output["direction"] !== undefined) {
        contents.Direction = (0, smithy_client_1.expectString)(output["direction"]);
    }
    if (output["securityGroupId"] !== undefined) {
        contents.SecurityGroupId = (0, smithy_client_1.expectString)(output["securityGroupId"]);
    }
    if (output["portRange"] !== undefined) {
        contents.PortRange = deserializeAws_ec2PortRange(output["portRange"], context);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = (0, smithy_client_1.expectString)(output["prefixListId"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["protocol"]);
    }
    return contents;
};
const deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkResult = (output, context) => {
    const contents = {
        SecurityGroupIds: undefined,
    };
    if (output.securityGroupIds === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIds"] !== undefined && output["securityGroupIds"]["item"] !== undefined) {
        contents.SecurityGroupIds = deserializeAws_ec2ClientVpnSecurityGroupIdSet((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupIds"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ArchitectureTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2ArnList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2AssignedPrivateIpAddress = (output, context) => {
    const contents = {
        PrivateIpAddress: undefined,
    };
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    return contents;
};
const deserializeAws_ec2AssignedPrivateIpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AssignedPrivateIpAddress(entry, context);
    });
};
const deserializeAws_ec2AssignIpv6AddressesResult = (output, context) => {
    const contents = {
        AssignedIpv6Addresses: undefined,
        AssignedIpv6Prefixes: undefined,
        NetworkInterfaceId: undefined,
    };
    if (output.assignedIpv6Addresses === "") {
        contents.AssignedIpv6Addresses = [];
    }
    else if (output["assignedIpv6Addresses"] !== undefined && output["assignedIpv6Addresses"]["item"] !== undefined) {
        contents.AssignedIpv6Addresses = deserializeAws_ec2Ipv6AddressList((0, smithy_client_1.getArrayIfSingleItem)(output["assignedIpv6Addresses"]["item"]), context);
    }
    if (output.assignedIpv6PrefixSet === "") {
        contents.AssignedIpv6Prefixes = [];
    }
    else if (output["assignedIpv6PrefixSet"] !== undefined && output["assignedIpv6PrefixSet"]["item"] !== undefined) {
        contents.AssignedIpv6Prefixes = deserializeAws_ec2IpPrefixList((0, smithy_client_1.getArrayIfSingleItem)(output["assignedIpv6PrefixSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    return contents;
};
const deserializeAws_ec2AssignPrivateIpAddressesResult = (output, context) => {
    const contents = {
        NetworkInterfaceId: undefined,
        AssignedPrivateIpAddresses: undefined,
        AssignedIpv4Prefixes: undefined,
    };
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output.assignedPrivateIpAddressesSet === "") {
        contents.AssignedPrivateIpAddresses = [];
    }
    else if (output["assignedPrivateIpAddressesSet"] !== undefined &&
        output["assignedPrivateIpAddressesSet"]["item"] !== undefined) {
        contents.AssignedPrivateIpAddresses = deserializeAws_ec2AssignedPrivateIpAddressList((0, smithy_client_1.getArrayIfSingleItem)(output["assignedPrivateIpAddressesSet"]["item"]), context);
    }
    if (output.assignedIpv4PrefixSet === "") {
        contents.AssignedIpv4Prefixes = [];
    }
    else if (output["assignedIpv4PrefixSet"] !== undefined && output["assignedIpv4PrefixSet"]["item"] !== undefined) {
        contents.AssignedIpv4Prefixes = deserializeAws_ec2Ipv4PrefixesList((0, smithy_client_1.getArrayIfSingleItem)(output["assignedIpv4PrefixSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2AssociateAddressResult = (output, context) => {
    const contents = {
        AssociationId: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    return contents;
};
const deserializeAws_ec2AssociateClientVpnTargetNetworkResult = (output, context) => {
    const contents = {
        AssociationId: undefined,
        Status: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2AssociationStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2AssociatedRole = (output, context) => {
    const contents = {
        AssociatedRoleArn: undefined,
        CertificateS3BucketName: undefined,
        CertificateS3ObjectKey: undefined,
        EncryptionKmsKeyId: undefined,
    };
    if (output["associatedRoleArn"] !== undefined) {
        contents.AssociatedRoleArn = (0, smithy_client_1.expectString)(output["associatedRoleArn"]);
    }
    if (output["certificateS3BucketName"] !== undefined) {
        contents.CertificateS3BucketName = (0, smithy_client_1.expectString)(output["certificateS3BucketName"]);
    }
    if (output["certificateS3ObjectKey"] !== undefined) {
        contents.CertificateS3ObjectKey = (0, smithy_client_1.expectString)(output["certificateS3ObjectKey"]);
    }
    if (output["encryptionKmsKeyId"] !== undefined) {
        contents.EncryptionKmsKeyId = (0, smithy_client_1.expectString)(output["encryptionKmsKeyId"]);
    }
    return contents;
};
const deserializeAws_ec2AssociatedRolesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AssociatedRole(entry, context);
    });
};
const deserializeAws_ec2AssociatedTargetNetwork = (output, context) => {
    const contents = {
        NetworkId: undefined,
        NetworkType: undefined,
    };
    if (output["networkId"] !== undefined) {
        contents.NetworkId = (0, smithy_client_1.expectString)(output["networkId"]);
    }
    if (output["networkType"] !== undefined) {
        contents.NetworkType = (0, smithy_client_1.expectString)(output["networkType"]);
    }
    return contents;
};
const deserializeAws_ec2AssociatedTargetNetworkSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AssociatedTargetNetwork(entry, context);
    });
};
const deserializeAws_ec2AssociateEnclaveCertificateIamRoleResult = (output, context) => {
    const contents = {
        CertificateS3BucketName: undefined,
        CertificateS3ObjectKey: undefined,
        EncryptionKmsKeyId: undefined,
    };
    if (output["certificateS3BucketName"] !== undefined) {
        contents.CertificateS3BucketName = (0, smithy_client_1.expectString)(output["certificateS3BucketName"]);
    }
    if (output["certificateS3ObjectKey"] !== undefined) {
        contents.CertificateS3ObjectKey = (0, smithy_client_1.expectString)(output["certificateS3ObjectKey"]);
    }
    if (output["encryptionKmsKeyId"] !== undefined) {
        contents.EncryptionKmsKeyId = (0, smithy_client_1.expectString)(output["encryptionKmsKeyId"]);
    }
    return contents;
};
const deserializeAws_ec2AssociateIamInstanceProfileResult = (output, context) => {
    const contents = {
        IamInstanceProfileAssociation: undefined,
    };
    if (output["iamInstanceProfileAssociation"] !== undefined) {
        contents.IamInstanceProfileAssociation = deserializeAws_ec2IamInstanceProfileAssociation(output["iamInstanceProfileAssociation"], context);
    }
    return contents;
};
const deserializeAws_ec2AssociateInstanceEventWindowResult = (output, context) => {
    const contents = {
        InstanceEventWindow: undefined,
    };
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = deserializeAws_ec2InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
const deserializeAws_ec2AssociateRouteTableResult = (output, context) => {
    const contents = {
        AssociationId: undefined,
        AssociationState: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["associationState"] !== undefined) {
        contents.AssociationState = deserializeAws_ec2RouteTableAssociationState(output["associationState"], context);
    }
    return contents;
};
const deserializeAws_ec2AssociateSubnetCidrBlockResult = (output, context) => {
    const contents = {
        Ipv6CidrBlockAssociation: undefined,
        SubnetId: undefined,
    };
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = deserializeAws_ec2SubnetIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    return contents;
};
const deserializeAws_ec2AssociateTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {
        Associations: undefined,
    };
    if (output["associations"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
const deserializeAws_ec2AssociateTransitGatewayRouteTableResult = (output, context) => {
    const contents = {
        Association: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2TransitGatewayAssociation(output["association"], context);
    }
    return contents;
};
const deserializeAws_ec2AssociateTrunkInterfaceResult = (output, context) => {
    const contents = {
        InterfaceAssociation: undefined,
        ClientToken: undefined,
    };
    if (output["interfaceAssociation"] !== undefined) {
        contents.InterfaceAssociation = deserializeAws_ec2TrunkInterfaceAssociation(output["interfaceAssociation"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2AssociateVpcCidrBlockResult = (output, context) => {
    const contents = {
        Ipv6CidrBlockAssociation: undefined,
        CidrBlockAssociation: undefined,
        VpcId: undefined,
    };
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = deserializeAws_ec2VpcIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["cidrBlockAssociation"] !== undefined) {
        contents.CidrBlockAssociation = deserializeAws_ec2VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2AssociationStatus = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2AttachClassicLinkVpcResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2AttachNetworkInterfaceResult = (output, context) => {
    const contents = {
        AttachmentId: undefined,
        NetworkCardIndex: undefined,
    };
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = (0, smithy_client_1.expectString)(output["attachmentId"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = (0, smithy_client_1.strictParseInt32)(output["networkCardIndex"]);
    }
    return contents;
};
const deserializeAws_ec2AttachVpnGatewayResult = (output, context) => {
    const contents = {
        VpcAttachment: undefined,
    };
    if (output["attachment"] !== undefined) {
        contents.VpcAttachment = deserializeAws_ec2VpcAttachment(output["attachment"], context);
    }
    return contents;
};
const deserializeAws_ec2AttributeBooleanValue = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.parseBoolean)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2AttributeValue = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2AuthorizationRule = (output, context) => {
    const contents = {
        ClientVpnEndpointId: undefined,
        Description: undefined,
        GroupId: undefined,
        AccessAll: undefined,
        DestinationCidr: undefined,
        Status: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = (0, smithy_client_1.expectString)(output["clientVpnEndpointId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output["accessAll"] !== undefined) {
        contents.AccessAll = (0, smithy_client_1.parseBoolean)(output["accessAll"]);
    }
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = (0, smithy_client_1.expectString)(output["destinationCidr"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnAuthorizationRuleStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2AuthorizationRuleSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AuthorizationRule(entry, context);
    });
};
const deserializeAws_ec2AuthorizeClientVpnIngressResult = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnAuthorizationRuleStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2AuthorizeSecurityGroupEgressResult = (output, context) => {
    const contents = {
        Return: undefined,
        SecurityGroupRules: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    if (output.securityGroupRuleSet === "") {
        contents.SecurityGroupRules = [];
    }
    else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
        contents.SecurityGroupRules = deserializeAws_ec2SecurityGroupRuleList((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupRuleSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2AuthorizeSecurityGroupIngressResult = (output, context) => {
    const contents = {
        Return: undefined,
        SecurityGroupRules: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    if (output.securityGroupRuleSet === "") {
        contents.SecurityGroupRules = [];
    }
    else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
        contents.SecurityGroupRules = deserializeAws_ec2SecurityGroupRuleList((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupRuleSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2AvailabilityZone = (output, context) => {
    const contents = {
        State: undefined,
        OptInStatus: undefined,
        Messages: undefined,
        RegionName: undefined,
        ZoneName: undefined,
        ZoneId: undefined,
        GroupName: undefined,
        NetworkBorderGroup: undefined,
        ZoneType: undefined,
        ParentZoneName: undefined,
        ParentZoneId: undefined,
    };
    if (output["zoneState"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["zoneState"]);
    }
    if (output["optInStatus"] !== undefined) {
        contents.OptInStatus = (0, smithy_client_1.expectString)(output["optInStatus"]);
    }
    if (output.messageSet === "") {
        contents.Messages = [];
    }
    else if (output["messageSet"] !== undefined && output["messageSet"]["item"] !== undefined) {
        contents.Messages = deserializeAws_ec2AvailabilityZoneMessageList((0, smithy_client_1.getArrayIfSingleItem)(output["messageSet"]["item"]), context);
    }
    if (output["regionName"] !== undefined) {
        contents.RegionName = (0, smithy_client_1.expectString)(output["regionName"]);
    }
    if (output["zoneName"] !== undefined) {
        contents.ZoneName = (0, smithy_client_1.expectString)(output["zoneName"]);
    }
    if (output["zoneId"] !== undefined) {
        contents.ZoneId = (0, smithy_client_1.expectString)(output["zoneId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = (0, smithy_client_1.expectString)(output["networkBorderGroup"]);
    }
    if (output["zoneType"] !== undefined) {
        contents.ZoneType = (0, smithy_client_1.expectString)(output["zoneType"]);
    }
    if (output["parentZoneName"] !== undefined) {
        contents.ParentZoneName = (0, smithy_client_1.expectString)(output["parentZoneName"]);
    }
    if (output["parentZoneId"] !== undefined) {
        contents.ParentZoneId = (0, smithy_client_1.expectString)(output["parentZoneId"]);
    }
    return contents;
};
const deserializeAws_ec2AvailabilityZoneList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AvailabilityZone(entry, context);
    });
};
const deserializeAws_ec2AvailabilityZoneMessage = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2AvailabilityZoneMessageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AvailabilityZoneMessage(entry, context);
    });
};
const deserializeAws_ec2AvailableCapacity = (output, context) => {
    const contents = {
        AvailableInstanceCapacity: undefined,
        AvailableVCpus: undefined,
    };
    if (output.availableInstanceCapacity === "") {
        contents.AvailableInstanceCapacity = [];
    }
    else if (output["availableInstanceCapacity"] !== undefined &&
        output["availableInstanceCapacity"]["item"] !== undefined) {
        contents.AvailableInstanceCapacity = deserializeAws_ec2AvailableInstanceCapacityList((0, smithy_client_1.getArrayIfSingleItem)(output["availableInstanceCapacity"]["item"]), context);
    }
    if (output["availableVCpus"] !== undefined) {
        contents.AvailableVCpus = (0, smithy_client_1.strictParseInt32)(output["availableVCpus"]);
    }
    return contents;
};
const deserializeAws_ec2AvailableInstanceCapacityList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceCapacity(entry, context);
    });
};
const deserializeAws_ec2BaselineEbsBandwidthMbps = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["max"]);
    }
    return contents;
};
const deserializeAws_ec2BlockDeviceMapping = (output, context) => {
    const contents = {
        DeviceName: undefined,
        VirtualName: undefined,
        Ebs: undefined,
        NoDevice: undefined,
    };
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = (0, smithy_client_1.expectString)(output["deviceName"]);
    }
    if (output["virtualName"] !== undefined) {
        contents.VirtualName = (0, smithy_client_1.expectString)(output["virtualName"]);
    }
    if (output["ebs"] !== undefined) {
        contents.Ebs = deserializeAws_ec2EbsBlockDevice(output["ebs"], context);
    }
    if (output["noDevice"] !== undefined) {
        contents.NoDevice = (0, smithy_client_1.expectString)(output["noDevice"]);
    }
    return contents;
};
const deserializeAws_ec2BlockDeviceMappingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2BlockDeviceMapping(entry, context);
    });
};
const deserializeAws_ec2BootModeTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2BundleInstanceResult = (output, context) => {
    const contents = {
        BundleTask: undefined,
    };
    if (output["bundleInstanceTask"] !== undefined) {
        contents.BundleTask = deserializeAws_ec2BundleTask(output["bundleInstanceTask"], context);
    }
    return contents;
};
const deserializeAws_ec2BundleTask = (output, context) => {
    const contents = {
        BundleId: undefined,
        BundleTaskError: undefined,
        InstanceId: undefined,
        Progress: undefined,
        StartTime: undefined,
        State: undefined,
        Storage: undefined,
        UpdateTime: undefined,
    };
    if (output["bundleId"] !== undefined) {
        contents.BundleId = (0, smithy_client_1.expectString)(output["bundleId"]);
    }
    if (output["error"] !== undefined) {
        contents.BundleTaskError = deserializeAws_ec2BundleTaskError(output["error"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startTime"]));
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["storage"] !== undefined) {
        contents.Storage = deserializeAws_ec2Storage(output["storage"], context);
    }
    if (output["updateTime"] !== undefined) {
        contents.UpdateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["updateTime"]));
    }
    return contents;
};
const deserializeAws_ec2BundleTaskError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2BundleTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2BundleTask(entry, context);
    });
};
const deserializeAws_ec2ByoipCidr = (output, context) => {
    const contents = {
        Cidr: undefined,
        Description: undefined,
        StatusMessage: undefined,
        State: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = (0, smithy_client_1.expectString)(output["cidr"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2ByoipCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ByoipCidr(entry, context);
    });
};
const deserializeAws_ec2CancelBundleTaskResult = (output, context) => {
    const contents = {
        BundleTask: undefined,
    };
    if (output["bundleInstanceTask"] !== undefined) {
        contents.BundleTask = deserializeAws_ec2BundleTask(output["bundleInstanceTask"], context);
    }
    return contents;
};
const deserializeAws_ec2CancelCapacityReservationFleetError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2CancelCapacityReservationFleetsResult = (output, context) => {
    const contents = {
        SuccessfulFleetCancellations: undefined,
        FailedFleetCancellations: undefined,
    };
    if (output.successfulFleetCancellationSet === "") {
        contents.SuccessfulFleetCancellations = [];
    }
    else if (output["successfulFleetCancellationSet"] !== undefined &&
        output["successfulFleetCancellationSet"]["item"] !== undefined) {
        contents.SuccessfulFleetCancellations = deserializeAws_ec2CapacityReservationFleetCancellationStateSet((0, smithy_client_1.getArrayIfSingleItem)(output["successfulFleetCancellationSet"]["item"]), context);
    }
    if (output.failedFleetCancellationSet === "") {
        contents.FailedFleetCancellations = [];
    }
    else if (output["failedFleetCancellationSet"] !== undefined &&
        output["failedFleetCancellationSet"]["item"] !== undefined) {
        contents.FailedFleetCancellations = deserializeAws_ec2FailedCapacityReservationFleetCancellationResultSet((0, smithy_client_1.getArrayIfSingleItem)(output["failedFleetCancellationSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CancelCapacityReservationResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2CancelImportTaskResult = (output, context) => {
    const contents = {
        ImportTaskId: undefined,
        PreviousState: undefined,
        State: undefined,
    };
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = (0, smithy_client_1.expectString)(output["importTaskId"]);
    }
    if (output["previousState"] !== undefined) {
        contents.PreviousState = (0, smithy_client_1.expectString)(output["previousState"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2CancelledSpotInstanceRequest = (output, context) => {
    const contents = {
        SpotInstanceRequestId: undefined,
        State: undefined,
    };
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = (0, smithy_client_1.expectString)(output["spotInstanceRequestId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2CancelledSpotInstanceRequestList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CancelledSpotInstanceRequest(entry, context);
    });
};
const deserializeAws_ec2CancelReservedInstancesListingResult = (output, context) => {
    const contents = {
        ReservedInstancesListings: undefined,
    };
    if (output.reservedInstancesListingsSet === "") {
        contents.ReservedInstancesListings = [];
    }
    else if (output["reservedInstancesListingsSet"] !== undefined &&
        output["reservedInstancesListingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesListings = deserializeAws_ec2ReservedInstancesListingList((0, smithy_client_1.getArrayIfSingleItem)(output["reservedInstancesListingsSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CancelSpotFleetRequestsError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2CancelSpotFleetRequestsErrorItem = (output, context) => {
    const contents = {
        Error: undefined,
        SpotFleetRequestId: undefined,
    };
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2CancelSpotFleetRequestsError(output["error"], context);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = (0, smithy_client_1.expectString)(output["spotFleetRequestId"]);
    }
    return contents;
};
const deserializeAws_ec2CancelSpotFleetRequestsErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CancelSpotFleetRequestsErrorItem(entry, context);
    });
};
const deserializeAws_ec2CancelSpotFleetRequestsResponse = (output, context) => {
    const contents = {
        SuccessfulFleetRequests: undefined,
        UnsuccessfulFleetRequests: undefined,
    };
    if (output.successfulFleetRequestSet === "") {
        contents.SuccessfulFleetRequests = [];
    }
    else if (output["successfulFleetRequestSet"] !== undefined &&
        output["successfulFleetRequestSet"]["item"] !== undefined) {
        contents.SuccessfulFleetRequests = deserializeAws_ec2CancelSpotFleetRequestsSuccessSet((0, smithy_client_1.getArrayIfSingleItem)(output["successfulFleetRequestSet"]["item"]), context);
    }
    if (output.unsuccessfulFleetRequestSet === "") {
        contents.UnsuccessfulFleetRequests = [];
    }
    else if (output["unsuccessfulFleetRequestSet"] !== undefined &&
        output["unsuccessfulFleetRequestSet"]["item"] !== undefined) {
        contents.UnsuccessfulFleetRequests = deserializeAws_ec2CancelSpotFleetRequestsErrorSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessfulFleetRequestSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CancelSpotFleetRequestsSuccessItem = (output, context) => {
    const contents = {
        CurrentSpotFleetRequestState: undefined,
        PreviousSpotFleetRequestState: undefined,
        SpotFleetRequestId: undefined,
    };
    if (output["currentSpotFleetRequestState"] !== undefined) {
        contents.CurrentSpotFleetRequestState = (0, smithy_client_1.expectString)(output["currentSpotFleetRequestState"]);
    }
    if (output["previousSpotFleetRequestState"] !== undefined) {
        contents.PreviousSpotFleetRequestState = (0, smithy_client_1.expectString)(output["previousSpotFleetRequestState"]);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = (0, smithy_client_1.expectString)(output["spotFleetRequestId"]);
    }
    return contents;
};
const deserializeAws_ec2CancelSpotFleetRequestsSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CancelSpotFleetRequestsSuccessItem(entry, context);
    });
};
const deserializeAws_ec2CancelSpotInstanceRequestsResult = (output, context) => {
    const contents = {
        CancelledSpotInstanceRequests: undefined,
    };
    if (output.spotInstanceRequestSet === "") {
        contents.CancelledSpotInstanceRequests = [];
    }
    else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
        contents.CancelledSpotInstanceRequests = deserializeAws_ec2CancelledSpotInstanceRequestList((0, smithy_client_1.getArrayIfSingleItem)(output["spotInstanceRequestSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CapacityReservation = (output, context) => {
    const contents = {
        CapacityReservationId: undefined,
        OwnerId: undefined,
        CapacityReservationArn: undefined,
        AvailabilityZoneId: undefined,
        InstanceType: undefined,
        InstancePlatform: undefined,
        AvailabilityZone: undefined,
        Tenancy: undefined,
        TotalInstanceCount: undefined,
        AvailableInstanceCount: undefined,
        EbsOptimized: undefined,
        EphemeralStorage: undefined,
        State: undefined,
        StartDate: undefined,
        EndDate: undefined,
        EndDateType: undefined,
        InstanceMatchCriteria: undefined,
        CreateDate: undefined,
        Tags: undefined,
        OutpostArn: undefined,
        CapacityReservationFleetId: undefined,
        PlacementGroupArn: undefined,
    };
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = (0, smithy_client_1.expectString)(output["capacityReservationId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["capacityReservationArn"] !== undefined) {
        contents.CapacityReservationArn = (0, smithy_client_1.expectString)(output["capacityReservationArn"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = (0, smithy_client_1.expectString)(output["availabilityZoneId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["instancePlatform"] !== undefined) {
        contents.InstancePlatform = (0, smithy_client_1.expectString)(output["instancePlatform"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = (0, smithy_client_1.expectString)(output["tenancy"]);
    }
    if (output["totalInstanceCount"] !== undefined) {
        contents.TotalInstanceCount = (0, smithy_client_1.strictParseInt32)(output["totalInstanceCount"]);
    }
    if (output["availableInstanceCount"] !== undefined) {
        contents.AvailableInstanceCount = (0, smithy_client_1.strictParseInt32)(output["availableInstanceCount"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = (0, smithy_client_1.parseBoolean)(output["ebsOptimized"]);
    }
    if (output["ephemeralStorage"] !== undefined) {
        contents.EphemeralStorage = (0, smithy_client_1.parseBoolean)(output["ephemeralStorage"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["startDate"] !== undefined) {
        contents.StartDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startDate"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["endDate"]));
    }
    if (output["endDateType"] !== undefined) {
        contents.EndDateType = (0, smithy_client_1.expectString)(output["endDateType"]);
    }
    if (output["instanceMatchCriteria"] !== undefined) {
        contents.InstanceMatchCriteria = (0, smithy_client_1.expectString)(output["instanceMatchCriteria"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createDate"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = (0, smithy_client_1.expectString)(output["capacityReservationFleetId"]);
    }
    if (output["placementGroupArn"] !== undefined) {
        contents.PlacementGroupArn = (0, smithy_client_1.expectString)(output["placementGroupArn"]);
    }
    return contents;
};
const deserializeAws_ec2CapacityReservationFleet = (output, context) => {
    const contents = {
        CapacityReservationFleetId: undefined,
        CapacityReservationFleetArn: undefined,
        State: undefined,
        TotalTargetCapacity: undefined,
        TotalFulfilledCapacity: undefined,
        Tenancy: undefined,
        EndDate: undefined,
        CreateTime: undefined,
        InstanceMatchCriteria: undefined,
        AllocationStrategy: undefined,
        InstanceTypeSpecifications: undefined,
        Tags: undefined,
    };
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = (0, smithy_client_1.expectString)(output["capacityReservationFleetId"]);
    }
    if (output["capacityReservationFleetArn"] !== undefined) {
        contents.CapacityReservationFleetArn = (0, smithy_client_1.expectString)(output["capacityReservationFleetArn"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["totalTargetCapacity"] !== undefined) {
        contents.TotalTargetCapacity = (0, smithy_client_1.strictParseInt32)(output["totalTargetCapacity"]);
    }
    if (output["totalFulfilledCapacity"] !== undefined) {
        contents.TotalFulfilledCapacity = (0, smithy_client_1.strictParseFloat)(output["totalFulfilledCapacity"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = (0, smithy_client_1.expectString)(output["tenancy"]);
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["endDate"]));
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["instanceMatchCriteria"] !== undefined) {
        contents.InstanceMatchCriteria = (0, smithy_client_1.expectString)(output["instanceMatchCriteria"]);
    }
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = (0, smithy_client_1.expectString)(output["allocationStrategy"]);
    }
    if (output.instanceTypeSpecificationSet === "") {
        contents.InstanceTypeSpecifications = [];
    }
    else if (output["instanceTypeSpecificationSet"] !== undefined &&
        output["instanceTypeSpecificationSet"]["item"] !== undefined) {
        contents.InstanceTypeSpecifications = deserializeAws_ec2FleetCapacityReservationSet((0, smithy_client_1.getArrayIfSingleItem)(output["instanceTypeSpecificationSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CapacityReservationFleetCancellationState = (output, context) => {
    const contents = {
        CurrentFleetState: undefined,
        PreviousFleetState: undefined,
        CapacityReservationFleetId: undefined,
    };
    if (output["currentFleetState"] !== undefined) {
        contents.CurrentFleetState = (0, smithy_client_1.expectString)(output["currentFleetState"]);
    }
    if (output["previousFleetState"] !== undefined) {
        contents.PreviousFleetState = (0, smithy_client_1.expectString)(output["previousFleetState"]);
    }
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = (0, smithy_client_1.expectString)(output["capacityReservationFleetId"]);
    }
    return contents;
};
const deserializeAws_ec2CapacityReservationFleetCancellationStateSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CapacityReservationFleetCancellationState(entry, context);
    });
};
const deserializeAws_ec2CapacityReservationFleetSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CapacityReservationFleet(entry, context);
    });
};
const deserializeAws_ec2CapacityReservationGroup = (output, context) => {
    const contents = {
        GroupArn: undefined,
        OwnerId: undefined,
    };
    if (output["groupArn"] !== undefined) {
        contents.GroupArn = (0, smithy_client_1.expectString)(output["groupArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    return contents;
};
const deserializeAws_ec2CapacityReservationGroupSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CapacityReservationGroup(entry, context);
    });
};
const deserializeAws_ec2CapacityReservationOptions = (output, context) => {
    const contents = {
        UsageStrategy: undefined,
    };
    if (output["usageStrategy"] !== undefined) {
        contents.UsageStrategy = (0, smithy_client_1.expectString)(output["usageStrategy"]);
    }
    return contents;
};
const deserializeAws_ec2CapacityReservationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CapacityReservation(entry, context);
    });
};
const deserializeAws_ec2CapacityReservationSpecificationResponse = (output, context) => {
    const contents = {
        CapacityReservationPreference: undefined,
        CapacityReservationTarget: undefined,
    };
    if (output["capacityReservationPreference"] !== undefined) {
        contents.CapacityReservationPreference = (0, smithy_client_1.expectString)(output["capacityReservationPreference"]);
    }
    if (output["capacityReservationTarget"] !== undefined) {
        contents.CapacityReservationTarget = deserializeAws_ec2CapacityReservationTargetResponse(output["capacityReservationTarget"], context);
    }
    return contents;
};
const deserializeAws_ec2CapacityReservationTargetResponse = (output, context) => {
    const contents = {
        CapacityReservationId: undefined,
        CapacityReservationResourceGroupArn: undefined,
    };
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = (0, smithy_client_1.expectString)(output["capacityReservationId"]);
    }
    if (output["capacityReservationResourceGroupArn"] !== undefined) {
        contents.CapacityReservationResourceGroupArn = (0, smithy_client_1.expectString)(output["capacityReservationResourceGroupArn"]);
    }
    return contents;
};
const deserializeAws_ec2CarrierGateway = (output, context) => {
    const contents = {
        CarrierGatewayId: undefined,
        VpcId: undefined,
        State: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output["carrierGatewayId"] !== undefined) {
        contents.CarrierGatewayId = (0, smithy_client_1.expectString)(output["carrierGatewayId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CarrierGatewaySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CarrierGateway(entry, context);
    });
};
const deserializeAws_ec2CertificateAuthentication = (output, context) => {
    const contents = {
        ClientRootCertificateChain: undefined,
    };
    if (output["clientRootCertificateChain"] !== undefined) {
        contents.ClientRootCertificateChain = (0, smithy_client_1.expectString)(output["clientRootCertificateChain"]);
    }
    return contents;
};
const deserializeAws_ec2CidrBlock = (output, context) => {
    const contents = {
        CidrBlock: undefined,
    };
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = (0, smithy_client_1.expectString)(output["cidrBlock"]);
    }
    return contents;
};
const deserializeAws_ec2CidrBlockSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CidrBlock(entry, context);
    });
};
const deserializeAws_ec2ClassicLinkDnsSupport = (output, context) => {
    const contents = {
        ClassicLinkDnsSupported: undefined,
        VpcId: undefined,
    };
    if (output["classicLinkDnsSupported"] !== undefined) {
        contents.ClassicLinkDnsSupported = (0, smithy_client_1.parseBoolean)(output["classicLinkDnsSupported"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2ClassicLinkDnsSupportList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClassicLinkDnsSupport(entry, context);
    });
};
const deserializeAws_ec2ClassicLinkInstance = (output, context) => {
    const contents = {
        Groups: undefined,
        InstanceId: undefined,
        Tags: undefined,
        VpcId: undefined,
    };
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2ClassicLinkInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClassicLinkInstance(entry, context);
    });
};
const deserializeAws_ec2ClassicLoadBalancer = (output, context) => {
    const contents = {
        Name: undefined,
    };
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    return contents;
};
const deserializeAws_ec2ClassicLoadBalancers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClassicLoadBalancer(entry, context);
    });
};
const deserializeAws_ec2ClassicLoadBalancersConfig = (output, context) => {
    const contents = {
        ClassicLoadBalancers: undefined,
    };
    if (output.classicLoadBalancers === "") {
        contents.ClassicLoadBalancers = [];
    }
    else if (output["classicLoadBalancers"] !== undefined && output["classicLoadBalancers"]["item"] !== undefined) {
        contents.ClassicLoadBalancers = deserializeAws_ec2ClassicLoadBalancers((0, smithy_client_1.getArrayIfSingleItem)(output["classicLoadBalancers"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ClientCertificateRevocationListStatus = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2ClientConnectResponseOptions = (output, context) => {
    const contents = {
        Enabled: undefined,
        LambdaFunctionArn: undefined,
        Status: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["enabled"]);
    }
    if (output["lambdaFunctionArn"] !== undefined) {
        contents.LambdaFunctionArn = (0, smithy_client_1.expectString)(output["lambdaFunctionArn"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnEndpointAttributeStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2ClientLoginBannerResponseOptions = (output, context) => {
    const contents = {
        Enabled: undefined,
        BannerText: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["enabled"]);
    }
    if (output["bannerText"] !== undefined) {
        contents.BannerText = (0, smithy_client_1.expectString)(output["bannerText"]);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnAuthentication = (output, context) => {
    const contents = {
        Type: undefined,
        ActiveDirectory: undefined,
        MutualAuthentication: undefined,
        FederatedAuthentication: undefined,
    };
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["activeDirectory"] !== undefined) {
        contents.ActiveDirectory = deserializeAws_ec2DirectoryServiceAuthentication(output["activeDirectory"], context);
    }
    if (output["mutualAuthentication"] !== undefined) {
        contents.MutualAuthentication = deserializeAws_ec2CertificateAuthentication(output["mutualAuthentication"], context);
    }
    if (output["federatedAuthentication"] !== undefined) {
        contents.FederatedAuthentication = deserializeAws_ec2FederatedAuthentication(output["federatedAuthentication"], context);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnAuthenticationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClientVpnAuthentication(entry, context);
    });
};
const deserializeAws_ec2ClientVpnAuthorizationRuleStatus = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnConnection = (output, context) => {
    const contents = {
        ClientVpnEndpointId: undefined,
        Timestamp: undefined,
        ConnectionId: undefined,
        Username: undefined,
        ConnectionEstablishedTime: undefined,
        IngressBytes: undefined,
        EgressBytes: undefined,
        IngressPackets: undefined,
        EgressPackets: undefined,
        ClientIp: undefined,
        CommonName: undefined,
        Status: undefined,
        ConnectionEndTime: undefined,
        PostureComplianceStatuses: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = (0, smithy_client_1.expectString)(output["clientVpnEndpointId"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = (0, smithy_client_1.expectString)(output["timestamp"]);
    }
    if (output["connectionId"] !== undefined) {
        contents.ConnectionId = (0, smithy_client_1.expectString)(output["connectionId"]);
    }
    if (output["username"] !== undefined) {
        contents.Username = (0, smithy_client_1.expectString)(output["username"]);
    }
    if (output["connectionEstablishedTime"] !== undefined) {
        contents.ConnectionEstablishedTime = (0, smithy_client_1.expectString)(output["connectionEstablishedTime"]);
    }
    if (output["ingressBytes"] !== undefined) {
        contents.IngressBytes = (0, smithy_client_1.expectString)(output["ingressBytes"]);
    }
    if (output["egressBytes"] !== undefined) {
        contents.EgressBytes = (0, smithy_client_1.expectString)(output["egressBytes"]);
    }
    if (output["ingressPackets"] !== undefined) {
        contents.IngressPackets = (0, smithy_client_1.expectString)(output["ingressPackets"]);
    }
    if (output["egressPackets"] !== undefined) {
        contents.EgressPackets = (0, smithy_client_1.expectString)(output["egressPackets"]);
    }
    if (output["clientIp"] !== undefined) {
        contents.ClientIp = (0, smithy_client_1.expectString)(output["clientIp"]);
    }
    if (output["commonName"] !== undefined) {
        contents.CommonName = (0, smithy_client_1.expectString)(output["commonName"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnConnectionStatus(output["status"], context);
    }
    if (output["connectionEndTime"] !== undefined) {
        contents.ConnectionEndTime = (0, smithy_client_1.expectString)(output["connectionEndTime"]);
    }
    if (output.postureComplianceStatusSet === "") {
        contents.PostureComplianceStatuses = [];
    }
    else if (output["postureComplianceStatusSet"] !== undefined &&
        output["postureComplianceStatusSet"]["item"] !== undefined) {
        contents.PostureComplianceStatuses = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["postureComplianceStatusSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnConnectionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClientVpnConnection(entry, context);
    });
};
const deserializeAws_ec2ClientVpnConnectionStatus = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnEndpoint = (output, context) => {
    const contents = {
        ClientVpnEndpointId: undefined,
        Description: undefined,
        Status: undefined,
        CreationTime: undefined,
        DeletionTime: undefined,
        DnsName: undefined,
        ClientCidrBlock: undefined,
        DnsServers: undefined,
        SplitTunnel: undefined,
        VpnProtocol: undefined,
        TransportProtocol: undefined,
        VpnPort: undefined,
        AssociatedTargetNetworks: undefined,
        ServerCertificateArn: undefined,
        AuthenticationOptions: undefined,
        ConnectionLogOptions: undefined,
        Tags: undefined,
        SecurityGroupIds: undefined,
        VpcId: undefined,
        SelfServicePortalUrl: undefined,
        ClientConnectOptions: undefined,
        SessionTimeoutHours: undefined,
        ClientLoginBannerOptions: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = (0, smithy_client_1.expectString)(output["clientVpnEndpointId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnEndpointStatus(output["status"], context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectString)(output["creationTime"]);
    }
    if (output["deletionTime"] !== undefined) {
        contents.DeletionTime = (0, smithy_client_1.expectString)(output["deletionTime"]);
    }
    if (output["dnsName"] !== undefined) {
        contents.DnsName = (0, smithy_client_1.expectString)(output["dnsName"]);
    }
    if (output["clientCidrBlock"] !== undefined) {
        contents.ClientCidrBlock = (0, smithy_client_1.expectString)(output["clientCidrBlock"]);
    }
    if (output.dnsServer === "") {
        contents.DnsServers = [];
    }
    else if (output["dnsServer"] !== undefined && output["dnsServer"]["item"] !== undefined) {
        contents.DnsServers = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["dnsServer"]["item"]), context);
    }
    if (output["splitTunnel"] !== undefined) {
        contents.SplitTunnel = (0, smithy_client_1.parseBoolean)(output["splitTunnel"]);
    }
    if (output["vpnProtocol"] !== undefined) {
        contents.VpnProtocol = (0, smithy_client_1.expectString)(output["vpnProtocol"]);
    }
    if (output["transportProtocol"] !== undefined) {
        contents.TransportProtocol = (0, smithy_client_1.expectString)(output["transportProtocol"]);
    }
    if (output["vpnPort"] !== undefined) {
        contents.VpnPort = (0, smithy_client_1.strictParseInt32)(output["vpnPort"]);
    }
    if (output.associatedTargetNetwork === "") {
        contents.AssociatedTargetNetworks = [];
    }
    else if (output["associatedTargetNetwork"] !== undefined &&
        output["associatedTargetNetwork"]["item"] !== undefined) {
        contents.AssociatedTargetNetworks = deserializeAws_ec2AssociatedTargetNetworkSet((0, smithy_client_1.getArrayIfSingleItem)(output["associatedTargetNetwork"]["item"]), context);
    }
    if (output["serverCertificateArn"] !== undefined) {
        contents.ServerCertificateArn = (0, smithy_client_1.expectString)(output["serverCertificateArn"]);
    }
    if (output.authenticationOptions === "") {
        contents.AuthenticationOptions = [];
    }
    else if (output["authenticationOptions"] !== undefined && output["authenticationOptions"]["item"] !== undefined) {
        contents.AuthenticationOptions = deserializeAws_ec2ClientVpnAuthenticationList((0, smithy_client_1.getArrayIfSingleItem)(output["authenticationOptions"]["item"]), context);
    }
    if (output["connectionLogOptions"] !== undefined) {
        contents.ConnectionLogOptions = deserializeAws_ec2ConnectionLogResponseOptions(output["connectionLogOptions"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output.securityGroupIdSet === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
        contents.SecurityGroupIds = deserializeAws_ec2ClientVpnSecurityGroupIdSet((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupIdSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["selfServicePortalUrl"] !== undefined) {
        contents.SelfServicePortalUrl = (0, smithy_client_1.expectString)(output["selfServicePortalUrl"]);
    }
    if (output["clientConnectOptions"] !== undefined) {
        contents.ClientConnectOptions = deserializeAws_ec2ClientConnectResponseOptions(output["clientConnectOptions"], context);
    }
    if (output["sessionTimeoutHours"] !== undefined) {
        contents.SessionTimeoutHours = (0, smithy_client_1.strictParseInt32)(output["sessionTimeoutHours"]);
    }
    if (output["clientLoginBannerOptions"] !== undefined) {
        contents.ClientLoginBannerOptions = deserializeAws_ec2ClientLoginBannerResponseOptions(output["clientLoginBannerOptions"], context);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnEndpointAttributeStatus = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnEndpointStatus = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnRoute = (output, context) => {
    const contents = {
        ClientVpnEndpointId: undefined,
        DestinationCidr: undefined,
        TargetSubnet: undefined,
        Type: undefined,
        Origin: undefined,
        Status: undefined,
        Description: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = (0, smithy_client_1.expectString)(output["clientVpnEndpointId"]);
    }
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = (0, smithy_client_1.expectString)(output["destinationCidr"]);
    }
    if (output["targetSubnet"] !== undefined) {
        contents.TargetSubnet = (0, smithy_client_1.expectString)(output["targetSubnet"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["origin"] !== undefined) {
        contents.Origin = (0, smithy_client_1.expectString)(output["origin"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnRouteStatus(output["status"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnRouteSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClientVpnRoute(entry, context);
    });
};
const deserializeAws_ec2ClientVpnRouteStatus = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2ClientVpnSecurityGroupIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2CoipAddressUsage = (output, context) => {
    const contents = {
        AllocationId: undefined,
        AwsAccountId: undefined,
        AwsService: undefined,
        CoIp: undefined,
    };
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = (0, smithy_client_1.expectString)(output["allocationId"]);
    }
    if (output["awsAccountId"] !== undefined) {
        contents.AwsAccountId = (0, smithy_client_1.expectString)(output["awsAccountId"]);
    }
    if (output["awsService"] !== undefined) {
        contents.AwsService = (0, smithy_client_1.expectString)(output["awsService"]);
    }
    if (output["coIp"] !== undefined) {
        contents.CoIp = (0, smithy_client_1.expectString)(output["coIp"]);
    }
    return contents;
};
const deserializeAws_ec2CoipAddressUsageSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CoipAddressUsage(entry, context);
    });
};
const deserializeAws_ec2CoipPool = (output, context) => {
    const contents = {
        PoolId: undefined,
        PoolCidrs: undefined,
        LocalGatewayRouteTableId: undefined,
        Tags: undefined,
        PoolArn: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = (0, smithy_client_1.expectString)(output["poolId"]);
    }
    if (output.poolCidrSet === "") {
        contents.PoolCidrs = [];
    }
    else if (output["poolCidrSet"] !== undefined && output["poolCidrSet"]["item"] !== undefined) {
        contents.PoolCidrs = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["poolCidrSet"]["item"]), context);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = (0, smithy_client_1.expectString)(output["localGatewayRouteTableId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["poolArn"] !== undefined) {
        contents.PoolArn = (0, smithy_client_1.expectString)(output["poolArn"]);
    }
    return contents;
};
const deserializeAws_ec2CoipPoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CoipPool(entry, context);
    });
};
const deserializeAws_ec2ConfirmProductInstanceResult = (output, context) => {
    const contents = {
        OwnerId: undefined,
        Return: undefined,
    };
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ConnectionLogResponseOptions = (output, context) => {
    const contents = {
        Enabled: undefined,
        CloudwatchLogGroup: undefined,
        CloudwatchLogStream: undefined,
    };
    if (output["Enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["Enabled"]);
    }
    if (output["CloudwatchLogGroup"] !== undefined) {
        contents.CloudwatchLogGroup = (0, smithy_client_1.expectString)(output["CloudwatchLogGroup"]);
    }
    if (output["CloudwatchLogStream"] !== undefined) {
        contents.CloudwatchLogStream = (0, smithy_client_1.expectString)(output["CloudwatchLogStream"]);
    }
    return contents;
};
const deserializeAws_ec2ConnectionNotification = (output, context) => {
    const contents = {
        ConnectionNotificationId: undefined,
        ServiceId: undefined,
        VpcEndpointId: undefined,
        ConnectionNotificationType: undefined,
        ConnectionNotificationArn: undefined,
        ConnectionEvents: undefined,
        ConnectionNotificationState: undefined,
    };
    if (output["connectionNotificationId"] !== undefined) {
        contents.ConnectionNotificationId = (0, smithy_client_1.expectString)(output["connectionNotificationId"]);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = (0, smithy_client_1.expectString)(output["serviceId"]);
    }
    if (output["vpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = (0, smithy_client_1.expectString)(output["vpcEndpointId"]);
    }
    if (output["connectionNotificationType"] !== undefined) {
        contents.ConnectionNotificationType = (0, smithy_client_1.expectString)(output["connectionNotificationType"]);
    }
    if (output["connectionNotificationArn"] !== undefined) {
        contents.ConnectionNotificationArn = (0, smithy_client_1.expectString)(output["connectionNotificationArn"]);
    }
    if (output.connectionEvents === "") {
        contents.ConnectionEvents = [];
    }
    else if (output["connectionEvents"] !== undefined && output["connectionEvents"]["item"] !== undefined) {
        contents.ConnectionEvents = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["connectionEvents"]["item"]), context);
    }
    if (output["connectionNotificationState"] !== undefined) {
        contents.ConnectionNotificationState = (0, smithy_client_1.expectString)(output["connectionNotificationState"]);
    }
    return contents;
};
const deserializeAws_ec2ConnectionNotificationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ConnectionNotification(entry, context);
    });
};
const deserializeAws_ec2ConversionTask = (output, context) => {
    const contents = {
        ConversionTaskId: undefined,
        ExpirationTime: undefined,
        ImportInstance: undefined,
        ImportVolume: undefined,
        State: undefined,
        StatusMessage: undefined,
        Tags: undefined,
    };
    if (output["conversionTaskId"] !== undefined) {
        contents.ConversionTaskId = (0, smithy_client_1.expectString)(output["conversionTaskId"]);
    }
    if (output["expirationTime"] !== undefined) {
        contents.ExpirationTime = (0, smithy_client_1.expectString)(output["expirationTime"]);
    }
    if (output["importInstance"] !== undefined) {
        contents.ImportInstance = deserializeAws_ec2ImportInstanceTaskDetails(output["importInstance"], context);
    }
    if (output["importVolume"] !== undefined) {
        contents.ImportVolume = deserializeAws_ec2ImportVolumeTaskDetails(output["importVolume"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CopyFpgaImageResult = (output, context) => {
    const contents = {
        FpgaImageId: undefined,
    };
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = (0, smithy_client_1.expectString)(output["fpgaImageId"]);
    }
    return contents;
};
const deserializeAws_ec2CopyImageResult = (output, context) => {
    const contents = {
        ImageId: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    return contents;
};
const deserializeAws_ec2CopySnapshotResult = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        Tags: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CoreCountList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.strictParseInt32)(entry);
    });
};
const deserializeAws_ec2CpuManufacturerSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2CpuOptions = (output, context) => {
    const contents = {
        CoreCount: undefined,
        ThreadsPerCore: undefined,
    };
    if (output["coreCount"] !== undefined) {
        contents.CoreCount = (0, smithy_client_1.strictParseInt32)(output["coreCount"]);
    }
    if (output["threadsPerCore"] !== undefined) {
        contents.ThreadsPerCore = (0, smithy_client_1.strictParseInt32)(output["threadsPerCore"]);
    }
    return contents;
};
const deserializeAws_ec2CreateCapacityReservationFleetResult = (output, context) => {
    const contents = {
        CapacityReservationFleetId: undefined,
        State: undefined,
        TotalTargetCapacity: undefined,
        TotalFulfilledCapacity: undefined,
        InstanceMatchCriteria: undefined,
        AllocationStrategy: undefined,
        CreateTime: undefined,
        EndDate: undefined,
        Tenancy: undefined,
        FleetCapacityReservations: undefined,
        Tags: undefined,
    };
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = (0, smithy_client_1.expectString)(output["capacityReservationFleetId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["totalTargetCapacity"] !== undefined) {
        contents.TotalTargetCapacity = (0, smithy_client_1.strictParseInt32)(output["totalTargetCapacity"]);
    }
    if (output["totalFulfilledCapacity"] !== undefined) {
        contents.TotalFulfilledCapacity = (0, smithy_client_1.strictParseFloat)(output["totalFulfilledCapacity"]);
    }
    if (output["instanceMatchCriteria"] !== undefined) {
        contents.InstanceMatchCriteria = (0, smithy_client_1.expectString)(output["instanceMatchCriteria"]);
    }
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = (0, smithy_client_1.expectString)(output["allocationStrategy"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["endDate"]));
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = (0, smithy_client_1.expectString)(output["tenancy"]);
    }
    if (output.fleetCapacityReservationSet === "") {
        contents.FleetCapacityReservations = [];
    }
    else if (output["fleetCapacityReservationSet"] !== undefined &&
        output["fleetCapacityReservationSet"]["item"] !== undefined) {
        contents.FleetCapacityReservations = deserializeAws_ec2FleetCapacityReservationSet((0, smithy_client_1.getArrayIfSingleItem)(output["fleetCapacityReservationSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CreateCapacityReservationResult = (output, context) => {
    const contents = {
        CapacityReservation: undefined,
    };
    if (output["capacityReservation"] !== undefined) {
        contents.CapacityReservation = deserializeAws_ec2CapacityReservation(output["capacityReservation"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateCarrierGatewayResult = (output, context) => {
    const contents = {
        CarrierGateway: undefined,
    };
    if (output["carrierGateway"] !== undefined) {
        contents.CarrierGateway = deserializeAws_ec2CarrierGateway(output["carrierGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateClientVpnEndpointResult = (output, context) => {
    const contents = {
        ClientVpnEndpointId: undefined,
        Status: undefined,
        DnsName: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = (0, smithy_client_1.expectString)(output["clientVpnEndpointId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnEndpointStatus(output["status"], context);
    }
    if (output["dnsName"] !== undefined) {
        contents.DnsName = (0, smithy_client_1.expectString)(output["dnsName"]);
    }
    return contents;
};
const deserializeAws_ec2CreateClientVpnRouteResult = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnRouteStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateCustomerGatewayResult = (output, context) => {
    const contents = {
        CustomerGateway: undefined,
    };
    if (output["customerGateway"] !== undefined) {
        contents.CustomerGateway = deserializeAws_ec2CustomerGateway(output["customerGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateDefaultSubnetResult = (output, context) => {
    const contents = {
        Subnet: undefined,
    };
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2Subnet(output["subnet"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateDefaultVpcResult = (output, context) => {
    const contents = {
        Vpc: undefined,
    };
    if (output["vpc"] !== undefined) {
        contents.Vpc = deserializeAws_ec2Vpc(output["vpc"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateDhcpOptionsResult = (output, context) => {
    const contents = {
        DhcpOptions: undefined,
    };
    if (output["dhcpOptions"] !== undefined) {
        contents.DhcpOptions = deserializeAws_ec2DhcpOptions(output["dhcpOptions"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateEgressOnlyInternetGatewayResult = (output, context) => {
    const contents = {
        ClientToken: undefined,
        EgressOnlyInternetGateway: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output["egressOnlyInternetGateway"] !== undefined) {
        contents.EgressOnlyInternetGateway = deserializeAws_ec2EgressOnlyInternetGateway(output["egressOnlyInternetGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateFleetError = (output, context) => {
    const contents = {
        LaunchTemplateAndOverrides: undefined,
        Lifecycle: undefined,
        ErrorCode: undefined,
        ErrorMessage: undefined,
    };
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = (0, smithy_client_1.expectString)(output["lifecycle"]);
    }
    if (output["errorCode"] !== undefined) {
        contents.ErrorCode = (0, smithy_client_1.expectString)(output["errorCode"]);
    }
    if (output["errorMessage"] !== undefined) {
        contents.ErrorMessage = (0, smithy_client_1.expectString)(output["errorMessage"]);
    }
    return contents;
};
const deserializeAws_ec2CreateFleetErrorsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CreateFleetError(entry, context);
    });
};
const deserializeAws_ec2CreateFleetInstance = (output, context) => {
    const contents = {
        LaunchTemplateAndOverrides: undefined,
        Lifecycle: undefined,
        InstanceIds: undefined,
        InstanceType: undefined,
        Platform: undefined,
    };
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = (0, smithy_client_1.expectString)(output["lifecycle"]);
    }
    if (output.instanceIds === "") {
        contents.InstanceIds = [];
    }
    else if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
        contents.InstanceIds = deserializeAws_ec2InstanceIdsSet((0, smithy_client_1.getArrayIfSingleItem)(output["instanceIds"]["item"]), context);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    return contents;
};
const deserializeAws_ec2CreateFleetInstancesSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CreateFleetInstance(entry, context);
    });
};
const deserializeAws_ec2CreateFleetResult = (output, context) => {
    const contents = {
        FleetId: undefined,
        Errors: undefined,
        Instances: undefined,
    };
    if (output["fleetId"] !== undefined) {
        contents.FleetId = (0, smithy_client_1.expectString)(output["fleetId"]);
    }
    if (output.errorSet === "") {
        contents.Errors = [];
    }
    else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
        contents.Errors = deserializeAws_ec2CreateFleetErrorsSet((0, smithy_client_1.getArrayIfSingleItem)(output["errorSet"]["item"]), context);
    }
    if (output.fleetInstanceSet === "") {
        contents.Instances = [];
    }
    else if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2CreateFleetInstancesSet((0, smithy_client_1.getArrayIfSingleItem)(output["fleetInstanceSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CreateFlowLogsResult = (output, context) => {
    const contents = {
        ClientToken: undefined,
        FlowLogIds: undefined,
        Unsuccessful: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output.flowLogIdSet === "") {
        contents.FlowLogIds = [];
    }
    else if (output["flowLogIdSet"] !== undefined && output["flowLogIdSet"]["item"] !== undefined) {
        contents.FlowLogIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["flowLogIdSet"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CreateFpgaImageResult = (output, context) => {
    const contents = {
        FpgaImageId: undefined,
        FpgaImageGlobalId: undefined,
    };
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = (0, smithy_client_1.expectString)(output["fpgaImageId"]);
    }
    if (output["fpgaImageGlobalId"] !== undefined) {
        contents.FpgaImageGlobalId = (0, smithy_client_1.expectString)(output["fpgaImageGlobalId"]);
    }
    return contents;
};
const deserializeAws_ec2CreateImageResult = (output, context) => {
    const contents = {
        ImageId: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    return contents;
};
const deserializeAws_ec2CreateInstanceEventWindowResult = (output, context) => {
    const contents = {
        InstanceEventWindow: undefined,
    };
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = deserializeAws_ec2InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateInstanceExportTaskResult = (output, context) => {
    const contents = {
        ExportTask: undefined,
    };
    if (output["exportTask"] !== undefined) {
        contents.ExportTask = deserializeAws_ec2ExportTask(output["exportTask"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateInternetGatewayResult = (output, context) => {
    const contents = {
        InternetGateway: undefined,
    };
    if (output["internetGateway"] !== undefined) {
        contents.InternetGateway = deserializeAws_ec2InternetGateway(output["internetGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateIpamPoolResult = (output, context) => {
    const contents = {
        IpamPool: undefined,
    };
    if (output["ipamPool"] !== undefined) {
        contents.IpamPool = deserializeAws_ec2IpamPool(output["ipamPool"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateIpamResult = (output, context) => {
    const contents = {
        Ipam: undefined,
    };
    if (output["ipam"] !== undefined) {
        contents.Ipam = deserializeAws_ec2Ipam(output["ipam"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateIpamScopeResult = (output, context) => {
    const contents = {
        IpamScope: undefined,
    };
    if (output["ipamScope"] !== undefined) {
        contents.IpamScope = deserializeAws_ec2IpamScope(output["ipamScope"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateLaunchTemplateResult = (output, context) => {
    const contents = {
        LaunchTemplate: undefined,
        Warning: undefined,
    };
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2LaunchTemplate(output["launchTemplate"], context);
    }
    if (output["warning"] !== undefined) {
        contents.Warning = deserializeAws_ec2ValidationWarning(output["warning"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateLaunchTemplateVersionResult = (output, context) => {
    const contents = {
        LaunchTemplateVersion: undefined,
        Warning: undefined,
    };
    if (output["launchTemplateVersion"] !== undefined) {
        contents.LaunchTemplateVersion = deserializeAws_ec2LaunchTemplateVersion(output["launchTemplateVersion"], context);
    }
    if (output["warning"] !== undefined) {
        contents.Warning = deserializeAws_ec2ValidationWarning(output["warning"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateLocalGatewayRouteResult = (output, context) => {
    const contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2LocalGatewayRoute(output["route"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationResult = (output, context) => {
    const contents = {
        LocalGatewayRouteTableVpcAssociation: undefined,
    };
    if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociation = deserializeAws_ec2LocalGatewayRouteTableVpcAssociation(output["localGatewayRouteTableVpcAssociation"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateManagedPrefixListResult = (output, context) => {
    const contents = {
        PrefixList: undefined,
    };
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateNatGatewayResult = (output, context) => {
    const contents = {
        ClientToken: undefined,
        NatGateway: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output["natGateway"] !== undefined) {
        contents.NatGateway = deserializeAws_ec2NatGateway(output["natGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateNetworkAclResult = (output, context) => {
    const contents = {
        NetworkAcl: undefined,
    };
    if (output["networkAcl"] !== undefined) {
        contents.NetworkAcl = deserializeAws_ec2NetworkAcl(output["networkAcl"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateNetworkInsightsAccessScopeResult = (output, context) => {
    const contents = {
        NetworkInsightsAccessScope: undefined,
        NetworkInsightsAccessScopeContent: undefined,
    };
    if (output["networkInsightsAccessScope"] !== undefined) {
        contents.NetworkInsightsAccessScope = deserializeAws_ec2NetworkInsightsAccessScope(output["networkInsightsAccessScope"], context);
    }
    if (output["networkInsightsAccessScopeContent"] !== undefined) {
        contents.NetworkInsightsAccessScopeContent = deserializeAws_ec2NetworkInsightsAccessScopeContent(output["networkInsightsAccessScopeContent"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateNetworkInsightsPathResult = (output, context) => {
    const contents = {
        NetworkInsightsPath: undefined,
    };
    if (output["networkInsightsPath"] !== undefined) {
        contents.NetworkInsightsPath = deserializeAws_ec2NetworkInsightsPath(output["networkInsightsPath"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateNetworkInterfacePermissionResult = (output, context) => {
    const contents = {
        InterfacePermission: undefined,
    };
    if (output["interfacePermission"] !== undefined) {
        contents.InterfacePermission = deserializeAws_ec2NetworkInterfacePermission(output["interfacePermission"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateNetworkInterfaceResult = (output, context) => {
    const contents = {
        NetworkInterface: undefined,
        ClientToken: undefined,
    };
    if (output["networkInterface"] !== undefined) {
        contents.NetworkInterface = deserializeAws_ec2NetworkInterface(output["networkInterface"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2CreatePlacementGroupResult = (output, context) => {
    const contents = {
        PlacementGroup: undefined,
    };
    if (output["placementGroup"] !== undefined) {
        contents.PlacementGroup = deserializeAws_ec2PlacementGroup(output["placementGroup"], context);
    }
    return contents;
};
const deserializeAws_ec2CreatePublicIpv4PoolResult = (output, context) => {
    const contents = {
        PoolId: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = (0, smithy_client_1.expectString)(output["poolId"]);
    }
    return contents;
};
const deserializeAws_ec2CreateReplaceRootVolumeTaskResult = (output, context) => {
    const contents = {
        ReplaceRootVolumeTask: undefined,
    };
    if (output["replaceRootVolumeTask"] !== undefined) {
        contents.ReplaceRootVolumeTask = deserializeAws_ec2ReplaceRootVolumeTask(output["replaceRootVolumeTask"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateReservedInstancesListingResult = (output, context) => {
    const contents = {
        ReservedInstancesListings: undefined,
    };
    if (output.reservedInstancesListingsSet === "") {
        contents.ReservedInstancesListings = [];
    }
    else if (output["reservedInstancesListingsSet"] !== undefined &&
        output["reservedInstancesListingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesListings = deserializeAws_ec2ReservedInstancesListingList((0, smithy_client_1.getArrayIfSingleItem)(output["reservedInstancesListingsSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CreateRestoreImageTaskResult = (output, context) => {
    const contents = {
        ImageId: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    return contents;
};
const deserializeAws_ec2CreateRouteResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2CreateRouteTableResult = (output, context) => {
    const contents = {
        RouteTable: undefined,
    };
    if (output["routeTable"] !== undefined) {
        contents.RouteTable = deserializeAws_ec2RouteTable(output["routeTable"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateSecurityGroupResult = (output, context) => {
    const contents = {
        GroupId: undefined,
        Tags: undefined,
    };
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CreateSnapshotsResult = (output, context) => {
    const contents = {
        Snapshots: undefined,
    };
    if (output.snapshotSet === "") {
        contents.Snapshots = [];
    }
    else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
        contents.Snapshots = deserializeAws_ec2SnapshotSet((0, smithy_client_1.getArrayIfSingleItem)(output["snapshotSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CreateSpotDatafeedSubscriptionResult = (output, context) => {
    const contents = {
        SpotDatafeedSubscription: undefined,
    };
    if (output["spotDatafeedSubscription"] !== undefined) {
        contents.SpotDatafeedSubscription = deserializeAws_ec2SpotDatafeedSubscription(output["spotDatafeedSubscription"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateStoreImageTaskResult = (output, context) => {
    const contents = {
        ObjectKey: undefined,
    };
    if (output["objectKey"] !== undefined) {
        contents.ObjectKey = (0, smithy_client_1.expectString)(output["objectKey"]);
    }
    return contents;
};
const deserializeAws_ec2CreateSubnetCidrReservationResult = (output, context) => {
    const contents = {
        SubnetCidrReservation: undefined,
    };
    if (output["subnetCidrReservation"] !== undefined) {
        contents.SubnetCidrReservation = deserializeAws_ec2SubnetCidrReservation(output["subnetCidrReservation"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateSubnetResult = (output, context) => {
    const contents = {
        Subnet: undefined,
    };
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2Subnet(output["subnet"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateTrafficMirrorFilterResult = (output, context) => {
    const contents = {
        TrafficMirrorFilter: undefined,
        ClientToken: undefined,
    };
    if (output["trafficMirrorFilter"] !== undefined) {
        contents.TrafficMirrorFilter = deserializeAws_ec2TrafficMirrorFilter(output["trafficMirrorFilter"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2CreateTrafficMirrorFilterRuleResult = (output, context) => {
    const contents = {
        TrafficMirrorFilterRule: undefined,
        ClientToken: undefined,
    };
    if (output["trafficMirrorFilterRule"] !== undefined) {
        contents.TrafficMirrorFilterRule = deserializeAws_ec2TrafficMirrorFilterRule(output["trafficMirrorFilterRule"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2CreateTrafficMirrorSessionResult = (output, context) => {
    const contents = {
        TrafficMirrorSession: undefined,
        ClientToken: undefined,
    };
    if (output["trafficMirrorSession"] !== undefined) {
        contents.TrafficMirrorSession = deserializeAws_ec2TrafficMirrorSession(output["trafficMirrorSession"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2CreateTrafficMirrorTargetResult = (output, context) => {
    const contents = {
        TrafficMirrorTarget: undefined,
        ClientToken: undefined,
    };
    if (output["trafficMirrorTarget"] !== undefined) {
        contents.TrafficMirrorTarget = deserializeAws_ec2TrafficMirrorTarget(output["trafficMirrorTarget"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2CreateTransitGatewayConnectPeerResult = (output, context) => {
    const contents = {
        TransitGatewayConnectPeer: undefined,
    };
    if (output["transitGatewayConnectPeer"] !== undefined) {
        contents.TransitGatewayConnectPeer = deserializeAws_ec2TransitGatewayConnectPeer(output["transitGatewayConnectPeer"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateTransitGatewayConnectResult = (output, context) => {
    const contents = {
        TransitGatewayConnect: undefined,
    };
    if (output["transitGatewayConnect"] !== undefined) {
        contents.TransitGatewayConnect = deserializeAws_ec2TransitGatewayConnect(output["transitGatewayConnect"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {
        TransitGatewayMulticastDomain: undefined,
    };
    if (output["transitGatewayMulticastDomain"] !== undefined) {
        contents.TransitGatewayMulticastDomain = deserializeAws_ec2TransitGatewayMulticastDomain(output["transitGatewayMulticastDomain"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {
        TransitGatewayPeeringAttachment: undefined,
    };
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateTransitGatewayPrefixListReferenceResult = (output, context) => {
    const contents = {
        TransitGatewayPrefixListReference: undefined,
    };
    if (output["transitGatewayPrefixListReference"] !== undefined) {
        contents.TransitGatewayPrefixListReference = deserializeAws_ec2TransitGatewayPrefixListReference(output["transitGatewayPrefixListReference"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateTransitGatewayResult = (output, context) => {
    const contents = {
        TransitGateway: undefined,
    };
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2TransitGateway(output["transitGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateTransitGatewayRouteResult = (output, context) => {
    const contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2TransitGatewayRoute(output["route"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateTransitGatewayRouteTableResult = (output, context) => {
    const contents = {
        TransitGatewayRouteTable: undefined,
    };
    if (output["transitGatewayRouteTable"] !== undefined) {
        contents.TransitGatewayRouteTable = deserializeAws_ec2TransitGatewayRouteTable(output["transitGatewayRouteTable"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateVolumePermission = (output, context) => {
    const contents = {
        Group: undefined,
        UserId: undefined,
    };
    if (output["group"] !== undefined) {
        contents.Group = (0, smithy_client_1.expectString)(output["group"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = (0, smithy_client_1.expectString)(output["userId"]);
    }
    return contents;
};
const deserializeAws_ec2CreateVolumePermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CreateVolumePermission(entry, context);
    });
};
const deserializeAws_ec2CreateVpcEndpointConnectionNotificationResult = (output, context) => {
    const contents = {
        ConnectionNotification: undefined,
        ClientToken: undefined,
    };
    if (output["connectionNotification"] !== undefined) {
        contents.ConnectionNotification = deserializeAws_ec2ConnectionNotification(output["connectionNotification"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2CreateVpcEndpointResult = (output, context) => {
    const contents = {
        VpcEndpoint: undefined,
        ClientToken: undefined,
    };
    if (output["vpcEndpoint"] !== undefined) {
        contents.VpcEndpoint = deserializeAws_ec2VpcEndpoint(output["vpcEndpoint"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2CreateVpcEndpointServiceConfigurationResult = (output, context) => {
    const contents = {
        ServiceConfiguration: undefined,
        ClientToken: undefined,
    };
    if (output["serviceConfiguration"] !== undefined) {
        contents.ServiceConfiguration = deserializeAws_ec2ServiceConfiguration(output["serviceConfiguration"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2CreateVpcPeeringConnectionResult = (output, context) => {
    const contents = {
        VpcPeeringConnection: undefined,
    };
    if (output["vpcPeeringConnection"] !== undefined) {
        contents.VpcPeeringConnection = deserializeAws_ec2VpcPeeringConnection(output["vpcPeeringConnection"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateVpcResult = (output, context) => {
    const contents = {
        Vpc: undefined,
    };
    if (output["vpc"] !== undefined) {
        contents.Vpc = deserializeAws_ec2Vpc(output["vpc"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateVpnConnectionResult = (output, context) => {
    const contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const deserializeAws_ec2CreateVpnGatewayResult = (output, context) => {
    const contents = {
        VpnGateway: undefined,
    };
    if (output["vpnGateway"] !== undefined) {
        contents.VpnGateway = deserializeAws_ec2VpnGateway(output["vpnGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2CreditSpecification = (output, context) => {
    const contents = {
        CpuCredits: undefined,
    };
    if (output["cpuCredits"] !== undefined) {
        contents.CpuCredits = (0, smithy_client_1.expectString)(output["cpuCredits"]);
    }
    return contents;
};
const deserializeAws_ec2CustomerGateway = (output, context) => {
    const contents = {
        BgpAsn: undefined,
        CustomerGatewayId: undefined,
        IpAddress: undefined,
        CertificateArn: undefined,
        State: undefined,
        Type: undefined,
        DeviceName: undefined,
        Tags: undefined,
    };
    if (output["bgpAsn"] !== undefined) {
        contents.BgpAsn = (0, smithy_client_1.expectString)(output["bgpAsn"]);
    }
    if (output["customerGatewayId"] !== undefined) {
        contents.CustomerGatewayId = (0, smithy_client_1.expectString)(output["customerGatewayId"]);
    }
    if (output["ipAddress"] !== undefined) {
        contents.IpAddress = (0, smithy_client_1.expectString)(output["ipAddress"]);
    }
    if (output["certificateArn"] !== undefined) {
        contents.CertificateArn = (0, smithy_client_1.expectString)(output["certificateArn"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = (0, smithy_client_1.expectString)(output["deviceName"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2CustomerGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2CustomerGateway(entry, context);
    });
};
const deserializeAws_ec2DedicatedHostIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2DeleteCarrierGatewayResult = (output, context) => {
    const contents = {
        CarrierGateway: undefined,
    };
    if (output["carrierGateway"] !== undefined) {
        contents.CarrierGateway = deserializeAws_ec2CarrierGateway(output["carrierGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteClientVpnEndpointResult = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnEndpointStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteClientVpnRouteResult = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnRouteStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteEgressOnlyInternetGatewayResult = (output, context) => {
    const contents = {
        ReturnCode: undefined,
    };
    if (output["returnCode"] !== undefined) {
        contents.ReturnCode = (0, smithy_client_1.parseBoolean)(output["returnCode"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteFleetError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteFleetErrorItem = (output, context) => {
    const contents = {
        Error: undefined,
        FleetId: undefined,
    };
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2DeleteFleetError(output["error"], context);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = (0, smithy_client_1.expectString)(output["fleetId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteFleetErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DeleteFleetErrorItem(entry, context);
    });
};
const deserializeAws_ec2DeleteFleetsResult = (output, context) => {
    const contents = {
        SuccessfulFleetDeletions: undefined,
        UnsuccessfulFleetDeletions: undefined,
    };
    if (output.successfulFleetDeletionSet === "") {
        contents.SuccessfulFleetDeletions = [];
    }
    else if (output["successfulFleetDeletionSet"] !== undefined &&
        output["successfulFleetDeletionSet"]["item"] !== undefined) {
        contents.SuccessfulFleetDeletions = deserializeAws_ec2DeleteFleetSuccessSet((0, smithy_client_1.getArrayIfSingleItem)(output["successfulFleetDeletionSet"]["item"]), context);
    }
    if (output.unsuccessfulFleetDeletionSet === "") {
        contents.UnsuccessfulFleetDeletions = [];
    }
    else if (output["unsuccessfulFleetDeletionSet"] !== undefined &&
        output["unsuccessfulFleetDeletionSet"]["item"] !== undefined) {
        contents.UnsuccessfulFleetDeletions = deserializeAws_ec2DeleteFleetErrorSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessfulFleetDeletionSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DeleteFleetSuccessItem = (output, context) => {
    const contents = {
        CurrentFleetState: undefined,
        PreviousFleetState: undefined,
        FleetId: undefined,
    };
    if (output["currentFleetState"] !== undefined) {
        contents.CurrentFleetState = (0, smithy_client_1.expectString)(output["currentFleetState"]);
    }
    if (output["previousFleetState"] !== undefined) {
        contents.PreviousFleetState = (0, smithy_client_1.expectString)(output["previousFleetState"]);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = (0, smithy_client_1.expectString)(output["fleetId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteFleetSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DeleteFleetSuccessItem(entry, context);
    });
};
const deserializeAws_ec2DeleteFlowLogsResult = (output, context) => {
    const contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DeleteFpgaImageResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteInstanceEventWindowResult = (output, context) => {
    const contents = {
        InstanceEventWindowState: undefined,
    };
    if (output["instanceEventWindowState"] !== undefined) {
        contents.InstanceEventWindowState = deserializeAws_ec2InstanceEventWindowStateChange(output["instanceEventWindowState"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteIpamPoolResult = (output, context) => {
    const contents = {
        IpamPool: undefined,
    };
    if (output["ipamPool"] !== undefined) {
        contents.IpamPool = deserializeAws_ec2IpamPool(output["ipamPool"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteIpamResult = (output, context) => {
    const contents = {
        Ipam: undefined,
    };
    if (output["ipam"] !== undefined) {
        contents.Ipam = deserializeAws_ec2Ipam(output["ipam"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteIpamScopeResult = (output, context) => {
    const contents = {
        IpamScope: undefined,
    };
    if (output["ipamScope"] !== undefined) {
        contents.IpamScope = deserializeAws_ec2IpamScope(output["ipamScope"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteLaunchTemplateResult = (output, context) => {
    const contents = {
        LaunchTemplate: undefined,
    };
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2LaunchTemplate(output["launchTemplate"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorItem = (output, context) => {
    const contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        VersionNumber: undefined,
        ResponseError: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = (0, smithy_client_1.expectString)(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = (0, smithy_client_1.expectString)(output["launchTemplateName"]);
    }
    if (output["versionNumber"] !== undefined) {
        contents.VersionNumber = (0, smithy_client_1.strictParseLong)(output["versionNumber"]);
    }
    if (output["responseError"] !== undefined) {
        contents.ResponseError = deserializeAws_ec2ResponseError(output["responseError"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorItem(entry, context);
    });
};
const deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessItem = (output, context) => {
    const contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        VersionNumber: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = (0, smithy_client_1.expectString)(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = (0, smithy_client_1.expectString)(output["launchTemplateName"]);
    }
    if (output["versionNumber"] !== undefined) {
        contents.VersionNumber = (0, smithy_client_1.strictParseLong)(output["versionNumber"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessItem(entry, context);
    });
};
const deserializeAws_ec2DeleteLaunchTemplateVersionsResult = (output, context) => {
    const contents = {
        SuccessfullyDeletedLaunchTemplateVersions: undefined,
        UnsuccessfullyDeletedLaunchTemplateVersions: undefined,
    };
    if (output.successfullyDeletedLaunchTemplateVersionSet === "") {
        contents.SuccessfullyDeletedLaunchTemplateVersions = [];
    }
    else if (output["successfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
        output["successfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined) {
        contents.SuccessfullyDeletedLaunchTemplateVersions =
            deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessSet((0, smithy_client_1.getArrayIfSingleItem)(output["successfullyDeletedLaunchTemplateVersionSet"]["item"]), context);
    }
    if (output.unsuccessfullyDeletedLaunchTemplateVersionSet === "") {
        contents.UnsuccessfullyDeletedLaunchTemplateVersions = [];
    }
    else if (output["unsuccessfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
        output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined) {
        contents.UnsuccessfullyDeletedLaunchTemplateVersions =
            deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DeleteLocalGatewayRouteResult = (output, context) => {
    const contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2LocalGatewayRoute(output["route"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationResult = (output, context) => {
    const contents = {
        LocalGatewayRouteTableVpcAssociation: undefined,
    };
    if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociation = deserializeAws_ec2LocalGatewayRouteTableVpcAssociation(output["localGatewayRouteTableVpcAssociation"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteManagedPrefixListResult = (output, context) => {
    const contents = {
        PrefixList: undefined,
    };
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteNatGatewayResult = (output, context) => {
    const contents = {
        NatGatewayId: undefined,
    };
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = (0, smithy_client_1.expectString)(output["natGatewayId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisResult = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeAnalysisId: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeAnalysisId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteNetworkInsightsAccessScopeResult = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeId: undefined,
    };
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteNetworkInsightsAnalysisResult = (output, context) => {
    const contents = {
        NetworkInsightsAnalysisId: undefined,
    };
    if (output["networkInsightsAnalysisId"] !== undefined) {
        contents.NetworkInsightsAnalysisId = (0, smithy_client_1.expectString)(output["networkInsightsAnalysisId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteNetworkInsightsPathResult = (output, context) => {
    const contents = {
        NetworkInsightsPathId: undefined,
    };
    if (output["networkInsightsPathId"] !== undefined) {
        contents.NetworkInsightsPathId = (0, smithy_client_1.expectString)(output["networkInsightsPathId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteNetworkInterfacePermissionResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2DeletePublicIpv4PoolResult = (output, context) => {
    const contents = {
        ReturnValue: undefined,
    };
    if (output["returnValue"] !== undefined) {
        contents.ReturnValue = (0, smithy_client_1.parseBoolean)(output["returnValue"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteQueuedReservedInstancesError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteQueuedReservedInstancesResult = (output, context) => {
    const contents = {
        SuccessfulQueuedPurchaseDeletions: undefined,
        FailedQueuedPurchaseDeletions: undefined,
    };
    if (output.successfulQueuedPurchaseDeletionSet === "") {
        contents.SuccessfulQueuedPurchaseDeletions = [];
    }
    else if (output["successfulQueuedPurchaseDeletionSet"] !== undefined &&
        output["successfulQueuedPurchaseDeletionSet"]["item"] !== undefined) {
        contents.SuccessfulQueuedPurchaseDeletions = deserializeAws_ec2SuccessfulQueuedPurchaseDeletionSet((0, smithy_client_1.getArrayIfSingleItem)(output["successfulQueuedPurchaseDeletionSet"]["item"]), context);
    }
    if (output.failedQueuedPurchaseDeletionSet === "") {
        contents.FailedQueuedPurchaseDeletions = [];
    }
    else if (output["failedQueuedPurchaseDeletionSet"] !== undefined &&
        output["failedQueuedPurchaseDeletionSet"]["item"] !== undefined) {
        contents.FailedQueuedPurchaseDeletions = deserializeAws_ec2FailedQueuedPurchaseDeletionSet((0, smithy_client_1.getArrayIfSingleItem)(output["failedQueuedPurchaseDeletionSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DeleteSubnetCidrReservationResult = (output, context) => {
    const contents = {
        DeletedSubnetCidrReservation: undefined,
    };
    if (output["deletedSubnetCidrReservation"] !== undefined) {
        contents.DeletedSubnetCidrReservation = deserializeAws_ec2SubnetCidrReservation(output["deletedSubnetCidrReservation"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteTrafficMirrorFilterResult = (output, context) => {
    const contents = {
        TrafficMirrorFilterId: undefined,
    };
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = (0, smithy_client_1.expectString)(output["trafficMirrorFilterId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteTrafficMirrorFilterRuleResult = (output, context) => {
    const contents = {
        TrafficMirrorFilterRuleId: undefined,
    };
    if (output["trafficMirrorFilterRuleId"] !== undefined) {
        contents.TrafficMirrorFilterRuleId = (0, smithy_client_1.expectString)(output["trafficMirrorFilterRuleId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteTrafficMirrorSessionResult = (output, context) => {
    const contents = {
        TrafficMirrorSessionId: undefined,
    };
    if (output["trafficMirrorSessionId"] !== undefined) {
        contents.TrafficMirrorSessionId = (0, smithy_client_1.expectString)(output["trafficMirrorSessionId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteTrafficMirrorTargetResult = (output, context) => {
    const contents = {
        TrafficMirrorTargetId: undefined,
    };
    if (output["trafficMirrorTargetId"] !== undefined) {
        contents.TrafficMirrorTargetId = (0, smithy_client_1.expectString)(output["trafficMirrorTargetId"]);
    }
    return contents;
};
const deserializeAws_ec2DeleteTransitGatewayConnectPeerResult = (output, context) => {
    const contents = {
        TransitGatewayConnectPeer: undefined,
    };
    if (output["transitGatewayConnectPeer"] !== undefined) {
        contents.TransitGatewayConnectPeer = deserializeAws_ec2TransitGatewayConnectPeer(output["transitGatewayConnectPeer"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteTransitGatewayConnectResult = (output, context) => {
    const contents = {
        TransitGatewayConnect: undefined,
    };
    if (output["transitGatewayConnect"] !== undefined) {
        contents.TransitGatewayConnect = deserializeAws_ec2TransitGatewayConnect(output["transitGatewayConnect"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {
        TransitGatewayMulticastDomain: undefined,
    };
    if (output["transitGatewayMulticastDomain"] !== undefined) {
        contents.TransitGatewayMulticastDomain = deserializeAws_ec2TransitGatewayMulticastDomain(output["transitGatewayMulticastDomain"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {
        TransitGatewayPeeringAttachment: undefined,
    };
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceResult = (output, context) => {
    const contents = {
        TransitGatewayPrefixListReference: undefined,
    };
    if (output["transitGatewayPrefixListReference"] !== undefined) {
        contents.TransitGatewayPrefixListReference = deserializeAws_ec2TransitGatewayPrefixListReference(output["transitGatewayPrefixListReference"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteTransitGatewayResult = (output, context) => {
    const contents = {
        TransitGateway: undefined,
    };
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2TransitGateway(output["transitGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteTransitGatewayRouteResult = (output, context) => {
    const contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2TransitGatewayRoute(output["route"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteTransitGatewayRouteTableResult = (output, context) => {
    const contents = {
        TransitGatewayRouteTable: undefined,
    };
    if (output["transitGatewayRouteTable"] !== undefined) {
        contents.TransitGatewayRouteTable = deserializeAws_ec2TransitGatewayRouteTable(output["transitGatewayRouteTable"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsResult = (output, context) => {
    const contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsResult = (output, context) => {
    const contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DeleteVpcEndpointsResult = (output, context) => {
    const contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DeleteVpcPeeringConnectionResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2DeprovisionByoipCidrResult = (output, context) => {
    const contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const deserializeAws_ec2DeprovisionedAddressSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2DeprovisionIpamPoolCidrResult = (output, context) => {
    const contents = {
        IpamPoolCidr: undefined,
    };
    if (output["ipamPoolCidr"] !== undefined) {
        contents.IpamPoolCidr = deserializeAws_ec2IpamPoolCidr(output["ipamPoolCidr"], context);
    }
    return contents;
};
const deserializeAws_ec2DeprovisionPublicIpv4PoolCidrResult = (output, context) => {
    const contents = {
        PoolId: undefined,
        DeprovisionedAddresses: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = (0, smithy_client_1.expectString)(output["poolId"]);
    }
    if (output.deprovisionedAddressSet === "") {
        contents.DeprovisionedAddresses = [];
    }
    else if (output["deprovisionedAddressSet"] !== undefined &&
        output["deprovisionedAddressSet"]["item"] !== undefined) {
        contents.DeprovisionedAddresses = deserializeAws_ec2DeprovisionedAddressSet((0, smithy_client_1.getArrayIfSingleItem)(output["deprovisionedAddressSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DeregisterInstanceEventNotificationAttributesResult = (output, context) => {
    const contents = {
        InstanceTagAttribute: undefined,
    };
    if (output["instanceTagAttribute"] !== undefined) {
        contents.InstanceTagAttribute = deserializeAws_ec2InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
    }
    return contents;
};
const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersResult = (output, context) => {
    const contents = {
        DeregisteredMulticastGroupMembers: undefined,
    };
    if (output["deregisteredMulticastGroupMembers"] !== undefined) {
        contents.DeregisteredMulticastGroupMembers = deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupMembers(output["deregisteredMulticastGroupMembers"], context);
    }
    return contents;
};
const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesResult = (output, context) => {
    const contents = {
        DeregisteredMulticastGroupSources: undefined,
    };
    if (output["deregisteredMulticastGroupSources"] !== undefined) {
        contents.DeregisteredMulticastGroupSources = deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupSources(output["deregisteredMulticastGroupSources"], context);
    }
    return contents;
};
const deserializeAws_ec2DescribeAccountAttributesResult = (output, context) => {
    const contents = {
        AccountAttributes: undefined,
    };
    if (output.accountAttributeSet === "") {
        contents.AccountAttributes = [];
    }
    else if (output["accountAttributeSet"] !== undefined && output["accountAttributeSet"]["item"] !== undefined) {
        contents.AccountAttributes = deserializeAws_ec2AccountAttributeList((0, smithy_client_1.getArrayIfSingleItem)(output["accountAttributeSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeAddressesAttributeResult = (output, context) => {
    const contents = {
        Addresses: undefined,
        NextToken: undefined,
    };
    if (output.addressSet === "") {
        contents.Addresses = [];
    }
    else if (output["addressSet"] !== undefined && output["addressSet"]["item"] !== undefined) {
        contents.Addresses = deserializeAws_ec2AddressSet((0, smithy_client_1.getArrayIfSingleItem)(output["addressSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeAddressesResult = (output, context) => {
    const contents = {
        Addresses: undefined,
    };
    if (output.addressesSet === "") {
        contents.Addresses = [];
    }
    else if (output["addressesSet"] !== undefined && output["addressesSet"]["item"] !== undefined) {
        contents.Addresses = deserializeAws_ec2AddressList((0, smithy_client_1.getArrayIfSingleItem)(output["addressesSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeAggregateIdFormatResult = (output, context) => {
    const contents = {
        UseLongIdsAggregated: undefined,
        Statuses: undefined,
    };
    if (output["useLongIdsAggregated"] !== undefined) {
        contents.UseLongIdsAggregated = (0, smithy_client_1.parseBoolean)(output["useLongIdsAggregated"]);
    }
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = deserializeAws_ec2IdFormatList((0, smithy_client_1.getArrayIfSingleItem)(output["statusSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeAvailabilityZonesResult = (output, context) => {
    const contents = {
        AvailabilityZones: undefined,
    };
    if (output.availabilityZoneInfo === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneInfo"] !== undefined && output["availabilityZoneInfo"]["item"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_ec2AvailabilityZoneList((0, smithy_client_1.getArrayIfSingleItem)(output["availabilityZoneInfo"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeBundleTasksResult = (output, context) => {
    const contents = {
        BundleTasks: undefined,
    };
    if (output.bundleInstanceTasksSet === "") {
        contents.BundleTasks = [];
    }
    else if (output["bundleInstanceTasksSet"] !== undefined && output["bundleInstanceTasksSet"]["item"] !== undefined) {
        contents.BundleTasks = deserializeAws_ec2BundleTaskList((0, smithy_client_1.getArrayIfSingleItem)(output["bundleInstanceTasksSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeByoipCidrsResult = (output, context) => {
    const contents = {
        ByoipCidrs: undefined,
        NextToken: undefined,
    };
    if (output.byoipCidrSet === "") {
        contents.ByoipCidrs = [];
    }
    else if (output["byoipCidrSet"] !== undefined && output["byoipCidrSet"]["item"] !== undefined) {
        contents.ByoipCidrs = deserializeAws_ec2ByoipCidrSet((0, smithy_client_1.getArrayIfSingleItem)(output["byoipCidrSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeCapacityReservationFleetsResult = (output, context) => {
    const contents = {
        CapacityReservationFleets: undefined,
        NextToken: undefined,
    };
    if (output.capacityReservationFleetSet === "") {
        contents.CapacityReservationFleets = [];
    }
    else if (output["capacityReservationFleetSet"] !== undefined &&
        output["capacityReservationFleetSet"]["item"] !== undefined) {
        contents.CapacityReservationFleets = deserializeAws_ec2CapacityReservationFleetSet((0, smithy_client_1.getArrayIfSingleItem)(output["capacityReservationFleetSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeCapacityReservationsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        CapacityReservations: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.capacityReservationSet === "") {
        contents.CapacityReservations = [];
    }
    else if (output["capacityReservationSet"] !== undefined && output["capacityReservationSet"]["item"] !== undefined) {
        contents.CapacityReservations = deserializeAws_ec2CapacityReservationSet((0, smithy_client_1.getArrayIfSingleItem)(output["capacityReservationSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeCarrierGatewaysResult = (output, context) => {
    const contents = {
        CarrierGateways: undefined,
        NextToken: undefined,
    };
    if (output.carrierGatewaySet === "") {
        contents.CarrierGateways = [];
    }
    else if (output["carrierGatewaySet"] !== undefined && output["carrierGatewaySet"]["item"] !== undefined) {
        contents.CarrierGateways = deserializeAws_ec2CarrierGatewaySet((0, smithy_client_1.getArrayIfSingleItem)(output["carrierGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeClassicLinkInstancesResult = (output, context) => {
    const contents = {
        Instances: undefined,
        NextToken: undefined,
    };
    if (output.instancesSet === "") {
        contents.Instances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2ClassicLinkInstanceList((0, smithy_client_1.getArrayIfSingleItem)(output["instancesSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeClientVpnAuthorizationRulesResult = (output, context) => {
    const contents = {
        AuthorizationRules: undefined,
        NextToken: undefined,
    };
    if (output.authorizationRule === "") {
        contents.AuthorizationRules = [];
    }
    else if (output["authorizationRule"] !== undefined && output["authorizationRule"]["item"] !== undefined) {
        contents.AuthorizationRules = deserializeAws_ec2AuthorizationRuleSet((0, smithy_client_1.getArrayIfSingleItem)(output["authorizationRule"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeClientVpnConnectionsResult = (output, context) => {
    const contents = {
        Connections: undefined,
        NextToken: undefined,
    };
    if (output.connections === "") {
        contents.Connections = [];
    }
    else if (output["connections"] !== undefined && output["connections"]["item"] !== undefined) {
        contents.Connections = deserializeAws_ec2ClientVpnConnectionSet((0, smithy_client_1.getArrayIfSingleItem)(output["connections"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeClientVpnEndpointsResult = (output, context) => {
    const contents = {
        ClientVpnEndpoints: undefined,
        NextToken: undefined,
    };
    if (output.clientVpnEndpoint === "") {
        contents.ClientVpnEndpoints = [];
    }
    else if (output["clientVpnEndpoint"] !== undefined && output["clientVpnEndpoint"]["item"] !== undefined) {
        contents.ClientVpnEndpoints = deserializeAws_ec2EndpointSet((0, smithy_client_1.getArrayIfSingleItem)(output["clientVpnEndpoint"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeClientVpnRoutesResult = (output, context) => {
    const contents = {
        Routes: undefined,
        NextToken: undefined,
    };
    if (output.routes === "") {
        contents.Routes = [];
    }
    else if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2ClientVpnRouteSet((0, smithy_client_1.getArrayIfSingleItem)(output["routes"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeClientVpnTargetNetworksResult = (output, context) => {
    const contents = {
        ClientVpnTargetNetworks: undefined,
        NextToken: undefined,
    };
    if (output.clientVpnTargetNetworks === "") {
        contents.ClientVpnTargetNetworks = [];
    }
    else if (output["clientVpnTargetNetworks"] !== undefined &&
        output["clientVpnTargetNetworks"]["item"] !== undefined) {
        contents.ClientVpnTargetNetworks = deserializeAws_ec2TargetNetworkSet((0, smithy_client_1.getArrayIfSingleItem)(output["clientVpnTargetNetworks"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeCoipPoolsResult = (output, context) => {
    const contents = {
        CoipPools: undefined,
        NextToken: undefined,
    };
    if (output.coipPoolSet === "") {
        contents.CoipPools = [];
    }
    else if (output["coipPoolSet"] !== undefined && output["coipPoolSet"]["item"] !== undefined) {
        contents.CoipPools = deserializeAws_ec2CoipPoolSet((0, smithy_client_1.getArrayIfSingleItem)(output["coipPoolSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeConversionTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ConversionTask(entry, context);
    });
};
const deserializeAws_ec2DescribeConversionTasksResult = (output, context) => {
    const contents = {
        ConversionTasks: undefined,
    };
    if (output.conversionTasks === "") {
        contents.ConversionTasks = [];
    }
    else if (output["conversionTasks"] !== undefined && output["conversionTasks"]["item"] !== undefined) {
        contents.ConversionTasks = deserializeAws_ec2DescribeConversionTaskList((0, smithy_client_1.getArrayIfSingleItem)(output["conversionTasks"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeCustomerGatewaysResult = (output, context) => {
    const contents = {
        CustomerGateways: undefined,
    };
    if (output.customerGatewaySet === "") {
        contents.CustomerGateways = [];
    }
    else if (output["customerGatewaySet"] !== undefined && output["customerGatewaySet"]["item"] !== undefined) {
        contents.CustomerGateways = deserializeAws_ec2CustomerGatewayList((0, smithy_client_1.getArrayIfSingleItem)(output["customerGatewaySet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeDhcpOptionsResult = (output, context) => {
    const contents = {
        DhcpOptions: undefined,
        NextToken: undefined,
    };
    if (output.dhcpOptionsSet === "") {
        contents.DhcpOptions = [];
    }
    else if (output["dhcpOptionsSet"] !== undefined && output["dhcpOptionsSet"]["item"] !== undefined) {
        contents.DhcpOptions = deserializeAws_ec2DhcpOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["dhcpOptionsSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeEgressOnlyInternetGatewaysResult = (output, context) => {
    const contents = {
        EgressOnlyInternetGateways: undefined,
        NextToken: undefined,
    };
    if (output.egressOnlyInternetGatewaySet === "") {
        contents.EgressOnlyInternetGateways = [];
    }
    else if (output["egressOnlyInternetGatewaySet"] !== undefined &&
        output["egressOnlyInternetGatewaySet"]["item"] !== undefined) {
        contents.EgressOnlyInternetGateways = deserializeAws_ec2EgressOnlyInternetGatewayList((0, smithy_client_1.getArrayIfSingleItem)(output["egressOnlyInternetGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeElasticGpusResult = (output, context) => {
    const contents = {
        ElasticGpuSet: undefined,
        MaxResults: undefined,
        NextToken: undefined,
    };
    if (output.elasticGpuSet === "") {
        contents.ElasticGpuSet = [];
    }
    else if (output["elasticGpuSet"] !== undefined && output["elasticGpuSet"]["item"] !== undefined) {
        contents.ElasticGpuSet = deserializeAws_ec2ElasticGpuSet((0, smithy_client_1.getArrayIfSingleItem)(output["elasticGpuSet"]["item"]), context);
    }
    if (output["maxResults"] !== undefined) {
        contents.MaxResults = (0, smithy_client_1.strictParseInt32)(output["maxResults"]);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeExportImageTasksResult = (output, context) => {
    const contents = {
        ExportImageTasks: undefined,
        NextToken: undefined,
    };
    if (output.exportImageTaskSet === "") {
        contents.ExportImageTasks = [];
    }
    else if (output["exportImageTaskSet"] !== undefined && output["exportImageTaskSet"]["item"] !== undefined) {
        contents.ExportImageTasks = deserializeAws_ec2ExportImageTaskList((0, smithy_client_1.getArrayIfSingleItem)(output["exportImageTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeExportTasksResult = (output, context) => {
    const contents = {
        ExportTasks: undefined,
    };
    if (output.exportTaskSet === "") {
        contents.ExportTasks = [];
    }
    else if (output["exportTaskSet"] !== undefined && output["exportTaskSet"]["item"] !== undefined) {
        contents.ExportTasks = deserializeAws_ec2ExportTaskList((0, smithy_client_1.getArrayIfSingleItem)(output["exportTaskSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeFastLaunchImagesResult = (output, context) => {
    const contents = {
        FastLaunchImages: undefined,
        NextToken: undefined,
    };
    if (output.fastLaunchImageSet === "") {
        contents.FastLaunchImages = [];
    }
    else if (output["fastLaunchImageSet"] !== undefined && output["fastLaunchImageSet"]["item"] !== undefined) {
        contents.FastLaunchImages = deserializeAws_ec2DescribeFastLaunchImagesSuccessSet((0, smithy_client_1.getArrayIfSingleItem)(output["fastLaunchImageSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeFastLaunchImagesSuccessItem = (output, context) => {
    const contents = {
        ImageId: undefined,
        ResourceType: undefined,
        SnapshotConfiguration: undefined,
        LaunchTemplate: undefined,
        MaxParallelLaunches: undefined,
        OwnerId: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        StateTransitionTime: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["snapshotConfiguration"] !== undefined) {
        contents.SnapshotConfiguration = deserializeAws_ec2FastLaunchSnapshotConfigurationResponse(output["snapshotConfiguration"], context);
    }
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
    }
    if (output["maxParallelLaunches"] !== undefined) {
        contents.MaxParallelLaunches = (0, smithy_client_1.strictParseInt32)(output["maxParallelLaunches"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(output["stateTransitionReason"]);
    }
    if (output["stateTransitionTime"] !== undefined) {
        contents.StateTransitionTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["stateTransitionTime"]));
    }
    return contents;
};
const deserializeAws_ec2DescribeFastLaunchImagesSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DescribeFastLaunchImagesSuccessItem(entry, context);
    });
};
const deserializeAws_ec2DescribeFastSnapshotRestoresResult = (output, context) => {
    const contents = {
        FastSnapshotRestores: undefined,
        NextToken: undefined,
    };
    if (output.fastSnapshotRestoreSet === "") {
        contents.FastSnapshotRestores = [];
    }
    else if (output["fastSnapshotRestoreSet"] !== undefined && output["fastSnapshotRestoreSet"]["item"] !== undefined) {
        contents.FastSnapshotRestores = deserializeAws_ec2DescribeFastSnapshotRestoreSuccessSet((0, smithy_client_1.getArrayIfSingleItem)(output["fastSnapshotRestoreSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeFastSnapshotRestoreSuccessItem = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        AvailabilityZone: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        OwnerId: undefined,
        OwnerAlias: undefined,
        EnablingTime: undefined,
        OptimizingTime: undefined,
        EnabledTime: undefined,
        DisablingTime: undefined,
        DisabledTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(output["stateTransitionReason"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = (0, smithy_client_1.expectString)(output["ownerAlias"]);
    }
    if (output["enablingTime"] !== undefined) {
        contents.EnablingTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["enablingTime"]));
    }
    if (output["optimizingTime"] !== undefined) {
        contents.OptimizingTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["optimizingTime"]));
    }
    if (output["enabledTime"] !== undefined) {
        contents.EnabledTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["enabledTime"]));
    }
    if (output["disablingTime"] !== undefined) {
        contents.DisablingTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["disablingTime"]));
    }
    if (output["disabledTime"] !== undefined) {
        contents.DisabledTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["disabledTime"]));
    }
    return contents;
};
const deserializeAws_ec2DescribeFastSnapshotRestoreSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DescribeFastSnapshotRestoreSuccessItem(entry, context);
    });
};
const deserializeAws_ec2DescribeFleetError = (output, context) => {
    const contents = {
        LaunchTemplateAndOverrides: undefined,
        Lifecycle: undefined,
        ErrorCode: undefined,
        ErrorMessage: undefined,
    };
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = (0, smithy_client_1.expectString)(output["lifecycle"]);
    }
    if (output["errorCode"] !== undefined) {
        contents.ErrorCode = (0, smithy_client_1.expectString)(output["errorCode"]);
    }
    if (output["errorMessage"] !== undefined) {
        contents.ErrorMessage = (0, smithy_client_1.expectString)(output["errorMessage"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeFleetHistoryResult = (output, context) => {
    const contents = {
        HistoryRecords: undefined,
        LastEvaluatedTime: undefined,
        NextToken: undefined,
        FleetId: undefined,
        StartTime: undefined,
    };
    if (output.historyRecordSet === "") {
        contents.HistoryRecords = [];
    }
    else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
        contents.HistoryRecords = deserializeAws_ec2HistoryRecordSet((0, smithy_client_1.getArrayIfSingleItem)(output["historyRecordSet"]["item"]), context);
    }
    if (output["lastEvaluatedTime"] !== undefined) {
        contents.LastEvaluatedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["lastEvaluatedTime"]));
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = (0, smithy_client_1.expectString)(output["fleetId"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startTime"]));
    }
    return contents;
};
const deserializeAws_ec2DescribeFleetInstancesResult = (output, context) => {
    const contents = {
        ActiveInstances: undefined,
        NextToken: undefined,
        FleetId: undefined,
    };
    if (output.activeInstanceSet === "") {
        contents.ActiveInstances = [];
    }
    else if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
        contents.ActiveInstances = deserializeAws_ec2ActiveInstanceSet((0, smithy_client_1.getArrayIfSingleItem)(output["activeInstanceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = (0, smithy_client_1.expectString)(output["fleetId"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeFleetsErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DescribeFleetError(entry, context);
    });
};
const deserializeAws_ec2DescribeFleetsInstances = (output, context) => {
    const contents = {
        LaunchTemplateAndOverrides: undefined,
        Lifecycle: undefined,
        InstanceIds: undefined,
        InstanceType: undefined,
        Platform: undefined,
    };
    if (output["launchTemplateAndOverrides"] !== undefined) {
        contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(output["launchTemplateAndOverrides"], context);
    }
    if (output["lifecycle"] !== undefined) {
        contents.Lifecycle = (0, smithy_client_1.expectString)(output["lifecycle"]);
    }
    if (output.instanceIds === "") {
        contents.InstanceIds = [];
    }
    else if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
        contents.InstanceIds = deserializeAws_ec2InstanceIdsSet((0, smithy_client_1.getArrayIfSingleItem)(output["instanceIds"]["item"]), context);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeFleetsInstancesSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DescribeFleetsInstances(entry, context);
    });
};
const deserializeAws_ec2DescribeFleetsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        Fleets: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.fleetSet === "") {
        contents.Fleets = [];
    }
    else if (output["fleetSet"] !== undefined && output["fleetSet"]["item"] !== undefined) {
        contents.Fleets = deserializeAws_ec2FleetSet((0, smithy_client_1.getArrayIfSingleItem)(output["fleetSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeFlowLogsResult = (output, context) => {
    const contents = {
        FlowLogs: undefined,
        NextToken: undefined,
    };
    if (output.flowLogSet === "") {
        contents.FlowLogs = [];
    }
    else if (output["flowLogSet"] !== undefined && output["flowLogSet"]["item"] !== undefined) {
        contents.FlowLogs = deserializeAws_ec2FlowLogSet((0, smithy_client_1.getArrayIfSingleItem)(output["flowLogSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeFpgaImageAttributeResult = (output, context) => {
    const contents = {
        FpgaImageAttribute: undefined,
    };
    if (output["fpgaImageAttribute"] !== undefined) {
        contents.FpgaImageAttribute = deserializeAws_ec2FpgaImageAttribute(output["fpgaImageAttribute"], context);
    }
    return contents;
};
const deserializeAws_ec2DescribeFpgaImagesResult = (output, context) => {
    const contents = {
        FpgaImages: undefined,
        NextToken: undefined,
    };
    if (output.fpgaImageSet === "") {
        contents.FpgaImages = [];
    }
    else if (output["fpgaImageSet"] !== undefined && output["fpgaImageSet"]["item"] !== undefined) {
        contents.FpgaImages = deserializeAws_ec2FpgaImageList((0, smithy_client_1.getArrayIfSingleItem)(output["fpgaImageSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeHostReservationOfferingsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        OfferingSet: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.offeringSet === "") {
        contents.OfferingSet = [];
    }
    else if (output["offeringSet"] !== undefined && output["offeringSet"]["item"] !== undefined) {
        contents.OfferingSet = deserializeAws_ec2HostOfferingSet((0, smithy_client_1.getArrayIfSingleItem)(output["offeringSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeHostReservationsResult = (output, context) => {
    const contents = {
        HostReservationSet: undefined,
        NextToken: undefined,
    };
    if (output.hostReservationSet === "") {
        contents.HostReservationSet = [];
    }
    else if (output["hostReservationSet"] !== undefined && output["hostReservationSet"]["item"] !== undefined) {
        contents.HostReservationSet = deserializeAws_ec2HostReservationSet((0, smithy_client_1.getArrayIfSingleItem)(output["hostReservationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeHostsResult = (output, context) => {
    const contents = {
        Hosts: undefined,
        NextToken: undefined,
    };
    if (output.hostSet === "") {
        contents.Hosts = [];
    }
    else if (output["hostSet"] !== undefined && output["hostSet"]["item"] !== undefined) {
        contents.Hosts = deserializeAws_ec2HostList((0, smithy_client_1.getArrayIfSingleItem)(output["hostSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeIamInstanceProfileAssociationsResult = (output, context) => {
    const contents = {
        IamInstanceProfileAssociations: undefined,
        NextToken: undefined,
    };
    if (output.iamInstanceProfileAssociationSet === "") {
        contents.IamInstanceProfileAssociations = [];
    }
    else if (output["iamInstanceProfileAssociationSet"] !== undefined &&
        output["iamInstanceProfileAssociationSet"]["item"] !== undefined) {
        contents.IamInstanceProfileAssociations = deserializeAws_ec2IamInstanceProfileAssociationSet((0, smithy_client_1.getArrayIfSingleItem)(output["iamInstanceProfileAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeIdentityIdFormatResult = (output, context) => {
    const contents = {
        Statuses: undefined,
    };
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = deserializeAws_ec2IdFormatList((0, smithy_client_1.getArrayIfSingleItem)(output["statusSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeIdFormatResult = (output, context) => {
    const contents = {
        Statuses: undefined,
    };
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = deserializeAws_ec2IdFormatList((0, smithy_client_1.getArrayIfSingleItem)(output["statusSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeImagesResult = (output, context) => {
    const contents = {
        Images: undefined,
    };
    if (output.imagesSet === "") {
        contents.Images = [];
    }
    else if (output["imagesSet"] !== undefined && output["imagesSet"]["item"] !== undefined) {
        contents.Images = deserializeAws_ec2ImageList((0, smithy_client_1.getArrayIfSingleItem)(output["imagesSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeImportImageTasksResult = (output, context) => {
    const contents = {
        ImportImageTasks: undefined,
        NextToken: undefined,
    };
    if (output.importImageTaskSet === "") {
        contents.ImportImageTasks = [];
    }
    else if (output["importImageTaskSet"] !== undefined && output["importImageTaskSet"]["item"] !== undefined) {
        contents.ImportImageTasks = deserializeAws_ec2ImportImageTaskList((0, smithy_client_1.getArrayIfSingleItem)(output["importImageTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeImportSnapshotTasksResult = (output, context) => {
    const contents = {
        ImportSnapshotTasks: undefined,
        NextToken: undefined,
    };
    if (output.importSnapshotTaskSet === "") {
        contents.ImportSnapshotTasks = [];
    }
    else if (output["importSnapshotTaskSet"] !== undefined && output["importSnapshotTaskSet"]["item"] !== undefined) {
        contents.ImportSnapshotTasks = deserializeAws_ec2ImportSnapshotTaskList((0, smithy_client_1.getArrayIfSingleItem)(output["importSnapshotTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeInstanceCreditSpecificationsResult = (output, context) => {
    const contents = {
        InstanceCreditSpecifications: undefined,
        NextToken: undefined,
    };
    if (output.instanceCreditSpecificationSet === "") {
        contents.InstanceCreditSpecifications = [];
    }
    else if (output["instanceCreditSpecificationSet"] !== undefined &&
        output["instanceCreditSpecificationSet"]["item"] !== undefined) {
        contents.InstanceCreditSpecifications = deserializeAws_ec2InstanceCreditSpecificationList((0, smithy_client_1.getArrayIfSingleItem)(output["instanceCreditSpecificationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeInstanceEventNotificationAttributesResult = (output, context) => {
    const contents = {
        InstanceTagAttribute: undefined,
    };
    if (output["instanceTagAttribute"] !== undefined) {
        contents.InstanceTagAttribute = deserializeAws_ec2InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
    }
    return contents;
};
const deserializeAws_ec2DescribeInstanceEventWindowsResult = (output, context) => {
    const contents = {
        InstanceEventWindows: undefined,
        NextToken: undefined,
    };
    if (output.instanceEventWindowSet === "") {
        contents.InstanceEventWindows = [];
    }
    else if (output["instanceEventWindowSet"] !== undefined && output["instanceEventWindowSet"]["item"] !== undefined) {
        contents.InstanceEventWindows = deserializeAws_ec2InstanceEventWindowSet((0, smithy_client_1.getArrayIfSingleItem)(output["instanceEventWindowSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeInstancesResult = (output, context) => {
    const contents = {
        Reservations: undefined,
        NextToken: undefined,
    };
    if (output.reservationSet === "") {
        contents.Reservations = [];
    }
    else if (output["reservationSet"] !== undefined && output["reservationSet"]["item"] !== undefined) {
        contents.Reservations = deserializeAws_ec2ReservationList((0, smithy_client_1.getArrayIfSingleItem)(output["reservationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeInstanceStatusResult = (output, context) => {
    const contents = {
        InstanceStatuses: undefined,
        NextToken: undefined,
    };
    if (output.instanceStatusSet === "") {
        contents.InstanceStatuses = [];
    }
    else if (output["instanceStatusSet"] !== undefined && output["instanceStatusSet"]["item"] !== undefined) {
        contents.InstanceStatuses = deserializeAws_ec2InstanceStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["instanceStatusSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeInstanceTypeOfferingsResult = (output, context) => {
    const contents = {
        InstanceTypeOfferings: undefined,
        NextToken: undefined,
    };
    if (output.instanceTypeOfferingSet === "") {
        contents.InstanceTypeOfferings = [];
    }
    else if (output["instanceTypeOfferingSet"] !== undefined &&
        output["instanceTypeOfferingSet"]["item"] !== undefined) {
        contents.InstanceTypeOfferings = deserializeAws_ec2InstanceTypeOfferingsList((0, smithy_client_1.getArrayIfSingleItem)(output["instanceTypeOfferingSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeInstanceTypesResult = (output, context) => {
    const contents = {
        InstanceTypes: undefined,
        NextToken: undefined,
    };
    if (output.instanceTypeSet === "") {
        contents.InstanceTypes = [];
    }
    else if (output["instanceTypeSet"] !== undefined && output["instanceTypeSet"]["item"] !== undefined) {
        contents.InstanceTypes = deserializeAws_ec2InstanceTypeInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["instanceTypeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeInternetGatewaysResult = (output, context) => {
    const contents = {
        InternetGateways: undefined,
        NextToken: undefined,
    };
    if (output.internetGatewaySet === "") {
        contents.InternetGateways = [];
    }
    else if (output["internetGatewaySet"] !== undefined && output["internetGatewaySet"]["item"] !== undefined) {
        contents.InternetGateways = deserializeAws_ec2InternetGatewayList((0, smithy_client_1.getArrayIfSingleItem)(output["internetGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeIpamPoolsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        IpamPools: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.ipamPoolSet === "") {
        contents.IpamPools = [];
    }
    else if (output["ipamPoolSet"] !== undefined && output["ipamPoolSet"]["item"] !== undefined) {
        contents.IpamPools = deserializeAws_ec2IpamPoolSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipamPoolSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeIpamScopesResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        IpamScopes: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.ipamScopeSet === "") {
        contents.IpamScopes = [];
    }
    else if (output["ipamScopeSet"] !== undefined && output["ipamScopeSet"]["item"] !== undefined) {
        contents.IpamScopes = deserializeAws_ec2IpamScopeSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipamScopeSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeIpamsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        Ipams: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.ipamSet === "") {
        contents.Ipams = [];
    }
    else if (output["ipamSet"] !== undefined && output["ipamSet"]["item"] !== undefined) {
        contents.Ipams = deserializeAws_ec2IpamSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipamSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeIpv6PoolsResult = (output, context) => {
    const contents = {
        Ipv6Pools: undefined,
        NextToken: undefined,
    };
    if (output.ipv6PoolSet === "") {
        contents.Ipv6Pools = [];
    }
    else if (output["ipv6PoolSet"] !== undefined && output["ipv6PoolSet"]["item"] !== undefined) {
        contents.Ipv6Pools = deserializeAws_ec2Ipv6PoolSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6PoolSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeKeyPairsResult = (output, context) => {
    const contents = {
        KeyPairs: undefined,
    };
    if (output.keySet === "") {
        contents.KeyPairs = [];
    }
    else if (output["keySet"] !== undefined && output["keySet"]["item"] !== undefined) {
        contents.KeyPairs = deserializeAws_ec2KeyPairList((0, smithy_client_1.getArrayIfSingleItem)(output["keySet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeLaunchTemplatesResult = (output, context) => {
    const contents = {
        LaunchTemplates: undefined,
        NextToken: undefined,
    };
    if (output.launchTemplates === "") {
        contents.LaunchTemplates = [];
    }
    else if (output["launchTemplates"] !== undefined && output["launchTemplates"]["item"] !== undefined) {
        contents.LaunchTemplates = deserializeAws_ec2LaunchTemplateSet((0, smithy_client_1.getArrayIfSingleItem)(output["launchTemplates"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeLaunchTemplateVersionsResult = (output, context) => {
    const contents = {
        LaunchTemplateVersions: undefined,
        NextToken: undefined,
    };
    if (output.launchTemplateVersionSet === "") {
        contents.LaunchTemplateVersions = [];
    }
    else if (output["launchTemplateVersionSet"] !== undefined &&
        output["launchTemplateVersionSet"]["item"] !== undefined) {
        contents.LaunchTemplateVersions = deserializeAws_ec2LaunchTemplateVersionSet((0, smithy_client_1.getArrayIfSingleItem)(output["launchTemplateVersionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeLocalGatewayRouteTablesResult = (output, context) => {
    const contents = {
        LocalGatewayRouteTables: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayRouteTableSet === "") {
        contents.LocalGatewayRouteTables = [];
    }
    else if (output["localGatewayRouteTableSet"] !== undefined &&
        output["localGatewayRouteTableSet"]["item"] !== undefined) {
        contents.LocalGatewayRouteTables = deserializeAws_ec2LocalGatewayRouteTableSet((0, smithy_client_1.getArrayIfSingleItem)(output["localGatewayRouteTableSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult = (output, context) => {
    const contents = {
        LocalGatewayRouteTableVirtualInterfaceGroupAssociations: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayRouteTableVirtualInterfaceGroupAssociationSet === "") {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations = [];
    }
    else if (output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"] !== undefined &&
        output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"] !== undefined) {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations =
            deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet((0, smithy_client_1.getArrayIfSingleItem)(output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsResult = (output, context) => {
    const contents = {
        LocalGatewayRouteTableVpcAssociations: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayRouteTableVpcAssociationSet === "") {
        contents.LocalGatewayRouteTableVpcAssociations = [];
    }
    else if (output["localGatewayRouteTableVpcAssociationSet"] !== undefined &&
        output["localGatewayRouteTableVpcAssociationSet"]["item"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociations = deserializeAws_ec2LocalGatewayRouteTableVpcAssociationSet((0, smithy_client_1.getArrayIfSingleItem)(output["localGatewayRouteTableVpcAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeLocalGatewaysResult = (output, context) => {
    const contents = {
        LocalGateways: undefined,
        NextToken: undefined,
    };
    if (output.localGatewaySet === "") {
        contents.LocalGateways = [];
    }
    else if (output["localGatewaySet"] !== undefined && output["localGatewaySet"]["item"] !== undefined) {
        contents.LocalGateways = deserializeAws_ec2LocalGatewaySet((0, smithy_client_1.getArrayIfSingleItem)(output["localGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsResult = (output, context) => {
    const contents = {
        LocalGatewayVirtualInterfaceGroups: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayVirtualInterfaceGroupSet === "") {
        contents.LocalGatewayVirtualInterfaceGroups = [];
    }
    else if (output["localGatewayVirtualInterfaceGroupSet"] !== undefined &&
        output["localGatewayVirtualInterfaceGroupSet"]["item"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroups = deserializeAws_ec2LocalGatewayVirtualInterfaceGroupSet((0, smithy_client_1.getArrayIfSingleItem)(output["localGatewayVirtualInterfaceGroupSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesResult = (output, context) => {
    const contents = {
        LocalGatewayVirtualInterfaces: undefined,
        NextToken: undefined,
    };
    if (output.localGatewayVirtualInterfaceSet === "") {
        contents.LocalGatewayVirtualInterfaces = [];
    }
    else if (output["localGatewayVirtualInterfaceSet"] !== undefined &&
        output["localGatewayVirtualInterfaceSet"]["item"] !== undefined) {
        contents.LocalGatewayVirtualInterfaces = deserializeAws_ec2LocalGatewayVirtualInterfaceSet((0, smithy_client_1.getArrayIfSingleItem)(output["localGatewayVirtualInterfaceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeManagedPrefixListsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        PrefixLists: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.prefixListSet === "") {
        contents.PrefixLists = [];
    }
    else if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
        contents.PrefixLists = deserializeAws_ec2ManagedPrefixListSet((0, smithy_client_1.getArrayIfSingleItem)(output["prefixListSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeMovingAddressesResult = (output, context) => {
    const contents = {
        MovingAddressStatuses: undefined,
        NextToken: undefined,
    };
    if (output.movingAddressStatusSet === "") {
        contents.MovingAddressStatuses = [];
    }
    else if (output["movingAddressStatusSet"] !== undefined && output["movingAddressStatusSet"]["item"] !== undefined) {
        contents.MovingAddressStatuses = deserializeAws_ec2MovingAddressStatusSet((0, smithy_client_1.getArrayIfSingleItem)(output["movingAddressStatusSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeNatGatewaysResult = (output, context) => {
    const contents = {
        NatGateways: undefined,
        NextToken: undefined,
    };
    if (output.natGatewaySet === "") {
        contents.NatGateways = [];
    }
    else if (output["natGatewaySet"] !== undefined && output["natGatewaySet"]["item"] !== undefined) {
        contents.NatGateways = deserializeAws_ec2NatGatewayList((0, smithy_client_1.getArrayIfSingleItem)(output["natGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeNetworkAclsResult = (output, context) => {
    const contents = {
        NetworkAcls: undefined,
        NextToken: undefined,
    };
    if (output.networkAclSet === "") {
        contents.NetworkAcls = [];
    }
    else if (output["networkAclSet"] !== undefined && output["networkAclSet"]["item"] !== undefined) {
        contents.NetworkAcls = deserializeAws_ec2NetworkAclList((0, smithy_client_1.getArrayIfSingleItem)(output["networkAclSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesResult = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeAnalyses: undefined,
        NextToken: undefined,
    };
    if (output.networkInsightsAccessScopeAnalysisSet === "") {
        contents.NetworkInsightsAccessScopeAnalyses = [];
    }
    else if (output["networkInsightsAccessScopeAnalysisSet"] !== undefined &&
        output["networkInsightsAccessScopeAnalysisSet"]["item"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalyses = deserializeAws_ec2NetworkInsightsAccessScopeAnalysisList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInsightsAccessScopeAnalysisSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeNetworkInsightsAccessScopesResult = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopes: undefined,
        NextToken: undefined,
    };
    if (output.networkInsightsAccessScopeSet === "") {
        contents.NetworkInsightsAccessScopes = [];
    }
    else if (output["networkInsightsAccessScopeSet"] !== undefined &&
        output["networkInsightsAccessScopeSet"]["item"] !== undefined) {
        contents.NetworkInsightsAccessScopes = deserializeAws_ec2NetworkInsightsAccessScopeList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInsightsAccessScopeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeNetworkInsightsAnalysesResult = (output, context) => {
    const contents = {
        NetworkInsightsAnalyses: undefined,
        NextToken: undefined,
    };
    if (output.networkInsightsAnalysisSet === "") {
        contents.NetworkInsightsAnalyses = [];
    }
    else if (output["networkInsightsAnalysisSet"] !== undefined &&
        output["networkInsightsAnalysisSet"]["item"] !== undefined) {
        contents.NetworkInsightsAnalyses = deserializeAws_ec2NetworkInsightsAnalysisList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInsightsAnalysisSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeNetworkInsightsPathsResult = (output, context) => {
    const contents = {
        NetworkInsightsPaths: undefined,
        NextToken: undefined,
    };
    if (output.networkInsightsPathSet === "") {
        contents.NetworkInsightsPaths = [];
    }
    else if (output["networkInsightsPathSet"] !== undefined && output["networkInsightsPathSet"]["item"] !== undefined) {
        contents.NetworkInsightsPaths = deserializeAws_ec2NetworkInsightsPathList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInsightsPathSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeNetworkInterfaceAttributeResult = (output, context) => {
    const contents = {
        Attachment: undefined,
        Description: undefined,
        Groups: undefined,
        NetworkInterfaceId: undefined,
        SourceDestCheck: undefined,
    };
    if (output["attachment"] !== undefined) {
        contents.Attachment = deserializeAws_ec2NetworkInterfaceAttachment(output["attachment"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = deserializeAws_ec2AttributeValue(output["description"], context);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = deserializeAws_ec2AttributeBooleanValue(output["sourceDestCheck"], context);
    }
    return contents;
};
const deserializeAws_ec2DescribeNetworkInterfacePermissionsResult = (output, context) => {
    const contents = {
        NetworkInterfacePermissions: undefined,
        NextToken: undefined,
    };
    if (output.networkInterfacePermissions === "") {
        contents.NetworkInterfacePermissions = [];
    }
    else if (output["networkInterfacePermissions"] !== undefined &&
        output["networkInterfacePermissions"]["item"] !== undefined) {
        contents.NetworkInterfacePermissions = deserializeAws_ec2NetworkInterfacePermissionList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInterfacePermissions"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeNetworkInterfacesResult = (output, context) => {
    const contents = {
        NetworkInterfaces: undefined,
        NextToken: undefined,
    };
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2NetworkInterfaceList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribePlacementGroupsResult = (output, context) => {
    const contents = {
        PlacementGroups: undefined,
    };
    if (output.placementGroupSet === "") {
        contents.PlacementGroups = [];
    }
    else if (output["placementGroupSet"] !== undefined && output["placementGroupSet"]["item"] !== undefined) {
        contents.PlacementGroups = deserializeAws_ec2PlacementGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["placementGroupSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribePrefixListsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        PrefixLists: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.prefixListSet === "") {
        contents.PrefixLists = [];
    }
    else if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
        contents.PrefixLists = deserializeAws_ec2PrefixListSet((0, smithy_client_1.getArrayIfSingleItem)(output["prefixListSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribePrincipalIdFormatResult = (output, context) => {
    const contents = {
        Principals: undefined,
        NextToken: undefined,
    };
    if (output.principalSet === "") {
        contents.Principals = [];
    }
    else if (output["principalSet"] !== undefined && output["principalSet"]["item"] !== undefined) {
        contents.Principals = deserializeAws_ec2PrincipalIdFormatList((0, smithy_client_1.getArrayIfSingleItem)(output["principalSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribePublicIpv4PoolsResult = (output, context) => {
    const contents = {
        PublicIpv4Pools: undefined,
        NextToken: undefined,
    };
    if (output.publicIpv4PoolSet === "") {
        contents.PublicIpv4Pools = [];
    }
    else if (output["publicIpv4PoolSet"] !== undefined && output["publicIpv4PoolSet"]["item"] !== undefined) {
        contents.PublicIpv4Pools = deserializeAws_ec2PublicIpv4PoolSet((0, smithy_client_1.getArrayIfSingleItem)(output["publicIpv4PoolSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeRegionsResult = (output, context) => {
    const contents = {
        Regions: undefined,
    };
    if (output.regionInfo === "") {
        contents.Regions = [];
    }
    else if (output["regionInfo"] !== undefined && output["regionInfo"]["item"] !== undefined) {
        contents.Regions = deserializeAws_ec2RegionList((0, smithy_client_1.getArrayIfSingleItem)(output["regionInfo"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeReplaceRootVolumeTasksResult = (output, context) => {
    const contents = {
        ReplaceRootVolumeTasks: undefined,
        NextToken: undefined,
    };
    if (output.replaceRootVolumeTaskSet === "") {
        contents.ReplaceRootVolumeTasks = [];
    }
    else if (output["replaceRootVolumeTaskSet"] !== undefined &&
        output["replaceRootVolumeTaskSet"]["item"] !== undefined) {
        contents.ReplaceRootVolumeTasks = deserializeAws_ec2ReplaceRootVolumeTasks((0, smithy_client_1.getArrayIfSingleItem)(output["replaceRootVolumeTaskSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeReservedInstancesListingsResult = (output, context) => {
    const contents = {
        ReservedInstancesListings: undefined,
    };
    if (output.reservedInstancesListingsSet === "") {
        contents.ReservedInstancesListings = [];
    }
    else if (output["reservedInstancesListingsSet"] !== undefined &&
        output["reservedInstancesListingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesListings = deserializeAws_ec2ReservedInstancesListingList((0, smithy_client_1.getArrayIfSingleItem)(output["reservedInstancesListingsSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeReservedInstancesModificationsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        ReservedInstancesModifications: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.reservedInstancesModificationsSet === "") {
        contents.ReservedInstancesModifications = [];
    }
    else if (output["reservedInstancesModificationsSet"] !== undefined &&
        output["reservedInstancesModificationsSet"]["item"] !== undefined) {
        contents.ReservedInstancesModifications = deserializeAws_ec2ReservedInstancesModificationList((0, smithy_client_1.getArrayIfSingleItem)(output["reservedInstancesModificationsSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeReservedInstancesOfferingsResult = (output, context) => {
    const contents = {
        ReservedInstancesOfferings: undefined,
        NextToken: undefined,
    };
    if (output.reservedInstancesOfferingsSet === "") {
        contents.ReservedInstancesOfferings = [];
    }
    else if (output["reservedInstancesOfferingsSet"] !== undefined &&
        output["reservedInstancesOfferingsSet"]["item"] !== undefined) {
        contents.ReservedInstancesOfferings = deserializeAws_ec2ReservedInstancesOfferingList((0, smithy_client_1.getArrayIfSingleItem)(output["reservedInstancesOfferingsSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeReservedInstancesResult = (output, context) => {
    const contents = {
        ReservedInstances: undefined,
    };
    if (output.reservedInstancesSet === "") {
        contents.ReservedInstances = [];
    }
    else if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
        contents.ReservedInstances = deserializeAws_ec2ReservedInstancesList((0, smithy_client_1.getArrayIfSingleItem)(output["reservedInstancesSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeRouteTablesResult = (output, context) => {
    const contents = {
        RouteTables: undefined,
        NextToken: undefined,
    };
    if (output.routeTableSet === "") {
        contents.RouteTables = [];
    }
    else if (output["routeTableSet"] !== undefined && output["routeTableSet"]["item"] !== undefined) {
        contents.RouteTables = deserializeAws_ec2RouteTableList((0, smithy_client_1.getArrayIfSingleItem)(output["routeTableSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeScheduledInstanceAvailabilityResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        ScheduledInstanceAvailabilitySet: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.scheduledInstanceAvailabilitySet === "") {
        contents.ScheduledInstanceAvailabilitySet = [];
    }
    else if (output["scheduledInstanceAvailabilitySet"] !== undefined &&
        output["scheduledInstanceAvailabilitySet"]["item"] !== undefined) {
        contents.ScheduledInstanceAvailabilitySet = deserializeAws_ec2ScheduledInstanceAvailabilitySet((0, smithy_client_1.getArrayIfSingleItem)(output["scheduledInstanceAvailabilitySet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeScheduledInstancesResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        ScheduledInstanceSet: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.scheduledInstanceSet === "") {
        contents.ScheduledInstanceSet = [];
    }
    else if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
        contents.ScheduledInstanceSet = deserializeAws_ec2ScheduledInstanceSet((0, smithy_client_1.getArrayIfSingleItem)(output["scheduledInstanceSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeSecurityGroupReferencesResult = (output, context) => {
    const contents = {
        SecurityGroupReferenceSet: undefined,
    };
    if (output.securityGroupReferenceSet === "") {
        contents.SecurityGroupReferenceSet = [];
    }
    else if (output["securityGroupReferenceSet"] !== undefined &&
        output["securityGroupReferenceSet"]["item"] !== undefined) {
        contents.SecurityGroupReferenceSet = deserializeAws_ec2SecurityGroupReferences((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupReferenceSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeSecurityGroupRulesResult = (output, context) => {
    const contents = {
        SecurityGroupRules: undefined,
        NextToken: undefined,
    };
    if (output.securityGroupRuleSet === "") {
        contents.SecurityGroupRules = [];
    }
    else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
        contents.SecurityGroupRules = deserializeAws_ec2SecurityGroupRuleList((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupRuleSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeSecurityGroupsResult = (output, context) => {
    const contents = {
        SecurityGroups: undefined,
        NextToken: undefined,
    };
    if (output.securityGroupInfo === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroupInfo"] !== undefined && output["securityGroupInfo"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2SecurityGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupInfo"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeSnapshotAttributeResult = (output, context) => {
    const contents = {
        CreateVolumePermissions: undefined,
        ProductCodes: undefined,
        SnapshotId: undefined,
    };
    if (output.createVolumePermission === "") {
        contents.CreateVolumePermissions = [];
    }
    else if (output["createVolumePermission"] !== undefined && output["createVolumePermission"]["item"] !== undefined) {
        contents.CreateVolumePermissions = deserializeAws_ec2CreateVolumePermissionList((0, smithy_client_1.getArrayIfSingleItem)(output["createVolumePermission"]["item"]), context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList((0, smithy_client_1.getArrayIfSingleItem)(output["productCodes"]["item"]), context);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeSnapshotsResult = (output, context) => {
    const contents = {
        Snapshots: undefined,
        NextToken: undefined,
    };
    if (output.snapshotSet === "") {
        contents.Snapshots = [];
    }
    else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
        contents.Snapshots = deserializeAws_ec2SnapshotList((0, smithy_client_1.getArrayIfSingleItem)(output["snapshotSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeSnapshotTierStatusResult = (output, context) => {
    const contents = {
        SnapshotTierStatuses: undefined,
        NextToken: undefined,
    };
    if (output.snapshotTierStatusSet === "") {
        contents.SnapshotTierStatuses = [];
    }
    else if (output["snapshotTierStatusSet"] !== undefined && output["snapshotTierStatusSet"]["item"] !== undefined) {
        contents.SnapshotTierStatuses = deserializeAws_ec2snapshotTierStatusSet((0, smithy_client_1.getArrayIfSingleItem)(output["snapshotTierStatusSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeSpotDatafeedSubscriptionResult = (output, context) => {
    const contents = {
        SpotDatafeedSubscription: undefined,
    };
    if (output["spotDatafeedSubscription"] !== undefined) {
        contents.SpotDatafeedSubscription = deserializeAws_ec2SpotDatafeedSubscription(output["spotDatafeedSubscription"], context);
    }
    return contents;
};
const deserializeAws_ec2DescribeSpotFleetInstancesResponse = (output, context) => {
    const contents = {
        ActiveInstances: undefined,
        NextToken: undefined,
        SpotFleetRequestId: undefined,
    };
    if (output.activeInstanceSet === "") {
        contents.ActiveInstances = [];
    }
    else if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
        contents.ActiveInstances = deserializeAws_ec2ActiveInstanceSet((0, smithy_client_1.getArrayIfSingleItem)(output["activeInstanceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = (0, smithy_client_1.expectString)(output["spotFleetRequestId"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeSpotFleetRequestHistoryResponse = (output, context) => {
    const contents = {
        HistoryRecords: undefined,
        LastEvaluatedTime: undefined,
        NextToken: undefined,
        SpotFleetRequestId: undefined,
        StartTime: undefined,
    };
    if (output.historyRecordSet === "") {
        contents.HistoryRecords = [];
    }
    else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
        contents.HistoryRecords = deserializeAws_ec2HistoryRecords((0, smithy_client_1.getArrayIfSingleItem)(output["historyRecordSet"]["item"]), context);
    }
    if (output["lastEvaluatedTime"] !== undefined) {
        contents.LastEvaluatedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["lastEvaluatedTime"]));
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = (0, smithy_client_1.expectString)(output["spotFleetRequestId"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startTime"]));
    }
    return contents;
};
const deserializeAws_ec2DescribeSpotFleetRequestsResponse = (output, context) => {
    const contents = {
        NextToken: undefined,
        SpotFleetRequestConfigs: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.spotFleetRequestConfigSet === "") {
        contents.SpotFleetRequestConfigs = [];
    }
    else if (output["spotFleetRequestConfigSet"] !== undefined &&
        output["spotFleetRequestConfigSet"]["item"] !== undefined) {
        contents.SpotFleetRequestConfigs = deserializeAws_ec2SpotFleetRequestConfigSet((0, smithy_client_1.getArrayIfSingleItem)(output["spotFleetRequestConfigSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeSpotInstanceRequestsResult = (output, context) => {
    const contents = {
        SpotInstanceRequests: undefined,
        NextToken: undefined,
    };
    if (output.spotInstanceRequestSet === "") {
        contents.SpotInstanceRequests = [];
    }
    else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
        contents.SpotInstanceRequests = deserializeAws_ec2SpotInstanceRequestList((0, smithy_client_1.getArrayIfSingleItem)(output["spotInstanceRequestSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeSpotPriceHistoryResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        SpotPriceHistory: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.spotPriceHistorySet === "") {
        contents.SpotPriceHistory = [];
    }
    else if (output["spotPriceHistorySet"] !== undefined && output["spotPriceHistorySet"]["item"] !== undefined) {
        contents.SpotPriceHistory = deserializeAws_ec2SpotPriceHistoryList((0, smithy_client_1.getArrayIfSingleItem)(output["spotPriceHistorySet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeStaleSecurityGroupsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        StaleSecurityGroupSet: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.staleSecurityGroupSet === "") {
        contents.StaleSecurityGroupSet = [];
    }
    else if (output["staleSecurityGroupSet"] !== undefined && output["staleSecurityGroupSet"]["item"] !== undefined) {
        contents.StaleSecurityGroupSet = deserializeAws_ec2StaleSecurityGroupSet((0, smithy_client_1.getArrayIfSingleItem)(output["staleSecurityGroupSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeStoreImageTasksResult = (output, context) => {
    const contents = {
        StoreImageTaskResults: undefined,
        NextToken: undefined,
    };
    if (output.storeImageTaskResultSet === "") {
        contents.StoreImageTaskResults = [];
    }
    else if (output["storeImageTaskResultSet"] !== undefined &&
        output["storeImageTaskResultSet"]["item"] !== undefined) {
        contents.StoreImageTaskResults = deserializeAws_ec2StoreImageTaskResultSet((0, smithy_client_1.getArrayIfSingleItem)(output["storeImageTaskResultSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeSubnetsResult = (output, context) => {
    const contents = {
        Subnets: undefined,
        NextToken: undefined,
    };
    if (output.subnetSet === "") {
        contents.Subnets = [];
    }
    else if (output["subnetSet"] !== undefined && output["subnetSet"]["item"] !== undefined) {
        contents.Subnets = deserializeAws_ec2SubnetList((0, smithy_client_1.getArrayIfSingleItem)(output["subnetSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTagsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        Tags: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagDescriptionList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeTrafficMirrorFiltersResult = (output, context) => {
    const contents = {
        TrafficMirrorFilters: undefined,
        NextToken: undefined,
    };
    if (output.trafficMirrorFilterSet === "") {
        contents.TrafficMirrorFilters = [];
    }
    else if (output["trafficMirrorFilterSet"] !== undefined && output["trafficMirrorFilterSet"]["item"] !== undefined) {
        contents.TrafficMirrorFilters = deserializeAws_ec2TrafficMirrorFilterSet((0, smithy_client_1.getArrayIfSingleItem)(output["trafficMirrorFilterSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTrafficMirrorSessionsResult = (output, context) => {
    const contents = {
        TrafficMirrorSessions: undefined,
        NextToken: undefined,
    };
    if (output.trafficMirrorSessionSet === "") {
        contents.TrafficMirrorSessions = [];
    }
    else if (output["trafficMirrorSessionSet"] !== undefined &&
        output["trafficMirrorSessionSet"]["item"] !== undefined) {
        contents.TrafficMirrorSessions = deserializeAws_ec2TrafficMirrorSessionSet((0, smithy_client_1.getArrayIfSingleItem)(output["trafficMirrorSessionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTrafficMirrorTargetsResult = (output, context) => {
    const contents = {
        TrafficMirrorTargets: undefined,
        NextToken: undefined,
    };
    if (output.trafficMirrorTargetSet === "") {
        contents.TrafficMirrorTargets = [];
    }
    else if (output["trafficMirrorTargetSet"] !== undefined && output["trafficMirrorTargetSet"]["item"] !== undefined) {
        contents.TrafficMirrorTargets = deserializeAws_ec2TrafficMirrorTargetSet((0, smithy_client_1.getArrayIfSingleItem)(output["trafficMirrorTargetSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTransitGatewayAttachmentsResult = (output, context) => {
    const contents = {
        TransitGatewayAttachments: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayAttachments === "") {
        contents.TransitGatewayAttachments = [];
    }
    else if (output["transitGatewayAttachments"] !== undefined &&
        output["transitGatewayAttachments"]["item"] !== undefined) {
        contents.TransitGatewayAttachments = deserializeAws_ec2TransitGatewayAttachmentList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayAttachments"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTransitGatewayConnectPeersResult = (output, context) => {
    const contents = {
        TransitGatewayConnectPeers: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayConnectPeerSet === "") {
        contents.TransitGatewayConnectPeers = [];
    }
    else if (output["transitGatewayConnectPeerSet"] !== undefined &&
        output["transitGatewayConnectPeerSet"]["item"] !== undefined) {
        contents.TransitGatewayConnectPeers = deserializeAws_ec2TransitGatewayConnectPeerList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayConnectPeerSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTransitGatewayConnectsResult = (output, context) => {
    const contents = {
        TransitGatewayConnects: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayConnectSet === "") {
        contents.TransitGatewayConnects = [];
    }
    else if (output["transitGatewayConnectSet"] !== undefined &&
        output["transitGatewayConnectSet"]["item"] !== undefined) {
        contents.TransitGatewayConnects = deserializeAws_ec2TransitGatewayConnectList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayConnectSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTransitGatewayMulticastDomainsResult = (output, context) => {
    const contents = {
        TransitGatewayMulticastDomains: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayMulticastDomains === "") {
        contents.TransitGatewayMulticastDomains = [];
    }
    else if (output["transitGatewayMulticastDomains"] !== undefined &&
        output["transitGatewayMulticastDomains"]["item"] !== undefined) {
        contents.TransitGatewayMulticastDomains = deserializeAws_ec2TransitGatewayMulticastDomainList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayMulticastDomains"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsResult = (output, context) => {
    const contents = {
        TransitGatewayPeeringAttachments: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayPeeringAttachments === "") {
        contents.TransitGatewayPeeringAttachments = [];
    }
    else if (output["transitGatewayPeeringAttachments"] !== undefined &&
        output["transitGatewayPeeringAttachments"]["item"] !== undefined) {
        contents.TransitGatewayPeeringAttachments = deserializeAws_ec2TransitGatewayPeeringAttachmentList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayPeeringAttachments"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTransitGatewayRouteTablesResult = (output, context) => {
    const contents = {
        TransitGatewayRouteTables: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayRouteTables === "") {
        contents.TransitGatewayRouteTables = [];
    }
    else if (output["transitGatewayRouteTables"] !== undefined &&
        output["transitGatewayRouteTables"]["item"] !== undefined) {
        contents.TransitGatewayRouteTables = deserializeAws_ec2TransitGatewayRouteTableList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayRouteTables"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTransitGatewaysResult = (output, context) => {
    const contents = {
        TransitGateways: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewaySet === "") {
        contents.TransitGateways = [];
    }
    else if (output["transitGatewaySet"] !== undefined && output["transitGatewaySet"]["item"] !== undefined) {
        contents.TransitGateways = deserializeAws_ec2TransitGatewayList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewaySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsResult = (output, context) => {
    const contents = {
        TransitGatewayVpcAttachments: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayVpcAttachments === "") {
        contents.TransitGatewayVpcAttachments = [];
    }
    else if (output["transitGatewayVpcAttachments"] !== undefined &&
        output["transitGatewayVpcAttachments"]["item"] !== undefined) {
        contents.TransitGatewayVpcAttachments = deserializeAws_ec2TransitGatewayVpcAttachmentList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayVpcAttachments"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeTrunkInterfaceAssociationsResult = (output, context) => {
    const contents = {
        InterfaceAssociations: undefined,
        NextToken: undefined,
    };
    if (output.interfaceAssociationSet === "") {
        contents.InterfaceAssociations = [];
    }
    else if (output["interfaceAssociationSet"] !== undefined &&
        output["interfaceAssociationSet"]["item"] !== undefined) {
        contents.InterfaceAssociations = deserializeAws_ec2TrunkInterfaceAssociationList((0, smithy_client_1.getArrayIfSingleItem)(output["interfaceAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVolumeAttributeResult = (output, context) => {
    const contents = {
        AutoEnableIO: undefined,
        ProductCodes: undefined,
        VolumeId: undefined,
    };
    if (output["autoEnableIO"] !== undefined) {
        contents.AutoEnableIO = deserializeAws_ec2AttributeBooleanValue(output["autoEnableIO"], context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList((0, smithy_client_1.getArrayIfSingleItem)(output["productCodes"]["item"]), context);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVolumesModificationsResult = (output, context) => {
    const contents = {
        VolumesModifications: undefined,
        NextToken: undefined,
    };
    if (output.volumeModificationSet === "") {
        contents.VolumesModifications = [];
    }
    else if (output["volumeModificationSet"] !== undefined && output["volumeModificationSet"]["item"] !== undefined) {
        contents.VolumesModifications = deserializeAws_ec2VolumeModificationList((0, smithy_client_1.getArrayIfSingleItem)(output["volumeModificationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVolumesResult = (output, context) => {
    const contents = {
        Volumes: undefined,
        NextToken: undefined,
    };
    if (output.volumeSet === "") {
        contents.Volumes = [];
    }
    else if (output["volumeSet"] !== undefined && output["volumeSet"]["item"] !== undefined) {
        contents.Volumes = deserializeAws_ec2VolumeList((0, smithy_client_1.getArrayIfSingleItem)(output["volumeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVolumeStatusResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        VolumeStatuses: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.volumeStatusSet === "") {
        contents.VolumeStatuses = [];
    }
    else if (output["volumeStatusSet"] !== undefined && output["volumeStatusSet"]["item"] !== undefined) {
        contents.VolumeStatuses = deserializeAws_ec2VolumeStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["volumeStatusSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcAttributeResult = (output, context) => {
    const contents = {
        VpcId: undefined,
        EnableDnsHostnames: undefined,
        EnableDnsSupport: undefined,
    };
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["enableDnsHostnames"] !== undefined) {
        contents.EnableDnsHostnames = deserializeAws_ec2AttributeBooleanValue(output["enableDnsHostnames"], context);
    }
    if (output["enableDnsSupport"] !== undefined) {
        contents.EnableDnsSupport = deserializeAws_ec2AttributeBooleanValue(output["enableDnsSupport"], context);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcClassicLinkDnsSupportResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        Vpcs: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.vpcs === "") {
        contents.Vpcs = [];
    }
    else if (output["vpcs"] !== undefined && output["vpcs"]["item"] !== undefined) {
        contents.Vpcs = deserializeAws_ec2ClassicLinkDnsSupportList((0, smithy_client_1.getArrayIfSingleItem)(output["vpcs"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcClassicLinkResult = (output, context) => {
    const contents = {
        Vpcs: undefined,
    };
    if (output.vpcSet === "") {
        contents.Vpcs = [];
    }
    else if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
        contents.Vpcs = deserializeAws_ec2VpcClassicLinkList((0, smithy_client_1.getArrayIfSingleItem)(output["vpcSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsResult = (output, context) => {
    const contents = {
        ConnectionNotificationSet: undefined,
        NextToken: undefined,
    };
    if (output.connectionNotificationSet === "") {
        contents.ConnectionNotificationSet = [];
    }
    else if (output["connectionNotificationSet"] !== undefined &&
        output["connectionNotificationSet"]["item"] !== undefined) {
        contents.ConnectionNotificationSet = deserializeAws_ec2ConnectionNotificationSet((0, smithy_client_1.getArrayIfSingleItem)(output["connectionNotificationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcEndpointConnectionsResult = (output, context) => {
    const contents = {
        VpcEndpointConnections: undefined,
        NextToken: undefined,
    };
    if (output.vpcEndpointConnectionSet === "") {
        contents.VpcEndpointConnections = [];
    }
    else if (output["vpcEndpointConnectionSet"] !== undefined &&
        output["vpcEndpointConnectionSet"]["item"] !== undefined) {
        contents.VpcEndpointConnections = deserializeAws_ec2VpcEndpointConnectionSet((0, smithy_client_1.getArrayIfSingleItem)(output["vpcEndpointConnectionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsResult = (output, context) => {
    const contents = {
        ServiceConfigurations: undefined,
        NextToken: undefined,
    };
    if (output.serviceConfigurationSet === "") {
        contents.ServiceConfigurations = [];
    }
    else if (output["serviceConfigurationSet"] !== undefined &&
        output["serviceConfigurationSet"]["item"] !== undefined) {
        contents.ServiceConfigurations = deserializeAws_ec2ServiceConfigurationSet((0, smithy_client_1.getArrayIfSingleItem)(output["serviceConfigurationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcEndpointServicePermissionsResult = (output, context) => {
    const contents = {
        AllowedPrincipals: undefined,
        NextToken: undefined,
    };
    if (output.allowedPrincipals === "") {
        contents.AllowedPrincipals = [];
    }
    else if (output["allowedPrincipals"] !== undefined && output["allowedPrincipals"]["item"] !== undefined) {
        contents.AllowedPrincipals = deserializeAws_ec2AllowedPrincipalSet((0, smithy_client_1.getArrayIfSingleItem)(output["allowedPrincipals"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcEndpointServicesResult = (output, context) => {
    const contents = {
        ServiceNames: undefined,
        ServiceDetails: undefined,
        NextToken: undefined,
    };
    if (output.serviceNameSet === "") {
        contents.ServiceNames = [];
    }
    else if (output["serviceNameSet"] !== undefined && output["serviceNameSet"]["item"] !== undefined) {
        contents.ServiceNames = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["serviceNameSet"]["item"]), context);
    }
    if (output.serviceDetailSet === "") {
        contents.ServiceDetails = [];
    }
    else if (output["serviceDetailSet"] !== undefined && output["serviceDetailSet"]["item"] !== undefined) {
        contents.ServiceDetails = deserializeAws_ec2ServiceDetailSet((0, smithy_client_1.getArrayIfSingleItem)(output["serviceDetailSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcEndpointsResult = (output, context) => {
    const contents = {
        VpcEndpoints: undefined,
        NextToken: undefined,
    };
    if (output.vpcEndpointSet === "") {
        contents.VpcEndpoints = [];
    }
    else if (output["vpcEndpointSet"] !== undefined && output["vpcEndpointSet"]["item"] !== undefined) {
        contents.VpcEndpoints = deserializeAws_ec2VpcEndpointSet((0, smithy_client_1.getArrayIfSingleItem)(output["vpcEndpointSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcPeeringConnectionsResult = (output, context) => {
    const contents = {
        VpcPeeringConnections: undefined,
        NextToken: undefined,
    };
    if (output.vpcPeeringConnectionSet === "") {
        contents.VpcPeeringConnections = [];
    }
    else if (output["vpcPeeringConnectionSet"] !== undefined &&
        output["vpcPeeringConnectionSet"]["item"] !== undefined) {
        contents.VpcPeeringConnections = deserializeAws_ec2VpcPeeringConnectionList((0, smithy_client_1.getArrayIfSingleItem)(output["vpcPeeringConnectionSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpcsResult = (output, context) => {
    const contents = {
        Vpcs: undefined,
        NextToken: undefined,
    };
    if (output.vpcSet === "") {
        contents.Vpcs = [];
    }
    else if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
        contents.Vpcs = deserializeAws_ec2VpcList((0, smithy_client_1.getArrayIfSingleItem)(output["vpcSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpnConnectionsResult = (output, context) => {
    const contents = {
        VpnConnections: undefined,
    };
    if (output.vpnConnectionSet === "") {
        contents.VpnConnections = [];
    }
    else if (output["vpnConnectionSet"] !== undefined && output["vpnConnectionSet"]["item"] !== undefined) {
        contents.VpnConnections = deserializeAws_ec2VpnConnectionList((0, smithy_client_1.getArrayIfSingleItem)(output["vpnConnectionSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DescribeVpnGatewaysResult = (output, context) => {
    const contents = {
        VpnGateways: undefined,
    };
    if (output.vpnGatewaySet === "") {
        contents.VpnGateways = [];
    }
    else if (output["vpnGatewaySet"] !== undefined && output["vpnGatewaySet"]["item"] !== undefined) {
        contents.VpnGateways = deserializeAws_ec2VpnGatewayList((0, smithy_client_1.getArrayIfSingleItem)(output["vpnGatewaySet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DestinationOptionsResponse = (output, context) => {
    const contents = {
        FileFormat: undefined,
        HiveCompatiblePartitions: undefined,
        PerHourPartition: undefined,
    };
    if (output["fileFormat"] !== undefined) {
        contents.FileFormat = (0, smithy_client_1.expectString)(output["fileFormat"]);
    }
    if (output["hiveCompatiblePartitions"] !== undefined) {
        contents.HiveCompatiblePartitions = (0, smithy_client_1.parseBoolean)(output["hiveCompatiblePartitions"]);
    }
    if (output["perHourPartition"] !== undefined) {
        contents.PerHourPartition = (0, smithy_client_1.parseBoolean)(output["perHourPartition"]);
    }
    return contents;
};
const deserializeAws_ec2DetachClassicLinkVpcResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2DhcpConfiguration = (output, context) => {
    const contents = {
        Key: undefined,
        Values: undefined,
    };
    if (output["key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["key"]);
    }
    if (output.valueSet === "") {
        contents.Values = [];
    }
    else if (output["valueSet"] !== undefined && output["valueSet"]["item"] !== undefined) {
        contents.Values = deserializeAws_ec2DhcpConfigurationValueList((0, smithy_client_1.getArrayIfSingleItem)(output["valueSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DhcpConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DhcpConfiguration(entry, context);
    });
};
const deserializeAws_ec2DhcpConfigurationValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2AttributeValue(entry, context);
    });
};
const deserializeAws_ec2DhcpOptions = (output, context) => {
    const contents = {
        DhcpConfigurations: undefined,
        DhcpOptionsId: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output.dhcpConfigurationSet === "") {
        contents.DhcpConfigurations = [];
    }
    else if (output["dhcpConfigurationSet"] !== undefined && output["dhcpConfigurationSet"]["item"] !== undefined) {
        contents.DhcpConfigurations = deserializeAws_ec2DhcpConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["dhcpConfigurationSet"]["item"]), context);
    }
    if (output["dhcpOptionsId"] !== undefined) {
        contents.DhcpOptionsId = (0, smithy_client_1.expectString)(output["dhcpOptionsId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DhcpOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DhcpOptions(entry, context);
    });
};
const deserializeAws_ec2DirectoryServiceAuthentication = (output, context) => {
    const contents = {
        DirectoryId: undefined,
    };
    if (output["directoryId"] !== undefined) {
        contents.DirectoryId = (0, smithy_client_1.expectString)(output["directoryId"]);
    }
    return contents;
};
const deserializeAws_ec2DisableEbsEncryptionByDefaultResult = (output, context) => {
    const contents = {
        EbsEncryptionByDefault: undefined,
    };
    if (output["ebsEncryptionByDefault"] !== undefined) {
        contents.EbsEncryptionByDefault = (0, smithy_client_1.parseBoolean)(output["ebsEncryptionByDefault"]);
    }
    return contents;
};
const deserializeAws_ec2DisableFastLaunchResult = (output, context) => {
    const contents = {
        ImageId: undefined,
        ResourceType: undefined,
        SnapshotConfiguration: undefined,
        LaunchTemplate: undefined,
        MaxParallelLaunches: undefined,
        OwnerId: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        StateTransitionTime: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["snapshotConfiguration"] !== undefined) {
        contents.SnapshotConfiguration = deserializeAws_ec2FastLaunchSnapshotConfigurationResponse(output["snapshotConfiguration"], context);
    }
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
    }
    if (output["maxParallelLaunches"] !== undefined) {
        contents.MaxParallelLaunches = (0, smithy_client_1.strictParseInt32)(output["maxParallelLaunches"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(output["stateTransitionReason"]);
    }
    if (output["stateTransitionTime"] !== undefined) {
        contents.StateTransitionTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["stateTransitionTime"]));
    }
    return contents;
};
const deserializeAws_ec2DisableFastSnapshotRestoreErrorItem = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        FastSnapshotRestoreStateErrors: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output.fastSnapshotRestoreStateErrorSet === "") {
        contents.FastSnapshotRestoreStateErrors = [];
    }
    else if (output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
        output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined) {
        contents.FastSnapshotRestoreStateErrors = deserializeAws_ec2DisableFastSnapshotRestoreStateErrorSet((0, smithy_client_1.getArrayIfSingleItem)(output["fastSnapshotRestoreStateErrorSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DisableFastSnapshotRestoreErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DisableFastSnapshotRestoreErrorItem(entry, context);
    });
};
const deserializeAws_ec2DisableFastSnapshotRestoresResult = (output, context) => {
    const contents = {
        Successful: undefined,
        Unsuccessful: undefined,
    };
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = deserializeAws_ec2DisableFastSnapshotRestoreSuccessSet((0, smithy_client_1.getArrayIfSingleItem)(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2DisableFastSnapshotRestoreErrorSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2DisableFastSnapshotRestoreStateError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2DisableFastSnapshotRestoreStateErrorItem = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        Error: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2DisableFastSnapshotRestoreStateError(output["error"], context);
    }
    return contents;
};
const deserializeAws_ec2DisableFastSnapshotRestoreStateErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DisableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};
const deserializeAws_ec2DisableFastSnapshotRestoreSuccessItem = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        AvailabilityZone: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        OwnerId: undefined,
        OwnerAlias: undefined,
        EnablingTime: undefined,
        OptimizingTime: undefined,
        EnabledTime: undefined,
        DisablingTime: undefined,
        DisabledTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(output["stateTransitionReason"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = (0, smithy_client_1.expectString)(output["ownerAlias"]);
    }
    if (output["enablingTime"] !== undefined) {
        contents.EnablingTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["enablingTime"]));
    }
    if (output["optimizingTime"] !== undefined) {
        contents.OptimizingTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["optimizingTime"]));
    }
    if (output["enabledTime"] !== undefined) {
        contents.EnabledTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["enabledTime"]));
    }
    if (output["disablingTime"] !== undefined) {
        contents.DisablingTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["disablingTime"]));
    }
    if (output["disabledTime"] !== undefined) {
        contents.DisabledTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["disabledTime"]));
    }
    return contents;
};
const deserializeAws_ec2DisableFastSnapshotRestoreSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DisableFastSnapshotRestoreSuccessItem(entry, context);
    });
};
const deserializeAws_ec2DisableImageDeprecationResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2DisableIpamOrganizationAdminAccountResult = (output, context) => {
    const contents = {
        Success: undefined,
    };
    if (output["success"] !== undefined) {
        contents.Success = (0, smithy_client_1.parseBoolean)(output["success"]);
    }
    return contents;
};
const deserializeAws_ec2DisableSerialConsoleAccessResult = (output, context) => {
    const contents = {
        SerialConsoleAccessEnabled: undefined,
    };
    if (output["serialConsoleAccessEnabled"] !== undefined) {
        contents.SerialConsoleAccessEnabled = (0, smithy_client_1.parseBoolean)(output["serialConsoleAccessEnabled"]);
    }
    return contents;
};
const deserializeAws_ec2DisableTransitGatewayRouteTablePropagationResult = (output, context) => {
    const contents = {
        Propagation: undefined,
    };
    if (output["propagation"] !== undefined) {
        contents.Propagation = deserializeAws_ec2TransitGatewayPropagation(output["propagation"], context);
    }
    return contents;
};
const deserializeAws_ec2DisableVpcClassicLinkDnsSupportResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2DisableVpcClassicLinkResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2DisassociateClientVpnTargetNetworkResult = (output, context) => {
    const contents = {
        AssociationId: undefined,
        Status: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2AssociationStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2DisassociateEnclaveCertificateIamRoleResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2DisassociateIamInstanceProfileResult = (output, context) => {
    const contents = {
        IamInstanceProfileAssociation: undefined,
    };
    if (output["iamInstanceProfileAssociation"] !== undefined) {
        contents.IamInstanceProfileAssociation = deserializeAws_ec2IamInstanceProfileAssociation(output["iamInstanceProfileAssociation"], context);
    }
    return contents;
};
const deserializeAws_ec2DisassociateInstanceEventWindowResult = (output, context) => {
    const contents = {
        InstanceEventWindow: undefined,
    };
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = deserializeAws_ec2InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
const deserializeAws_ec2DisassociateSubnetCidrBlockResult = (output, context) => {
    const contents = {
        Ipv6CidrBlockAssociation: undefined,
        SubnetId: undefined,
    };
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = deserializeAws_ec2SubnetIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    return contents;
};
const deserializeAws_ec2DisassociateTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {
        Associations: undefined,
    };
    if (output["associations"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
const deserializeAws_ec2DisassociateTransitGatewayRouteTableResult = (output, context) => {
    const contents = {
        Association: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2TransitGatewayAssociation(output["association"], context);
    }
    return contents;
};
const deserializeAws_ec2DisassociateTrunkInterfaceResult = (output, context) => {
    const contents = {
        Return: undefined,
        ClientToken: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    return contents;
};
const deserializeAws_ec2DisassociateVpcCidrBlockResult = (output, context) => {
    const contents = {
        Ipv6CidrBlockAssociation: undefined,
        CidrBlockAssociation: undefined,
        VpcId: undefined,
    };
    if (output["ipv6CidrBlockAssociation"] !== undefined) {
        contents.Ipv6CidrBlockAssociation = deserializeAws_ec2VpcIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
    }
    if (output["cidrBlockAssociation"] !== undefined) {
        contents.CidrBlockAssociation = deserializeAws_ec2VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2DiskImageDescription = (output, context) => {
    const contents = {
        Checksum: undefined,
        Format: undefined,
        ImportManifestUrl: undefined,
        Size: undefined,
    };
    if (output["checksum"] !== undefined) {
        contents.Checksum = (0, smithy_client_1.expectString)(output["checksum"]);
    }
    if (output["format"] !== undefined) {
        contents.Format = (0, smithy_client_1.expectString)(output["format"]);
    }
    if (output["importManifestUrl"] !== undefined) {
        contents.ImportManifestUrl = (0, smithy_client_1.expectString)(output["importManifestUrl"]);
    }
    if (output["size"] !== undefined) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["size"]);
    }
    return contents;
};
const deserializeAws_ec2DiskImageVolumeDescription = (output, context) => {
    const contents = {
        Id: undefined,
        Size: undefined,
    };
    if (output["id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["id"]);
    }
    if (output["size"] !== undefined) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["size"]);
    }
    return contents;
};
const deserializeAws_ec2DiskInfo = (output, context) => {
    const contents = {
        SizeInGB: undefined,
        Count: undefined,
        Type: undefined,
    };
    if (output["sizeInGB"] !== undefined) {
        contents.SizeInGB = (0, smithy_client_1.strictParseLong)(output["sizeInGB"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseInt32)(output["count"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    return contents;
};
const deserializeAws_ec2DiskInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DiskInfo(entry, context);
    });
};
const deserializeAws_ec2DnsEntry = (output, context) => {
    const contents = {
        DnsName: undefined,
        HostedZoneId: undefined,
    };
    if (output["dnsName"] !== undefined) {
        contents.DnsName = (0, smithy_client_1.expectString)(output["dnsName"]);
    }
    if (output["hostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["hostedZoneId"]);
    }
    return contents;
};
const deserializeAws_ec2DnsEntrySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2DnsEntry(entry, context);
    });
};
const deserializeAws_ec2DnsOptions = (output, context) => {
    const contents = {
        DnsRecordIpType: undefined,
    };
    if (output["dnsRecordIpType"] !== undefined) {
        contents.DnsRecordIpType = (0, smithy_client_1.expectString)(output["dnsRecordIpType"]);
    }
    return contents;
};
const deserializeAws_ec2EbsBlockDevice = (output, context) => {
    const contents = {
        DeleteOnTermination: undefined,
        Iops: undefined,
        SnapshotId: undefined,
        VolumeSize: undefined,
        VolumeType: undefined,
        KmsKeyId: undefined,
        Throughput: undefined,
        OutpostArn: undefined,
        Encrypted: undefined,
    };
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = (0, smithy_client_1.parseBoolean)(output["deleteOnTermination"]);
    }
    if (output["iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["iops"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = (0, smithy_client_1.strictParseInt32)(output["volumeSize"]);
    }
    if (output["volumeType"] !== undefined) {
        contents.VolumeType = (0, smithy_client_1.expectString)(output["volumeType"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["throughput"] !== undefined) {
        contents.Throughput = (0, smithy_client_1.strictParseInt32)(output["throughput"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["encrypted"]);
    }
    return contents;
};
const deserializeAws_ec2EbsInfo = (output, context) => {
    const contents = {
        EbsOptimizedSupport: undefined,
        EncryptionSupport: undefined,
        EbsOptimizedInfo: undefined,
        NvmeSupport: undefined,
    };
    if (output["ebsOptimizedSupport"] !== undefined) {
        contents.EbsOptimizedSupport = (0, smithy_client_1.expectString)(output["ebsOptimizedSupport"]);
    }
    if (output["encryptionSupport"] !== undefined) {
        contents.EncryptionSupport = (0, smithy_client_1.expectString)(output["encryptionSupport"]);
    }
    if (output["ebsOptimizedInfo"] !== undefined) {
        contents.EbsOptimizedInfo = deserializeAws_ec2EbsOptimizedInfo(output["ebsOptimizedInfo"], context);
    }
    if (output["nvmeSupport"] !== undefined) {
        contents.NvmeSupport = (0, smithy_client_1.expectString)(output["nvmeSupport"]);
    }
    return contents;
};
const deserializeAws_ec2EbsInstanceBlockDevice = (output, context) => {
    const contents = {
        AttachTime: undefined,
        DeleteOnTermination: undefined,
        Status: undefined,
        VolumeId: undefined,
    };
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["attachTime"]));
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = (0, smithy_client_1.parseBoolean)(output["deleteOnTermination"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    return contents;
};
const deserializeAws_ec2EbsOptimizedInfo = (output, context) => {
    const contents = {
        BaselineBandwidthInMbps: undefined,
        BaselineThroughputInMBps: undefined,
        BaselineIops: undefined,
        MaximumBandwidthInMbps: undefined,
        MaximumThroughputInMBps: undefined,
        MaximumIops: undefined,
    };
    if (output["baselineBandwidthInMbps"] !== undefined) {
        contents.BaselineBandwidthInMbps = (0, smithy_client_1.strictParseInt32)(output["baselineBandwidthInMbps"]);
    }
    if (output["baselineThroughputInMBps"] !== undefined) {
        contents.BaselineThroughputInMBps = (0, smithy_client_1.strictParseFloat)(output["baselineThroughputInMBps"]);
    }
    if (output["baselineIops"] !== undefined) {
        contents.BaselineIops = (0, smithy_client_1.strictParseInt32)(output["baselineIops"]);
    }
    if (output["maximumBandwidthInMbps"] !== undefined) {
        contents.MaximumBandwidthInMbps = (0, smithy_client_1.strictParseInt32)(output["maximumBandwidthInMbps"]);
    }
    if (output["maximumThroughputInMBps"] !== undefined) {
        contents.MaximumThroughputInMBps = (0, smithy_client_1.strictParseFloat)(output["maximumThroughputInMBps"]);
    }
    if (output["maximumIops"] !== undefined) {
        contents.MaximumIops = (0, smithy_client_1.strictParseInt32)(output["maximumIops"]);
    }
    return contents;
};
const deserializeAws_ec2EfaInfo = (output, context) => {
    const contents = {
        MaximumEfaInterfaces: undefined,
    };
    if (output["maximumEfaInterfaces"] !== undefined) {
        contents.MaximumEfaInterfaces = (0, smithy_client_1.strictParseInt32)(output["maximumEfaInterfaces"]);
    }
    return contents;
};
const deserializeAws_ec2EgressOnlyInternetGateway = (output, context) => {
    const contents = {
        Attachments: undefined,
        EgressOnlyInternetGatewayId: undefined,
        Tags: undefined,
    };
    if (output.attachmentSet === "") {
        contents.Attachments = [];
    }
    else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
        contents.Attachments = deserializeAws_ec2InternetGatewayAttachmentList((0, smithy_client_1.getArrayIfSingleItem)(output["attachmentSet"]["item"]), context);
    }
    if (output["egressOnlyInternetGatewayId"] !== undefined) {
        contents.EgressOnlyInternetGatewayId = (0, smithy_client_1.expectString)(output["egressOnlyInternetGatewayId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2EgressOnlyInternetGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2EgressOnlyInternetGateway(entry, context);
    });
};
const deserializeAws_ec2ElasticGpuAssociation = (output, context) => {
    const contents = {
        ElasticGpuId: undefined,
        ElasticGpuAssociationId: undefined,
        ElasticGpuAssociationState: undefined,
        ElasticGpuAssociationTime: undefined,
    };
    if (output["elasticGpuId"] !== undefined) {
        contents.ElasticGpuId = (0, smithy_client_1.expectString)(output["elasticGpuId"]);
    }
    if (output["elasticGpuAssociationId"] !== undefined) {
        contents.ElasticGpuAssociationId = (0, smithy_client_1.expectString)(output["elasticGpuAssociationId"]);
    }
    if (output["elasticGpuAssociationState"] !== undefined) {
        contents.ElasticGpuAssociationState = (0, smithy_client_1.expectString)(output["elasticGpuAssociationState"]);
    }
    if (output["elasticGpuAssociationTime"] !== undefined) {
        contents.ElasticGpuAssociationTime = (0, smithy_client_1.expectString)(output["elasticGpuAssociationTime"]);
    }
    return contents;
};
const deserializeAws_ec2ElasticGpuAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ElasticGpuAssociation(entry, context);
    });
};
const deserializeAws_ec2ElasticGpuHealth = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    return contents;
};
const deserializeAws_ec2ElasticGpus = (output, context) => {
    const contents = {
        ElasticGpuId: undefined,
        AvailabilityZone: undefined,
        ElasticGpuType: undefined,
        ElasticGpuHealth: undefined,
        ElasticGpuState: undefined,
        InstanceId: undefined,
        Tags: undefined,
    };
    if (output["elasticGpuId"] !== undefined) {
        contents.ElasticGpuId = (0, smithy_client_1.expectString)(output["elasticGpuId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["elasticGpuType"] !== undefined) {
        contents.ElasticGpuType = (0, smithy_client_1.expectString)(output["elasticGpuType"]);
    }
    if (output["elasticGpuHealth"] !== undefined) {
        contents.ElasticGpuHealth = deserializeAws_ec2ElasticGpuHealth(output["elasticGpuHealth"], context);
    }
    if (output["elasticGpuState"] !== undefined) {
        contents.ElasticGpuState = (0, smithy_client_1.expectString)(output["elasticGpuState"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ElasticGpuSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ElasticGpus(entry, context);
    });
};
const deserializeAws_ec2ElasticGpuSpecificationResponse = (output, context) => {
    const contents = {
        Type: undefined,
    };
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    return contents;
};
const deserializeAws_ec2ElasticGpuSpecificationResponseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ElasticGpuSpecificationResponse(entry, context);
    });
};
const deserializeAws_ec2ElasticInferenceAcceleratorAssociation = (output, context) => {
    const contents = {
        ElasticInferenceAcceleratorArn: undefined,
        ElasticInferenceAcceleratorAssociationId: undefined,
        ElasticInferenceAcceleratorAssociationState: undefined,
        ElasticInferenceAcceleratorAssociationTime: undefined,
    };
    if (output["elasticInferenceAcceleratorArn"] !== undefined) {
        contents.ElasticInferenceAcceleratorArn = (0, smithy_client_1.expectString)(output["elasticInferenceAcceleratorArn"]);
    }
    if (output["elasticInferenceAcceleratorAssociationId"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociationId = (0, smithy_client_1.expectString)(output["elasticInferenceAcceleratorAssociationId"]);
    }
    if (output["elasticInferenceAcceleratorAssociationState"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociationState = (0, smithy_client_1.expectString)(output["elasticInferenceAcceleratorAssociationState"]);
    }
    if (output["elasticInferenceAcceleratorAssociationTime"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["elasticInferenceAcceleratorAssociationTime"]));
    }
    return contents;
};
const deserializeAws_ec2ElasticInferenceAcceleratorAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ElasticInferenceAcceleratorAssociation(entry, context);
    });
};
const deserializeAws_ec2EnableEbsEncryptionByDefaultResult = (output, context) => {
    const contents = {
        EbsEncryptionByDefault: undefined,
    };
    if (output["ebsEncryptionByDefault"] !== undefined) {
        contents.EbsEncryptionByDefault = (0, smithy_client_1.parseBoolean)(output["ebsEncryptionByDefault"]);
    }
    return contents;
};
const deserializeAws_ec2EnableFastLaunchResult = (output, context) => {
    const contents = {
        ImageId: undefined,
        ResourceType: undefined,
        SnapshotConfiguration: undefined,
        LaunchTemplate: undefined,
        MaxParallelLaunches: undefined,
        OwnerId: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        StateTransitionTime: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["snapshotConfiguration"] !== undefined) {
        contents.SnapshotConfiguration = deserializeAws_ec2FastLaunchSnapshotConfigurationResponse(output["snapshotConfiguration"], context);
    }
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
    }
    if (output["maxParallelLaunches"] !== undefined) {
        contents.MaxParallelLaunches = (0, smithy_client_1.strictParseInt32)(output["maxParallelLaunches"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(output["stateTransitionReason"]);
    }
    if (output["stateTransitionTime"] !== undefined) {
        contents.StateTransitionTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["stateTransitionTime"]));
    }
    return contents;
};
const deserializeAws_ec2EnableFastSnapshotRestoreErrorItem = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        FastSnapshotRestoreStateErrors: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output.fastSnapshotRestoreStateErrorSet === "") {
        contents.FastSnapshotRestoreStateErrors = [];
    }
    else if (output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
        output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined) {
        contents.FastSnapshotRestoreStateErrors = deserializeAws_ec2EnableFastSnapshotRestoreStateErrorSet((0, smithy_client_1.getArrayIfSingleItem)(output["fastSnapshotRestoreStateErrorSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2EnableFastSnapshotRestoreErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2EnableFastSnapshotRestoreErrorItem(entry, context);
    });
};
const deserializeAws_ec2EnableFastSnapshotRestoresResult = (output, context) => {
    const contents = {
        Successful: undefined,
        Unsuccessful: undefined,
    };
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = deserializeAws_ec2EnableFastSnapshotRestoreSuccessSet((0, smithy_client_1.getArrayIfSingleItem)(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2EnableFastSnapshotRestoreErrorSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2EnableFastSnapshotRestoreStateError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2EnableFastSnapshotRestoreStateErrorItem = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        Error: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2EnableFastSnapshotRestoreStateError(output["error"], context);
    }
    return contents;
};
const deserializeAws_ec2EnableFastSnapshotRestoreStateErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2EnableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};
const deserializeAws_ec2EnableFastSnapshotRestoreSuccessItem = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        AvailabilityZone: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        OwnerId: undefined,
        OwnerAlias: undefined,
        EnablingTime: undefined,
        OptimizingTime: undefined,
        EnabledTime: undefined,
        DisablingTime: undefined,
        DisabledTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["stateTransitionReason"] !== undefined) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(output["stateTransitionReason"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = (0, smithy_client_1.expectString)(output["ownerAlias"]);
    }
    if (output["enablingTime"] !== undefined) {
        contents.EnablingTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["enablingTime"]));
    }
    if (output["optimizingTime"] !== undefined) {
        contents.OptimizingTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["optimizingTime"]));
    }
    if (output["enabledTime"] !== undefined) {
        contents.EnabledTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["enabledTime"]));
    }
    if (output["disablingTime"] !== undefined) {
        contents.DisablingTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["disablingTime"]));
    }
    if (output["disabledTime"] !== undefined) {
        contents.DisabledTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["disabledTime"]));
    }
    return contents;
};
const deserializeAws_ec2EnableFastSnapshotRestoreSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2EnableFastSnapshotRestoreSuccessItem(entry, context);
    });
};
const deserializeAws_ec2EnableImageDeprecationResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2EnableIpamOrganizationAdminAccountResult = (output, context) => {
    const contents = {
        Success: undefined,
    };
    if (output["success"] !== undefined) {
        contents.Success = (0, smithy_client_1.parseBoolean)(output["success"]);
    }
    return contents;
};
const deserializeAws_ec2EnableSerialConsoleAccessResult = (output, context) => {
    const contents = {
        SerialConsoleAccessEnabled: undefined,
    };
    if (output["serialConsoleAccessEnabled"] !== undefined) {
        contents.SerialConsoleAccessEnabled = (0, smithy_client_1.parseBoolean)(output["serialConsoleAccessEnabled"]);
    }
    return contents;
};
const deserializeAws_ec2EnableTransitGatewayRouteTablePropagationResult = (output, context) => {
    const contents = {
        Propagation: undefined,
    };
    if (output["propagation"] !== undefined) {
        contents.Propagation = deserializeAws_ec2TransitGatewayPropagation(output["propagation"], context);
    }
    return contents;
};
const deserializeAws_ec2EnableVpcClassicLinkDnsSupportResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2EnableVpcClassicLinkResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2EnclaveOptions = (output, context) => {
    const contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["enabled"]);
    }
    return contents;
};
const deserializeAws_ec2EndpointSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ClientVpnEndpoint(entry, context);
    });
};
const deserializeAws_ec2ErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ValidationError(entry, context);
    });
};
const deserializeAws_ec2EventInformation = (output, context) => {
    const contents = {
        EventDescription: undefined,
        EventSubType: undefined,
        InstanceId: undefined,
    };
    if (output["eventDescription"] !== undefined) {
        contents.EventDescription = (0, smithy_client_1.expectString)(output["eventDescription"]);
    }
    if (output["eventSubType"] !== undefined) {
        contents.EventSubType = (0, smithy_client_1.expectString)(output["eventSubType"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    return contents;
};
const deserializeAws_ec2ExcludedInstanceTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2Explanation = (output, context) => {
    const contents = {
        Acl: undefined,
        AclRule: undefined,
        Address: undefined,
        Addresses: undefined,
        AttachedTo: undefined,
        AvailabilityZones: undefined,
        Cidrs: undefined,
        Component: undefined,
        CustomerGateway: undefined,
        Destination: undefined,
        DestinationVpc: undefined,
        Direction: undefined,
        ExplanationCode: undefined,
        IngressRouteTable: undefined,
        InternetGateway: undefined,
        LoadBalancerArn: undefined,
        ClassicLoadBalancerListener: undefined,
        LoadBalancerListenerPort: undefined,
        LoadBalancerTarget: undefined,
        LoadBalancerTargetGroup: undefined,
        LoadBalancerTargetGroups: undefined,
        LoadBalancerTargetPort: undefined,
        ElasticLoadBalancerListener: undefined,
        MissingComponent: undefined,
        NatGateway: undefined,
        NetworkInterface: undefined,
        PacketField: undefined,
        VpcPeeringConnection: undefined,
        Port: undefined,
        PortRanges: undefined,
        PrefixList: undefined,
        Protocols: undefined,
        RouteTableRoute: undefined,
        RouteTable: undefined,
        SecurityGroup: undefined,
        SecurityGroupRule: undefined,
        SecurityGroups: undefined,
        SourceVpc: undefined,
        State: undefined,
        Subnet: undefined,
        SubnetRouteTable: undefined,
        Vpc: undefined,
        VpcEndpoint: undefined,
        VpnConnection: undefined,
        VpnGateway: undefined,
        TransitGateway: undefined,
        TransitGatewayRouteTable: undefined,
        TransitGatewayRouteTableRoute: undefined,
        TransitGatewayAttachment: undefined,
    };
    if (output["acl"] !== undefined) {
        contents.Acl = deserializeAws_ec2AnalysisComponent(output["acl"], context);
    }
    if (output["aclRule"] !== undefined) {
        contents.AclRule = deserializeAws_ec2AnalysisAclRule(output["aclRule"], context);
    }
    if (output["address"] !== undefined) {
        contents.Address = (0, smithy_client_1.expectString)(output["address"]);
    }
    if (output.addressSet === "") {
        contents.Addresses = [];
    }
    else if (output["addressSet"] !== undefined && output["addressSet"]["item"] !== undefined) {
        contents.Addresses = deserializeAws_ec2IpAddressList((0, smithy_client_1.getArrayIfSingleItem)(output["addressSet"]["item"]), context);
    }
    if (output["attachedTo"] !== undefined) {
        contents.AttachedTo = deserializeAws_ec2AnalysisComponent(output["attachedTo"], context);
    }
    if (output.availabilityZoneSet === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["availabilityZoneSet"]["item"]), context);
    }
    if (output.cidrSet === "") {
        contents.Cidrs = [];
    }
    else if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
        contents.Cidrs = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["cidrSet"]["item"]), context);
    }
    if (output["component"] !== undefined) {
        contents.Component = deserializeAws_ec2AnalysisComponent(output["component"], context);
    }
    if (output["customerGateway"] !== undefined) {
        contents.CustomerGateway = deserializeAws_ec2AnalysisComponent(output["customerGateway"], context);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = deserializeAws_ec2AnalysisComponent(output["destination"], context);
    }
    if (output["destinationVpc"] !== undefined) {
        contents.DestinationVpc = deserializeAws_ec2AnalysisComponent(output["destinationVpc"], context);
    }
    if (output["direction"] !== undefined) {
        contents.Direction = (0, smithy_client_1.expectString)(output["direction"]);
    }
    if (output["explanationCode"] !== undefined) {
        contents.ExplanationCode = (0, smithy_client_1.expectString)(output["explanationCode"]);
    }
    if (output["ingressRouteTable"] !== undefined) {
        contents.IngressRouteTable = deserializeAws_ec2AnalysisComponent(output["ingressRouteTable"], context);
    }
    if (output["internetGateway"] !== undefined) {
        contents.InternetGateway = deserializeAws_ec2AnalysisComponent(output["internetGateway"], context);
    }
    if (output["loadBalancerArn"] !== undefined) {
        contents.LoadBalancerArn = (0, smithy_client_1.expectString)(output["loadBalancerArn"]);
    }
    if (output["classicLoadBalancerListener"] !== undefined) {
        contents.ClassicLoadBalancerListener = deserializeAws_ec2AnalysisLoadBalancerListener(output["classicLoadBalancerListener"], context);
    }
    if (output["loadBalancerListenerPort"] !== undefined) {
        contents.LoadBalancerListenerPort = (0, smithy_client_1.strictParseInt32)(output["loadBalancerListenerPort"]);
    }
    if (output["loadBalancerTarget"] !== undefined) {
        contents.LoadBalancerTarget = deserializeAws_ec2AnalysisLoadBalancerTarget(output["loadBalancerTarget"], context);
    }
    if (output["loadBalancerTargetGroup"] !== undefined) {
        contents.LoadBalancerTargetGroup = deserializeAws_ec2AnalysisComponent(output["loadBalancerTargetGroup"], context);
    }
    if (output.loadBalancerTargetGroupSet === "") {
        contents.LoadBalancerTargetGroups = [];
    }
    else if (output["loadBalancerTargetGroupSet"] !== undefined &&
        output["loadBalancerTargetGroupSet"]["item"] !== undefined) {
        contents.LoadBalancerTargetGroups = deserializeAws_ec2AnalysisComponentList((0, smithy_client_1.getArrayIfSingleItem)(output["loadBalancerTargetGroupSet"]["item"]), context);
    }
    if (output["loadBalancerTargetPort"] !== undefined) {
        contents.LoadBalancerTargetPort = (0, smithy_client_1.strictParseInt32)(output["loadBalancerTargetPort"]);
    }
    if (output["elasticLoadBalancerListener"] !== undefined) {
        contents.ElasticLoadBalancerListener = deserializeAws_ec2AnalysisComponent(output["elasticLoadBalancerListener"], context);
    }
    if (output["missingComponent"] !== undefined) {
        contents.MissingComponent = (0, smithy_client_1.expectString)(output["missingComponent"]);
    }
    if (output["natGateway"] !== undefined) {
        contents.NatGateway = deserializeAws_ec2AnalysisComponent(output["natGateway"], context);
    }
    if (output["networkInterface"] !== undefined) {
        contents.NetworkInterface = deserializeAws_ec2AnalysisComponent(output["networkInterface"], context);
    }
    if (output["packetField"] !== undefined) {
        contents.PacketField = (0, smithy_client_1.expectString)(output["packetField"]);
    }
    if (output["vpcPeeringConnection"] !== undefined) {
        contents.VpcPeeringConnection = deserializeAws_ec2AnalysisComponent(output["vpcPeeringConnection"], context);
    }
    if (output["port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["port"]);
    }
    if (output.portRangeSet === "") {
        contents.PortRanges = [];
    }
    else if (output["portRangeSet"] !== undefined && output["portRangeSet"]["item"] !== undefined) {
        contents.PortRanges = deserializeAws_ec2PortRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["portRangeSet"]["item"]), context);
    }
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2AnalysisComponent(output["prefixList"], context);
    }
    if (output.protocolSet === "") {
        contents.Protocols = [];
    }
    else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
        contents.Protocols = deserializeAws_ec2StringList((0, smithy_client_1.getArrayIfSingleItem)(output["protocolSet"]["item"]), context);
    }
    if (output["routeTableRoute"] !== undefined) {
        contents.RouteTableRoute = deserializeAws_ec2AnalysisRouteTableRoute(output["routeTableRoute"], context);
    }
    if (output["routeTable"] !== undefined) {
        contents.RouteTable = deserializeAws_ec2AnalysisComponent(output["routeTable"], context);
    }
    if (output["securityGroup"] !== undefined) {
        contents.SecurityGroup = deserializeAws_ec2AnalysisComponent(output["securityGroup"], context);
    }
    if (output["securityGroupRule"] !== undefined) {
        contents.SecurityGroupRule = deserializeAws_ec2AnalysisSecurityGroupRule(output["securityGroupRule"], context);
    }
    if (output.securityGroupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2AnalysisComponentList((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupSet"]["item"]), context);
    }
    if (output["sourceVpc"] !== undefined) {
        contents.SourceVpc = deserializeAws_ec2AnalysisComponent(output["sourceVpc"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2AnalysisComponent(output["subnet"], context);
    }
    if (output["subnetRouteTable"] !== undefined) {
        contents.SubnetRouteTable = deserializeAws_ec2AnalysisComponent(output["subnetRouteTable"], context);
    }
    if (output["vpc"] !== undefined) {
        contents.Vpc = deserializeAws_ec2AnalysisComponent(output["vpc"], context);
    }
    if (output["vpcEndpoint"] !== undefined) {
        contents.VpcEndpoint = deserializeAws_ec2AnalysisComponent(output["vpcEndpoint"], context);
    }
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2AnalysisComponent(output["vpnConnection"], context);
    }
    if (output["vpnGateway"] !== undefined) {
        contents.VpnGateway = deserializeAws_ec2AnalysisComponent(output["vpnGateway"], context);
    }
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2AnalysisComponent(output["transitGateway"], context);
    }
    if (output["transitGatewayRouteTable"] !== undefined) {
        contents.TransitGatewayRouteTable = deserializeAws_ec2AnalysisComponent(output["transitGatewayRouteTable"], context);
    }
    if (output["transitGatewayRouteTableRoute"] !== undefined) {
        contents.TransitGatewayRouteTableRoute = deserializeAws_ec2TransitGatewayRouteTableRoute(output["transitGatewayRouteTableRoute"], context);
    }
    if (output["transitGatewayAttachment"] !== undefined) {
        contents.TransitGatewayAttachment = deserializeAws_ec2AnalysisComponent(output["transitGatewayAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2ExplanationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Explanation(entry, context);
    });
};
const deserializeAws_ec2ExportClientVpnClientCertificateRevocationListResult = (output, context) => {
    const contents = {
        CertificateRevocationList: undefined,
        Status: undefined,
    };
    if (output["certificateRevocationList"] !== undefined) {
        contents.CertificateRevocationList = (0, smithy_client_1.expectString)(output["certificateRevocationList"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientCertificateRevocationListStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2ExportClientVpnClientConfigurationResult = (output, context) => {
    const contents = {
        ClientConfiguration: undefined,
    };
    if (output["clientConfiguration"] !== undefined) {
        contents.ClientConfiguration = (0, smithy_client_1.expectString)(output["clientConfiguration"]);
    }
    return contents;
};
const deserializeAws_ec2ExportImageResult = (output, context) => {
    const contents = {
        Description: undefined,
        DiskImageFormat: undefined,
        ExportImageTaskId: undefined,
        ImageId: undefined,
        RoleName: undefined,
        Progress: undefined,
        S3ExportLocation: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["diskImageFormat"] !== undefined) {
        contents.DiskImageFormat = (0, smithy_client_1.expectString)(output["diskImageFormat"]);
    }
    if (output["exportImageTaskId"] !== undefined) {
        contents.ExportImageTaskId = (0, smithy_client_1.expectString)(output["exportImageTaskId"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["roleName"] !== undefined) {
        contents.RoleName = (0, smithy_client_1.expectString)(output["roleName"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output["s3ExportLocation"] !== undefined) {
        contents.S3ExportLocation = deserializeAws_ec2ExportTaskS3Location(output["s3ExportLocation"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ExportImageTask = (output, context) => {
    const contents = {
        Description: undefined,
        ExportImageTaskId: undefined,
        ImageId: undefined,
        Progress: undefined,
        S3ExportLocation: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["exportImageTaskId"] !== undefined) {
        contents.ExportImageTaskId = (0, smithy_client_1.expectString)(output["exportImageTaskId"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output["s3ExportLocation"] !== undefined) {
        contents.S3ExportLocation = deserializeAws_ec2ExportTaskS3Location(output["s3ExportLocation"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ExportImageTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ExportImageTask(entry, context);
    });
};
const deserializeAws_ec2ExportTask = (output, context) => {
    const contents = {
        Description: undefined,
        ExportTaskId: undefined,
        ExportToS3Task: undefined,
        InstanceExportDetails: undefined,
        State: undefined,
        StatusMessage: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["exportTaskId"] !== undefined) {
        contents.ExportTaskId = (0, smithy_client_1.expectString)(output["exportTaskId"]);
    }
    if (output["exportToS3"] !== undefined) {
        contents.ExportToS3Task = deserializeAws_ec2ExportToS3Task(output["exportToS3"], context);
    }
    if (output["instanceExport"] !== undefined) {
        contents.InstanceExportDetails = deserializeAws_ec2InstanceExportDetails(output["instanceExport"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ExportTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ExportTask(entry, context);
    });
};
const deserializeAws_ec2ExportTaskS3Location = (output, context) => {
    const contents = {
        S3Bucket: undefined,
        S3Prefix: undefined,
    };
    if (output["s3Bucket"] !== undefined) {
        contents.S3Bucket = (0, smithy_client_1.expectString)(output["s3Bucket"]);
    }
    if (output["s3Prefix"] !== undefined) {
        contents.S3Prefix = (0, smithy_client_1.expectString)(output["s3Prefix"]);
    }
    return contents;
};
const deserializeAws_ec2ExportToS3Task = (output, context) => {
    const contents = {
        ContainerFormat: undefined,
        DiskImageFormat: undefined,
        S3Bucket: undefined,
        S3Key: undefined,
    };
    if (output["containerFormat"] !== undefined) {
        contents.ContainerFormat = (0, smithy_client_1.expectString)(output["containerFormat"]);
    }
    if (output["diskImageFormat"] !== undefined) {
        contents.DiskImageFormat = (0, smithy_client_1.expectString)(output["diskImageFormat"]);
    }
    if (output["s3Bucket"] !== undefined) {
        contents.S3Bucket = (0, smithy_client_1.expectString)(output["s3Bucket"]);
    }
    if (output["s3Key"] !== undefined) {
        contents.S3Key = (0, smithy_client_1.expectString)(output["s3Key"]);
    }
    return contents;
};
const deserializeAws_ec2ExportTransitGatewayRoutesResult = (output, context) => {
    const contents = {
        S3Location: undefined,
    };
    if (output["s3Location"] !== undefined) {
        contents.S3Location = (0, smithy_client_1.expectString)(output["s3Location"]);
    }
    return contents;
};
const deserializeAws_ec2FailedCapacityReservationFleetCancellationResult = (output, context) => {
    const contents = {
        CapacityReservationFleetId: undefined,
        CancelCapacityReservationFleetError: undefined,
    };
    if (output["capacityReservationFleetId"] !== undefined) {
        contents.CapacityReservationFleetId = (0, smithy_client_1.expectString)(output["capacityReservationFleetId"]);
    }
    if (output["cancelCapacityReservationFleetError"] !== undefined) {
        contents.CancelCapacityReservationFleetError = deserializeAws_ec2CancelCapacityReservationFleetError(output["cancelCapacityReservationFleetError"], context);
    }
    return contents;
};
const deserializeAws_ec2FailedCapacityReservationFleetCancellationResultSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FailedCapacityReservationFleetCancellationResult(entry, context);
    });
};
const deserializeAws_ec2FailedQueuedPurchaseDeletion = (output, context) => {
    const contents = {
        Error: undefined,
        ReservedInstancesId: undefined,
    };
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2DeleteQueuedReservedInstancesError(output["error"], context);
    }
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = (0, smithy_client_1.expectString)(output["reservedInstancesId"]);
    }
    return contents;
};
const deserializeAws_ec2FailedQueuedPurchaseDeletionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FailedQueuedPurchaseDeletion(entry, context);
    });
};
const deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse = (output, context) => {
    const contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        Version: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = (0, smithy_client_1.expectString)(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = (0, smithy_client_1.expectString)(output["launchTemplateName"]);
    }
    if (output["version"] !== undefined) {
        contents.Version = (0, smithy_client_1.expectString)(output["version"]);
    }
    return contents;
};
const deserializeAws_ec2FastLaunchSnapshotConfigurationResponse = (output, context) => {
    const contents = {
        TargetResourceCount: undefined,
    };
    if (output["targetResourceCount"] !== undefined) {
        contents.TargetResourceCount = (0, smithy_client_1.strictParseInt32)(output["targetResourceCount"]);
    }
    return contents;
};
const deserializeAws_ec2FederatedAuthentication = (output, context) => {
    const contents = {
        SamlProviderArn: undefined,
        SelfServiceSamlProviderArn: undefined,
    };
    if (output["samlProviderArn"] !== undefined) {
        contents.SamlProviderArn = (0, smithy_client_1.expectString)(output["samlProviderArn"]);
    }
    if (output["selfServiceSamlProviderArn"] !== undefined) {
        contents.SelfServiceSamlProviderArn = (0, smithy_client_1.expectString)(output["selfServiceSamlProviderArn"]);
    }
    return contents;
};
const deserializeAws_ec2FleetCapacityReservation = (output, context) => {
    const contents = {
        CapacityReservationId: undefined,
        AvailabilityZoneId: undefined,
        InstanceType: undefined,
        InstancePlatform: undefined,
        AvailabilityZone: undefined,
        TotalInstanceCount: undefined,
        FulfilledCapacity: undefined,
        EbsOptimized: undefined,
        CreateDate: undefined,
        Weight: undefined,
        Priority: undefined,
    };
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = (0, smithy_client_1.expectString)(output["capacityReservationId"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = (0, smithy_client_1.expectString)(output["availabilityZoneId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["instancePlatform"] !== undefined) {
        contents.InstancePlatform = (0, smithy_client_1.expectString)(output["instancePlatform"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["totalInstanceCount"] !== undefined) {
        contents.TotalInstanceCount = (0, smithy_client_1.strictParseInt32)(output["totalInstanceCount"]);
    }
    if (output["fulfilledCapacity"] !== undefined) {
        contents.FulfilledCapacity = (0, smithy_client_1.strictParseFloat)(output["fulfilledCapacity"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = (0, smithy_client_1.parseBoolean)(output["ebsOptimized"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createDate"]));
    }
    if (output["weight"] !== undefined) {
        contents.Weight = (0, smithy_client_1.strictParseFloat)(output["weight"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = (0, smithy_client_1.strictParseInt32)(output["priority"]);
    }
    return contents;
};
const deserializeAws_ec2FleetCapacityReservationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FleetCapacityReservation(entry, context);
    });
};
const deserializeAws_ec2FleetData = (output, context) => {
    const contents = {
        ActivityStatus: undefined,
        CreateTime: undefined,
        FleetId: undefined,
        FleetState: undefined,
        ClientToken: undefined,
        ExcessCapacityTerminationPolicy: undefined,
        FulfilledCapacity: undefined,
        FulfilledOnDemandCapacity: undefined,
        LaunchTemplateConfigs: undefined,
        TargetCapacitySpecification: undefined,
        TerminateInstancesWithExpiration: undefined,
        Type: undefined,
        ValidFrom: undefined,
        ValidUntil: undefined,
        ReplaceUnhealthyInstances: undefined,
        SpotOptions: undefined,
        OnDemandOptions: undefined,
        Tags: undefined,
        Errors: undefined,
        Instances: undefined,
        Context: undefined,
    };
    if (output["activityStatus"] !== undefined) {
        contents.ActivityStatus = (0, smithy_client_1.expectString)(output["activityStatus"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["fleetId"] !== undefined) {
        contents.FleetId = (0, smithy_client_1.expectString)(output["fleetId"]);
    }
    if (output["fleetState"] !== undefined) {
        contents.FleetState = (0, smithy_client_1.expectString)(output["fleetState"]);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output["excessCapacityTerminationPolicy"] !== undefined) {
        contents.ExcessCapacityTerminationPolicy = (0, smithy_client_1.expectString)(output["excessCapacityTerminationPolicy"]);
    }
    if (output["fulfilledCapacity"] !== undefined) {
        contents.FulfilledCapacity = (0, smithy_client_1.strictParseFloat)(output["fulfilledCapacity"]);
    }
    if (output["fulfilledOnDemandCapacity"] !== undefined) {
        contents.FulfilledOnDemandCapacity = (0, smithy_client_1.strictParseFloat)(output["fulfilledOnDemandCapacity"]);
    }
    if (output.launchTemplateConfigs === "") {
        contents.LaunchTemplateConfigs = [];
    }
    else if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
        contents.LaunchTemplateConfigs = deserializeAws_ec2FleetLaunchTemplateConfigList((0, smithy_client_1.getArrayIfSingleItem)(output["launchTemplateConfigs"]["item"]), context);
    }
    if (output["targetCapacitySpecification"] !== undefined) {
        contents.TargetCapacitySpecification = deserializeAws_ec2TargetCapacitySpecification(output["targetCapacitySpecification"], context);
    }
    if (output["terminateInstancesWithExpiration"] !== undefined) {
        contents.TerminateInstancesWithExpiration = (0, smithy_client_1.parseBoolean)(output["terminateInstancesWithExpiration"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["validFrom"] !== undefined) {
        contents.ValidFrom = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["validFrom"]));
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["validUntil"]));
    }
    if (output["replaceUnhealthyInstances"] !== undefined) {
        contents.ReplaceUnhealthyInstances = (0, smithy_client_1.parseBoolean)(output["replaceUnhealthyInstances"]);
    }
    if (output["spotOptions"] !== undefined) {
        contents.SpotOptions = deserializeAws_ec2SpotOptions(output["spotOptions"], context);
    }
    if (output["onDemandOptions"] !== undefined) {
        contents.OnDemandOptions = deserializeAws_ec2OnDemandOptions(output["onDemandOptions"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output.errorSet === "") {
        contents.Errors = [];
    }
    else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
        contents.Errors = deserializeAws_ec2DescribeFleetsErrorSet((0, smithy_client_1.getArrayIfSingleItem)(output["errorSet"]["item"]), context);
    }
    if (output.fleetInstanceSet === "") {
        contents.Instances = [];
    }
    else if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2DescribeFleetsInstancesSet((0, smithy_client_1.getArrayIfSingleItem)(output["fleetInstanceSet"]["item"]), context);
    }
    if (output["context"] !== undefined) {
        contents.Context = (0, smithy_client_1.expectString)(output["context"]);
    }
    return contents;
};
const deserializeAws_ec2FleetLaunchTemplateConfig = (output, context) => {
    const contents = {
        LaunchTemplateSpecification: undefined,
        Overrides: undefined,
    };
    if (output["launchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = deserializeAws_ec2FleetLaunchTemplateSpecification(output["launchTemplateSpecification"], context);
    }
    if (output.overrides === "") {
        contents.Overrides = [];
    }
    else if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
        contents.Overrides = deserializeAws_ec2FleetLaunchTemplateOverridesList((0, smithy_client_1.getArrayIfSingleItem)(output["overrides"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2FleetLaunchTemplateConfigList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FleetLaunchTemplateConfig(entry, context);
    });
};
const deserializeAws_ec2FleetLaunchTemplateOverrides = (output, context) => {
    const contents = {
        InstanceType: undefined,
        MaxPrice: undefined,
        SubnetId: undefined,
        AvailabilityZone: undefined,
        WeightedCapacity: undefined,
        Priority: undefined,
        Placement: undefined,
        InstanceRequirements: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["maxPrice"] !== undefined) {
        contents.MaxPrice = (0, smithy_client_1.expectString)(output["maxPrice"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["weightedCapacity"] !== undefined) {
        contents.WeightedCapacity = (0, smithy_client_1.strictParseFloat)(output["weightedCapacity"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = (0, smithy_client_1.strictParseFloat)(output["priority"]);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2PlacementResponse(output["placement"], context);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = deserializeAws_ec2InstanceRequirements(output["instanceRequirements"], context);
    }
    return contents;
};
const deserializeAws_ec2FleetLaunchTemplateOverridesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FleetLaunchTemplateOverrides(entry, context);
    });
};
const deserializeAws_ec2FleetLaunchTemplateSpecification = (output, context) => {
    const contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        Version: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = (0, smithy_client_1.expectString)(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = (0, smithy_client_1.expectString)(output["launchTemplateName"]);
    }
    if (output["version"] !== undefined) {
        contents.Version = (0, smithy_client_1.expectString)(output["version"]);
    }
    return contents;
};
const deserializeAws_ec2FleetSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FleetData(entry, context);
    });
};
const deserializeAws_ec2FleetSpotCapacityRebalance = (output, context) => {
    const contents = {
        ReplacementStrategy: undefined,
        TerminationDelay: undefined,
    };
    if (output["replacementStrategy"] !== undefined) {
        contents.ReplacementStrategy = (0, smithy_client_1.expectString)(output["replacementStrategy"]);
    }
    if (output["terminationDelay"] !== undefined) {
        contents.TerminationDelay = (0, smithy_client_1.strictParseInt32)(output["terminationDelay"]);
    }
    return contents;
};
const deserializeAws_ec2FleetSpotMaintenanceStrategies = (output, context) => {
    const contents = {
        CapacityRebalance: undefined,
    };
    if (output["capacityRebalance"] !== undefined) {
        contents.CapacityRebalance = deserializeAws_ec2FleetSpotCapacityRebalance(output["capacityRebalance"], context);
    }
    return contents;
};
const deserializeAws_ec2FlowLog = (output, context) => {
    const contents = {
        CreationTime: undefined,
        DeliverLogsErrorMessage: undefined,
        DeliverLogsPermissionArn: undefined,
        DeliverLogsStatus: undefined,
        FlowLogId: undefined,
        FlowLogStatus: undefined,
        LogGroupName: undefined,
        ResourceId: undefined,
        TrafficType: undefined,
        LogDestinationType: undefined,
        LogDestination: undefined,
        LogFormat: undefined,
        Tags: undefined,
        MaxAggregationInterval: undefined,
        DestinationOptions: undefined,
    };
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTime"]));
    }
    if (output["deliverLogsErrorMessage"] !== undefined) {
        contents.DeliverLogsErrorMessage = (0, smithy_client_1.expectString)(output["deliverLogsErrorMessage"]);
    }
    if (output["deliverLogsPermissionArn"] !== undefined) {
        contents.DeliverLogsPermissionArn = (0, smithy_client_1.expectString)(output["deliverLogsPermissionArn"]);
    }
    if (output["deliverLogsStatus"] !== undefined) {
        contents.DeliverLogsStatus = (0, smithy_client_1.expectString)(output["deliverLogsStatus"]);
    }
    if (output["flowLogId"] !== undefined) {
        contents.FlowLogId = (0, smithy_client_1.expectString)(output["flowLogId"]);
    }
    if (output["flowLogStatus"] !== undefined) {
        contents.FlowLogStatus = (0, smithy_client_1.expectString)(output["flowLogStatus"]);
    }
    if (output["logGroupName"] !== undefined) {
        contents.LogGroupName = (0, smithy_client_1.expectString)(output["logGroupName"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["trafficType"] !== undefined) {
        contents.TrafficType = (0, smithy_client_1.expectString)(output["trafficType"]);
    }
    if (output["logDestinationType"] !== undefined) {
        contents.LogDestinationType = (0, smithy_client_1.expectString)(output["logDestinationType"]);
    }
    if (output["logDestination"] !== undefined) {
        contents.LogDestination = (0, smithy_client_1.expectString)(output["logDestination"]);
    }
    if (output["logFormat"] !== undefined) {
        contents.LogFormat = (0, smithy_client_1.expectString)(output["logFormat"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["maxAggregationInterval"] !== undefined) {
        contents.MaxAggregationInterval = (0, smithy_client_1.strictParseInt32)(output["maxAggregationInterval"]);
    }
    if (output["destinationOptions"] !== undefined) {
        contents.DestinationOptions = deserializeAws_ec2DestinationOptionsResponse(output["destinationOptions"], context);
    }
    return contents;
};
const deserializeAws_ec2FlowLogSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FlowLog(entry, context);
    });
};
const deserializeAws_ec2FpgaDeviceInfo = (output, context) => {
    const contents = {
        Name: undefined,
        Manufacturer: undefined,
        Count: undefined,
        MemoryInfo: undefined,
    };
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["manufacturer"] !== undefined) {
        contents.Manufacturer = (0, smithy_client_1.expectString)(output["manufacturer"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseInt32)(output["count"]);
    }
    if (output["memoryInfo"] !== undefined) {
        contents.MemoryInfo = deserializeAws_ec2FpgaDeviceMemoryInfo(output["memoryInfo"], context);
    }
    return contents;
};
const deserializeAws_ec2FpgaDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FpgaDeviceInfo(entry, context);
    });
};
const deserializeAws_ec2FpgaDeviceMemoryInfo = (output, context) => {
    const contents = {
        SizeInMiB: undefined,
    };
    if (output["sizeInMiB"] !== undefined) {
        contents.SizeInMiB = (0, smithy_client_1.strictParseInt32)(output["sizeInMiB"]);
    }
    return contents;
};
const deserializeAws_ec2FpgaImage = (output, context) => {
    const contents = {
        FpgaImageId: undefined,
        FpgaImageGlobalId: undefined,
        Name: undefined,
        Description: undefined,
        ShellVersion: undefined,
        PciId: undefined,
        State: undefined,
        CreateTime: undefined,
        UpdateTime: undefined,
        OwnerId: undefined,
        OwnerAlias: undefined,
        ProductCodes: undefined,
        Tags: undefined,
        Public: undefined,
        DataRetentionSupport: undefined,
    };
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = (0, smithy_client_1.expectString)(output["fpgaImageId"]);
    }
    if (output["fpgaImageGlobalId"] !== undefined) {
        contents.FpgaImageGlobalId = (0, smithy_client_1.expectString)(output["fpgaImageGlobalId"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["shellVersion"] !== undefined) {
        contents.ShellVersion = (0, smithy_client_1.expectString)(output["shellVersion"]);
    }
    if (output["pciId"] !== undefined) {
        contents.PciId = deserializeAws_ec2PciId(output["pciId"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = deserializeAws_ec2FpgaImageState(output["state"], context);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["updateTime"] !== undefined) {
        contents.UpdateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["updateTime"]));
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = (0, smithy_client_1.expectString)(output["ownerAlias"]);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList((0, smithy_client_1.getArrayIfSingleItem)(output["productCodes"]["item"]), context);
    }
    if (output.tags === "") {
        contents.Tags = [];
    }
    else if (output["tags"] !== undefined && output["tags"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tags"]["item"]), context);
    }
    if (output["public"] !== undefined) {
        contents.Public = (0, smithy_client_1.parseBoolean)(output["public"]);
    }
    if (output["dataRetentionSupport"] !== undefined) {
        contents.DataRetentionSupport = (0, smithy_client_1.parseBoolean)(output["dataRetentionSupport"]);
    }
    return contents;
};
const deserializeAws_ec2FpgaImageAttribute = (output, context) => {
    const contents = {
        FpgaImageId: undefined,
        Name: undefined,
        Description: undefined,
        LoadPermissions: undefined,
        ProductCodes: undefined,
    };
    if (output["fpgaImageId"] !== undefined) {
        contents.FpgaImageId = (0, smithy_client_1.expectString)(output["fpgaImageId"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.loadPermissions === "") {
        contents.LoadPermissions = [];
    }
    else if (output["loadPermissions"] !== undefined && output["loadPermissions"]["item"] !== undefined) {
        contents.LoadPermissions = deserializeAws_ec2LoadPermissionList((0, smithy_client_1.getArrayIfSingleItem)(output["loadPermissions"]["item"]), context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList((0, smithy_client_1.getArrayIfSingleItem)(output["productCodes"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2FpgaImageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2FpgaImage(entry, context);
    });
};
const deserializeAws_ec2FpgaImageState = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2FpgaInfo = (output, context) => {
    const contents = {
        Fpgas: undefined,
        TotalFpgaMemoryInMiB: undefined,
    };
    if (output.fpgas === "") {
        contents.Fpgas = [];
    }
    else if (output["fpgas"] !== undefined && output["fpgas"]["item"] !== undefined) {
        contents.Fpgas = deserializeAws_ec2FpgaDeviceInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["fpgas"]["item"]), context);
    }
    if (output["totalFpgaMemoryInMiB"] !== undefined) {
        contents.TotalFpgaMemoryInMiB = (0, smithy_client_1.strictParseInt32)(output["totalFpgaMemoryInMiB"]);
    }
    return contents;
};
const deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesResult = (output, context) => {
    const contents = {
        AssociatedRoles: undefined,
    };
    if (output.associatedRoleSet === "") {
        contents.AssociatedRoles = [];
    }
    else if (output["associatedRoleSet"] !== undefined && output["associatedRoleSet"]["item"] !== undefined) {
        contents.AssociatedRoles = deserializeAws_ec2AssociatedRolesList((0, smithy_client_1.getArrayIfSingleItem)(output["associatedRoleSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2GetAssociatedIpv6PoolCidrsResult = (output, context) => {
    const contents = {
        Ipv6CidrAssociations: undefined,
        NextToken: undefined,
    };
    if (output.ipv6CidrAssociationSet === "") {
        contents.Ipv6CidrAssociations = [];
    }
    else if (output["ipv6CidrAssociationSet"] !== undefined && output["ipv6CidrAssociationSet"]["item"] !== undefined) {
        contents.Ipv6CidrAssociations = deserializeAws_ec2Ipv6CidrAssociationSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6CidrAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetCapacityReservationUsageResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        CapacityReservationId: undefined,
        InstanceType: undefined,
        TotalInstanceCount: undefined,
        AvailableInstanceCount: undefined,
        State: undefined,
        InstanceUsages: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = (0, smithy_client_1.expectString)(output["capacityReservationId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["totalInstanceCount"] !== undefined) {
        contents.TotalInstanceCount = (0, smithy_client_1.strictParseInt32)(output["totalInstanceCount"]);
    }
    if (output["availableInstanceCount"] !== undefined) {
        contents.AvailableInstanceCount = (0, smithy_client_1.strictParseInt32)(output["availableInstanceCount"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output.instanceUsageSet === "") {
        contents.InstanceUsages = [];
    }
    else if (output["instanceUsageSet"] !== undefined && output["instanceUsageSet"]["item"] !== undefined) {
        contents.InstanceUsages = deserializeAws_ec2InstanceUsageSet((0, smithy_client_1.getArrayIfSingleItem)(output["instanceUsageSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2GetCoipPoolUsageResult = (output, context) => {
    const contents = {
        CoipPoolId: undefined,
        CoipAddressUsages: undefined,
        LocalGatewayRouteTableId: undefined,
    };
    if (output["coipPoolId"] !== undefined) {
        contents.CoipPoolId = (0, smithy_client_1.expectString)(output["coipPoolId"]);
    }
    if (output.coipAddressUsageSet === "") {
        contents.CoipAddressUsages = [];
    }
    else if (output["coipAddressUsageSet"] !== undefined && output["coipAddressUsageSet"]["item"] !== undefined) {
        contents.CoipAddressUsages = deserializeAws_ec2CoipAddressUsageSet((0, smithy_client_1.getArrayIfSingleItem)(output["coipAddressUsageSet"]["item"]), context);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = (0, smithy_client_1.expectString)(output["localGatewayRouteTableId"]);
    }
    return contents;
};
const deserializeAws_ec2GetConsoleOutputResult = (output, context) => {
    const contents = {
        InstanceId: undefined,
        Output: undefined,
        Timestamp: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["output"] !== undefined) {
        contents.Output = (0, smithy_client_1.expectString)(output["output"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["timestamp"]));
    }
    return contents;
};
const deserializeAws_ec2GetConsoleScreenshotResult = (output, context) => {
    const contents = {
        ImageData: undefined,
        InstanceId: undefined,
    };
    if (output["imageData"] !== undefined) {
        contents.ImageData = (0, smithy_client_1.expectString)(output["imageData"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    return contents;
};
const deserializeAws_ec2GetDefaultCreditSpecificationResult = (output, context) => {
    const contents = {
        InstanceFamilyCreditSpecification: undefined,
    };
    if (output["instanceFamilyCreditSpecification"] !== undefined) {
        contents.InstanceFamilyCreditSpecification = deserializeAws_ec2InstanceFamilyCreditSpecification(output["instanceFamilyCreditSpecification"], context);
    }
    return contents;
};
const deserializeAws_ec2GetEbsDefaultKmsKeyIdResult = (output, context) => {
    const contents = {
        KmsKeyId: undefined,
    };
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["kmsKeyId"]);
    }
    return contents;
};
const deserializeAws_ec2GetEbsEncryptionByDefaultResult = (output, context) => {
    const contents = {
        EbsEncryptionByDefault: undefined,
    };
    if (output["ebsEncryptionByDefault"] !== undefined) {
        contents.EbsEncryptionByDefault = (0, smithy_client_1.parseBoolean)(output["ebsEncryptionByDefault"]);
    }
    return contents;
};
const deserializeAws_ec2GetFlowLogsIntegrationTemplateResult = (output, context) => {
    const contents = {
        Result: undefined,
    };
    if (output["result"] !== undefined) {
        contents.Result = (0, smithy_client_1.expectString)(output["result"]);
    }
    return contents;
};
const deserializeAws_ec2GetGroupsForCapacityReservationResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        CapacityReservationGroups: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.capacityReservationGroupSet === "") {
        contents.CapacityReservationGroups = [];
    }
    else if (output["capacityReservationGroupSet"] !== undefined &&
        output["capacityReservationGroupSet"]["item"] !== undefined) {
        contents.CapacityReservationGroups = deserializeAws_ec2CapacityReservationGroupSet((0, smithy_client_1.getArrayIfSingleItem)(output["capacityReservationGroupSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2GetHostReservationPurchasePreviewResult = (output, context) => {
    const contents = {
        CurrencyCode: undefined,
        Purchase: undefined,
        TotalHourlyPrice: undefined,
        TotalUpfrontPrice: undefined,
    };
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["currencyCode"]);
    }
    if (output.purchase === "") {
        contents.Purchase = [];
    }
    else if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
        contents.Purchase = deserializeAws_ec2PurchaseSet((0, smithy_client_1.getArrayIfSingleItem)(output["purchase"]["item"]), context);
    }
    if (output["totalHourlyPrice"] !== undefined) {
        contents.TotalHourlyPrice = (0, smithy_client_1.expectString)(output["totalHourlyPrice"]);
    }
    if (output["totalUpfrontPrice"] !== undefined) {
        contents.TotalUpfrontPrice = (0, smithy_client_1.expectString)(output["totalUpfrontPrice"]);
    }
    return contents;
};
const deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsResult = (output, context) => {
    const contents = {
        InstanceTypes: undefined,
        NextToken: undefined,
    };
    if (output.instanceTypeSet === "") {
        contents.InstanceTypes = [];
    }
    else if (output["instanceTypeSet"] !== undefined && output["instanceTypeSet"]["item"] !== undefined) {
        contents.InstanceTypes = deserializeAws_ec2InstanceTypeInfoFromInstanceRequirementsSet((0, smithy_client_1.getArrayIfSingleItem)(output["instanceTypeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetInstanceUefiDataResult = (output, context) => {
    const contents = {
        InstanceId: undefined,
        UefiData: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["uefiData"] !== undefined) {
        contents.UefiData = (0, smithy_client_1.expectString)(output["uefiData"]);
    }
    return contents;
};
const deserializeAws_ec2GetIpamAddressHistoryResult = (output, context) => {
    const contents = {
        HistoryRecords: undefined,
        NextToken: undefined,
    };
    if (output.historyRecordSet === "") {
        contents.HistoryRecords = [];
    }
    else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
        contents.HistoryRecords = deserializeAws_ec2IpamAddressHistoryRecordSet((0, smithy_client_1.getArrayIfSingleItem)(output["historyRecordSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetIpamPoolAllocationsResult = (output, context) => {
    const contents = {
        IpamPoolAllocations: undefined,
        NextToken: undefined,
    };
    if (output.ipamPoolAllocationSet === "") {
        contents.IpamPoolAllocations = [];
    }
    else if (output["ipamPoolAllocationSet"] !== undefined && output["ipamPoolAllocationSet"]["item"] !== undefined) {
        contents.IpamPoolAllocations = deserializeAws_ec2IpamPoolAllocationSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipamPoolAllocationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetIpamPoolCidrsResult = (output, context) => {
    const contents = {
        IpamPoolCidrs: undefined,
        NextToken: undefined,
    };
    if (output.ipamPoolCidrSet === "") {
        contents.IpamPoolCidrs = [];
    }
    else if (output["ipamPoolCidrSet"] !== undefined && output["ipamPoolCidrSet"]["item"] !== undefined) {
        contents.IpamPoolCidrs = deserializeAws_ec2IpamPoolCidrSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipamPoolCidrSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetIpamResourceCidrsResult = (output, context) => {
    const contents = {
        NextToken: undefined,
        IpamResourceCidrs: undefined,
    };
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    if (output.ipamResourceCidrSet === "") {
        contents.IpamResourceCidrs = [];
    }
    else if (output["ipamResourceCidrSet"] !== undefined && output["ipamResourceCidrSet"]["item"] !== undefined) {
        contents.IpamResourceCidrs = deserializeAws_ec2IpamResourceCidrSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipamResourceCidrSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2GetLaunchTemplateDataResult = (output, context) => {
    const contents = {
        LaunchTemplateData: undefined,
    };
    if (output["launchTemplateData"] !== undefined) {
        contents.LaunchTemplateData = deserializeAws_ec2ResponseLaunchTemplateData(output["launchTemplateData"], context);
    }
    return contents;
};
const deserializeAws_ec2GetManagedPrefixListAssociationsResult = (output, context) => {
    const contents = {
        PrefixListAssociations: undefined,
        NextToken: undefined,
    };
    if (output.prefixListAssociationSet === "") {
        contents.PrefixListAssociations = [];
    }
    else if (output["prefixListAssociationSet"] !== undefined &&
        output["prefixListAssociationSet"]["item"] !== undefined) {
        contents.PrefixListAssociations = deserializeAws_ec2PrefixListAssociationSet((0, smithy_client_1.getArrayIfSingleItem)(output["prefixListAssociationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetManagedPrefixListEntriesResult = (output, context) => {
    const contents = {
        Entries: undefined,
        NextToken: undefined,
    };
    if (output.entrySet === "") {
        contents.Entries = [];
    }
    else if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
        contents.Entries = deserializeAws_ec2PrefixListEntrySet((0, smithy_client_1.getArrayIfSingleItem)(output["entrySet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsResult = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeAnalysisId: undefined,
        AnalysisStatus: undefined,
        AnalysisFindings: undefined,
        NextToken: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeAnalysisId"]);
    }
    if (output["analysisStatus"] !== undefined) {
        contents.AnalysisStatus = (0, smithy_client_1.expectString)(output["analysisStatus"]);
    }
    if (output.analysisFindingSet === "") {
        contents.AnalysisFindings = [];
    }
    else if (output["analysisFindingSet"] !== undefined && output["analysisFindingSet"]["item"] !== undefined) {
        contents.AnalysisFindings = deserializeAws_ec2AccessScopeAnalysisFindingList((0, smithy_client_1.getArrayIfSingleItem)(output["analysisFindingSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetNetworkInsightsAccessScopeContentResult = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeContent: undefined,
    };
    if (output["networkInsightsAccessScopeContent"] !== undefined) {
        contents.NetworkInsightsAccessScopeContent = deserializeAws_ec2NetworkInsightsAccessScopeContent(output["networkInsightsAccessScopeContent"], context);
    }
    return contents;
};
const deserializeAws_ec2GetPasswordDataResult = (output, context) => {
    const contents = {
        InstanceId: undefined,
        PasswordData: undefined,
        Timestamp: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["passwordData"] !== undefined) {
        contents.PasswordData = (0, smithy_client_1.expectString)(output["passwordData"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["timestamp"]));
    }
    return contents;
};
const deserializeAws_ec2GetReservedInstancesExchangeQuoteResult = (output, context) => {
    const contents = {
        CurrencyCode: undefined,
        IsValidExchange: undefined,
        OutputReservedInstancesWillExpireAt: undefined,
        PaymentDue: undefined,
        ReservedInstanceValueRollup: undefined,
        ReservedInstanceValueSet: undefined,
        TargetConfigurationValueRollup: undefined,
        TargetConfigurationValueSet: undefined,
        ValidationFailureReason: undefined,
    };
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["currencyCode"]);
    }
    if (output["isValidExchange"] !== undefined) {
        contents.IsValidExchange = (0, smithy_client_1.parseBoolean)(output["isValidExchange"]);
    }
    if (output["outputReservedInstancesWillExpireAt"] !== undefined) {
        contents.OutputReservedInstancesWillExpireAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["outputReservedInstancesWillExpireAt"]));
    }
    if (output["paymentDue"] !== undefined) {
        contents.PaymentDue = (0, smithy_client_1.expectString)(output["paymentDue"]);
    }
    if (output["reservedInstanceValueRollup"] !== undefined) {
        contents.ReservedInstanceValueRollup = deserializeAws_ec2ReservationValue(output["reservedInstanceValueRollup"], context);
    }
    if (output.reservedInstanceValueSet === "") {
        contents.ReservedInstanceValueSet = [];
    }
    else if (output["reservedInstanceValueSet"] !== undefined &&
        output["reservedInstanceValueSet"]["item"] !== undefined) {
        contents.ReservedInstanceValueSet = deserializeAws_ec2ReservedInstanceReservationValueSet((0, smithy_client_1.getArrayIfSingleItem)(output["reservedInstanceValueSet"]["item"]), context);
    }
    if (output["targetConfigurationValueRollup"] !== undefined) {
        contents.TargetConfigurationValueRollup = deserializeAws_ec2ReservationValue(output["targetConfigurationValueRollup"], context);
    }
    if (output.targetConfigurationValueSet === "") {
        contents.TargetConfigurationValueSet = [];
    }
    else if (output["targetConfigurationValueSet"] !== undefined &&
        output["targetConfigurationValueSet"]["item"] !== undefined) {
        contents.TargetConfigurationValueSet = deserializeAws_ec2TargetReservationValueSet((0, smithy_client_1.getArrayIfSingleItem)(output["targetConfigurationValueSet"]["item"]), context);
    }
    if (output["validationFailureReason"] !== undefined) {
        contents.ValidationFailureReason = (0, smithy_client_1.expectString)(output["validationFailureReason"]);
    }
    return contents;
};
const deserializeAws_ec2GetSerialConsoleAccessStatusResult = (output, context) => {
    const contents = {
        SerialConsoleAccessEnabled: undefined,
    };
    if (output["serialConsoleAccessEnabled"] !== undefined) {
        contents.SerialConsoleAccessEnabled = (0, smithy_client_1.parseBoolean)(output["serialConsoleAccessEnabled"]);
    }
    return contents;
};
const deserializeAws_ec2GetSpotPlacementScoresResult = (output, context) => {
    const contents = {
        SpotPlacementScores: undefined,
        NextToken: undefined,
    };
    if (output.spotPlacementScoreSet === "") {
        contents.SpotPlacementScores = [];
    }
    else if (output["spotPlacementScoreSet"] !== undefined && output["spotPlacementScoreSet"]["item"] !== undefined) {
        contents.SpotPlacementScores = deserializeAws_ec2SpotPlacementScores((0, smithy_client_1.getArrayIfSingleItem)(output["spotPlacementScoreSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetSubnetCidrReservationsResult = (output, context) => {
    const contents = {
        SubnetIpv4CidrReservations: undefined,
        SubnetIpv6CidrReservations: undefined,
        NextToken: undefined,
    };
    if (output.subnetIpv4CidrReservationSet === "") {
        contents.SubnetIpv4CidrReservations = [];
    }
    else if (output["subnetIpv4CidrReservationSet"] !== undefined &&
        output["subnetIpv4CidrReservationSet"]["item"] !== undefined) {
        contents.SubnetIpv4CidrReservations = deserializeAws_ec2SubnetCidrReservationList((0, smithy_client_1.getArrayIfSingleItem)(output["subnetIpv4CidrReservationSet"]["item"]), context);
    }
    if (output.subnetIpv6CidrReservationSet === "") {
        contents.SubnetIpv6CidrReservations = [];
    }
    else if (output["subnetIpv6CidrReservationSet"] !== undefined &&
        output["subnetIpv6CidrReservationSet"]["item"] !== undefined) {
        contents.SubnetIpv6CidrReservations = deserializeAws_ec2SubnetCidrReservationList((0, smithy_client_1.getArrayIfSingleItem)(output["subnetIpv6CidrReservationSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetTransitGatewayAttachmentPropagationsResult = (output, context) => {
    const contents = {
        TransitGatewayAttachmentPropagations: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayAttachmentPropagations === "") {
        contents.TransitGatewayAttachmentPropagations = [];
    }
    else if (output["transitGatewayAttachmentPropagations"] !== undefined &&
        output["transitGatewayAttachmentPropagations"]["item"] !== undefined) {
        contents.TransitGatewayAttachmentPropagations = deserializeAws_ec2TransitGatewayAttachmentPropagationList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayAttachmentPropagations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
    const contents = {
        MulticastDomainAssociations: undefined,
        NextToken: undefined,
    };
    if (output.multicastDomainAssociations === "") {
        contents.MulticastDomainAssociations = [];
    }
    else if (output["multicastDomainAssociations"] !== undefined &&
        output["multicastDomainAssociations"]["item"] !== undefined) {
        contents.MulticastDomainAssociations = deserializeAws_ec2TransitGatewayMulticastDomainAssociationList((0, smithy_client_1.getArrayIfSingleItem)(output["multicastDomainAssociations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetTransitGatewayPrefixListReferencesResult = (output, context) => {
    const contents = {
        TransitGatewayPrefixListReferences: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayPrefixListReferenceSet === "") {
        contents.TransitGatewayPrefixListReferences = [];
    }
    else if (output["transitGatewayPrefixListReferenceSet"] !== undefined &&
        output["transitGatewayPrefixListReferenceSet"]["item"] !== undefined) {
        contents.TransitGatewayPrefixListReferences = deserializeAws_ec2TransitGatewayPrefixListReferenceSet((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayPrefixListReferenceSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetTransitGatewayRouteTableAssociationsResult = (output, context) => {
    const contents = {
        Associations: undefined,
        NextToken: undefined,
    };
    if (output.associations === "") {
        contents.Associations = [];
    }
    else if (output["associations"] !== undefined && output["associations"]["item"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayRouteTableAssociationList((0, smithy_client_1.getArrayIfSingleItem)(output["associations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetTransitGatewayRouteTablePropagationsResult = (output, context) => {
    const contents = {
        TransitGatewayRouteTablePropagations: undefined,
        NextToken: undefined,
    };
    if (output.transitGatewayRouteTablePropagations === "") {
        contents.TransitGatewayRouteTablePropagations = [];
    }
    else if (output["transitGatewayRouteTablePropagations"] !== undefined &&
        output["transitGatewayRouteTablePropagations"]["item"] !== undefined) {
        contents.TransitGatewayRouteTablePropagations = deserializeAws_ec2TransitGatewayRouteTablePropagationList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayRouteTablePropagations"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationResult = (output, context) => {
    const contents = {
        VpnConnectionDeviceSampleConfiguration: undefined,
    };
    if (output["vpnConnectionDeviceSampleConfiguration"] !== undefined) {
        contents.VpnConnectionDeviceSampleConfiguration = (0, smithy_client_1.expectString)(output["vpnConnectionDeviceSampleConfiguration"]);
    }
    return contents;
};
const deserializeAws_ec2GetVpnConnectionDeviceTypesResult = (output, context) => {
    const contents = {
        VpnConnectionDeviceTypes: undefined,
        NextToken: undefined,
    };
    if (output.vpnConnectionDeviceTypeSet === "") {
        contents.VpnConnectionDeviceTypes = [];
    }
    else if (output["vpnConnectionDeviceTypeSet"] !== undefined &&
        output["vpnConnectionDeviceTypeSet"]["item"] !== undefined) {
        contents.VpnConnectionDeviceTypes = deserializeAws_ec2VpnConnectionDeviceTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["vpnConnectionDeviceTypeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2GpuDeviceInfo = (output, context) => {
    const contents = {
        Name: undefined,
        Manufacturer: undefined,
        Count: undefined,
        MemoryInfo: undefined,
    };
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["manufacturer"] !== undefined) {
        contents.Manufacturer = (0, smithy_client_1.expectString)(output["manufacturer"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseInt32)(output["count"]);
    }
    if (output["memoryInfo"] !== undefined) {
        contents.MemoryInfo = deserializeAws_ec2GpuDeviceMemoryInfo(output["memoryInfo"], context);
    }
    return contents;
};
const deserializeAws_ec2GpuDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2GpuDeviceInfo(entry, context);
    });
};
const deserializeAws_ec2GpuDeviceMemoryInfo = (output, context) => {
    const contents = {
        SizeInMiB: undefined,
    };
    if (output["sizeInMiB"] !== undefined) {
        contents.SizeInMiB = (0, smithy_client_1.strictParseInt32)(output["sizeInMiB"]);
    }
    return contents;
};
const deserializeAws_ec2GpuInfo = (output, context) => {
    const contents = {
        Gpus: undefined,
        TotalGpuMemoryInMiB: undefined,
    };
    if (output.gpus === "") {
        contents.Gpus = [];
    }
    else if (output["gpus"] !== undefined && output["gpus"]["item"] !== undefined) {
        contents.Gpus = deserializeAws_ec2GpuDeviceInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["gpus"]["item"]), context);
    }
    if (output["totalGpuMemoryInMiB"] !== undefined) {
        contents.TotalGpuMemoryInMiB = (0, smithy_client_1.strictParseInt32)(output["totalGpuMemoryInMiB"]);
    }
    return contents;
};
const deserializeAws_ec2GroupIdentifier = (output, context) => {
    const contents = {
        GroupName: undefined,
        GroupId: undefined,
    };
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    return contents;
};
const deserializeAws_ec2GroupIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2GroupIdentifier(entry, context);
    });
};
const deserializeAws_ec2GroupIdentifierSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SecurityGroupIdentifier(entry, context);
    });
};
const deserializeAws_ec2GroupIdStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2HibernationOptions = (output, context) => {
    const contents = {
        Configured: undefined,
    };
    if (output["configured"] !== undefined) {
        contents.Configured = (0, smithy_client_1.parseBoolean)(output["configured"]);
    }
    return contents;
};
const deserializeAws_ec2HistoryRecord = (output, context) => {
    const contents = {
        EventInformation: undefined,
        EventType: undefined,
        Timestamp: undefined,
    };
    if (output["eventInformation"] !== undefined) {
        contents.EventInformation = deserializeAws_ec2EventInformation(output["eventInformation"], context);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = (0, smithy_client_1.expectString)(output["eventType"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["timestamp"]));
    }
    return contents;
};
const deserializeAws_ec2HistoryRecordEntry = (output, context) => {
    const contents = {
        EventInformation: undefined,
        EventType: undefined,
        Timestamp: undefined,
    };
    if (output["eventInformation"] !== undefined) {
        contents.EventInformation = deserializeAws_ec2EventInformation(output["eventInformation"], context);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = (0, smithy_client_1.expectString)(output["eventType"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["timestamp"]));
    }
    return contents;
};
const deserializeAws_ec2HistoryRecords = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HistoryRecord(entry, context);
    });
};
const deserializeAws_ec2HistoryRecordSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HistoryRecordEntry(entry, context);
    });
};
const deserializeAws_ec2Host = (output, context) => {
    const contents = {
        AutoPlacement: undefined,
        AvailabilityZone: undefined,
        AvailableCapacity: undefined,
        ClientToken: undefined,
        HostId: undefined,
        HostProperties: undefined,
        HostReservationId: undefined,
        Instances: undefined,
        State: undefined,
        AllocationTime: undefined,
        ReleaseTime: undefined,
        Tags: undefined,
        HostRecovery: undefined,
        AllowsMultipleInstanceTypes: undefined,
        OwnerId: undefined,
        AvailabilityZoneId: undefined,
        MemberOfServiceLinkedResourceGroup: undefined,
        OutpostArn: undefined,
    };
    if (output["autoPlacement"] !== undefined) {
        contents.AutoPlacement = (0, smithy_client_1.expectString)(output["autoPlacement"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["availableCapacity"] !== undefined) {
        contents.AvailableCapacity = deserializeAws_ec2AvailableCapacity(output["availableCapacity"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output["hostId"] !== undefined) {
        contents.HostId = (0, smithy_client_1.expectString)(output["hostId"]);
    }
    if (output["hostProperties"] !== undefined) {
        contents.HostProperties = deserializeAws_ec2HostProperties(output["hostProperties"], context);
    }
    if (output["hostReservationId"] !== undefined) {
        contents.HostReservationId = (0, smithy_client_1.expectString)(output["hostReservationId"]);
    }
    if (output.instances === "") {
        contents.Instances = [];
    }
    else if (output["instances"] !== undefined && output["instances"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2HostInstanceList((0, smithy_client_1.getArrayIfSingleItem)(output["instances"]["item"]), context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["allocationTime"] !== undefined) {
        contents.AllocationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["allocationTime"]));
    }
    if (output["releaseTime"] !== undefined) {
        contents.ReleaseTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["releaseTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["hostRecovery"] !== undefined) {
        contents.HostRecovery = (0, smithy_client_1.expectString)(output["hostRecovery"]);
    }
    if (output["allowsMultipleInstanceTypes"] !== undefined) {
        contents.AllowsMultipleInstanceTypes = (0, smithy_client_1.expectString)(output["allowsMultipleInstanceTypes"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = (0, smithy_client_1.expectString)(output["availabilityZoneId"]);
    }
    if (output["memberOfServiceLinkedResourceGroup"] !== undefined) {
        contents.MemberOfServiceLinkedResourceGroup = (0, smithy_client_1.parseBoolean)(output["memberOfServiceLinkedResourceGroup"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    return contents;
};
const deserializeAws_ec2HostInstance = (output, context) => {
    const contents = {
        InstanceId: undefined,
        InstanceType: undefined,
        OwnerId: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    return contents;
};
const deserializeAws_ec2HostInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HostInstance(entry, context);
    });
};
const deserializeAws_ec2HostList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Host(entry, context);
    });
};
const deserializeAws_ec2HostOffering = (output, context) => {
    const contents = {
        CurrencyCode: undefined,
        Duration: undefined,
        HourlyPrice: undefined,
        InstanceFamily: undefined,
        OfferingId: undefined,
        PaymentOption: undefined,
        UpfrontPrice: undefined,
    };
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["currencyCode"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["duration"]);
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = (0, smithy_client_1.expectString)(output["hourlyPrice"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = (0, smithy_client_1.expectString)(output["instanceFamily"]);
    }
    if (output["offeringId"] !== undefined) {
        contents.OfferingId = (0, smithy_client_1.expectString)(output["offeringId"]);
    }
    if (output["paymentOption"] !== undefined) {
        contents.PaymentOption = (0, smithy_client_1.expectString)(output["paymentOption"]);
    }
    if (output["upfrontPrice"] !== undefined) {
        contents.UpfrontPrice = (0, smithy_client_1.expectString)(output["upfrontPrice"]);
    }
    return contents;
};
const deserializeAws_ec2HostOfferingSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HostOffering(entry, context);
    });
};
const deserializeAws_ec2HostProperties = (output, context) => {
    const contents = {
        Cores: undefined,
        InstanceType: undefined,
        InstanceFamily: undefined,
        Sockets: undefined,
        TotalVCpus: undefined,
    };
    if (output["cores"] !== undefined) {
        contents.Cores = (0, smithy_client_1.strictParseInt32)(output["cores"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = (0, smithy_client_1.expectString)(output["instanceFamily"]);
    }
    if (output["sockets"] !== undefined) {
        contents.Sockets = (0, smithy_client_1.strictParseInt32)(output["sockets"]);
    }
    if (output["totalVCpus"] !== undefined) {
        contents.TotalVCpus = (0, smithy_client_1.strictParseInt32)(output["totalVCpus"]);
    }
    return contents;
};
const deserializeAws_ec2HostReservation = (output, context) => {
    const contents = {
        Count: undefined,
        CurrencyCode: undefined,
        Duration: undefined,
        End: undefined,
        HostIdSet: undefined,
        HostReservationId: undefined,
        HourlyPrice: undefined,
        InstanceFamily: undefined,
        OfferingId: undefined,
        PaymentOption: undefined,
        Start: undefined,
        State: undefined,
        UpfrontPrice: undefined,
        Tags: undefined,
    };
    if (output["count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseInt32)(output["count"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["currencyCode"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["duration"]);
    }
    if (output["end"] !== undefined) {
        contents.End = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["end"]));
    }
    if (output.hostIdSet === "") {
        contents.HostIdSet = [];
    }
    else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
        contents.HostIdSet = deserializeAws_ec2ResponseHostIdSet((0, smithy_client_1.getArrayIfSingleItem)(output["hostIdSet"]["item"]), context);
    }
    if (output["hostReservationId"] !== undefined) {
        contents.HostReservationId = (0, smithy_client_1.expectString)(output["hostReservationId"]);
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = (0, smithy_client_1.expectString)(output["hourlyPrice"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = (0, smithy_client_1.expectString)(output["instanceFamily"]);
    }
    if (output["offeringId"] !== undefined) {
        contents.OfferingId = (0, smithy_client_1.expectString)(output["offeringId"]);
    }
    if (output["paymentOption"] !== undefined) {
        contents.PaymentOption = (0, smithy_client_1.expectString)(output["paymentOption"]);
    }
    if (output["start"] !== undefined) {
        contents.Start = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["start"]));
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["upfrontPrice"] !== undefined) {
        contents.UpfrontPrice = (0, smithy_client_1.expectString)(output["upfrontPrice"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2HostReservationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2HostReservation(entry, context);
    });
};
const deserializeAws_ec2IamInstanceProfile = (output, context) => {
    const contents = {
        Arn: undefined,
        Id: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["arn"]);
    }
    if (output["id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["id"]);
    }
    return contents;
};
const deserializeAws_ec2IamInstanceProfileAssociation = (output, context) => {
    const contents = {
        AssociationId: undefined,
        InstanceId: undefined,
        IamInstanceProfile: undefined,
        State: undefined,
        Timestamp: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfile(output["iamInstanceProfile"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["timestamp"]));
    }
    return contents;
};
const deserializeAws_ec2IamInstanceProfileAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IamInstanceProfileAssociation(entry, context);
    });
};
const deserializeAws_ec2IamInstanceProfileSpecification = (output, context) => {
    const contents = {
        Arn: undefined,
        Name: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["arn"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    return contents;
};
const deserializeAws_ec2IcmpTypeCode = (output, context) => {
    const contents = {
        Code: undefined,
        Type: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.strictParseInt32)(output["code"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.strictParseInt32)(output["type"]);
    }
    return contents;
};
const deserializeAws_ec2IdFormat = (output, context) => {
    const contents = {
        Deadline: undefined,
        Resource: undefined,
        UseLongIds: undefined,
    };
    if (output["deadline"] !== undefined) {
        contents.Deadline = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["deadline"]));
    }
    if (output["resource"] !== undefined) {
        contents.Resource = (0, smithy_client_1.expectString)(output["resource"]);
    }
    if (output["useLongIds"] !== undefined) {
        contents.UseLongIds = (0, smithy_client_1.parseBoolean)(output["useLongIds"]);
    }
    return contents;
};
const deserializeAws_ec2IdFormatList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IdFormat(entry, context);
    });
};
const deserializeAws_ec2IKEVersionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IKEVersionsListValue(entry, context);
    });
};
const deserializeAws_ec2IKEVersionsListValue = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2Image = (output, context) => {
    const contents = {
        Architecture: undefined,
        CreationDate: undefined,
        ImageId: undefined,
        ImageLocation: undefined,
        ImageType: undefined,
        Public: undefined,
        KernelId: undefined,
        OwnerId: undefined,
        Platform: undefined,
        PlatformDetails: undefined,
        UsageOperation: undefined,
        ProductCodes: undefined,
        RamdiskId: undefined,
        State: undefined,
        BlockDeviceMappings: undefined,
        Description: undefined,
        EnaSupport: undefined,
        Hypervisor: undefined,
        ImageOwnerAlias: undefined,
        Name: undefined,
        RootDeviceName: undefined,
        RootDeviceType: undefined,
        SriovNetSupport: undefined,
        StateReason: undefined,
        Tags: undefined,
        VirtualizationType: undefined,
        BootMode: undefined,
        TpmSupport: undefined,
        DeprecationTime: undefined,
    };
    if (output["architecture"] !== undefined) {
        contents.Architecture = (0, smithy_client_1.expectString)(output["architecture"]);
    }
    if (output["creationDate"] !== undefined) {
        contents.CreationDate = (0, smithy_client_1.expectString)(output["creationDate"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["imageLocation"] !== undefined) {
        contents.ImageLocation = (0, smithy_client_1.expectString)(output["imageLocation"]);
    }
    if (output["imageType"] !== undefined) {
        contents.ImageType = (0, smithy_client_1.expectString)(output["imageType"]);
    }
    if (output["isPublic"] !== undefined) {
        contents.Public = (0, smithy_client_1.parseBoolean)(output["isPublic"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = (0, smithy_client_1.expectString)(output["kernelId"]);
    }
    if (output["imageOwnerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["imageOwnerId"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    if (output["platformDetails"] !== undefined) {
        contents.PlatformDetails = (0, smithy_client_1.expectString)(output["platformDetails"]);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = (0, smithy_client_1.expectString)(output["usageOperation"]);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList((0, smithy_client_1.getArrayIfSingleItem)(output["productCodes"]["item"]), context);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = (0, smithy_client_1.expectString)(output["ramdiskId"]);
    }
    if (output["imageState"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["imageState"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList((0, smithy_client_1.getArrayIfSingleItem)(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = (0, smithy_client_1.parseBoolean)(output["enaSupport"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = (0, smithy_client_1.expectString)(output["hypervisor"]);
    }
    if (output["imageOwnerAlias"] !== undefined) {
        contents.ImageOwnerAlias = (0, smithy_client_1.expectString)(output["imageOwnerAlias"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["rootDeviceName"] !== undefined) {
        contents.RootDeviceName = (0, smithy_client_1.expectString)(output["rootDeviceName"]);
    }
    if (output["rootDeviceType"] !== undefined) {
        contents.RootDeviceType = (0, smithy_client_1.expectString)(output["rootDeviceType"]);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = (0, smithy_client_1.expectString)(output["sriovNetSupport"]);
    }
    if (output["stateReason"] !== undefined) {
        contents.StateReason = deserializeAws_ec2StateReason(output["stateReason"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["virtualizationType"] !== undefined) {
        contents.VirtualizationType = (0, smithy_client_1.expectString)(output["virtualizationType"]);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = (0, smithy_client_1.expectString)(output["bootMode"]);
    }
    if (output["tpmSupport"] !== undefined) {
        contents.TpmSupport = (0, smithy_client_1.expectString)(output["tpmSupport"]);
    }
    if (output["deprecationTime"] !== undefined) {
        contents.DeprecationTime = (0, smithy_client_1.expectString)(output["deprecationTime"]);
    }
    return contents;
};
const deserializeAws_ec2ImageAttribute = (output, context) => {
    const contents = {
        BlockDeviceMappings: undefined,
        ImageId: undefined,
        LaunchPermissions: undefined,
        ProductCodes: undefined,
        Description: undefined,
        KernelId: undefined,
        RamdiskId: undefined,
        SriovNetSupport: undefined,
        BootMode: undefined,
        TpmSupport: undefined,
        UefiData: undefined,
        LastLaunchedTime: undefined,
    };
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList((0, smithy_client_1.getArrayIfSingleItem)(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output.launchPermission === "") {
        contents.LaunchPermissions = [];
    }
    else if (output["launchPermission"] !== undefined && output["launchPermission"]["item"] !== undefined) {
        contents.LaunchPermissions = deserializeAws_ec2LaunchPermissionList((0, smithy_client_1.getArrayIfSingleItem)(output["launchPermission"]["item"]), context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList((0, smithy_client_1.getArrayIfSingleItem)(output["productCodes"]["item"]), context);
    }
    if (output["description"] !== undefined) {
        contents.Description = deserializeAws_ec2AttributeValue(output["description"], context);
    }
    if (output["kernel"] !== undefined) {
        contents.KernelId = deserializeAws_ec2AttributeValue(output["kernel"], context);
    }
    if (output["ramdisk"] !== undefined) {
        contents.RamdiskId = deserializeAws_ec2AttributeValue(output["ramdisk"], context);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = deserializeAws_ec2AttributeValue(output["sriovNetSupport"], context);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = deserializeAws_ec2AttributeValue(output["bootMode"], context);
    }
    if (output["tpmSupport"] !== undefined) {
        contents.TpmSupport = deserializeAws_ec2AttributeValue(output["tpmSupport"], context);
    }
    if (output["uefiData"] !== undefined) {
        contents.UefiData = deserializeAws_ec2AttributeValue(output["uefiData"], context);
    }
    if (output["lastLaunchedTime"] !== undefined) {
        contents.LastLaunchedTime = deserializeAws_ec2AttributeValue(output["lastLaunchedTime"], context);
    }
    return contents;
};
const deserializeAws_ec2ImageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Image(entry, context);
    });
};
const deserializeAws_ec2ImageRecycleBinInfo = (output, context) => {
    const contents = {
        ImageId: undefined,
        Name: undefined,
        Description: undefined,
        RecycleBinEnterTime: undefined,
        RecycleBinExitTime: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["recycleBinEnterTime"] !== undefined) {
        contents.RecycleBinEnterTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["recycleBinEnterTime"]));
    }
    if (output["recycleBinExitTime"] !== undefined) {
        contents.RecycleBinExitTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["recycleBinExitTime"]));
    }
    return contents;
};
const deserializeAws_ec2ImageRecycleBinInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImageRecycleBinInfo(entry, context);
    });
};
const deserializeAws_ec2ImportClientVpnClientCertificateRevocationListResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ImportImageLicenseConfigurationResponse = (output, context) => {
    const contents = {
        LicenseConfigurationArn: undefined,
    };
    if (output["licenseConfigurationArn"] !== undefined) {
        contents.LicenseConfigurationArn = (0, smithy_client_1.expectString)(output["licenseConfigurationArn"]);
    }
    return contents;
};
const deserializeAws_ec2ImportImageLicenseSpecificationListResponse = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImportImageLicenseConfigurationResponse(entry, context);
    });
};
const deserializeAws_ec2ImportImageResult = (output, context) => {
    const contents = {
        Architecture: undefined,
        Description: undefined,
        Encrypted: undefined,
        Hypervisor: undefined,
        ImageId: undefined,
        ImportTaskId: undefined,
        KmsKeyId: undefined,
        LicenseType: undefined,
        Platform: undefined,
        Progress: undefined,
        SnapshotDetails: undefined,
        Status: undefined,
        StatusMessage: undefined,
        LicenseSpecifications: undefined,
        Tags: undefined,
        UsageOperation: undefined,
    };
    if (output["architecture"] !== undefined) {
        contents.Architecture = (0, smithy_client_1.expectString)(output["architecture"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["encrypted"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = (0, smithy_client_1.expectString)(output["hypervisor"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = (0, smithy_client_1.expectString)(output["importTaskId"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["kmsKeyId"]);
    }
    if (output["licenseType"] !== undefined) {
        contents.LicenseType = (0, smithy_client_1.expectString)(output["licenseType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output.snapshotDetailSet === "") {
        contents.SnapshotDetails = [];
    }
    else if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
        contents.SnapshotDetails = deserializeAws_ec2SnapshotDetailList((0, smithy_client_1.getArrayIfSingleItem)(output["snapshotDetailSet"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output.licenseSpecifications === "") {
        contents.LicenseSpecifications = [];
    }
    else if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
        contents.LicenseSpecifications = deserializeAws_ec2ImportImageLicenseSpecificationListResponse((0, smithy_client_1.getArrayIfSingleItem)(output["licenseSpecifications"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = (0, smithy_client_1.expectString)(output["usageOperation"]);
    }
    return contents;
};
const deserializeAws_ec2ImportImageTask = (output, context) => {
    const contents = {
        Architecture: undefined,
        Description: undefined,
        Encrypted: undefined,
        Hypervisor: undefined,
        ImageId: undefined,
        ImportTaskId: undefined,
        KmsKeyId: undefined,
        LicenseType: undefined,
        Platform: undefined,
        Progress: undefined,
        SnapshotDetails: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Tags: undefined,
        LicenseSpecifications: undefined,
        UsageOperation: undefined,
        BootMode: undefined,
    };
    if (output["architecture"] !== undefined) {
        contents.Architecture = (0, smithy_client_1.expectString)(output["architecture"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["encrypted"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = (0, smithy_client_1.expectString)(output["hypervisor"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = (0, smithy_client_1.expectString)(output["importTaskId"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["kmsKeyId"]);
    }
    if (output["licenseType"] !== undefined) {
        contents.LicenseType = (0, smithy_client_1.expectString)(output["licenseType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output.snapshotDetailSet === "") {
        contents.SnapshotDetails = [];
    }
    else if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
        contents.SnapshotDetails = deserializeAws_ec2SnapshotDetailList((0, smithy_client_1.getArrayIfSingleItem)(output["snapshotDetailSet"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output.licenseSpecifications === "") {
        contents.LicenseSpecifications = [];
    }
    else if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
        contents.LicenseSpecifications = deserializeAws_ec2ImportImageLicenseSpecificationListResponse((0, smithy_client_1.getArrayIfSingleItem)(output["licenseSpecifications"]["item"]), context);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = (0, smithy_client_1.expectString)(output["usageOperation"]);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = (0, smithy_client_1.expectString)(output["bootMode"]);
    }
    return contents;
};
const deserializeAws_ec2ImportImageTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImportImageTask(entry, context);
    });
};
const deserializeAws_ec2ImportInstanceResult = (output, context) => {
    const contents = {
        ConversionTask: undefined,
    };
    if (output["conversionTask"] !== undefined) {
        contents.ConversionTask = deserializeAws_ec2ConversionTask(output["conversionTask"], context);
    }
    return contents;
};
const deserializeAws_ec2ImportInstanceTaskDetails = (output, context) => {
    const contents = {
        Description: undefined,
        InstanceId: undefined,
        Platform: undefined,
        Volumes: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    if (output.volumes === "") {
        contents.Volumes = [];
    }
    else if (output["volumes"] !== undefined && output["volumes"]["item"] !== undefined) {
        contents.Volumes = deserializeAws_ec2ImportInstanceVolumeDetailSet((0, smithy_client_1.getArrayIfSingleItem)(output["volumes"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ImportInstanceVolumeDetailItem = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        BytesConverted: undefined,
        Description: undefined,
        Image: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Volume: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["bytesConverted"] !== undefined) {
        contents.BytesConverted = (0, smithy_client_1.strictParseLong)(output["bytesConverted"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["image"] !== undefined) {
        contents.Image = deserializeAws_ec2DiskImageDescription(output["image"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["volume"] !== undefined) {
        contents.Volume = deserializeAws_ec2DiskImageVolumeDescription(output["volume"], context);
    }
    return contents;
};
const deserializeAws_ec2ImportInstanceVolumeDetailSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImportInstanceVolumeDetailItem(entry, context);
    });
};
const deserializeAws_ec2ImportKeyPairResult = (output, context) => {
    const contents = {
        KeyFingerprint: undefined,
        KeyName: undefined,
        KeyPairId: undefined,
        Tags: undefined,
    };
    if (output["keyFingerprint"] !== undefined) {
        contents.KeyFingerprint = (0, smithy_client_1.expectString)(output["keyFingerprint"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = (0, smithy_client_1.expectString)(output["keyName"]);
    }
    if (output["keyPairId"] !== undefined) {
        contents.KeyPairId = (0, smithy_client_1.expectString)(output["keyPairId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ImportSnapshotResult = (output, context) => {
    const contents = {
        Description: undefined,
        ImportTaskId: undefined,
        SnapshotTaskDetail: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = (0, smithy_client_1.expectString)(output["importTaskId"]);
    }
    if (output["snapshotTaskDetail"] !== undefined) {
        contents.SnapshotTaskDetail = deserializeAws_ec2SnapshotTaskDetail(output["snapshotTaskDetail"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ImportSnapshotTask = (output, context) => {
    const contents = {
        Description: undefined,
        ImportTaskId: undefined,
        SnapshotTaskDetail: undefined,
        Tags: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["importTaskId"] !== undefined) {
        contents.ImportTaskId = (0, smithy_client_1.expectString)(output["importTaskId"]);
    }
    if (output["snapshotTaskDetail"] !== undefined) {
        contents.SnapshotTaskDetail = deserializeAws_ec2SnapshotTaskDetail(output["snapshotTaskDetail"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ImportSnapshotTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ImportSnapshotTask(entry, context);
    });
};
const deserializeAws_ec2ImportVolumeResult = (output, context) => {
    const contents = {
        ConversionTask: undefined,
    };
    if (output["conversionTask"] !== undefined) {
        contents.ConversionTask = deserializeAws_ec2ConversionTask(output["conversionTask"], context);
    }
    return contents;
};
const deserializeAws_ec2ImportVolumeTaskDetails = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        BytesConverted: undefined,
        Description: undefined,
        Image: undefined,
        Volume: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["bytesConverted"] !== undefined) {
        contents.BytesConverted = (0, smithy_client_1.strictParseLong)(output["bytesConverted"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["image"] !== undefined) {
        contents.Image = deserializeAws_ec2DiskImageDescription(output["image"], context);
    }
    if (output["volume"] !== undefined) {
        contents.Volume = deserializeAws_ec2DiskImageVolumeDescription(output["volume"], context);
    }
    return contents;
};
const deserializeAws_ec2InferenceAcceleratorInfo = (output, context) => {
    const contents = {
        Accelerators: undefined,
    };
    if (output.accelerators === "") {
        contents.Accelerators = [];
    }
    else if (output["accelerators"] !== undefined && output["accelerators"]["member"] !== undefined) {
        contents.Accelerators = deserializeAws_ec2InferenceDeviceInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["accelerators"]["member"]), context);
    }
    return contents;
};
const deserializeAws_ec2InferenceDeviceInfo = (output, context) => {
    const contents = {
        Count: undefined,
        Name: undefined,
        Manufacturer: undefined,
    };
    if (output["count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseInt32)(output["count"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["manufacturer"] !== undefined) {
        contents.Manufacturer = (0, smithy_client_1.expectString)(output["manufacturer"]);
    }
    return contents;
};
const deserializeAws_ec2InferenceDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InferenceDeviceInfo(entry, context);
    });
};
const deserializeAws_ec2InsideCidrBlocksStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2Instance = (output, context) => {
    const contents = {
        AmiLaunchIndex: undefined,
        ImageId: undefined,
        InstanceId: undefined,
        InstanceType: undefined,
        KernelId: undefined,
        KeyName: undefined,
        LaunchTime: undefined,
        Monitoring: undefined,
        Placement: undefined,
        Platform: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
        ProductCodes: undefined,
        PublicDnsName: undefined,
        PublicIpAddress: undefined,
        RamdiskId: undefined,
        State: undefined,
        StateTransitionReason: undefined,
        SubnetId: undefined,
        VpcId: undefined,
        Architecture: undefined,
        BlockDeviceMappings: undefined,
        ClientToken: undefined,
        EbsOptimized: undefined,
        EnaSupport: undefined,
        Hypervisor: undefined,
        IamInstanceProfile: undefined,
        InstanceLifecycle: undefined,
        ElasticGpuAssociations: undefined,
        ElasticInferenceAcceleratorAssociations: undefined,
        NetworkInterfaces: undefined,
        OutpostArn: undefined,
        RootDeviceName: undefined,
        RootDeviceType: undefined,
        SecurityGroups: undefined,
        SourceDestCheck: undefined,
        SpotInstanceRequestId: undefined,
        SriovNetSupport: undefined,
        StateReason: undefined,
        Tags: undefined,
        VirtualizationType: undefined,
        CpuOptions: undefined,
        CapacityReservationId: undefined,
        CapacityReservationSpecification: undefined,
        HibernationOptions: undefined,
        Licenses: undefined,
        MetadataOptions: undefined,
        EnclaveOptions: undefined,
        BootMode: undefined,
        PlatformDetails: undefined,
        UsageOperation: undefined,
        UsageOperationUpdateTime: undefined,
        PrivateDnsNameOptions: undefined,
        Ipv6Address: undefined,
        TpmSupport: undefined,
        MaintenanceOptions: undefined,
    };
    if (output["amiLaunchIndex"] !== undefined) {
        contents.AmiLaunchIndex = (0, smithy_client_1.strictParseInt32)(output["amiLaunchIndex"]);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = (0, smithy_client_1.expectString)(output["kernelId"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = (0, smithy_client_1.expectString)(output["keyName"]);
    }
    if (output["launchTime"] !== undefined) {
        contents.LaunchTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["launchTime"]));
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2Monitoring(output["monitoring"], context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2Placement(output["placement"], context);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = (0, smithy_client_1.expectString)(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList((0, smithy_client_1.getArrayIfSingleItem)(output["productCodes"]["item"]), context);
    }
    if (output["dnsName"] !== undefined) {
        contents.PublicDnsName = (0, smithy_client_1.expectString)(output["dnsName"]);
    }
    if (output["ipAddress"] !== undefined) {
        contents.PublicIpAddress = (0, smithy_client_1.expectString)(output["ipAddress"]);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = (0, smithy_client_1.expectString)(output["ramdiskId"]);
    }
    if (output["instanceState"] !== undefined) {
        contents.State = deserializeAws_ec2InstanceState(output["instanceState"], context);
    }
    if (output["reason"] !== undefined) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(output["reason"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["architecture"] !== undefined) {
        contents.Architecture = (0, smithy_client_1.expectString)(output["architecture"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2InstanceBlockDeviceMappingList((0, smithy_client_1.getArrayIfSingleItem)(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = (0, smithy_client_1.parseBoolean)(output["ebsOptimized"]);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = (0, smithy_client_1.parseBoolean)(output["enaSupport"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = (0, smithy_client_1.expectString)(output["hypervisor"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfile(output["iamInstanceProfile"], context);
    }
    if (output["instanceLifecycle"] !== undefined) {
        contents.InstanceLifecycle = (0, smithy_client_1.expectString)(output["instanceLifecycle"]);
    }
    if (output.elasticGpuAssociationSet === "") {
        contents.ElasticGpuAssociations = [];
    }
    else if (output["elasticGpuAssociationSet"] !== undefined &&
        output["elasticGpuAssociationSet"]["item"] !== undefined) {
        contents.ElasticGpuAssociations = deserializeAws_ec2ElasticGpuAssociationList((0, smithy_client_1.getArrayIfSingleItem)(output["elasticGpuAssociationSet"]["item"]), context);
    }
    if (output.elasticInferenceAcceleratorAssociationSet === "") {
        contents.ElasticInferenceAcceleratorAssociations = [];
    }
    else if (output["elasticInferenceAcceleratorAssociationSet"] !== undefined &&
        output["elasticInferenceAcceleratorAssociationSet"]["item"] !== undefined) {
        contents.ElasticInferenceAcceleratorAssociations = deserializeAws_ec2ElasticInferenceAcceleratorAssociationList((0, smithy_client_1.getArrayIfSingleItem)(output["elasticInferenceAcceleratorAssociationSet"]["item"]), context);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2InstanceNetworkInterfaceList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output["rootDeviceName"] !== undefined) {
        contents.RootDeviceName = (0, smithy_client_1.expectString)(output["rootDeviceName"]);
    }
    if (output["rootDeviceType"] !== undefined) {
        contents.RootDeviceType = (0, smithy_client_1.expectString)(output["rootDeviceType"]);
    }
    if (output.groupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2GroupIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = (0, smithy_client_1.parseBoolean)(output["sourceDestCheck"]);
    }
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = (0, smithy_client_1.expectString)(output["spotInstanceRequestId"]);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = (0, smithy_client_1.expectString)(output["sriovNetSupport"]);
    }
    if (output["stateReason"] !== undefined) {
        contents.StateReason = deserializeAws_ec2StateReason(output["stateReason"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["virtualizationType"] !== undefined) {
        contents.VirtualizationType = (0, smithy_client_1.expectString)(output["virtualizationType"]);
    }
    if (output["cpuOptions"] !== undefined) {
        contents.CpuOptions = deserializeAws_ec2CpuOptions(output["cpuOptions"], context);
    }
    if (output["capacityReservationId"] !== undefined) {
        contents.CapacityReservationId = (0, smithy_client_1.expectString)(output["capacityReservationId"]);
    }
    if (output["capacityReservationSpecification"] !== undefined) {
        contents.CapacityReservationSpecification = deserializeAws_ec2CapacityReservationSpecificationResponse(output["capacityReservationSpecification"], context);
    }
    if (output["hibernationOptions"] !== undefined) {
        contents.HibernationOptions = deserializeAws_ec2HibernationOptions(output["hibernationOptions"], context);
    }
    if (output.licenseSet === "") {
        contents.Licenses = [];
    }
    else if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
        contents.Licenses = deserializeAws_ec2LicenseList((0, smithy_client_1.getArrayIfSingleItem)(output["licenseSet"]["item"]), context);
    }
    if (output["metadataOptions"] !== undefined) {
        contents.MetadataOptions = deserializeAws_ec2InstanceMetadataOptionsResponse(output["metadataOptions"], context);
    }
    if (output["enclaveOptions"] !== undefined) {
        contents.EnclaveOptions = deserializeAws_ec2EnclaveOptions(output["enclaveOptions"], context);
    }
    if (output["bootMode"] !== undefined) {
        contents.BootMode = (0, smithy_client_1.expectString)(output["bootMode"]);
    }
    if (output["platformDetails"] !== undefined) {
        contents.PlatformDetails = (0, smithy_client_1.expectString)(output["platformDetails"]);
    }
    if (output["usageOperation"] !== undefined) {
        contents.UsageOperation = (0, smithy_client_1.expectString)(output["usageOperation"]);
    }
    if (output["usageOperationUpdateTime"] !== undefined) {
        contents.UsageOperationUpdateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["usageOperationUpdateTime"]));
    }
    if (output["privateDnsNameOptions"] !== undefined) {
        contents.PrivateDnsNameOptions = deserializeAws_ec2PrivateDnsNameOptionsResponse(output["privateDnsNameOptions"], context);
    }
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = (0, smithy_client_1.expectString)(output["ipv6Address"]);
    }
    if (output["tpmSupport"] !== undefined) {
        contents.TpmSupport = (0, smithy_client_1.expectString)(output["tpmSupport"]);
    }
    if (output["maintenanceOptions"] !== undefined) {
        contents.MaintenanceOptions = deserializeAws_ec2InstanceMaintenanceOptions(output["maintenanceOptions"], context);
    }
    return contents;
};
const deserializeAws_ec2InstanceAttribute = (output, context) => {
    const contents = {
        Groups: undefined,
        BlockDeviceMappings: undefined,
        DisableApiTermination: undefined,
        EnaSupport: undefined,
        EnclaveOptions: undefined,
        EbsOptimized: undefined,
        InstanceId: undefined,
        InstanceInitiatedShutdownBehavior: undefined,
        InstanceType: undefined,
        KernelId: undefined,
        ProductCodes: undefined,
        RamdiskId: undefined,
        RootDeviceName: undefined,
        SourceDestCheck: undefined,
        SriovNetSupport: undefined,
        UserData: undefined,
        DisableApiStop: undefined,
    };
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2InstanceBlockDeviceMappingList((0, smithy_client_1.getArrayIfSingleItem)(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["disableApiTermination"] !== undefined) {
        contents.DisableApiTermination = deserializeAws_ec2AttributeBooleanValue(output["disableApiTermination"], context);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = deserializeAws_ec2AttributeBooleanValue(output["enaSupport"], context);
    }
    if (output["enclaveOptions"] !== undefined) {
        contents.EnclaveOptions = deserializeAws_ec2EnclaveOptions(output["enclaveOptions"], context);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = deserializeAws_ec2AttributeBooleanValue(output["ebsOptimized"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
        contents.InstanceInitiatedShutdownBehavior = deserializeAws_ec2AttributeValue(output["instanceInitiatedShutdownBehavior"], context);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = deserializeAws_ec2AttributeValue(output["instanceType"], context);
    }
    if (output["kernel"] !== undefined) {
        contents.KernelId = deserializeAws_ec2AttributeValue(output["kernel"], context);
    }
    if (output.productCodes === "") {
        contents.ProductCodes = [];
    }
    else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
        contents.ProductCodes = deserializeAws_ec2ProductCodeList((0, smithy_client_1.getArrayIfSingleItem)(output["productCodes"]["item"]), context);
    }
    if (output["ramdisk"] !== undefined) {
        contents.RamdiskId = deserializeAws_ec2AttributeValue(output["ramdisk"], context);
    }
    if (output["rootDeviceName"] !== undefined) {
        contents.RootDeviceName = deserializeAws_ec2AttributeValue(output["rootDeviceName"], context);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = deserializeAws_ec2AttributeBooleanValue(output["sourceDestCheck"], context);
    }
    if (output["sriovNetSupport"] !== undefined) {
        contents.SriovNetSupport = deserializeAws_ec2AttributeValue(output["sriovNetSupport"], context);
    }
    if (output["userData"] !== undefined) {
        contents.UserData = deserializeAws_ec2AttributeValue(output["userData"], context);
    }
    if (output["disableApiStop"] !== undefined) {
        contents.DisableApiStop = deserializeAws_ec2AttributeBooleanValue(output["disableApiStop"], context);
    }
    return contents;
};
const deserializeAws_ec2InstanceBlockDeviceMapping = (output, context) => {
    const contents = {
        DeviceName: undefined,
        Ebs: undefined,
    };
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = (0, smithy_client_1.expectString)(output["deviceName"]);
    }
    if (output["ebs"] !== undefined) {
        contents.Ebs = deserializeAws_ec2EbsInstanceBlockDevice(output["ebs"], context);
    }
    return contents;
};
const deserializeAws_ec2InstanceBlockDeviceMappingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceBlockDeviceMapping(entry, context);
    });
};
const deserializeAws_ec2InstanceCapacity = (output, context) => {
    const contents = {
        AvailableCapacity: undefined,
        InstanceType: undefined,
        TotalCapacity: undefined,
    };
    if (output["availableCapacity"] !== undefined) {
        contents.AvailableCapacity = (0, smithy_client_1.strictParseInt32)(output["availableCapacity"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["totalCapacity"] !== undefined) {
        contents.TotalCapacity = (0, smithy_client_1.strictParseInt32)(output["totalCapacity"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceCount = (output, context) => {
    const contents = {
        InstanceCount: undefined,
        State: undefined,
    };
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = (0, smithy_client_1.strictParseInt32)(output["instanceCount"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceCountList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceCount(entry, context);
    });
};
const deserializeAws_ec2InstanceCreditSpecification = (output, context) => {
    const contents = {
        InstanceId: undefined,
        CpuCredits: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["cpuCredits"] !== undefined) {
        contents.CpuCredits = (0, smithy_client_1.expectString)(output["cpuCredits"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceCreditSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceCreditSpecification(entry, context);
    });
};
const deserializeAws_ec2InstanceEventWindow = (output, context) => {
    const contents = {
        InstanceEventWindowId: undefined,
        TimeRanges: undefined,
        Name: undefined,
        CronExpression: undefined,
        AssociationTarget: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["instanceEventWindowId"] !== undefined) {
        contents.InstanceEventWindowId = (0, smithy_client_1.expectString)(output["instanceEventWindowId"]);
    }
    if (output.timeRangeSet === "") {
        contents.TimeRanges = [];
    }
    else if (output["timeRangeSet"] !== undefined && output["timeRangeSet"]["item"] !== undefined) {
        contents.TimeRanges = deserializeAws_ec2InstanceEventWindowTimeRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["timeRangeSet"]["item"]), context);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["cronExpression"] !== undefined) {
        contents.CronExpression = (0, smithy_client_1.expectString)(output["cronExpression"]);
    }
    if (output["associationTarget"] !== undefined) {
        contents.AssociationTarget = deserializeAws_ec2InstanceEventWindowAssociationTarget(output["associationTarget"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2InstanceEventWindowAssociationTarget = (output, context) => {
    const contents = {
        InstanceIds: undefined,
        Tags: undefined,
        DedicatedHostIds: undefined,
    };
    if (output.instanceIdSet === "") {
        contents.InstanceIds = [];
    }
    else if (output["instanceIdSet"] !== undefined && output["instanceIdSet"]["item"] !== undefined) {
        contents.InstanceIds = deserializeAws_ec2InstanceIdList((0, smithy_client_1.getArrayIfSingleItem)(output["instanceIdSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output.dedicatedHostIdSet === "") {
        contents.DedicatedHostIds = [];
    }
    else if (output["dedicatedHostIdSet"] !== undefined && output["dedicatedHostIdSet"]["item"] !== undefined) {
        contents.DedicatedHostIds = deserializeAws_ec2DedicatedHostIdList((0, smithy_client_1.getArrayIfSingleItem)(output["dedicatedHostIdSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2InstanceEventWindowSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceEventWindow(entry, context);
    });
};
const deserializeAws_ec2InstanceEventWindowStateChange = (output, context) => {
    const contents = {
        InstanceEventWindowId: undefined,
        State: undefined,
    };
    if (output["instanceEventWindowId"] !== undefined) {
        contents.InstanceEventWindowId = (0, smithy_client_1.expectString)(output["instanceEventWindowId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceEventWindowTimeRange = (output, context) => {
    const contents = {
        StartWeekDay: undefined,
        StartHour: undefined,
        EndWeekDay: undefined,
        EndHour: undefined,
    };
    if (output["startWeekDay"] !== undefined) {
        contents.StartWeekDay = (0, smithy_client_1.expectString)(output["startWeekDay"]);
    }
    if (output["startHour"] !== undefined) {
        contents.StartHour = (0, smithy_client_1.strictParseInt32)(output["startHour"]);
    }
    if (output["endWeekDay"] !== undefined) {
        contents.EndWeekDay = (0, smithy_client_1.expectString)(output["endWeekDay"]);
    }
    if (output["endHour"] !== undefined) {
        contents.EndHour = (0, smithy_client_1.strictParseInt32)(output["endHour"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceEventWindowTimeRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceEventWindowTimeRange(entry, context);
    });
};
const deserializeAws_ec2InstanceExportDetails = (output, context) => {
    const contents = {
        InstanceId: undefined,
        TargetEnvironment: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["targetEnvironment"] !== undefined) {
        contents.TargetEnvironment = (0, smithy_client_1.expectString)(output["targetEnvironment"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceFamilyCreditSpecification = (output, context) => {
    const contents = {
        InstanceFamily: undefined,
        CpuCredits: undefined,
    };
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = (0, smithy_client_1.expectString)(output["instanceFamily"]);
    }
    if (output["cpuCredits"] !== undefined) {
        contents.CpuCredits = (0, smithy_client_1.expectString)(output["cpuCredits"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceGenerationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2InstanceIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2InstanceIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2InstanceIdsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2InstanceIpv4Prefix = (output, context) => {
    const contents = {
        Ipv4Prefix: undefined,
    };
    if (output["ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = (0, smithy_client_1.expectString)(output["ipv4Prefix"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceIpv4PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceIpv4Prefix(entry, context);
    });
};
const deserializeAws_ec2InstanceIpv6Address = (output, context) => {
    const contents = {
        Ipv6Address: undefined,
    };
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = (0, smithy_client_1.expectString)(output["ipv6Address"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceIpv6AddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceIpv6Address(entry, context);
    });
};
const deserializeAws_ec2InstanceIpv6Prefix = (output, context) => {
    const contents = {
        Ipv6Prefix: undefined,
    };
    if (output["ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = (0, smithy_client_1.expectString)(output["ipv6Prefix"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceIpv6PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceIpv6Prefix(entry, context);
    });
};
const deserializeAws_ec2InstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Instance(entry, context);
    });
};
const deserializeAws_ec2InstanceMaintenanceOptions = (output, context) => {
    const contents = {
        AutoRecovery: undefined,
    };
    if (output["autoRecovery"] !== undefined) {
        contents.AutoRecovery = (0, smithy_client_1.expectString)(output["autoRecovery"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceMetadataOptionsResponse = (output, context) => {
    const contents = {
        State: undefined,
        HttpTokens: undefined,
        HttpPutResponseHopLimit: undefined,
        HttpEndpoint: undefined,
        HttpProtocolIpv6: undefined,
        InstanceMetadataTags: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["httpTokens"] !== undefined) {
        contents.HttpTokens = (0, smithy_client_1.expectString)(output["httpTokens"]);
    }
    if (output["httpPutResponseHopLimit"] !== undefined) {
        contents.HttpPutResponseHopLimit = (0, smithy_client_1.strictParseInt32)(output["httpPutResponseHopLimit"]);
    }
    if (output["httpEndpoint"] !== undefined) {
        contents.HttpEndpoint = (0, smithy_client_1.expectString)(output["httpEndpoint"]);
    }
    if (output["httpProtocolIpv6"] !== undefined) {
        contents.HttpProtocolIpv6 = (0, smithy_client_1.expectString)(output["httpProtocolIpv6"]);
    }
    if (output["instanceMetadataTags"] !== undefined) {
        contents.InstanceMetadataTags = (0, smithy_client_1.expectString)(output["instanceMetadataTags"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceMonitoring = (output, context) => {
    const contents = {
        InstanceId: undefined,
        Monitoring: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2Monitoring(output["monitoring"], context);
    }
    return contents;
};
const deserializeAws_ec2InstanceMonitoringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceMonitoring(entry, context);
    });
};
const deserializeAws_ec2InstanceNetworkInterface = (output, context) => {
    const contents = {
        Association: undefined,
        Attachment: undefined,
        Description: undefined,
        Groups: undefined,
        Ipv6Addresses: undefined,
        MacAddress: undefined,
        NetworkInterfaceId: undefined,
        OwnerId: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
        PrivateIpAddresses: undefined,
        SourceDestCheck: undefined,
        Status: undefined,
        SubnetId: undefined,
        VpcId: undefined,
        InterfaceType: undefined,
        Ipv4Prefixes: undefined,
        Ipv6Prefixes: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2InstanceNetworkInterfaceAssociation(output["association"], context);
    }
    if (output["attachment"] !== undefined) {
        contents.Attachment = deserializeAws_ec2InstanceNetworkInterfaceAttachment(output["attachment"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = deserializeAws_ec2InstanceIpv6AddressList((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["macAddress"] !== undefined) {
        contents.MacAddress = (0, smithy_client_1.expectString)(output["macAddress"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = (0, smithy_client_1.expectString)(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = deserializeAws_ec2InstancePrivateIpAddressList((0, smithy_client_1.getArrayIfSingleItem)(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = (0, smithy_client_1.parseBoolean)(output["sourceDestCheck"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["interfaceType"] !== undefined) {
        contents.InterfaceType = (0, smithy_client_1.expectString)(output["interfaceType"]);
    }
    if (output.ipv4PrefixSet === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
        contents.Ipv4Prefixes = deserializeAws_ec2InstanceIpv4PrefixList((0, smithy_client_1.getArrayIfSingleItem)(output["ipv4PrefixSet"]["item"]), context);
    }
    if (output.ipv6PrefixSet === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
        contents.Ipv6Prefixes = deserializeAws_ec2InstanceIpv6PrefixList((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6PrefixSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2InstanceNetworkInterfaceAssociation = (output, context) => {
    const contents = {
        CarrierIp: undefined,
        CustomerOwnedIp: undefined,
        IpOwnerId: undefined,
        PublicDnsName: undefined,
        PublicIp: undefined,
    };
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = (0, smithy_client_1.expectString)(output["carrierIp"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = (0, smithy_client_1.expectString)(output["customerOwnedIp"]);
    }
    if (output["ipOwnerId"] !== undefined) {
        contents.IpOwnerId = (0, smithy_client_1.expectString)(output["ipOwnerId"]);
    }
    if (output["publicDnsName"] !== undefined) {
        contents.PublicDnsName = (0, smithy_client_1.expectString)(output["publicDnsName"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = (0, smithy_client_1.expectString)(output["publicIp"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceNetworkInterfaceAttachment = (output, context) => {
    const contents = {
        AttachTime: undefined,
        AttachmentId: undefined,
        DeleteOnTermination: undefined,
        DeviceIndex: undefined,
        Status: undefined,
        NetworkCardIndex: undefined,
    };
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["attachTime"]));
    }
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = (0, smithy_client_1.expectString)(output["attachmentId"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = (0, smithy_client_1.parseBoolean)(output["deleteOnTermination"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = (0, smithy_client_1.strictParseInt32)(output["deviceIndex"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = (0, smithy_client_1.strictParseInt32)(output["networkCardIndex"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceNetworkInterfaceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceNetworkInterface(entry, context);
    });
};
const deserializeAws_ec2InstanceNetworkInterfaceSpecification = (output, context) => {
    const contents = {
        AssociatePublicIpAddress: undefined,
        DeleteOnTermination: undefined,
        Description: undefined,
        DeviceIndex: undefined,
        Groups: undefined,
        Ipv6AddressCount: undefined,
        Ipv6Addresses: undefined,
        NetworkInterfaceId: undefined,
        PrivateIpAddress: undefined,
        PrivateIpAddresses: undefined,
        SecondaryPrivateIpAddressCount: undefined,
        SubnetId: undefined,
        AssociateCarrierIpAddress: undefined,
        InterfaceType: undefined,
        NetworkCardIndex: undefined,
        Ipv4Prefixes: undefined,
        Ipv4PrefixCount: undefined,
        Ipv6Prefixes: undefined,
        Ipv6PrefixCount: undefined,
    };
    if (output["associatePublicIpAddress"] !== undefined) {
        contents.AssociatePublicIpAddress = (0, smithy_client_1.parseBoolean)(output["associatePublicIpAddress"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = (0, smithy_client_1.parseBoolean)(output["deleteOnTermination"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = (0, smithy_client_1.strictParseInt32)(output["deviceIndex"]);
    }
    if (output.SecurityGroupId === "") {
        contents.Groups = [];
    }
    else if (output["SecurityGroupId"] !== undefined && output["SecurityGroupId"]["SecurityGroupId"] !== undefined) {
        contents.Groups = deserializeAws_ec2SecurityGroupIdStringList((0, smithy_client_1.getArrayIfSingleItem)(output["SecurityGroupId"]["SecurityGroupId"]), context);
    }
    if (output["ipv6AddressCount"] !== undefined) {
        contents.Ipv6AddressCount = (0, smithy_client_1.strictParseInt32)(output["ipv6AddressCount"]);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = deserializeAws_ec2InstanceIpv6AddressList((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = deserializeAws_ec2PrivateIpAddressSpecificationList((0, smithy_client_1.getArrayIfSingleItem)(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output["secondaryPrivateIpAddressCount"] !== undefined) {
        contents.SecondaryPrivateIpAddressCount = (0, smithy_client_1.strictParseInt32)(output["secondaryPrivateIpAddressCount"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["AssociateCarrierIpAddress"] !== undefined) {
        contents.AssociateCarrierIpAddress = (0, smithy_client_1.parseBoolean)(output["AssociateCarrierIpAddress"]);
    }
    if (output["InterfaceType"] !== undefined) {
        contents.InterfaceType = (0, smithy_client_1.expectString)(output["InterfaceType"]);
    }
    if (output["NetworkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = (0, smithy_client_1.strictParseInt32)(output["NetworkCardIndex"]);
    }
    if (output.Ipv4Prefix === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["Ipv4Prefix"] !== undefined && output["Ipv4Prefix"]["item"] !== undefined) {
        contents.Ipv4Prefixes = deserializeAws_ec2Ipv4PrefixList((0, smithy_client_1.getArrayIfSingleItem)(output["Ipv4Prefix"]["item"]), context);
    }
    if (output["Ipv4PrefixCount"] !== undefined) {
        contents.Ipv4PrefixCount = (0, smithy_client_1.strictParseInt32)(output["Ipv4PrefixCount"]);
    }
    if (output.Ipv6Prefix === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["Ipv6Prefix"] !== undefined && output["Ipv6Prefix"]["item"] !== undefined) {
        contents.Ipv6Prefixes = deserializeAws_ec2Ipv6PrefixList((0, smithy_client_1.getArrayIfSingleItem)(output["Ipv6Prefix"]["item"]), context);
    }
    if (output["Ipv6PrefixCount"] !== undefined) {
        contents.Ipv6PrefixCount = (0, smithy_client_1.strictParseInt32)(output["Ipv6PrefixCount"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceNetworkInterfaceSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceNetworkInterfaceSpecification(entry, context);
    });
};
const deserializeAws_ec2InstancePrivateIpAddress = (output, context) => {
    const contents = {
        Association: undefined,
        Primary: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2InstanceNetworkInterfaceAssociation(output["association"], context);
    }
    if (output["primary"] !== undefined) {
        contents.Primary = (0, smithy_client_1.parseBoolean)(output["primary"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = (0, smithy_client_1.expectString)(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    return contents;
};
const deserializeAws_ec2InstancePrivateIpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstancePrivateIpAddress(entry, context);
    });
};
const deserializeAws_ec2InstanceRequirements = (output, context) => {
    const contents = {
        VCpuCount: undefined,
        MemoryMiB: undefined,
        CpuManufacturers: undefined,
        MemoryGiBPerVCpu: undefined,
        ExcludedInstanceTypes: undefined,
        InstanceGenerations: undefined,
        SpotMaxPricePercentageOverLowestPrice: undefined,
        OnDemandMaxPricePercentageOverLowestPrice: undefined,
        BareMetal: undefined,
        BurstablePerformance: undefined,
        RequireHibernateSupport: undefined,
        NetworkInterfaceCount: undefined,
        LocalStorage: undefined,
        LocalStorageTypes: undefined,
        TotalLocalStorageGB: undefined,
        BaselineEbsBandwidthMbps: undefined,
        AcceleratorTypes: undefined,
        AcceleratorCount: undefined,
        AcceleratorManufacturers: undefined,
        AcceleratorNames: undefined,
        AcceleratorTotalMemoryMiB: undefined,
    };
    if (output["vCpuCount"] !== undefined) {
        contents.VCpuCount = deserializeAws_ec2VCpuCountRange(output["vCpuCount"], context);
    }
    if (output["memoryMiB"] !== undefined) {
        contents.MemoryMiB = deserializeAws_ec2MemoryMiB(output["memoryMiB"], context);
    }
    if (output.cpuManufacturerSet === "") {
        contents.CpuManufacturers = [];
    }
    else if (output["cpuManufacturerSet"] !== undefined && output["cpuManufacturerSet"]["item"] !== undefined) {
        contents.CpuManufacturers = deserializeAws_ec2CpuManufacturerSet((0, smithy_client_1.getArrayIfSingleItem)(output["cpuManufacturerSet"]["item"]), context);
    }
    if (output["memoryGiBPerVCpu"] !== undefined) {
        contents.MemoryGiBPerVCpu = deserializeAws_ec2MemoryGiBPerVCpu(output["memoryGiBPerVCpu"], context);
    }
    if (output.excludedInstanceTypeSet === "") {
        contents.ExcludedInstanceTypes = [];
    }
    else if (output["excludedInstanceTypeSet"] !== undefined &&
        output["excludedInstanceTypeSet"]["item"] !== undefined) {
        contents.ExcludedInstanceTypes = deserializeAws_ec2ExcludedInstanceTypeSet((0, smithy_client_1.getArrayIfSingleItem)(output["excludedInstanceTypeSet"]["item"]), context);
    }
    if (output.instanceGenerationSet === "") {
        contents.InstanceGenerations = [];
    }
    else if (output["instanceGenerationSet"] !== undefined && output["instanceGenerationSet"]["item"] !== undefined) {
        contents.InstanceGenerations = deserializeAws_ec2InstanceGenerationSet((0, smithy_client_1.getArrayIfSingleItem)(output["instanceGenerationSet"]["item"]), context);
    }
    if (output["spotMaxPricePercentageOverLowestPrice"] !== undefined) {
        contents.SpotMaxPricePercentageOverLowestPrice = (0, smithy_client_1.strictParseInt32)(output["spotMaxPricePercentageOverLowestPrice"]);
    }
    if (output["onDemandMaxPricePercentageOverLowestPrice"] !== undefined) {
        contents.OnDemandMaxPricePercentageOverLowestPrice = (0, smithy_client_1.strictParseInt32)(output["onDemandMaxPricePercentageOverLowestPrice"]);
    }
    if (output["bareMetal"] !== undefined) {
        contents.BareMetal = (0, smithy_client_1.expectString)(output["bareMetal"]);
    }
    if (output["burstablePerformance"] !== undefined) {
        contents.BurstablePerformance = (0, smithy_client_1.expectString)(output["burstablePerformance"]);
    }
    if (output["requireHibernateSupport"] !== undefined) {
        contents.RequireHibernateSupport = (0, smithy_client_1.parseBoolean)(output["requireHibernateSupport"]);
    }
    if (output["networkInterfaceCount"] !== undefined) {
        contents.NetworkInterfaceCount = deserializeAws_ec2NetworkInterfaceCount(output["networkInterfaceCount"], context);
    }
    if (output["localStorage"] !== undefined) {
        contents.LocalStorage = (0, smithy_client_1.expectString)(output["localStorage"]);
    }
    if (output.localStorageTypeSet === "") {
        contents.LocalStorageTypes = [];
    }
    else if (output["localStorageTypeSet"] !== undefined && output["localStorageTypeSet"]["item"] !== undefined) {
        contents.LocalStorageTypes = deserializeAws_ec2LocalStorageTypeSet((0, smithy_client_1.getArrayIfSingleItem)(output["localStorageTypeSet"]["item"]), context);
    }
    if (output["totalLocalStorageGB"] !== undefined) {
        contents.TotalLocalStorageGB = deserializeAws_ec2TotalLocalStorageGB(output["totalLocalStorageGB"], context);
    }
    if (output["baselineEbsBandwidthMbps"] !== undefined) {
        contents.BaselineEbsBandwidthMbps = deserializeAws_ec2BaselineEbsBandwidthMbps(output["baselineEbsBandwidthMbps"], context);
    }
    if (output.acceleratorTypeSet === "") {
        contents.AcceleratorTypes = [];
    }
    else if (output["acceleratorTypeSet"] !== undefined && output["acceleratorTypeSet"]["item"] !== undefined) {
        contents.AcceleratorTypes = deserializeAws_ec2AcceleratorTypeSet((0, smithy_client_1.getArrayIfSingleItem)(output["acceleratorTypeSet"]["item"]), context);
    }
    if (output["acceleratorCount"] !== undefined) {
        contents.AcceleratorCount = deserializeAws_ec2AcceleratorCount(output["acceleratorCount"], context);
    }
    if (output.acceleratorManufacturerSet === "") {
        contents.AcceleratorManufacturers = [];
    }
    else if (output["acceleratorManufacturerSet"] !== undefined &&
        output["acceleratorManufacturerSet"]["item"] !== undefined) {
        contents.AcceleratorManufacturers = deserializeAws_ec2AcceleratorManufacturerSet((0, smithy_client_1.getArrayIfSingleItem)(output["acceleratorManufacturerSet"]["item"]), context);
    }
    if (output.acceleratorNameSet === "") {
        contents.AcceleratorNames = [];
    }
    else if (output["acceleratorNameSet"] !== undefined && output["acceleratorNameSet"]["item"] !== undefined) {
        contents.AcceleratorNames = deserializeAws_ec2AcceleratorNameSet((0, smithy_client_1.getArrayIfSingleItem)(output["acceleratorNameSet"]["item"]), context);
    }
    if (output["acceleratorTotalMemoryMiB"] !== undefined) {
        contents.AcceleratorTotalMemoryMiB = deserializeAws_ec2AcceleratorTotalMemoryMiB(output["acceleratorTotalMemoryMiB"], context);
    }
    return contents;
};
const deserializeAws_ec2InstanceState = (output, context) => {
    const contents = {
        Code: undefined,
        Name: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.strictParseInt32)(output["code"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceStateChange = (output, context) => {
    const contents = {
        CurrentState: undefined,
        InstanceId: undefined,
        PreviousState: undefined,
    };
    if (output["currentState"] !== undefined) {
        contents.CurrentState = deserializeAws_ec2InstanceState(output["currentState"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["previousState"] !== undefined) {
        contents.PreviousState = deserializeAws_ec2InstanceState(output["previousState"], context);
    }
    return contents;
};
const deserializeAws_ec2InstanceStateChangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceStateChange(entry, context);
    });
};
const deserializeAws_ec2InstanceStatus = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        OutpostArn: undefined,
        Events: undefined,
        InstanceId: undefined,
        InstanceState: undefined,
        InstanceStatus: undefined,
        SystemStatus: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output.eventsSet === "") {
        contents.Events = [];
    }
    else if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
        contents.Events = deserializeAws_ec2InstanceStatusEventList((0, smithy_client_1.getArrayIfSingleItem)(output["eventsSet"]["item"]), context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["instanceState"] !== undefined) {
        contents.InstanceState = deserializeAws_ec2InstanceState(output["instanceState"], context);
    }
    if (output["instanceStatus"] !== undefined) {
        contents.InstanceStatus = deserializeAws_ec2InstanceStatusSummary(output["instanceStatus"], context);
    }
    if (output["systemStatus"] !== undefined) {
        contents.SystemStatus = deserializeAws_ec2InstanceStatusSummary(output["systemStatus"], context);
    }
    return contents;
};
const deserializeAws_ec2InstanceStatusDetails = (output, context) => {
    const contents = {
        ImpairedSince: undefined,
        Name: undefined,
        Status: undefined,
    };
    if (output["impairedSince"] !== undefined) {
        contents.ImpairedSince = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["impairedSince"]));
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceStatusDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceStatusDetails(entry, context);
    });
};
const deserializeAws_ec2InstanceStatusEvent = (output, context) => {
    const contents = {
        InstanceEventId: undefined,
        Code: undefined,
        Description: undefined,
        NotAfter: undefined,
        NotBefore: undefined,
        NotBeforeDeadline: undefined,
    };
    if (output["instanceEventId"] !== undefined) {
        contents.InstanceEventId = (0, smithy_client_1.expectString)(output["instanceEventId"]);
    }
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["notAfter"] !== undefined) {
        contents.NotAfter = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["notAfter"]));
    }
    if (output["notBefore"] !== undefined) {
        contents.NotBefore = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["notBefore"]));
    }
    if (output["notBeforeDeadline"] !== undefined) {
        contents.NotBeforeDeadline = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["notBeforeDeadline"]));
    }
    return contents;
};
const deserializeAws_ec2InstanceStatusEventList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceStatusEvent(entry, context);
    });
};
const deserializeAws_ec2InstanceStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceStatus(entry, context);
    });
};
const deserializeAws_ec2InstanceStatusSummary = (output, context) => {
    const contents = {
        Details: undefined,
        Status: undefined,
    };
    if (output.details === "") {
        contents.Details = [];
    }
    else if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
        contents.Details = deserializeAws_ec2InstanceStatusDetailsList((0, smithy_client_1.getArrayIfSingleItem)(output["details"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceStorageInfo = (output, context) => {
    const contents = {
        TotalSizeInGB: undefined,
        Disks: undefined,
        NvmeSupport: undefined,
        EncryptionSupport: undefined,
    };
    if (output["totalSizeInGB"] !== undefined) {
        contents.TotalSizeInGB = (0, smithy_client_1.strictParseLong)(output["totalSizeInGB"]);
    }
    if (output.disks === "") {
        contents.Disks = [];
    }
    else if (output["disks"] !== undefined && output["disks"]["item"] !== undefined) {
        contents.Disks = deserializeAws_ec2DiskInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["disks"]["item"]), context);
    }
    if (output["nvmeSupport"] !== undefined) {
        contents.NvmeSupport = (0, smithy_client_1.expectString)(output["nvmeSupport"]);
    }
    if (output["encryptionSupport"] !== undefined) {
        contents.EncryptionSupport = (0, smithy_client_1.expectString)(output["encryptionSupport"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceTagKeySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2InstanceTagNotificationAttribute = (output, context) => {
    const contents = {
        InstanceTagKeys: undefined,
        IncludeAllTagsOfInstance: undefined,
    };
    if (output.instanceTagKeySet === "") {
        contents.InstanceTagKeys = [];
    }
    else if (output["instanceTagKeySet"] !== undefined && output["instanceTagKeySet"]["item"] !== undefined) {
        contents.InstanceTagKeys = deserializeAws_ec2InstanceTagKeySet((0, smithy_client_1.getArrayIfSingleItem)(output["instanceTagKeySet"]["item"]), context);
    }
    if (output["includeAllTagsOfInstance"] !== undefined) {
        contents.IncludeAllTagsOfInstance = (0, smithy_client_1.parseBoolean)(output["includeAllTagsOfInstance"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceTypeInfo = (output, context) => {
    const contents = {
        InstanceType: undefined,
        CurrentGeneration: undefined,
        FreeTierEligible: undefined,
        SupportedUsageClasses: undefined,
        SupportedRootDeviceTypes: undefined,
        SupportedVirtualizationTypes: undefined,
        BareMetal: undefined,
        Hypervisor: undefined,
        ProcessorInfo: undefined,
        VCpuInfo: undefined,
        MemoryInfo: undefined,
        InstanceStorageSupported: undefined,
        InstanceStorageInfo: undefined,
        EbsInfo: undefined,
        NetworkInfo: undefined,
        GpuInfo: undefined,
        FpgaInfo: undefined,
        PlacementGroupInfo: undefined,
        InferenceAcceleratorInfo: undefined,
        HibernationSupported: undefined,
        BurstablePerformanceSupported: undefined,
        DedicatedHostsSupported: undefined,
        AutoRecoverySupported: undefined,
        SupportedBootModes: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["currentGeneration"] !== undefined) {
        contents.CurrentGeneration = (0, smithy_client_1.parseBoolean)(output["currentGeneration"]);
    }
    if (output["freeTierEligible"] !== undefined) {
        contents.FreeTierEligible = (0, smithy_client_1.parseBoolean)(output["freeTierEligible"]);
    }
    if (output.supportedUsageClasses === "") {
        contents.SupportedUsageClasses = [];
    }
    else if (output["supportedUsageClasses"] !== undefined && output["supportedUsageClasses"]["item"] !== undefined) {
        contents.SupportedUsageClasses = deserializeAws_ec2UsageClassTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["supportedUsageClasses"]["item"]), context);
    }
    if (output.supportedRootDeviceTypes === "") {
        contents.SupportedRootDeviceTypes = [];
    }
    else if (output["supportedRootDeviceTypes"] !== undefined &&
        output["supportedRootDeviceTypes"]["item"] !== undefined) {
        contents.SupportedRootDeviceTypes = deserializeAws_ec2RootDeviceTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["supportedRootDeviceTypes"]["item"]), context);
    }
    if (output.supportedVirtualizationTypes === "") {
        contents.SupportedVirtualizationTypes = [];
    }
    else if (output["supportedVirtualizationTypes"] !== undefined &&
        output["supportedVirtualizationTypes"]["item"] !== undefined) {
        contents.SupportedVirtualizationTypes = deserializeAws_ec2VirtualizationTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["supportedVirtualizationTypes"]["item"]), context);
    }
    if (output["bareMetal"] !== undefined) {
        contents.BareMetal = (0, smithy_client_1.parseBoolean)(output["bareMetal"]);
    }
    if (output["hypervisor"] !== undefined) {
        contents.Hypervisor = (0, smithy_client_1.expectString)(output["hypervisor"]);
    }
    if (output["processorInfo"] !== undefined) {
        contents.ProcessorInfo = deserializeAws_ec2ProcessorInfo(output["processorInfo"], context);
    }
    if (output["vCpuInfo"] !== undefined) {
        contents.VCpuInfo = deserializeAws_ec2VCpuInfo(output["vCpuInfo"], context);
    }
    if (output["memoryInfo"] !== undefined) {
        contents.MemoryInfo = deserializeAws_ec2MemoryInfo(output["memoryInfo"], context);
    }
    if (output["instanceStorageSupported"] !== undefined) {
        contents.InstanceStorageSupported = (0, smithy_client_1.parseBoolean)(output["instanceStorageSupported"]);
    }
    if (output["instanceStorageInfo"] !== undefined) {
        contents.InstanceStorageInfo = deserializeAws_ec2InstanceStorageInfo(output["instanceStorageInfo"], context);
    }
    if (output["ebsInfo"] !== undefined) {
        contents.EbsInfo = deserializeAws_ec2EbsInfo(output["ebsInfo"], context);
    }
    if (output["networkInfo"] !== undefined) {
        contents.NetworkInfo = deserializeAws_ec2NetworkInfo(output["networkInfo"], context);
    }
    if (output["gpuInfo"] !== undefined) {
        contents.GpuInfo = deserializeAws_ec2GpuInfo(output["gpuInfo"], context);
    }
    if (output["fpgaInfo"] !== undefined) {
        contents.FpgaInfo = deserializeAws_ec2FpgaInfo(output["fpgaInfo"], context);
    }
    if (output["placementGroupInfo"] !== undefined) {
        contents.PlacementGroupInfo = deserializeAws_ec2PlacementGroupInfo(output["placementGroupInfo"], context);
    }
    if (output["inferenceAcceleratorInfo"] !== undefined) {
        contents.InferenceAcceleratorInfo = deserializeAws_ec2InferenceAcceleratorInfo(output["inferenceAcceleratorInfo"], context);
    }
    if (output["hibernationSupported"] !== undefined) {
        contents.HibernationSupported = (0, smithy_client_1.parseBoolean)(output["hibernationSupported"]);
    }
    if (output["burstablePerformanceSupported"] !== undefined) {
        contents.BurstablePerformanceSupported = (0, smithy_client_1.parseBoolean)(output["burstablePerformanceSupported"]);
    }
    if (output["dedicatedHostsSupported"] !== undefined) {
        contents.DedicatedHostsSupported = (0, smithy_client_1.parseBoolean)(output["dedicatedHostsSupported"]);
    }
    if (output["autoRecoverySupported"] !== undefined) {
        contents.AutoRecoverySupported = (0, smithy_client_1.parseBoolean)(output["autoRecoverySupported"]);
    }
    if (output.supportedBootModes === "") {
        contents.SupportedBootModes = [];
    }
    else if (output["supportedBootModes"] !== undefined && output["supportedBootModes"]["item"] !== undefined) {
        contents.SupportedBootModes = deserializeAws_ec2BootModeTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["supportedBootModes"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2InstanceTypeInfoFromInstanceRequirements = (output, context) => {
    const contents = {
        InstanceType: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceTypeInfoFromInstanceRequirementsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceTypeInfoFromInstanceRequirements(entry, context);
    });
};
const deserializeAws_ec2InstanceTypeInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceTypeInfo(entry, context);
    });
};
const deserializeAws_ec2InstanceTypeOffering = (output, context) => {
    const contents = {
        InstanceType: undefined,
        LocationType: undefined,
        Location: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["locationType"] !== undefined) {
        contents.LocationType = (0, smithy_client_1.expectString)(output["locationType"]);
    }
    if (output["location"] !== undefined) {
        contents.Location = (0, smithy_client_1.expectString)(output["location"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceTypeOfferingsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceTypeOffering(entry, context);
    });
};
const deserializeAws_ec2InstanceUsage = (output, context) => {
    const contents = {
        AccountId: undefined,
        UsedInstanceCount: undefined,
    };
    if (output["accountId"] !== undefined) {
        contents.AccountId = (0, smithy_client_1.expectString)(output["accountId"]);
    }
    if (output["usedInstanceCount"] !== undefined) {
        contents.UsedInstanceCount = (0, smithy_client_1.strictParseInt32)(output["usedInstanceCount"]);
    }
    return contents;
};
const deserializeAws_ec2InstanceUsageSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InstanceUsage(entry, context);
    });
};
const deserializeAws_ec2InternetGateway = (output, context) => {
    const contents = {
        Attachments: undefined,
        InternetGatewayId: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output.attachmentSet === "") {
        contents.Attachments = [];
    }
    else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
        contents.Attachments = deserializeAws_ec2InternetGatewayAttachmentList((0, smithy_client_1.getArrayIfSingleItem)(output["attachmentSet"]["item"]), context);
    }
    if (output["internetGatewayId"] !== undefined) {
        contents.InternetGatewayId = (0, smithy_client_1.expectString)(output["internetGatewayId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2InternetGatewayAttachment = (output, context) => {
    const contents = {
        State: undefined,
        VpcId: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2InternetGatewayAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InternetGatewayAttachment(entry, context);
    });
};
const deserializeAws_ec2InternetGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2InternetGateway(entry, context);
    });
};
const deserializeAws_ec2IpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2Ipam = (output, context) => {
    const contents = {
        OwnerId: undefined,
        IpamId: undefined,
        IpamArn: undefined,
        IpamRegion: undefined,
        PublicDefaultScopeId: undefined,
        PrivateDefaultScopeId: undefined,
        ScopeCount: undefined,
        Description: undefined,
        OperatingRegions: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["ipamId"] !== undefined) {
        contents.IpamId = (0, smithy_client_1.expectString)(output["ipamId"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = (0, smithy_client_1.expectString)(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = (0, smithy_client_1.expectString)(output["ipamRegion"]);
    }
    if (output["publicDefaultScopeId"] !== undefined) {
        contents.PublicDefaultScopeId = (0, smithy_client_1.expectString)(output["publicDefaultScopeId"]);
    }
    if (output["privateDefaultScopeId"] !== undefined) {
        contents.PrivateDefaultScopeId = (0, smithy_client_1.expectString)(output["privateDefaultScopeId"]);
    }
    if (output["scopeCount"] !== undefined) {
        contents.ScopeCount = (0, smithy_client_1.strictParseInt32)(output["scopeCount"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.operatingRegionSet === "") {
        contents.OperatingRegions = [];
    }
    else if (output["operatingRegionSet"] !== undefined && output["operatingRegionSet"]["item"] !== undefined) {
        contents.OperatingRegions = deserializeAws_ec2IpamOperatingRegionSet((0, smithy_client_1.getArrayIfSingleItem)(output["operatingRegionSet"]["item"]), context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2IpamAddressHistoryRecord = (output, context) => {
    const contents = {
        ResourceOwnerId: undefined,
        ResourceRegion: undefined,
        ResourceType: undefined,
        ResourceId: undefined,
        ResourceCidr: undefined,
        ResourceName: undefined,
        ResourceComplianceStatus: undefined,
        ResourceOverlapStatus: undefined,
        VpcId: undefined,
        SampledStartTime: undefined,
        SampledEndTime: undefined,
    };
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = (0, smithy_client_1.expectString)(output["resourceOwnerId"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = (0, smithy_client_1.expectString)(output["resourceRegion"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceCidr"] !== undefined) {
        contents.ResourceCidr = (0, smithy_client_1.expectString)(output["resourceCidr"]);
    }
    if (output["resourceName"] !== undefined) {
        contents.ResourceName = (0, smithy_client_1.expectString)(output["resourceName"]);
    }
    if (output["resourceComplianceStatus"] !== undefined) {
        contents.ResourceComplianceStatus = (0, smithy_client_1.expectString)(output["resourceComplianceStatus"]);
    }
    if (output["resourceOverlapStatus"] !== undefined) {
        contents.ResourceOverlapStatus = (0, smithy_client_1.expectString)(output["resourceOverlapStatus"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["sampledStartTime"] !== undefined) {
        contents.SampledStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["sampledStartTime"]));
    }
    if (output["sampledEndTime"] !== undefined) {
        contents.SampledEndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["sampledEndTime"]));
    }
    return contents;
};
const deserializeAws_ec2IpamAddressHistoryRecordSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamAddressHistoryRecord(entry, context);
    });
};
const deserializeAws_ec2IpamOperatingRegion = (output, context) => {
    const contents = {
        RegionName: undefined,
    };
    if (output["regionName"] !== undefined) {
        contents.RegionName = (0, smithy_client_1.expectString)(output["regionName"]);
    }
    return contents;
};
const deserializeAws_ec2IpamOperatingRegionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamOperatingRegion(entry, context);
    });
};
const deserializeAws_ec2IpamPool = (output, context) => {
    const contents = {
        OwnerId: undefined,
        IpamPoolId: undefined,
        SourceIpamPoolId: undefined,
        IpamPoolArn: undefined,
        IpamScopeArn: undefined,
        IpamScopeType: undefined,
        IpamArn: undefined,
        IpamRegion: undefined,
        Locale: undefined,
        PoolDepth: undefined,
        State: undefined,
        StateMessage: undefined,
        Description: undefined,
        AutoImport: undefined,
        PubliclyAdvertisable: undefined,
        AddressFamily: undefined,
        AllocationMinNetmaskLength: undefined,
        AllocationMaxNetmaskLength: undefined,
        AllocationDefaultNetmaskLength: undefined,
        AllocationResourceTags: undefined,
        Tags: undefined,
        AwsService: undefined,
    };
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["ipamPoolId"] !== undefined) {
        contents.IpamPoolId = (0, smithy_client_1.expectString)(output["ipamPoolId"]);
    }
    if (output["sourceIpamPoolId"] !== undefined) {
        contents.SourceIpamPoolId = (0, smithy_client_1.expectString)(output["sourceIpamPoolId"]);
    }
    if (output["ipamPoolArn"] !== undefined) {
        contents.IpamPoolArn = (0, smithy_client_1.expectString)(output["ipamPoolArn"]);
    }
    if (output["ipamScopeArn"] !== undefined) {
        contents.IpamScopeArn = (0, smithy_client_1.expectString)(output["ipamScopeArn"]);
    }
    if (output["ipamScopeType"] !== undefined) {
        contents.IpamScopeType = (0, smithy_client_1.expectString)(output["ipamScopeType"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = (0, smithy_client_1.expectString)(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = (0, smithy_client_1.expectString)(output["ipamRegion"]);
    }
    if (output["locale"] !== undefined) {
        contents.Locale = (0, smithy_client_1.expectString)(output["locale"]);
    }
    if (output["poolDepth"] !== undefined) {
        contents.PoolDepth = (0, smithy_client_1.strictParseInt32)(output["poolDepth"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["stateMessage"] !== undefined) {
        contents.StateMessage = (0, smithy_client_1.expectString)(output["stateMessage"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["autoImport"] !== undefined) {
        contents.AutoImport = (0, smithy_client_1.parseBoolean)(output["autoImport"]);
    }
    if (output["publiclyAdvertisable"] !== undefined) {
        contents.PubliclyAdvertisable = (0, smithy_client_1.parseBoolean)(output["publiclyAdvertisable"]);
    }
    if (output["addressFamily"] !== undefined) {
        contents.AddressFamily = (0, smithy_client_1.expectString)(output["addressFamily"]);
    }
    if (output["allocationMinNetmaskLength"] !== undefined) {
        contents.AllocationMinNetmaskLength = (0, smithy_client_1.strictParseInt32)(output["allocationMinNetmaskLength"]);
    }
    if (output["allocationMaxNetmaskLength"] !== undefined) {
        contents.AllocationMaxNetmaskLength = (0, smithy_client_1.strictParseInt32)(output["allocationMaxNetmaskLength"]);
    }
    if (output["allocationDefaultNetmaskLength"] !== undefined) {
        contents.AllocationDefaultNetmaskLength = (0, smithy_client_1.strictParseInt32)(output["allocationDefaultNetmaskLength"]);
    }
    if (output.allocationResourceTagSet === "") {
        contents.AllocationResourceTags = [];
    }
    else if (output["allocationResourceTagSet"] !== undefined &&
        output["allocationResourceTagSet"]["item"] !== undefined) {
        contents.AllocationResourceTags = deserializeAws_ec2IpamResourceTagList((0, smithy_client_1.getArrayIfSingleItem)(output["allocationResourceTagSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["awsService"] !== undefined) {
        contents.AwsService = (0, smithy_client_1.expectString)(output["awsService"]);
    }
    return contents;
};
const deserializeAws_ec2IpamPoolAllocation = (output, context) => {
    const contents = {
        Cidr: undefined,
        IpamPoolAllocationId: undefined,
        Description: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        ResourceRegion: undefined,
        ResourceOwner: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = (0, smithy_client_1.expectString)(output["cidr"]);
    }
    if (output["ipamPoolAllocationId"] !== undefined) {
        contents.IpamPoolAllocationId = (0, smithy_client_1.expectString)(output["ipamPoolAllocationId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = (0, smithy_client_1.expectString)(output["resourceRegion"]);
    }
    if (output["resourceOwner"] !== undefined) {
        contents.ResourceOwner = (0, smithy_client_1.expectString)(output["resourceOwner"]);
    }
    return contents;
};
const deserializeAws_ec2IpamPoolAllocationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamPoolAllocation(entry, context);
    });
};
const deserializeAws_ec2IpamPoolCidr = (output, context) => {
    const contents = {
        Cidr: undefined,
        State: undefined,
        FailureReason: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = (0, smithy_client_1.expectString)(output["cidr"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["failureReason"] !== undefined) {
        contents.FailureReason = deserializeAws_ec2IpamPoolCidrFailureReason(output["failureReason"], context);
    }
    return contents;
};
const deserializeAws_ec2IpamPoolCidrFailureReason = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2IpamPoolCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamPoolCidr(entry, context);
    });
};
const deserializeAws_ec2IpamPoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamPool(entry, context);
    });
};
const deserializeAws_ec2IpamResourceCidr = (output, context) => {
    const contents = {
        IpamId: undefined,
        IpamScopeId: undefined,
        IpamPoolId: undefined,
        ResourceRegion: undefined,
        ResourceOwnerId: undefined,
        ResourceId: undefined,
        ResourceName: undefined,
        ResourceCidr: undefined,
        ResourceType: undefined,
        ResourceTags: undefined,
        IpUsage: undefined,
        ComplianceStatus: undefined,
        ManagementState: undefined,
        OverlapStatus: undefined,
        VpcId: undefined,
    };
    if (output["ipamId"] !== undefined) {
        contents.IpamId = (0, smithy_client_1.expectString)(output["ipamId"]);
    }
    if (output["ipamScopeId"] !== undefined) {
        contents.IpamScopeId = (0, smithy_client_1.expectString)(output["ipamScopeId"]);
    }
    if (output["ipamPoolId"] !== undefined) {
        contents.IpamPoolId = (0, smithy_client_1.expectString)(output["ipamPoolId"]);
    }
    if (output["resourceRegion"] !== undefined) {
        contents.ResourceRegion = (0, smithy_client_1.expectString)(output["resourceRegion"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = (0, smithy_client_1.expectString)(output["resourceOwnerId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceName"] !== undefined) {
        contents.ResourceName = (0, smithy_client_1.expectString)(output["resourceName"]);
    }
    if (output["resourceCidr"] !== undefined) {
        contents.ResourceCidr = (0, smithy_client_1.expectString)(output["resourceCidr"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output.resourceTagSet === "") {
        contents.ResourceTags = [];
    }
    else if (output["resourceTagSet"] !== undefined && output["resourceTagSet"]["item"] !== undefined) {
        contents.ResourceTags = deserializeAws_ec2IpamResourceTagList((0, smithy_client_1.getArrayIfSingleItem)(output["resourceTagSet"]["item"]), context);
    }
    if (output["ipUsage"] !== undefined) {
        contents.IpUsage = (0, smithy_client_1.strictParseFloat)(output["ipUsage"]);
    }
    if (output["complianceStatus"] !== undefined) {
        contents.ComplianceStatus = (0, smithy_client_1.expectString)(output["complianceStatus"]);
    }
    if (output["managementState"] !== undefined) {
        contents.ManagementState = (0, smithy_client_1.expectString)(output["managementState"]);
    }
    if (output["overlapStatus"] !== undefined) {
        contents.OverlapStatus = (0, smithy_client_1.expectString)(output["overlapStatus"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2IpamResourceCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamResourceCidr(entry, context);
    });
};
const deserializeAws_ec2IpamResourceTag = (output, context) => {
    const contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["key"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2IpamResourceTagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamResourceTag(entry, context);
    });
};
const deserializeAws_ec2IpamScope = (output, context) => {
    const contents = {
        OwnerId: undefined,
        IpamScopeId: undefined,
        IpamScopeArn: undefined,
        IpamArn: undefined,
        IpamRegion: undefined,
        IpamScopeType: undefined,
        IsDefault: undefined,
        Description: undefined,
        PoolCount: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["ipamScopeId"] !== undefined) {
        contents.IpamScopeId = (0, smithy_client_1.expectString)(output["ipamScopeId"]);
    }
    if (output["ipamScopeArn"] !== undefined) {
        contents.IpamScopeArn = (0, smithy_client_1.expectString)(output["ipamScopeArn"]);
    }
    if (output["ipamArn"] !== undefined) {
        contents.IpamArn = (0, smithy_client_1.expectString)(output["ipamArn"]);
    }
    if (output["ipamRegion"] !== undefined) {
        contents.IpamRegion = (0, smithy_client_1.expectString)(output["ipamRegion"]);
    }
    if (output["ipamScopeType"] !== undefined) {
        contents.IpamScopeType = (0, smithy_client_1.expectString)(output["ipamScopeType"]);
    }
    if (output["isDefault"] !== undefined) {
        contents.IsDefault = (0, smithy_client_1.parseBoolean)(output["isDefault"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["poolCount"] !== undefined) {
        contents.PoolCount = (0, smithy_client_1.strictParseInt32)(output["poolCount"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2IpamScopeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpamScope(entry, context);
    });
};
const deserializeAws_ec2IpamSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipam(entry, context);
    });
};
const deserializeAws_ec2IpPermission = (output, context) => {
    const contents = {
        FromPort: undefined,
        IpProtocol: undefined,
        IpRanges: undefined,
        Ipv6Ranges: undefined,
        PrefixListIds: undefined,
        ToPort: undefined,
        UserIdGroupPairs: undefined,
    };
    if (output["fromPort"] !== undefined) {
        contents.FromPort = (0, smithy_client_1.strictParseInt32)(output["fromPort"]);
    }
    if (output["ipProtocol"] !== undefined) {
        contents.IpProtocol = (0, smithy_client_1.expectString)(output["ipProtocol"]);
    }
    if (output.ipRanges === "") {
        contents.IpRanges = [];
    }
    else if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
        contents.IpRanges = deserializeAws_ec2IpRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["ipRanges"]["item"]), context);
    }
    if (output.ipv6Ranges === "") {
        contents.Ipv6Ranges = [];
    }
    else if (output["ipv6Ranges"] !== undefined && output["ipv6Ranges"]["item"] !== undefined) {
        contents.Ipv6Ranges = deserializeAws_ec2Ipv6RangeList((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6Ranges"]["item"]), context);
    }
    if (output.prefixListIds === "") {
        contents.PrefixListIds = [];
    }
    else if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
        contents.PrefixListIds = deserializeAws_ec2PrefixListIdList((0, smithy_client_1.getArrayIfSingleItem)(output["prefixListIds"]["item"]), context);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = (0, smithy_client_1.strictParseInt32)(output["toPort"]);
    }
    if (output.groups === "") {
        contents.UserIdGroupPairs = [];
    }
    else if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
        contents.UserIdGroupPairs = deserializeAws_ec2UserIdGroupPairList((0, smithy_client_1.getArrayIfSingleItem)(output["groups"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2IpPermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpPermission(entry, context);
    });
};
const deserializeAws_ec2IpPrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2IpRange = (output, context) => {
    const contents = {
        CidrIp: undefined,
        Description: undefined,
    };
    if (output["cidrIp"] !== undefined) {
        contents.CidrIp = (0, smithy_client_1.expectString)(output["cidrIp"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    return contents;
};
const deserializeAws_ec2IpRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2IpRange(entry, context);
    });
};
const deserializeAws_ec2IpRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2Ipv4PrefixesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv4PrefixSpecification(entry, context);
    });
};
const deserializeAws_ec2Ipv4PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv4PrefixSpecificationRequest(entry, context);
    });
};
const deserializeAws_ec2Ipv4PrefixListResponse = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv4PrefixSpecificationResponse(entry, context);
    });
};
const deserializeAws_ec2Ipv4PrefixSpecification = (output, context) => {
    const contents = {
        Ipv4Prefix: undefined,
    };
    if (output["ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = (0, smithy_client_1.expectString)(output["ipv4Prefix"]);
    }
    return contents;
};
const deserializeAws_ec2Ipv4PrefixSpecificationRequest = (output, context) => {
    const contents = {
        Ipv4Prefix: undefined,
    };
    if (output["Ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = (0, smithy_client_1.expectString)(output["Ipv4Prefix"]);
    }
    return contents;
};
const deserializeAws_ec2Ipv4PrefixSpecificationResponse = (output, context) => {
    const contents = {
        Ipv4Prefix: undefined,
    };
    if (output["ipv4Prefix"] !== undefined) {
        contents.Ipv4Prefix = (0, smithy_client_1.expectString)(output["ipv4Prefix"]);
    }
    return contents;
};
const deserializeAws_ec2Ipv6AddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2Ipv6CidrAssociation = (output, context) => {
    const contents = {
        Ipv6Cidr: undefined,
        AssociatedResource: undefined,
    };
    if (output["ipv6Cidr"] !== undefined) {
        contents.Ipv6Cidr = (0, smithy_client_1.expectString)(output["ipv6Cidr"]);
    }
    if (output["associatedResource"] !== undefined) {
        contents.AssociatedResource = (0, smithy_client_1.expectString)(output["associatedResource"]);
    }
    return contents;
};
const deserializeAws_ec2Ipv6CidrAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6CidrAssociation(entry, context);
    });
};
const deserializeAws_ec2Ipv6CidrBlock = (output, context) => {
    const contents = {
        Ipv6CidrBlock: undefined,
    };
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = (0, smithy_client_1.expectString)(output["ipv6CidrBlock"]);
    }
    return contents;
};
const deserializeAws_ec2Ipv6CidrBlockSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6CidrBlock(entry, context);
    });
};
const deserializeAws_ec2Ipv6Pool = (output, context) => {
    const contents = {
        PoolId: undefined,
        Description: undefined,
        PoolCidrBlocks: undefined,
        Tags: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = (0, smithy_client_1.expectString)(output["poolId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.poolCidrBlockSet === "") {
        contents.PoolCidrBlocks = [];
    }
    else if (output["poolCidrBlockSet"] !== undefined && output["poolCidrBlockSet"]["item"] !== undefined) {
        contents.PoolCidrBlocks = deserializeAws_ec2PoolCidrBlocksSet((0, smithy_client_1.getArrayIfSingleItem)(output["poolCidrBlockSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2Ipv6PoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6Pool(entry, context);
    });
};
const deserializeAws_ec2Ipv6PrefixesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6PrefixSpecification(entry, context);
    });
};
const deserializeAws_ec2Ipv6PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6PrefixSpecificationRequest(entry, context);
    });
};
const deserializeAws_ec2Ipv6PrefixListResponse = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6PrefixSpecificationResponse(entry, context);
    });
};
const deserializeAws_ec2Ipv6PrefixSpecification = (output, context) => {
    const contents = {
        Ipv6Prefix: undefined,
    };
    if (output["ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = (0, smithy_client_1.expectString)(output["ipv6Prefix"]);
    }
    return contents;
};
const deserializeAws_ec2Ipv6PrefixSpecificationRequest = (output, context) => {
    const contents = {
        Ipv6Prefix: undefined,
    };
    if (output["Ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = (0, smithy_client_1.expectString)(output["Ipv6Prefix"]);
    }
    return contents;
};
const deserializeAws_ec2Ipv6PrefixSpecificationResponse = (output, context) => {
    const contents = {
        Ipv6Prefix: undefined,
    };
    if (output["ipv6Prefix"] !== undefined) {
        contents.Ipv6Prefix = (0, smithy_client_1.expectString)(output["ipv6Prefix"]);
    }
    return contents;
};
const deserializeAws_ec2Ipv6Range = (output, context) => {
    const contents = {
        CidrIpv6: undefined,
        Description: undefined,
    };
    if (output["cidrIpv6"] !== undefined) {
        contents.CidrIpv6 = (0, smithy_client_1.expectString)(output["cidrIpv6"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    return contents;
};
const deserializeAws_ec2Ipv6RangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Ipv6Range(entry, context);
    });
};
const deserializeAws_ec2KeyPair = (output, context) => {
    const contents = {
        KeyFingerprint: undefined,
        KeyMaterial: undefined,
        KeyName: undefined,
        KeyPairId: undefined,
        Tags: undefined,
    };
    if (output["keyFingerprint"] !== undefined) {
        contents.KeyFingerprint = (0, smithy_client_1.expectString)(output["keyFingerprint"]);
    }
    if (output["keyMaterial"] !== undefined) {
        contents.KeyMaterial = (0, smithy_client_1.expectString)(output["keyMaterial"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = (0, smithy_client_1.expectString)(output["keyName"]);
    }
    if (output["keyPairId"] !== undefined) {
        contents.KeyPairId = (0, smithy_client_1.expectString)(output["keyPairId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2KeyPairInfo = (output, context) => {
    const contents = {
        KeyPairId: undefined,
        KeyFingerprint: undefined,
        KeyName: undefined,
        KeyType: undefined,
        Tags: undefined,
        PublicKey: undefined,
        CreateTime: undefined,
    };
    if (output["keyPairId"] !== undefined) {
        contents.KeyPairId = (0, smithy_client_1.expectString)(output["keyPairId"]);
    }
    if (output["keyFingerprint"] !== undefined) {
        contents.KeyFingerprint = (0, smithy_client_1.expectString)(output["keyFingerprint"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = (0, smithy_client_1.expectString)(output["keyName"]);
    }
    if (output["keyType"] !== undefined) {
        contents.KeyType = (0, smithy_client_1.expectString)(output["keyType"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["publicKey"] !== undefined) {
        contents.PublicKey = (0, smithy_client_1.expectString)(output["publicKey"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    return contents;
};
const deserializeAws_ec2KeyPairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2KeyPairInfo(entry, context);
    });
};
const deserializeAws_ec2LastError = (output, context) => {
    const contents = {
        Message: undefined,
        Code: undefined,
    };
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchPermission = (output, context) => {
    const contents = {
        Group: undefined,
        UserId: undefined,
        OrganizationArn: undefined,
        OrganizationalUnitArn: undefined,
    };
    if (output["group"] !== undefined) {
        contents.Group = (0, smithy_client_1.expectString)(output["group"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = (0, smithy_client_1.expectString)(output["userId"]);
    }
    if (output["organizationArn"] !== undefined) {
        contents.OrganizationArn = (0, smithy_client_1.expectString)(output["organizationArn"]);
    }
    if (output["organizationalUnitArn"] !== undefined) {
        contents.OrganizationalUnitArn = (0, smithy_client_1.expectString)(output["organizationalUnitArn"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchPermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchPermission(entry, context);
    });
};
const deserializeAws_ec2LaunchSpecification = (output, context) => {
    const contents = {
        UserData: undefined,
        SecurityGroups: undefined,
        AddressingType: undefined,
        BlockDeviceMappings: undefined,
        EbsOptimized: undefined,
        IamInstanceProfile: undefined,
        ImageId: undefined,
        InstanceType: undefined,
        KernelId: undefined,
        KeyName: undefined,
        NetworkInterfaces: undefined,
        Placement: undefined,
        RamdiskId: undefined,
        SubnetId: undefined,
        Monitoring: undefined,
    };
    if (output["userData"] !== undefined) {
        contents.UserData = (0, smithy_client_1.expectString)(output["userData"]);
    }
    if (output.groupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2GroupIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output["addressingType"] !== undefined) {
        contents.AddressingType = (0, smithy_client_1.expectString)(output["addressingType"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList((0, smithy_client_1.getArrayIfSingleItem)(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = (0, smithy_client_1.parseBoolean)(output["ebsOptimized"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfileSpecification(output["iamInstanceProfile"], context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = (0, smithy_client_1.expectString)(output["kernelId"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = (0, smithy_client_1.expectString)(output["keyName"]);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2InstanceNetworkInterfaceSpecificationList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2SpotPlacement(output["placement"], context);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = (0, smithy_client_1.expectString)(output["ramdiskId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2RunInstancesMonitoringEnabled(output["monitoring"], context);
    }
    return contents;
};
const deserializeAws_ec2LaunchSpecsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotFleetLaunchSpecification(entry, context);
    });
};
const deserializeAws_ec2LaunchTemplate = (output, context) => {
    const contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        CreateTime: undefined,
        CreatedBy: undefined,
        DefaultVersionNumber: undefined,
        LatestVersionNumber: undefined,
        Tags: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = (0, smithy_client_1.expectString)(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = (0, smithy_client_1.expectString)(output["launchTemplateName"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["createdBy"] !== undefined) {
        contents.CreatedBy = (0, smithy_client_1.expectString)(output["createdBy"]);
    }
    if (output["defaultVersionNumber"] !== undefined) {
        contents.DefaultVersionNumber = (0, smithy_client_1.strictParseLong)(output["defaultVersionNumber"]);
    }
    if (output["latestVersionNumber"] !== undefined) {
        contents.LatestVersionNumber = (0, smithy_client_1.strictParseLong)(output["latestVersionNumber"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateAndOverridesResponse = (output, context) => {
    const contents = {
        LaunchTemplateSpecification: undefined,
        Overrides: undefined,
    };
    if (output["launchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = deserializeAws_ec2FleetLaunchTemplateSpecification(output["launchTemplateSpecification"], context);
    }
    if (output["overrides"] !== undefined) {
        contents.Overrides = deserializeAws_ec2FleetLaunchTemplateOverrides(output["overrides"], context);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateBlockDeviceMapping = (output, context) => {
    const contents = {
        DeviceName: undefined,
        VirtualName: undefined,
        Ebs: undefined,
        NoDevice: undefined,
    };
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = (0, smithy_client_1.expectString)(output["deviceName"]);
    }
    if (output["virtualName"] !== undefined) {
        contents.VirtualName = (0, smithy_client_1.expectString)(output["virtualName"]);
    }
    if (output["ebs"] !== undefined) {
        contents.Ebs = deserializeAws_ec2LaunchTemplateEbsBlockDevice(output["ebs"], context);
    }
    if (output["noDevice"] !== undefined) {
        contents.NoDevice = (0, smithy_client_1.expectString)(output["noDevice"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateBlockDeviceMappingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateBlockDeviceMapping(entry, context);
    });
};
const deserializeAws_ec2LaunchTemplateCapacityReservationSpecificationResponse = (output, context) => {
    const contents = {
        CapacityReservationPreference: undefined,
        CapacityReservationTarget: undefined,
    };
    if (output["capacityReservationPreference"] !== undefined) {
        contents.CapacityReservationPreference = (0, smithy_client_1.expectString)(output["capacityReservationPreference"]);
    }
    if (output["capacityReservationTarget"] !== undefined) {
        contents.CapacityReservationTarget = deserializeAws_ec2CapacityReservationTargetResponse(output["capacityReservationTarget"], context);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateConfig = (output, context) => {
    const contents = {
        LaunchTemplateSpecification: undefined,
        Overrides: undefined,
    };
    if (output["launchTemplateSpecification"] !== undefined) {
        contents.LaunchTemplateSpecification = deserializeAws_ec2FleetLaunchTemplateSpecification(output["launchTemplateSpecification"], context);
    }
    if (output.overrides === "") {
        contents.Overrides = [];
    }
    else if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
        contents.Overrides = deserializeAws_ec2LaunchTemplateOverridesList((0, smithy_client_1.getArrayIfSingleItem)(output["overrides"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateConfigList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateConfig(entry, context);
    });
};
const deserializeAws_ec2LaunchTemplateCpuOptions = (output, context) => {
    const contents = {
        CoreCount: undefined,
        ThreadsPerCore: undefined,
    };
    if (output["coreCount"] !== undefined) {
        contents.CoreCount = (0, smithy_client_1.strictParseInt32)(output["coreCount"]);
    }
    if (output["threadsPerCore"] !== undefined) {
        contents.ThreadsPerCore = (0, smithy_client_1.strictParseInt32)(output["threadsPerCore"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateEbsBlockDevice = (output, context) => {
    const contents = {
        Encrypted: undefined,
        DeleteOnTermination: undefined,
        Iops: undefined,
        KmsKeyId: undefined,
        SnapshotId: undefined,
        VolumeSize: undefined,
        VolumeType: undefined,
        Throughput: undefined,
    };
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["encrypted"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = (0, smithy_client_1.parseBoolean)(output["deleteOnTermination"]);
    }
    if (output["iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["iops"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["kmsKeyId"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = (0, smithy_client_1.strictParseInt32)(output["volumeSize"]);
    }
    if (output["volumeType"] !== undefined) {
        contents.VolumeType = (0, smithy_client_1.expectString)(output["volumeType"]);
    }
    if (output["throughput"] !== undefined) {
        contents.Throughput = (0, smithy_client_1.strictParseInt32)(output["throughput"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponse = (output, context) => {
    const contents = {
        Type: undefined,
        Count: undefined,
    };
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseInt32)(output["count"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponse(entry, context);
    });
};
const deserializeAws_ec2LaunchTemplateEnclaveOptions = (output, context) => {
    const contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["enabled"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateHibernationOptions = (output, context) => {
    const contents = {
        Configured: undefined,
    };
    if (output["configured"] !== undefined) {
        contents.Configured = (0, smithy_client_1.parseBoolean)(output["configured"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateIamInstanceProfileSpecification = (output, context) => {
    const contents = {
        Arn: undefined,
        Name: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["arn"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateInstanceMaintenanceOptions = (output, context) => {
    const contents = {
        AutoRecovery: undefined,
    };
    if (output["autoRecovery"] !== undefined) {
        contents.AutoRecovery = (0, smithy_client_1.expectString)(output["autoRecovery"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateInstanceMarketOptions = (output, context) => {
    const contents = {
        MarketType: undefined,
        SpotOptions: undefined,
    };
    if (output["marketType"] !== undefined) {
        contents.MarketType = (0, smithy_client_1.expectString)(output["marketType"]);
    }
    if (output["spotOptions"] !== undefined) {
        contents.SpotOptions = deserializeAws_ec2LaunchTemplateSpotMarketOptions(output["spotOptions"], context);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateInstanceMetadataOptions = (output, context) => {
    const contents = {
        State: undefined,
        HttpTokens: undefined,
        HttpPutResponseHopLimit: undefined,
        HttpEndpoint: undefined,
        HttpProtocolIpv6: undefined,
        InstanceMetadataTags: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["httpTokens"] !== undefined) {
        contents.HttpTokens = (0, smithy_client_1.expectString)(output["httpTokens"]);
    }
    if (output["httpPutResponseHopLimit"] !== undefined) {
        contents.HttpPutResponseHopLimit = (0, smithy_client_1.strictParseInt32)(output["httpPutResponseHopLimit"]);
    }
    if (output["httpEndpoint"] !== undefined) {
        contents.HttpEndpoint = (0, smithy_client_1.expectString)(output["httpEndpoint"]);
    }
    if (output["httpProtocolIpv6"] !== undefined) {
        contents.HttpProtocolIpv6 = (0, smithy_client_1.expectString)(output["httpProtocolIpv6"]);
    }
    if (output["instanceMetadataTags"] !== undefined) {
        contents.InstanceMetadataTags = (0, smithy_client_1.expectString)(output["instanceMetadataTags"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecification = (output, context) => {
    const contents = {
        AssociateCarrierIpAddress: undefined,
        AssociatePublicIpAddress: undefined,
        DeleteOnTermination: undefined,
        Description: undefined,
        DeviceIndex: undefined,
        Groups: undefined,
        InterfaceType: undefined,
        Ipv6AddressCount: undefined,
        Ipv6Addresses: undefined,
        NetworkInterfaceId: undefined,
        PrivateIpAddress: undefined,
        PrivateIpAddresses: undefined,
        SecondaryPrivateIpAddressCount: undefined,
        SubnetId: undefined,
        NetworkCardIndex: undefined,
        Ipv4Prefixes: undefined,
        Ipv4PrefixCount: undefined,
        Ipv6Prefixes: undefined,
        Ipv6PrefixCount: undefined,
    };
    if (output["associateCarrierIpAddress"] !== undefined) {
        contents.AssociateCarrierIpAddress = (0, smithy_client_1.parseBoolean)(output["associateCarrierIpAddress"]);
    }
    if (output["associatePublicIpAddress"] !== undefined) {
        contents.AssociatePublicIpAddress = (0, smithy_client_1.parseBoolean)(output["associatePublicIpAddress"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = (0, smithy_client_1.parseBoolean)(output["deleteOnTermination"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = (0, smithy_client_1.strictParseInt32)(output["deviceIndex"]);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["groupId"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdStringList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["groupId"]), context);
    }
    if (output["interfaceType"] !== undefined) {
        contents.InterfaceType = (0, smithy_client_1.expectString)(output["interfaceType"]);
    }
    if (output["ipv6AddressCount"] !== undefined) {
        contents.Ipv6AddressCount = (0, smithy_client_1.strictParseInt32)(output["ipv6AddressCount"]);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = deserializeAws_ec2InstanceIpv6AddressList((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = deserializeAws_ec2PrivateIpAddressSpecificationList((0, smithy_client_1.getArrayIfSingleItem)(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output["secondaryPrivateIpAddressCount"] !== undefined) {
        contents.SecondaryPrivateIpAddressCount = (0, smithy_client_1.strictParseInt32)(output["secondaryPrivateIpAddressCount"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = (0, smithy_client_1.strictParseInt32)(output["networkCardIndex"]);
    }
    if (output.ipv4PrefixSet === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
        contents.Ipv4Prefixes = deserializeAws_ec2Ipv4PrefixListResponse((0, smithy_client_1.getArrayIfSingleItem)(output["ipv4PrefixSet"]["item"]), context);
    }
    if (output["ipv4PrefixCount"] !== undefined) {
        contents.Ipv4PrefixCount = (0, smithy_client_1.strictParseInt32)(output["ipv4PrefixCount"]);
    }
    if (output.ipv6PrefixSet === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
        contents.Ipv6Prefixes = deserializeAws_ec2Ipv6PrefixListResponse((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6PrefixSet"]["item"]), context);
    }
    if (output["ipv6PrefixCount"] !== undefined) {
        contents.Ipv6PrefixCount = (0, smithy_client_1.strictParseInt32)(output["ipv6PrefixCount"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecification(entry, context);
    });
};
const deserializeAws_ec2LaunchTemplateLicenseConfiguration = (output, context) => {
    const contents = {
        LicenseConfigurationArn: undefined,
    };
    if (output["licenseConfigurationArn"] !== undefined) {
        contents.LicenseConfigurationArn = (0, smithy_client_1.expectString)(output["licenseConfigurationArn"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateLicenseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateLicenseConfiguration(entry, context);
    });
};
const deserializeAws_ec2LaunchTemplateOverrides = (output, context) => {
    const contents = {
        InstanceType: undefined,
        SpotPrice: undefined,
        SubnetId: undefined,
        AvailabilityZone: undefined,
        WeightedCapacity: undefined,
        Priority: undefined,
        InstanceRequirements: undefined,
    };
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = (0, smithy_client_1.expectString)(output["spotPrice"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["weightedCapacity"] !== undefined) {
        contents.WeightedCapacity = (0, smithy_client_1.strictParseFloat)(output["weightedCapacity"]);
    }
    if (output["priority"] !== undefined) {
        contents.Priority = (0, smithy_client_1.strictParseFloat)(output["priority"]);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = deserializeAws_ec2InstanceRequirements(output["instanceRequirements"], context);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateOverridesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateOverrides(entry, context);
    });
};
const deserializeAws_ec2LaunchTemplatePlacement = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        Affinity: undefined,
        GroupName: undefined,
        HostId: undefined,
        Tenancy: undefined,
        SpreadDomain: undefined,
        HostResourceGroupArn: undefined,
        PartitionNumber: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["affinity"] !== undefined) {
        contents.Affinity = (0, smithy_client_1.expectString)(output["affinity"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    if (output["hostId"] !== undefined) {
        contents.HostId = (0, smithy_client_1.expectString)(output["hostId"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = (0, smithy_client_1.expectString)(output["tenancy"]);
    }
    if (output["spreadDomain"] !== undefined) {
        contents.SpreadDomain = (0, smithy_client_1.expectString)(output["spreadDomain"]);
    }
    if (output["hostResourceGroupArn"] !== undefined) {
        contents.HostResourceGroupArn = (0, smithy_client_1.expectString)(output["hostResourceGroupArn"]);
    }
    if (output["partitionNumber"] !== undefined) {
        contents.PartitionNumber = (0, smithy_client_1.strictParseInt32)(output["partitionNumber"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplatePrivateDnsNameOptions = (output, context) => {
    const contents = {
        HostnameType: undefined,
        EnableResourceNameDnsARecord: undefined,
        EnableResourceNameDnsAAAARecord: undefined,
    };
    if (output["hostnameType"] !== undefined) {
        contents.HostnameType = (0, smithy_client_1.expectString)(output["hostnameType"]);
    }
    if (output["enableResourceNameDnsARecord"] !== undefined) {
        contents.EnableResourceNameDnsARecord = (0, smithy_client_1.parseBoolean)(output["enableResourceNameDnsARecord"]);
    }
    if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
        contents.EnableResourceNameDnsAAAARecord = (0, smithy_client_1.parseBoolean)(output["enableResourceNameDnsAAAARecord"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplate(entry, context);
    });
};
const deserializeAws_ec2LaunchTemplatesMonitoring = (output, context) => {
    const contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["enabled"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateSpotMarketOptions = (output, context) => {
    const contents = {
        MaxPrice: undefined,
        SpotInstanceType: undefined,
        BlockDurationMinutes: undefined,
        ValidUntil: undefined,
        InstanceInterruptionBehavior: undefined,
    };
    if (output["maxPrice"] !== undefined) {
        contents.MaxPrice = (0, smithy_client_1.expectString)(output["maxPrice"]);
    }
    if (output["spotInstanceType"] !== undefined) {
        contents.SpotInstanceType = (0, smithy_client_1.expectString)(output["spotInstanceType"]);
    }
    if (output["blockDurationMinutes"] !== undefined) {
        contents.BlockDurationMinutes = (0, smithy_client_1.strictParseInt32)(output["blockDurationMinutes"]);
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["validUntil"]));
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = (0, smithy_client_1.expectString)(output["instanceInterruptionBehavior"]);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateTagSpecification = (output, context) => {
    const contents = {
        ResourceType: undefined,
        Tags: undefined,
    };
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateTagSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateTagSpecification(entry, context);
    });
};
const deserializeAws_ec2LaunchTemplateVersion = (output, context) => {
    const contents = {
        LaunchTemplateId: undefined,
        LaunchTemplateName: undefined,
        VersionNumber: undefined,
        VersionDescription: undefined,
        CreateTime: undefined,
        CreatedBy: undefined,
        DefaultVersion: undefined,
        LaunchTemplateData: undefined,
    };
    if (output["launchTemplateId"] !== undefined) {
        contents.LaunchTemplateId = (0, smithy_client_1.expectString)(output["launchTemplateId"]);
    }
    if (output["launchTemplateName"] !== undefined) {
        contents.LaunchTemplateName = (0, smithy_client_1.expectString)(output["launchTemplateName"]);
    }
    if (output["versionNumber"] !== undefined) {
        contents.VersionNumber = (0, smithy_client_1.strictParseLong)(output["versionNumber"]);
    }
    if (output["versionDescription"] !== undefined) {
        contents.VersionDescription = (0, smithy_client_1.expectString)(output["versionDescription"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["createdBy"] !== undefined) {
        contents.CreatedBy = (0, smithy_client_1.expectString)(output["createdBy"]);
    }
    if (output["defaultVersion"] !== undefined) {
        contents.DefaultVersion = (0, smithy_client_1.parseBoolean)(output["defaultVersion"]);
    }
    if (output["launchTemplateData"] !== undefined) {
        contents.LaunchTemplateData = deserializeAws_ec2ResponseLaunchTemplateData(output["launchTemplateData"], context);
    }
    return contents;
};
const deserializeAws_ec2LaunchTemplateVersionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LaunchTemplateVersion(entry, context);
    });
};
const deserializeAws_ec2LicenseConfiguration = (output, context) => {
    const contents = {
        LicenseConfigurationArn: undefined,
    };
    if (output["licenseConfigurationArn"] !== undefined) {
        contents.LicenseConfigurationArn = (0, smithy_client_1.expectString)(output["licenseConfigurationArn"]);
    }
    return contents;
};
const deserializeAws_ec2LicenseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LicenseConfiguration(entry, context);
    });
};
const deserializeAws_ec2ListImagesInRecycleBinResult = (output, context) => {
    const contents = {
        Images: undefined,
        NextToken: undefined,
    };
    if (output.imageSet === "") {
        contents.Images = [];
    }
    else if (output["imageSet"] !== undefined && output["imageSet"]["item"] !== undefined) {
        contents.Images = deserializeAws_ec2ImageRecycleBinInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["imageSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2ListSnapshotsInRecycleBinResult = (output, context) => {
    const contents = {
        Snapshots: undefined,
        NextToken: undefined,
    };
    if (output.snapshotSet === "") {
        contents.Snapshots = [];
    }
    else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
        contents.Snapshots = deserializeAws_ec2SnapshotRecycleBinInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["snapshotSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2LoadBalancersConfig = (output, context) => {
    const contents = {
        ClassicLoadBalancersConfig: undefined,
        TargetGroupsConfig: undefined,
    };
    if (output["classicLoadBalancersConfig"] !== undefined) {
        contents.ClassicLoadBalancersConfig = deserializeAws_ec2ClassicLoadBalancersConfig(output["classicLoadBalancersConfig"], context);
    }
    if (output["targetGroupsConfig"] !== undefined) {
        contents.TargetGroupsConfig = deserializeAws_ec2TargetGroupsConfig(output["targetGroupsConfig"], context);
    }
    return contents;
};
const deserializeAws_ec2LoadPermission = (output, context) => {
    const contents = {
        UserId: undefined,
        Group: undefined,
    };
    if (output["userId"] !== undefined) {
        contents.UserId = (0, smithy_client_1.expectString)(output["userId"]);
    }
    if (output["group"] !== undefined) {
        contents.Group = (0, smithy_client_1.expectString)(output["group"]);
    }
    return contents;
};
const deserializeAws_ec2LoadPermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LoadPermission(entry, context);
    });
};
const deserializeAws_ec2LocalGateway = (output, context) => {
    const contents = {
        LocalGatewayId: undefined,
        OutpostArn: undefined,
        OwnerId: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = (0, smithy_client_1.expectString)(output["localGatewayId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2LocalGatewayRoute = (output, context) => {
    const contents = {
        DestinationCidrBlock: undefined,
        LocalGatewayVirtualInterfaceGroupId: undefined,
        Type: undefined,
        State: undefined,
        LocalGatewayRouteTableId: undefined,
        LocalGatewayRouteTableArn: undefined,
        OwnerId: undefined,
    };
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = (0, smithy_client_1.expectString)(output["destinationCidrBlock"]);
    }
    if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroupId = (0, smithy_client_1.expectString)(output["localGatewayVirtualInterfaceGroupId"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = (0, smithy_client_1.expectString)(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = (0, smithy_client_1.expectString)(output["localGatewayRouteTableArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    return contents;
};
const deserializeAws_ec2LocalGatewayRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayRoute(entry, context);
    });
};
const deserializeAws_ec2LocalGatewayRouteTable = (output, context) => {
    const contents = {
        LocalGatewayRouteTableId: undefined,
        LocalGatewayRouteTableArn: undefined,
        LocalGatewayId: undefined,
        OutpostArn: undefined,
        OwnerId: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = (0, smithy_client_1.expectString)(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = (0, smithy_client_1.expectString)(output["localGatewayRouteTableArn"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = (0, smithy_client_1.expectString)(output["localGatewayId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2LocalGatewayRouteTableSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayRouteTable(entry, context);
    });
};
const deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation = (output, context) => {
    const contents = {
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationId: undefined,
        LocalGatewayVirtualInterfaceGroupId: undefined,
        LocalGatewayId: undefined,
        LocalGatewayRouteTableId: undefined,
        LocalGatewayRouteTableArn: undefined,
        OwnerId: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"] !== undefined) {
        contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId = (0, smithy_client_1.expectString)(output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"]);
    }
    if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroupId = (0, smithy_client_1.expectString)(output["localGatewayVirtualInterfaceGroupId"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = (0, smithy_client_1.expectString)(output["localGatewayId"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = (0, smithy_client_1.expectString)(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = (0, smithy_client_1.expectString)(output["localGatewayRouteTableArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation(entry, context);
    });
};
const deserializeAws_ec2LocalGatewayRouteTableVpcAssociation = (output, context) => {
    const contents = {
        LocalGatewayRouteTableVpcAssociationId: undefined,
        LocalGatewayRouteTableId: undefined,
        LocalGatewayRouteTableArn: undefined,
        LocalGatewayId: undefined,
        VpcId: undefined,
        OwnerId: undefined,
        State: undefined,
        Tags: undefined,
    };
    if (output["localGatewayRouteTableVpcAssociationId"] !== undefined) {
        contents.LocalGatewayRouteTableVpcAssociationId = (0, smithy_client_1.expectString)(output["localGatewayRouteTableVpcAssociationId"]);
    }
    if (output["localGatewayRouteTableId"] !== undefined) {
        contents.LocalGatewayRouteTableId = (0, smithy_client_1.expectString)(output["localGatewayRouteTableId"]);
    }
    if (output["localGatewayRouteTableArn"] !== undefined) {
        contents.LocalGatewayRouteTableArn = (0, smithy_client_1.expectString)(output["localGatewayRouteTableArn"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = (0, smithy_client_1.expectString)(output["localGatewayId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2LocalGatewayRouteTableVpcAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayRouteTableVpcAssociation(entry, context);
    });
};
const deserializeAws_ec2LocalGatewaySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGateway(entry, context);
    });
};
const deserializeAws_ec2LocalGatewayVirtualInterface = (output, context) => {
    const contents = {
        LocalGatewayVirtualInterfaceId: undefined,
        LocalGatewayId: undefined,
        Vlan: undefined,
        LocalAddress: undefined,
        PeerAddress: undefined,
        LocalBgpAsn: undefined,
        PeerBgpAsn: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output["localGatewayVirtualInterfaceId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceId = (0, smithy_client_1.expectString)(output["localGatewayVirtualInterfaceId"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = (0, smithy_client_1.expectString)(output["localGatewayId"]);
    }
    if (output["vlan"] !== undefined) {
        contents.Vlan = (0, smithy_client_1.strictParseInt32)(output["vlan"]);
    }
    if (output["localAddress"] !== undefined) {
        contents.LocalAddress = (0, smithy_client_1.expectString)(output["localAddress"]);
    }
    if (output["peerAddress"] !== undefined) {
        contents.PeerAddress = (0, smithy_client_1.expectString)(output["peerAddress"]);
    }
    if (output["localBgpAsn"] !== undefined) {
        contents.LocalBgpAsn = (0, smithy_client_1.strictParseInt32)(output["localBgpAsn"]);
    }
    if (output["peerBgpAsn"] !== undefined) {
        contents.PeerBgpAsn = (0, smithy_client_1.strictParseInt32)(output["peerBgpAsn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2LocalGatewayVirtualInterfaceGroup = (output, context) => {
    const contents = {
        LocalGatewayVirtualInterfaceGroupId: undefined,
        LocalGatewayVirtualInterfaceIds: undefined,
        LocalGatewayId: undefined,
        OwnerId: undefined,
        Tags: undefined,
    };
    if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceGroupId = (0, smithy_client_1.expectString)(output["localGatewayVirtualInterfaceGroupId"]);
    }
    if (output.localGatewayVirtualInterfaceIdSet === "") {
        contents.LocalGatewayVirtualInterfaceIds = [];
    }
    else if (output["localGatewayVirtualInterfaceIdSet"] !== undefined &&
        output["localGatewayVirtualInterfaceIdSet"]["item"] !== undefined) {
        contents.LocalGatewayVirtualInterfaceIds = deserializeAws_ec2LocalGatewayVirtualInterfaceIdSet((0, smithy_client_1.getArrayIfSingleItem)(output["localGatewayVirtualInterfaceIdSet"]["item"]), context);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = (0, smithy_client_1.expectString)(output["localGatewayId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2LocalGatewayVirtualInterfaceGroupSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayVirtualInterfaceGroup(entry, context);
    });
};
const deserializeAws_ec2LocalGatewayVirtualInterfaceIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2LocalGatewayVirtualInterfaceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2LocalGatewayVirtualInterface(entry, context);
    });
};
const deserializeAws_ec2LocalStorageTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2ManagedPrefixList = (output, context) => {
    const contents = {
        PrefixListId: undefined,
        AddressFamily: undefined,
        State: undefined,
        StateMessage: undefined,
        PrefixListArn: undefined,
        PrefixListName: undefined,
        MaxEntries: undefined,
        Version: undefined,
        Tags: undefined,
        OwnerId: undefined,
    };
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = (0, smithy_client_1.expectString)(output["prefixListId"]);
    }
    if (output["addressFamily"] !== undefined) {
        contents.AddressFamily = (0, smithy_client_1.expectString)(output["addressFamily"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["stateMessage"] !== undefined) {
        contents.StateMessage = (0, smithy_client_1.expectString)(output["stateMessage"]);
    }
    if (output["prefixListArn"] !== undefined) {
        contents.PrefixListArn = (0, smithy_client_1.expectString)(output["prefixListArn"]);
    }
    if (output["prefixListName"] !== undefined) {
        contents.PrefixListName = (0, smithy_client_1.expectString)(output["prefixListName"]);
    }
    if (output["maxEntries"] !== undefined) {
        contents.MaxEntries = (0, smithy_client_1.strictParseInt32)(output["maxEntries"]);
    }
    if (output["version"] !== undefined) {
        contents.Version = (0, smithy_client_1.strictParseLong)(output["version"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    return contents;
};
const deserializeAws_ec2ManagedPrefixListSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ManagedPrefixList(entry, context);
    });
};
const deserializeAws_ec2MemoryGiBPerVCpu = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseFloat)(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseFloat)(output["max"]);
    }
    return contents;
};
const deserializeAws_ec2MemoryInfo = (output, context) => {
    const contents = {
        SizeInMiB: undefined,
    };
    if (output["sizeInMiB"] !== undefined) {
        contents.SizeInMiB = (0, smithy_client_1.strictParseLong)(output["sizeInMiB"]);
    }
    return contents;
};
const deserializeAws_ec2MemoryMiB = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["max"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyAddressAttributeResult = (output, context) => {
    const contents = {
        Address: undefined,
    };
    if (output["address"] !== undefined) {
        contents.Address = deserializeAws_ec2AddressAttribute(output["address"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyAvailabilityZoneGroupResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyCapacityReservationFleetResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyCapacityReservationResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyClientVpnEndpointResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyDefaultCreditSpecificationResult = (output, context) => {
    const contents = {
        InstanceFamilyCreditSpecification: undefined,
    };
    if (output["instanceFamilyCreditSpecification"] !== undefined) {
        contents.InstanceFamilyCreditSpecification = deserializeAws_ec2InstanceFamilyCreditSpecification(output["instanceFamilyCreditSpecification"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyEbsDefaultKmsKeyIdResult = (output, context) => {
    const contents = {
        KmsKeyId: undefined,
    };
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["kmsKeyId"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyFleetResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyFpgaImageAttributeResult = (output, context) => {
    const contents = {
        FpgaImageAttribute: undefined,
    };
    if (output["fpgaImageAttribute"] !== undefined) {
        contents.FpgaImageAttribute = deserializeAws_ec2FpgaImageAttribute(output["fpgaImageAttribute"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyHostsResult = (output, context) => {
    const contents = {
        Successful: undefined,
        Unsuccessful: undefined,
    };
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = deserializeAws_ec2ResponseHostIdList((0, smithy_client_1.getArrayIfSingleItem)(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemList((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ModifyInstanceCapacityReservationAttributesResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyInstanceCreditSpecificationResult = (output, context) => {
    const contents = {
        SuccessfulInstanceCreditSpecifications: undefined,
        UnsuccessfulInstanceCreditSpecifications: undefined,
    };
    if (output.successfulInstanceCreditSpecificationSet === "") {
        contents.SuccessfulInstanceCreditSpecifications = [];
    }
    else if (output["successfulInstanceCreditSpecificationSet"] !== undefined &&
        output["successfulInstanceCreditSpecificationSet"]["item"] !== undefined) {
        contents.SuccessfulInstanceCreditSpecifications = deserializeAws_ec2SuccessfulInstanceCreditSpecificationSet((0, smithy_client_1.getArrayIfSingleItem)(output["successfulInstanceCreditSpecificationSet"]["item"]), context);
    }
    if (output.unsuccessfulInstanceCreditSpecificationSet === "") {
        contents.UnsuccessfulInstanceCreditSpecifications = [];
    }
    else if (output["unsuccessfulInstanceCreditSpecificationSet"] !== undefined &&
        output["unsuccessfulInstanceCreditSpecificationSet"]["item"] !== undefined) {
        contents.UnsuccessfulInstanceCreditSpecifications = deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessfulInstanceCreditSpecificationSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ModifyInstanceEventStartTimeResult = (output, context) => {
    const contents = {
        Event: undefined,
    };
    if (output["event"] !== undefined) {
        contents.Event = deserializeAws_ec2InstanceStatusEvent(output["event"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyInstanceEventWindowResult = (output, context) => {
    const contents = {
        InstanceEventWindow: undefined,
    };
    if (output["instanceEventWindow"] !== undefined) {
        contents.InstanceEventWindow = deserializeAws_ec2InstanceEventWindow(output["instanceEventWindow"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyInstanceMaintenanceOptionsResult = (output, context) => {
    const contents = {
        InstanceId: undefined,
        AutoRecovery: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["autoRecovery"] !== undefined) {
        contents.AutoRecovery = (0, smithy_client_1.expectString)(output["autoRecovery"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyInstanceMetadataOptionsResult = (output, context) => {
    const contents = {
        InstanceId: undefined,
        InstanceMetadataOptions: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["instanceMetadataOptions"] !== undefined) {
        contents.InstanceMetadataOptions = deserializeAws_ec2InstanceMetadataOptionsResponse(output["instanceMetadataOptions"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyInstancePlacementResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyIpamPoolResult = (output, context) => {
    const contents = {
        IpamPool: undefined,
    };
    if (output["ipamPool"] !== undefined) {
        contents.IpamPool = deserializeAws_ec2IpamPool(output["ipamPool"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyIpamResourceCidrResult = (output, context) => {
    const contents = {
        IpamResourceCidr: undefined,
    };
    if (output["ipamResourceCidr"] !== undefined) {
        contents.IpamResourceCidr = deserializeAws_ec2IpamResourceCidr(output["ipamResourceCidr"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyIpamResult = (output, context) => {
    const contents = {
        Ipam: undefined,
    };
    if (output["ipam"] !== undefined) {
        contents.Ipam = deserializeAws_ec2Ipam(output["ipam"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyIpamScopeResult = (output, context) => {
    const contents = {
        IpamScope: undefined,
    };
    if (output["ipamScope"] !== undefined) {
        contents.IpamScope = deserializeAws_ec2IpamScope(output["ipamScope"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyLaunchTemplateResult = (output, context) => {
    const contents = {
        LaunchTemplate: undefined,
    };
    if (output["launchTemplate"] !== undefined) {
        contents.LaunchTemplate = deserializeAws_ec2LaunchTemplate(output["launchTemplate"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyManagedPrefixListResult = (output, context) => {
    const contents = {
        PrefixList: undefined,
    };
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyPrivateDnsNameOptionsResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyReservedInstancesResult = (output, context) => {
    const contents = {
        ReservedInstancesModificationId: undefined,
    };
    if (output["reservedInstancesModificationId"] !== undefined) {
        contents.ReservedInstancesModificationId = (0, smithy_client_1.expectString)(output["reservedInstancesModificationId"]);
    }
    return contents;
};
const deserializeAws_ec2ModifySecurityGroupRulesResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifySnapshotTierResult = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        TieringStartTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["tieringStartTime"] !== undefined) {
        contents.TieringStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["tieringStartTime"]));
    }
    return contents;
};
const deserializeAws_ec2ModifySpotFleetRequestResponse = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesResult = (output, context) => {
    const contents = {
        TrafficMirrorFilter: undefined,
    };
    if (output["trafficMirrorFilter"] !== undefined) {
        contents.TrafficMirrorFilter = deserializeAws_ec2TrafficMirrorFilter(output["trafficMirrorFilter"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyTrafficMirrorFilterRuleResult = (output, context) => {
    const contents = {
        TrafficMirrorFilterRule: undefined,
    };
    if (output["trafficMirrorFilterRule"] !== undefined) {
        contents.TrafficMirrorFilterRule = deserializeAws_ec2TrafficMirrorFilterRule(output["trafficMirrorFilterRule"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyTrafficMirrorSessionResult = (output, context) => {
    const contents = {
        TrafficMirrorSession: undefined,
    };
    if (output["trafficMirrorSession"] !== undefined) {
        contents.TrafficMirrorSession = deserializeAws_ec2TrafficMirrorSession(output["trafficMirrorSession"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceResult = (output, context) => {
    const contents = {
        TransitGatewayPrefixListReference: undefined,
    };
    if (output["transitGatewayPrefixListReference"] !== undefined) {
        contents.TransitGatewayPrefixListReference = deserializeAws_ec2TransitGatewayPrefixListReference(output["transitGatewayPrefixListReference"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyTransitGatewayResult = (output, context) => {
    const contents = {
        TransitGateway: undefined,
    };
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2TransitGateway(output["transitGateway"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyVolumeResult = (output, context) => {
    const contents = {
        VolumeModification: undefined,
    };
    if (output["volumeModification"] !== undefined) {
        contents.VolumeModification = deserializeAws_ec2VolumeModification(output["volumeModification"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpcEndpointConnectionNotificationResult = (output, context) => {
    const contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpcEndpointResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpcEndpointServiceConfigurationResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityResult = (output, context) => {
    const contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpcEndpointServicePermissionsResult = (output, context) => {
    const contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpcPeeringConnectionOptionsResult = (output, context) => {
    const contents = {
        AccepterPeeringConnectionOptions: undefined,
        RequesterPeeringConnectionOptions: undefined,
    };
    if (output["accepterPeeringConnectionOptions"] !== undefined) {
        contents.AccepterPeeringConnectionOptions = deserializeAws_ec2PeeringConnectionOptions(output["accepterPeeringConnectionOptions"], context);
    }
    if (output["requesterPeeringConnectionOptions"] !== undefined) {
        contents.RequesterPeeringConnectionOptions = deserializeAws_ec2PeeringConnectionOptions(output["requesterPeeringConnectionOptions"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpcTenancyResult = (output, context) => {
    const contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpnConnectionOptionsResult = (output, context) => {
    const contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpnConnectionResult = (output, context) => {
    const contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpnTunnelCertificateResult = (output, context) => {
    const contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const deserializeAws_ec2ModifyVpnTunnelOptionsResult = (output, context) => {
    const contents = {
        VpnConnection: undefined,
    };
    if (output["vpnConnection"] !== undefined) {
        contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
    }
    return contents;
};
const deserializeAws_ec2Monitoring = (output, context) => {
    const contents = {
        State: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2MonitorInstancesResult = (output, context) => {
    const contents = {
        InstanceMonitorings: undefined,
    };
    if (output.instancesSet === "") {
        contents.InstanceMonitorings = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.InstanceMonitorings = deserializeAws_ec2InstanceMonitoringList((0, smithy_client_1.getArrayIfSingleItem)(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2MoveAddressToVpcResult = (output, context) => {
    const contents = {
        AllocationId: undefined,
        Status: undefined,
    };
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = (0, smithy_client_1.expectString)(output["allocationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    return contents;
};
const deserializeAws_ec2MoveByoipCidrToIpamResult = (output, context) => {
    const contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const deserializeAws_ec2MovingAddressStatus = (output, context) => {
    const contents = {
        MoveStatus: undefined,
        PublicIp: undefined,
    };
    if (output["moveStatus"] !== undefined) {
        contents.MoveStatus = (0, smithy_client_1.expectString)(output["moveStatus"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = (0, smithy_client_1.expectString)(output["publicIp"]);
    }
    return contents;
};
const deserializeAws_ec2MovingAddressStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2MovingAddressStatus(entry, context);
    });
};
const deserializeAws_ec2NatGateway = (output, context) => {
    const contents = {
        CreateTime: undefined,
        DeleteTime: undefined,
        FailureCode: undefined,
        FailureMessage: undefined,
        NatGatewayAddresses: undefined,
        NatGatewayId: undefined,
        ProvisionedBandwidth: undefined,
        State: undefined,
        SubnetId: undefined,
        VpcId: undefined,
        Tags: undefined,
        ConnectivityType: undefined,
    };
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["deleteTime"] !== undefined) {
        contents.DeleteTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["deleteTime"]));
    }
    if (output["failureCode"] !== undefined) {
        contents.FailureCode = (0, smithy_client_1.expectString)(output["failureCode"]);
    }
    if (output["failureMessage"] !== undefined) {
        contents.FailureMessage = (0, smithy_client_1.expectString)(output["failureMessage"]);
    }
    if (output.natGatewayAddressSet === "") {
        contents.NatGatewayAddresses = [];
    }
    else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
        contents.NatGatewayAddresses = deserializeAws_ec2NatGatewayAddressList((0, smithy_client_1.getArrayIfSingleItem)(output["natGatewayAddressSet"]["item"]), context);
    }
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = (0, smithy_client_1.expectString)(output["natGatewayId"]);
    }
    if (output["provisionedBandwidth"] !== undefined) {
        contents.ProvisionedBandwidth = deserializeAws_ec2ProvisionedBandwidth(output["provisionedBandwidth"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["connectivityType"] !== undefined) {
        contents.ConnectivityType = (0, smithy_client_1.expectString)(output["connectivityType"]);
    }
    return contents;
};
const deserializeAws_ec2NatGatewayAddress = (output, context) => {
    const contents = {
        AllocationId: undefined,
        NetworkInterfaceId: undefined,
        PrivateIp: undefined,
        PublicIp: undefined,
    };
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = (0, smithy_client_1.expectString)(output["allocationId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["privateIp"] !== undefined) {
        contents.PrivateIp = (0, smithy_client_1.expectString)(output["privateIp"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = (0, smithy_client_1.expectString)(output["publicIp"]);
    }
    return contents;
};
const deserializeAws_ec2NatGatewayAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NatGatewayAddress(entry, context);
    });
};
const deserializeAws_ec2NatGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NatGateway(entry, context);
    });
};
const deserializeAws_ec2NetworkAcl = (output, context) => {
    const contents = {
        Associations: undefined,
        Entries: undefined,
        IsDefault: undefined,
        NetworkAclId: undefined,
        Tags: undefined,
        VpcId: undefined,
        OwnerId: undefined,
    };
    if (output.associationSet === "") {
        contents.Associations = [];
    }
    else if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
        contents.Associations = deserializeAws_ec2NetworkAclAssociationList((0, smithy_client_1.getArrayIfSingleItem)(output["associationSet"]["item"]), context);
    }
    if (output.entrySet === "") {
        contents.Entries = [];
    }
    else if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
        contents.Entries = deserializeAws_ec2NetworkAclEntryList((0, smithy_client_1.getArrayIfSingleItem)(output["entrySet"]["item"]), context);
    }
    if (output["default"] !== undefined) {
        contents.IsDefault = (0, smithy_client_1.parseBoolean)(output["default"]);
    }
    if (output["networkAclId"] !== undefined) {
        contents.NetworkAclId = (0, smithy_client_1.expectString)(output["networkAclId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkAclAssociation = (output, context) => {
    const contents = {
        NetworkAclAssociationId: undefined,
        NetworkAclId: undefined,
        SubnetId: undefined,
    };
    if (output["networkAclAssociationId"] !== undefined) {
        contents.NetworkAclAssociationId = (0, smithy_client_1.expectString)(output["networkAclAssociationId"]);
    }
    if (output["networkAclId"] !== undefined) {
        contents.NetworkAclId = (0, smithy_client_1.expectString)(output["networkAclId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkAclAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkAclAssociation(entry, context);
    });
};
const deserializeAws_ec2NetworkAclEntry = (output, context) => {
    const contents = {
        CidrBlock: undefined,
        Egress: undefined,
        IcmpTypeCode: undefined,
        Ipv6CidrBlock: undefined,
        PortRange: undefined,
        Protocol: undefined,
        RuleAction: undefined,
        RuleNumber: undefined,
    };
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = (0, smithy_client_1.expectString)(output["cidrBlock"]);
    }
    if (output["egress"] !== undefined) {
        contents.Egress = (0, smithy_client_1.parseBoolean)(output["egress"]);
    }
    if (output["icmpTypeCode"] !== undefined) {
        contents.IcmpTypeCode = deserializeAws_ec2IcmpTypeCode(output["icmpTypeCode"], context);
    }
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = (0, smithy_client_1.expectString)(output["ipv6CidrBlock"]);
    }
    if (output["portRange"] !== undefined) {
        contents.PortRange = deserializeAws_ec2PortRange(output["portRange"], context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["protocol"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = (0, smithy_client_1.expectString)(output["ruleAction"]);
    }
    if (output["ruleNumber"] !== undefined) {
        contents.RuleNumber = (0, smithy_client_1.strictParseInt32)(output["ruleNumber"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkAclEntryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkAclEntry(entry, context);
    });
};
const deserializeAws_ec2NetworkAclList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkAcl(entry, context);
    });
};
const deserializeAws_ec2NetworkCardInfo = (output, context) => {
    const contents = {
        NetworkCardIndex: undefined,
        NetworkPerformance: undefined,
        MaximumNetworkInterfaces: undefined,
    };
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = (0, smithy_client_1.strictParseInt32)(output["networkCardIndex"]);
    }
    if (output["networkPerformance"] !== undefined) {
        contents.NetworkPerformance = (0, smithy_client_1.expectString)(output["networkPerformance"]);
    }
    if (output["maximumNetworkInterfaces"] !== undefined) {
        contents.MaximumNetworkInterfaces = (0, smithy_client_1.strictParseInt32)(output["maximumNetworkInterfaces"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkCardInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkCardInfo(entry, context);
    });
};
const deserializeAws_ec2NetworkInfo = (output, context) => {
    const contents = {
        NetworkPerformance: undefined,
        MaximumNetworkInterfaces: undefined,
        MaximumNetworkCards: undefined,
        DefaultNetworkCardIndex: undefined,
        NetworkCards: undefined,
        Ipv4AddressesPerInterface: undefined,
        Ipv6AddressesPerInterface: undefined,
        Ipv6Supported: undefined,
        EnaSupport: undefined,
        EfaSupported: undefined,
        EfaInfo: undefined,
        EncryptionInTransitSupported: undefined,
    };
    if (output["networkPerformance"] !== undefined) {
        contents.NetworkPerformance = (0, smithy_client_1.expectString)(output["networkPerformance"]);
    }
    if (output["maximumNetworkInterfaces"] !== undefined) {
        contents.MaximumNetworkInterfaces = (0, smithy_client_1.strictParseInt32)(output["maximumNetworkInterfaces"]);
    }
    if (output["maximumNetworkCards"] !== undefined) {
        contents.MaximumNetworkCards = (0, smithy_client_1.strictParseInt32)(output["maximumNetworkCards"]);
    }
    if (output["defaultNetworkCardIndex"] !== undefined) {
        contents.DefaultNetworkCardIndex = (0, smithy_client_1.strictParseInt32)(output["defaultNetworkCardIndex"]);
    }
    if (output.networkCards === "") {
        contents.NetworkCards = [];
    }
    else if (output["networkCards"] !== undefined && output["networkCards"]["item"] !== undefined) {
        contents.NetworkCards = deserializeAws_ec2NetworkCardInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["networkCards"]["item"]), context);
    }
    if (output["ipv4AddressesPerInterface"] !== undefined) {
        contents.Ipv4AddressesPerInterface = (0, smithy_client_1.strictParseInt32)(output["ipv4AddressesPerInterface"]);
    }
    if (output["ipv6AddressesPerInterface"] !== undefined) {
        contents.Ipv6AddressesPerInterface = (0, smithy_client_1.strictParseInt32)(output["ipv6AddressesPerInterface"]);
    }
    if (output["ipv6Supported"] !== undefined) {
        contents.Ipv6Supported = (0, smithy_client_1.parseBoolean)(output["ipv6Supported"]);
    }
    if (output["enaSupport"] !== undefined) {
        contents.EnaSupport = (0, smithy_client_1.expectString)(output["enaSupport"]);
    }
    if (output["efaSupported"] !== undefined) {
        contents.EfaSupported = (0, smithy_client_1.parseBoolean)(output["efaSupported"]);
    }
    if (output["efaInfo"] !== undefined) {
        contents.EfaInfo = deserializeAws_ec2EfaInfo(output["efaInfo"], context);
    }
    if (output["encryptionInTransitSupported"] !== undefined) {
        contents.EncryptionInTransitSupported = (0, smithy_client_1.parseBoolean)(output["encryptionInTransitSupported"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkInsightsAccessScope = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeId: undefined,
        NetworkInsightsAccessScopeArn: undefined,
        CreatedDate: undefined,
        UpdatedDate: undefined,
        Tags: undefined,
    };
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeId"]);
    }
    if (output["networkInsightsAccessScopeArn"] !== undefined) {
        contents.NetworkInsightsAccessScopeArn = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeArn"]);
    }
    if (output["createdDate"] !== undefined) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createdDate"]));
    }
    if (output["updatedDate"] !== undefined) {
        contents.UpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["updatedDate"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2NetworkInsightsAccessScopeAnalysis = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeAnalysisId: undefined,
        NetworkInsightsAccessScopeAnalysisArn: undefined,
        NetworkInsightsAccessScopeId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        WarningMessage: undefined,
        StartDate: undefined,
        EndDate: undefined,
        FindingsFound: undefined,
        AnalyzedEniCount: undefined,
        Tags: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisId = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeAnalysisId"]);
    }
    if (output["networkInsightsAccessScopeAnalysisArn"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysisArn = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeAnalysisArn"]);
    }
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["warningMessage"] !== undefined) {
        contents.WarningMessage = (0, smithy_client_1.expectString)(output["warningMessage"]);
    }
    if (output["startDate"] !== undefined) {
        contents.StartDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startDate"]));
    }
    if (output["endDate"] !== undefined) {
        contents.EndDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["endDate"]));
    }
    if (output["findingsFound"] !== undefined) {
        contents.FindingsFound = (0, smithy_client_1.expectString)(output["findingsFound"]);
    }
    if (output["analyzedEniCount"] !== undefined) {
        contents.AnalyzedEniCount = (0, smithy_client_1.strictParseInt32)(output["analyzedEniCount"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2NetworkInsightsAccessScopeAnalysisList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInsightsAccessScopeAnalysis(entry, context);
    });
};
const deserializeAws_ec2NetworkInsightsAccessScopeContent = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeId: undefined,
        MatchPaths: undefined,
        ExcludePaths: undefined,
    };
    if (output["networkInsightsAccessScopeId"] !== undefined) {
        contents.NetworkInsightsAccessScopeId = (0, smithy_client_1.expectString)(output["networkInsightsAccessScopeId"]);
    }
    if (output.matchPathSet === "") {
        contents.MatchPaths = [];
    }
    else if (output["matchPathSet"] !== undefined && output["matchPathSet"]["item"] !== undefined) {
        contents.MatchPaths = deserializeAws_ec2AccessScopePathList((0, smithy_client_1.getArrayIfSingleItem)(output["matchPathSet"]["item"]), context);
    }
    if (output.excludePathSet === "") {
        contents.ExcludePaths = [];
    }
    else if (output["excludePathSet"] !== undefined && output["excludePathSet"]["item"] !== undefined) {
        contents.ExcludePaths = deserializeAws_ec2AccessScopePathList((0, smithy_client_1.getArrayIfSingleItem)(output["excludePathSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2NetworkInsightsAccessScopeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInsightsAccessScope(entry, context);
    });
};
const deserializeAws_ec2NetworkInsightsAnalysis = (output, context) => {
    const contents = {
        NetworkInsightsAnalysisId: undefined,
        NetworkInsightsAnalysisArn: undefined,
        NetworkInsightsPathId: undefined,
        FilterInArns: undefined,
        StartDate: undefined,
        Status: undefined,
        StatusMessage: undefined,
        WarningMessage: undefined,
        NetworkPathFound: undefined,
        ForwardPathComponents: undefined,
        ReturnPathComponents: undefined,
        Explanations: undefined,
        AlternatePathHints: undefined,
        Tags: undefined,
    };
    if (output["networkInsightsAnalysisId"] !== undefined) {
        contents.NetworkInsightsAnalysisId = (0, smithy_client_1.expectString)(output["networkInsightsAnalysisId"]);
    }
    if (output["networkInsightsAnalysisArn"] !== undefined) {
        contents.NetworkInsightsAnalysisArn = (0, smithy_client_1.expectString)(output["networkInsightsAnalysisArn"]);
    }
    if (output["networkInsightsPathId"] !== undefined) {
        contents.NetworkInsightsPathId = (0, smithy_client_1.expectString)(output["networkInsightsPathId"]);
    }
    if (output.filterInArnSet === "") {
        contents.FilterInArns = [];
    }
    else if (output["filterInArnSet"] !== undefined && output["filterInArnSet"]["item"] !== undefined) {
        contents.FilterInArns = deserializeAws_ec2ArnList((0, smithy_client_1.getArrayIfSingleItem)(output["filterInArnSet"]["item"]), context);
    }
    if (output["startDate"] !== undefined) {
        contents.StartDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startDate"]));
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["warningMessage"] !== undefined) {
        contents.WarningMessage = (0, smithy_client_1.expectString)(output["warningMessage"]);
    }
    if (output["networkPathFound"] !== undefined) {
        contents.NetworkPathFound = (0, smithy_client_1.parseBoolean)(output["networkPathFound"]);
    }
    if (output.forwardPathComponentSet === "") {
        contents.ForwardPathComponents = [];
    }
    else if (output["forwardPathComponentSet"] !== undefined &&
        output["forwardPathComponentSet"]["item"] !== undefined) {
        contents.ForwardPathComponents = deserializeAws_ec2PathComponentList((0, smithy_client_1.getArrayIfSingleItem)(output["forwardPathComponentSet"]["item"]), context);
    }
    if (output.returnPathComponentSet === "") {
        contents.ReturnPathComponents = [];
    }
    else if (output["returnPathComponentSet"] !== undefined && output["returnPathComponentSet"]["item"] !== undefined) {
        contents.ReturnPathComponents = deserializeAws_ec2PathComponentList((0, smithy_client_1.getArrayIfSingleItem)(output["returnPathComponentSet"]["item"]), context);
    }
    if (output.explanationSet === "") {
        contents.Explanations = [];
    }
    else if (output["explanationSet"] !== undefined && output["explanationSet"]["item"] !== undefined) {
        contents.Explanations = deserializeAws_ec2ExplanationList((0, smithy_client_1.getArrayIfSingleItem)(output["explanationSet"]["item"]), context);
    }
    if (output.alternatePathHintSet === "") {
        contents.AlternatePathHints = [];
    }
    else if (output["alternatePathHintSet"] !== undefined && output["alternatePathHintSet"]["item"] !== undefined) {
        contents.AlternatePathHints = deserializeAws_ec2AlternatePathHintList((0, smithy_client_1.getArrayIfSingleItem)(output["alternatePathHintSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2NetworkInsightsAnalysisList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInsightsAnalysis(entry, context);
    });
};
const deserializeAws_ec2NetworkInsightsPath = (output, context) => {
    const contents = {
        NetworkInsightsPathId: undefined,
        NetworkInsightsPathArn: undefined,
        CreatedDate: undefined,
        Source: undefined,
        Destination: undefined,
        SourceIp: undefined,
        DestinationIp: undefined,
        Protocol: undefined,
        DestinationPort: undefined,
        Tags: undefined,
    };
    if (output["networkInsightsPathId"] !== undefined) {
        contents.NetworkInsightsPathId = (0, smithy_client_1.expectString)(output["networkInsightsPathId"]);
    }
    if (output["networkInsightsPathArn"] !== undefined) {
        contents.NetworkInsightsPathArn = (0, smithy_client_1.expectString)(output["networkInsightsPathArn"]);
    }
    if (output["createdDate"] !== undefined) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createdDate"]));
    }
    if (output["source"] !== undefined) {
        contents.Source = (0, smithy_client_1.expectString)(output["source"]);
    }
    if (output["destination"] !== undefined) {
        contents.Destination = (0, smithy_client_1.expectString)(output["destination"]);
    }
    if (output["sourceIp"] !== undefined) {
        contents.SourceIp = (0, smithy_client_1.expectString)(output["sourceIp"]);
    }
    if (output["destinationIp"] !== undefined) {
        contents.DestinationIp = (0, smithy_client_1.expectString)(output["destinationIp"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["protocol"]);
    }
    if (output["destinationPort"] !== undefined) {
        contents.DestinationPort = (0, smithy_client_1.strictParseInt32)(output["destinationPort"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2NetworkInsightsPathList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInsightsPath(entry, context);
    });
};
const deserializeAws_ec2NetworkInterface = (output, context) => {
    const contents = {
        Association: undefined,
        Attachment: undefined,
        AvailabilityZone: undefined,
        Description: undefined,
        Groups: undefined,
        InterfaceType: undefined,
        Ipv6Addresses: undefined,
        MacAddress: undefined,
        NetworkInterfaceId: undefined,
        OutpostArn: undefined,
        OwnerId: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
        PrivateIpAddresses: undefined,
        Ipv4Prefixes: undefined,
        Ipv6Prefixes: undefined,
        RequesterId: undefined,
        RequesterManaged: undefined,
        SourceDestCheck: undefined,
        Status: undefined,
        SubnetId: undefined,
        TagSet: undefined,
        VpcId: undefined,
        DenyAllIgwTraffic: undefined,
        Ipv6Native: undefined,
        Ipv6Address: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2NetworkInterfaceAssociation(output["association"], context);
    }
    if (output["attachment"] !== undefined) {
        contents.Attachment = deserializeAws_ec2NetworkInterfaceAttachment(output["attachment"], context);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output["interfaceType"] !== undefined) {
        contents.InterfaceType = (0, smithy_client_1.expectString)(output["interfaceType"]);
    }
    if (output.ipv6AddressesSet === "") {
        contents.Ipv6Addresses = [];
    }
    else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
        contents.Ipv6Addresses = deserializeAws_ec2NetworkInterfaceIpv6AddressesList((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6AddressesSet"]["item"]), context);
    }
    if (output["macAddress"] !== undefined) {
        contents.MacAddress = (0, smithy_client_1.expectString)(output["macAddress"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = (0, smithy_client_1.expectString)(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    if (output.privateIpAddressesSet === "") {
        contents.PrivateIpAddresses = [];
    }
    else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
        contents.PrivateIpAddresses = deserializeAws_ec2NetworkInterfacePrivateIpAddressList((0, smithy_client_1.getArrayIfSingleItem)(output["privateIpAddressesSet"]["item"]), context);
    }
    if (output.ipv4PrefixSet === "") {
        contents.Ipv4Prefixes = [];
    }
    else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
        contents.Ipv4Prefixes = deserializeAws_ec2Ipv4PrefixesList((0, smithy_client_1.getArrayIfSingleItem)(output["ipv4PrefixSet"]["item"]), context);
    }
    if (output.ipv6PrefixSet === "") {
        contents.Ipv6Prefixes = [];
    }
    else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
        contents.Ipv6Prefixes = deserializeAws_ec2Ipv6PrefixesList((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6PrefixSet"]["item"]), context);
    }
    if (output["requesterId"] !== undefined) {
        contents.RequesterId = (0, smithy_client_1.expectString)(output["requesterId"]);
    }
    if (output["requesterManaged"] !== undefined) {
        contents.RequesterManaged = (0, smithy_client_1.parseBoolean)(output["requesterManaged"]);
    }
    if (output["sourceDestCheck"] !== undefined) {
        contents.SourceDestCheck = (0, smithy_client_1.parseBoolean)(output["sourceDestCheck"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output.tagSet === "") {
        contents.TagSet = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.TagSet = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["denyAllIgwTraffic"] !== undefined) {
        contents.DenyAllIgwTraffic = (0, smithy_client_1.parseBoolean)(output["denyAllIgwTraffic"]);
    }
    if (output["ipv6Native"] !== undefined) {
        contents.Ipv6Native = (0, smithy_client_1.parseBoolean)(output["ipv6Native"]);
    }
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = (0, smithy_client_1.expectString)(output["ipv6Address"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkInterfaceAssociation = (output, context) => {
    const contents = {
        AllocationId: undefined,
        AssociationId: undefined,
        IpOwnerId: undefined,
        PublicDnsName: undefined,
        PublicIp: undefined,
        CustomerOwnedIp: undefined,
        CarrierIp: undefined,
    };
    if (output["allocationId"] !== undefined) {
        contents.AllocationId = (0, smithy_client_1.expectString)(output["allocationId"]);
    }
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["ipOwnerId"] !== undefined) {
        contents.IpOwnerId = (0, smithy_client_1.expectString)(output["ipOwnerId"]);
    }
    if (output["publicDnsName"] !== undefined) {
        contents.PublicDnsName = (0, smithy_client_1.expectString)(output["publicDnsName"]);
    }
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = (0, smithy_client_1.expectString)(output["publicIp"]);
    }
    if (output["customerOwnedIp"] !== undefined) {
        contents.CustomerOwnedIp = (0, smithy_client_1.expectString)(output["customerOwnedIp"]);
    }
    if (output["carrierIp"] !== undefined) {
        contents.CarrierIp = (0, smithy_client_1.expectString)(output["carrierIp"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkInterfaceAttachment = (output, context) => {
    const contents = {
        AttachTime: undefined,
        AttachmentId: undefined,
        DeleteOnTermination: undefined,
        DeviceIndex: undefined,
        NetworkCardIndex: undefined,
        InstanceId: undefined,
        InstanceOwnerId: undefined,
        Status: undefined,
    };
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["attachTime"]));
    }
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = (0, smithy_client_1.expectString)(output["attachmentId"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = (0, smithy_client_1.parseBoolean)(output["deleteOnTermination"]);
    }
    if (output["deviceIndex"] !== undefined) {
        contents.DeviceIndex = (0, smithy_client_1.strictParseInt32)(output["deviceIndex"]);
    }
    if (output["networkCardIndex"] !== undefined) {
        contents.NetworkCardIndex = (0, smithy_client_1.strictParseInt32)(output["networkCardIndex"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["instanceOwnerId"] !== undefined) {
        contents.InstanceOwnerId = (0, smithy_client_1.expectString)(output["instanceOwnerId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkInterfaceCount = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["max"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkInterfaceIpv6Address = (output, context) => {
    const contents = {
        Ipv6Address: undefined,
    };
    if (output["ipv6Address"] !== undefined) {
        contents.Ipv6Address = (0, smithy_client_1.expectString)(output["ipv6Address"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkInterfaceIpv6AddressesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInterfaceIpv6Address(entry, context);
    });
};
const deserializeAws_ec2NetworkInterfaceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInterface(entry, context);
    });
};
const deserializeAws_ec2NetworkInterfacePermission = (output, context) => {
    const contents = {
        NetworkInterfacePermissionId: undefined,
        NetworkInterfaceId: undefined,
        AwsAccountId: undefined,
        AwsService: undefined,
        Permission: undefined,
        PermissionState: undefined,
    };
    if (output["networkInterfacePermissionId"] !== undefined) {
        contents.NetworkInterfacePermissionId = (0, smithy_client_1.expectString)(output["networkInterfacePermissionId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["awsAccountId"] !== undefined) {
        contents.AwsAccountId = (0, smithy_client_1.expectString)(output["awsAccountId"]);
    }
    if (output["awsService"] !== undefined) {
        contents.AwsService = (0, smithy_client_1.expectString)(output["awsService"]);
    }
    if (output["permission"] !== undefined) {
        contents.Permission = (0, smithy_client_1.expectString)(output["permission"]);
    }
    if (output["permissionState"] !== undefined) {
        contents.PermissionState = deserializeAws_ec2NetworkInterfacePermissionState(output["permissionState"], context);
    }
    return contents;
};
const deserializeAws_ec2NetworkInterfacePermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInterfacePermission(entry, context);
    });
};
const deserializeAws_ec2NetworkInterfacePermissionState = (output, context) => {
    const contents = {
        State: undefined,
        StatusMessage: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkInterfacePrivateIpAddress = (output, context) => {
    const contents = {
        Association: undefined,
        Primary: undefined,
        PrivateDnsName: undefined,
        PrivateIpAddress: undefined,
    };
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2NetworkInterfaceAssociation(output["association"], context);
    }
    if (output["primary"] !== undefined) {
        contents.Primary = (0, smithy_client_1.parseBoolean)(output["primary"]);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = (0, smithy_client_1.expectString)(output["privateDnsName"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    return contents;
};
const deserializeAws_ec2NetworkInterfacePrivateIpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2NetworkInterfacePrivateIpAddress(entry, context);
    });
};
const deserializeAws_ec2OccurrenceDaySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.strictParseInt32)(entry);
    });
};
const deserializeAws_ec2OnDemandOptions = (output, context) => {
    const contents = {
        AllocationStrategy: undefined,
        CapacityReservationOptions: undefined,
        SingleInstanceType: undefined,
        SingleAvailabilityZone: undefined,
        MinTargetCapacity: undefined,
        MaxTotalPrice: undefined,
    };
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = (0, smithy_client_1.expectString)(output["allocationStrategy"]);
    }
    if (output["capacityReservationOptions"] !== undefined) {
        contents.CapacityReservationOptions = deserializeAws_ec2CapacityReservationOptions(output["capacityReservationOptions"], context);
    }
    if (output["singleInstanceType"] !== undefined) {
        contents.SingleInstanceType = (0, smithy_client_1.parseBoolean)(output["singleInstanceType"]);
    }
    if (output["singleAvailabilityZone"] !== undefined) {
        contents.SingleAvailabilityZone = (0, smithy_client_1.parseBoolean)(output["singleAvailabilityZone"]);
    }
    if (output["minTargetCapacity"] !== undefined) {
        contents.MinTargetCapacity = (0, smithy_client_1.strictParseInt32)(output["minTargetCapacity"]);
    }
    if (output["maxTotalPrice"] !== undefined) {
        contents.MaxTotalPrice = (0, smithy_client_1.expectString)(output["maxTotalPrice"]);
    }
    return contents;
};
const deserializeAws_ec2PacketHeaderStatement = (output, context) => {
    const contents = {
        SourceAddresses: undefined,
        DestinationAddresses: undefined,
        SourcePorts: undefined,
        DestinationPorts: undefined,
        SourcePrefixLists: undefined,
        DestinationPrefixLists: undefined,
        Protocols: undefined,
    };
    if (output.sourceAddressSet === "") {
        contents.SourceAddresses = [];
    }
    else if (output["sourceAddressSet"] !== undefined && output["sourceAddressSet"]["item"] !== undefined) {
        contents.SourceAddresses = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["sourceAddressSet"]["item"]), context);
    }
    if (output.destinationAddressSet === "") {
        contents.DestinationAddresses = [];
    }
    else if (output["destinationAddressSet"] !== undefined && output["destinationAddressSet"]["item"] !== undefined) {
        contents.DestinationAddresses = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["destinationAddressSet"]["item"]), context);
    }
    if (output.sourcePortSet === "") {
        contents.SourcePorts = [];
    }
    else if (output["sourcePortSet"] !== undefined && output["sourcePortSet"]["item"] !== undefined) {
        contents.SourcePorts = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["sourcePortSet"]["item"]), context);
    }
    if (output.destinationPortSet === "") {
        contents.DestinationPorts = [];
    }
    else if (output["destinationPortSet"] !== undefined && output["destinationPortSet"]["item"] !== undefined) {
        contents.DestinationPorts = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["destinationPortSet"]["item"]), context);
    }
    if (output.sourcePrefixListSet === "") {
        contents.SourcePrefixLists = [];
    }
    else if (output["sourcePrefixListSet"] !== undefined && output["sourcePrefixListSet"]["item"] !== undefined) {
        contents.SourcePrefixLists = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["sourcePrefixListSet"]["item"]), context);
    }
    if (output.destinationPrefixListSet === "") {
        contents.DestinationPrefixLists = [];
    }
    else if (output["destinationPrefixListSet"] !== undefined &&
        output["destinationPrefixListSet"]["item"] !== undefined) {
        contents.DestinationPrefixLists = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["destinationPrefixListSet"]["item"]), context);
    }
    if (output.protocolSet === "") {
        contents.Protocols = [];
    }
    else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
        contents.Protocols = deserializeAws_ec2ProtocolList((0, smithy_client_1.getArrayIfSingleItem)(output["protocolSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2PathComponent = (output, context) => {
    const contents = {
        SequenceNumber: undefined,
        AclRule: undefined,
        AttachedTo: undefined,
        Component: undefined,
        DestinationVpc: undefined,
        OutboundHeader: undefined,
        InboundHeader: undefined,
        RouteTableRoute: undefined,
        SecurityGroupRule: undefined,
        SourceVpc: undefined,
        Subnet: undefined,
        Vpc: undefined,
        AdditionalDetails: undefined,
        TransitGateway: undefined,
        TransitGatewayRouteTableRoute: undefined,
    };
    if (output["sequenceNumber"] !== undefined) {
        contents.SequenceNumber = (0, smithy_client_1.strictParseInt32)(output["sequenceNumber"]);
    }
    if (output["aclRule"] !== undefined) {
        contents.AclRule = deserializeAws_ec2AnalysisAclRule(output["aclRule"], context);
    }
    if (output["attachedTo"] !== undefined) {
        contents.AttachedTo = deserializeAws_ec2AnalysisComponent(output["attachedTo"], context);
    }
    if (output["component"] !== undefined) {
        contents.Component = deserializeAws_ec2AnalysisComponent(output["component"], context);
    }
    if (output["destinationVpc"] !== undefined) {
        contents.DestinationVpc = deserializeAws_ec2AnalysisComponent(output["destinationVpc"], context);
    }
    if (output["outboundHeader"] !== undefined) {
        contents.OutboundHeader = deserializeAws_ec2AnalysisPacketHeader(output["outboundHeader"], context);
    }
    if (output["inboundHeader"] !== undefined) {
        contents.InboundHeader = deserializeAws_ec2AnalysisPacketHeader(output["inboundHeader"], context);
    }
    if (output["routeTableRoute"] !== undefined) {
        contents.RouteTableRoute = deserializeAws_ec2AnalysisRouteTableRoute(output["routeTableRoute"], context);
    }
    if (output["securityGroupRule"] !== undefined) {
        contents.SecurityGroupRule = deserializeAws_ec2AnalysisSecurityGroupRule(output["securityGroupRule"], context);
    }
    if (output["sourceVpc"] !== undefined) {
        contents.SourceVpc = deserializeAws_ec2AnalysisComponent(output["sourceVpc"], context);
    }
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2AnalysisComponent(output["subnet"], context);
    }
    if (output["vpc"] !== undefined) {
        contents.Vpc = deserializeAws_ec2AnalysisComponent(output["vpc"], context);
    }
    if (output.additionalDetailSet === "") {
        contents.AdditionalDetails = [];
    }
    else if (output["additionalDetailSet"] !== undefined && output["additionalDetailSet"]["item"] !== undefined) {
        contents.AdditionalDetails = deserializeAws_ec2AdditionalDetailList((0, smithy_client_1.getArrayIfSingleItem)(output["additionalDetailSet"]["item"]), context);
    }
    if (output["transitGateway"] !== undefined) {
        contents.TransitGateway = deserializeAws_ec2AnalysisComponent(output["transitGateway"], context);
    }
    if (output["transitGatewayRouteTableRoute"] !== undefined) {
        contents.TransitGatewayRouteTableRoute = deserializeAws_ec2TransitGatewayRouteTableRoute(output["transitGatewayRouteTableRoute"], context);
    }
    return contents;
};
const deserializeAws_ec2PathComponentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PathComponent(entry, context);
    });
};
const deserializeAws_ec2PathStatement = (output, context) => {
    const contents = {
        PacketHeaderStatement: undefined,
        ResourceStatement: undefined,
    };
    if (output["packetHeaderStatement"] !== undefined) {
        contents.PacketHeaderStatement = deserializeAws_ec2PacketHeaderStatement(output["packetHeaderStatement"], context);
    }
    if (output["resourceStatement"] !== undefined) {
        contents.ResourceStatement = deserializeAws_ec2ResourceStatement(output["resourceStatement"], context);
    }
    return contents;
};
const deserializeAws_ec2PciId = (output, context) => {
    const contents = {
        DeviceId: undefined,
        VendorId: undefined,
        SubsystemId: undefined,
        SubsystemVendorId: undefined,
    };
    if (output["DeviceId"] !== undefined) {
        contents.DeviceId = (0, smithy_client_1.expectString)(output["DeviceId"]);
    }
    if (output["VendorId"] !== undefined) {
        contents.VendorId = (0, smithy_client_1.expectString)(output["VendorId"]);
    }
    if (output["SubsystemId"] !== undefined) {
        contents.SubsystemId = (0, smithy_client_1.expectString)(output["SubsystemId"]);
    }
    if (output["SubsystemVendorId"] !== undefined) {
        contents.SubsystemVendorId = (0, smithy_client_1.expectString)(output["SubsystemVendorId"]);
    }
    return contents;
};
const deserializeAws_ec2PeeringAttachmentStatus = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2PeeringConnectionOptions = (output, context) => {
    const contents = {
        AllowDnsResolutionFromRemoteVpc: undefined,
        AllowEgressFromLocalClassicLinkToRemoteVpc: undefined,
        AllowEgressFromLocalVpcToRemoteClassicLink: undefined,
    };
    if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
        contents.AllowDnsResolutionFromRemoteVpc = (0, smithy_client_1.parseBoolean)(output["allowDnsResolutionFromRemoteVpc"]);
    }
    if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
        contents.AllowEgressFromLocalClassicLinkToRemoteVpc = (0, smithy_client_1.parseBoolean)(output["allowEgressFromLocalClassicLinkToRemoteVpc"]);
    }
    if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
        contents.AllowEgressFromLocalVpcToRemoteClassicLink = (0, smithy_client_1.parseBoolean)(output["allowEgressFromLocalVpcToRemoteClassicLink"]);
    }
    return contents;
};
const deserializeAws_ec2PeeringTgwInfo = (output, context) => {
    const contents = {
        TransitGatewayId: undefined,
        OwnerId: undefined,
        Region: undefined,
    };
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["region"]);
    }
    return contents;
};
const deserializeAws_ec2Phase1DHGroupNumbersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase1DHGroupNumbersListValue(entry, context);
    });
};
const deserializeAws_ec2Phase1DHGroupNumbersListValue = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.strictParseInt32)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2Phase1EncryptionAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase1EncryptionAlgorithmsListValue(entry, context);
    });
};
const deserializeAws_ec2Phase1EncryptionAlgorithmsListValue = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2Phase1IntegrityAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase1IntegrityAlgorithmsListValue(entry, context);
    });
};
const deserializeAws_ec2Phase1IntegrityAlgorithmsListValue = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2Phase2DHGroupNumbersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase2DHGroupNumbersListValue(entry, context);
    });
};
const deserializeAws_ec2Phase2DHGroupNumbersListValue = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.strictParseInt32)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2Phase2EncryptionAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase2EncryptionAlgorithmsListValue(entry, context);
    });
};
const deserializeAws_ec2Phase2EncryptionAlgorithmsListValue = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2Phase2IntegrityAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Phase2IntegrityAlgorithmsListValue(entry, context);
    });
};
const deserializeAws_ec2Phase2IntegrityAlgorithmsListValue = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2Placement = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        Affinity: undefined,
        GroupName: undefined,
        PartitionNumber: undefined,
        HostId: undefined,
        Tenancy: undefined,
        SpreadDomain: undefined,
        HostResourceGroupArn: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["affinity"] !== undefined) {
        contents.Affinity = (0, smithy_client_1.expectString)(output["affinity"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    if (output["partitionNumber"] !== undefined) {
        contents.PartitionNumber = (0, smithy_client_1.strictParseInt32)(output["partitionNumber"]);
    }
    if (output["hostId"] !== undefined) {
        contents.HostId = (0, smithy_client_1.expectString)(output["hostId"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = (0, smithy_client_1.expectString)(output["tenancy"]);
    }
    if (output["spreadDomain"] !== undefined) {
        contents.SpreadDomain = (0, smithy_client_1.expectString)(output["spreadDomain"]);
    }
    if (output["hostResourceGroupArn"] !== undefined) {
        contents.HostResourceGroupArn = (0, smithy_client_1.expectString)(output["hostResourceGroupArn"]);
    }
    return contents;
};
const deserializeAws_ec2PlacementGroup = (output, context) => {
    const contents = {
        GroupName: undefined,
        State: undefined,
        Strategy: undefined,
        PartitionCount: undefined,
        GroupId: undefined,
        Tags: undefined,
        GroupArn: undefined,
    };
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["strategy"] !== undefined) {
        contents.Strategy = (0, smithy_client_1.expectString)(output["strategy"]);
    }
    if (output["partitionCount"] !== undefined) {
        contents.PartitionCount = (0, smithy_client_1.strictParseInt32)(output["partitionCount"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["groupArn"] !== undefined) {
        contents.GroupArn = (0, smithy_client_1.expectString)(output["groupArn"]);
    }
    return contents;
};
const deserializeAws_ec2PlacementGroupInfo = (output, context) => {
    const contents = {
        SupportedStrategies: undefined,
    };
    if (output.supportedStrategies === "") {
        contents.SupportedStrategies = [];
    }
    else if (output["supportedStrategies"] !== undefined && output["supportedStrategies"]["item"] !== undefined) {
        contents.SupportedStrategies = deserializeAws_ec2PlacementGroupStrategyList((0, smithy_client_1.getArrayIfSingleItem)(output["supportedStrategies"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2PlacementGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PlacementGroup(entry, context);
    });
};
const deserializeAws_ec2PlacementGroupStrategyList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2PlacementResponse = (output, context) => {
    const contents = {
        GroupName: undefined,
    };
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    return contents;
};
const deserializeAws_ec2PoolCidrBlock = (output, context) => {
    const contents = {
        Cidr: undefined,
    };
    if (output["poolCidrBlock"] !== undefined) {
        contents.Cidr = (0, smithy_client_1.expectString)(output["poolCidrBlock"]);
    }
    return contents;
};
const deserializeAws_ec2PoolCidrBlocksSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PoolCidrBlock(entry, context);
    });
};
const deserializeAws_ec2PortRange = (output, context) => {
    const contents = {
        From: undefined,
        To: undefined,
    };
    if (output["from"] !== undefined) {
        contents.From = (0, smithy_client_1.strictParseInt32)(output["from"]);
    }
    if (output["to"] !== undefined) {
        contents.To = (0, smithy_client_1.strictParseInt32)(output["to"]);
    }
    return contents;
};
const deserializeAws_ec2PortRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PortRange(entry, context);
    });
};
const deserializeAws_ec2PrefixList = (output, context) => {
    const contents = {
        Cidrs: undefined,
        PrefixListId: undefined,
        PrefixListName: undefined,
    };
    if (output.cidrSet === "") {
        contents.Cidrs = [];
    }
    else if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
        contents.Cidrs = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["cidrSet"]["item"]), context);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = (0, smithy_client_1.expectString)(output["prefixListId"]);
    }
    if (output["prefixListName"] !== undefined) {
        contents.PrefixListName = (0, smithy_client_1.expectString)(output["prefixListName"]);
    }
    return contents;
};
const deserializeAws_ec2PrefixListAssociation = (output, context) => {
    const contents = {
        ResourceId: undefined,
        ResourceOwner: undefined,
    };
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceOwner"] !== undefined) {
        contents.ResourceOwner = (0, smithy_client_1.expectString)(output["resourceOwner"]);
    }
    return contents;
};
const deserializeAws_ec2PrefixListAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrefixListAssociation(entry, context);
    });
};
const deserializeAws_ec2PrefixListEntry = (output, context) => {
    const contents = {
        Cidr: undefined,
        Description: undefined,
    };
    if (output["cidr"] !== undefined) {
        contents.Cidr = (0, smithy_client_1.expectString)(output["cidr"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    return contents;
};
const deserializeAws_ec2PrefixListEntrySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrefixListEntry(entry, context);
    });
};
const deserializeAws_ec2PrefixListId = (output, context) => {
    const contents = {
        Description: undefined,
        PrefixListId: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = (0, smithy_client_1.expectString)(output["prefixListId"]);
    }
    return contents;
};
const deserializeAws_ec2PrefixListIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrefixListId(entry, context);
    });
};
const deserializeAws_ec2PrefixListIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2PrefixListSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrefixList(entry, context);
    });
};
const deserializeAws_ec2PriceSchedule = (output, context) => {
    const contents = {
        Active: undefined,
        CurrencyCode: undefined,
        Price: undefined,
        Term: undefined,
    };
    if (output["active"] !== undefined) {
        contents.Active = (0, smithy_client_1.parseBoolean)(output["active"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["currencyCode"]);
    }
    if (output["price"] !== undefined) {
        contents.Price = (0, smithy_client_1.strictParseFloat)(output["price"]);
    }
    if (output["term"] !== undefined) {
        contents.Term = (0, smithy_client_1.strictParseLong)(output["term"]);
    }
    return contents;
};
const deserializeAws_ec2PriceScheduleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PriceSchedule(entry, context);
    });
};
const deserializeAws_ec2PricingDetail = (output, context) => {
    const contents = {
        Count: undefined,
        Price: undefined,
    };
    if (output["count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseInt32)(output["count"]);
    }
    if (output["price"] !== undefined) {
        contents.Price = (0, smithy_client_1.strictParseFloat)(output["price"]);
    }
    return contents;
};
const deserializeAws_ec2PricingDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PricingDetail(entry, context);
    });
};
const deserializeAws_ec2PrincipalIdFormat = (output, context) => {
    const contents = {
        Arn: undefined,
        Statuses: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["arn"]);
    }
    if (output.statusSet === "") {
        contents.Statuses = [];
    }
    else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
        contents.Statuses = deserializeAws_ec2IdFormatList((0, smithy_client_1.getArrayIfSingleItem)(output["statusSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2PrincipalIdFormatList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrincipalIdFormat(entry, context);
    });
};
const deserializeAws_ec2PrivateDnsDetails = (output, context) => {
    const contents = {
        PrivateDnsName: undefined,
    };
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = (0, smithy_client_1.expectString)(output["privateDnsName"]);
    }
    return contents;
};
const deserializeAws_ec2PrivateDnsDetailsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrivateDnsDetails(entry, context);
    });
};
const deserializeAws_ec2PrivateDnsNameConfiguration = (output, context) => {
    const contents = {
        State: undefined,
        Type: undefined,
        Value: undefined,
        Name: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    return contents;
};
const deserializeAws_ec2PrivateDnsNameOptionsOnLaunch = (output, context) => {
    const contents = {
        HostnameType: undefined,
        EnableResourceNameDnsARecord: undefined,
        EnableResourceNameDnsAAAARecord: undefined,
    };
    if (output["hostnameType"] !== undefined) {
        contents.HostnameType = (0, smithy_client_1.expectString)(output["hostnameType"]);
    }
    if (output["enableResourceNameDnsARecord"] !== undefined) {
        contents.EnableResourceNameDnsARecord = (0, smithy_client_1.parseBoolean)(output["enableResourceNameDnsARecord"]);
    }
    if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
        contents.EnableResourceNameDnsAAAARecord = (0, smithy_client_1.parseBoolean)(output["enableResourceNameDnsAAAARecord"]);
    }
    return contents;
};
const deserializeAws_ec2PrivateDnsNameOptionsResponse = (output, context) => {
    const contents = {
        HostnameType: undefined,
        EnableResourceNameDnsARecord: undefined,
        EnableResourceNameDnsAAAARecord: undefined,
    };
    if (output["hostnameType"] !== undefined) {
        contents.HostnameType = (0, smithy_client_1.expectString)(output["hostnameType"]);
    }
    if (output["enableResourceNameDnsARecord"] !== undefined) {
        contents.EnableResourceNameDnsARecord = (0, smithy_client_1.parseBoolean)(output["enableResourceNameDnsARecord"]);
    }
    if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
        contents.EnableResourceNameDnsAAAARecord = (0, smithy_client_1.parseBoolean)(output["enableResourceNameDnsAAAARecord"]);
    }
    return contents;
};
const deserializeAws_ec2PrivateIpAddressSpecification = (output, context) => {
    const contents = {
        Primary: undefined,
        PrivateIpAddress: undefined,
    };
    if (output["primary"] !== undefined) {
        contents.Primary = (0, smithy_client_1.parseBoolean)(output["primary"]);
    }
    if (output["privateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["privateIpAddress"]);
    }
    return contents;
};
const deserializeAws_ec2PrivateIpAddressSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PrivateIpAddressSpecification(entry, context);
    });
};
const deserializeAws_ec2ProcessorInfo = (output, context) => {
    const contents = {
        SupportedArchitectures: undefined,
        SustainedClockSpeedInGhz: undefined,
    };
    if (output.supportedArchitectures === "") {
        contents.SupportedArchitectures = [];
    }
    else if (output["supportedArchitectures"] !== undefined && output["supportedArchitectures"]["item"] !== undefined) {
        contents.SupportedArchitectures = deserializeAws_ec2ArchitectureTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["supportedArchitectures"]["item"]), context);
    }
    if (output["sustainedClockSpeedInGhz"] !== undefined) {
        contents.SustainedClockSpeedInGhz = (0, smithy_client_1.strictParseFloat)(output["sustainedClockSpeedInGhz"]);
    }
    return contents;
};
const deserializeAws_ec2ProductCode = (output, context) => {
    const contents = {
        ProductCodeId: undefined,
        ProductCodeType: undefined,
    };
    if (output["productCode"] !== undefined) {
        contents.ProductCodeId = (0, smithy_client_1.expectString)(output["productCode"]);
    }
    if (output["type"] !== undefined) {
        contents.ProductCodeType = (0, smithy_client_1.expectString)(output["type"]);
    }
    return contents;
};
const deserializeAws_ec2ProductCodeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ProductCode(entry, context);
    });
};
const deserializeAws_ec2PropagatingVgw = (output, context) => {
    const contents = {
        GatewayId: undefined,
    };
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = (0, smithy_client_1.expectString)(output["gatewayId"]);
    }
    return contents;
};
const deserializeAws_ec2PropagatingVgwList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PropagatingVgw(entry, context);
    });
};
const deserializeAws_ec2ProtocolList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2ProvisionByoipCidrResult = (output, context) => {
    const contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const deserializeAws_ec2ProvisionedBandwidth = (output, context) => {
    const contents = {
        ProvisionTime: undefined,
        Provisioned: undefined,
        RequestTime: undefined,
        Requested: undefined,
        Status: undefined,
    };
    if (output["provisionTime"] !== undefined) {
        contents.ProvisionTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["provisionTime"]));
    }
    if (output["provisioned"] !== undefined) {
        contents.Provisioned = (0, smithy_client_1.expectString)(output["provisioned"]);
    }
    if (output["requestTime"] !== undefined) {
        contents.RequestTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["requestTime"]));
    }
    if (output["requested"] !== undefined) {
        contents.Requested = (0, smithy_client_1.expectString)(output["requested"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    return contents;
};
const deserializeAws_ec2ProvisionIpamPoolCidrResult = (output, context) => {
    const contents = {
        IpamPoolCidr: undefined,
    };
    if (output["ipamPoolCidr"] !== undefined) {
        contents.IpamPoolCidr = deserializeAws_ec2IpamPoolCidr(output["ipamPoolCidr"], context);
    }
    return contents;
};
const deserializeAws_ec2ProvisionPublicIpv4PoolCidrResult = (output, context) => {
    const contents = {
        PoolId: undefined,
        PoolAddressRange: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = (0, smithy_client_1.expectString)(output["poolId"]);
    }
    if (output["poolAddressRange"] !== undefined) {
        contents.PoolAddressRange = deserializeAws_ec2PublicIpv4PoolRange(output["poolAddressRange"], context);
    }
    return contents;
};
const deserializeAws_ec2PtrUpdateStatus = (output, context) => {
    const contents = {
        Value: undefined,
        Status: undefined,
        Reason: undefined,
    };
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["reason"] !== undefined) {
        contents.Reason = (0, smithy_client_1.expectString)(output["reason"]);
    }
    return contents;
};
const deserializeAws_ec2PublicIpv4Pool = (output, context) => {
    const contents = {
        PoolId: undefined,
        Description: undefined,
        PoolAddressRanges: undefined,
        TotalAddressCount: undefined,
        TotalAvailableAddressCount: undefined,
        NetworkBorderGroup: undefined,
        Tags: undefined,
    };
    if (output["poolId"] !== undefined) {
        contents.PoolId = (0, smithy_client_1.expectString)(output["poolId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.poolAddressRangeSet === "") {
        contents.PoolAddressRanges = [];
    }
    else if (output["poolAddressRangeSet"] !== undefined && output["poolAddressRangeSet"]["item"] !== undefined) {
        contents.PoolAddressRanges = deserializeAws_ec2PublicIpv4PoolRangeSet((0, smithy_client_1.getArrayIfSingleItem)(output["poolAddressRangeSet"]["item"]), context);
    }
    if (output["totalAddressCount"] !== undefined) {
        contents.TotalAddressCount = (0, smithy_client_1.strictParseInt32)(output["totalAddressCount"]);
    }
    if (output["totalAvailableAddressCount"] !== undefined) {
        contents.TotalAvailableAddressCount = (0, smithy_client_1.strictParseInt32)(output["totalAvailableAddressCount"]);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = (0, smithy_client_1.expectString)(output["networkBorderGroup"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2PublicIpv4PoolRange = (output, context) => {
    const contents = {
        FirstAddress: undefined,
        LastAddress: undefined,
        AddressCount: undefined,
        AvailableAddressCount: undefined,
    };
    if (output["firstAddress"] !== undefined) {
        contents.FirstAddress = (0, smithy_client_1.expectString)(output["firstAddress"]);
    }
    if (output["lastAddress"] !== undefined) {
        contents.LastAddress = (0, smithy_client_1.expectString)(output["lastAddress"]);
    }
    if (output["addressCount"] !== undefined) {
        contents.AddressCount = (0, smithy_client_1.strictParseInt32)(output["addressCount"]);
    }
    if (output["availableAddressCount"] !== undefined) {
        contents.AvailableAddressCount = (0, smithy_client_1.strictParseInt32)(output["availableAddressCount"]);
    }
    return contents;
};
const deserializeAws_ec2PublicIpv4PoolRangeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PublicIpv4PoolRange(entry, context);
    });
};
const deserializeAws_ec2PublicIpv4PoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2PublicIpv4Pool(entry, context);
    });
};
const deserializeAws_ec2Purchase = (output, context) => {
    const contents = {
        CurrencyCode: undefined,
        Duration: undefined,
        HostIdSet: undefined,
        HostReservationId: undefined,
        HourlyPrice: undefined,
        InstanceFamily: undefined,
        PaymentOption: undefined,
        UpfrontPrice: undefined,
    };
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["currencyCode"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["duration"]);
    }
    if (output.hostIdSet === "") {
        contents.HostIdSet = [];
    }
    else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
        contents.HostIdSet = deserializeAws_ec2ResponseHostIdSet((0, smithy_client_1.getArrayIfSingleItem)(output["hostIdSet"]["item"]), context);
    }
    if (output["hostReservationId"] !== undefined) {
        contents.HostReservationId = (0, smithy_client_1.expectString)(output["hostReservationId"]);
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = (0, smithy_client_1.expectString)(output["hourlyPrice"]);
    }
    if (output["instanceFamily"] !== undefined) {
        contents.InstanceFamily = (0, smithy_client_1.expectString)(output["instanceFamily"]);
    }
    if (output["paymentOption"] !== undefined) {
        contents.PaymentOption = (0, smithy_client_1.expectString)(output["paymentOption"]);
    }
    if (output["upfrontPrice"] !== undefined) {
        contents.UpfrontPrice = (0, smithy_client_1.expectString)(output["upfrontPrice"]);
    }
    return contents;
};
const deserializeAws_ec2PurchasedScheduledInstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ScheduledInstance(entry, context);
    });
};
const deserializeAws_ec2PurchaseHostReservationResult = (output, context) => {
    const contents = {
        ClientToken: undefined,
        CurrencyCode: undefined,
        Purchase: undefined,
        TotalHourlyPrice: undefined,
        TotalUpfrontPrice: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["currencyCode"]);
    }
    if (output.purchase === "") {
        contents.Purchase = [];
    }
    else if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
        contents.Purchase = deserializeAws_ec2PurchaseSet((0, smithy_client_1.getArrayIfSingleItem)(output["purchase"]["item"]), context);
    }
    if (output["totalHourlyPrice"] !== undefined) {
        contents.TotalHourlyPrice = (0, smithy_client_1.expectString)(output["totalHourlyPrice"]);
    }
    if (output["totalUpfrontPrice"] !== undefined) {
        contents.TotalUpfrontPrice = (0, smithy_client_1.expectString)(output["totalUpfrontPrice"]);
    }
    return contents;
};
const deserializeAws_ec2PurchaseReservedInstancesOfferingResult = (output, context) => {
    const contents = {
        ReservedInstancesId: undefined,
    };
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = (0, smithy_client_1.expectString)(output["reservedInstancesId"]);
    }
    return contents;
};
const deserializeAws_ec2PurchaseScheduledInstancesResult = (output, context) => {
    const contents = {
        ScheduledInstanceSet: undefined,
    };
    if (output.scheduledInstanceSet === "") {
        contents.ScheduledInstanceSet = [];
    }
    else if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
        contents.ScheduledInstanceSet = deserializeAws_ec2PurchasedScheduledInstanceSet((0, smithy_client_1.getArrayIfSingleItem)(output["scheduledInstanceSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2PurchaseSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Purchase(entry, context);
    });
};
const deserializeAws_ec2RecurringCharge = (output, context) => {
    const contents = {
        Amount: undefined,
        Frequency: undefined,
    };
    if (output["amount"] !== undefined) {
        contents.Amount = (0, smithy_client_1.strictParseFloat)(output["amount"]);
    }
    if (output["frequency"] !== undefined) {
        contents.Frequency = (0, smithy_client_1.expectString)(output["frequency"]);
    }
    return contents;
};
const deserializeAws_ec2RecurringChargesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2RecurringCharge(entry, context);
    });
};
const deserializeAws_ec2ReferencedSecurityGroup = (output, context) => {
    const contents = {
        GroupId: undefined,
        PeeringStatus: undefined,
        UserId: undefined,
        VpcId: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output["peeringStatus"] !== undefined) {
        contents.PeeringStatus = (0, smithy_client_1.expectString)(output["peeringStatus"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = (0, smithy_client_1.expectString)(output["userId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = (0, smithy_client_1.expectString)(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
const deserializeAws_ec2Region = (output, context) => {
    const contents = {
        Endpoint: undefined,
        RegionName: undefined,
        OptInStatus: undefined,
    };
    if (output["regionEndpoint"] !== undefined) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["regionEndpoint"]);
    }
    if (output["regionName"] !== undefined) {
        contents.RegionName = (0, smithy_client_1.expectString)(output["regionName"]);
    }
    if (output["optInStatus"] !== undefined) {
        contents.OptInStatus = (0, smithy_client_1.expectString)(output["optInStatus"]);
    }
    return contents;
};
const deserializeAws_ec2RegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Region(entry, context);
    });
};
const deserializeAws_ec2RegisterImageResult = (output, context) => {
    const contents = {
        ImageId: undefined,
    };
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    return contents;
};
const deserializeAws_ec2RegisterInstanceEventNotificationAttributesResult = (output, context) => {
    const contents = {
        InstanceTagAttribute: undefined,
    };
    if (output["instanceTagAttribute"] !== undefined) {
        contents.InstanceTagAttribute = deserializeAws_ec2InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
    }
    return contents;
};
const deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersResult = (output, context) => {
    const contents = {
        RegisteredMulticastGroupMembers: undefined,
    };
    if (output["registeredMulticastGroupMembers"] !== undefined) {
        contents.RegisteredMulticastGroupMembers = deserializeAws_ec2TransitGatewayMulticastRegisteredGroupMembers(output["registeredMulticastGroupMembers"], context);
    }
    return contents;
};
const deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesResult = (output, context) => {
    const contents = {
        RegisteredMulticastGroupSources: undefined,
    };
    if (output["registeredMulticastGroupSources"] !== undefined) {
        contents.RegisteredMulticastGroupSources = deserializeAws_ec2TransitGatewayMulticastRegisteredGroupSources(output["registeredMulticastGroupSources"], context);
    }
    return contents;
};
const deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
    const contents = {
        Associations: undefined,
    };
    if (output["associations"] !== undefined) {
        contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(output["associations"], context);
    }
    return contents;
};
const deserializeAws_ec2RejectTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {
        TransitGatewayPeeringAttachment: undefined,
    };
    if (output["transitGatewayPeeringAttachment"] !== undefined) {
        contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(output["transitGatewayPeeringAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2RejectTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {
        TransitGatewayVpcAttachment: undefined,
    };
    if (output["transitGatewayVpcAttachment"] !== undefined) {
        contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(output["transitGatewayVpcAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2RejectVpcEndpointConnectionsResult = (output, context) => {
    const contents = {
        Unsuccessful: undefined,
    };
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2RejectVpcPeeringConnectionResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ReleaseHostsResult = (output, context) => {
    const contents = {
        Successful: undefined,
        Unsuccessful: undefined,
    };
    if (output.successful === "") {
        contents.Successful = [];
    }
    else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
        contents.Successful = deserializeAws_ec2ResponseHostIdList((0, smithy_client_1.getArrayIfSingleItem)(output["successful"]["item"]), context);
    }
    if (output.unsuccessful === "") {
        contents.Unsuccessful = [];
    }
    else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
        contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemList((0, smithy_client_1.getArrayIfSingleItem)(output["unsuccessful"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ReleaseIpamPoolAllocationResult = (output, context) => {
    const contents = {
        Success: undefined,
    };
    if (output["success"] !== undefined) {
        contents.Success = (0, smithy_client_1.parseBoolean)(output["success"]);
    }
    return contents;
};
const deserializeAws_ec2ReplaceIamInstanceProfileAssociationResult = (output, context) => {
    const contents = {
        IamInstanceProfileAssociation: undefined,
    };
    if (output["iamInstanceProfileAssociation"] !== undefined) {
        contents.IamInstanceProfileAssociation = deserializeAws_ec2IamInstanceProfileAssociation(output["iamInstanceProfileAssociation"], context);
    }
    return contents;
};
const deserializeAws_ec2ReplaceNetworkAclAssociationResult = (output, context) => {
    const contents = {
        NewAssociationId: undefined,
    };
    if (output["newAssociationId"] !== undefined) {
        contents.NewAssociationId = (0, smithy_client_1.expectString)(output["newAssociationId"]);
    }
    return contents;
};
const deserializeAws_ec2ReplaceRootVolumeTask = (output, context) => {
    const contents = {
        ReplaceRootVolumeTaskId: undefined,
        InstanceId: undefined,
        TaskState: undefined,
        StartTime: undefined,
        CompleteTime: undefined,
        Tags: undefined,
    };
    if (output["replaceRootVolumeTaskId"] !== undefined) {
        contents.ReplaceRootVolumeTaskId = (0, smithy_client_1.expectString)(output["replaceRootVolumeTaskId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["taskState"] !== undefined) {
        contents.TaskState = (0, smithy_client_1.expectString)(output["taskState"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectString)(output["startTime"]);
    }
    if (output["completeTime"] !== undefined) {
        contents.CompleteTime = (0, smithy_client_1.expectString)(output["completeTime"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ReplaceRootVolumeTasks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReplaceRootVolumeTask(entry, context);
    });
};
const deserializeAws_ec2ReplaceRouteTableAssociationResult = (output, context) => {
    const contents = {
        NewAssociationId: undefined,
        AssociationState: undefined,
    };
    if (output["newAssociationId"] !== undefined) {
        contents.NewAssociationId = (0, smithy_client_1.expectString)(output["newAssociationId"]);
    }
    if (output["associationState"] !== undefined) {
        contents.AssociationState = deserializeAws_ec2RouteTableAssociationState(output["associationState"], context);
    }
    return contents;
};
const deserializeAws_ec2ReplaceTransitGatewayRouteResult = (output, context) => {
    const contents = {
        Route: undefined,
    };
    if (output["route"] !== undefined) {
        contents.Route = deserializeAws_ec2TransitGatewayRoute(output["route"], context);
    }
    return contents;
};
const deserializeAws_ec2RequestSpotFleetResponse = (output, context) => {
    const contents = {
        SpotFleetRequestId: undefined,
    };
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = (0, smithy_client_1.expectString)(output["spotFleetRequestId"]);
    }
    return contents;
};
const deserializeAws_ec2RequestSpotInstancesResult = (output, context) => {
    const contents = {
        SpotInstanceRequests: undefined,
    };
    if (output.spotInstanceRequestSet === "") {
        contents.SpotInstanceRequests = [];
    }
    else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
        contents.SpotInstanceRequests = deserializeAws_ec2SpotInstanceRequestList((0, smithy_client_1.getArrayIfSingleItem)(output["spotInstanceRequestSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2Reservation = (output, context) => {
    const contents = {
        Groups: undefined,
        Instances: undefined,
        OwnerId: undefined,
        RequesterId: undefined,
        ReservationId: undefined,
    };
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output.instancesSet === "") {
        contents.Instances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.Instances = deserializeAws_ec2InstanceList((0, smithy_client_1.getArrayIfSingleItem)(output["instancesSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["requesterId"] !== undefined) {
        contents.RequesterId = (0, smithy_client_1.expectString)(output["requesterId"]);
    }
    if (output["reservationId"] !== undefined) {
        contents.ReservationId = (0, smithy_client_1.expectString)(output["reservationId"]);
    }
    return contents;
};
const deserializeAws_ec2ReservationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Reservation(entry, context);
    });
};
const deserializeAws_ec2ReservationValue = (output, context) => {
    const contents = {
        HourlyPrice: undefined,
        RemainingTotalValue: undefined,
        RemainingUpfrontValue: undefined,
    };
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = (0, smithy_client_1.expectString)(output["hourlyPrice"]);
    }
    if (output["remainingTotalValue"] !== undefined) {
        contents.RemainingTotalValue = (0, smithy_client_1.expectString)(output["remainingTotalValue"]);
    }
    if (output["remainingUpfrontValue"] !== undefined) {
        contents.RemainingUpfrontValue = (0, smithy_client_1.expectString)(output["remainingUpfrontValue"]);
    }
    return contents;
};
const deserializeAws_ec2ReservedInstanceReservationValue = (output, context) => {
    const contents = {
        ReservationValue: undefined,
        ReservedInstanceId: undefined,
    };
    if (output["reservationValue"] !== undefined) {
        contents.ReservationValue = deserializeAws_ec2ReservationValue(output["reservationValue"], context);
    }
    if (output["reservedInstanceId"] !== undefined) {
        contents.ReservedInstanceId = (0, smithy_client_1.expectString)(output["reservedInstanceId"]);
    }
    return contents;
};
const deserializeAws_ec2ReservedInstanceReservationValueSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstanceReservationValue(entry, context);
    });
};
const deserializeAws_ec2ReservedInstances = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        Duration: undefined,
        End: undefined,
        FixedPrice: undefined,
        InstanceCount: undefined,
        InstanceType: undefined,
        ProductDescription: undefined,
        ReservedInstancesId: undefined,
        Start: undefined,
        State: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        InstanceTenancy: undefined,
        OfferingClass: undefined,
        OfferingType: undefined,
        RecurringCharges: undefined,
        Scope: undefined,
        Tags: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseLong)(output["duration"]);
    }
    if (output["end"] !== undefined) {
        contents.End = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["end"]));
    }
    if (output["fixedPrice"] !== undefined) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["fixedPrice"]);
    }
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = (0, smithy_client_1.strictParseInt32)(output["instanceCount"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["productDescription"]);
    }
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = (0, smithy_client_1.expectString)(output["reservedInstancesId"]);
    }
    if (output["start"] !== undefined) {
        contents.Start = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["start"]));
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["usagePrice"] !== undefined) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["usagePrice"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["currencyCode"]);
    }
    if (output["instanceTenancy"] !== undefined) {
        contents.InstanceTenancy = (0, smithy_client_1.expectString)(output["instanceTenancy"]);
    }
    if (output["offeringClass"] !== undefined) {
        contents.OfferingClass = (0, smithy_client_1.expectString)(output["offeringClass"]);
    }
    if (output["offeringType"] !== undefined) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["offeringType"]);
    }
    if (output.recurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
        contents.RecurringCharges = deserializeAws_ec2RecurringChargesList((0, smithy_client_1.getArrayIfSingleItem)(output["recurringCharges"]["item"]), context);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = (0, smithy_client_1.expectString)(output["scope"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ReservedInstancesConfiguration = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        InstanceCount: undefined,
        InstanceType: undefined,
        Platform: undefined,
        Scope: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = (0, smithy_client_1.strictParseInt32)(output["instanceCount"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = (0, smithy_client_1.expectString)(output["scope"]);
    }
    return contents;
};
const deserializeAws_ec2ReservedInstancesId = (output, context) => {
    const contents = {
        ReservedInstancesId: undefined,
    };
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = (0, smithy_client_1.expectString)(output["reservedInstancesId"]);
    }
    return contents;
};
const deserializeAws_ec2ReservedInstancesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstances(entry, context);
    });
};
const deserializeAws_ec2ReservedInstancesListing = (output, context) => {
    const contents = {
        ClientToken: undefined,
        CreateDate: undefined,
        InstanceCounts: undefined,
        PriceSchedules: undefined,
        ReservedInstancesId: undefined,
        ReservedInstancesListingId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Tags: undefined,
        UpdateDate: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createDate"]));
    }
    if (output.instanceCounts === "") {
        contents.InstanceCounts = [];
    }
    else if (output["instanceCounts"] !== undefined && output["instanceCounts"]["item"] !== undefined) {
        contents.InstanceCounts = deserializeAws_ec2InstanceCountList((0, smithy_client_1.getArrayIfSingleItem)(output["instanceCounts"]["item"]), context);
    }
    if (output.priceSchedules === "") {
        contents.PriceSchedules = [];
    }
    else if (output["priceSchedules"] !== undefined && output["priceSchedules"]["item"] !== undefined) {
        contents.PriceSchedules = deserializeAws_ec2PriceScheduleList((0, smithy_client_1.getArrayIfSingleItem)(output["priceSchedules"]["item"]), context);
    }
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = (0, smithy_client_1.expectString)(output["reservedInstancesId"]);
    }
    if (output["reservedInstancesListingId"] !== undefined) {
        contents.ReservedInstancesListingId = (0, smithy_client_1.expectString)(output["reservedInstancesListingId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["updateDate"] !== undefined) {
        contents.UpdateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["updateDate"]));
    }
    return contents;
};
const deserializeAws_ec2ReservedInstancesListingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesListing(entry, context);
    });
};
const deserializeAws_ec2ReservedInstancesModification = (output, context) => {
    const contents = {
        ClientToken: undefined,
        CreateDate: undefined,
        EffectiveDate: undefined,
        ModificationResults: undefined,
        ReservedInstancesIds: undefined,
        ReservedInstancesModificationId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        UpdateDate: undefined,
    };
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createDate"]));
    }
    if (output["effectiveDate"] !== undefined) {
        contents.EffectiveDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["effectiveDate"]));
    }
    if (output.modificationResultSet === "") {
        contents.ModificationResults = [];
    }
    else if (output["modificationResultSet"] !== undefined && output["modificationResultSet"]["item"] !== undefined) {
        contents.ModificationResults = deserializeAws_ec2ReservedInstancesModificationResultList((0, smithy_client_1.getArrayIfSingleItem)(output["modificationResultSet"]["item"]), context);
    }
    if (output.reservedInstancesSet === "") {
        contents.ReservedInstancesIds = [];
    }
    else if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
        contents.ReservedInstancesIds = deserializeAws_ec2ReservedIntancesIds((0, smithy_client_1.getArrayIfSingleItem)(output["reservedInstancesSet"]["item"]), context);
    }
    if (output["reservedInstancesModificationId"] !== undefined) {
        contents.ReservedInstancesModificationId = (0, smithy_client_1.expectString)(output["reservedInstancesModificationId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["updateDate"] !== undefined) {
        contents.UpdateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["updateDate"]));
    }
    return contents;
};
const deserializeAws_ec2ReservedInstancesModificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesModification(entry, context);
    });
};
const deserializeAws_ec2ReservedInstancesModificationResult = (output, context) => {
    const contents = {
        ReservedInstancesId: undefined,
        TargetConfiguration: undefined,
    };
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = (0, smithy_client_1.expectString)(output["reservedInstancesId"]);
    }
    if (output["targetConfiguration"] !== undefined) {
        contents.TargetConfiguration = deserializeAws_ec2ReservedInstancesConfiguration(output["targetConfiguration"], context);
    }
    return contents;
};
const deserializeAws_ec2ReservedInstancesModificationResultList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesModificationResult(entry, context);
    });
};
const deserializeAws_ec2ReservedInstancesOffering = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        Duration: undefined,
        FixedPrice: undefined,
        InstanceType: undefined,
        ProductDescription: undefined,
        ReservedInstancesOfferingId: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        InstanceTenancy: undefined,
        Marketplace: undefined,
        OfferingClass: undefined,
        OfferingType: undefined,
        PricingDetails: undefined,
        RecurringCharges: undefined,
        Scope: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseLong)(output["duration"]);
    }
    if (output["fixedPrice"] !== undefined) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["fixedPrice"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["productDescription"]);
    }
    if (output["reservedInstancesOfferingId"] !== undefined) {
        contents.ReservedInstancesOfferingId = (0, smithy_client_1.expectString)(output["reservedInstancesOfferingId"]);
    }
    if (output["usagePrice"] !== undefined) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["usagePrice"]);
    }
    if (output["currencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["currencyCode"]);
    }
    if (output["instanceTenancy"] !== undefined) {
        contents.InstanceTenancy = (0, smithy_client_1.expectString)(output["instanceTenancy"]);
    }
    if (output["marketplace"] !== undefined) {
        contents.Marketplace = (0, smithy_client_1.parseBoolean)(output["marketplace"]);
    }
    if (output["offeringClass"] !== undefined) {
        contents.OfferingClass = (0, smithy_client_1.expectString)(output["offeringClass"]);
    }
    if (output["offeringType"] !== undefined) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["offeringType"]);
    }
    if (output.pricingDetailsSet === "") {
        contents.PricingDetails = [];
    }
    else if (output["pricingDetailsSet"] !== undefined && output["pricingDetailsSet"]["item"] !== undefined) {
        contents.PricingDetails = deserializeAws_ec2PricingDetailsList((0, smithy_client_1.getArrayIfSingleItem)(output["pricingDetailsSet"]["item"]), context);
    }
    if (output.recurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
        contents.RecurringCharges = deserializeAws_ec2RecurringChargesList((0, smithy_client_1.getArrayIfSingleItem)(output["recurringCharges"]["item"]), context);
    }
    if (output["scope"] !== undefined) {
        contents.Scope = (0, smithy_client_1.expectString)(output["scope"]);
    }
    return contents;
};
const deserializeAws_ec2ReservedInstancesOfferingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesOffering(entry, context);
    });
};
const deserializeAws_ec2ReservedIntancesIds = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ReservedInstancesId(entry, context);
    });
};
const deserializeAws_ec2ResetAddressAttributeResult = (output, context) => {
    const contents = {
        Address: undefined,
    };
    if (output["address"] !== undefined) {
        contents.Address = deserializeAws_ec2AddressAttribute(output["address"], context);
    }
    return contents;
};
const deserializeAws_ec2ResetEbsDefaultKmsKeyIdResult = (output, context) => {
    const contents = {
        KmsKeyId: undefined,
    };
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["kmsKeyId"]);
    }
    return contents;
};
const deserializeAws_ec2ResetFpgaImageAttributeResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2ResourceStatement = (output, context) => {
    const contents = {
        Resources: undefined,
        ResourceTypes: undefined,
    };
    if (output.resourceSet === "") {
        contents.Resources = [];
    }
    else if (output["resourceSet"] !== undefined && output["resourceSet"]["item"] !== undefined) {
        contents.Resources = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["resourceSet"]["item"]), context);
    }
    if (output.resourceTypeSet === "") {
        contents.ResourceTypes = [];
    }
    else if (output["resourceTypeSet"] !== undefined && output["resourceTypeSet"]["item"] !== undefined) {
        contents.ResourceTypes = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["resourceTypeSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ResponseError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2ResponseHostIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2ResponseHostIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2ResponseLaunchTemplateData = (output, context) => {
    const contents = {
        KernelId: undefined,
        EbsOptimized: undefined,
        IamInstanceProfile: undefined,
        BlockDeviceMappings: undefined,
        NetworkInterfaces: undefined,
        ImageId: undefined,
        InstanceType: undefined,
        KeyName: undefined,
        Monitoring: undefined,
        Placement: undefined,
        RamDiskId: undefined,
        DisableApiTermination: undefined,
        InstanceInitiatedShutdownBehavior: undefined,
        UserData: undefined,
        TagSpecifications: undefined,
        ElasticGpuSpecifications: undefined,
        ElasticInferenceAccelerators: undefined,
        SecurityGroupIds: undefined,
        SecurityGroups: undefined,
        InstanceMarketOptions: undefined,
        CreditSpecification: undefined,
        CpuOptions: undefined,
        CapacityReservationSpecification: undefined,
        LicenseSpecifications: undefined,
        HibernationOptions: undefined,
        MetadataOptions: undefined,
        EnclaveOptions: undefined,
        InstanceRequirements: undefined,
        PrivateDnsNameOptions: undefined,
        MaintenanceOptions: undefined,
        DisableApiStop: undefined,
    };
    if (output["kernelId"] !== undefined) {
        contents.KernelId = (0, smithy_client_1.expectString)(output["kernelId"]);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = (0, smithy_client_1.parseBoolean)(output["ebsOptimized"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2LaunchTemplateIamInstanceProfileSpecification(output["iamInstanceProfile"], context);
    }
    if (output.blockDeviceMappingSet === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMappingSet"] !== undefined && output["blockDeviceMappingSet"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2LaunchTemplateBlockDeviceMappingList((0, smithy_client_1.getArrayIfSingleItem)(output["blockDeviceMappingSet"]["item"]), context);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = (0, smithy_client_1.expectString)(output["keyName"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2LaunchTemplatesMonitoring(output["monitoring"], context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2LaunchTemplatePlacement(output["placement"], context);
    }
    if (output["ramDiskId"] !== undefined) {
        contents.RamDiskId = (0, smithy_client_1.expectString)(output["ramDiskId"]);
    }
    if (output["disableApiTermination"] !== undefined) {
        contents.DisableApiTermination = (0, smithy_client_1.parseBoolean)(output["disableApiTermination"]);
    }
    if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
        contents.InstanceInitiatedShutdownBehavior = (0, smithy_client_1.expectString)(output["instanceInitiatedShutdownBehavior"]);
    }
    if (output["userData"] !== undefined) {
        contents.UserData = (0, smithy_client_1.expectString)(output["userData"]);
    }
    if (output.tagSpecificationSet === "") {
        contents.TagSpecifications = [];
    }
    else if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
        contents.TagSpecifications = deserializeAws_ec2LaunchTemplateTagSpecificationList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSpecificationSet"]["item"]), context);
    }
    if (output.elasticGpuSpecificationSet === "") {
        contents.ElasticGpuSpecifications = [];
    }
    else if (output["elasticGpuSpecificationSet"] !== undefined &&
        output["elasticGpuSpecificationSet"]["item"] !== undefined) {
        contents.ElasticGpuSpecifications = deserializeAws_ec2ElasticGpuSpecificationResponseList((0, smithy_client_1.getArrayIfSingleItem)(output["elasticGpuSpecificationSet"]["item"]), context);
    }
    if (output.elasticInferenceAcceleratorSet === "") {
        contents.ElasticInferenceAccelerators = [];
    }
    else if (output["elasticInferenceAcceleratorSet"] !== undefined &&
        output["elasticInferenceAcceleratorSet"]["item"] !== undefined) {
        contents.ElasticInferenceAccelerators = deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponseList((0, smithy_client_1.getArrayIfSingleItem)(output["elasticInferenceAcceleratorSet"]["item"]), context);
    }
    if (output.securityGroupIdSet === "") {
        contents.SecurityGroupIds = [];
    }
    else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
        contents.SecurityGroupIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupIdSet"]["item"]), context);
    }
    if (output.securityGroupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroupSet"]["item"]), context);
    }
    if (output["instanceMarketOptions"] !== undefined) {
        contents.InstanceMarketOptions = deserializeAws_ec2LaunchTemplateInstanceMarketOptions(output["instanceMarketOptions"], context);
    }
    if (output["creditSpecification"] !== undefined) {
        contents.CreditSpecification = deserializeAws_ec2CreditSpecification(output["creditSpecification"], context);
    }
    if (output["cpuOptions"] !== undefined) {
        contents.CpuOptions = deserializeAws_ec2LaunchTemplateCpuOptions(output["cpuOptions"], context);
    }
    if (output["capacityReservationSpecification"] !== undefined) {
        contents.CapacityReservationSpecification =
            deserializeAws_ec2LaunchTemplateCapacityReservationSpecificationResponse(output["capacityReservationSpecification"], context);
    }
    if (output.licenseSet === "") {
        contents.LicenseSpecifications = [];
    }
    else if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
        contents.LicenseSpecifications = deserializeAws_ec2LaunchTemplateLicenseList((0, smithy_client_1.getArrayIfSingleItem)(output["licenseSet"]["item"]), context);
    }
    if (output["hibernationOptions"] !== undefined) {
        contents.HibernationOptions = deserializeAws_ec2LaunchTemplateHibernationOptions(output["hibernationOptions"], context);
    }
    if (output["metadataOptions"] !== undefined) {
        contents.MetadataOptions = deserializeAws_ec2LaunchTemplateInstanceMetadataOptions(output["metadataOptions"], context);
    }
    if (output["enclaveOptions"] !== undefined) {
        contents.EnclaveOptions = deserializeAws_ec2LaunchTemplateEnclaveOptions(output["enclaveOptions"], context);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = deserializeAws_ec2InstanceRequirements(output["instanceRequirements"], context);
    }
    if (output["privateDnsNameOptions"] !== undefined) {
        contents.PrivateDnsNameOptions = deserializeAws_ec2LaunchTemplatePrivateDnsNameOptions(output["privateDnsNameOptions"], context);
    }
    if (output["maintenanceOptions"] !== undefined) {
        contents.MaintenanceOptions = deserializeAws_ec2LaunchTemplateInstanceMaintenanceOptions(output["maintenanceOptions"], context);
    }
    if (output["disableApiStop"] !== undefined) {
        contents.DisableApiStop = (0, smithy_client_1.parseBoolean)(output["disableApiStop"]);
    }
    return contents;
};
const deserializeAws_ec2RestoreAddressToClassicResult = (output, context) => {
    const contents = {
        PublicIp: undefined,
        Status: undefined,
    };
    if (output["publicIp"] !== undefined) {
        contents.PublicIp = (0, smithy_client_1.expectString)(output["publicIp"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    return contents;
};
const deserializeAws_ec2RestoreImageFromRecycleBinResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2RestoreManagedPrefixListVersionResult = (output, context) => {
    const contents = {
        PrefixList: undefined,
    };
    if (output["prefixList"] !== undefined) {
        contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
    }
    return contents;
};
const deserializeAws_ec2RestoreSnapshotFromRecycleBinResult = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        OutpostArn: undefined,
        Description: undefined,
        Encrypted: undefined,
        OwnerId: undefined,
        Progress: undefined,
        StartTime: undefined,
        State: undefined,
        VolumeId: undefined,
        VolumeSize: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["encrypted"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startTime"]));
    }
    if (output["status"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = (0, smithy_client_1.strictParseInt32)(output["volumeSize"]);
    }
    return contents;
};
const deserializeAws_ec2RestoreSnapshotTierResult = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        RestoreStartTime: undefined,
        RestoreDuration: undefined,
        IsPermanentRestore: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["restoreStartTime"] !== undefined) {
        contents.RestoreStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["restoreStartTime"]));
    }
    if (output["restoreDuration"] !== undefined) {
        contents.RestoreDuration = (0, smithy_client_1.strictParseInt32)(output["restoreDuration"]);
    }
    if (output["isPermanentRestore"] !== undefined) {
        contents.IsPermanentRestore = (0, smithy_client_1.parseBoolean)(output["isPermanentRestore"]);
    }
    return contents;
};
const deserializeAws_ec2RevokeClientVpnIngressResult = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2ClientVpnAuthorizationRuleStatus(output["status"], context);
    }
    return contents;
};
const deserializeAws_ec2RevokeSecurityGroupEgressResult = (output, context) => {
    const contents = {
        Return: undefined,
        UnknownIpPermissions: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    if (output.unknownIpPermissionSet === "") {
        contents.UnknownIpPermissions = [];
    }
    else if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
        contents.UnknownIpPermissions = deserializeAws_ec2IpPermissionList((0, smithy_client_1.getArrayIfSingleItem)(output["unknownIpPermissionSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2RevokeSecurityGroupIngressResult = (output, context) => {
    const contents = {
        Return: undefined,
        UnknownIpPermissions: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    if (output.unknownIpPermissionSet === "") {
        contents.UnknownIpPermissions = [];
    }
    else if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
        contents.UnknownIpPermissions = deserializeAws_ec2IpPermissionList((0, smithy_client_1.getArrayIfSingleItem)(output["unknownIpPermissionSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2RootDeviceTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2Route = (output, context) => {
    const contents = {
        DestinationCidrBlock: undefined,
        DestinationIpv6CidrBlock: undefined,
        DestinationPrefixListId: undefined,
        EgressOnlyInternetGatewayId: undefined,
        GatewayId: undefined,
        InstanceId: undefined,
        InstanceOwnerId: undefined,
        NatGatewayId: undefined,
        TransitGatewayId: undefined,
        LocalGatewayId: undefined,
        CarrierGatewayId: undefined,
        NetworkInterfaceId: undefined,
        Origin: undefined,
        State: undefined,
        VpcPeeringConnectionId: undefined,
        CoreNetworkArn: undefined,
    };
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = (0, smithy_client_1.expectString)(output["destinationCidrBlock"]);
    }
    if (output["destinationIpv6CidrBlock"] !== undefined) {
        contents.DestinationIpv6CidrBlock = (0, smithy_client_1.expectString)(output["destinationIpv6CidrBlock"]);
    }
    if (output["destinationPrefixListId"] !== undefined) {
        contents.DestinationPrefixListId = (0, smithy_client_1.expectString)(output["destinationPrefixListId"]);
    }
    if (output["egressOnlyInternetGatewayId"] !== undefined) {
        contents.EgressOnlyInternetGatewayId = (0, smithy_client_1.expectString)(output["egressOnlyInternetGatewayId"]);
    }
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = (0, smithy_client_1.expectString)(output["gatewayId"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["instanceOwnerId"] !== undefined) {
        contents.InstanceOwnerId = (0, smithy_client_1.expectString)(output["instanceOwnerId"]);
    }
    if (output["natGatewayId"] !== undefined) {
        contents.NatGatewayId = (0, smithy_client_1.expectString)(output["natGatewayId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["localGatewayId"] !== undefined) {
        contents.LocalGatewayId = (0, smithy_client_1.expectString)(output["localGatewayId"]);
    }
    if (output["carrierGatewayId"] !== undefined) {
        contents.CarrierGatewayId = (0, smithy_client_1.expectString)(output["carrierGatewayId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["origin"] !== undefined) {
        contents.Origin = (0, smithy_client_1.expectString)(output["origin"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = (0, smithy_client_1.expectString)(output["vpcPeeringConnectionId"]);
    }
    if (output["coreNetworkArn"] !== undefined) {
        contents.CoreNetworkArn = (0, smithy_client_1.expectString)(output["coreNetworkArn"]);
    }
    return contents;
};
const deserializeAws_ec2RouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Route(entry, context);
    });
};
const deserializeAws_ec2RouteTable = (output, context) => {
    const contents = {
        Associations: undefined,
        PropagatingVgws: undefined,
        RouteTableId: undefined,
        Routes: undefined,
        Tags: undefined,
        VpcId: undefined,
        OwnerId: undefined,
    };
    if (output.associationSet === "") {
        contents.Associations = [];
    }
    else if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
        contents.Associations = deserializeAws_ec2RouteTableAssociationList((0, smithy_client_1.getArrayIfSingleItem)(output["associationSet"]["item"]), context);
    }
    if (output.propagatingVgwSet === "") {
        contents.PropagatingVgws = [];
    }
    else if (output["propagatingVgwSet"] !== undefined && output["propagatingVgwSet"]["item"] !== undefined) {
        contents.PropagatingVgws = deserializeAws_ec2PropagatingVgwList((0, smithy_client_1.getArrayIfSingleItem)(output["propagatingVgwSet"]["item"]), context);
    }
    if (output["routeTableId"] !== undefined) {
        contents.RouteTableId = (0, smithy_client_1.expectString)(output["routeTableId"]);
    }
    if (output.routeSet === "") {
        contents.Routes = [];
    }
    else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2RouteList((0, smithy_client_1.getArrayIfSingleItem)(output["routeSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    return contents;
};
const deserializeAws_ec2RouteTableAssociation = (output, context) => {
    const contents = {
        Main: undefined,
        RouteTableAssociationId: undefined,
        RouteTableId: undefined,
        SubnetId: undefined,
        GatewayId: undefined,
        AssociationState: undefined,
    };
    if (output["main"] !== undefined) {
        contents.Main = (0, smithy_client_1.parseBoolean)(output["main"]);
    }
    if (output["routeTableAssociationId"] !== undefined) {
        contents.RouteTableAssociationId = (0, smithy_client_1.expectString)(output["routeTableAssociationId"]);
    }
    if (output["routeTableId"] !== undefined) {
        contents.RouteTableId = (0, smithy_client_1.expectString)(output["routeTableId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["gatewayId"] !== undefined) {
        contents.GatewayId = (0, smithy_client_1.expectString)(output["gatewayId"]);
    }
    if (output["associationState"] !== undefined) {
        contents.AssociationState = deserializeAws_ec2RouteTableAssociationState(output["associationState"], context);
    }
    return contents;
};
const deserializeAws_ec2RouteTableAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2RouteTableAssociation(entry, context);
    });
};
const deserializeAws_ec2RouteTableAssociationState = (output, context) => {
    const contents = {
        State: undefined,
        StatusMessage: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    return contents;
};
const deserializeAws_ec2RouteTableList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2RouteTable(entry, context);
    });
};
const deserializeAws_ec2RunInstancesMonitoringEnabled = (output, context) => {
    const contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["enabled"]);
    }
    return contents;
};
const deserializeAws_ec2RunScheduledInstancesResult = (output, context) => {
    const contents = {
        InstanceIdSet: undefined,
    };
    if (output.instanceIdSet === "") {
        contents.InstanceIdSet = [];
    }
    else if (output["instanceIdSet"] !== undefined && output["instanceIdSet"]["item"] !== undefined) {
        contents.InstanceIdSet = deserializeAws_ec2InstanceIdSet((0, smithy_client_1.getArrayIfSingleItem)(output["instanceIdSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2S3Storage = (output, context) => {
    const contents = {
        AWSAccessKeyId: undefined,
        Bucket: undefined,
        Prefix: undefined,
        UploadPolicy: undefined,
        UploadPolicySignature: undefined,
    };
    if (output["AWSAccessKeyId"] !== undefined) {
        contents.AWSAccessKeyId = (0, smithy_client_1.expectString)(output["AWSAccessKeyId"]);
    }
    if (output["bucket"] !== undefined) {
        contents.Bucket = (0, smithy_client_1.expectString)(output["bucket"]);
    }
    if (output["prefix"] !== undefined) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["prefix"]);
    }
    if (output["uploadPolicy"] !== undefined) {
        contents.UploadPolicy = context.base64Decoder(output["uploadPolicy"]);
    }
    if (output["uploadPolicySignature"] !== undefined) {
        contents.UploadPolicySignature = (0, smithy_client_1.expectString)(output["uploadPolicySignature"]);
    }
    return contents;
};
const deserializeAws_ec2ScheduledInstance = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        CreateDate: undefined,
        HourlyPrice: undefined,
        InstanceCount: undefined,
        InstanceType: undefined,
        NetworkPlatform: undefined,
        NextSlotStartTime: undefined,
        Platform: undefined,
        PreviousSlotEndTime: undefined,
        Recurrence: undefined,
        ScheduledInstanceId: undefined,
        SlotDurationInHours: undefined,
        TermEndDate: undefined,
        TermStartDate: undefined,
        TotalScheduledInstanceHours: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["createDate"] !== undefined) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createDate"]));
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = (0, smithy_client_1.expectString)(output["hourlyPrice"]);
    }
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = (0, smithy_client_1.strictParseInt32)(output["instanceCount"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["networkPlatform"] !== undefined) {
        contents.NetworkPlatform = (0, smithy_client_1.expectString)(output["networkPlatform"]);
    }
    if (output["nextSlotStartTime"] !== undefined) {
        contents.NextSlotStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["nextSlotStartTime"]));
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    if (output["previousSlotEndTime"] !== undefined) {
        contents.PreviousSlotEndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["previousSlotEndTime"]));
    }
    if (output["recurrence"] !== undefined) {
        contents.Recurrence = deserializeAws_ec2ScheduledInstanceRecurrence(output["recurrence"], context);
    }
    if (output["scheduledInstanceId"] !== undefined) {
        contents.ScheduledInstanceId = (0, smithy_client_1.expectString)(output["scheduledInstanceId"]);
    }
    if (output["slotDurationInHours"] !== undefined) {
        contents.SlotDurationInHours = (0, smithy_client_1.strictParseInt32)(output["slotDurationInHours"]);
    }
    if (output["termEndDate"] !== undefined) {
        contents.TermEndDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["termEndDate"]));
    }
    if (output["termStartDate"] !== undefined) {
        contents.TermStartDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["termStartDate"]));
    }
    if (output["totalScheduledInstanceHours"] !== undefined) {
        contents.TotalScheduledInstanceHours = (0, smithy_client_1.strictParseInt32)(output["totalScheduledInstanceHours"]);
    }
    return contents;
};
const deserializeAws_ec2ScheduledInstanceAvailability = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        AvailableInstanceCount: undefined,
        FirstSlotStartTime: undefined,
        HourlyPrice: undefined,
        InstanceType: undefined,
        MaxTermDurationInDays: undefined,
        MinTermDurationInDays: undefined,
        NetworkPlatform: undefined,
        Platform: undefined,
        PurchaseToken: undefined,
        Recurrence: undefined,
        SlotDurationInHours: undefined,
        TotalScheduledInstanceHours: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["availableInstanceCount"] !== undefined) {
        contents.AvailableInstanceCount = (0, smithy_client_1.strictParseInt32)(output["availableInstanceCount"]);
    }
    if (output["firstSlotStartTime"] !== undefined) {
        contents.FirstSlotStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["firstSlotStartTime"]));
    }
    if (output["hourlyPrice"] !== undefined) {
        contents.HourlyPrice = (0, smithy_client_1.expectString)(output["hourlyPrice"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["maxTermDurationInDays"] !== undefined) {
        contents.MaxTermDurationInDays = (0, smithy_client_1.strictParseInt32)(output["maxTermDurationInDays"]);
    }
    if (output["minTermDurationInDays"] !== undefined) {
        contents.MinTermDurationInDays = (0, smithy_client_1.strictParseInt32)(output["minTermDurationInDays"]);
    }
    if (output["networkPlatform"] !== undefined) {
        contents.NetworkPlatform = (0, smithy_client_1.expectString)(output["networkPlatform"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    if (output["purchaseToken"] !== undefined) {
        contents.PurchaseToken = (0, smithy_client_1.expectString)(output["purchaseToken"]);
    }
    if (output["recurrence"] !== undefined) {
        contents.Recurrence = deserializeAws_ec2ScheduledInstanceRecurrence(output["recurrence"], context);
    }
    if (output["slotDurationInHours"] !== undefined) {
        contents.SlotDurationInHours = (0, smithy_client_1.strictParseInt32)(output["slotDurationInHours"]);
    }
    if (output["totalScheduledInstanceHours"] !== undefined) {
        contents.TotalScheduledInstanceHours = (0, smithy_client_1.strictParseInt32)(output["totalScheduledInstanceHours"]);
    }
    return contents;
};
const deserializeAws_ec2ScheduledInstanceAvailabilitySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ScheduledInstanceAvailability(entry, context);
    });
};
const deserializeAws_ec2ScheduledInstanceRecurrence = (output, context) => {
    const contents = {
        Frequency: undefined,
        Interval: undefined,
        OccurrenceDaySet: undefined,
        OccurrenceRelativeToEnd: undefined,
        OccurrenceUnit: undefined,
    };
    if (output["frequency"] !== undefined) {
        contents.Frequency = (0, smithy_client_1.expectString)(output["frequency"]);
    }
    if (output["interval"] !== undefined) {
        contents.Interval = (0, smithy_client_1.strictParseInt32)(output["interval"]);
    }
    if (output.occurrenceDaySet === "") {
        contents.OccurrenceDaySet = [];
    }
    else if (output["occurrenceDaySet"] !== undefined && output["occurrenceDaySet"]["item"] !== undefined) {
        contents.OccurrenceDaySet = deserializeAws_ec2OccurrenceDaySet((0, smithy_client_1.getArrayIfSingleItem)(output["occurrenceDaySet"]["item"]), context);
    }
    if (output["occurrenceRelativeToEnd"] !== undefined) {
        contents.OccurrenceRelativeToEnd = (0, smithy_client_1.parseBoolean)(output["occurrenceRelativeToEnd"]);
    }
    if (output["occurrenceUnit"] !== undefined) {
        contents.OccurrenceUnit = (0, smithy_client_1.expectString)(output["occurrenceUnit"]);
    }
    return contents;
};
const deserializeAws_ec2ScheduledInstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ScheduledInstance(entry, context);
    });
};
const deserializeAws_ec2SearchLocalGatewayRoutesResult = (output, context) => {
    const contents = {
        Routes: undefined,
        NextToken: undefined,
    };
    if (output.routeSet === "") {
        contents.Routes = [];
    }
    else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2LocalGatewayRouteList((0, smithy_client_1.getArrayIfSingleItem)(output["routeSet"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2SearchTransitGatewayMulticastGroupsResult = (output, context) => {
    const contents = {
        MulticastGroups: undefined,
        NextToken: undefined,
    };
    if (output.multicastGroups === "") {
        contents.MulticastGroups = [];
    }
    else if (output["multicastGroups"] !== undefined && output["multicastGroups"]["item"] !== undefined) {
        contents.MulticastGroups = deserializeAws_ec2TransitGatewayMulticastGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["multicastGroups"]["item"]), context);
    }
    if (output["nextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["nextToken"]);
    }
    return contents;
};
const deserializeAws_ec2SearchTransitGatewayRoutesResult = (output, context) => {
    const contents = {
        Routes: undefined,
        AdditionalRoutesAvailable: undefined,
    };
    if (output.routeSet === "") {
        contents.Routes = [];
    }
    else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2TransitGatewayRouteList((0, smithy_client_1.getArrayIfSingleItem)(output["routeSet"]["item"]), context);
    }
    if (output["additionalRoutesAvailable"] !== undefined) {
        contents.AdditionalRoutesAvailable = (0, smithy_client_1.parseBoolean)(output["additionalRoutesAvailable"]);
    }
    return contents;
};
const deserializeAws_ec2SecurityGroup = (output, context) => {
    const contents = {
        Description: undefined,
        GroupName: undefined,
        IpPermissions: undefined,
        OwnerId: undefined,
        GroupId: undefined,
        IpPermissionsEgress: undefined,
        Tags: undefined,
        VpcId: undefined,
    };
    if (output["groupDescription"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["groupDescription"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    if (output.ipPermissions === "") {
        contents.IpPermissions = [];
    }
    else if (output["ipPermissions"] !== undefined && output["ipPermissions"]["item"] !== undefined) {
        contents.IpPermissions = deserializeAws_ec2IpPermissionList((0, smithy_client_1.getArrayIfSingleItem)(output["ipPermissions"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output.ipPermissionsEgress === "") {
        contents.IpPermissionsEgress = [];
    }
    else if (output["ipPermissionsEgress"] !== undefined && output["ipPermissionsEgress"]["item"] !== undefined) {
        contents.IpPermissionsEgress = deserializeAws_ec2IpPermissionList((0, smithy_client_1.getArrayIfSingleItem)(output["ipPermissionsEgress"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2SecurityGroupIdentifier = (output, context) => {
    const contents = {
        GroupId: undefined,
        GroupName: undefined,
    };
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    return contents;
};
const deserializeAws_ec2SecurityGroupIdStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2SecurityGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SecurityGroup(entry, context);
    });
};
const deserializeAws_ec2SecurityGroupReference = (output, context) => {
    const contents = {
        GroupId: undefined,
        ReferencingVpcId: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output["referencingVpcId"] !== undefined) {
        contents.ReferencingVpcId = (0, smithy_client_1.expectString)(output["referencingVpcId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = (0, smithy_client_1.expectString)(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
const deserializeAws_ec2SecurityGroupReferences = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SecurityGroupReference(entry, context);
    });
};
const deserializeAws_ec2SecurityGroupRule = (output, context) => {
    const contents = {
        SecurityGroupRuleId: undefined,
        GroupId: undefined,
        GroupOwnerId: undefined,
        IsEgress: undefined,
        IpProtocol: undefined,
        FromPort: undefined,
        ToPort: undefined,
        CidrIpv4: undefined,
        CidrIpv6: undefined,
        PrefixListId: undefined,
        ReferencedGroupInfo: undefined,
        Description: undefined,
        Tags: undefined,
    };
    if (output["securityGroupRuleId"] !== undefined) {
        contents.SecurityGroupRuleId = (0, smithy_client_1.expectString)(output["securityGroupRuleId"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output["groupOwnerId"] !== undefined) {
        contents.GroupOwnerId = (0, smithy_client_1.expectString)(output["groupOwnerId"]);
    }
    if (output["isEgress"] !== undefined) {
        contents.IsEgress = (0, smithy_client_1.parseBoolean)(output["isEgress"]);
    }
    if (output["ipProtocol"] !== undefined) {
        contents.IpProtocol = (0, smithy_client_1.expectString)(output["ipProtocol"]);
    }
    if (output["fromPort"] !== undefined) {
        contents.FromPort = (0, smithy_client_1.strictParseInt32)(output["fromPort"]);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = (0, smithy_client_1.strictParseInt32)(output["toPort"]);
    }
    if (output["cidrIpv4"] !== undefined) {
        contents.CidrIpv4 = (0, smithy_client_1.expectString)(output["cidrIpv4"]);
    }
    if (output["cidrIpv6"] !== undefined) {
        contents.CidrIpv6 = (0, smithy_client_1.expectString)(output["cidrIpv6"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = (0, smithy_client_1.expectString)(output["prefixListId"]);
    }
    if (output["referencedGroupInfo"] !== undefined) {
        contents.ReferencedGroupInfo = deserializeAws_ec2ReferencedSecurityGroup(output["referencedGroupInfo"], context);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2SecurityGroupRuleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SecurityGroupRule(entry, context);
    });
};
const deserializeAws_ec2ServiceConfiguration = (output, context) => {
    const contents = {
        ServiceType: undefined,
        ServiceId: undefined,
        ServiceName: undefined,
        ServiceState: undefined,
        AvailabilityZones: undefined,
        AcceptanceRequired: undefined,
        ManagesVpcEndpoints: undefined,
        NetworkLoadBalancerArns: undefined,
        GatewayLoadBalancerArns: undefined,
        SupportedIpAddressTypes: undefined,
        BaseEndpointDnsNames: undefined,
        PrivateDnsName: undefined,
        PrivateDnsNameConfiguration: undefined,
        PayerResponsibility: undefined,
        Tags: undefined,
    };
    if (output.serviceType === "") {
        contents.ServiceType = [];
    }
    else if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
        contents.ServiceType = deserializeAws_ec2ServiceTypeDetailSet((0, smithy_client_1.getArrayIfSingleItem)(output["serviceType"]["item"]), context);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = (0, smithy_client_1.expectString)(output["serviceId"]);
    }
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = (0, smithy_client_1.expectString)(output["serviceName"]);
    }
    if (output["serviceState"] !== undefined) {
        contents.ServiceState = (0, smithy_client_1.expectString)(output["serviceState"]);
    }
    if (output.availabilityZoneSet === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["availabilityZoneSet"]["item"]), context);
    }
    if (output["acceptanceRequired"] !== undefined) {
        contents.AcceptanceRequired = (0, smithy_client_1.parseBoolean)(output["acceptanceRequired"]);
    }
    if (output["managesVpcEndpoints"] !== undefined) {
        contents.ManagesVpcEndpoints = (0, smithy_client_1.parseBoolean)(output["managesVpcEndpoints"]);
    }
    if (output.networkLoadBalancerArnSet === "") {
        contents.NetworkLoadBalancerArns = [];
    }
    else if (output["networkLoadBalancerArnSet"] !== undefined &&
        output["networkLoadBalancerArnSet"]["item"] !== undefined) {
        contents.NetworkLoadBalancerArns = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["networkLoadBalancerArnSet"]["item"]), context);
    }
    if (output.gatewayLoadBalancerArnSet === "") {
        contents.GatewayLoadBalancerArns = [];
    }
    else if (output["gatewayLoadBalancerArnSet"] !== undefined &&
        output["gatewayLoadBalancerArnSet"]["item"] !== undefined) {
        contents.GatewayLoadBalancerArns = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["gatewayLoadBalancerArnSet"]["item"]), context);
    }
    if (output.supportedIpAddressTypeSet === "") {
        contents.SupportedIpAddressTypes = [];
    }
    else if (output["supportedIpAddressTypeSet"] !== undefined &&
        output["supportedIpAddressTypeSet"]["item"] !== undefined) {
        contents.SupportedIpAddressTypes = deserializeAws_ec2SupportedIpAddressTypes((0, smithy_client_1.getArrayIfSingleItem)(output["supportedIpAddressTypeSet"]["item"]), context);
    }
    if (output.baseEndpointDnsNameSet === "") {
        contents.BaseEndpointDnsNames = [];
    }
    else if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
        contents.BaseEndpointDnsNames = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["baseEndpointDnsNameSet"]["item"]), context);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = (0, smithy_client_1.expectString)(output["privateDnsName"]);
    }
    if (output["privateDnsNameConfiguration"] !== undefined) {
        contents.PrivateDnsNameConfiguration = deserializeAws_ec2PrivateDnsNameConfiguration(output["privateDnsNameConfiguration"], context);
    }
    if (output["payerResponsibility"] !== undefined) {
        contents.PayerResponsibility = (0, smithy_client_1.expectString)(output["payerResponsibility"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ServiceConfigurationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ServiceConfiguration(entry, context);
    });
};
const deserializeAws_ec2ServiceDetail = (output, context) => {
    const contents = {
        ServiceName: undefined,
        ServiceId: undefined,
        ServiceType: undefined,
        AvailabilityZones: undefined,
        Owner: undefined,
        BaseEndpointDnsNames: undefined,
        PrivateDnsName: undefined,
        PrivateDnsNames: undefined,
        VpcEndpointPolicySupported: undefined,
        AcceptanceRequired: undefined,
        ManagesVpcEndpoints: undefined,
        PayerResponsibility: undefined,
        Tags: undefined,
        PrivateDnsNameVerificationState: undefined,
        SupportedIpAddressTypes: undefined,
    };
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = (0, smithy_client_1.expectString)(output["serviceName"]);
    }
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = (0, smithy_client_1.expectString)(output["serviceId"]);
    }
    if (output.serviceType === "") {
        contents.ServiceType = [];
    }
    else if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
        contents.ServiceType = deserializeAws_ec2ServiceTypeDetailSet((0, smithy_client_1.getArrayIfSingleItem)(output["serviceType"]["item"]), context);
    }
    if (output.availabilityZoneSet === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["availabilityZoneSet"]["item"]), context);
    }
    if (output["owner"] !== undefined) {
        contents.Owner = (0, smithy_client_1.expectString)(output["owner"]);
    }
    if (output.baseEndpointDnsNameSet === "") {
        contents.BaseEndpointDnsNames = [];
    }
    else if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
        contents.BaseEndpointDnsNames = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["baseEndpointDnsNameSet"]["item"]), context);
    }
    if (output["privateDnsName"] !== undefined) {
        contents.PrivateDnsName = (0, smithy_client_1.expectString)(output["privateDnsName"]);
    }
    if (output.privateDnsNameSet === "") {
        contents.PrivateDnsNames = [];
    }
    else if (output["privateDnsNameSet"] !== undefined && output["privateDnsNameSet"]["item"] !== undefined) {
        contents.PrivateDnsNames = deserializeAws_ec2PrivateDnsDetailsSet((0, smithy_client_1.getArrayIfSingleItem)(output["privateDnsNameSet"]["item"]), context);
    }
    if (output["vpcEndpointPolicySupported"] !== undefined) {
        contents.VpcEndpointPolicySupported = (0, smithy_client_1.parseBoolean)(output["vpcEndpointPolicySupported"]);
    }
    if (output["acceptanceRequired"] !== undefined) {
        contents.AcceptanceRequired = (0, smithy_client_1.parseBoolean)(output["acceptanceRequired"]);
    }
    if (output["managesVpcEndpoints"] !== undefined) {
        contents.ManagesVpcEndpoints = (0, smithy_client_1.parseBoolean)(output["managesVpcEndpoints"]);
    }
    if (output["payerResponsibility"] !== undefined) {
        contents.PayerResponsibility = (0, smithy_client_1.expectString)(output["payerResponsibility"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["privateDnsNameVerificationState"] !== undefined) {
        contents.PrivateDnsNameVerificationState = (0, smithy_client_1.expectString)(output["privateDnsNameVerificationState"]);
    }
    if (output.supportedIpAddressTypeSet === "") {
        contents.SupportedIpAddressTypes = [];
    }
    else if (output["supportedIpAddressTypeSet"] !== undefined &&
        output["supportedIpAddressTypeSet"]["item"] !== undefined) {
        contents.SupportedIpAddressTypes = deserializeAws_ec2SupportedIpAddressTypes((0, smithy_client_1.getArrayIfSingleItem)(output["supportedIpAddressTypeSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ServiceDetailSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ServiceDetail(entry, context);
    });
};
const deserializeAws_ec2ServiceTypeDetail = (output, context) => {
    const contents = {
        ServiceType: undefined,
    };
    if (output["serviceType"] !== undefined) {
        contents.ServiceType = (0, smithy_client_1.expectString)(output["serviceType"]);
    }
    return contents;
};
const deserializeAws_ec2ServiceTypeDetailSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ServiceTypeDetail(entry, context);
    });
};
const deserializeAws_ec2Snapshot = (output, context) => {
    const contents = {
        DataEncryptionKeyId: undefined,
        Description: undefined,
        Encrypted: undefined,
        KmsKeyId: undefined,
        OwnerId: undefined,
        Progress: undefined,
        SnapshotId: undefined,
        StartTime: undefined,
        State: undefined,
        StateMessage: undefined,
        VolumeId: undefined,
        VolumeSize: undefined,
        OwnerAlias: undefined,
        OutpostArn: undefined,
        Tags: undefined,
        StorageTier: undefined,
        RestoreExpiryTime: undefined,
    };
    if (output["dataEncryptionKeyId"] !== undefined) {
        contents.DataEncryptionKeyId = (0, smithy_client_1.expectString)(output["dataEncryptionKeyId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["encrypted"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["kmsKeyId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startTime"]));
    }
    if (output["status"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StateMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = (0, smithy_client_1.strictParseInt32)(output["volumeSize"]);
    }
    if (output["ownerAlias"] !== undefined) {
        contents.OwnerAlias = (0, smithy_client_1.expectString)(output["ownerAlias"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["storageTier"] !== undefined) {
        contents.StorageTier = (0, smithy_client_1.expectString)(output["storageTier"]);
    }
    if (output["restoreExpiryTime"] !== undefined) {
        contents.RestoreExpiryTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["restoreExpiryTime"]));
    }
    return contents;
};
const deserializeAws_ec2SnapshotDetail = (output, context) => {
    const contents = {
        Description: undefined,
        DeviceName: undefined,
        DiskImageSize: undefined,
        Format: undefined,
        Progress: undefined,
        SnapshotId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Url: undefined,
        UserBucket: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["deviceName"] !== undefined) {
        contents.DeviceName = (0, smithy_client_1.expectString)(output["deviceName"]);
    }
    if (output["diskImageSize"] !== undefined) {
        contents.DiskImageSize = (0, smithy_client_1.strictParseFloat)(output["diskImageSize"]);
    }
    if (output["format"] !== undefined) {
        contents.Format = (0, smithy_client_1.expectString)(output["format"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["url"] !== undefined) {
        contents.Url = (0, smithy_client_1.expectString)(output["url"]);
    }
    if (output["userBucket"] !== undefined) {
        contents.UserBucket = deserializeAws_ec2UserBucketDetails(output["userBucket"], context);
    }
    return contents;
};
const deserializeAws_ec2SnapshotDetailList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SnapshotDetail(entry, context);
    });
};
const deserializeAws_ec2SnapshotInfo = (output, context) => {
    const contents = {
        Description: undefined,
        Tags: undefined,
        Encrypted: undefined,
        VolumeId: undefined,
        State: undefined,
        VolumeSize: undefined,
        StartTime: undefined,
        Progress: undefined,
        OwnerId: undefined,
        SnapshotId: undefined,
        OutpostArn: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["encrypted"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["volumeSize"] !== undefined) {
        contents.VolumeSize = (0, smithy_client_1.strictParseInt32)(output["volumeSize"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startTime"]));
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    return contents;
};
const deserializeAws_ec2SnapshotList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Snapshot(entry, context);
    });
};
const deserializeAws_ec2SnapshotRecycleBinInfo = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        RecycleBinEnterTime: undefined,
        RecycleBinExitTime: undefined,
        Description: undefined,
        VolumeId: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["recycleBinEnterTime"] !== undefined) {
        contents.RecycleBinEnterTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["recycleBinEnterTime"]));
    }
    if (output["recycleBinExitTime"] !== undefined) {
        contents.RecycleBinExitTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["recycleBinExitTime"]));
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    return contents;
};
const deserializeAws_ec2SnapshotRecycleBinInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SnapshotRecycleBinInfo(entry, context);
    });
};
const deserializeAws_ec2SnapshotSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SnapshotInfo(entry, context);
    });
};
const deserializeAws_ec2SnapshotTaskDetail = (output, context) => {
    const contents = {
        Description: undefined,
        DiskImageSize: undefined,
        Encrypted: undefined,
        Format: undefined,
        KmsKeyId: undefined,
        Progress: undefined,
        SnapshotId: undefined,
        Status: undefined,
        StatusMessage: undefined,
        Url: undefined,
        UserBucket: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["diskImageSize"] !== undefined) {
        contents.DiskImageSize = (0, smithy_client_1.strictParseFloat)(output["diskImageSize"]);
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["encrypted"]);
    }
    if (output["format"] !== undefined) {
        contents.Format = (0, smithy_client_1.expectString)(output["format"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["kmsKeyId"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.expectString)(output["progress"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["url"] !== undefined) {
        contents.Url = (0, smithy_client_1.expectString)(output["url"]);
    }
    if (output["userBucket"] !== undefined) {
        contents.UserBucket = deserializeAws_ec2UserBucketDetails(output["userBucket"], context);
    }
    return contents;
};
const deserializeAws_ec2SnapshotTierStatus = (output, context) => {
    const contents = {
        SnapshotId: undefined,
        VolumeId: undefined,
        Status: undefined,
        OwnerId: undefined,
        Tags: undefined,
        StorageTier: undefined,
        LastTieringStartTime: undefined,
        LastTieringProgress: undefined,
        LastTieringOperationStatus: undefined,
        LastTieringOperationStatusDetail: undefined,
        ArchivalCompleteTime: undefined,
        RestoreExpiryTime: undefined,
    };
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["storageTier"] !== undefined) {
        contents.StorageTier = (0, smithy_client_1.expectString)(output["storageTier"]);
    }
    if (output["lastTieringStartTime"] !== undefined) {
        contents.LastTieringStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["lastTieringStartTime"]));
    }
    if (output["lastTieringProgress"] !== undefined) {
        contents.LastTieringProgress = (0, smithy_client_1.strictParseInt32)(output["lastTieringProgress"]);
    }
    if (output["lastTieringOperationStatus"] !== undefined) {
        contents.LastTieringOperationStatus = (0, smithy_client_1.expectString)(output["lastTieringOperationStatus"]);
    }
    if (output["lastTieringOperationStatusDetail"] !== undefined) {
        contents.LastTieringOperationStatusDetail = (0, smithy_client_1.expectString)(output["lastTieringOperationStatusDetail"]);
    }
    if (output["archivalCompleteTime"] !== undefined) {
        contents.ArchivalCompleteTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["archivalCompleteTime"]));
    }
    if (output["restoreExpiryTime"] !== undefined) {
        contents.RestoreExpiryTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["restoreExpiryTime"]));
    }
    return contents;
};
const deserializeAws_ec2snapshotTierStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SnapshotTierStatus(entry, context);
    });
};
const deserializeAws_ec2SpotCapacityRebalance = (output, context) => {
    const contents = {
        ReplacementStrategy: undefined,
        TerminationDelay: undefined,
    };
    if (output["replacementStrategy"] !== undefined) {
        contents.ReplacementStrategy = (0, smithy_client_1.expectString)(output["replacementStrategy"]);
    }
    if (output["terminationDelay"] !== undefined) {
        contents.TerminationDelay = (0, smithy_client_1.strictParseInt32)(output["terminationDelay"]);
    }
    return contents;
};
const deserializeAws_ec2SpotDatafeedSubscription = (output, context) => {
    const contents = {
        Bucket: undefined,
        Fault: undefined,
        OwnerId: undefined,
        Prefix: undefined,
        State: undefined,
    };
    if (output["bucket"] !== undefined) {
        contents.Bucket = (0, smithy_client_1.expectString)(output["bucket"]);
    }
    if (output["fault"] !== undefined) {
        contents.Fault = deserializeAws_ec2SpotInstanceStateFault(output["fault"], context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["prefix"] !== undefined) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["prefix"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2SpotFleetLaunchSpecification = (output, context) => {
    const contents = {
        SecurityGroups: undefined,
        AddressingType: undefined,
        BlockDeviceMappings: undefined,
        EbsOptimized: undefined,
        IamInstanceProfile: undefined,
        ImageId: undefined,
        InstanceType: undefined,
        KernelId: undefined,
        KeyName: undefined,
        Monitoring: undefined,
        NetworkInterfaces: undefined,
        Placement: undefined,
        RamdiskId: undefined,
        SpotPrice: undefined,
        SubnetId: undefined,
        UserData: undefined,
        WeightedCapacity: undefined,
        TagSpecifications: undefined,
        InstanceRequirements: undefined,
    };
    if (output.groupSet === "") {
        contents.SecurityGroups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2GroupIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output["addressingType"] !== undefined) {
        contents.AddressingType = (0, smithy_client_1.expectString)(output["addressingType"]);
    }
    if (output.blockDeviceMapping === "") {
        contents.BlockDeviceMappings = [];
    }
    else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
        contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList((0, smithy_client_1.getArrayIfSingleItem)(output["blockDeviceMapping"]["item"]), context);
    }
    if (output["ebsOptimized"] !== undefined) {
        contents.EbsOptimized = (0, smithy_client_1.parseBoolean)(output["ebsOptimized"]);
    }
    if (output["iamInstanceProfile"] !== undefined) {
        contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfileSpecification(output["iamInstanceProfile"], context);
    }
    if (output["imageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["imageId"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["kernelId"] !== undefined) {
        contents.KernelId = (0, smithy_client_1.expectString)(output["kernelId"]);
    }
    if (output["keyName"] !== undefined) {
        contents.KeyName = (0, smithy_client_1.expectString)(output["keyName"]);
    }
    if (output["monitoring"] !== undefined) {
        contents.Monitoring = deserializeAws_ec2SpotFleetMonitoring(output["monitoring"], context);
    }
    if (output.networkInterfaceSet === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_ec2InstanceNetworkInterfaceSpecificationList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInterfaceSet"]["item"]), context);
    }
    if (output["placement"] !== undefined) {
        contents.Placement = deserializeAws_ec2SpotPlacement(output["placement"], context);
    }
    if (output["ramdiskId"] !== undefined) {
        contents.RamdiskId = (0, smithy_client_1.expectString)(output["ramdiskId"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = (0, smithy_client_1.expectString)(output["spotPrice"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["userData"] !== undefined) {
        contents.UserData = (0, smithy_client_1.expectString)(output["userData"]);
    }
    if (output["weightedCapacity"] !== undefined) {
        contents.WeightedCapacity = (0, smithy_client_1.strictParseFloat)(output["weightedCapacity"]);
    }
    if (output.tagSpecificationSet === "") {
        contents.TagSpecifications = [];
    }
    else if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
        contents.TagSpecifications = deserializeAws_ec2SpotFleetTagSpecificationList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSpecificationSet"]["item"]), context);
    }
    if (output["instanceRequirements"] !== undefined) {
        contents.InstanceRequirements = deserializeAws_ec2InstanceRequirements(output["instanceRequirements"], context);
    }
    return contents;
};
const deserializeAws_ec2SpotFleetMonitoring = (output, context) => {
    const contents = {
        Enabled: undefined,
    };
    if (output["enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["enabled"]);
    }
    return contents;
};
const deserializeAws_ec2SpotFleetRequestConfig = (output, context) => {
    const contents = {
        ActivityStatus: undefined,
        CreateTime: undefined,
        SpotFleetRequestConfig: undefined,
        SpotFleetRequestId: undefined,
        SpotFleetRequestState: undefined,
        Tags: undefined,
    };
    if (output["activityStatus"] !== undefined) {
        contents.ActivityStatus = (0, smithy_client_1.expectString)(output["activityStatus"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["spotFleetRequestConfig"] !== undefined) {
        contents.SpotFleetRequestConfig = deserializeAws_ec2SpotFleetRequestConfigData(output["spotFleetRequestConfig"], context);
    }
    if (output["spotFleetRequestId"] !== undefined) {
        contents.SpotFleetRequestId = (0, smithy_client_1.expectString)(output["spotFleetRequestId"]);
    }
    if (output["spotFleetRequestState"] !== undefined) {
        contents.SpotFleetRequestState = (0, smithy_client_1.expectString)(output["spotFleetRequestState"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2SpotFleetRequestConfigData = (output, context) => {
    const contents = {
        AllocationStrategy: undefined,
        OnDemandAllocationStrategy: undefined,
        SpotMaintenanceStrategies: undefined,
        ClientToken: undefined,
        ExcessCapacityTerminationPolicy: undefined,
        FulfilledCapacity: undefined,
        OnDemandFulfilledCapacity: undefined,
        IamFleetRole: undefined,
        LaunchSpecifications: undefined,
        LaunchTemplateConfigs: undefined,
        SpotPrice: undefined,
        TargetCapacity: undefined,
        OnDemandTargetCapacity: undefined,
        OnDemandMaxTotalPrice: undefined,
        SpotMaxTotalPrice: undefined,
        TerminateInstancesWithExpiration: undefined,
        Type: undefined,
        ValidFrom: undefined,
        ValidUntil: undefined,
        ReplaceUnhealthyInstances: undefined,
        InstanceInterruptionBehavior: undefined,
        LoadBalancersConfig: undefined,
        InstancePoolsToUseCount: undefined,
        Context: undefined,
        TargetCapacityUnitType: undefined,
        TagSpecifications: undefined,
    };
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = (0, smithy_client_1.expectString)(output["allocationStrategy"]);
    }
    if (output["onDemandAllocationStrategy"] !== undefined) {
        contents.OnDemandAllocationStrategy = (0, smithy_client_1.expectString)(output["onDemandAllocationStrategy"]);
    }
    if (output["spotMaintenanceStrategies"] !== undefined) {
        contents.SpotMaintenanceStrategies = deserializeAws_ec2SpotMaintenanceStrategies(output["spotMaintenanceStrategies"], context);
    }
    if (output["clientToken"] !== undefined) {
        contents.ClientToken = (0, smithy_client_1.expectString)(output["clientToken"]);
    }
    if (output["excessCapacityTerminationPolicy"] !== undefined) {
        contents.ExcessCapacityTerminationPolicy = (0, smithy_client_1.expectString)(output["excessCapacityTerminationPolicy"]);
    }
    if (output["fulfilledCapacity"] !== undefined) {
        contents.FulfilledCapacity = (0, smithy_client_1.strictParseFloat)(output["fulfilledCapacity"]);
    }
    if (output["onDemandFulfilledCapacity"] !== undefined) {
        contents.OnDemandFulfilledCapacity = (0, smithy_client_1.strictParseFloat)(output["onDemandFulfilledCapacity"]);
    }
    if (output["iamFleetRole"] !== undefined) {
        contents.IamFleetRole = (0, smithy_client_1.expectString)(output["iamFleetRole"]);
    }
    if (output.launchSpecifications === "") {
        contents.LaunchSpecifications = [];
    }
    else if (output["launchSpecifications"] !== undefined && output["launchSpecifications"]["item"] !== undefined) {
        contents.LaunchSpecifications = deserializeAws_ec2LaunchSpecsList((0, smithy_client_1.getArrayIfSingleItem)(output["launchSpecifications"]["item"]), context);
    }
    if (output.launchTemplateConfigs === "") {
        contents.LaunchTemplateConfigs = [];
    }
    else if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
        contents.LaunchTemplateConfigs = deserializeAws_ec2LaunchTemplateConfigList((0, smithy_client_1.getArrayIfSingleItem)(output["launchTemplateConfigs"]["item"]), context);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = (0, smithy_client_1.expectString)(output["spotPrice"]);
    }
    if (output["targetCapacity"] !== undefined) {
        contents.TargetCapacity = (0, smithy_client_1.strictParseInt32)(output["targetCapacity"]);
    }
    if (output["onDemandTargetCapacity"] !== undefined) {
        contents.OnDemandTargetCapacity = (0, smithy_client_1.strictParseInt32)(output["onDemandTargetCapacity"]);
    }
    if (output["onDemandMaxTotalPrice"] !== undefined) {
        contents.OnDemandMaxTotalPrice = (0, smithy_client_1.expectString)(output["onDemandMaxTotalPrice"]);
    }
    if (output["spotMaxTotalPrice"] !== undefined) {
        contents.SpotMaxTotalPrice = (0, smithy_client_1.expectString)(output["spotMaxTotalPrice"]);
    }
    if (output["terminateInstancesWithExpiration"] !== undefined) {
        contents.TerminateInstancesWithExpiration = (0, smithy_client_1.parseBoolean)(output["terminateInstancesWithExpiration"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["validFrom"] !== undefined) {
        contents.ValidFrom = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["validFrom"]));
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["validUntil"]));
    }
    if (output["replaceUnhealthyInstances"] !== undefined) {
        contents.ReplaceUnhealthyInstances = (0, smithy_client_1.parseBoolean)(output["replaceUnhealthyInstances"]);
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = (0, smithy_client_1.expectString)(output["instanceInterruptionBehavior"]);
    }
    if (output["loadBalancersConfig"] !== undefined) {
        contents.LoadBalancersConfig = deserializeAws_ec2LoadBalancersConfig(output["loadBalancersConfig"], context);
    }
    if (output["instancePoolsToUseCount"] !== undefined) {
        contents.InstancePoolsToUseCount = (0, smithy_client_1.strictParseInt32)(output["instancePoolsToUseCount"]);
    }
    if (output["context"] !== undefined) {
        contents.Context = (0, smithy_client_1.expectString)(output["context"]);
    }
    if (output["targetCapacityUnitType"] !== undefined) {
        contents.TargetCapacityUnitType = (0, smithy_client_1.expectString)(output["targetCapacityUnitType"]);
    }
    if (output.TagSpecification === "") {
        contents.TagSpecifications = [];
    }
    else if (output["TagSpecification"] !== undefined && output["TagSpecification"]["item"] !== undefined) {
        contents.TagSpecifications = deserializeAws_ec2TagSpecificationList((0, smithy_client_1.getArrayIfSingleItem)(output["TagSpecification"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2SpotFleetRequestConfigSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotFleetRequestConfig(entry, context);
    });
};
const deserializeAws_ec2SpotFleetTagSpecification = (output, context) => {
    const contents = {
        ResourceType: undefined,
        Tags: undefined,
    };
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output.tag === "") {
        contents.Tags = [];
    }
    else if (output["tag"] !== undefined && output["tag"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tag"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2SpotFleetTagSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotFleetTagSpecification(entry, context);
    });
};
const deserializeAws_ec2SpotInstanceRequest = (output, context) => {
    const contents = {
        ActualBlockHourlyPrice: undefined,
        AvailabilityZoneGroup: undefined,
        BlockDurationMinutes: undefined,
        CreateTime: undefined,
        Fault: undefined,
        InstanceId: undefined,
        LaunchGroup: undefined,
        LaunchSpecification: undefined,
        LaunchedAvailabilityZone: undefined,
        ProductDescription: undefined,
        SpotInstanceRequestId: undefined,
        SpotPrice: undefined,
        State: undefined,
        Status: undefined,
        Tags: undefined,
        Type: undefined,
        ValidFrom: undefined,
        ValidUntil: undefined,
        InstanceInterruptionBehavior: undefined,
    };
    if (output["actualBlockHourlyPrice"] !== undefined) {
        contents.ActualBlockHourlyPrice = (0, smithy_client_1.expectString)(output["actualBlockHourlyPrice"]);
    }
    if (output["availabilityZoneGroup"] !== undefined) {
        contents.AvailabilityZoneGroup = (0, smithy_client_1.expectString)(output["availabilityZoneGroup"]);
    }
    if (output["blockDurationMinutes"] !== undefined) {
        contents.BlockDurationMinutes = (0, smithy_client_1.strictParseInt32)(output["blockDurationMinutes"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["fault"] !== undefined) {
        contents.Fault = deserializeAws_ec2SpotInstanceStateFault(output["fault"], context);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["launchGroup"] !== undefined) {
        contents.LaunchGroup = (0, smithy_client_1.expectString)(output["launchGroup"]);
    }
    if (output["launchSpecification"] !== undefined) {
        contents.LaunchSpecification = deserializeAws_ec2LaunchSpecification(output["launchSpecification"], context);
    }
    if (output["launchedAvailabilityZone"] !== undefined) {
        contents.LaunchedAvailabilityZone = (0, smithy_client_1.expectString)(output["launchedAvailabilityZone"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["productDescription"]);
    }
    if (output["spotInstanceRequestId"] !== undefined) {
        contents.SpotInstanceRequestId = (0, smithy_client_1.expectString)(output["spotInstanceRequestId"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = (0, smithy_client_1.expectString)(output["spotPrice"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2SpotInstanceStatus(output["status"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["validFrom"] !== undefined) {
        contents.ValidFrom = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["validFrom"]));
    }
    if (output["validUntil"] !== undefined) {
        contents.ValidUntil = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["validUntil"]));
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = (0, smithy_client_1.expectString)(output["instanceInterruptionBehavior"]);
    }
    return contents;
};
const deserializeAws_ec2SpotInstanceRequestList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotInstanceRequest(entry, context);
    });
};
const deserializeAws_ec2SpotInstanceStateFault = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2SpotInstanceStatus = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
        UpdateTime: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    if (output["updateTime"] !== undefined) {
        contents.UpdateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["updateTime"]));
    }
    return contents;
};
const deserializeAws_ec2SpotMaintenanceStrategies = (output, context) => {
    const contents = {
        CapacityRebalance: undefined,
    };
    if (output["capacityRebalance"] !== undefined) {
        contents.CapacityRebalance = deserializeAws_ec2SpotCapacityRebalance(output["capacityRebalance"], context);
    }
    return contents;
};
const deserializeAws_ec2SpotOptions = (output, context) => {
    const contents = {
        AllocationStrategy: undefined,
        MaintenanceStrategies: undefined,
        InstanceInterruptionBehavior: undefined,
        InstancePoolsToUseCount: undefined,
        SingleInstanceType: undefined,
        SingleAvailabilityZone: undefined,
        MinTargetCapacity: undefined,
        MaxTotalPrice: undefined,
    };
    if (output["allocationStrategy"] !== undefined) {
        contents.AllocationStrategy = (0, smithy_client_1.expectString)(output["allocationStrategy"]);
    }
    if (output["maintenanceStrategies"] !== undefined) {
        contents.MaintenanceStrategies = deserializeAws_ec2FleetSpotMaintenanceStrategies(output["maintenanceStrategies"], context);
    }
    if (output["instanceInterruptionBehavior"] !== undefined) {
        contents.InstanceInterruptionBehavior = (0, smithy_client_1.expectString)(output["instanceInterruptionBehavior"]);
    }
    if (output["instancePoolsToUseCount"] !== undefined) {
        contents.InstancePoolsToUseCount = (0, smithy_client_1.strictParseInt32)(output["instancePoolsToUseCount"]);
    }
    if (output["singleInstanceType"] !== undefined) {
        contents.SingleInstanceType = (0, smithy_client_1.parseBoolean)(output["singleInstanceType"]);
    }
    if (output["singleAvailabilityZone"] !== undefined) {
        contents.SingleAvailabilityZone = (0, smithy_client_1.parseBoolean)(output["singleAvailabilityZone"]);
    }
    if (output["minTargetCapacity"] !== undefined) {
        contents.MinTargetCapacity = (0, smithy_client_1.strictParseInt32)(output["minTargetCapacity"]);
    }
    if (output["maxTotalPrice"] !== undefined) {
        contents.MaxTotalPrice = (0, smithy_client_1.expectString)(output["maxTotalPrice"]);
    }
    return contents;
};
const deserializeAws_ec2SpotPlacement = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        GroupName: undefined,
        Tenancy: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    if (output["tenancy"] !== undefined) {
        contents.Tenancy = (0, smithy_client_1.expectString)(output["tenancy"]);
    }
    return contents;
};
const deserializeAws_ec2SpotPlacementScore = (output, context) => {
    const contents = {
        Region: undefined,
        AvailabilityZoneId: undefined,
        Score: undefined,
    };
    if (output["region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["region"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = (0, smithy_client_1.expectString)(output["availabilityZoneId"]);
    }
    if (output["score"] !== undefined) {
        contents.Score = (0, smithy_client_1.strictParseInt32)(output["score"]);
    }
    return contents;
};
const deserializeAws_ec2SpotPlacementScores = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotPlacementScore(entry, context);
    });
};
const deserializeAws_ec2SpotPrice = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        InstanceType: undefined,
        ProductDescription: undefined,
        SpotPrice: undefined,
        Timestamp: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["instanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["instanceType"]);
    }
    if (output["productDescription"] !== undefined) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["productDescription"]);
    }
    if (output["spotPrice"] !== undefined) {
        contents.SpotPrice = (0, smithy_client_1.expectString)(output["spotPrice"]);
    }
    if (output["timestamp"] !== undefined) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["timestamp"]));
    }
    return contents;
};
const deserializeAws_ec2SpotPriceHistoryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SpotPrice(entry, context);
    });
};
const deserializeAws_ec2StaleIpPermission = (output, context) => {
    const contents = {
        FromPort: undefined,
        IpProtocol: undefined,
        IpRanges: undefined,
        PrefixListIds: undefined,
        ToPort: undefined,
        UserIdGroupPairs: undefined,
    };
    if (output["fromPort"] !== undefined) {
        contents.FromPort = (0, smithy_client_1.strictParseInt32)(output["fromPort"]);
    }
    if (output["ipProtocol"] !== undefined) {
        contents.IpProtocol = (0, smithy_client_1.expectString)(output["ipProtocol"]);
    }
    if (output.ipRanges === "") {
        contents.IpRanges = [];
    }
    else if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
        contents.IpRanges = deserializeAws_ec2IpRanges((0, smithy_client_1.getArrayIfSingleItem)(output["ipRanges"]["item"]), context);
    }
    if (output.prefixListIds === "") {
        contents.PrefixListIds = [];
    }
    else if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
        contents.PrefixListIds = deserializeAws_ec2PrefixListIdSet((0, smithy_client_1.getArrayIfSingleItem)(output["prefixListIds"]["item"]), context);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = (0, smithy_client_1.strictParseInt32)(output["toPort"]);
    }
    if (output.groups === "") {
        contents.UserIdGroupPairs = [];
    }
    else if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
        contents.UserIdGroupPairs = deserializeAws_ec2UserIdGroupPairSet((0, smithy_client_1.getArrayIfSingleItem)(output["groups"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2StaleIpPermissionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2StaleIpPermission(entry, context);
    });
};
const deserializeAws_ec2StaleSecurityGroup = (output, context) => {
    const contents = {
        Description: undefined,
        GroupId: undefined,
        GroupName: undefined,
        StaleIpPermissions: undefined,
        StaleIpPermissionsEgress: undefined,
        VpcId: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    if (output.staleIpPermissions === "") {
        contents.StaleIpPermissions = [];
    }
    else if (output["staleIpPermissions"] !== undefined && output["staleIpPermissions"]["item"] !== undefined) {
        contents.StaleIpPermissions = deserializeAws_ec2StaleIpPermissionSet((0, smithy_client_1.getArrayIfSingleItem)(output["staleIpPermissions"]["item"]), context);
    }
    if (output.staleIpPermissionsEgress === "") {
        contents.StaleIpPermissionsEgress = [];
    }
    else if (output["staleIpPermissionsEgress"] !== undefined &&
        output["staleIpPermissionsEgress"]["item"] !== undefined) {
        contents.StaleIpPermissionsEgress = deserializeAws_ec2StaleIpPermissionSet((0, smithy_client_1.getArrayIfSingleItem)(output["staleIpPermissionsEgress"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2StaleSecurityGroupSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2StaleSecurityGroup(entry, context);
    });
};
const deserializeAws_ec2StartInstancesResult = (output, context) => {
    const contents = {
        StartingInstances: undefined,
    };
    if (output.instancesSet === "") {
        contents.StartingInstances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.StartingInstances = deserializeAws_ec2InstanceStateChangeList((0, smithy_client_1.getArrayIfSingleItem)(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisResult = (output, context) => {
    const contents = {
        NetworkInsightsAccessScopeAnalysis: undefined,
    };
    if (output["networkInsightsAccessScopeAnalysis"] !== undefined) {
        contents.NetworkInsightsAccessScopeAnalysis = deserializeAws_ec2NetworkInsightsAccessScopeAnalysis(output["networkInsightsAccessScopeAnalysis"], context);
    }
    return contents;
};
const deserializeAws_ec2StartNetworkInsightsAnalysisResult = (output, context) => {
    const contents = {
        NetworkInsightsAnalysis: undefined,
    };
    if (output["networkInsightsAnalysis"] !== undefined) {
        contents.NetworkInsightsAnalysis = deserializeAws_ec2NetworkInsightsAnalysis(output["networkInsightsAnalysis"], context);
    }
    return contents;
};
const deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationResult = (output, context) => {
    const contents = {
        ReturnValue: undefined,
    };
    if (output["return"] !== undefined) {
        contents.ReturnValue = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2StateReason = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2StopInstancesResult = (output, context) => {
    const contents = {
        StoppingInstances: undefined,
    };
    if (output.instancesSet === "") {
        contents.StoppingInstances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.StoppingInstances = deserializeAws_ec2InstanceStateChangeList((0, smithy_client_1.getArrayIfSingleItem)(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2Storage = (output, context) => {
    const contents = {
        S3: undefined,
    };
    if (output["S3"] !== undefined) {
        contents.S3 = deserializeAws_ec2S3Storage(output["S3"], context);
    }
    return contents;
};
const deserializeAws_ec2StoreImageTaskResult = (output, context) => {
    const contents = {
        AmiId: undefined,
        TaskStartTime: undefined,
        Bucket: undefined,
        S3objectKey: undefined,
        ProgressPercentage: undefined,
        StoreTaskState: undefined,
        StoreTaskFailureReason: undefined,
    };
    if (output["amiId"] !== undefined) {
        contents.AmiId = (0, smithy_client_1.expectString)(output["amiId"]);
    }
    if (output["taskStartTime"] !== undefined) {
        contents.TaskStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["taskStartTime"]));
    }
    if (output["bucket"] !== undefined) {
        contents.Bucket = (0, smithy_client_1.expectString)(output["bucket"]);
    }
    if (output["s3objectKey"] !== undefined) {
        contents.S3objectKey = (0, smithy_client_1.expectString)(output["s3objectKey"]);
    }
    if (output["progressPercentage"] !== undefined) {
        contents.ProgressPercentage = (0, smithy_client_1.strictParseInt32)(output["progressPercentage"]);
    }
    if (output["storeTaskState"] !== undefined) {
        contents.StoreTaskState = (0, smithy_client_1.expectString)(output["storeTaskState"]);
    }
    if (output["storeTaskFailureReason"] !== undefined) {
        contents.StoreTaskFailureReason = (0, smithy_client_1.expectString)(output["storeTaskFailureReason"]);
    }
    return contents;
};
const deserializeAws_ec2StoreImageTaskResultSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2StoreImageTaskResult(entry, context);
    });
};
const deserializeAws_ec2StringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2Subnet = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        AvailabilityZoneId: undefined,
        AvailableIpAddressCount: undefined,
        CidrBlock: undefined,
        DefaultForAz: undefined,
        EnableLniAtDeviceIndex: undefined,
        MapPublicIpOnLaunch: undefined,
        MapCustomerOwnedIpOnLaunch: undefined,
        CustomerOwnedIpv4Pool: undefined,
        State: undefined,
        SubnetId: undefined,
        VpcId: undefined,
        OwnerId: undefined,
        AssignIpv6AddressOnCreation: undefined,
        Ipv6CidrBlockAssociationSet: undefined,
        Tags: undefined,
        SubnetArn: undefined,
        OutpostArn: undefined,
        EnableDns64: undefined,
        Ipv6Native: undefined,
        PrivateDnsNameOptionsOnLaunch: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["availabilityZoneId"] !== undefined) {
        contents.AvailabilityZoneId = (0, smithy_client_1.expectString)(output["availabilityZoneId"]);
    }
    if (output["availableIpAddressCount"] !== undefined) {
        contents.AvailableIpAddressCount = (0, smithy_client_1.strictParseInt32)(output["availableIpAddressCount"]);
    }
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = (0, smithy_client_1.expectString)(output["cidrBlock"]);
    }
    if (output["defaultForAz"] !== undefined) {
        contents.DefaultForAz = (0, smithy_client_1.parseBoolean)(output["defaultForAz"]);
    }
    if (output["enableLniAtDeviceIndex"] !== undefined) {
        contents.EnableLniAtDeviceIndex = (0, smithy_client_1.strictParseInt32)(output["enableLniAtDeviceIndex"]);
    }
    if (output["mapPublicIpOnLaunch"] !== undefined) {
        contents.MapPublicIpOnLaunch = (0, smithy_client_1.parseBoolean)(output["mapPublicIpOnLaunch"]);
    }
    if (output["mapCustomerOwnedIpOnLaunch"] !== undefined) {
        contents.MapCustomerOwnedIpOnLaunch = (0, smithy_client_1.parseBoolean)(output["mapCustomerOwnedIpOnLaunch"]);
    }
    if (output["customerOwnedIpv4Pool"] !== undefined) {
        contents.CustomerOwnedIpv4Pool = (0, smithy_client_1.expectString)(output["customerOwnedIpv4Pool"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["assignIpv6AddressOnCreation"] !== undefined) {
        contents.AssignIpv6AddressOnCreation = (0, smithy_client_1.parseBoolean)(output["assignIpv6AddressOnCreation"]);
    }
    if (output.ipv6CidrBlockAssociationSet === "") {
        contents.Ipv6CidrBlockAssociationSet = [];
    }
    else if (output["ipv6CidrBlockAssociationSet"] !== undefined &&
        output["ipv6CidrBlockAssociationSet"]["item"] !== undefined) {
        contents.Ipv6CidrBlockAssociationSet = deserializeAws_ec2SubnetIpv6CidrBlockAssociationSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6CidrBlockAssociationSet"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["subnetArn"] !== undefined) {
        contents.SubnetArn = (0, smithy_client_1.expectString)(output["subnetArn"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output["enableDns64"] !== undefined) {
        contents.EnableDns64 = (0, smithy_client_1.parseBoolean)(output["enableDns64"]);
    }
    if (output["ipv6Native"] !== undefined) {
        contents.Ipv6Native = (0, smithy_client_1.parseBoolean)(output["ipv6Native"]);
    }
    if (output["privateDnsNameOptionsOnLaunch"] !== undefined) {
        contents.PrivateDnsNameOptionsOnLaunch = deserializeAws_ec2PrivateDnsNameOptionsOnLaunch(output["privateDnsNameOptionsOnLaunch"], context);
    }
    return contents;
};
const deserializeAws_ec2SubnetAssociation = (output, context) => {
    const contents = {
        SubnetId: undefined,
        State: undefined,
    };
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2SubnetAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SubnetAssociation(entry, context);
    });
};
const deserializeAws_ec2SubnetCidrBlockState = (output, context) => {
    const contents = {
        State: undefined,
        StatusMessage: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    return contents;
};
const deserializeAws_ec2SubnetCidrReservation = (output, context) => {
    const contents = {
        SubnetCidrReservationId: undefined,
        SubnetId: undefined,
        Cidr: undefined,
        ReservationType: undefined,
        OwnerId: undefined,
        Description: undefined,
        Tags: undefined,
    };
    if (output["subnetCidrReservationId"] !== undefined) {
        contents.SubnetCidrReservationId = (0, smithy_client_1.expectString)(output["subnetCidrReservationId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["cidr"] !== undefined) {
        contents.Cidr = (0, smithy_client_1.expectString)(output["cidr"]);
    }
    if (output["reservationType"] !== undefined) {
        contents.ReservationType = (0, smithy_client_1.expectString)(output["reservationType"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2SubnetCidrReservationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SubnetCidrReservation(entry, context);
    });
};
const deserializeAws_ec2SubnetIpv6CidrBlockAssociation = (output, context) => {
    const contents = {
        AssociationId: undefined,
        Ipv6CidrBlock: undefined,
        Ipv6CidrBlockState: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = (0, smithy_client_1.expectString)(output["ipv6CidrBlock"]);
    }
    if (output["ipv6CidrBlockState"] !== undefined) {
        contents.Ipv6CidrBlockState = deserializeAws_ec2SubnetCidrBlockState(output["ipv6CidrBlockState"], context);
    }
    return contents;
};
const deserializeAws_ec2SubnetIpv6CidrBlockAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SubnetIpv6CidrBlockAssociation(entry, context);
    });
};
const deserializeAws_ec2SubnetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Subnet(entry, context);
    });
};
const deserializeAws_ec2SuccessfulInstanceCreditSpecificationItem = (output, context) => {
    const contents = {
        InstanceId: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    return contents;
};
const deserializeAws_ec2SuccessfulInstanceCreditSpecificationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};
const deserializeAws_ec2SuccessfulQueuedPurchaseDeletion = (output, context) => {
    const contents = {
        ReservedInstancesId: undefined,
    };
    if (output["reservedInstancesId"] !== undefined) {
        contents.ReservedInstancesId = (0, smithy_client_1.expectString)(output["reservedInstancesId"]);
    }
    return contents;
};
const deserializeAws_ec2SuccessfulQueuedPurchaseDeletionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2SuccessfulQueuedPurchaseDeletion(entry, context);
    });
};
const deserializeAws_ec2SupportedIpAddressTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2Tag = (output, context) => {
    const contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["key"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2TagDescription = (output, context) => {
    const contents = {
        Key: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        Value: undefined,
    };
    if (output["key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["key"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["value"]);
    }
    return contents;
};
const deserializeAws_ec2TagDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TagDescription(entry, context);
    });
};
const deserializeAws_ec2TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Tag(entry, context);
    });
};
const deserializeAws_ec2TagSpecification = (output, context) => {
    const contents = {
        ResourceType: undefined,
        Tags: undefined,
    };
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output.Tag === "") {
        contents.Tags = [];
    }
    else if (output["Tag"] !== undefined && output["Tag"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TagSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TagSpecification(entry, context);
    });
};
const deserializeAws_ec2TargetCapacitySpecification = (output, context) => {
    const contents = {
        TotalTargetCapacity: undefined,
        OnDemandTargetCapacity: undefined,
        SpotTargetCapacity: undefined,
        DefaultTargetCapacityType: undefined,
        TargetCapacityUnitType: undefined,
    };
    if (output["totalTargetCapacity"] !== undefined) {
        contents.TotalTargetCapacity = (0, smithy_client_1.strictParseInt32)(output["totalTargetCapacity"]);
    }
    if (output["onDemandTargetCapacity"] !== undefined) {
        contents.OnDemandTargetCapacity = (0, smithy_client_1.strictParseInt32)(output["onDemandTargetCapacity"]);
    }
    if (output["spotTargetCapacity"] !== undefined) {
        contents.SpotTargetCapacity = (0, smithy_client_1.strictParseInt32)(output["spotTargetCapacity"]);
    }
    if (output["defaultTargetCapacityType"] !== undefined) {
        contents.DefaultTargetCapacityType = (0, smithy_client_1.expectString)(output["defaultTargetCapacityType"]);
    }
    if (output["targetCapacityUnitType"] !== undefined) {
        contents.TargetCapacityUnitType = (0, smithy_client_1.expectString)(output["targetCapacityUnitType"]);
    }
    return contents;
};
const deserializeAws_ec2TargetConfiguration = (output, context) => {
    const contents = {
        InstanceCount: undefined,
        OfferingId: undefined,
    };
    if (output["instanceCount"] !== undefined) {
        contents.InstanceCount = (0, smithy_client_1.strictParseInt32)(output["instanceCount"]);
    }
    if (output["offeringId"] !== undefined) {
        contents.OfferingId = (0, smithy_client_1.expectString)(output["offeringId"]);
    }
    return contents;
};
const deserializeAws_ec2TargetGroup = (output, context) => {
    const contents = {
        Arn: undefined,
    };
    if (output["arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["arn"]);
    }
    return contents;
};
const deserializeAws_ec2TargetGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TargetGroup(entry, context);
    });
};
const deserializeAws_ec2TargetGroupsConfig = (output, context) => {
    const contents = {
        TargetGroups: undefined,
    };
    if (output.targetGroups === "") {
        contents.TargetGroups = [];
    }
    else if (output["targetGroups"] !== undefined && output["targetGroups"]["item"] !== undefined) {
        contents.TargetGroups = deserializeAws_ec2TargetGroups((0, smithy_client_1.getArrayIfSingleItem)(output["targetGroups"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TargetNetwork = (output, context) => {
    const contents = {
        AssociationId: undefined,
        VpcId: undefined,
        TargetNetworkId: undefined,
        ClientVpnEndpointId: undefined,
        Status: undefined,
        SecurityGroups: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["targetNetworkId"] !== undefined) {
        contents.TargetNetworkId = (0, smithy_client_1.expectString)(output["targetNetworkId"]);
    }
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = (0, smithy_client_1.expectString)(output["clientVpnEndpointId"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2AssociationStatus(output["status"], context);
    }
    if (output.securityGroups === "") {
        contents.SecurityGroups = [];
    }
    else if (output["securityGroups"] !== undefined && output["securityGroups"]["item"] !== undefined) {
        contents.SecurityGroups = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["securityGroups"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TargetNetworkSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TargetNetwork(entry, context);
    });
};
const deserializeAws_ec2TargetReservationValue = (output, context) => {
    const contents = {
        ReservationValue: undefined,
        TargetConfiguration: undefined,
    };
    if (output["reservationValue"] !== undefined) {
        contents.ReservationValue = deserializeAws_ec2ReservationValue(output["reservationValue"], context);
    }
    if (output["targetConfiguration"] !== undefined) {
        contents.TargetConfiguration = deserializeAws_ec2TargetConfiguration(output["targetConfiguration"], context);
    }
    return contents;
};
const deserializeAws_ec2TargetReservationValueSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TargetReservationValue(entry, context);
    });
};
const deserializeAws_ec2TerminateClientVpnConnectionsResult = (output, context) => {
    const contents = {
        ClientVpnEndpointId: undefined,
        Username: undefined,
        ConnectionStatuses: undefined,
    };
    if (output["clientVpnEndpointId"] !== undefined) {
        contents.ClientVpnEndpointId = (0, smithy_client_1.expectString)(output["clientVpnEndpointId"]);
    }
    if (output["username"] !== undefined) {
        contents.Username = (0, smithy_client_1.expectString)(output["username"]);
    }
    if (output.connectionStatuses === "") {
        contents.ConnectionStatuses = [];
    }
    else if (output["connectionStatuses"] !== undefined && output["connectionStatuses"]["item"] !== undefined) {
        contents.ConnectionStatuses = deserializeAws_ec2TerminateConnectionStatusSet((0, smithy_client_1.getArrayIfSingleItem)(output["connectionStatuses"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TerminateConnectionStatus = (output, context) => {
    const contents = {
        ConnectionId: undefined,
        PreviousStatus: undefined,
        CurrentStatus: undefined,
    };
    if (output["connectionId"] !== undefined) {
        contents.ConnectionId = (0, smithy_client_1.expectString)(output["connectionId"]);
    }
    if (output["previousStatus"] !== undefined) {
        contents.PreviousStatus = deserializeAws_ec2ClientVpnConnectionStatus(output["previousStatus"], context);
    }
    if (output["currentStatus"] !== undefined) {
        contents.CurrentStatus = deserializeAws_ec2ClientVpnConnectionStatus(output["currentStatus"], context);
    }
    return contents;
};
const deserializeAws_ec2TerminateConnectionStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TerminateConnectionStatus(entry, context);
    });
};
const deserializeAws_ec2TerminateInstancesResult = (output, context) => {
    const contents = {
        TerminatingInstances: undefined,
    };
    if (output.instancesSet === "") {
        contents.TerminatingInstances = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.TerminatingInstances = deserializeAws_ec2InstanceStateChangeList((0, smithy_client_1.getArrayIfSingleItem)(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ThreadsPerCoreList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.strictParseInt32)(entry);
    });
};
const deserializeAws_ec2ThroughResourcesStatement = (output, context) => {
    const contents = {
        ResourceStatement: undefined,
    };
    if (output["resourceStatement"] !== undefined) {
        contents.ResourceStatement = deserializeAws_ec2ResourceStatement(output["resourceStatement"], context);
    }
    return contents;
};
const deserializeAws_ec2ThroughResourcesStatementList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2ThroughResourcesStatement(entry, context);
    });
};
const deserializeAws_ec2TotalLocalStorageGB = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseFloat)(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseFloat)(output["max"]);
    }
    return contents;
};
const deserializeAws_ec2TrafficMirrorFilter = (output, context) => {
    const contents = {
        TrafficMirrorFilterId: undefined,
        IngressFilterRules: undefined,
        EgressFilterRules: undefined,
        NetworkServices: undefined,
        Description: undefined,
        Tags: undefined,
    };
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = (0, smithy_client_1.expectString)(output["trafficMirrorFilterId"]);
    }
    if (output.ingressFilterRuleSet === "") {
        contents.IngressFilterRules = [];
    }
    else if (output["ingressFilterRuleSet"] !== undefined && output["ingressFilterRuleSet"]["item"] !== undefined) {
        contents.IngressFilterRules = deserializeAws_ec2TrafficMirrorFilterRuleList((0, smithy_client_1.getArrayIfSingleItem)(output["ingressFilterRuleSet"]["item"]), context);
    }
    if (output.egressFilterRuleSet === "") {
        contents.EgressFilterRules = [];
    }
    else if (output["egressFilterRuleSet"] !== undefined && output["egressFilterRuleSet"]["item"] !== undefined) {
        contents.EgressFilterRules = deserializeAws_ec2TrafficMirrorFilterRuleList((0, smithy_client_1.getArrayIfSingleItem)(output["egressFilterRuleSet"]["item"]), context);
    }
    if (output.networkServiceSet === "") {
        contents.NetworkServices = [];
    }
    else if (output["networkServiceSet"] !== undefined && output["networkServiceSet"]["item"] !== undefined) {
        contents.NetworkServices = deserializeAws_ec2TrafficMirrorNetworkServiceList((0, smithy_client_1.getArrayIfSingleItem)(output["networkServiceSet"]["item"]), context);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TrafficMirrorFilterRule = (output, context) => {
    const contents = {
        TrafficMirrorFilterRuleId: undefined,
        TrafficMirrorFilterId: undefined,
        TrafficDirection: undefined,
        RuleNumber: undefined,
        RuleAction: undefined,
        Protocol: undefined,
        DestinationPortRange: undefined,
        SourcePortRange: undefined,
        DestinationCidrBlock: undefined,
        SourceCidrBlock: undefined,
        Description: undefined,
    };
    if (output["trafficMirrorFilterRuleId"] !== undefined) {
        contents.TrafficMirrorFilterRuleId = (0, smithy_client_1.expectString)(output["trafficMirrorFilterRuleId"]);
    }
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = (0, smithy_client_1.expectString)(output["trafficMirrorFilterId"]);
    }
    if (output["trafficDirection"] !== undefined) {
        contents.TrafficDirection = (0, smithy_client_1.expectString)(output["trafficDirection"]);
    }
    if (output["ruleNumber"] !== undefined) {
        contents.RuleNumber = (0, smithy_client_1.strictParseInt32)(output["ruleNumber"]);
    }
    if (output["ruleAction"] !== undefined) {
        contents.RuleAction = (0, smithy_client_1.expectString)(output["ruleAction"]);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.strictParseInt32)(output["protocol"]);
    }
    if (output["destinationPortRange"] !== undefined) {
        contents.DestinationPortRange = deserializeAws_ec2TrafficMirrorPortRange(output["destinationPortRange"], context);
    }
    if (output["sourcePortRange"] !== undefined) {
        contents.SourcePortRange = deserializeAws_ec2TrafficMirrorPortRange(output["sourcePortRange"], context);
    }
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = (0, smithy_client_1.expectString)(output["destinationCidrBlock"]);
    }
    if (output["sourceCidrBlock"] !== undefined) {
        contents.SourceCidrBlock = (0, smithy_client_1.expectString)(output["sourceCidrBlock"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    return contents;
};
const deserializeAws_ec2TrafficMirrorFilterRuleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrafficMirrorFilterRule(entry, context);
    });
};
const deserializeAws_ec2TrafficMirrorFilterSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrafficMirrorFilter(entry, context);
    });
};
const deserializeAws_ec2TrafficMirrorNetworkServiceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2TrafficMirrorPortRange = (output, context) => {
    const contents = {
        FromPort: undefined,
        ToPort: undefined,
    };
    if (output["fromPort"] !== undefined) {
        contents.FromPort = (0, smithy_client_1.strictParseInt32)(output["fromPort"]);
    }
    if (output["toPort"] !== undefined) {
        contents.ToPort = (0, smithy_client_1.strictParseInt32)(output["toPort"]);
    }
    return contents;
};
const deserializeAws_ec2TrafficMirrorSession = (output, context) => {
    const contents = {
        TrafficMirrorSessionId: undefined,
        TrafficMirrorTargetId: undefined,
        TrafficMirrorFilterId: undefined,
        NetworkInterfaceId: undefined,
        OwnerId: undefined,
        PacketLength: undefined,
        SessionNumber: undefined,
        VirtualNetworkId: undefined,
        Description: undefined,
        Tags: undefined,
    };
    if (output["trafficMirrorSessionId"] !== undefined) {
        contents.TrafficMirrorSessionId = (0, smithy_client_1.expectString)(output["trafficMirrorSessionId"]);
    }
    if (output["trafficMirrorTargetId"] !== undefined) {
        contents.TrafficMirrorTargetId = (0, smithy_client_1.expectString)(output["trafficMirrorTargetId"]);
    }
    if (output["trafficMirrorFilterId"] !== undefined) {
        contents.TrafficMirrorFilterId = (0, smithy_client_1.expectString)(output["trafficMirrorFilterId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["packetLength"] !== undefined) {
        contents.PacketLength = (0, smithy_client_1.strictParseInt32)(output["packetLength"]);
    }
    if (output["sessionNumber"] !== undefined) {
        contents.SessionNumber = (0, smithy_client_1.strictParseInt32)(output["sessionNumber"]);
    }
    if (output["virtualNetworkId"] !== undefined) {
        contents.VirtualNetworkId = (0, smithy_client_1.strictParseInt32)(output["virtualNetworkId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TrafficMirrorSessionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrafficMirrorSession(entry, context);
    });
};
const deserializeAws_ec2TrafficMirrorTarget = (output, context) => {
    const contents = {
        TrafficMirrorTargetId: undefined,
        NetworkInterfaceId: undefined,
        NetworkLoadBalancerArn: undefined,
        Type: undefined,
        Description: undefined,
        OwnerId: undefined,
        Tags: undefined,
        GatewayLoadBalancerEndpointId: undefined,
    };
    if (output["trafficMirrorTargetId"] !== undefined) {
        contents.TrafficMirrorTargetId = (0, smithy_client_1.expectString)(output["trafficMirrorTargetId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["networkLoadBalancerArn"] !== undefined) {
        contents.NetworkLoadBalancerArn = (0, smithy_client_1.expectString)(output["networkLoadBalancerArn"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["gatewayLoadBalancerEndpointId"] !== undefined) {
        contents.GatewayLoadBalancerEndpointId = (0, smithy_client_1.expectString)(output["gatewayLoadBalancerEndpointId"]);
    }
    return contents;
};
const deserializeAws_ec2TrafficMirrorTargetSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrafficMirrorTarget(entry, context);
    });
};
const deserializeAws_ec2TransitGateway = (output, context) => {
    const contents = {
        TransitGatewayId: undefined,
        TransitGatewayArn: undefined,
        State: undefined,
        OwnerId: undefined,
        Description: undefined,
        CreationTime: undefined,
        Options: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["transitGatewayArn"] !== undefined) {
        contents.TransitGatewayArn = (0, smithy_client_1.expectString)(output["transitGatewayArn"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTime"]));
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2TransitGatewayOptions(output["options"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayAssociation = (output, context) => {
    const contents = {
        TransitGatewayRouteTableId: undefined,
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        State: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = (0, smithy_client_1.expectString)(output["transitGatewayRouteTableId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayAttachment = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        TransitGatewayId: undefined,
        TransitGatewayOwnerId: undefined,
        ResourceOwnerId: undefined,
        ResourceType: undefined,
        ResourceId: undefined,
        State: undefined,
        Association: undefined,
        CreationTime: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["transitGatewayOwnerId"] !== undefined) {
        contents.TransitGatewayOwnerId = (0, smithy_client_1.expectString)(output["transitGatewayOwnerId"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = (0, smithy_client_1.expectString)(output["resourceOwnerId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["association"] !== undefined) {
        contents.Association = deserializeAws_ec2TransitGatewayAttachmentAssociation(output["association"], context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayAttachmentAssociation = (output, context) => {
    const contents = {
        TransitGatewayRouteTableId: undefined,
        State: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = (0, smithy_client_1.expectString)(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayAttachmentBgpConfiguration = (output, context) => {
    const contents = {
        TransitGatewayAsn: undefined,
        PeerAsn: undefined,
        TransitGatewayAddress: undefined,
        PeerAddress: undefined,
        BgpStatus: undefined,
    };
    if (output["transitGatewayAsn"] !== undefined) {
        contents.TransitGatewayAsn = (0, smithy_client_1.strictParseLong)(output["transitGatewayAsn"]);
    }
    if (output["peerAsn"] !== undefined) {
        contents.PeerAsn = (0, smithy_client_1.strictParseLong)(output["peerAsn"]);
    }
    if (output["transitGatewayAddress"] !== undefined) {
        contents.TransitGatewayAddress = (0, smithy_client_1.expectString)(output["transitGatewayAddress"]);
    }
    if (output["peerAddress"] !== undefined) {
        contents.PeerAddress = (0, smithy_client_1.expectString)(output["peerAddress"]);
    }
    if (output["bgpStatus"] !== undefined) {
        contents.BgpStatus = (0, smithy_client_1.expectString)(output["bgpStatus"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayAttachmentBgpConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayAttachmentBgpConfiguration(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayAttachment(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayAttachmentPropagation = (output, context) => {
    const contents = {
        TransitGatewayRouteTableId: undefined,
        State: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = (0, smithy_client_1.expectString)(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayAttachmentPropagationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayAttachmentPropagation(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayConnect = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        TransportTransitGatewayAttachmentId: undefined,
        TransitGatewayId: undefined,
        State: undefined,
        CreationTime: undefined,
        Options: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["transportTransitGatewayAttachmentId"] !== undefined) {
        contents.TransportTransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transportTransitGatewayAttachmentId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTime"]));
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2TransitGatewayConnectOptions(output["options"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayConnectList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayConnect(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayConnectOptions = (output, context) => {
    const contents = {
        Protocol: undefined,
    };
    if (output["protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["protocol"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayConnectPeer = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        TransitGatewayConnectPeerId: undefined,
        State: undefined,
        CreationTime: undefined,
        ConnectPeerConfiguration: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["transitGatewayConnectPeerId"] !== undefined) {
        contents.TransitGatewayConnectPeerId = (0, smithy_client_1.expectString)(output["transitGatewayConnectPeerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTime"]));
    }
    if (output["connectPeerConfiguration"] !== undefined) {
        contents.ConnectPeerConfiguration = deserializeAws_ec2TransitGatewayConnectPeerConfiguration(output["connectPeerConfiguration"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayConnectPeerConfiguration = (output, context) => {
    const contents = {
        TransitGatewayAddress: undefined,
        PeerAddress: undefined,
        InsideCidrBlocks: undefined,
        Protocol: undefined,
        BgpConfigurations: undefined,
    };
    if (output["transitGatewayAddress"] !== undefined) {
        contents.TransitGatewayAddress = (0, smithy_client_1.expectString)(output["transitGatewayAddress"]);
    }
    if (output["peerAddress"] !== undefined) {
        contents.PeerAddress = (0, smithy_client_1.expectString)(output["peerAddress"]);
    }
    if (output.insideCidrBlocks === "") {
        contents.InsideCidrBlocks = [];
    }
    else if (output["insideCidrBlocks"] !== undefined && output["insideCidrBlocks"]["item"] !== undefined) {
        contents.InsideCidrBlocks = deserializeAws_ec2InsideCidrBlocksStringList((0, smithy_client_1.getArrayIfSingleItem)(output["insideCidrBlocks"]["item"]), context);
    }
    if (output["protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["protocol"]);
    }
    if (output.bgpConfigurations === "") {
        contents.BgpConfigurations = [];
    }
    else if (output["bgpConfigurations"] !== undefined && output["bgpConfigurations"]["item"] !== undefined) {
        contents.BgpConfigurations = deserializeAws_ec2TransitGatewayAttachmentBgpConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["bgpConfigurations"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayConnectPeerList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayConnectPeer(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGateway(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupMembers = (output, context) => {
    const contents = {
        TransitGatewayMulticastDomainId: undefined,
        DeregisteredNetworkInterfaceIds: undefined,
        GroupIpAddress: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = (0, smithy_client_1.expectString)(output["transitGatewayMulticastDomainId"]);
    }
    if (output.deregisteredNetworkInterfaceIds === "") {
        contents.DeregisteredNetworkInterfaceIds = [];
    }
    else if (output["deregisteredNetworkInterfaceIds"] !== undefined &&
        output["deregisteredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.DeregisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["deregisteredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = (0, smithy_client_1.expectString)(output["groupIpAddress"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupSources = (output, context) => {
    const contents = {
        TransitGatewayMulticastDomainId: undefined,
        DeregisteredNetworkInterfaceIds: undefined,
        GroupIpAddress: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = (0, smithy_client_1.expectString)(output["transitGatewayMulticastDomainId"]);
    }
    if (output.deregisteredNetworkInterfaceIds === "") {
        contents.DeregisteredNetworkInterfaceIds = [];
    }
    else if (output["deregisteredNetworkInterfaceIds"] !== undefined &&
        output["deregisteredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.DeregisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["deregisteredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = (0, smithy_client_1.expectString)(output["groupIpAddress"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayMulticastDomain = (output, context) => {
    const contents = {
        TransitGatewayMulticastDomainId: undefined,
        TransitGatewayId: undefined,
        TransitGatewayMulticastDomainArn: undefined,
        OwnerId: undefined,
        Options: undefined,
        State: undefined,
        CreationTime: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = (0, smithy_client_1.expectString)(output["transitGatewayMulticastDomainId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["transitGatewayMulticastDomainArn"] !== undefined) {
        contents.TransitGatewayMulticastDomainArn = (0, smithy_client_1.expectString)(output["transitGatewayMulticastDomainArn"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2TransitGatewayMulticastDomainOptions(output["options"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayMulticastDomainAssociation = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        ResourceOwnerId: undefined,
        Subnet: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = (0, smithy_client_1.expectString)(output["resourceOwnerId"]);
    }
    if (output["subnet"] !== undefined) {
        contents.Subnet = deserializeAws_ec2SubnetAssociation(output["subnet"], context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayMulticastDomainAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayMulticastDomainAssociation(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayMulticastDomainAssociations = (output, context) => {
    const contents = {
        TransitGatewayMulticastDomainId: undefined,
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        ResourceOwnerId: undefined,
        Subnets: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = (0, smithy_client_1.expectString)(output["transitGatewayMulticastDomainId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = (0, smithy_client_1.expectString)(output["resourceOwnerId"]);
    }
    if (output.subnets === "") {
        contents.Subnets = [];
    }
    else if (output["subnets"] !== undefined && output["subnets"]["item"] !== undefined) {
        contents.Subnets = deserializeAws_ec2SubnetAssociationList((0, smithy_client_1.getArrayIfSingleItem)(output["subnets"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayMulticastDomainList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayMulticastDomain(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayMulticastDomainOptions = (output, context) => {
    const contents = {
        Igmpv2Support: undefined,
        StaticSourcesSupport: undefined,
        AutoAcceptSharedAssociations: undefined,
    };
    if (output["igmpv2Support"] !== undefined) {
        contents.Igmpv2Support = (0, smithy_client_1.expectString)(output["igmpv2Support"]);
    }
    if (output["staticSourcesSupport"] !== undefined) {
        contents.StaticSourcesSupport = (0, smithy_client_1.expectString)(output["staticSourcesSupport"]);
    }
    if (output["autoAcceptSharedAssociations"] !== undefined) {
        contents.AutoAcceptSharedAssociations = (0, smithy_client_1.expectString)(output["autoAcceptSharedAssociations"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayMulticastGroup = (output, context) => {
    const contents = {
        GroupIpAddress: undefined,
        TransitGatewayAttachmentId: undefined,
        SubnetId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        ResourceOwnerId: undefined,
        NetworkInterfaceId: undefined,
        GroupMember: undefined,
        GroupSource: undefined,
        MemberType: undefined,
        SourceType: undefined,
    };
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = (0, smithy_client_1.expectString)(output["groupIpAddress"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["subnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["subnetId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["resourceOwnerId"] !== undefined) {
        contents.ResourceOwnerId = (0, smithy_client_1.expectString)(output["resourceOwnerId"]);
    }
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output["groupMember"] !== undefined) {
        contents.GroupMember = (0, smithy_client_1.parseBoolean)(output["groupMember"]);
    }
    if (output["groupSource"] !== undefined) {
        contents.GroupSource = (0, smithy_client_1.parseBoolean)(output["groupSource"]);
    }
    if (output["memberType"] !== undefined) {
        contents.MemberType = (0, smithy_client_1.expectString)(output["memberType"]);
    }
    if (output["sourceType"] !== undefined) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["sourceType"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayMulticastGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayMulticastGroup(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayMulticastRegisteredGroupMembers = (output, context) => {
    const contents = {
        TransitGatewayMulticastDomainId: undefined,
        RegisteredNetworkInterfaceIds: undefined,
        GroupIpAddress: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = (0, smithy_client_1.expectString)(output["transitGatewayMulticastDomainId"]);
    }
    if (output.registeredNetworkInterfaceIds === "") {
        contents.RegisteredNetworkInterfaceIds = [];
    }
    else if (output["registeredNetworkInterfaceIds"] !== undefined &&
        output["registeredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.RegisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["registeredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = (0, smithy_client_1.expectString)(output["groupIpAddress"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayMulticastRegisteredGroupSources = (output, context) => {
    const contents = {
        TransitGatewayMulticastDomainId: undefined,
        RegisteredNetworkInterfaceIds: undefined,
        GroupIpAddress: undefined,
    };
    if (output["transitGatewayMulticastDomainId"] !== undefined) {
        contents.TransitGatewayMulticastDomainId = (0, smithy_client_1.expectString)(output["transitGatewayMulticastDomainId"]);
    }
    if (output.registeredNetworkInterfaceIds === "") {
        contents.RegisteredNetworkInterfaceIds = [];
    }
    else if (output["registeredNetworkInterfaceIds"] !== undefined &&
        output["registeredNetworkInterfaceIds"]["item"] !== undefined) {
        contents.RegisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["registeredNetworkInterfaceIds"]["item"]), context);
    }
    if (output["groupIpAddress"] !== undefined) {
        contents.GroupIpAddress = (0, smithy_client_1.expectString)(output["groupIpAddress"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayOptions = (output, context) => {
    const contents = {
        AmazonSideAsn: undefined,
        TransitGatewayCidrBlocks: undefined,
        AutoAcceptSharedAttachments: undefined,
        DefaultRouteTableAssociation: undefined,
        AssociationDefaultRouteTableId: undefined,
        DefaultRouteTablePropagation: undefined,
        PropagationDefaultRouteTableId: undefined,
        VpnEcmpSupport: undefined,
        DnsSupport: undefined,
        MulticastSupport: undefined,
    };
    if (output["amazonSideAsn"] !== undefined) {
        contents.AmazonSideAsn = (0, smithy_client_1.strictParseLong)(output["amazonSideAsn"]);
    }
    if (output.transitGatewayCidrBlocks === "") {
        contents.TransitGatewayCidrBlocks = [];
    }
    else if (output["transitGatewayCidrBlocks"] !== undefined &&
        output["transitGatewayCidrBlocks"]["item"] !== undefined) {
        contents.TransitGatewayCidrBlocks = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayCidrBlocks"]["item"]), context);
    }
    if (output["autoAcceptSharedAttachments"] !== undefined) {
        contents.AutoAcceptSharedAttachments = (0, smithy_client_1.expectString)(output["autoAcceptSharedAttachments"]);
    }
    if (output["defaultRouteTableAssociation"] !== undefined) {
        contents.DefaultRouteTableAssociation = (0, smithy_client_1.expectString)(output["defaultRouteTableAssociation"]);
    }
    if (output["associationDefaultRouteTableId"] !== undefined) {
        contents.AssociationDefaultRouteTableId = (0, smithy_client_1.expectString)(output["associationDefaultRouteTableId"]);
    }
    if (output["defaultRouteTablePropagation"] !== undefined) {
        contents.DefaultRouteTablePropagation = (0, smithy_client_1.expectString)(output["defaultRouteTablePropagation"]);
    }
    if (output["propagationDefaultRouteTableId"] !== undefined) {
        contents.PropagationDefaultRouteTableId = (0, smithy_client_1.expectString)(output["propagationDefaultRouteTableId"]);
    }
    if (output["vpnEcmpSupport"] !== undefined) {
        contents.VpnEcmpSupport = (0, smithy_client_1.expectString)(output["vpnEcmpSupport"]);
    }
    if (output["dnsSupport"] !== undefined) {
        contents.DnsSupport = (0, smithy_client_1.expectString)(output["dnsSupport"]);
    }
    if (output["multicastSupport"] !== undefined) {
        contents.MulticastSupport = (0, smithy_client_1.expectString)(output["multicastSupport"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayPeeringAttachment = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        RequesterTgwInfo: undefined,
        AccepterTgwInfo: undefined,
        Status: undefined,
        State: undefined,
        CreationTime: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["requesterTgwInfo"] !== undefined) {
        contents.RequesterTgwInfo = deserializeAws_ec2PeeringTgwInfo(output["requesterTgwInfo"], context);
    }
    if (output["accepterTgwInfo"] !== undefined) {
        contents.AccepterTgwInfo = deserializeAws_ec2PeeringTgwInfo(output["accepterTgwInfo"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2PeeringAttachmentStatus(output["status"], context);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayPeeringAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayPeeringAttachment(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayPrefixListAttachment = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceType: undefined,
        ResourceId: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayPrefixListReference = (output, context) => {
    const contents = {
        TransitGatewayRouteTableId: undefined,
        PrefixListId: undefined,
        PrefixListOwnerId: undefined,
        State: undefined,
        Blackhole: undefined,
        TransitGatewayAttachment: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = (0, smithy_client_1.expectString)(output["transitGatewayRouteTableId"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = (0, smithy_client_1.expectString)(output["prefixListId"]);
    }
    if (output["prefixListOwnerId"] !== undefined) {
        contents.PrefixListOwnerId = (0, smithy_client_1.expectString)(output["prefixListOwnerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["blackhole"] !== undefined) {
        contents.Blackhole = (0, smithy_client_1.parseBoolean)(output["blackhole"]);
    }
    if (output["transitGatewayAttachment"] !== undefined) {
        contents.TransitGatewayAttachment = deserializeAws_ec2TransitGatewayPrefixListAttachment(output["transitGatewayAttachment"], context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayPrefixListReferenceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayPrefixListReference(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayPropagation = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        TransitGatewayRouteTableId: undefined,
        State: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = (0, smithy_client_1.expectString)(output["transitGatewayRouteTableId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayRoute = (output, context) => {
    const contents = {
        DestinationCidrBlock: undefined,
        PrefixListId: undefined,
        TransitGatewayAttachments: undefined,
        Type: undefined,
        State: undefined,
    };
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = (0, smithy_client_1.expectString)(output["destinationCidrBlock"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = (0, smithy_client_1.expectString)(output["prefixListId"]);
    }
    if (output.transitGatewayAttachments === "") {
        contents.TransitGatewayAttachments = [];
    }
    else if (output["transitGatewayAttachments"] !== undefined &&
        output["transitGatewayAttachments"]["item"] !== undefined) {
        contents.TransitGatewayAttachments = deserializeAws_ec2TransitGatewayRouteAttachmentList((0, smithy_client_1.getArrayIfSingleItem)(output["transitGatewayAttachments"]["item"]), context);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayRouteAttachment = (output, context) => {
    const contents = {
        ResourceId: undefined,
        TransitGatewayAttachmentId: undefined,
        ResourceType: undefined,
    };
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayRouteAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRouteAttachment(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRoute(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayRouteTable = (output, context) => {
    const contents = {
        TransitGatewayRouteTableId: undefined,
        TransitGatewayId: undefined,
        State: undefined,
        DefaultAssociationRouteTable: undefined,
        DefaultPropagationRouteTable: undefined,
        CreationTime: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayRouteTableId"] !== undefined) {
        contents.TransitGatewayRouteTableId = (0, smithy_client_1.expectString)(output["transitGatewayRouteTableId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["defaultAssociationRouteTable"] !== undefined) {
        contents.DefaultAssociationRouteTable = (0, smithy_client_1.parseBoolean)(output["defaultAssociationRouteTable"]);
    }
    if (output["defaultPropagationRouteTable"] !== undefined) {
        contents.DefaultPropagationRouteTable = (0, smithy_client_1.parseBoolean)(output["defaultPropagationRouteTable"]);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTime"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayRouteTableAssociation = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        State: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayRouteTableAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRouteTableAssociation(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayRouteTableList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRouteTable(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayRouteTablePropagation = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
        State: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayRouteTablePropagationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayRouteTablePropagation(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayRouteTableRoute = (output, context) => {
    const contents = {
        DestinationCidr: undefined,
        State: undefined,
        RouteOrigin: undefined,
        PrefixListId: undefined,
        AttachmentId: undefined,
        ResourceId: undefined,
        ResourceType: undefined,
    };
    if (output["destinationCidr"] !== undefined) {
        contents.DestinationCidr = (0, smithy_client_1.expectString)(output["destinationCidr"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["routeOrigin"] !== undefined) {
        contents.RouteOrigin = (0, smithy_client_1.expectString)(output["routeOrigin"]);
    }
    if (output["prefixListId"] !== undefined) {
        contents.PrefixListId = (0, smithy_client_1.expectString)(output["prefixListId"]);
    }
    if (output["attachmentId"] !== undefined) {
        contents.AttachmentId = (0, smithy_client_1.expectString)(output["attachmentId"]);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    if (output["resourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["resourceType"]);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayVpcAttachment = (output, context) => {
    const contents = {
        TransitGatewayAttachmentId: undefined,
        TransitGatewayId: undefined,
        VpcId: undefined,
        VpcOwnerId: undefined,
        State: undefined,
        SubnetIds: undefined,
        CreationTime: undefined,
        Options: undefined,
        Tags: undefined,
    };
    if (output["transitGatewayAttachmentId"] !== undefined) {
        contents.TransitGatewayAttachmentId = (0, smithy_client_1.expectString)(output["transitGatewayAttachmentId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["vpcOwnerId"] !== undefined) {
        contents.VpcOwnerId = (0, smithy_client_1.expectString)(output["vpcOwnerId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output.subnetIds === "") {
        contents.SubnetIds = [];
    }
    else if (output["subnetIds"] !== undefined && output["subnetIds"]["item"] !== undefined) {
        contents.SubnetIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["subnetIds"]["item"]), context);
    }
    if (output["creationTime"] !== undefined) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTime"]));
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2TransitGatewayVpcAttachmentOptions(output["options"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TransitGatewayVpcAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TransitGatewayVpcAttachment(entry, context);
    });
};
const deserializeAws_ec2TransitGatewayVpcAttachmentOptions = (output, context) => {
    const contents = {
        DnsSupport: undefined,
        Ipv6Support: undefined,
        ApplianceModeSupport: undefined,
    };
    if (output["dnsSupport"] !== undefined) {
        contents.DnsSupport = (0, smithy_client_1.expectString)(output["dnsSupport"]);
    }
    if (output["ipv6Support"] !== undefined) {
        contents.Ipv6Support = (0, smithy_client_1.expectString)(output["ipv6Support"]);
    }
    if (output["applianceModeSupport"] !== undefined) {
        contents.ApplianceModeSupport = (0, smithy_client_1.expectString)(output["applianceModeSupport"]);
    }
    return contents;
};
const deserializeAws_ec2TrunkInterfaceAssociation = (output, context) => {
    const contents = {
        AssociationId: undefined,
        BranchInterfaceId: undefined,
        TrunkInterfaceId: undefined,
        InterfaceProtocol: undefined,
        VlanId: undefined,
        GreKey: undefined,
        Tags: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["branchInterfaceId"] !== undefined) {
        contents.BranchInterfaceId = (0, smithy_client_1.expectString)(output["branchInterfaceId"]);
    }
    if (output["trunkInterfaceId"] !== undefined) {
        contents.TrunkInterfaceId = (0, smithy_client_1.expectString)(output["trunkInterfaceId"]);
    }
    if (output["interfaceProtocol"] !== undefined) {
        contents.InterfaceProtocol = (0, smithy_client_1.expectString)(output["interfaceProtocol"]);
    }
    if (output["vlanId"] !== undefined) {
        contents.VlanId = (0, smithy_client_1.strictParseInt32)(output["vlanId"]);
    }
    if (output["greKey"] !== undefined) {
        contents.GreKey = (0, smithy_client_1.strictParseInt32)(output["greKey"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2TrunkInterfaceAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TrunkInterfaceAssociation(entry, context);
    });
};
const deserializeAws_ec2TunnelOption = (output, context) => {
    const contents = {
        OutsideIpAddress: undefined,
        TunnelInsideCidr: undefined,
        TunnelInsideIpv6Cidr: undefined,
        PreSharedKey: undefined,
        Phase1LifetimeSeconds: undefined,
        Phase2LifetimeSeconds: undefined,
        RekeyMarginTimeSeconds: undefined,
        RekeyFuzzPercentage: undefined,
        ReplayWindowSize: undefined,
        DpdTimeoutSeconds: undefined,
        DpdTimeoutAction: undefined,
        Phase1EncryptionAlgorithms: undefined,
        Phase2EncryptionAlgorithms: undefined,
        Phase1IntegrityAlgorithms: undefined,
        Phase2IntegrityAlgorithms: undefined,
        Phase1DHGroupNumbers: undefined,
        Phase2DHGroupNumbers: undefined,
        IkeVersions: undefined,
        StartupAction: undefined,
    };
    if (output["outsideIpAddress"] !== undefined) {
        contents.OutsideIpAddress = (0, smithy_client_1.expectString)(output["outsideIpAddress"]);
    }
    if (output["tunnelInsideCidr"] !== undefined) {
        contents.TunnelInsideCidr = (0, smithy_client_1.expectString)(output["tunnelInsideCidr"]);
    }
    if (output["tunnelInsideIpv6Cidr"] !== undefined) {
        contents.TunnelInsideIpv6Cidr = (0, smithy_client_1.expectString)(output["tunnelInsideIpv6Cidr"]);
    }
    if (output["preSharedKey"] !== undefined) {
        contents.PreSharedKey = (0, smithy_client_1.expectString)(output["preSharedKey"]);
    }
    if (output["phase1LifetimeSeconds"] !== undefined) {
        contents.Phase1LifetimeSeconds = (0, smithy_client_1.strictParseInt32)(output["phase1LifetimeSeconds"]);
    }
    if (output["phase2LifetimeSeconds"] !== undefined) {
        contents.Phase2LifetimeSeconds = (0, smithy_client_1.strictParseInt32)(output["phase2LifetimeSeconds"]);
    }
    if (output["rekeyMarginTimeSeconds"] !== undefined) {
        contents.RekeyMarginTimeSeconds = (0, smithy_client_1.strictParseInt32)(output["rekeyMarginTimeSeconds"]);
    }
    if (output["rekeyFuzzPercentage"] !== undefined) {
        contents.RekeyFuzzPercentage = (0, smithy_client_1.strictParseInt32)(output["rekeyFuzzPercentage"]);
    }
    if (output["replayWindowSize"] !== undefined) {
        contents.ReplayWindowSize = (0, smithy_client_1.strictParseInt32)(output["replayWindowSize"]);
    }
    if (output["dpdTimeoutSeconds"] !== undefined) {
        contents.DpdTimeoutSeconds = (0, smithy_client_1.strictParseInt32)(output["dpdTimeoutSeconds"]);
    }
    if (output["dpdTimeoutAction"] !== undefined) {
        contents.DpdTimeoutAction = (0, smithy_client_1.expectString)(output["dpdTimeoutAction"]);
    }
    if (output.phase1EncryptionAlgorithmSet === "") {
        contents.Phase1EncryptionAlgorithms = [];
    }
    else if (output["phase1EncryptionAlgorithmSet"] !== undefined &&
        output["phase1EncryptionAlgorithmSet"]["item"] !== undefined) {
        contents.Phase1EncryptionAlgorithms = deserializeAws_ec2Phase1EncryptionAlgorithmsList((0, smithy_client_1.getArrayIfSingleItem)(output["phase1EncryptionAlgorithmSet"]["item"]), context);
    }
    if (output.phase2EncryptionAlgorithmSet === "") {
        contents.Phase2EncryptionAlgorithms = [];
    }
    else if (output["phase2EncryptionAlgorithmSet"] !== undefined &&
        output["phase2EncryptionAlgorithmSet"]["item"] !== undefined) {
        contents.Phase2EncryptionAlgorithms = deserializeAws_ec2Phase2EncryptionAlgorithmsList((0, smithy_client_1.getArrayIfSingleItem)(output["phase2EncryptionAlgorithmSet"]["item"]), context);
    }
    if (output.phase1IntegrityAlgorithmSet === "") {
        contents.Phase1IntegrityAlgorithms = [];
    }
    else if (output["phase1IntegrityAlgorithmSet"] !== undefined &&
        output["phase1IntegrityAlgorithmSet"]["item"] !== undefined) {
        contents.Phase1IntegrityAlgorithms = deserializeAws_ec2Phase1IntegrityAlgorithmsList((0, smithy_client_1.getArrayIfSingleItem)(output["phase1IntegrityAlgorithmSet"]["item"]), context);
    }
    if (output.phase2IntegrityAlgorithmSet === "") {
        contents.Phase2IntegrityAlgorithms = [];
    }
    else if (output["phase2IntegrityAlgorithmSet"] !== undefined &&
        output["phase2IntegrityAlgorithmSet"]["item"] !== undefined) {
        contents.Phase2IntegrityAlgorithms = deserializeAws_ec2Phase2IntegrityAlgorithmsList((0, smithy_client_1.getArrayIfSingleItem)(output["phase2IntegrityAlgorithmSet"]["item"]), context);
    }
    if (output.phase1DHGroupNumberSet === "") {
        contents.Phase1DHGroupNumbers = [];
    }
    else if (output["phase1DHGroupNumberSet"] !== undefined && output["phase1DHGroupNumberSet"]["item"] !== undefined) {
        contents.Phase1DHGroupNumbers = deserializeAws_ec2Phase1DHGroupNumbersList((0, smithy_client_1.getArrayIfSingleItem)(output["phase1DHGroupNumberSet"]["item"]), context);
    }
    if (output.phase2DHGroupNumberSet === "") {
        contents.Phase2DHGroupNumbers = [];
    }
    else if (output["phase2DHGroupNumberSet"] !== undefined && output["phase2DHGroupNumberSet"]["item"] !== undefined) {
        contents.Phase2DHGroupNumbers = deserializeAws_ec2Phase2DHGroupNumbersList((0, smithy_client_1.getArrayIfSingleItem)(output["phase2DHGroupNumberSet"]["item"]), context);
    }
    if (output.ikeVersionSet === "") {
        contents.IkeVersions = [];
    }
    else if (output["ikeVersionSet"] !== undefined && output["ikeVersionSet"]["item"] !== undefined) {
        contents.IkeVersions = deserializeAws_ec2IKEVersionsList((0, smithy_client_1.getArrayIfSingleItem)(output["ikeVersionSet"]["item"]), context);
    }
    if (output["startupAction"] !== undefined) {
        contents.StartupAction = (0, smithy_client_1.expectString)(output["startupAction"]);
    }
    return contents;
};
const deserializeAws_ec2TunnelOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2TunnelOption(entry, context);
    });
};
const deserializeAws_ec2UnassignIpv6AddressesResult = (output, context) => {
    const contents = {
        NetworkInterfaceId: undefined,
        UnassignedIpv6Addresses: undefined,
        UnassignedIpv6Prefixes: undefined,
    };
    if (output["networkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["networkInterfaceId"]);
    }
    if (output.unassignedIpv6Addresses === "") {
        contents.UnassignedIpv6Addresses = [];
    }
    else if (output["unassignedIpv6Addresses"] !== undefined &&
        output["unassignedIpv6Addresses"]["item"] !== undefined) {
        contents.UnassignedIpv6Addresses = deserializeAws_ec2Ipv6AddressList((0, smithy_client_1.getArrayIfSingleItem)(output["unassignedIpv6Addresses"]["item"]), context);
    }
    if (output.unassignedIpv6PrefixSet === "") {
        contents.UnassignedIpv6Prefixes = [];
    }
    else if (output["unassignedIpv6PrefixSet"] !== undefined &&
        output["unassignedIpv6PrefixSet"]["item"] !== undefined) {
        contents.UnassignedIpv6Prefixes = deserializeAws_ec2IpPrefixList((0, smithy_client_1.getArrayIfSingleItem)(output["unassignedIpv6PrefixSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2UnmonitorInstancesResult = (output, context) => {
    const contents = {
        InstanceMonitorings: undefined,
    };
    if (output.instancesSet === "") {
        contents.InstanceMonitorings = [];
    }
    else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
        contents.InstanceMonitorings = deserializeAws_ec2InstanceMonitoringList((0, smithy_client_1.getArrayIfSingleItem)(output["instancesSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItem = (output, context) => {
    const contents = {
        InstanceId: undefined,
        Error: undefined,
    };
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItemError(output["error"], context);
    }
    return contents;
};
const deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItemError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};
const deserializeAws_ec2UnsuccessfulItem = (output, context) => {
    const contents = {
        Error: undefined,
        ResourceId: undefined,
    };
    if (output["error"] !== undefined) {
        contents.Error = deserializeAws_ec2UnsuccessfulItemError(output["error"], context);
    }
    if (output["resourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["resourceId"]);
    }
    return contents;
};
const deserializeAws_ec2UnsuccessfulItemError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2UnsuccessfulItemList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UnsuccessfulItem(entry, context);
    });
};
const deserializeAws_ec2UnsuccessfulItemSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UnsuccessfulItem(entry, context);
    });
};
const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressResult = (output, context) => {
    const contents = {
        Return: undefined,
    };
    if (output["return"] !== undefined) {
        contents.Return = (0, smithy_client_1.parseBoolean)(output["return"]);
    }
    return contents;
};
const deserializeAws_ec2UsageClassTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2UserBucketDetails = (output, context) => {
    const contents = {
        S3Bucket: undefined,
        S3Key: undefined,
    };
    if (output["s3Bucket"] !== undefined) {
        contents.S3Bucket = (0, smithy_client_1.expectString)(output["s3Bucket"]);
    }
    if (output["s3Key"] !== undefined) {
        contents.S3Key = (0, smithy_client_1.expectString)(output["s3Key"]);
    }
    return contents;
};
const deserializeAws_ec2UserIdGroupPair = (output, context) => {
    const contents = {
        Description: undefined,
        GroupId: undefined,
        GroupName: undefined,
        PeeringStatus: undefined,
        UserId: undefined,
        VpcId: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["groupId"] !== undefined) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["groupId"]);
    }
    if (output["groupName"] !== undefined) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["groupName"]);
    }
    if (output["peeringStatus"] !== undefined) {
        contents.PeeringStatus = (0, smithy_client_1.expectString)(output["peeringStatus"]);
    }
    if (output["userId"] !== undefined) {
        contents.UserId = (0, smithy_client_1.expectString)(output["userId"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = (0, smithy_client_1.expectString)(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
const deserializeAws_ec2UserIdGroupPairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UserIdGroupPair(entry, context);
    });
};
const deserializeAws_ec2UserIdGroupPairSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2UserIdGroupPair(entry, context);
    });
};
const deserializeAws_ec2ValidationError = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2ValidationWarning = (output, context) => {
    const contents = {
        Errors: undefined,
    };
    if (output.errorSet === "") {
        contents.Errors = [];
    }
    else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
        contents.Errors = deserializeAws_ec2ErrorSet((0, smithy_client_1.getArrayIfSingleItem)(output["errorSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2ValueStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2VCpuCountRange = (output, context) => {
    const contents = {
        Min: undefined,
        Max: undefined,
    };
    if (output["min"] !== undefined) {
        contents.Min = (0, smithy_client_1.strictParseInt32)(output["min"]);
    }
    if (output["max"] !== undefined) {
        contents.Max = (0, smithy_client_1.strictParseInt32)(output["max"]);
    }
    return contents;
};
const deserializeAws_ec2VCpuInfo = (output, context) => {
    const contents = {
        DefaultVCpus: undefined,
        DefaultCores: undefined,
        DefaultThreadsPerCore: undefined,
        ValidCores: undefined,
        ValidThreadsPerCore: undefined,
    };
    if (output["defaultVCpus"] !== undefined) {
        contents.DefaultVCpus = (0, smithy_client_1.strictParseInt32)(output["defaultVCpus"]);
    }
    if (output["defaultCores"] !== undefined) {
        contents.DefaultCores = (0, smithy_client_1.strictParseInt32)(output["defaultCores"]);
    }
    if (output["defaultThreadsPerCore"] !== undefined) {
        contents.DefaultThreadsPerCore = (0, smithy_client_1.strictParseInt32)(output["defaultThreadsPerCore"]);
    }
    if (output.validCores === "") {
        contents.ValidCores = [];
    }
    else if (output["validCores"] !== undefined && output["validCores"]["item"] !== undefined) {
        contents.ValidCores = deserializeAws_ec2CoreCountList((0, smithy_client_1.getArrayIfSingleItem)(output["validCores"]["item"]), context);
    }
    if (output.validThreadsPerCore === "") {
        contents.ValidThreadsPerCore = [];
    }
    else if (output["validThreadsPerCore"] !== undefined && output["validThreadsPerCore"]["item"] !== undefined) {
        contents.ValidThreadsPerCore = deserializeAws_ec2ThreadsPerCoreList((0, smithy_client_1.getArrayIfSingleItem)(output["validThreadsPerCore"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2VgwTelemetry = (output, context) => {
    const contents = {
        AcceptedRouteCount: undefined,
        LastStatusChange: undefined,
        OutsideIpAddress: undefined,
        Status: undefined,
        StatusMessage: undefined,
        CertificateArn: undefined,
    };
    if (output["acceptedRouteCount"] !== undefined) {
        contents.AcceptedRouteCount = (0, smithy_client_1.strictParseInt32)(output["acceptedRouteCount"]);
    }
    if (output["lastStatusChange"] !== undefined) {
        contents.LastStatusChange = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["lastStatusChange"]));
    }
    if (output["outsideIpAddress"] !== undefined) {
        contents.OutsideIpAddress = (0, smithy_client_1.expectString)(output["outsideIpAddress"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["certificateArn"] !== undefined) {
        contents.CertificateArn = (0, smithy_client_1.expectString)(output["certificateArn"]);
    }
    return contents;
};
const deserializeAws_ec2VgwTelemetryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VgwTelemetry(entry, context);
    });
};
const deserializeAws_ec2VirtualizationTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_ec2Volume = (output, context) => {
    const contents = {
        Attachments: undefined,
        AvailabilityZone: undefined,
        CreateTime: undefined,
        Encrypted: undefined,
        KmsKeyId: undefined,
        OutpostArn: undefined,
        Size: undefined,
        SnapshotId: undefined,
        State: undefined,
        VolumeId: undefined,
        Iops: undefined,
        Tags: undefined,
        VolumeType: undefined,
        FastRestored: undefined,
        MultiAttachEnabled: undefined,
        Throughput: undefined,
    };
    if (output.attachmentSet === "") {
        contents.Attachments = [];
    }
    else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
        contents.Attachments = deserializeAws_ec2VolumeAttachmentList((0, smithy_client_1.getArrayIfSingleItem)(output["attachmentSet"]["item"]), context);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["createTime"] !== undefined) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["createTime"]));
    }
    if (output["encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["encrypted"]);
    }
    if (output["kmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["kmsKeyId"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output["size"] !== undefined) {
        contents.Size = (0, smithy_client_1.strictParseInt32)(output["size"]);
    }
    if (output["snapshotId"] !== undefined) {
        contents.SnapshotId = (0, smithy_client_1.expectString)(output["snapshotId"]);
    }
    if (output["status"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    if (output["iops"] !== undefined) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["iops"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["volumeType"] !== undefined) {
        contents.VolumeType = (0, smithy_client_1.expectString)(output["volumeType"]);
    }
    if (output["fastRestored"] !== undefined) {
        contents.FastRestored = (0, smithy_client_1.parseBoolean)(output["fastRestored"]);
    }
    if (output["multiAttachEnabled"] !== undefined) {
        contents.MultiAttachEnabled = (0, smithy_client_1.parseBoolean)(output["multiAttachEnabled"]);
    }
    if (output["throughput"] !== undefined) {
        contents.Throughput = (0, smithy_client_1.strictParseInt32)(output["throughput"]);
    }
    return contents;
};
const deserializeAws_ec2VolumeAttachment = (output, context) => {
    const contents = {
        AttachTime: undefined,
        Device: undefined,
        InstanceId: undefined,
        State: undefined,
        VolumeId: undefined,
        DeleteOnTermination: undefined,
    };
    if (output["attachTime"] !== undefined) {
        contents.AttachTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["attachTime"]));
    }
    if (output["device"] !== undefined) {
        contents.Device = (0, smithy_client_1.expectString)(output["device"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    if (output["status"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["status"]);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    if (output["deleteOnTermination"] !== undefined) {
        contents.DeleteOnTermination = (0, smithy_client_1.parseBoolean)(output["deleteOnTermination"]);
    }
    return contents;
};
const deserializeAws_ec2VolumeAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeAttachment(entry, context);
    });
};
const deserializeAws_ec2VolumeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Volume(entry, context);
    });
};
const deserializeAws_ec2VolumeModification = (output, context) => {
    const contents = {
        VolumeId: undefined,
        ModificationState: undefined,
        StatusMessage: undefined,
        TargetSize: undefined,
        TargetIops: undefined,
        TargetVolumeType: undefined,
        TargetThroughput: undefined,
        TargetMultiAttachEnabled: undefined,
        OriginalSize: undefined,
        OriginalIops: undefined,
        OriginalVolumeType: undefined,
        OriginalThroughput: undefined,
        OriginalMultiAttachEnabled: undefined,
        Progress: undefined,
        StartTime: undefined,
        EndTime: undefined,
    };
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    if (output["modificationState"] !== undefined) {
        contents.ModificationState = (0, smithy_client_1.expectString)(output["modificationState"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    if (output["targetSize"] !== undefined) {
        contents.TargetSize = (0, smithy_client_1.strictParseInt32)(output["targetSize"]);
    }
    if (output["targetIops"] !== undefined) {
        contents.TargetIops = (0, smithy_client_1.strictParseInt32)(output["targetIops"]);
    }
    if (output["targetVolumeType"] !== undefined) {
        contents.TargetVolumeType = (0, smithy_client_1.expectString)(output["targetVolumeType"]);
    }
    if (output["targetThroughput"] !== undefined) {
        contents.TargetThroughput = (0, smithy_client_1.strictParseInt32)(output["targetThroughput"]);
    }
    if (output["targetMultiAttachEnabled"] !== undefined) {
        contents.TargetMultiAttachEnabled = (0, smithy_client_1.parseBoolean)(output["targetMultiAttachEnabled"]);
    }
    if (output["originalSize"] !== undefined) {
        contents.OriginalSize = (0, smithy_client_1.strictParseInt32)(output["originalSize"]);
    }
    if (output["originalIops"] !== undefined) {
        contents.OriginalIops = (0, smithy_client_1.strictParseInt32)(output["originalIops"]);
    }
    if (output["originalVolumeType"] !== undefined) {
        contents.OriginalVolumeType = (0, smithy_client_1.expectString)(output["originalVolumeType"]);
    }
    if (output["originalThroughput"] !== undefined) {
        contents.OriginalThroughput = (0, smithy_client_1.strictParseInt32)(output["originalThroughput"]);
    }
    if (output["originalMultiAttachEnabled"] !== undefined) {
        contents.OriginalMultiAttachEnabled = (0, smithy_client_1.parseBoolean)(output["originalMultiAttachEnabled"]);
    }
    if (output["progress"] !== undefined) {
        contents.Progress = (0, smithy_client_1.strictParseLong)(output["progress"]);
    }
    if (output["startTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["startTime"]));
    }
    if (output["endTime"] !== undefined) {
        contents.EndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["endTime"]));
    }
    return contents;
};
const deserializeAws_ec2VolumeModificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeModification(entry, context);
    });
};
const deserializeAws_ec2VolumeStatusAction = (output, context) => {
    const contents = {
        Code: undefined,
        Description: undefined,
        EventId: undefined,
        EventType: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["eventId"] !== undefined) {
        contents.EventId = (0, smithy_client_1.expectString)(output["eventId"]);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = (0, smithy_client_1.expectString)(output["eventType"]);
    }
    return contents;
};
const deserializeAws_ec2VolumeStatusActionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusAction(entry, context);
    });
};
const deserializeAws_ec2VolumeStatusAttachmentStatus = (output, context) => {
    const contents = {
        IoPerformance: undefined,
        InstanceId: undefined,
    };
    if (output["ioPerformance"] !== undefined) {
        contents.IoPerformance = (0, smithy_client_1.expectString)(output["ioPerformance"]);
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    return contents;
};
const deserializeAws_ec2VolumeStatusAttachmentStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusAttachmentStatus(entry, context);
    });
};
const deserializeAws_ec2VolumeStatusDetails = (output, context) => {
    const contents = {
        Name: undefined,
        Status: undefined,
    };
    if (output["name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["name"]);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    return contents;
};
const deserializeAws_ec2VolumeStatusDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusDetails(entry, context);
    });
};
const deserializeAws_ec2VolumeStatusEvent = (output, context) => {
    const contents = {
        Description: undefined,
        EventId: undefined,
        EventType: undefined,
        NotAfter: undefined,
        NotBefore: undefined,
        InstanceId: undefined,
    };
    if (output["description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["description"]);
    }
    if (output["eventId"] !== undefined) {
        contents.EventId = (0, smithy_client_1.expectString)(output["eventId"]);
    }
    if (output["eventType"] !== undefined) {
        contents.EventType = (0, smithy_client_1.expectString)(output["eventType"]);
    }
    if (output["notAfter"] !== undefined) {
        contents.NotAfter = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["notAfter"]));
    }
    if (output["notBefore"] !== undefined) {
        contents.NotBefore = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["notBefore"]));
    }
    if (output["instanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["instanceId"]);
    }
    return contents;
};
const deserializeAws_ec2VolumeStatusEventsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusEvent(entry, context);
    });
};
const deserializeAws_ec2VolumeStatusInfo = (output, context) => {
    const contents = {
        Details: undefined,
        Status: undefined,
    };
    if (output.details === "") {
        contents.Details = [];
    }
    else if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
        contents.Details = deserializeAws_ec2VolumeStatusDetailsList((0, smithy_client_1.getArrayIfSingleItem)(output["details"]["item"]), context);
    }
    if (output["status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["status"]);
    }
    return contents;
};
const deserializeAws_ec2VolumeStatusItem = (output, context) => {
    const contents = {
        Actions: undefined,
        AvailabilityZone: undefined,
        OutpostArn: undefined,
        Events: undefined,
        VolumeId: undefined,
        VolumeStatus: undefined,
        AttachmentStatuses: undefined,
    };
    if (output.actionsSet === "") {
        contents.Actions = [];
    }
    else if (output["actionsSet"] !== undefined && output["actionsSet"]["item"] !== undefined) {
        contents.Actions = deserializeAws_ec2VolumeStatusActionsList((0, smithy_client_1.getArrayIfSingleItem)(output["actionsSet"]["item"]), context);
    }
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["outpostArn"] !== undefined) {
        contents.OutpostArn = (0, smithy_client_1.expectString)(output["outpostArn"]);
    }
    if (output.eventsSet === "") {
        contents.Events = [];
    }
    else if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
        contents.Events = deserializeAws_ec2VolumeStatusEventsList((0, smithy_client_1.getArrayIfSingleItem)(output["eventsSet"]["item"]), context);
    }
    if (output["volumeId"] !== undefined) {
        contents.VolumeId = (0, smithy_client_1.expectString)(output["volumeId"]);
    }
    if (output["volumeStatus"] !== undefined) {
        contents.VolumeStatus = deserializeAws_ec2VolumeStatusInfo(output["volumeStatus"], context);
    }
    if (output.attachmentStatuses === "") {
        contents.AttachmentStatuses = [];
    }
    else if (output["attachmentStatuses"] !== undefined && output["attachmentStatuses"]["item"] !== undefined) {
        contents.AttachmentStatuses = deserializeAws_ec2VolumeStatusAttachmentStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["attachmentStatuses"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2VolumeStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VolumeStatusItem(entry, context);
    });
};
const deserializeAws_ec2Vpc = (output, context) => {
    const contents = {
        CidrBlock: undefined,
        DhcpOptionsId: undefined,
        State: undefined,
        VpcId: undefined,
        OwnerId: undefined,
        InstanceTenancy: undefined,
        Ipv6CidrBlockAssociationSet: undefined,
        CidrBlockAssociationSet: undefined,
        IsDefault: undefined,
        Tags: undefined,
    };
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = (0, smithy_client_1.expectString)(output["cidrBlock"]);
    }
    if (output["dhcpOptionsId"] !== undefined) {
        contents.DhcpOptionsId = (0, smithy_client_1.expectString)(output["dhcpOptionsId"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["instanceTenancy"] !== undefined) {
        contents.InstanceTenancy = (0, smithy_client_1.expectString)(output["instanceTenancy"]);
    }
    if (output.ipv6CidrBlockAssociationSet === "") {
        contents.Ipv6CidrBlockAssociationSet = [];
    }
    else if (output["ipv6CidrBlockAssociationSet"] !== undefined &&
        output["ipv6CidrBlockAssociationSet"]["item"] !== undefined) {
        contents.Ipv6CidrBlockAssociationSet = deserializeAws_ec2VpcIpv6CidrBlockAssociationSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6CidrBlockAssociationSet"]["item"]), context);
    }
    if (output.cidrBlockAssociationSet === "") {
        contents.CidrBlockAssociationSet = [];
    }
    else if (output["cidrBlockAssociationSet"] !== undefined &&
        output["cidrBlockAssociationSet"]["item"] !== undefined) {
        contents.CidrBlockAssociationSet = deserializeAws_ec2VpcCidrBlockAssociationSet((0, smithy_client_1.getArrayIfSingleItem)(output["cidrBlockAssociationSet"]["item"]), context);
    }
    if (output["isDefault"] !== undefined) {
        contents.IsDefault = (0, smithy_client_1.parseBoolean)(output["isDefault"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2VpcAttachment = (output, context) => {
    const contents = {
        State: undefined,
        VpcId: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2VpcAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcAttachment(entry, context);
    });
};
const deserializeAws_ec2VpcCidrBlockAssociation = (output, context) => {
    const contents = {
        AssociationId: undefined,
        CidrBlock: undefined,
        CidrBlockState: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = (0, smithy_client_1.expectString)(output["cidrBlock"]);
    }
    if (output["cidrBlockState"] !== undefined) {
        contents.CidrBlockState = deserializeAws_ec2VpcCidrBlockState(output["cidrBlockState"], context);
    }
    return contents;
};
const deserializeAws_ec2VpcCidrBlockAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcCidrBlockAssociation(entry, context);
    });
};
const deserializeAws_ec2VpcCidrBlockState = (output, context) => {
    const contents = {
        State: undefined,
        StatusMessage: undefined,
    };
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["statusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["statusMessage"]);
    }
    return contents;
};
const deserializeAws_ec2VpcClassicLink = (output, context) => {
    const contents = {
        ClassicLinkEnabled: undefined,
        Tags: undefined,
        VpcId: undefined,
    };
    if (output["classicLinkEnabled"] !== undefined) {
        contents.ClassicLinkEnabled = (0, smithy_client_1.parseBoolean)(output["classicLinkEnabled"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    return contents;
};
const deserializeAws_ec2VpcClassicLinkList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcClassicLink(entry, context);
    });
};
const deserializeAws_ec2VpcEndpoint = (output, context) => {
    const contents = {
        VpcEndpointId: undefined,
        VpcEndpointType: undefined,
        VpcId: undefined,
        ServiceName: undefined,
        State: undefined,
        PolicyDocument: undefined,
        RouteTableIds: undefined,
        SubnetIds: undefined,
        Groups: undefined,
        IpAddressType: undefined,
        DnsOptions: undefined,
        PrivateDnsEnabled: undefined,
        RequesterManaged: undefined,
        NetworkInterfaceIds: undefined,
        DnsEntries: undefined,
        CreationTimestamp: undefined,
        Tags: undefined,
        OwnerId: undefined,
        LastError: undefined,
    };
    if (output["vpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = (0, smithy_client_1.expectString)(output["vpcEndpointId"]);
    }
    if (output["vpcEndpointType"] !== undefined) {
        contents.VpcEndpointType = (0, smithy_client_1.expectString)(output["vpcEndpointType"]);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["serviceName"] !== undefined) {
        contents.ServiceName = (0, smithy_client_1.expectString)(output["serviceName"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["policyDocument"] !== undefined) {
        contents.PolicyDocument = (0, smithy_client_1.expectString)(output["policyDocument"]);
    }
    if (output.routeTableIdSet === "") {
        contents.RouteTableIds = [];
    }
    else if (output["routeTableIdSet"] !== undefined && output["routeTableIdSet"]["item"] !== undefined) {
        contents.RouteTableIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["routeTableIdSet"]["item"]), context);
    }
    if (output.subnetIdSet === "") {
        contents.SubnetIds = [];
    }
    else if (output["subnetIdSet"] !== undefined && output["subnetIdSet"]["item"] !== undefined) {
        contents.SubnetIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["subnetIdSet"]["item"]), context);
    }
    if (output.groupSet === "") {
        contents.Groups = [];
    }
    else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
        contents.Groups = deserializeAws_ec2GroupIdentifierSet((0, smithy_client_1.getArrayIfSingleItem)(output["groupSet"]["item"]), context);
    }
    if (output["ipAddressType"] !== undefined) {
        contents.IpAddressType = (0, smithy_client_1.expectString)(output["ipAddressType"]);
    }
    if (output["dnsOptions"] !== undefined) {
        contents.DnsOptions = deserializeAws_ec2DnsOptions(output["dnsOptions"], context);
    }
    if (output["privateDnsEnabled"] !== undefined) {
        contents.PrivateDnsEnabled = (0, smithy_client_1.parseBoolean)(output["privateDnsEnabled"]);
    }
    if (output["requesterManaged"] !== undefined) {
        contents.RequesterManaged = (0, smithy_client_1.parseBoolean)(output["requesterManaged"]);
    }
    if (output.networkInterfaceIdSet === "") {
        contents.NetworkInterfaceIds = [];
    }
    else if (output["networkInterfaceIdSet"] !== undefined && output["networkInterfaceIdSet"]["item"] !== undefined) {
        contents.NetworkInterfaceIds = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["networkInterfaceIdSet"]["item"]), context);
    }
    if (output.dnsEntrySet === "") {
        contents.DnsEntries = [];
    }
    else if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
        contents.DnsEntries = deserializeAws_ec2DnsEntrySet((0, smithy_client_1.getArrayIfSingleItem)(output["dnsEntrySet"]["item"]), context);
    }
    if (output["creationTimestamp"] !== undefined) {
        contents.CreationTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTimestamp"]));
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["lastError"] !== undefined) {
        contents.LastError = deserializeAws_ec2LastError(output["lastError"], context);
    }
    return contents;
};
const deserializeAws_ec2VpcEndpointConnection = (output, context) => {
    const contents = {
        ServiceId: undefined,
        VpcEndpointId: undefined,
        VpcEndpointOwner: undefined,
        VpcEndpointState: undefined,
        CreationTimestamp: undefined,
        DnsEntries: undefined,
        NetworkLoadBalancerArns: undefined,
        GatewayLoadBalancerArns: undefined,
        IpAddressType: undefined,
    };
    if (output["serviceId"] !== undefined) {
        contents.ServiceId = (0, smithy_client_1.expectString)(output["serviceId"]);
    }
    if (output["vpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = (0, smithy_client_1.expectString)(output["vpcEndpointId"]);
    }
    if (output["vpcEndpointOwner"] !== undefined) {
        contents.VpcEndpointOwner = (0, smithy_client_1.expectString)(output["vpcEndpointOwner"]);
    }
    if (output["vpcEndpointState"] !== undefined) {
        contents.VpcEndpointState = (0, smithy_client_1.expectString)(output["vpcEndpointState"]);
    }
    if (output["creationTimestamp"] !== undefined) {
        contents.CreationTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["creationTimestamp"]));
    }
    if (output.dnsEntrySet === "") {
        contents.DnsEntries = [];
    }
    else if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
        contents.DnsEntries = deserializeAws_ec2DnsEntrySet((0, smithy_client_1.getArrayIfSingleItem)(output["dnsEntrySet"]["item"]), context);
    }
    if (output.networkLoadBalancerArnSet === "") {
        contents.NetworkLoadBalancerArns = [];
    }
    else if (output["networkLoadBalancerArnSet"] !== undefined &&
        output["networkLoadBalancerArnSet"]["item"] !== undefined) {
        contents.NetworkLoadBalancerArns = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["networkLoadBalancerArnSet"]["item"]), context);
    }
    if (output.gatewayLoadBalancerArnSet === "") {
        contents.GatewayLoadBalancerArns = [];
    }
    else if (output["gatewayLoadBalancerArnSet"] !== undefined &&
        output["gatewayLoadBalancerArnSet"]["item"] !== undefined) {
        contents.GatewayLoadBalancerArns = deserializeAws_ec2ValueStringList((0, smithy_client_1.getArrayIfSingleItem)(output["gatewayLoadBalancerArnSet"]["item"]), context);
    }
    if (output["ipAddressType"] !== undefined) {
        contents.IpAddressType = (0, smithy_client_1.expectString)(output["ipAddressType"]);
    }
    return contents;
};
const deserializeAws_ec2VpcEndpointConnectionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcEndpointConnection(entry, context);
    });
};
const deserializeAws_ec2VpcEndpointSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcEndpoint(entry, context);
    });
};
const deserializeAws_ec2VpcIpv6CidrBlockAssociation = (output, context) => {
    const contents = {
        AssociationId: undefined,
        Ipv6CidrBlock: undefined,
        Ipv6CidrBlockState: undefined,
        NetworkBorderGroup: undefined,
        Ipv6Pool: undefined,
    };
    if (output["associationId"] !== undefined) {
        contents.AssociationId = (0, smithy_client_1.expectString)(output["associationId"]);
    }
    if (output["ipv6CidrBlock"] !== undefined) {
        contents.Ipv6CidrBlock = (0, smithy_client_1.expectString)(output["ipv6CidrBlock"]);
    }
    if (output["ipv6CidrBlockState"] !== undefined) {
        contents.Ipv6CidrBlockState = deserializeAws_ec2VpcCidrBlockState(output["ipv6CidrBlockState"], context);
    }
    if (output["networkBorderGroup"] !== undefined) {
        contents.NetworkBorderGroup = (0, smithy_client_1.expectString)(output["networkBorderGroup"]);
    }
    if (output["ipv6Pool"] !== undefined) {
        contents.Ipv6Pool = (0, smithy_client_1.expectString)(output["ipv6Pool"]);
    }
    return contents;
};
const deserializeAws_ec2VpcIpv6CidrBlockAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcIpv6CidrBlockAssociation(entry, context);
    });
};
const deserializeAws_ec2VpcList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2Vpc(entry, context);
    });
};
const deserializeAws_ec2VpcPeeringConnection = (output, context) => {
    const contents = {
        AccepterVpcInfo: undefined,
        ExpirationTime: undefined,
        RequesterVpcInfo: undefined,
        Status: undefined,
        Tags: undefined,
        VpcPeeringConnectionId: undefined,
    };
    if (output["accepterVpcInfo"] !== undefined) {
        contents.AccepterVpcInfo = deserializeAws_ec2VpcPeeringConnectionVpcInfo(output["accepterVpcInfo"], context);
    }
    if (output["expirationTime"] !== undefined) {
        contents.ExpirationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["expirationTime"]));
    }
    if (output["requesterVpcInfo"] !== undefined) {
        contents.RequesterVpcInfo = deserializeAws_ec2VpcPeeringConnectionVpcInfo(output["requesterVpcInfo"], context);
    }
    if (output["status"] !== undefined) {
        contents.Status = deserializeAws_ec2VpcPeeringConnectionStateReason(output["status"], context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output["vpcPeeringConnectionId"] !== undefined) {
        contents.VpcPeeringConnectionId = (0, smithy_client_1.expectString)(output["vpcPeeringConnectionId"]);
    }
    return contents;
};
const deserializeAws_ec2VpcPeeringConnectionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpcPeeringConnection(entry, context);
    });
};
const deserializeAws_ec2VpcPeeringConnectionOptionsDescription = (output, context) => {
    const contents = {
        AllowDnsResolutionFromRemoteVpc: undefined,
        AllowEgressFromLocalClassicLinkToRemoteVpc: undefined,
        AllowEgressFromLocalVpcToRemoteClassicLink: undefined,
    };
    if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
        contents.AllowDnsResolutionFromRemoteVpc = (0, smithy_client_1.parseBoolean)(output["allowDnsResolutionFromRemoteVpc"]);
    }
    if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
        contents.AllowEgressFromLocalClassicLinkToRemoteVpc = (0, smithy_client_1.parseBoolean)(output["allowEgressFromLocalClassicLinkToRemoteVpc"]);
    }
    if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
        contents.AllowEgressFromLocalVpcToRemoteClassicLink = (0, smithy_client_1.parseBoolean)(output["allowEgressFromLocalVpcToRemoteClassicLink"]);
    }
    return contents;
};
const deserializeAws_ec2VpcPeeringConnectionStateReason = (output, context) => {
    const contents = {
        Code: undefined,
        Message: undefined,
    };
    if (output["code"] !== undefined) {
        contents.Code = (0, smithy_client_1.expectString)(output["code"]);
    }
    if (output["message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_ec2VpcPeeringConnectionVpcInfo = (output, context) => {
    const contents = {
        CidrBlock: undefined,
        Ipv6CidrBlockSet: undefined,
        CidrBlockSet: undefined,
        OwnerId: undefined,
        PeeringOptions: undefined,
        VpcId: undefined,
        Region: undefined,
    };
    if (output["cidrBlock"] !== undefined) {
        contents.CidrBlock = (0, smithy_client_1.expectString)(output["cidrBlock"]);
    }
    if (output.ipv6CidrBlockSet === "") {
        contents.Ipv6CidrBlockSet = [];
    }
    else if (output["ipv6CidrBlockSet"] !== undefined && output["ipv6CidrBlockSet"]["item"] !== undefined) {
        contents.Ipv6CidrBlockSet = deserializeAws_ec2Ipv6CidrBlockSet((0, smithy_client_1.getArrayIfSingleItem)(output["ipv6CidrBlockSet"]["item"]), context);
    }
    if (output.cidrBlockSet === "") {
        contents.CidrBlockSet = [];
    }
    else if (output["cidrBlockSet"] !== undefined && output["cidrBlockSet"]["item"] !== undefined) {
        contents.CidrBlockSet = deserializeAws_ec2CidrBlockSet((0, smithy_client_1.getArrayIfSingleItem)(output["cidrBlockSet"]["item"]), context);
    }
    if (output["ownerId"] !== undefined) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["ownerId"]);
    }
    if (output["peeringOptions"] !== undefined) {
        contents.PeeringOptions = deserializeAws_ec2VpcPeeringConnectionOptionsDescription(output["peeringOptions"], context);
    }
    if (output["vpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["vpcId"]);
    }
    if (output["region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["region"]);
    }
    return contents;
};
const deserializeAws_ec2VpnConnection = (output, context) => {
    const contents = {
        CustomerGatewayConfiguration: undefined,
        CustomerGatewayId: undefined,
        Category: undefined,
        State: undefined,
        Type: undefined,
        VpnConnectionId: undefined,
        VpnGatewayId: undefined,
        TransitGatewayId: undefined,
        CoreNetworkArn: undefined,
        CoreNetworkAttachmentArn: undefined,
        GatewayAssociationState: undefined,
        Options: undefined,
        Routes: undefined,
        Tags: undefined,
        VgwTelemetry: undefined,
    };
    if (output["customerGatewayConfiguration"] !== undefined) {
        contents.CustomerGatewayConfiguration = (0, smithy_client_1.expectString)(output["customerGatewayConfiguration"]);
    }
    if (output["customerGatewayId"] !== undefined) {
        contents.CustomerGatewayId = (0, smithy_client_1.expectString)(output["customerGatewayId"]);
    }
    if (output["category"] !== undefined) {
        contents.Category = (0, smithy_client_1.expectString)(output["category"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output["vpnConnectionId"] !== undefined) {
        contents.VpnConnectionId = (0, smithy_client_1.expectString)(output["vpnConnectionId"]);
    }
    if (output["vpnGatewayId"] !== undefined) {
        contents.VpnGatewayId = (0, smithy_client_1.expectString)(output["vpnGatewayId"]);
    }
    if (output["transitGatewayId"] !== undefined) {
        contents.TransitGatewayId = (0, smithy_client_1.expectString)(output["transitGatewayId"]);
    }
    if (output["coreNetworkArn"] !== undefined) {
        contents.CoreNetworkArn = (0, smithy_client_1.expectString)(output["coreNetworkArn"]);
    }
    if (output["coreNetworkAttachmentArn"] !== undefined) {
        contents.CoreNetworkAttachmentArn = (0, smithy_client_1.expectString)(output["coreNetworkAttachmentArn"]);
    }
    if (output["gatewayAssociationState"] !== undefined) {
        contents.GatewayAssociationState = (0, smithy_client_1.expectString)(output["gatewayAssociationState"]);
    }
    if (output["options"] !== undefined) {
        contents.Options = deserializeAws_ec2VpnConnectionOptions(output["options"], context);
    }
    if (output.routes === "") {
        contents.Routes = [];
    }
    else if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
        contents.Routes = deserializeAws_ec2VpnStaticRouteList((0, smithy_client_1.getArrayIfSingleItem)(output["routes"]["item"]), context);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    if (output.vgwTelemetry === "") {
        contents.VgwTelemetry = [];
    }
    else if (output["vgwTelemetry"] !== undefined && output["vgwTelemetry"]["item"] !== undefined) {
        contents.VgwTelemetry = deserializeAws_ec2VgwTelemetryList((0, smithy_client_1.getArrayIfSingleItem)(output["vgwTelemetry"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2VpnConnectionDeviceType = (output, context) => {
    const contents = {
        VpnConnectionDeviceTypeId: undefined,
        Vendor: undefined,
        Platform: undefined,
        Software: undefined,
    };
    if (output["vpnConnectionDeviceTypeId"] !== undefined) {
        contents.VpnConnectionDeviceTypeId = (0, smithy_client_1.expectString)(output["vpnConnectionDeviceTypeId"]);
    }
    if (output["vendor"] !== undefined) {
        contents.Vendor = (0, smithy_client_1.expectString)(output["vendor"]);
    }
    if (output["platform"] !== undefined) {
        contents.Platform = (0, smithy_client_1.expectString)(output["platform"]);
    }
    if (output["software"] !== undefined) {
        contents.Software = (0, smithy_client_1.expectString)(output["software"]);
    }
    return contents;
};
const deserializeAws_ec2VpnConnectionDeviceTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpnConnectionDeviceType(entry, context);
    });
};
const deserializeAws_ec2VpnConnectionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpnConnection(entry, context);
    });
};
const deserializeAws_ec2VpnConnectionOptions = (output, context) => {
    const contents = {
        EnableAcceleration: undefined,
        StaticRoutesOnly: undefined,
        LocalIpv4NetworkCidr: undefined,
        RemoteIpv4NetworkCidr: undefined,
        LocalIpv6NetworkCidr: undefined,
        RemoteIpv6NetworkCidr: undefined,
        TunnelInsideIpVersion: undefined,
        TunnelOptions: undefined,
    };
    if (output["enableAcceleration"] !== undefined) {
        contents.EnableAcceleration = (0, smithy_client_1.parseBoolean)(output["enableAcceleration"]);
    }
    if (output["staticRoutesOnly"] !== undefined) {
        contents.StaticRoutesOnly = (0, smithy_client_1.parseBoolean)(output["staticRoutesOnly"]);
    }
    if (output["localIpv4NetworkCidr"] !== undefined) {
        contents.LocalIpv4NetworkCidr = (0, smithy_client_1.expectString)(output["localIpv4NetworkCidr"]);
    }
    if (output["remoteIpv4NetworkCidr"] !== undefined) {
        contents.RemoteIpv4NetworkCidr = (0, smithy_client_1.expectString)(output["remoteIpv4NetworkCidr"]);
    }
    if (output["localIpv6NetworkCidr"] !== undefined) {
        contents.LocalIpv6NetworkCidr = (0, smithy_client_1.expectString)(output["localIpv6NetworkCidr"]);
    }
    if (output["remoteIpv6NetworkCidr"] !== undefined) {
        contents.RemoteIpv6NetworkCidr = (0, smithy_client_1.expectString)(output["remoteIpv6NetworkCidr"]);
    }
    if (output["tunnelInsideIpVersion"] !== undefined) {
        contents.TunnelInsideIpVersion = (0, smithy_client_1.expectString)(output["tunnelInsideIpVersion"]);
    }
    if (output.tunnelOptionSet === "") {
        contents.TunnelOptions = [];
    }
    else if (output["tunnelOptionSet"] !== undefined && output["tunnelOptionSet"]["item"] !== undefined) {
        contents.TunnelOptions = deserializeAws_ec2TunnelOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["tunnelOptionSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2VpnGateway = (output, context) => {
    const contents = {
        AvailabilityZone: undefined,
        State: undefined,
        Type: undefined,
        VpcAttachments: undefined,
        VpnGatewayId: undefined,
        AmazonSideAsn: undefined,
        Tags: undefined,
    };
    if (output["availabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["availabilityZone"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    if (output["type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["type"]);
    }
    if (output.attachments === "") {
        contents.VpcAttachments = [];
    }
    else if (output["attachments"] !== undefined && output["attachments"]["item"] !== undefined) {
        contents.VpcAttachments = deserializeAws_ec2VpcAttachmentList((0, smithy_client_1.getArrayIfSingleItem)(output["attachments"]["item"]), context);
    }
    if (output["vpnGatewayId"] !== undefined) {
        contents.VpnGatewayId = (0, smithy_client_1.expectString)(output["vpnGatewayId"]);
    }
    if (output["amazonSideAsn"] !== undefined) {
        contents.AmazonSideAsn = (0, smithy_client_1.strictParseLong)(output["amazonSideAsn"]);
    }
    if (output.tagSet === "") {
        contents.Tags = [];
    }
    else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
        contents.Tags = deserializeAws_ec2TagList((0, smithy_client_1.getArrayIfSingleItem)(output["tagSet"]["item"]), context);
    }
    return contents;
};
const deserializeAws_ec2VpnGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpnGateway(entry, context);
    });
};
const deserializeAws_ec2VpnStaticRoute = (output, context) => {
    const contents = {
        DestinationCidrBlock: undefined,
        Source: undefined,
        State: undefined,
    };
    if (output["destinationCidrBlock"] !== undefined) {
        contents.DestinationCidrBlock = (0, smithy_client_1.expectString)(output["destinationCidrBlock"]);
    }
    if (output["source"] !== undefined) {
        contents.Source = (0, smithy_client_1.expectString)(output["source"]);
    }
    if (output["state"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["state"]);
    }
    return contents;
};
const deserializeAws_ec2VpnStaticRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_ec2VpnStaticRoute(entry, context);
    });
};
const deserializeAws_ec2WithdrawByoipCidrResult = (output, context) => {
    const contents = {
        ByoipCidr: undefined,
    };
    if (output["byoipCidr"] !== undefined) {
        contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
    }
    return contents;
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parsedObj = (0, fast_xml_parser_1.parse)(encoded, {
            attributeNamePrefix: "",
            ignoreAttributes: false,
            parseNodeValue: false,
            trimValues: false,
            tagValueProcessor: (val) => (val.trim() === "" && val.includes("\n") ? "" : (0, entities_1.decodeHTML)(val)),
        });
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
});
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value))
    .join("&");
const loadEc2ErrorCode = (output, data) => {
    if (data.Errors.Error.Code !== undefined) {
        return data.Errors.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
    return "";
};
