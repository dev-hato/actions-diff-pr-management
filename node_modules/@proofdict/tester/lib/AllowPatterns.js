"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllowPatterns = exports.AllowPattern = void 0;
var proofdict_tester_util_1 = require("./proofdict-tester-util");
var SPECIAL_PATTERNS = [
    {
        placeholder: "{{COMBINATION_WORD}}",
        handler: function (patterns) {
            if (patterns.length === 0) {
                return [];
            }
            return patterns.reduce(function (total, pattern) {
                return total.concat(proofdict_tester_util_1.createCombinationPatterns(pattern));
            }, []);
        }
    }
];
var findSpecialPattern = function (pattern) {
    for (var i = 0; i < SPECIAL_PATTERNS.length; i++) {
        var SPECIAL_PATTERN = SPECIAL_PATTERNS[i];
        if (SPECIAL_PATTERN.placeholder === pattern) {
            return SPECIAL_PATTERN;
        }
    }
    return;
};
var AllowPattern = /** @class */ (function () {
    function AllowPattern(allow, patterns) {
        var specialPattern = findSpecialPattern(allow);
        this.patterns = specialPattern ? specialPattern.handler(patterns) : [new RegExp(allow)];
    }
    AllowPattern.prototype.match = function (text) {
        return this.patterns.some(function (pattern) {
            return pattern.test(text);
        });
    };
    return AllowPattern;
}());
exports.AllowPattern = AllowPattern;
var AllowPatterns = /** @class */ (function () {
    function AllowPatterns(dict) {
        var allows = dict.allows || [];
        var patterns = dict.patterns;
        this.allowPatterns = allows.map(function (allowString) { return new AllowPattern(allowString, patterns); });
    }
    AllowPatterns.prototype.match = function (text) {
        return this.allowPatterns.some(function (allowPattern) { return allowPattern.match(text); });
    };
    return AllowPatterns;
}());
exports.AllowPatterns = AllowPatterns;
//# sourceMappingURL=AllowPatterns.js.map