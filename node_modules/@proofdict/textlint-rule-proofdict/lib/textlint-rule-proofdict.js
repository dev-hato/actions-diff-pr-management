// MIT Â© 2017 azu
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var create_tester_1 = require("./create-tester");
var fetch_proofdict_1 = require("./fetch-proofdict");
var proofdict_repo_util_1 = require("./proofdict-repo-util");
var dictionary_storage_1 = require("./dictionary-storage");
var fetch_dictionary_1 = require("./fetch-dictionary");
var RuleHelper = require("textlint-rule-helper").RuleHelper;
var debug = require("debug")("textlint-rule-proofdict");
var DefaultOptions = {
    // If you want to use live-proofdict
    // Proofdict-style dictionary URL
    // Example: "https://example.github.io/proof-dictionary/"
    // If you want to specific JSON end point, please pass
    // `dictURL; { jsonAPI: string, ruleBase: string }`
    dictURL: undefined,
    // If you want to use local proofdict
    // dictPath is glob style path
    // "./dict/*.yml"
    dictGlob: undefined,
    // Default: 60sec(60 * 1000ms)
    autoUpdateInterval: 60 * 1000,
    // = Tag settings
    // Filter dictionary by allow or deny
    // Default: Enable all terms of the dictionary.
    // When set both options, this rule prefer allowTags to denyTags
    allowTags: [],
    denyTags: [],
    // For testing
    // set you proofdict json object
    proofdict: undefined,
    // Disable cache for tester
    disableProofdictTesterCache: false,
};
/**
 * Refresh Dictionary
 * @param options
 */
var refreshDictionary = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var mode, autoUpdateInterval, storage, lastUpdated, isExpired, jsonAPIURL;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                mode = options.dictURL ? "NETWORK" /* NETWORK */ : "LOCAL" /* LOCAL */;
                autoUpdateInterval = options.autoUpdateInterval !== undefined ? options.autoUpdateInterval : DefaultOptions.autoUpdateInterval;
                return [4 /*yield*/, dictionary_storage_1.openStorage()];
            case 1:
                storage = _b.sent();
                return [4 /*yield*/, storage.get("proofdict-lastUpdated")];
            case 2:
                lastUpdated = (_a = (_b.sent())) !== null && _a !== void 0 ? _a : -1;
                isExpired = lastUpdated <= 0 ? true : Date.now() - lastUpdated > autoUpdateInterval;
                if (mode === "NETWORK" /* NETWORK */ && isExpired) {
                    jsonAPIURL = proofdict_repo_util_1.getDictJSONURL(options);
                    return [2 /*return*/, fetch_proofdict_1.fetchProofdict({ URL: jsonAPIURL })
                            .then(function (dictionary) {
                            storage.set("proofdict", dictionary);
                            storage.set("proofdict-lastUpdated", Date.now());
                        })
                            .catch(function (error) {
                            debug("error is happened, but this rule fallback to storage", error);
                        })];
                }
                else {
                    return [2 /*return*/, Promise.resolve()];
                }
                return [2 /*return*/];
        }
    });
}); };
var reporter = function (context, options) {
    var _a;
    if (options === void 0) { options = DefaultOptions; }
    var helper = new RuleHelper(context);
    var Syntax = context.Syntax, RuleError = context.RuleError, report = context.report, getSource = context.getSource, fixer = context.fixer;
    var dictOptions = Array.isArray(options.dicts) ? options.dicts : [options];
    var targetNodes = [];
    var addNodeToQueue = function (node) { return targetNodes.push(node); };
    return _a = {},
        _a[Syntax.Str] = function (node) {
            addNodeToQueue(node);
        },
        _a[Syntax.DocumentExit] = function (node) {
            return __awaiter(this, void 0, void 0, function () {
                var storage, dictResultPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, dictionary_storage_1.openStorage()];
                        case 1:
                            storage = _a.sent();
                            dictResultPromise = dictOptions.map(function (options) {
                                // Error if wrong config
                                if (!options.dictURL && !options.dictGlob && !options.proofdict) {
                                    report(node, new RuleError("Not found dictionary in Config.\nPlease set dictURL or dictPath to .textlintrc."));
                                }
                                var mode = options.dictURL ? "NETWORK" /* NETWORK */ : "LOCAL" /* LOCAL */;
                                var allowTags = Array.isArray(options.allowTags) ? options.allowTags : DefaultOptions.allowTags;
                                var denyTags = Array.isArray(options.denyTags) ? options.denyTags : DefaultOptions.denyTags;
                                var disableTesterCache = options.disableProofdictTesterCache !== undefined
                                    ? options.disableProofdictTesterCache
                                    : DefaultOptions.disableProofdictTesterCache;
                                return refreshDictionary(options).then(function () { return __awaiter(_this, void 0, void 0, function () {
                                    var dictionary, value, lastUpdated, tester, promises;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, fetch_dictionary_1.getDictionary(options, mode)];
                                            case 1:
                                                dictionary = _a.sent();
                                                if (!dictionary) {
                                                    debug("Can not fetch rules from local and network. stop to lint.");
                                                    return [2 /*return*/, []];
                                                }
                                                return [4 /*yield*/, storage.get("proofdict-lastUpdated")];
                                            case 2:
                                                value = _a.sent();
                                                lastUpdated = value !== null && value !== void 0 ? value : 0;
                                                tester = create_tester_1.createTester({
                                                    dictionary: dictionary,
                                                    lastUpdated: lastUpdated,
                                                    allowTags: allowTags,
                                                    denyTags: denyTags,
                                                    disableTesterCache: disableTesterCache,
                                                });
                                                promises = targetNodes.map(function (node) {
                                                    if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
                                                        return;
                                                    }
                                                    var text = getSource(node);
                                                    return tester.match(text).then(function (result) {
                                                        result.details.forEach(function (detail) {
                                                            var matchStartIndex = detail.matchStartIndex, matchEndIndex = detail.matchEndIndex, actual = detail.actual, expected = detail.expected, description = detail.description, rule = detail.rule;
                                                            // If result is not changed, should not report
                                                            if (actual === expected) {
                                                                return;
                                                            }
                                                            var url = proofdict_repo_util_1.getRuleURL(options, rule);
                                                            var additionalDescription = description ? "\n" + description : "";
                                                            var additionalReference = url ? "\nSee " + url : "";
                                                            var messages = actual + " => " + expected + additionalDescription + additionalReference;
                                                            report(node, new RuleError(messages, {
                                                                index: matchStartIndex,
                                                                fix: fixer.replaceTextRange([matchStartIndex, matchEndIndex], expected),
                                                            }));
                                                        });
                                                    });
                                                });
                                                return [2 /*return*/, Promise.all(promises)];
                                        }
                                    });
                                }); });
                            });
                            return [2 /*return*/, Promise.all(dictResultPromise)];
                    }
                });
            });
        },
        _a;
};
exports.default = {
    linter: reporter,
    fixer: reporter,
};
//# sourceMappingURL=textlint-rule-proofdict.js.map