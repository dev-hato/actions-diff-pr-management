{"version":3,"sources":["../src/textlint-rule-prh.js"],"names":["RegExp","prototype","flags","undefined","Object","defineProperty","configurable","get","toString","match","prh","require","path","untildify","defaultOptions","checkLink","checkBlockQuote","checkEmphasis","checkHeader","checkCodeComment","debug","createPrhEngine","rulePaths","baseDir","length","expandedRulePaths","map","rulePath","prhEngine","fromYAMLFilePath","resolve","slice","forEach","ruleFilePath","config","merge","createPrhEngineFromContents","yamlContents","dummyFilePath","fromYAML","content","mergePrh","engines","engines_","filter","engine","mainEngine","assertOptions","options","ruleContents","Error","createIgnoreNodeTypes","Syntax","nodeTypes","push","Link","BlockQuote","Emphasis","Header","forEachChange","changeSet","str","onChangeOfMatch","sortedDiffs","diffs","sort","a","b","index","delta","diff","result","expected","replace","g1","parseInt","matches","matchStartIndex","matchEndIndex","actual","rule","raw","getConfigBaseDir","context","process","cwd","textlintRcFilePath","configFile","dirname","getUntrimmedCode","node","type","value","lang","startsWith","endsWith","lines","split","codeLines","join","reporter","userOptions","assign","textlintRCDir","prhEngineContent","prhEngineFiles","helper","RuleHelper","getSource","report","fixer","RuleError","ignoreNodeTypes","codeCommentTypes","isDebug","Str","isChildNode","text","makeChangeSet","suffix","messages","fix","replaceTextRange","CodeBlock","checkLang","some","rawText","codeText","sourceBlockDiffIndex","indexOf","reportComment","comment","commentIdentifier","commentStart","start","AST","ranges","allowReturnOutsideFunction","allowAwaitOutsideFunction","allowUndeclaredExports","allowSuperOutsideMethod","comments","error","console","message","module","exports","linter"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper } from \"textlint-rule-helper\";\n\nimport { parse } from \"@babel/parser\";\n/**\n * RegExp#flags polyfill\n */\nif (RegExp.prototype.flags === undefined) {\n    Object.defineProperty(RegExp.prototype, \"flags\", {\n        configurable: true,\n        get: function() {\n            return this.toString().match(/[gimuy]*$/)[0];\n        }\n    });\n}\n\nconst prh = require(\"prh\");\nconst path = require(\"path\");\nconst untildify = require(\"untildify\");\n\nconst defaultOptions = {\n    checkLink: false,\n    checkBlockQuote: false,\n    checkEmphasis: false,\n    checkHeader: true,\n    /**\n     * Check CodeBlock text\n     * Default: []\n     */\n    checkCodeComment: [],\n    /**\n     * Report parsing error for debug\n     */\n    debug: false\n};\n\nfunction createPrhEngine(rulePaths, baseDir) {\n    if (rulePaths.length === 0) {\n        return null;\n    }\n    const expandedRulePaths = rulePaths.map(rulePath => untildify(rulePath));\n    const prhEngine = prh.fromYAMLFilePath(path.resolve(baseDir, expandedRulePaths[0]));\n    expandedRulePaths.slice(1).forEach(ruleFilePath => {\n        const config = prh.fromYAMLFilePath(path.resolve(baseDir, ruleFilePath));\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction createPrhEngineFromContents(yamlContents) {\n    if (yamlContents.length === 0) {\n        return null;\n    }\n    const dummyFilePath = \"\";\n    const prhEngine = prh.fromYAML(dummyFilePath, yamlContents[0]);\n    yamlContents.slice(1).forEach(content => {\n        const config = prh.fromYAML(dummyFilePath, content);\n        prhEngine.merge(config);\n    });\n    return prhEngine;\n}\n\nfunction mergePrh(...engines) {\n    const engines_ = engines.filter(engine => !!engine);\n    const mainEngine = engines_[0];\n    engines_.slice(1).forEach(engine => {\n        mainEngine.merge(engine);\n    });\n    return mainEngine;\n}\n\nconst assertOptions = options => {\n    if (typeof options.ruleContents === \"undefined\" && typeof options.rulePaths === \"undefined\") {\n        throw new Error(`textlint-rule-prh require Rule Options.\nPlease set .textlintrc:\n{\n    \"rules\": {\n        \"prh\": {\n            \"rulePaths\" :[\"path/to/prh.yml\"]\n        }\n    }\n}\n`);\n    }\n};\n\nconst createIgnoreNodeTypes = (options, Syntax) => {\n    const nodeTypes = [];\n    if (!options.checkLink) {\n        nodeTypes.push(Syntax.Link);\n    }\n    if (!options.checkBlockQuote) {\n        nodeTypes.push(Syntax.BlockQuote);\n    }\n    if (!options.checkEmphasis) {\n        nodeTypes.push(Syntax.Emphasis);\n    }\n    if (!options.checkHeader) {\n        nodeTypes.push(Syntax.Header);\n    }\n    return nodeTypes;\n};\n\n/**\n * for each diff of changeSet\n * @param {ChangeSet} changeSet\n * @param {string} str\n * @param {function({\n            matchStartIndex: number,\n            matchEndIndex: number,\n            actual: string\n            expected: string\n        })}onChangeOfMatch\n */\nconst forEachChange = (changeSet, str, onChangeOfMatch) => {\n    const sortedDiffs = changeSet.diffs.sort(function(a, b) {\n        return a.index - b.index;\n    });\n    let delta = 0;\n    sortedDiffs.forEach(function(diff) {\n        const result = diff.expected.replace(/\\$([0-9]{1,2})/g, function(match, g1) {\n            const index = parseInt(g1);\n            if (index === 0 || diff.matches.length - 1 < index) {\n                return match;\n            }\n            return diff.matches[index] || \"\";\n        });\n        // matchStartIndex/matchEndIndex value is original position, not replaced position\n        // textlint use original position\n        const matchStartIndex = diff.index;\n        const matchEndIndex = matchStartIndex + diff.matches[0].length;\n        // actual => expected\n        const actual = str.slice(diff.index + delta, diff.index + delta + diff.matches[0].length);\n        const prh = diff.rule.raw.prh || null;\n        onChangeOfMatch({\n            matchStartIndex,\n            matchEndIndex,\n            actual: actual,\n            expected: result,\n            prh\n        });\n        str = str.slice(0, diff.index + delta) + result + str.slice(diff.index + delta + diff.matches[0].length);\n        delta += result.length - diff.matches[0].length;\n    });\n};\nconst getConfigBaseDir = context => {\n    if (typeof context.getConfigBaseDir === \"function\") {\n        return context.getConfigBaseDir() || process.cwd();\n    }\n    // Old fallback that use deprecated `config` value\n    // https://github.com/textlint/textlint/issues/294\n    const textlintRcFilePath = context.config ? context.config.configFile : null;\n    // .textlintrc directory\n    return textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n};\n\n/**\n * [Markdown] get actual code value from CodeBlock node\n * @param {Object} node\n * @param {string} raw raw value include CodeBlock syntax\n * @returns {string}\n */\nfunction getUntrimmedCode(node, raw) {\n    if (node.type !== \"CodeBlock\") {\n        return node.value;\n    }\n    // Space indented CodeBlock that has not lang\n    if (!node.lang) {\n        return node.value;\n    }\n\n    // If it is not markdown codeBlock, just use node.value\n    if (!(raw.startsWith(\"```\") && raw.endsWith(\"```\"))) {\n        if (node.value.endsWith(\"\\n\")) {\n            return node.value;\n        }\n        return node.value + \"\\n\";\n    }\n    // Markdown(remark) specific hack\n    // https://github.com/wooorm/remark/issues/207#issuecomment-244620590\n    const lines = raw.split(\"\\n\");\n    // code lines without the first line and the last line\n    const codeLines = lines.slice(1, lines.length - 1);\n    // add last new line\n    // \\n```\n    return codeLines.join(\"\\n\") + \"\\n\";\n}\n\nfunction reporter(context, userOptions = {}) {\n    assertOptions(userOptions);\n    const options = Object.assign({}, defaultOptions, userOptions);\n    // .textlintrc directory\n    const textlintRCDir = getConfigBaseDir(context);\n    // create prh config\n    const rulePaths = options.rulePaths || [];\n    const ruleContents = options.ruleContents || [];\n    // yaml file + yaml contents\n    const prhEngineContent = createPrhEngineFromContents(ruleContents);\n    const prhEngineFiles = createPrhEngine(rulePaths, textlintRCDir);\n    const prhEngine = mergePrh(prhEngineFiles, prhEngineContent);\n    const helper = new RuleHelper(context);\n    const { Syntax, getSource, report, fixer, RuleError } = context;\n    const ignoreNodeTypes = createIgnoreNodeTypes(options, Syntax);\n    const codeCommentTypes = options.checkCodeComment ? options.checkCodeComment : defaultOptions.checkCodeComment;\n    const isDebug = options.debug ? options.debug : defaultOptions.debug;\n    return {\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, ignoreNodeTypes)) {\n                return;\n            }\n            const text = getSource(node);\n            // to get position from index\n            // https://github.com/prh/prh/issues/29\n            const dummyFilePath = \"\";\n            const makeChangeSet = prhEngine.makeChangeSet(dummyFilePath, text);\n            forEachChange(makeChangeSet, text, ({ matchStartIndex, matchEndIndex, actual, expected, prh }) => {\n                // If result is not changed, should not report\n                if (actual === expected) {\n                    return;\n                }\n\n                const suffix = prh !== null ? \"\\n\" + prh : \"\";\n                const messages = actual + \" => \" + expected + suffix;\n                report(\n                    node,\n                    new RuleError(messages, {\n                        index: matchStartIndex,\n                        fix: fixer.replaceTextRange([matchStartIndex, matchEndIndex], expected)\n                    })\n                );\n            });\n        },\n        [Syntax.CodeBlock](node) {\n            const lang = node.lang;\n            if (!lang) {\n                return;\n            }\n            const checkLang = codeCommentTypes.some(type => {\n                return type === node.lang;\n            });\n            if (!checkLang) {\n                return;\n            }\n            const rawText = getSource(node);\n            const codeText = getUntrimmedCode(node, rawText);\n            const sourceBlockDiffIndex = rawText !== node.value ? rawText.indexOf(codeText) : 0;\n            const reportComment = comment => {\n                // to get position from index\n                // https://github.com/prh/prh/issues/29\n                const dummyFilePath = \"\";\n                // TODO: trim option for value?\n                const text = comment.value;\n                const makeChangeSet = prhEngine.makeChangeSet(dummyFilePath, text);\n                forEachChange(makeChangeSet, text, ({ matchStartIndex, matchEndIndex, actual, expected, prh }) => {\n                    // If result is not changed, should not report\n                    if (actual === expected) {\n                        return;\n                    }\n\n                    const suffix = prh !== null ? \"\\n\" + prh : \"\";\n                    const messages = actual + \" => \" + expected + suffix;\n                    const commentIdentifier = comment.type === \"CommentBlock\" ? \"/*\" : \"//\";\n                    const commentStart = sourceBlockDiffIndex + comment.start + commentIdentifier.length;\n                    report(\n                        node,\n                        new RuleError(messages, {\n                            index: commentStart + matchStartIndex,\n                            fix: fixer.replaceTextRange(\n                                [commentStart + matchStartIndex, commentStart + matchEndIndex],\n                                expected\n                            )\n                        })\n                    );\n                });\n            };\n            try {\n                const AST = parse(codeText, {\n                    ranges: true,\n                    allowReturnOutsideFunction: true,\n                    allowAwaitOutsideFunction: true,\n                    allowUndeclaredExports: true,\n                    allowSuperOutsideMethod: true\n                });\n                const comments = AST.comments;\n                if (!comments) {\n                    return;\n                }\n                comments.forEach(comment => {\n                    reportComment(comment);\n                });\n            } catch (error) {\n                if (isDebug) {\n                    console.error(error);\n                    report(node, new RuleError(error.message));\n                }\n            }\n        }\n    };\n}\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"textlint-rule-prh.js"}