// MIT © 2017 azu
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _kuromojin = require("kuromojin");

var _arrayFindIndex = _interopRequireDefault(require("array-find-index"));

var _morphemeMatchAll = require("morpheme-match-all");

var _saInsertDict = _interopRequireDefault(require("./dict/sa-insert-dict"));

var _saDroppingDict = _interopRequireDefault(require("./dict/sa-dropping-dict"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var matchAll = (0, _morphemeMatchAll.createMatcher)(_saInsertDict.default.concat([_saDroppingDict.default]));
/**
 * 実際に一致してるtokenのindexを返す
 * 「さ」のtokenのindexを返すイメージ
 * 「さ」がない場合は先頭のindex
 * @param tokens
 * @param actualTokens
 * @returns {number}
 */

var findSaTokenIndex = (tokens, actualTokens) => {
  var saTokenIndex = (0, _arrayFindIndex.default)(tokens, token => {
    return token.hasOwnProperty("_index");
  }); // 無い場合は先頭を返す

  if (saTokenIndex === -1) {
    return actualTokens[0].word_position - 1;
  } // assert(saTokenIndex !== -1, "「さ」のtokenが見つかりません。Issueで報告してください。");


  var actualSaToken = actualTokens[saTokenIndex];
  return actualSaToken.word_position - 1;
};

var replaceWithCaptureTokens = (text, tokens, actualTokens) => {
  var resultText = text;
  tokens.forEach((token, index) => {
    // _captureがないのは無視
    if (!token._capture) {
      return;
    }

    var actualToken = actualTokens[index];
    resultText = resultText.replace(token._capture, actualToken.surface_form);
  });
  return resultText;
};

var reporter = context => {
  var {
    Syntax,
    RuleError,
    report,
    fixer,
    getSource
  } = context;
  return {
    [Syntax.Str](node) {
      var text = getSource(node);
      return (0, _kuromojin.tokenize)(text).then(tokens => {
        var matchResults = matchAll(tokens);
        matchResults.forEach(matchResult => {
          var firstToken = matchResult.tokens[0];
          var lastToken = matchResult.tokens[matchResult.tokens.length - 1];
          var firstWordIndex = Math.max(firstToken.word_position - 1, 0);
          var lastWorkIndex = Math.max(lastToken.word_position - 1, 0);
          var saTokenIndex = findSaTokenIndex(matchResult.dict.tokens, matchResult.tokens); // replace $1

          var message = replaceWithCaptureTokens(matchResult.dict.message, matchResult.dict.tokens, matchResult.tokens);
          var expected = replaceWithCaptureTokens(matchResult.dict.expected, matchResult.dict.tokens, matchResult.tokens);

          if (expected) {
            report(node, new RuleError(message, {
              index: saTokenIndex,
              fix: fixer.replaceTextRange([firstWordIndex, lastWorkIndex + lastToken.surface_form.length], expected)
            }));
          } else {
            report(node, new RuleError(message, {
              index: saTokenIndex
            }));
          }
        });
      });
    }

  };
};

var _default = {
  linter: reporter,
  fixer: reporter
};
exports.default = _default;
//# sourceMappingURL=textlint-rule-no-insert-dropping-sa.js.map