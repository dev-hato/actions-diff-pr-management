{"version":3,"sources":["../src/textlint-rule-no-insert-dropping-sa.js"],"names":["matchAll","saInsertDict","concat","saDroppingDict","findSaTokenIndex","tokens","actualTokens","saTokenIndex","token","hasOwnProperty","word_position","actualSaToken","replaceWithCaptureTokens","text","resultText","forEach","index","_capture","actualToken","replace","surface_form","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","then","matchResults","matchResult","firstToken","lastToken","length","firstWordIndex","Math","max","lastWorkIndex","dict","message","expected","fix","replaceTextRange","linter"],"mappings":"AAAA;AACA;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,QAAQ,GAAG,qCAAcC,sBAAaC,MAAb,CAAoB,CAC/CC,uBAD+C,CAApB,CAAd,CAAjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,CAACC,MAAD,EAASC,YAAT,KAA0B;AAC/C,MAAMC,YAAY,GAAG,6BAAeF,MAAf,EAAwBG,KAAD,IAAW;AACnD,WAAOA,KAAK,CAACC,cAAN,CAAqB,QAArB,CAAP;AACH,GAFoB,CAArB,CAD+C,CAI/C;;AACA,MAAIF,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACrB,WAAOD,YAAY,CAAC,CAAD,CAAZ,CAAgBI,aAAhB,GAAgC,CAAvC;AACH,GAP8C,CAQ/C;;;AACA,MAAMC,aAAa,GAAGL,YAAY,CAACC,YAAD,CAAlC;AACA,SAAOI,aAAa,CAACD,aAAd,GAA8B,CAArC;AACH,CAXD;;AAaA,IAAME,wBAAwB,GAAG,CAACC,IAAD,EAAOR,MAAP,EAAeC,YAAf,KAAgC;AAC7D,MAAIQ,UAAU,GAAGD,IAAjB;AACAR,EAAAA,MAAM,CAACU,OAAP,CAAe,CAACP,KAAD,EAAQQ,KAAR,KAAkB;AAC7B;AACA,QAAI,CAACR,KAAK,CAACS,QAAX,EAAqB;AACjB;AACH;;AACD,QAAMC,WAAW,GAAGZ,YAAY,CAACU,KAAD,CAAhC;AACAF,IAAAA,UAAU,GAAGA,UAAU,CAACK,OAAX,CAAmBX,KAAK,CAACS,QAAzB,EAAmCC,WAAW,CAACE,YAA/C,CAAb;AACH,GAPD;AAQA,SAAON,UAAP;AACH,CAXD;;AAYA,IAAMO,QAAQ,GAAIC,OAAD,IAAa;AAC1B,MAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA,KAA7B;AAAoCC,IAAAA;AAApC,MAAkDL,OAAxD;AACA,SAAO;AACH,KAACC,MAAM,CAACK,GAAR,EAAaC,IAAb,EAAmB;AACf,UAAMhB,IAAI,GAAGc,SAAS,CAACE,IAAD,CAAtB;AACA,aAAO,yBAAShB,IAAT,EAAeiB,IAAf,CAAoBzB,MAAM,IAAI;AACjC,YAAM0B,YAAY,GAAG/B,QAAQ,CAACK,MAAD,CAA7B;AACA0B,QAAAA,YAAY,CAAChB,OAAb,CAAqBiB,WAAW,IAAI;AAChC,cAAMC,UAAU,GAAGD,WAAW,CAAC3B,MAAZ,CAAmB,CAAnB,CAAnB;AACA,cAAM6B,SAAS,GAAGF,WAAW,CAAC3B,MAAZ,CAAmB2B,WAAW,CAAC3B,MAAZ,CAAmB8B,MAAnB,GAA4B,CAA/C,CAAlB;AACA,cAAMC,cAAc,GAAGC,IAAI,CAACC,GAAL,CAASL,UAAU,CAACvB,aAAX,GAA2B,CAApC,EAAuC,CAAvC,CAAvB;AACA,cAAM6B,aAAa,GAAGF,IAAI,CAACC,GAAL,CAASJ,SAAS,CAACxB,aAAV,GAA0B,CAAnC,EAAsC,CAAtC,CAAtB;AACA,cAAMH,YAAY,GAAGH,gBAAgB,CAAC4B,WAAW,CAACQ,IAAZ,CAAiBnC,MAAlB,EAA0B2B,WAAW,CAAC3B,MAAtC,CAArC,CALgC,CAMhC;;AACA,cAAMoC,OAAO,GAAG7B,wBAAwB,CAACoB,WAAW,CAACQ,IAAZ,CAAiBC,OAAlB,EAA2BT,WAAW,CAACQ,IAAZ,CAAiBnC,MAA5C,EAAoD2B,WAAW,CAAC3B,MAAhE,CAAxC;AACA,cAAMqC,QAAQ,GAAG9B,wBAAwB,CAACoB,WAAW,CAACQ,IAAZ,CAAiBE,QAAlB,EAA4BV,WAAW,CAACQ,IAAZ,CAAiBnC,MAA7C,EAAqD2B,WAAW,CAAC3B,MAAjE,CAAzC;;AACA,cAAIqC,QAAJ,EAAc;AACVjB,YAAAA,MAAM,CAACI,IAAD,EAAO,IAAIL,SAAJ,CAAciB,OAAd,EAAuB;AAChCzB,cAAAA,KAAK,EAAET,YADyB;AAEhCoC,cAAAA,GAAG,EAAEjB,KAAK,CAACkB,gBAAN,CAAuB,CACxBR,cADwB,EACRG,aAAa,GAAGL,SAAS,CAACd,YAAV,CAAuBe,MAD/B,CAAvB,EAEFO,QAFE;AAF2B,aAAvB,CAAP,CAAN;AAMH,WAPD,MAOO;AACHjB,YAAAA,MAAM,CAACI,IAAD,EAAO,IAAIL,SAAJ,CAAciB,OAAd,EAAuB;AAChCzB,cAAAA,KAAK,EAAET;AADyB,aAAvB,CAAP,CAAN;AAGH;AACJ,SArBD;AAsBH,OAxBM,CAAP;AAyBH;;AA5BE,GAAP;AA8BH,CAhCD;;eAkCe;AACXsC,EAAAA,MAAM,EAAExB,QADG;AAEXK,EAAAA,KAAK,EAAEL;AAFI,C","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nimport { tokenize } from \"kuromojin\";\nimport arrayFindIndex from \"array-find-index\";\nimport { createMatcher } from \"morpheme-match-all\";\nimport saInsertDict from \"./dict/sa-insert-dict\";\nimport saDroppingDict from \"./dict/sa-dropping-dict\";\n\nconst matchAll = createMatcher(saInsertDict.concat([\n    saDroppingDict\n]));\n/**\n * 実際に一致してるtokenのindexを返す\n * 「さ」のtokenのindexを返すイメージ\n * 「さ」がない場合は先頭のindex\n * @param tokens\n * @param actualTokens\n * @returns {number}\n */\nconst findSaTokenIndex = (tokens, actualTokens) => {\n    const saTokenIndex = arrayFindIndex(tokens, (token) => {\n        return token.hasOwnProperty(\"_index\");\n    });\n    // 無い場合は先頭を返す\n    if (saTokenIndex === -1) {\n        return actualTokens[0].word_position - 1;\n    }\n    // assert(saTokenIndex !== -1, \"「さ」のtokenが見つかりません。Issueで報告してください。\");\n    const actualSaToken = actualTokens[saTokenIndex];\n    return actualSaToken.word_position - 1;\n};\n\nconst replaceWithCaptureTokens = (text, tokens, actualTokens) => {\n    let resultText = text;\n    tokens.forEach((token, index) => {\n        // _captureがないのは無視\n        if (!token._capture) {\n            return;\n        }\n        const actualToken = actualTokens[index];\n        resultText = resultText.replace(token._capture, actualToken.surface_form);\n    });\n    return resultText;\n};\nconst reporter = (context) => {\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            const text = getSource(node);\n            return tokenize(text).then(tokens => {\n                const matchResults = matchAll(tokens);\n                matchResults.forEach(matchResult => {\n                    const firstToken = matchResult.tokens[0];\n                    const lastToken = matchResult.tokens[matchResult.tokens.length - 1];\n                    const firstWordIndex = Math.max(firstToken.word_position - 1, 0);\n                    const lastWorkIndex = Math.max(lastToken.word_position - 1, 0);\n                    const saTokenIndex = findSaTokenIndex(matchResult.dict.tokens, matchResult.tokens);\n                    // replace $1\n                    const message = replaceWithCaptureTokens(matchResult.dict.message, matchResult.dict.tokens, matchResult.tokens);\n                    const expected = replaceWithCaptureTokens(matchResult.dict.expected, matchResult.dict.tokens, matchResult.tokens);\n                    if (expected) {\n                        report(node, new RuleError(message, {\n                            index: saTokenIndex,\n                            fix: fixer.replaceTextRange([\n                                firstWordIndex, lastWorkIndex + lastToken.surface_form.length\n                            ], expected)\n                        }));\n                    } else {\n                        report(node, new RuleError(message, {\n                            index: saTokenIndex\n                        }));\n                    }\n                });\n            });\n        }\n    }\n};\n\nexport default {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"textlint-rule-no-insert-dropping-sa.js"}