{"version":3,"file":"dep-types-migration.js","sourceRoot":"","sources":["../../../../lib/config/migrations/custom/dep-types-migration.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,mEAA+D;AAI/D,MAAa,iBAAkB,SAAQ,sCAAiB;IAAxD;;QACoB,eAAU,GAAG,IAAI,CAAC;QAClB,iBAAY,GAC5B,8DAA8D,CAAC;IA4BnE,CAAC;IA1BU,GAAG,CAAC,KAAc,EAAE,GAAW;QACtC,MAAM,YAAY,GAAkB,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QACnE,IAAI,YAAE,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,YAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAChD,YAAY,CAAC,IAAI,CAAC;gBAChB,aAAa,EAAE,CAAC,GAAG,CAAC;gBACpB,GAAG,KAAK;aACM,CAAC,CAAC;SACnB;QAED,IAAI,YAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACnB,KAAK,MAAM,OAAO,IAAI,KAAuB,EAAE;gBAC7C,IAAI,YAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,YAAE,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;oBAC5C,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC;oBACpC,IAAI,WAAW,EAAE;wBACf,OAAO,OAAO,CAAC,OAAO,CAAC;wBACvB,OAAO,CAAC,aAAa,GAAG,CAAC,WAAW,CAAC,CAAC;wBACtC,YAAY,CAAC,IAAI,CAAC,EAAE,GAAI,OAAuB,EAAE,CAAC,CAAC;qBACpD;iBACF;aACF;SACF;QAED,IAAI,YAAY,CAAC,MAAM,EAAE;YACvB,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;SAC5C;IACH,CAAC;CACF;AA/BD,8CA+BC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule, PackageRuleInputConfig } from '../../types';\nimport { AbstractMigration } from '../base/abstract-migration';\n\ninterface DepTypesRule extends PackageRule, PackageRuleInputConfig {}\n\nexport class DepTypesMigration extends AbstractMigration {\n  override readonly deprecated = true;\n  override readonly propertyName =\n    /^(?:(?:d|devD|optionalD|peerD)ependencies|engines|depTypes)$/;\n\n  override run(value: unknown, key: string): void {\n    const packageRules: PackageRule[] = this.get('packageRules') ?? [];\n    if (is.nonEmptyObject(value) && !is.array(value)) {\n      packageRules.push({\n        matchDepTypes: [key],\n        ...value,\n      } as PackageRule);\n    }\n\n    if (is.array(value)) {\n      for (const depType of value as DepTypesRule[]) {\n        if (is.object(depType) && !is.array(depType)) {\n          const depTypeName = depType.depType;\n          if (depTypeName) {\n            delete depType.depType;\n            depType.matchDepTypes = [depTypeName];\n            packageRules.push({ ...(depType as PackageRule) });\n          }\n        }\n      }\n    }\n\n    if (packageRules.length) {\n      this.setHard('packageRules', packageRules);\n    }\n  }\n}\n"]}