{"version":3,"file":"package-rules-migration.js","sourceRoot":"","sources":["../../../../lib/config/migrations/custom/package-rules-migration.ts"],"names":[],"mappings":";;;AACA,mEAA+D;AAElD,QAAA,SAAS,GAAG;IACvB,KAAK,EAAE,YAAY;IACnB,SAAS,EAAE,gBAAgB;IAC3B,cAAc,EAAE,mBAAmB;IACnC,QAAQ,EAAE,eAAe;IACzB,WAAW,EAAE,kBAAkB;IAC/B,WAAW,EAAE,eAAe;IAC5B,YAAY,EAAE,mBAAmB;IACjC,eAAe,EAAE,sBAAsB;IACvC,iBAAiB,EAAE,wBAAwB;IAC3C,WAAW,EAAE,kBAAkB;CAChC,CAAC;AAGF,SAAS,UAAU,CAAC,WAAwB;IAC1C,MAAM,cAAc,GAAgB,EAAE,CAAC;IACvC,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;QACpD,cAAc,CAAC,iBAAS,CAAC,GAAmB,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;KAC7D;IACD,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,MAAa,qBAAsB,SAAQ,sCAAiB;IAA5D;;QACoB,iBAAY,GAAG,cAAc,CAAC;IAUlD,CAAC;IARU,GAAG,CAAC,KAAc;QACzB,IAAI,YAAY,GAAI,IAAI,CAAC,GAAG,CAAC,cAAc,CAAmB,IAAI,EAAE,CAAC;QACrE,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEpE,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAE5C,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC7B,CAAC;CACF;AAXD,sDAWC","sourcesContent":["import type { PackageRule } from '../../types';\nimport { AbstractMigration } from '../base/abstract-migration';\n\nexport const renameMap = {\n  paths: 'matchPaths',\n  languages: 'matchLanguages',\n  baseBranchList: 'matchBaseBranches',\n  managers: 'matchManagers',\n  datasources: 'matchDatasources',\n  depTypeList: 'matchDepTypes',\n  packageNames: 'matchPackageNames',\n  packagePatterns: 'matchPackagePatterns',\n  sourceUrlPrefixes: 'matchSourceUrlPrefixes',\n  updateTypes: 'matchUpdateTypes',\n};\ntype RenameMapKey = keyof typeof renameMap;\n\nfunction renameKeys(packageRule: PackageRule): PackageRule {\n  const newPackageRule: PackageRule = {};\n  for (const [key, val] of Object.entries(packageRule)) {\n    newPackageRule[renameMap[key as RenameMapKey] ?? key] = val;\n  }\n  return newPackageRule;\n}\n\nexport class PackageRulesMigration extends AbstractMigration {\n  override readonly propertyName = 'packageRules';\n\n  override run(value: unknown): void {\n    let packageRules = (this.get('packageRules') as PackageRule[]) ?? [];\n    packageRules = Array.isArray(packageRules) ? [...packageRules] : [];\n\n    packageRules = packageRules.map(renameKeys);\n\n    this.rewrite(packageRules);\n  }\n}\n"]}