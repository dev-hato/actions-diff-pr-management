{"version":3,"file":"migrations-service.js","sourceRoot":"","sources":["../../../lib/config/migrations/migrations-service.ts"],"names":[],"mappings":";;;;;AAAA,kEAAkC;AAClC,mCAAgC;AAEhC,gFAA2E;AAC3E,gFAA2E;AAC3E,kFAA6E;AAC7E,sEAAkE;AAClE,kFAA6E;AAC7E,kFAA6E;AAC7E,gFAA2E;AAC3E,gGAA0F;AAC1F,0EAAqE;AACrE,8EAAyE;AACzE,0EAAqE;AACrE,8EAAyE;AACzE,8EAA0E;AAC1E,8GAAuG;AACvG,sEAAiE;AACjE,kEAA6D;AAC7D,oFAA+E;AAC/E,kEAA8D;AAC9D,0EAAoE;AACpE,wEAAmE;AACnE,0FAAoF;AACpF,sFAAgF;AAChF,8EAAyE;AACzE,4DAAwD;AACxD,8EAAyE;AACzE,4EAAuE;AACvE,kFAA6E;AAC7E,8EAAyE;AACzE,oEAAgE;AAChE,wEAAmE;AACnE,4EAAuE;AACvE,0FAAoF;AACpF,wGAAkG;AAClG,8FAA+E;AAC/E,oFAA8E;AAC9E,8EAAyE;AACzE,gFAA2E;AAC3E,gGAA0F;AAC1F,oEAAgE;AAChE,oFAA+E;AAC/E,kFAA6E;AAC7E,gGAA2F;AAC3F,kGAA4F;AAC5F,gGAA2F;AAC3F,0EAAqE;AACrE,gFAA2E;AAC3E,oFAA8E;AAC9E,oFAA+E;AAG/E,MAAa,iBAAiB;IAuF5B,MAAM,CAAC,GAAG,CAAC,cAA8B;QACvC,MAAM,cAAc,GAAmB,EAAE,CAAC;QAC1C,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QAEtE,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YACzD,cAAc,CAAC,GAAG,MAAlB,cAAc,CAAC,GAAG,IAAM,KAAK,EAAC;YAC9B,MAAM,SAAS,GAAG,+BAAA,iBAAiB,2CAAc,MAA/B,iBAAiB,EAAe,UAAU,EAAE,GAAG,CAAC,CAAC;YAEnE,IAAI,SAAS,EAAE;gBACb,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBAE1B,IAAI,SAAS,CAAC,UAAU,EAAE;oBACxB,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC;iBAC5B;aACF;SACF;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,UAAU,CACf,cAA8B,EAC9B,cAA8B;QAE9B,OAAO,CAAC,IAAA,eAAM,EAAC,cAAc,EAAE,cAAc,CAAC,CAAC;IACjD,CAAC;IAES,MAAM,CAAC,aAAa,CAC5B,cAA8B,EAC9B,cAA8B;QAE9B,MAAM,UAAU,GAAgB,EAAE,CAAC;QAEnC,KAAK,MAAM,YAAY,IAAI,iBAAiB,CAAC,iBAAiB,EAAE;YAC9D,UAAU,CAAC,IAAI,CACb,IAAI,mDAAuB,CACzB,YAAY,EACZ,cAAc,EACd,cAAc,CACf,CACF,CAAC;SACH;QAED,KAAK,MAAM,CACT,eAAe,EACf,eAAe,EAChB,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE;YAClD,UAAU,CAAC,IAAI,CACb,IAAI,mDAAuB,CACzB,eAAe,EACf,eAAe,EACf,cAAc,EACd,cAAc,CACf,CACF,CAAC;SACH;QAED,KAAK,MAAM,eAAe,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACnD,UAAU,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;SACtE;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;;AArJH,8CAmKC;mGAXG,UAAoC,EACpC,GAAW;IAEX,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE;QACnC,IAAI,YAAE,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE;YACrC,OAAO,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACzC;QAED,OAAO,SAAS,CAAC,YAAY,KAAK,GAAG,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC;AAjKe,mCAAiB,GAAwB,IAAI,GAAG,CAAC;IAC/D,aAAa;IACb,OAAO;IACP,iBAAiB;IACjB,oBAAoB;IACpB,aAAa;IACb,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,mBAAmB;IACnB,eAAe;IACf,iBAAiB;IACjB,2BAA2B;IAC3B,8BAA8B;IAC9B,uBAAuB;IACvB,wBAAwB;CACzB,CAAE,CAAA;AAEa,mCAAiB,GAAgC,IAAI,GAAG,CAAC;IACvE,CAAC,WAAW,EAAE,WAAW,CAAC;IAC1B,CAAC,sBAAsB,EAAE,qBAAqB,CAAC;IAC/C,CAAC,WAAW,EAAE,cAAc,CAAC;IAC7B,CAAC,qBAAqB,EAAE,wBAAwB,CAAC;IACjD,CAAC,kBAAkB,EAAE,uBAAuB,CAAC;IAC7C,CAAC,uBAAuB,EAAE,oBAAoB,CAAC;IAC/C,CAAC,eAAe,EAAE,YAAY,CAAC;IAC/B,CAAC,oBAAoB,EAAE,qBAAqB,CAAC;IAC7C,CAAC,SAAS,EAAE,iBAAiB,CAAC;IAC9B,CAAC,aAAa,EAAE,qBAAqB,CAAC;IACtC,CAAC,qBAAqB,EAAE,6BAA6B,CAAC;IACtD,CAAC,sBAAsB,EAAE,8BAA8B,CAAC;IACxD,CAAC,mBAAmB,EAAE,2BAA2B,CAAC;IAClD,CAAC,mBAAmB,EAAE,2BAA2B,CAAC;IAClD,CAAC,kBAAkB,EAAE,0BAA0B,CAAC;IAChD,CAAC,mBAAmB,EAAE,2BAA2B,CAAC;CACnD,CAAE,CAAA;AAEa,kCAAgB,GAAwC;IACtE,mDAAuB;IACvB,wCAAkB;IAClB,mDAAuB;IACvB,mDAAuB;IACvB,iDAAsB;IACtB,gEAA6B;IAC7B,2CAAmB;IACnB,+CAAqB;IACrB,2CAAmB;IACnB,+CAAqB;IACrB,gDAAsB;IACtB,6EAAmC;IACnC,qDAAwB;IACxB,oCAAgB;IAChB,0CAAkB;IAClB,yCAAkB;IAClB,0DAA0B;IAC1B,sDAAwB;IACxB,+CAAqB;IACrB,6CAAoB;IACpB,mDAAuB;IACvB,sCAAiB;IACjB,yCAAkB;IAClB,6CAAoB;IACpB,0DAA0B;IAC1B,wEAAiC;IACjC,qDAAmB;IACnB,oDAAuB;IACvB,+CAAqB;IACrB,gEAA6B;IAC7B,sCAAiB;IACjB,qDAAwB;IACxB,iEAA8B;IAC9B,kEAA8B;IAC9B,iEAA8B;IAC9B,2CAAmB;IACnB,iDAAsB;IACtB,oDAAuB;IACvB,qDAAwB;IACxB,mCAAe;IACf,iDAAsB;IACtB,+CAAqB;IACrB,uCAAiB;IACjB,+CAAqB;IACrB,8BAAa;IACb,mDAAuB;CACvB,CAAA","sourcesContent":["import is from '@sindresorhus/is';\nimport { dequal } from 'dequal';\nimport type { RenovateConfig } from '../types';\nimport { RemovePropertyMigration } from './base/remove-property-migration';\nimport { RenamePropertyMigration } from './base/rename-property-migration';\nimport { AutomergeMajorMigration } from './custom/automerge-major-migration';\nimport { AutomergeMigration } from './custom/automerge-migration';\nimport { AutomergeMinorMigration } from './custom/automerge-minor-migration';\nimport { AutomergePatchMigration } from './custom/automerge-patch-migration';\nimport { AutomergeTypeMigration } from './custom/automerge-type-migration';\nimport { AzureGitLabAutomergeMigration } from './custom/azure-gitlab-automerge-migration';\nimport { BaseBranchMigration } from './custom/base-branch-migration';\nimport { BinarySourceMigration } from './custom/binary-source-migration';\nimport { BranchNameMigration } from './custom/branch-name-migration';\nimport { BranchPrefixMigration } from './custom/branch-prefix-migration';\nimport { CompatibilityMigration } from './custom/compatibility-migration';\nimport { ComposerIgnorePlatformReqsMigration } from './custom/composer-ignore-platform-reqs-migration';\nimport { DepTypesMigration } from './custom/dep-types-migration';\nimport { DryRunMigration } from './custom/dry-run-migration';\nimport { EnabledManagersMigration } from './custom/enabled-managers-migration';\nimport { ExtendsMigration } from './custom/extends-migration';\nimport { GoModTidyMigration } from './custom/go-mod-tidy-migration';\nimport { HostRulesMigration } from './custom/host-rules-migration';\nimport { IgnoreNodeModulesMigration } from './custom/ignore-node-modules-migration';\nimport { IgnoreNpmrcFileMigration } from './custom/ignore-npmrc-file-migration';\nimport { MatchStringsMigration } from './custom/match-strings-migration';\nimport { NodeMigration } from './custom/node-migration';\nimport { PackageFilesMigration } from './custom/package-files-migration';\nimport { PackageNameMigration } from './custom/package-name-migration';\nimport { PackagePatternMigration } from './custom/package-pattern-migration';\nimport { PackageRulesMigration } from './custom/package-rules-migration';\nimport { PackagesMigration } from './custom/packages-migration';\nimport { PathRulesMigration } from './custom/path-rules-migration';\nimport { PinVersionsMigration } from './custom/pin-versions-migration';\nimport { PostUpdateOptionsMigration } from './custom/post-update-options-migration';\nimport { RaiseDeprecationWarningsMigration } from './custom/raise-deprecation-warnings-migration';\nimport { RebaseConflictedPrs } from './custom/rebase-conflicted-prs-migration';\nimport { RebaseStalePrsMigration } from './custom/rebase-stale-prs-migration';\nimport { RenovateForkMigration } from './custom/renovate-fork-migration';\nimport { RequireConfigMigration } from './custom/require-config-migration';\nimport { RequiredStatusChecksMigration } from './custom/required-status-checks-migration';\nimport { ScheduleMigration } from './custom/schedule-migration';\nimport { SemanticCommitsMigration } from './custom/semantic-commits-migration';\nimport { SemanticPrefixMigration } from './custom/semantic-prefix-migration';\nimport { SeparateMajorReleasesMigration } from './custom/separate-major-release-migration';\nimport { SeparateMultipleMajorMigration } from './custom/separate-multiple-major-migration';\nimport { SuppressNotificationsMigration } from './custom/suppress-notifications-migration';\nimport { TrustLevelMigration } from './custom/trust-level-migration';\nimport { UnpublishSafeMigration } from './custom/unpublish-safe-migration';\nimport { UpgradeInRangeMigration } from './custom/upgrade-in-range-migration';\nimport { VersionStrategyMigration } from './custom/version-strategy-migration';\nimport type { Migration, MigrationConstructor } from './types';\n\nexport class MigrationsService {\n  static readonly removedProperties: ReadonlySet<string> = new Set([\n    'deepExtract',\n    'gitFs',\n    'groupBranchName',\n    'groupCommitMessage',\n    'groupPrBody',\n    'groupPrTitle',\n    'lazyGrouping',\n    'maintainYarnLock',\n    'statusCheckVerify',\n    'supportPolicy',\n    'yarnCacheFolder',\n    'yarnMaintenanceBranchName',\n    'yarnMaintenanceCommitMessage',\n    'yarnMaintenancePrBody',\n    'yarnMaintenancePrTitle',\n  ]);\n\n  static readonly renamedProperties: ReadonlyMap<string, string> = new Map([\n    ['endpoints', 'hostRules'],\n    ['excludedPackageNames', 'excludePackageNames'],\n    ['exposeEnv', 'exposeAllEnv'],\n    ['managerBranchPrefix', 'additionalBranchPrefix'],\n    ['multipleMajorPrs', 'separateMultipleMajor'],\n    ['separatePatchReleases', 'separateMinorPatch'],\n    ['versionScheme', 'versioning'],\n    ['lookupNameTemplate', 'packageNameTemplate'],\n    ['aliases', 'registryAliases'],\n    ['masterIssue', 'dependencyDashboard'],\n    ['masterIssueApproval', 'dependencyDashboardApproval'],\n    ['masterIssueAutoclose', 'dependencyDashboardAutoclose'],\n    ['masterIssueHeader', 'dependencyDashboardHeader'],\n    ['masterIssueFooter', 'dependencyDashboardFooter'],\n    ['masterIssueTitle', 'dependencyDashboardTitle'],\n    ['masterIssueLabels', 'dependencyDashboardLabels'],\n  ]);\n\n  static readonly customMigrations: ReadonlyArray<MigrationConstructor> = [\n    AutomergeMajorMigration,\n    AutomergeMigration,\n    AutomergeMinorMigration,\n    AutomergePatchMigration,\n    AutomergeTypeMigration,\n    AzureGitLabAutomergeMigration,\n    BaseBranchMigration,\n    BinarySourceMigration,\n    BranchNameMigration,\n    BranchPrefixMigration,\n    CompatibilityMigration,\n    ComposerIgnorePlatformReqsMigration,\n    EnabledManagersMigration,\n    ExtendsMigration,\n    GoModTidyMigration,\n    HostRulesMigration,\n    IgnoreNodeModulesMigration,\n    IgnoreNpmrcFileMigration,\n    MatchStringsMigration,\n    PackageNameMigration,\n    PackagePatternMigration,\n    PackagesMigration,\n    PathRulesMigration,\n    PinVersionsMigration,\n    PostUpdateOptionsMigration,\n    RaiseDeprecationWarningsMigration,\n    RebaseConflictedPrs,\n    RebaseStalePrsMigration,\n    RenovateForkMigration,\n    RequiredStatusChecksMigration,\n    ScheduleMigration,\n    SemanticCommitsMigration,\n    SeparateMajorReleasesMigration,\n    SeparateMultipleMajorMigration,\n    SuppressNotificationsMigration,\n    TrustLevelMigration,\n    UnpublishSafeMigration,\n    UpgradeInRangeMigration,\n    VersionStrategyMigration,\n    DryRunMigration,\n    RequireConfigMigration,\n    PackageFilesMigration,\n    DepTypesMigration,\n    PackageRulesMigration,\n    NodeMigration,\n    SemanticPrefixMigration,\n  ];\n\n  static run(originalConfig: RenovateConfig): RenovateConfig {\n    const migratedConfig: RenovateConfig = {};\n    const migrations = this.getMigrations(originalConfig, migratedConfig);\n\n    for (const [key, value] of Object.entries(originalConfig)) {\n      migratedConfig[key] ??= value;\n      const migration = MigrationsService.#getMigration(migrations, key);\n\n      if (migration) {\n        migration.run(value, key);\n\n        if (migration.deprecated) {\n          delete migratedConfig[key];\n        }\n      }\n    }\n\n    return migratedConfig;\n  }\n\n  static isMigrated(\n    originalConfig: RenovateConfig,\n    migratedConfig: RenovateConfig\n  ): boolean {\n    return !dequal(originalConfig, migratedConfig);\n  }\n\n  protected static getMigrations(\n    originalConfig: RenovateConfig,\n    migratedConfig: RenovateConfig\n  ): ReadonlyArray<Migration> {\n    const migrations: Migration[] = [];\n\n    for (const propertyName of MigrationsService.removedProperties) {\n      migrations.push(\n        new RemovePropertyMigration(\n          propertyName,\n          originalConfig,\n          migratedConfig\n        )\n      );\n    }\n\n    for (const [\n      oldPropertyName,\n      newPropertyName,\n    ] of MigrationsService.renamedProperties.entries()) {\n      migrations.push(\n        new RenamePropertyMigration(\n          oldPropertyName,\n          newPropertyName,\n          originalConfig,\n          migratedConfig\n        )\n      );\n    }\n\n    for (const CustomMigration of this.customMigrations) {\n      migrations.push(new CustomMigration(originalConfig, migratedConfig));\n    }\n\n    return migrations;\n  }\n\n  static #getMigration(\n    migrations: ReadonlyArray<Migration>,\n    key: string\n  ): Migration | undefined {\n    return migrations.find((migration) => {\n      if (is.regExp(migration.propertyName)) {\n        return migration.propertyName.test(key);\n      }\n\n      return migration.propertyName === key;\n    });\n  }\n}\n"]}