{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../lib/config/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { getLanguageList, getManagerList } from '../modules/manager';\nimport { configRegexPredicate, isConfigRegex, regEx } from '../util/regex';\nimport * as template from '../util/template';\nimport {\n  hasValidSchedule,\n  hasValidTimezone,\n} from '../workers/repository/update/branch/schedule';\nimport { migrateConfig } from './migration';\nimport { getOptions } from './options';\nimport { resolveConfigPresets } from './presets';\nimport type {\n  RenovateConfig,\n  RenovateOptions,\n  ValidationMessage,\n  ValidationResult,\n} from './types';\nimport * as managerValidator from './validation-helpers/managers';\n\nconst options = getOptions();\n\nlet optionTypes: Record<string, RenovateOptions['type']>;\nlet optionParents: Record<string, RenovateOptions['parent']>;\n\nconst managerList = getManagerList();\n\nconst topLevelObjects = getLanguageList().concat(getManagerList());\n\nconst ignoredNodes = [\n  '$schema',\n  'depType',\n  'npmToken',\n  'packageFile',\n  'forkToken',\n  'repository',\n  'vulnerabilityAlertsOnly',\n  'vulnerabilityAlert',\n  'isVulnerabilityAlert',\n  'copyLocalLibs', // deprecated - functionality is now enabled by default\n  'prBody', // deprecated\n  'minimumConfidence', // undocumented feature flag\n];\nconst tzRe = regEx(/^:timezone\\((.+)\\)$/);\nconst rulesRe = regEx(/p.*Rules\\[\\d+\\]$/);\nfunction isManagerPath(parentPath: string): boolean {\n  return (\n    regEx(/^regexManagers\\[[0-9]+]$/).test(parentPath) ||\n    managerList.includes(parentPath)\n  );\n}\n\nfunction isIgnored(key: string): boolean {\n  return ignoredNodes.includes(key);\n}\n\nfunction validateAliasObject(val: Record<string, unknown>): true | string {\n  for (const [key, value] of Object.entries(val)) {\n    if (!is.urlString(value)) {\n      return key;\n    }\n  }\n  return true;\n}\n\nfunction validatePlainObject(val: Record<string, unknown>): true | string {\n  for (const [key, value] of Object.entries(val)) {\n    if (!is.string(value)) {\n      return key;\n    }\n  }\n  return true;\n}\n\nfunction getUnsupportedEnabledManagers(enabledManagers: string[]): string[] {\n  return enabledManagers.filter(\n    (manager) => !getManagerList().includes(manager)\n  );\n}\n\nfunction getDeprecationMessage(option: string): string | undefined {\n  const deprecatedOptions: Record<string, string | undefined> = {\n    branchName: `Direct editing of branchName is now deprecated. Please edit branchPrefix, additionalBranchPrefix, or branchTopic instead`,\n    commitMessage: `Direct editing of commitMessage is now deprecated. Please edit commitMessage's subcomponents instead.`,\n    prTitle: `Direct editing of prTitle is now deprecated. Please edit commitMessage subcomponents instead as they will be passed through to prTitle.`,\n  };\n  return deprecatedOptions[option];\n}\n\nexport function getParentName(parentPath: string | undefined): string {\n  return parentPath\n    ? parentPath\n        .replace(regEx(/\\.?encrypted$/), '')\n        .replace(regEx(/\\[\\d+\\]$/), '')\n        .split('.')\n        .pop()!\n    : '.';\n}\n\nexport async function validateConfig(\n  config: RenovateConfig,\n  isPreset?: boolean,\n  parentPath?: string\n): Promise<ValidationResult> {\n  if (!optionTypes) {\n    optionTypes = {};\n    options.forEach((option) => {\n      optionTypes[option.name] = option.type;\n    });\n  }\n  if (!optionParents) {\n    optionParents = {};\n    options.forEach((option) => {\n      if (option.parent) {\n        optionParents[option.name] = option.parent;\n      }\n    });\n  }\n  let errors: ValidationMessage[] = [];\n  let warnings: ValidationMessage[] = [];\n\n  for (const [key, val] of Object.entries(config)) {\n    const currentPath = parentPath ? `${parentPath}.${key}` : key;\n    // istanbul ignore if\n    if (key === '__proto__') {\n      errors.push({\n        topic: 'Config security error',\n        message: '__proto__',\n      });\n      continue;\n    }\n    if (parentPath && topLevelObjects.includes(key)) {\n      errors.push({\n        topic: 'Configuration Error',\n        message: `The \"${key}\" object can only be configured at the top level of a config but was found inside \"${parentPath}\"`,\n      });\n    }\n    if (key === 'enabledManagers' && val) {\n      const unsupportedManagers = getUnsupportedEnabledManagers(\n        val as string[]\n      );\n      if (is.nonEmptyArray(unsupportedManagers)) {\n        errors.push({\n          topic: 'Configuration Error',\n          message: `The following managers configured in enabledManagers are not supported: \"${unsupportedManagers.join(\n            ', '\n          )}\"`,\n        });\n      }\n    }\n    if (key === 'fileMatch') {\n      if (parentPath === undefined) {\n        errors.push({\n          topic: 'Config error',\n          message: `\"fileMatch\" may not be defined at the top level of a config and must instead be within a manager block`,\n        });\n      } else if (!isManagerPath(parentPath)) {\n        warnings.push({\n          topic: 'Config warning',\n          message: `\"fileMatch\" must be configured in a manager block and not here: ${parentPath}`,\n        });\n      }\n    }\n    if (\n      !isIgnored(key) && // We need to ignore some reserved keys\n      !(is as any).function(val) // Ignore all functions\n    ) {\n      if (getDeprecationMessage(key)) {\n        warnings.push({\n          topic: 'Deprecation Warning',\n          message: getDeprecationMessage(key)!,\n        });\n      }\n      const templateKeys = [\n        'branchName',\n        'commitBody',\n        'commitMessage',\n        'prTitle',\n        'semanticCommitScope',\n      ];\n      if ((key.endsWith('Template') || templateKeys.includes(key)) && val) {\n        try {\n          // TODO: validate string #7154\n          let res = template.compile((val as string).toString(), config, false);\n          res = template.compile(res, config, false);\n          template.compile(res, config, false);\n        } catch (err) {\n          errors.push({\n            topic: 'Configuration Error',\n            message: `Invalid template in config path: ${currentPath}`,\n          });\n        }\n      }\n      const parentName = getParentName(parentPath);\n      if (\n        !isPreset &&\n        optionParents[key] &&\n        optionParents[key] !== parentName\n      ) {\n        // TODO: types (#7154)\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const message = `${key} should only be configured within a \"${optionParents[key]}\" object. Was found in ${parentName}`;\n        warnings.push({\n          topic: `${parentPath ? `${parentPath}.` : ''}${key}`,\n          message,\n        });\n      }\n      if (!optionTypes[key]) {\n        errors.push({\n          topic: 'Configuration Error',\n          message: `Invalid configuration option: ${currentPath}`,\n        });\n      } else if (key === 'schedule') {\n        const [validSchedule, errorMessage] = hasValidSchedule(val as string[]);\n        if (!validSchedule) {\n          errors.push({\n            topic: 'Configuration Error',\n            message: `Invalid ${currentPath}: \\`${errorMessage}\\``,\n          });\n        }\n      } else if (\n        ['allowedVersions', 'matchCurrentVersion'].includes(key) &&\n        isConfigRegex(val)\n      ) {\n        if (!configRegexPredicate(val)) {\n          errors.push({\n            topic: 'Configuration Error',\n            message: `Invalid regExp for ${currentPath}: \\`${val}\\``,\n          });\n        }\n      } else if (key === 'timezone' && val !== null) {\n        const [validTimezone, errorMessage] = hasValidTimezone(val as string);\n        if (!validTimezone) {\n          errors.push({\n            topic: 'Configuration Error',\n            message: `${currentPath}: ${errorMessage}`,\n          });\n        }\n      } else if (val !== null) {\n        const type = optionTypes[key];\n        if (type === 'boolean') {\n          if (val !== true && val !== false) {\n            errors.push({\n              topic: 'Configuration Error',\n              message: `Configuration option \\`${currentPath}\\` should be boolean. Found: ${JSON.stringify(\n                val\n              )} (${typeof val})`,\n            });\n          }\n        } else if (type === 'integer') {\n          if (!is.number(val)) {\n            errors.push({\n              topic: 'Configuration Error',\n              message: `Configuration option \\`${currentPath}\\` should be an integer. Found: ${JSON.stringify(\n                val\n              )} (${typeof val})`,\n            });\n          }\n        } else if (type === 'array' && val) {\n          if (is.array(val)) {\n            for (const [subIndex, subval] of val.entries()) {\n              if (is.object(subval)) {\n                const subValidation = await validateConfig(\n                  subval as RenovateConfig,\n                  isPreset,\n                  `${currentPath}[${subIndex}]`\n                );\n                warnings = warnings.concat(subValidation.warnings);\n                errors = errors.concat(subValidation.errors);\n              }\n            }\n            if (key === 'extends') {\n              for (const subval of val) {\n                if (is.string(subval)) {\n                  if (\n                    parentName === 'packageRules' &&\n                    subval.startsWith('group:')\n                  ) {\n                    warnings.push({\n                      topic: 'Configuration Warning',\n                      message: `${currentPath}: you should not extend \"group:\" presets`,\n                    });\n                  }\n                  if (tzRe.test(subval)) {\n                    const [, timezone] = tzRe.exec(subval)!;\n                    const [validTimezone, errorMessage] =\n                      hasValidTimezone(timezone);\n                    if (!validTimezone) {\n                      errors.push({\n                        topic: 'Configuration Error',\n                        message: `${currentPath}: ${errorMessage}`,\n                      });\n                    }\n                  }\n                } else {\n                  errors.push({\n                    topic: 'Configuration Warning',\n                    message: `${currentPath}: preset value is not a string`,\n                  });\n                }\n              }\n            }\n\n            const selectors = [\n              'matchFiles',\n              'matchPaths',\n              'matchLanguages',\n              'matchBaseBranches',\n              'matchManagers',\n              'matchDatasources',\n              'matchDepTypes',\n              'matchPackageNames',\n              'matchPackagePatterns',\n              'matchPackagePrefixes',\n              'excludePackageNames',\n              'excludePackagePatterns',\n              'excludePackagePrefixes',\n              'matchCurrentVersion',\n              'matchSourceUrlPrefixes',\n              'matchSourceUrls',\n              'matchUpdateTypes',\n            ];\n            if (key === 'packageRules') {\n              for (const [subIndex, packageRule] of val.entries()) {\n                if (is.object(packageRule)) {\n                  const resolvedRule = migrateConfig({\n                    packageRules: [\n                      await resolveConfigPresets(\n                        packageRule as RenovateConfig,\n                        config\n                      ),\n                    ],\n                  }).migratedConfig.packageRules![0];\n                  errors.push(\n                    ...managerValidator.check({ resolvedRule, currentPath })\n                  );\n                  const selectorLength = Object.keys(resolvedRule).filter(\n                    (ruleKey) => selectors.includes(ruleKey)\n                  ).length;\n                  if (!selectorLength) {\n                    const message = `${currentPath}[${subIndex}]: Each packageRule must contain at least one match* or exclude* selector. Rule: ${JSON.stringify(\n                      packageRule\n                    )}`;\n                    errors.push({\n                      topic: 'Configuration Error',\n                      message,\n                    });\n                  }\n                  if (selectorLength === Object.keys(resolvedRule).length) {\n                    const message = `${currentPath}[${subIndex}]: Each packageRule must contain at least one non-match* or non-exclude* field. Rule: ${JSON.stringify(\n                      packageRule\n                    )}`;\n                    warnings.push({\n                      topic: 'Configuration Error',\n                      message,\n                    });\n                  }\n                  // It's too late to apply any of these options once you already have updates determined\n                  const preLookupOptions = [\n                    'allowedVersions',\n                    'extractVersion',\n                    'followTag',\n                    'ignoreDeps',\n                    'ignoreUnstable',\n                    'rangeStrategy',\n                    'registryUrls',\n                    'respectLatest',\n                    'rollbackPrs',\n                    'separateMajorMinor',\n                    'separateMinorPatch',\n                    'separateMultipleMajor',\n                    'versioning',\n                  ];\n                  if (is.nonEmptyArray(resolvedRule.matchUpdateTypes)) {\n                    for (const option of preLookupOptions) {\n                      if (resolvedRule[option] !== undefined) {\n                        const message = `${currentPath}[${subIndex}]: packageRules cannot combine both matchUpdateTypes and ${option}. Rule: ${JSON.stringify(\n                          packageRule\n                        )}`;\n                        errors.push({\n                          topic: 'Configuration Error',\n                          message,\n                        });\n                      }\n                    }\n                  }\n                } else {\n                  errors.push({\n                    topic: 'Configuration Error',\n                    message: `${currentPath} must contain JSON objects`,\n                  });\n                }\n              }\n            }\n            if (key === 'regexManagers') {\n              const allowedKeys = [\n                'description',\n                'fileMatch',\n                'matchStrings',\n                'matchStringsStrategy',\n                'depNameTemplate',\n                'packageNameTemplate',\n                'datasourceTemplate',\n                'versioningTemplate',\n                'registryUrlTemplate',\n                'currentValueTemplate',\n                'extractVersionTemplate',\n                'autoReplaceStringTemplate',\n                'depTypeTemplate',\n              ];\n              // TODO: fix types #7154\n              for (const regexManager of val as any[]) {\n                if (\n                  Object.keys(regexManager).some(\n                    (k) => !allowedKeys.includes(k)\n                  )\n                ) {\n                  const disallowedKeys = Object.keys(regexManager).filter(\n                    (k) => !allowedKeys.includes(k)\n                  );\n                  errors.push({\n                    topic: 'Configuration Error',\n                    message: `Regex Manager contains disallowed fields: ${disallowedKeys.join(\n                      ', '\n                    )}`,\n                  });\n                } else if (is.nonEmptyArray(regexManager.fileMatch)) {\n                  if (is.nonEmptyArray(regexManager.matchStrings)) {\n                    let validRegex = false;\n                    for (const matchString of regexManager.matchStrings) {\n                      try {\n                        regEx(matchString);\n                        validRegex = true;\n                      } catch (e) {\n                        errors.push({\n                          topic: 'Configuration Error',\n                          message: `Invalid regExp for ${currentPath}: \\`${String(\n                            matchString\n                          )}\\``,\n                        });\n                      }\n                    }\n                    if (validRegex) {\n                      const mandatoryFields = [\n                        'depName',\n                        'currentValue',\n                        'datasource',\n                      ];\n                      for (const field of mandatoryFields) {\n                        if (\n                          !regexManager[`${field}Template`] &&\n                          !regexManager.matchStrings.some(\n                            (matchString: string) =>\n                              matchString.includes(`(?<${field}>`)\n                          )\n                        ) {\n                          errors.push({\n                            topic: 'Configuration Error',\n                            message: `Regex Managers must contain ${field}Template configuration or regex group named ${field}`,\n                          });\n                        }\n                      }\n                    }\n                  } else {\n                    errors.push({\n                      topic: 'Configuration Error',\n                      message: `Each Regex Manager must contain a non-empty matchStrings array`,\n                    });\n                  }\n                } else {\n                  errors.push({\n                    topic: 'Configuration Error',\n                    message: `Each Regex Manager must contain a non-empty fileMatch array`,\n                  });\n                }\n              }\n            }\n            if (\n              key === 'matchPackagePatterns' ||\n              key === 'excludePackagePatterns'\n            ) {\n              for (const pattern of val as string[]) {\n                if (pattern !== '*') {\n                  try {\n                    regEx(pattern);\n                  } catch (e) {\n                    errors.push({\n                      topic: 'Configuration Error',\n                      message: `Invalid regExp for ${currentPath}: \\`${pattern}\\``,\n                    });\n                  }\n                }\n              }\n            }\n            if (key === 'fileMatch') {\n              for (const fileMatch of val as string[]) {\n                try {\n                  regEx(fileMatch);\n                } catch (e) {\n                  errors.push({\n                    topic: 'Configuration Error',\n                    message: `Invalid regExp for ${currentPath}: \\`${fileMatch}\\``,\n                  });\n                }\n              }\n            }\n            if (\n              (selectors.includes(key) || key === 'matchCurrentVersion') &&\n              // TODO: can be undefined ? #7154\n              !rulesRe.test(parentPath!) && // Inside a packageRule\n              (parentPath || !isPreset) // top level in a preset\n            ) {\n              errors.push({\n                topic: 'Configuration Error',\n                message: `${currentPath}: ${key} should be inside a \\`packageRule\\` only`,\n              });\n            }\n          } else {\n            errors.push({\n              topic: 'Configuration Error',\n              message: `Configuration option \\`${currentPath}\\` should be a list (Array)`,\n            });\n          }\n        } else if (type === 'string') {\n          if (!is.string(val)) {\n            errors.push({\n              topic: 'Configuration Error',\n              message: `Configuration option \\`${currentPath}\\` should be a string`,\n            });\n          }\n        } else if (\n          type === 'object' &&\n          currentPath !== 'compatibility' &&\n          currentPath !== 'constraints' &&\n          currentPath !== 'force.constraints'\n        ) {\n          if (is.plainObject(val)) {\n            if (key === 'registryAliases') {\n              const res = validateAliasObject(val);\n              if (res !== true) {\n                errors.push({\n                  topic: 'Configuration Error',\n                  message: `Invalid \\`${currentPath}.${key}.${res}\\` configuration: value is not a url`,\n                });\n              }\n            } else if (\n              ['customEnvVariables', 'migratePresets', 'secrets'].includes(key)\n            ) {\n              const res = validatePlainObject(val);\n              if (res !== true) {\n                errors.push({\n                  topic: 'Configuration Error',\n                  message: `Invalid \\`${currentPath}.${key}.${res}\\` configuration: value is not a string`,\n                });\n              }\n            } else {\n              const ignoredObjects = options\n                .filter((option) => option.freeChoice)\n                .map((option) => option.name);\n              if (!ignoredObjects.includes(key)) {\n                const subValidation = await validateConfig(\n                  val,\n                  isPreset,\n                  currentPath\n                );\n                warnings = warnings.concat(subValidation.warnings);\n                errors = errors.concat(subValidation.errors);\n              }\n            }\n          } else {\n            errors.push({\n              topic: 'Configuration Error',\n              message: `Configuration option \\`${currentPath}\\` should be a json object`,\n            });\n          }\n        }\n      }\n    }\n  }\n  function sortAll(a: ValidationMessage, b: ValidationMessage): number {\n    // istanbul ignore else: currently never happen\n    if (a.topic === b.topic) {\n      return a.message > b.message ? 1 : -1;\n    }\n    // istanbul ignore next: currently never happen\n    return a.topic > b.topic ? 1 : -1;\n  }\n  errors.sort(sortAll);\n  warnings.sort(sortAll);\n  return { errors, warnings };\n}\n"]}