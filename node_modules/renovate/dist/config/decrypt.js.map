{"version":3,"file":"decrypt.js","sourceRoot":"","sources":["../../lib/config/decrypt.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport is from '@sindresorhus/is';\nimport * as openpgp from 'openpgp';\nimport { logger } from '../logger';\nimport { maskToken } from '../util/mask';\nimport { regEx } from '../util/regex';\nimport { addSecretForSanitizing } from '../util/sanitize';\nimport { GlobalConfig } from './global';\nimport type { RenovateConfig } from './types';\n\nexport async function tryDecryptPgp(\n  privateKey: string,\n  encryptedStr: string\n): Promise<string | null> {\n  if (encryptedStr.length < 500) {\n    // optimization during transition of public key -> pgp\n    return null;\n  }\n  try {\n    const pk = await openpgp.readPrivateKey({\n      // prettier-ignore\n      armoredKey: privateKey.replace(regEx(/\\n[ \\t]+/g), '\\n'), // little massage to help a common problem\n    });\n    const startBlock = '-----BEGIN PGP MESSAGE-----\\n\\n';\n    const endBlock = '\\n-----END PGP MESSAGE-----';\n    let armoredMessage = encryptedStr.trim();\n    if (!armoredMessage.startsWith(startBlock)) {\n      armoredMessage = `${startBlock}${armoredMessage}`;\n    }\n    if (!armoredMessage.endsWith(endBlock)) {\n      armoredMessage = `${armoredMessage}${endBlock}`;\n    }\n    const message = await openpgp.readMessage({\n      armoredMessage,\n    });\n    const { data } = await openpgp.decrypt({\n      message,\n      decryptionKeys: pk,\n    });\n    logger.debug('Decrypted config using openpgp');\n    return data;\n  } catch (err) {\n    logger.debug({ err }, 'Could not decrypt using openpgp');\n    return null;\n  }\n}\n\nexport function tryDecryptPublicKeyDefault(\n  privateKey: string,\n  encryptedStr: string\n): string | null {\n  let decryptedStr: string | null = null;\n  try {\n    decryptedStr = crypto\n      .privateDecrypt(privateKey, Buffer.from(encryptedStr, 'base64'))\n      .toString();\n    logger.debug('Decrypted config using default padding');\n  } catch (err) {\n    logger.debug('Could not decrypt using default padding');\n  }\n  return decryptedStr;\n}\n\nexport function tryDecryptPublicKeyPKCS1(\n  privateKey: string,\n  encryptedStr: string\n): string | null {\n  let decryptedStr: string | null = null;\n  try {\n    decryptedStr = crypto\n      .privateDecrypt(\n        {\n          key: privateKey,\n          padding: crypto.constants.RSA_PKCS1_PADDING,\n        },\n        Buffer.from(encryptedStr, 'base64')\n      )\n      .toString();\n  } catch (err) {\n    logger.debug('Could not decrypt using PKCS1 padding');\n  }\n  return decryptedStr;\n}\n\nexport async function tryDecrypt(\n  privateKey: string,\n  encryptedStr: string,\n  repository: string\n): Promise<string | null> {\n  let decryptedStr: string | null = null;\n  if (privateKey?.startsWith('-----BEGIN PGP PRIVATE KEY BLOCK-----')) {\n    const decryptedObjStr = await tryDecryptPgp(privateKey, encryptedStr);\n    if (decryptedObjStr) {\n      try {\n        const decryptedObj = JSON.parse(decryptedObjStr);\n        const { o: org, r: repo, v: value } = decryptedObj;\n        if (is.nonEmptyString(value)) {\n          if (is.nonEmptyString(org)) {\n            const orgName = org.replace(regEx(/\\/$/), ''); // Strip trailing slash\n            if (is.nonEmptyString(repo)) {\n              const scopedRepository = `${orgName}/${repo}`;\n              if (scopedRepository.toLowerCase() === repository.toLowerCase()) {\n                decryptedStr = value;\n              } else {\n                logger.debug(\n                  { scopedRepository },\n                  'Secret is scoped to a different repository'\n                );\n                const error = new Error('config-validation');\n                error.validationError = `Encrypted secret is scoped to a different repository: \"${scopedRepository}\".`;\n                throw error;\n              }\n            } else {\n              const scopedOrg = `${orgName}/`;\n              if (\n                repository.toLowerCase().startsWith(scopedOrg.toLowerCase())\n              ) {\n                decryptedStr = value;\n              } else {\n                logger.debug(\n                  { scopedOrg },\n                  'Secret is scoped to a different org'\n                );\n                const error = new Error('config-validation');\n                error.validationError = `Encrypted secret is scoped to a different org: \"${scopedOrg}\".`;\n                throw error;\n              }\n            }\n          } else {\n            const error = new Error('config-validation');\n            error.validationError = `Encrypted value in config is missing a scope.`;\n            throw error;\n          }\n        } else {\n          const error = new Error('config-validation');\n          error.validationError = `Encrypted value in config is missing a value.`;\n          throw error;\n        }\n      } catch (err) {\n        logger.warn({ err }, 'Could not parse decrypted string');\n      }\n    }\n  } else {\n    decryptedStr = tryDecryptPublicKeyDefault(privateKey, encryptedStr);\n    if (!is.string(decryptedStr)) {\n      decryptedStr = tryDecryptPublicKeyPKCS1(privateKey, encryptedStr);\n    }\n  }\n  return decryptedStr;\n}\n\nexport async function decryptConfig(\n  config: RenovateConfig,\n  repository: string\n): Promise<RenovateConfig> {\n  logger.trace({ config }, 'decryptConfig()');\n  const decryptedConfig = { ...config };\n  const { privateKey, privateKeyOld } = GlobalConfig.get();\n  for (const [key, val] of Object.entries(config)) {\n    if (key === 'encrypted' && is.object(val)) {\n      logger.debug({ config: val }, 'Found encrypted config');\n      if (privateKey) {\n        for (const [eKey, eVal] of Object.entries(val)) {\n          logger.debug('Trying to decrypt ' + eKey);\n          let decryptedStr = await tryDecrypt(privateKey, eVal, repository);\n          if (privateKeyOld && !is.nonEmptyString(decryptedStr)) {\n            logger.debug(`Trying to decrypt with old private key`);\n            decryptedStr = await tryDecrypt(privateKeyOld, eVal, repository);\n          }\n          if (!is.nonEmptyString(decryptedStr)) {\n            const error = new Error('config-validation');\n            error.validationError = `Failed to decrypt field ${eKey}. Please re-encrypt and try again.`;\n            throw error;\n          }\n          logger.debug(`Decrypted ${eKey}`);\n          if (eKey === 'npmToken') {\n            const token = decryptedStr.replace(regEx(/\\n$/), '');\n            addSecretForSanitizing(token);\n            logger.debug(\n              { decryptedToken: maskToken(token) },\n              'Migrating npmToken to npmrc'\n            );\n            if (is.string(decryptedConfig.npmrc)) {\n              /* eslint-disable no-template-curly-in-string */\n              if (decryptedConfig.npmrc.includes('${NPM_TOKEN}')) {\n                logger.debug('Replacing ${NPM_TOKEN} with decrypted token');\n                decryptedConfig.npmrc = decryptedConfig.npmrc.replace(\n                  regEx(/\\${NPM_TOKEN}/g),\n                  token\n                );\n              } else {\n                logger.debug('Appending _authToken= to end of existing npmrc');\n                decryptedConfig.npmrc = decryptedConfig.npmrc.replace(\n                  regEx(/\\n?$/),\n                  `\\n_authToken=${token}\\n`\n                );\n              }\n              /* eslint-enable no-template-curly-in-string */\n            } else {\n              logger.debug('Adding npmrc to config');\n              decryptedConfig.npmrc = `//registry.npmjs.org/:_authToken=${token}\\n`;\n            }\n          } else {\n            decryptedConfig[eKey] = decryptedStr;\n            addSecretForSanitizing(decryptedStr);\n          }\n        }\n      } else {\n        logger.error('Found encrypted data but no privateKey');\n      }\n      delete decryptedConfig.encrypted;\n    } else if (is.array(val)) {\n      decryptedConfig[key] = [];\n      for (const item of val) {\n        if (is.object(item) && !is.array(item)) {\n          (decryptedConfig[key] as RenovateConfig[]).push(\n            await decryptConfig(item as RenovateConfig, repository)\n          );\n        } else {\n          (decryptedConfig[key] as unknown[]).push(item);\n        }\n      }\n    } else if (is.object(val) && key !== 'content') {\n      decryptedConfig[key] = await decryptConfig(\n        val as RenovateConfig,\n        repository\n      );\n    }\n  }\n  delete decryptedConfig.encrypted;\n  logger.trace({ config: decryptedConfig }, 'decryptedConfig');\n  return decryptedConfig;\n}\n"]}