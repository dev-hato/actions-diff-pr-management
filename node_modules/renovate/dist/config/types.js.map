{"version":3,"file":"types.js","sourceRoot":"","sources":["../../lib/config/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { LogLevel } from 'bunyan';\nimport type { Range } from 'semver';\nimport type { HostRule } from '../types';\nimport type { GitNoVerifyOption } from '../util/git/types';\n\nexport type RenovateConfigStage =\n  | 'global'\n  | 'repository'\n  | 'package'\n  | 'branch'\n  | 'pr';\n\nexport type RepositoryCacheConfig = 'disabled' | 'enabled' | 'reset';\nexport type DryRunConfig = 'extract' | 'lookup' | 'full';\nexport type RequiredConfig = 'required' | 'optional' | 'ignored';\n\nexport interface GroupConfig extends Record<string, unknown> {\n  branchName?: string;\n  branchTopic?: string;\n}\n\n// TODO: Proper typings\nexport interface RenovateSharedConfig {\n  $schema?: string;\n  automerge?: boolean;\n  automergeStrategy?: MergeStrategy;\n  pruneBranchAfterAutomerge?: boolean;\n  branchPrefix?: string;\n  branchPrefixOld?: string;\n  branchName?: string;\n  manager?: string | null;\n  commitMessage?: string;\n  commitMessagePrefix?: string;\n  confidential?: boolean;\n  draftPR?: boolean;\n  enabled?: boolean;\n  enabledManagers?: string[];\n  extends?: string[];\n  fileMatch?: string[];\n  force?: RenovateConfig;\n  group?: GroupConfig;\n  groupName?: string;\n  groupSlug?: string;\n  includePaths?: string[];\n  ignoreDeps?: string[];\n  ignorePaths?: string[];\n  ignoreTests?: boolean;\n  labels?: string[];\n  addLabels?: string[];\n  dependencyDashboardApproval?: boolean;\n  hashedBranchLength?: number;\n  npmrc?: string;\n  npmrcMerge?: boolean;\n  postUpgradeTasks?: PostUpgradeTasks;\n  prBodyColumns?: string[];\n  prBodyDefinitions?: Record<string, string>;\n  prCreation?: 'immediate' | 'not-pending' | 'status-success' | 'approval';\n  productLinks?: Record<string, string>;\n  prPriority?: number;\n  rebaseLabel?: string;\n  respectLatest?: boolean;\n  stopUpdatingLabel?: string;\n  rebaseWhen?: string;\n  recreateClosed?: boolean;\n  repository?: string;\n  repositoryCache?: RepositoryCacheConfig;\n  schedule?: string[];\n  automergeSchedule?: string[];\n  semanticCommits?: 'auto' | 'enabled' | 'disabled';\n  semanticCommitScope?: string | null;\n  semanticCommitType?: string;\n  suppressNotifications?: string[];\n  timezone?: string;\n  unicodeEmoji?: boolean;\n  gitIgnoredAuthors?: string[];\n  platformCommit?: boolean;\n}\n\n// Config options used only within the global worker\n// The below should contain config options where stage=global\nexport interface GlobalOnlyConfig {\n  autodiscover?: boolean;\n  autodiscoverFilter?: string;\n  baseDir?: string;\n  cacheDir?: string;\n  detectHostRulesFromEnv?: boolean;\n  forceCli?: boolean;\n  gitNoVerify?: GitNoVerifyOption[];\n  gitPrivateKey?: string;\n  globalExtends?: string[];\n  logFile?: string;\n  logFileLevel?: LogLevel;\n  prCommitsPerRunLimit?: number;\n  privateKeyPath?: string;\n  privateKeyPathOld?: string;\n  redisUrl?: string;\n  repositories?: RenovateRepository[];\n  platform?: string;\n  endpoint?: string;\n}\n\n// Config options used within the repository worker, but not user configurable\n// The below should contain config options where globalOnly=true\nexport interface RepoGlobalConfig {\n  allowCustomCrateRegistries?: boolean;\n  allowPlugins?: boolean;\n  allowPostUpgradeCommandTemplating?: boolean;\n  allowScripts?: boolean;\n  allowedPostUpgradeCommands?: string[];\n  binarySource?: 'docker' | 'global' | 'install';\n  customEnvVariables?: Record<string, string>;\n  dockerChildPrefix?: string;\n  dockerImagePrefix?: string;\n  dockerUser?: string;\n  dryRun?: DryRunConfig;\n  executionTimeout?: number;\n  gitTimeout?: number;\n  exposeAllEnv?: boolean;\n  githubTokenWarn?: boolean;\n  migratePresets?: Record<string, string>;\n  privateKey?: string;\n  privateKeyOld?: string;\n  localDir?: string;\n  cacheDir?: string;\n  platform?: string;\n  endpoint?: string;\n}\n\nexport interface LegacyAdminConfig {\n  localDir?: string;\n\n  logContext?: string;\n\n  onboarding?: boolean;\n  onboardingBranch?: string;\n  onboardingCommitMessage?: string;\n  onboardingNoDeps?: boolean;\n  onboardingPrTitle?: string;\n  onboardingConfig?: RenovateSharedConfig;\n  onboardingConfigFileName?: string;\n\n  requireConfig?: RequiredConfig;\n}\n\nexport type ExecutionMode = 'branch' | 'update';\n\nexport interface PostUpgradeTasks {\n  commands?: string[];\n  fileFilters?: string[];\n  executionMode: ExecutionMode;\n}\n\nexport type UpdateConfig<\n  T extends RenovateSharedConfig = RenovateSharedConfig\n> = Partial<Record<UpdateType, T | null>>;\n\nexport type RenovateRepository =\n  | string\n  | {\n      repository: string;\n      secrets?: Record<string, string>;\n    };\nexport interface RegexManagerTemplates {\n  depNameTemplate?: string;\n  packageNameTemplate?: string;\n  datasourceTemplate?: string;\n  versioningTemplate?: string;\n  depTypeTemplate?: string;\n  currentValueTemplate?: string;\n  currentDigestTemplate?: string;\n  extractVersionTemplate?: string;\n  registryUrlTemplate?: string;\n}\nexport interface RegExManager extends RegexManagerTemplates {\n  fileMatch: string[];\n  matchStrings: string[];\n  matchStringsStrategy?: string;\n  autoReplaceStringTemplate?: string;\n}\n\nexport type UseBaseBranchConfigType = 'merge' | 'none';\n\n// TODO: Proper typings\nexport interface RenovateConfig\n  extends LegacyAdminConfig,\n    RenovateSharedConfig,\n    UpdateConfig<PackageRule>,\n    AssigneesAndReviewersConfig,\n    ConfigMigration,\n    Record<string, unknown> {\n  depName?: string;\n  baseBranches?: string[];\n  useBaseBranchConfig?: UseBaseBranchConfigType;\n  baseBranch?: string;\n  defaultBranch?: string;\n  branchList?: string[];\n  description?: string | string[];\n  force?: RenovateConfig;\n  errors?: ValidationMessage[];\n\n  gitAuthor?: string;\n\n  hostRules?: HostRule[];\n\n  ignorePresets?: string[];\n  includeForks?: boolean;\n  isFork?: boolean;\n\n  fileList?: string[];\n  configWarningReuseIssue?: boolean;\n  dependencyDashboard?: boolean;\n  dependencyDashboardAutoclose?: boolean;\n  dependencyDashboardChecks?: Record<string, string>;\n  dependencyDashboardIssue?: number;\n  dependencyDashboardTitle?: string;\n  dependencyDashboardHeader?: string;\n  dependencyDashboardFooter?: string;\n  dependencyDashboardLabels?: string[];\n  packageFile?: string;\n  packageRules?: PackageRule[];\n  postUpdateOptions?: string[];\n  prConcurrentLimit?: number;\n  prHourlyLimit?: number;\n\n  defaultRegistryUrls?: string[];\n  registryUrls?: string[];\n\n  repoIsOnboarded?: boolean;\n  repoIsActivated?: boolean;\n\n  updateInternalDeps?: boolean;\n  updateType?: UpdateType;\n\n  warnings?: ValidationMessage[];\n  vulnerabilityAlerts?: RenovateSharedConfig;\n  regexManagers?: RegExManager[];\n\n  fetchReleaseNotes?: boolean;\n  secrets?: Record<string, string>;\n\n  constraints?: Record<string, string>;\n}\n\nexport interface AllConfig\n  extends RenovateConfig,\n    GlobalOnlyConfig,\n    RepoGlobalConfig {}\n\nexport interface AssigneesAndReviewersConfig {\n  assigneesFromCodeOwners?: boolean;\n  assignees?: string[];\n  assigneesSampleSize?: number;\n  reviewersFromCodeOwners?: boolean;\n  reviewers?: string[];\n  reviewersSampleSize?: number;\n  additionalReviewers?: string[];\n  filterUnavailableUsers?: boolean;\n}\n\nexport type UpdateType =\n  | 'major'\n  | 'minor'\n  | 'patch'\n  | 'pin'\n  | 'digest'\n  | 'pinDigest'\n  | 'lockFileMaintenance'\n  | 'lockfileUpdate'\n  | 'rollback'\n  | 'bump'\n  | 'replacement';\n\nexport type MatchStringsStrategy = 'any' | 'recursive' | 'combination';\n\nexport type MergeStrategy =\n  | 'auto'\n  | 'fast-forward'\n  | 'merge-commit'\n  | 'rebase'\n  | 'squash';\n\n// TODO: Proper typings\nexport interface PackageRule\n  extends RenovateSharedConfig,\n    UpdateConfig,\n    Record<string, unknown> {\n  description?: string | string[];\n  matchFiles?: string[];\n  matchPaths?: string[];\n  matchLanguages?: string[];\n  matchBaseBranches?: string[];\n  matchManagers?: string | string[];\n  matchDatasources?: string[];\n  matchDepTypes?: string[];\n  matchPackageNames?: string[];\n  matchPackagePatterns?: string[];\n  matchPackagePrefixes?: string[];\n  excludePackageNames?: string[];\n  excludePackagePatterns?: string[];\n  excludePackagePrefixes?: string[];\n  matchCurrentVersion?: string | Range;\n  matchSourceUrlPrefixes?: string[];\n  matchSourceUrls?: string[];\n  matchUpdateTypes?: UpdateType[];\n  registryUrls?: string[];\n}\n\nexport interface ValidationMessage {\n  topic: string;\n  message: string;\n}\n\nexport interface RenovateOptionBase {\n  /**\n   * If true, the option can only be configured by people with access to the Renovate instance.\n   * Furthermore, the option should be documented in docs/usage/self-hosted-configuration.md.\n   */\n  globalOnly?: boolean;\n\n  allowedValues?: string[];\n\n  allowString?: boolean;\n\n  cli?: boolean;\n\n  description: string;\n\n  env?: false | string;\n\n  /**\n   * Do not validate object children\n   */\n  freeChoice?: boolean;\n\n  mergeable?: boolean;\n\n  autogenerated?: boolean;\n\n  name: string;\n\n  parent?: 'hostRules' | 'packageRules' | 'postUpgradeTasks' | 'regexManagers';\n\n  // used by tests\n  relatedOptions?: string[];\n\n  stage?: RenovateConfigStage;\n\n  experimental?: boolean;\n\n  experimentalDescription?: string;\n\n  experimentalIssues?: number[];\n}\n\nexport interface RenovateArrayOption<\n  T extends string | number | Record<string, unknown> = Record<string, unknown>\n> extends RenovateOptionBase {\n  default?: T[] | null;\n  mergeable?: boolean;\n  type: 'array';\n  subType?: 'string' | 'object' | 'number';\n  supportedManagers?: string[] | 'all';\n  supportedPlatforms?: string[] | 'all';\n}\n\nexport interface RenovateStringArrayOption extends RenovateArrayOption<string> {\n  format?: 'regex';\n  subType: 'string';\n  supportedManagers?: string[] | 'all';\n  supportedPlatforms?: string[] | 'all';\n}\n\nexport interface RenovateNumberArrayOption extends RenovateArrayOption<number> {\n  subType: 'number';\n  supportedManagers?: string[] | 'all';\n  supportedPlatforms?: string[] | 'all';\n}\n\nexport interface RenovateBooleanOption extends RenovateOptionBase {\n  default?: boolean | null;\n  type: 'boolean';\n  supportedManagers?: string[] | 'all';\n  supportedPlatforms?: string[] | 'all';\n}\n\nexport interface RenovateIntegerOption extends RenovateOptionBase {\n  default?: number | null;\n  type: 'integer';\n  supportedManagers?: string[] | 'all';\n  supportedPlatforms?: string[] | 'all';\n}\n\nexport interface RenovateStringOption extends RenovateOptionBase {\n  default?: string | null;\n  format?: 'regex';\n\n  // Not used\n  replaceLineReturns?: boolean;\n  type: 'string';\n  supportedManagers?: string[] | 'all';\n  supportedPlatforms?: string[] | 'all';\n}\n\nexport interface RenovateObjectOption extends RenovateOptionBase {\n  default?: any | null;\n  additionalProperties?: Record<string, unknown> | boolean;\n  mergeable?: boolean;\n  type: 'object';\n  supportedManagers?: string[] | 'all';\n  supportedPlatforms?: string[] | 'all';\n}\n\nexport type RenovateOptions =\n  | RenovateStringOption\n  | RenovateNumberArrayOption\n  | RenovateStringArrayOption\n  | RenovateIntegerOption\n  | RenovateBooleanOption\n  | RenovateArrayOption\n  | RenovateObjectOption;\n\nexport interface PackageRuleInputConfig extends Record<string, unknown> {\n  versioning?: string;\n  packageFile?: string;\n  depType?: string;\n  depTypes?: string[];\n  depName?: string;\n  currentValue?: string | null;\n  currentVersion?: string;\n  lockedVersion?: string | null;\n  updateType?: UpdateType;\n  isBump?: boolean;\n  sourceUrl?: string | null;\n  language?: string;\n  baseBranch?: string;\n  manager?: string | null;\n  datasource?: string;\n  packageRules?: (PackageRule & PackageRuleInputConfig)[];\n}\n\nexport interface ConfigMigration {\n  configMigration?: boolean;\n}\n\nexport interface MigratedConfig {\n  isMigrated: boolean;\n  migratedConfig: RenovateConfig;\n}\n\nexport interface MigratedRenovateConfig extends RenovateConfig {\n  endpoints?: HostRule[];\n  pathRules: PackageRule[];\n  packages: PackageRule[];\n\n  node?: RenovateConfig;\n  travis?: RenovateConfig;\n  gradle?: RenovateConfig;\n}\n\nexport interface ManagerConfig extends RenovateConfig {\n  manager: string;\n  language?: string | null;\n}\n\nexport interface ValidationResult {\n  errors: ValidationMessage[];\n  warnings: ValidationMessage[];\n}\n"]}