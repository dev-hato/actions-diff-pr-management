{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/local/index.ts"],"names":[],"mappings":";;;;AAAA,kDAAgD;AAChD,yCAA4C;AAC5C,wDAAkC;AAClC,gEAA0C;AAC1C,6EAAuD;AACvD,wDAAkC;AAClC,0DAAoC;AACpC,0DAAoC;AAGpC,MAAM,SAAS,GAAG;IAChB,CAAC,sBAAU,CAAC,KAAK,CAAC,EAAE,KAAK;IACzB,CAAC,sBAAU,CAAC,SAAS,CAAC,EAAE,SAAS;IACjC,CAAC,sBAAU,CAAC,eAAe,CAAC,EAAE,eAAe;IAC7C,CAAC,sBAAU,CAAC,KAAK,CAAC,EAAE,KAAK;IACzB,CAAC,sBAAU,CAAC,MAAM,CAAC,EAAE,MAAM;IAC3B,CAAC,sBAAU,CAAC,MAAM,CAAC,EAAE,MAAM;CACnB,CAAC;AAEX,SAAgB,SAAS,CAAC,EACxB,IAAI,EACJ,UAAU,GAAG,SAAS,EACtB,UAAU,EACV,GAAG,GACU;IACb,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,qBAAY,CAAC,GAAG,EAAE,CAAC;IAClD,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;KAC9D;IACD,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAgB,CAAC,CAAC;IACjE,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK;QACb,gCAAgC;QAChC,yBAAyB,QAAQ,qBAAqB,CACvD,CAAC;KACH;IACD,OAAO,QAAQ,CAAC,qBAAqB,CACnC,IAAI,EACJ,UAAU,EACV,UAAU;IACV,uBAAuB;IACvB,QAAS,EACT,GAAG,CACJ,CAAC;AACJ,CAAC;AAzBD,8BAyBC","sourcesContent":["import { PlatformId } from '../../../constants';\nimport { GlobalConfig } from '../../global';\nimport * as azure from '../azure';\nimport * as bitbucket from '../bitbucket';\nimport * as bitbucketServer from '../bitbucket-server';\nimport * as gitea from '../gitea';\nimport * as github from '../github';\nimport * as gitlab from '../gitlab';\nimport type { Preset, PresetConfig } from '../types';\n\nconst resolvers = {\n  [PlatformId.Azure]: azure,\n  [PlatformId.Bitbucket]: bitbucket,\n  [PlatformId.BitbucketServer]: bitbucketServer,\n  [PlatformId.Gitea]: gitea,\n  [PlatformId.Github]: github,\n  [PlatformId.Gitlab]: gitlab,\n} as const;\n\nexport function getPreset({\n  repo,\n  presetName = 'default',\n  presetPath,\n  tag,\n}: PresetConfig): Promise<Preset | undefined> {\n  const { platform, endpoint } = GlobalConfig.get();\n  if (!platform) {\n    throw new Error(`Missing platform config for local preset.`);\n  }\n  const resolver = resolvers[platform.toLowerCase() as PlatformId];\n  if (!resolver) {\n    throw new Error(\n      // TODO: can be undefined? #7154\n      `Unsupported platform '${platform}' for local preset.`\n    );\n  }\n  return resolver.getPresetFromEndpoint(\n    repo,\n    presetName,\n    presetPath,\n    // TODO: fix type #7154\n    endpoint!,\n    tag\n  );\n}\n"]}