{"version":3,"file":"default.js","sourceRoot":"","sources":["../../../../lib/config/presets/internal/default.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Preset } from '../types';\n\nexport const presets: Record<string, Preset> = {\n  enableRenovate: {\n    description: 'Enable Renovate.',\n    enabled: true,\n  },\n  disableRenovate: {\n    description: 'Disable Renovate.',\n    enabled: false,\n  },\n  disableMajorUpdates: {\n    description: 'Disable `major` updates.',\n    major: {\n      enabled: false,\n    },\n  },\n  disableDomain: {\n    description: 'Disable requests to a particular domain.',\n    hostRules: [\n      {\n        matchHost: '{{arg0}}',\n        enabled: false,\n      },\n    ],\n  },\n  disableHost: {\n    description: 'Disable requests to a particular host.',\n    hostRules: [\n      {\n        matchHost: 'https://{{arg0}}',\n        enabled: false,\n      },\n    ],\n  },\n  enablePreCommit: {\n    description: 'Enable the pre-commit manager.',\n    'pre-commit': {\n      enabled: true,\n    },\n  },\n  ignoreModulesAndTests: {\n    description:\n      'Ignore `node_modules`, `bower_components`, `vendor` and various test/tests directories.',\n    ignorePaths: [\n      '**/node_modules/**',\n      '**/bower_components/**',\n      '**/vendor/**',\n      '**/examples/**',\n      '**/__tests__/**',\n      '**/test/**',\n      '**/tests/**',\n      '**/__fixtures__/**',\n    ],\n  },\n  includeNodeModules: {\n    description:\n      'Include `package.json` files found within `node_modules` folders or `bower_components`.',\n    ignorePaths: [],\n  },\n  pinVersions: {\n    description:\n      'Use version pinning (maintain a single version only and not SemVer ranges).',\n    rangeStrategy: 'pin',\n  },\n  preserveSemverRanges: {\n    description:\n      'Preserve (but continue to upgrade) any existing SemVer ranges.',\n    packageRules: [{ matchPackagePatterns: ['*'], rangeStrategy: 'replace' }],\n  },\n  pinAllExceptPeerDependencies: {\n    description: 'Pin all dependency versions except `peerDependencies`.',\n    packageRules: [\n      {\n        matchPackagePatterns: ['*'],\n        rangeStrategy: 'pin',\n      },\n      {\n        matchDepTypes: ['engines', 'peerDependencies'],\n        rangeStrategy: 'auto',\n      },\n    ],\n  },\n  pinDependencies: {\n    description:\n      'Pin dependency versions where `depType=dependencies`. Usually applies only to non-dev dependencies in `package.json`.',\n    packageRules: [\n      {\n        matchDepTypes: ['dependencies'],\n        rangeStrategy: 'pin',\n      },\n    ],\n  },\n  pinDevDependencies: {\n    description: 'Pin dependency versions for `devDependencies`.',\n    packageRules: [\n      {\n        matchDepTypes: ['devDependencies'],\n        rangeStrategy: 'pin',\n      },\n    ],\n  },\n  pinOnlyDevDependencies: {\n    description:\n      'Pin dependency versions for `devDependencies` and retain SemVer ranges for others.',\n    packageRules: [\n      {\n        matchPackagePatterns: ['*'],\n        rangeStrategy: 'replace',\n      },\n      {\n        matchDepTypes: ['devDependencies'],\n        rangeStrategy: 'pin',\n      },\n      {\n        matchDepTypes: ['peerDependencies'],\n        rangeStrategy: 'widen',\n      },\n    ],\n  },\n  autodetectPinVersions: {\n    description: 'Autodetect whether to pin dependencies or maintain ranges.',\n    rangeStrategy: 'auto',\n  },\n  separateMajorReleases: {\n    description:\n      'Separate `major` versions of dependencies into individual branches/PRs.',\n    separateMajorMinor: true,\n  },\n  separateMultipleMajorReleases: {\n    description:\n      'Separate each `major` version of dependencies into individual branches/PRs.',\n    separateMajorMinor: true,\n    separateMultipleMajor: true,\n  },\n  separatePatchReleases: {\n    description:\n      'Separate `patch` and `minor` releases of dependencies into separate PRs.',\n    separateMinorPatch: true,\n  },\n  combinePatchMinorReleases: {\n    description:\n      'Do not separate `patch` and `minor` upgrades into separate PRs for the same dependency.',\n    separateMinorPatch: false,\n  },\n  renovatePrefix: {\n    description: 'Prefix `renovate/` to all branch names.',\n    branchPrefix: 'renovate/',\n  },\n  semanticCommitType: {\n    description:\n      'Use `{{arg0}}` as semantic commit type for commit messages and PR titles.',\n    semanticCommitType: '{{arg0}}',\n  },\n  semanticPrefixChore: {\n    description:\n      'Use `chore` as semantic commit type for commit messages and PR titles.',\n    extends: [':semanticCommitType(chore)'],\n  },\n  semanticPrefixFix: {\n    description:\n      'Use `fix` as semantic commit type for commit messages and PR titles.',\n    extends: [':semanticCommitType(fix)'],\n  },\n  disablePeerDependencies: {\n    description: 'Do not renovate `peerDependencies` versions/ranges.',\n    packageRules: [\n      {\n        matchDepTypes: ['peerDependencies'],\n        enabled: false,\n      },\n    ],\n  },\n  disableDevDependencies: {\n    description: 'Do not renovate `devDependencies` versions/ranges.',\n    packageRules: [\n      {\n        matchDepTypes: ['devDependencies'],\n        enabled: false,\n      },\n    ],\n  },\n  disableDigestUpdates: {\n    description: 'Disable `digest` and Git hash updates.',\n    digest: {\n      enabled: false,\n    },\n  },\n  semanticPrefixFixDepsChoreOthers: {\n    description:\n      'If Renovate detects semantic commits, it will use semantic commit type `fix` for dependencies and `chore` for all others.',\n    packageRules: [\n      {\n        matchPackagePatterns: ['*'],\n        semanticCommitType: 'chore',\n      },\n      {\n        matchDepTypes: ['dependencies', 'require'],\n        semanticCommitType: 'fix',\n      },\n      {\n        matchDatasources: ['maven'],\n        matchDepTypes: [\n          'compile',\n          'provided',\n          'runtime',\n          'system',\n          'import',\n          'parent',\n        ],\n        semanticCommitType: 'fix',\n      },\n    ],\n  },\n  semanticCommitTypeAll: {\n    description:\n      'If Renovate detects semantic commits, it will use semantic commit type `{{arg0}}` for all commits.',\n    packageRules: [\n      {\n        matchPackagePatterns: ['*'],\n        semanticCommitType: '{{arg0}}',\n      },\n    ],\n  },\n  rebaseStalePrs: {\n    description:\n      'Rebase existing PRs any time the base branch has been updated.',\n    rebaseWhen: 'behind-base-branch',\n  },\n  prImmediately: {\n    description: 'Raise PRs immediately (after branch is created).',\n    prCreation: 'immediate',\n  },\n  prNotPending: {\n    description:\n      'Wait for branch tests to pass or fail before creating the PR.',\n    prCreation: 'not-pending',\n  },\n  prHourlyLimitNone: {\n    description: 'Removes rate limit for PR creation per hour.',\n    prHourlyLimit: 0,\n  },\n  prHourlyLimit1: {\n    description: 'Rate limit PR creation to a maximum of one per hour.',\n    prHourlyLimit: 1,\n  },\n  prHourlyLimit2: {\n    description: 'Rate limit PR creation to a maximum of two per hour.',\n    prHourlyLimit: 2,\n  },\n  prHourlyLimit4: {\n    description: 'Rate limit PR creation to a maximum of four per hour.',\n    prHourlyLimit: 4,\n  },\n  prConcurrentLimitNone: {\n    description: 'Remove limit for open PRs at any time.',\n    prConcurrentLimit: 0,\n  },\n  prConcurrentLimit10: {\n    description: 'Limit to maximum 10 open PRs at any time.',\n    prConcurrentLimit: 10,\n  },\n  prConcurrentLimit20: {\n    description: 'Limit to maximum 20 open PRs at any time.',\n    prConcurrentLimit: 20,\n  },\n  disableRateLimiting: {\n    description: 'Remove hourly and concurrent rate limits.',\n    prConcurrentLimit: 0,\n    prHourlyLimit: 0,\n  },\n  automergeDisabled: {\n    description:\n      'Disable automerging feature - wait for humans to merge all PRs.',\n    automerge: false,\n  },\n  automergeDigest: {\n    description: 'Automerge `digest` upgrades if they pass tests.',\n    digest: {\n      automerge: true,\n    },\n  },\n  automergePatch: {\n    description: 'Automerge `patch` upgrades if they pass tests.',\n    separateMinorPatch: true,\n    patch: {\n      automerge: true,\n    },\n    pin: {\n      automerge: true,\n    },\n    lockFileMaintenance: {\n      automerge: true,\n    },\n  },\n  automergeMinor: {\n    description: 'Automerge `patch` and `minor` upgrades if they pass tests.',\n    minor: {\n      automerge: true,\n    },\n    patch: {\n      automerge: true,\n    },\n    pin: {\n      automerge: true,\n    },\n    lockFileMaintenance: {\n      automerge: true,\n    },\n  },\n  automergeMajor: {\n    description:\n      'Automerge all upgrades (including `major`) if they pass tests.',\n    automerge: true,\n  },\n  automergeAll: {\n    description:\n      'Automerge all upgrades (including `major`) if they pass tests.',\n    automerge: true,\n  },\n  automergeBranch: {\n    description:\n      'If automerging, push the new commit directly to the base branch (no PR).',\n    automergeType: 'branch',\n  },\n  automergePr: {\n    description: 'Raise a PR first before any automerging.',\n    automergeType: 'pr',\n  },\n  automergeRequireAllStatusChecks: {\n    description: 'Require all status checks to pass before any automerging.',\n    ignoreTests: false,\n  },\n  skipStatusChecks: {\n    description: 'Skip status checks and automerge right away.',\n    ignoreTests: true,\n  },\n  maintainLockFilesDisabled: {\n    description:\n      'Update existing lock files only when `package.json` is modified.',\n    lockFileMaintenance: {\n      enabled: false,\n    },\n  },\n  pinDigestsDisabled: {\n    description: 'Disable pinning of Docker dependency digests.',\n    pinDigests: false,\n  },\n  maintainLockFilesWeekly: {\n    description: 'Run lock file maintenance (updates) early Monday mornings.',\n    lockFileMaintenance: {\n      enabled: true,\n      extends: ['schedule:weekly'],\n    },\n  },\n  maintainLockFilesMonthly: {\n    description:\n      'Run lock file maintenance (updates) on the first day of each month.',\n    lockFileMaintenance: {\n      enabled: true,\n      extends: ['schedule:monthly'],\n    },\n  },\n  ignoreUnstable: {\n    description:\n      'Upgrade to unstable versions only if the existing version is unstable.',\n    ignoreUnstable: true,\n  },\n  respectLatest: {\n    description: 'Upgrade versions up to the \"latest\" tag in the npm registry.',\n    respectLatest: true,\n  },\n  updateNotScheduled: {\n    description: 'Keep existing branches updated even when not scheduled.',\n    updateNotScheduled: true,\n  },\n  noUnscheduledUpdates: {\n    description: 'Only update branches when scheduled.',\n    updateNotScheduled: false,\n  },\n  automergeLinters: {\n    description: 'Update lint packages automatically if tests pass.',\n    packageRules: [\n      {\n        extends: ['packages:linters'],\n        automerge: true,\n      },\n    ],\n  },\n  automergeTesters: {\n    description: 'Update testing packages automatically if tests pass.',\n    packageRules: [\n      {\n        extends: ['packages:test'],\n        automerge: true,\n      },\n    ],\n  },\n  automergeTypes: {\n    description: 'Update `@types/*` packages automatically if tests pass.',\n    packageRules: [\n      {\n        matchPackagePrefixes: ['@types/'],\n        automerge: true,\n      },\n    ],\n  },\n  doNotPinPackage: {\n    description: 'Disable version pinning for `{{arg0}}`.',\n    packageRules: [\n      {\n        matchPackageNames: ['{{arg0}}'],\n        rangeStrategy: 'replace',\n      },\n    ],\n  },\n  pinSkipCi: {\n    description: 'Add `[skip ci]` to commit message body whenever pinning.',\n    pin: {\n      commitBody: '[skip ci]',\n    },\n  },\n  gitSignOff: {\n    description: 'Append `Signed-off-by:` to signoff Git commits.',\n    commitBody: 'Signed-off-by: {{{gitAuthor}}}',\n  },\n  npm: {\n    description: 'Keep `package.json` npm dependencies updated.',\n    npm: {\n      enabled: true,\n    },\n  },\n  gomod: {\n    description: 'Enable Go modules support.',\n    gomod: {\n      enabled: true,\n    },\n  },\n  onlyNpm: {\n    description: 'Renovate only npm dependencies.',\n    docker: {\n      enabled: false,\n    },\n    meteor: {\n      enabled: false,\n    },\n  },\n  docker: {\n    description: 'Keep Dockerfile `FROM` sources updated.',\n    docker: {\n      enabled: true,\n    },\n  },\n  meteor: {\n    description: 'Keep Meteor Npm.depends packages updated.',\n    meteor: {\n      enabled: true,\n    },\n  },\n  group: {\n    description: 'Group `{{arg1}}` packages into same branch/PR.',\n    packageRules: [\n      {\n        extends: ['{{arg0}}'],\n        groupName: '{{arg1}}',\n      },\n    ],\n  },\n  label: {\n    description: 'Apply label `{{arg0}}` to PRs.',\n    labels: ['{{arg0}}'],\n  },\n  labels: {\n    description: 'Apply labels `{{arg0}}` and `{{arg1}}` to PRs.',\n    labels: ['{{arg0}}', '{{arg1}}'],\n  },\n  assignee: {\n    description: 'Assign PRs to `{{arg0}}`.',\n    assignees: ['{{arg0}}'],\n  },\n  reviewer: {\n    description: 'Add `{{arg0}}` as reviewer for PRs.',\n    reviewers: ['{{arg0}}'],\n  },\n  assignAndReview: {\n    description: 'Set `{{arg0}}` as assignee and reviewer of PRs.',\n    extends: [':assignee({{arg0}})', ':reviewer({{arg0}})'],\n  },\n  enableVulnerabilityAlerts: {\n    description: 'Raise PR when vulnerability alerts are detected.',\n    vulnerabilityAlerts: {\n      enabled: true,\n    },\n  },\n  enableVulnerabilityAlertsWithLabel: {\n    description:\n      'Raise PR when vulnerability alerts are detected with label `{{arg0}}`.',\n    vulnerabilityAlerts: {\n      enabled: true,\n      labels: ['{{arg0}}'],\n    },\n  },\n  disableVulnerabilityAlerts: {\n    description: 'Disable vulnerability alerts completely.',\n    vulnerabilityAlerts: {\n      enabled: false,\n    },\n  },\n  semanticCommits: {\n    description: 'Use semantic prefixes for commit messages and PR titles.',\n    semanticCommits: 'enabled',\n  },\n  semanticCommitsDisabled: {\n    description: 'Disable semantic prefixes for commit messages and PR titles.',\n    semanticCommits: 'disabled',\n  },\n  disableLockFiles: {\n    description: 'Disable lock file updates.',\n    updateLockFiles: false,\n  },\n  semanticCommitScope: {\n    description:\n      'Use semantic commit scope `{{arg0}}` for all commits and PR titles.',\n    semanticCommitScope: '{{arg0}}',\n  },\n  semanticCommitScopeDisabled: {\n    description: 'Disable semantic commit scope for all commits and PR titles.',\n    semanticCommitScope: null,\n  },\n  widenPeerDependencies: {\n    description:\n      'Always widen `peerDependencies` SemVer ranges when updating, instead of replacing.',\n    packageRules: [\n      {\n        matchDepTypes: ['peerDependencies'],\n        rangeStrategy: 'widen',\n      },\n    ],\n  },\n  dependencyDashboard: {\n    description: 'Enable Renovate Dependency Dashboard creation.',\n    dependencyDashboard: true,\n  },\n  disableDependencyDashboard: {\n    description: 'Disable Renovate Dependency Dashboard creation.',\n    dependencyDashboard: false,\n  },\n  dependencyDashboardApproval: {\n    description: 'Enable Renovate Dependency Dashboard approval workflow.',\n    dependencyDashboardApproval: true,\n  },\n  timezone: {\n    description: 'Evaluate schedules according to timezone `{{arg0}}`.',\n    timezone: '{{arg0}}',\n  },\n  pathSemanticCommitType: {\n    description:\n      'Use semanticCommitType `{{arg0}}` for all package files matching path `{{arg1}}`.',\n    packageRules: [\n      {\n        matchPaths: ['{{arg0}}'],\n        semanticCommitType: '{{arg1}}',\n      },\n    ],\n  },\n  followTag: {\n    description:\n      'For package `{{arg0}}`, strictly follow release tag `{{arg1}}`.',\n    packageRules: [\n      {\n        matchPackageNames: ['{{arg0}}'],\n        followTag: '{{arg1}}',\n      },\n    ],\n  },\n  githubComToken: {\n    description:\n      'Use provided token for `github.com` lookups. Do not configure this if you are already running on `github.com`.',\n    hostRules: [\n      {\n        matchHost: 'github.com',\n        encrypted: {\n          token: '{{arg0}}',\n        },\n      },\n    ],\n  },\n  disablePrControls: {\n    description: 'Remove the checkbox controls from PRs.',\n    prBodyTemplate:\n      '{{{header}}}{{{table}}}{{{notes}}}{{{changelogs}}}{{{configDescription}}}{{{footer}}}',\n  },\n};\n"]}