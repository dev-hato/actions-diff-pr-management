{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/logger/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport * as bunyan from 'bunyan';\nimport { nanoid } from 'nanoid';\nimport cmdSerializer from './cmd-serializer';\nimport configSerializer from './config-serializer';\nimport errSerializer from './err-serializer';\nimport { RenovateStream } from './pretty-stdout';\nimport type { BunyanRecord, Logger } from './types';\nimport { ProblemStream, validateLogLevel, withSanitizer } from './utils';\n\nlet logContext: string = process.env.LOG_CONTEXT ?? nanoid();\nlet curMeta: Record<string, unknown> = {};\n\nconst problems = new ProblemStream();\n\n// istanbul ignore if: not easily testable\nif (is.string(process.env.LOG_LEVEL)) {\n  process.env.LOG_LEVEL = process.env.LOG_LEVEL.toLowerCase().trim();\n}\n\nvalidateLogLevel(process.env.LOG_LEVEL);\nconst stdout: bunyan.Stream = {\n  name: 'stdout',\n  level:\n    (process.env.LOG_LEVEL as bunyan.LogLevel) ||\n    /* istanbul ignore next: not testable */ 'info',\n  stream: process.stdout,\n};\n\n// istanbul ignore else: not testable\nif (process.env.LOG_FORMAT !== 'json') {\n  // TODO: typings (#9615)\n  const prettyStdOut = new RenovateStream() as any;\n  prettyStdOut.pipe(process.stdout);\n  stdout.stream = prettyStdOut;\n  stdout.type = 'raw';\n}\n\nconst bunyanLogger = bunyan.createLogger({\n  name: 'renovate',\n  serializers: {\n    body: configSerializer,\n    cmd: cmdSerializer,\n    config: configSerializer,\n    migratedConfig: configSerializer,\n    originalConfig: configSerializer,\n    presetConfig: configSerializer,\n    oldConfig: configSerializer,\n    newConfig: configSerializer,\n    err: errSerializer,\n  },\n  streams: [\n    stdout,\n    {\n      name: 'problems',\n      level: 'warn' as bunyan.LogLevel,\n      stream: problems as any,\n      type: 'raw',\n    },\n  ].map(withSanitizer),\n});\n\nconst logFactory =\n  (level: bunyan.LogLevelString): any =>\n  (p1: any, p2: any): void => {\n    if (p2) {\n      // meta and msg provided\n      bunyanLogger[level]({ logContext, ...curMeta, ...p1 }, p2);\n    } else if (is.string(p1)) {\n      // only message provided\n      bunyanLogger[level]({ logContext, ...curMeta }, p1);\n    } else {\n      // only meta provided\n      bunyanLogger[level]({ logContext, ...curMeta, ...p1 });\n    }\n  };\n\nconst loggerLevels: bunyan.LogLevelString[] = [\n  'trace',\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'fatal',\n];\n\nexport const logger: Logger = {} as any;\n\nloggerLevels.forEach((loggerLevel) => {\n  logger[loggerLevel] = logFactory(loggerLevel);\n});\n\nexport function setContext(value: string): void {\n  logContext = value;\n}\n\nexport function getContext(): any {\n  return logContext;\n}\n\n// setMeta overrides existing meta, may remove fields if no longer existing\nexport function setMeta(obj: Record<string, unknown>): void {\n  curMeta = { ...obj };\n}\n\n// addMeta overrides or adds fields but does not remove any\nexport function addMeta(obj: Record<string, unknown>): void {\n  curMeta = { ...curMeta, ...obj };\n}\n\n// removeMeta removes the provided fields from meta\nexport function removeMeta(fields: string[]): void {\n  Object.keys(curMeta).forEach((key) => {\n    if (fields.includes(key)) {\n      delete curMeta[key];\n    }\n  });\n}\n\nexport /* istanbul ignore next */ function addStream(\n  stream: bunyan.Stream\n): void {\n  bunyanLogger.addStream(withSanitizer(stream));\n}\n\nexport function levels(name: string, level: bunyan.LogLevel): void {\n  bunyanLogger.levels(name, level);\n}\n\nexport function getProblems(): BunyanRecord[] {\n  return problems.getProblems();\n}\n\nexport function clearProblems(): void {\n  return problems.clearProblems();\n}\n"]}