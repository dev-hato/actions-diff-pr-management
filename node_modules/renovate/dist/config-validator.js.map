{"version":3,"file":"config-validator.js","sourceRoot":"","sources":["../lib/config-validator.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n// istanbul ignore file\nimport { dequal } from 'dequal';\nimport { pathExists, readFile } from 'fs-extra';\nimport { configFileNames } from './config/app-strings';\nimport { massageConfig } from './config/massage';\nimport { migrateConfig } from './config/migration';\nimport type { RenovateConfig } from './config/types';\nimport { validateConfig } from './config/validation';\nimport { logger } from './logger';\nimport {\n  getConfig as getFileConfig,\n  getParsedContent,\n} from './workers/global/config/parse/file';\n\nlet returnVal = 0;\n\n/* eslint-disable no-console */\n\nasync function validate(\n  desc: string,\n  config: RenovateConfig,\n  isPreset = false\n): Promise<void> {\n  const { isMigrated, migratedConfig } = migrateConfig(config);\n  if (isMigrated) {\n    logger.warn(\n      {\n        oldConfig: config,\n        newConfig: migratedConfig,\n      },\n      'Config migration necessary'\n    );\n  }\n  const massagedConfig = massageConfig(migratedConfig);\n  const res = await validateConfig(massagedConfig, isPreset);\n  if (res.errors.length) {\n    logger.error({ errors: res.errors }, `${desc} contains errors`);\n    returnVal = 1;\n  }\n  if (res.warnings.length) {\n    logger.warn({ warnings: res.warnings }, `${desc} contains warnings`);\n    returnVal = 1;\n  }\n}\n\ntype PackageJson = {\n  renovate?: RenovateConfig;\n  'renovate-config'?: Record<string, RenovateConfig>;\n};\n\n(async () => {\n  if (process.argv.length > 2) {\n    for (const file of process.argv.slice(2)) {\n      try {\n        if (!(await pathExists(file))) {\n          returnVal = 1;\n          logger.error(`${file} does not exist`);\n          break;\n        }\n        const parsedContent = await getParsedContent(file);\n        try {\n          logger.info(`Validating ${file}`);\n          await validate(file, parsedContent);\n        } catch (err) {\n          logger.warn({ err }, `${file} is not valid Renovate config`);\n          returnVal = 1;\n        }\n      } catch (err) {\n        logger.warn({ err }, `${file} could not be parsed`);\n        returnVal = 1;\n      }\n    }\n  } else {\n    for (const file of configFileNames.filter(\n      (name) => name !== 'package.json'\n    )) {\n      try {\n        if (!(await pathExists(file))) {\n          continue;\n        }\n        const parsedContent = await getParsedContent(file);\n        try {\n          logger.info(`Validating ${file}`);\n          await validate(file, parsedContent);\n        } catch (err) {\n          logger.warn({ err }, `${file} is not valid Renovate config`);\n          returnVal = 1;\n        }\n      } catch (err) {\n        logger.warn({ err }, `${file} could not be parsed`);\n        returnVal = 1;\n      }\n    }\n    try {\n      const pkgJson = JSON.parse(\n        await readFile('package.json', 'utf8')\n      ) as PackageJson;\n      if (pkgJson.renovate) {\n        logger.info(`Validating package.json > renovate`);\n        await validate('package.json > renovate', pkgJson.renovate);\n      }\n      if (pkgJson['renovate-config']) {\n        logger.info(`Validating package.json > renovate-config`);\n        for (const presetConfig of Object.values(pkgJson['renovate-config'])) {\n          await validate('package.json > renovate-config', presetConfig, true);\n        }\n      }\n    } catch (err) {\n      // ignore\n    }\n    try {\n      const fileConfig = await getFileConfig(process.env);\n      if (!dequal(fileConfig, {})) {\n        const file = process.env.RENOVATE_CONFIG_FILE ?? 'config.js';\n        logger.info(`Validating ${file}`);\n        try {\n          await validate(file, fileConfig);\n        } catch (err) {\n          logger.error({ err }, `${file} is not valid Renovate config`);\n          returnVal = 1;\n        }\n      }\n    } catch (err) {\n      // ignore\n    }\n  }\n  if (returnVal !== 0) {\n    process.exit(returnVal);\n  }\n  logger.info('Config validated successfully');\n})().catch((e) => {\n  console.error(e);\n  process.exit(99);\n});\n"]}