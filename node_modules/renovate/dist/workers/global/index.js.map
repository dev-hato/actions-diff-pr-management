{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/workers/global/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { ERROR } from 'bunyan';\nimport fs from 'fs-extra';\nimport semver from 'semver';\nimport upath from 'upath';\nimport * as configParser from '../../config';\nimport { mergeChildConfig } from '../../config';\nimport { GlobalConfig } from '../../config/global';\nimport { resolveConfigPresets } from '../../config/presets';\nimport { validateConfigSecrets } from '../../config/secrets';\nimport type {\n  AllConfig,\n  RenovateConfig,\n  RenovateRepository,\n} from '../../config/types';\nimport { CONFIG_PRESETS_INVALID } from '../../constants/error-messages';\nimport { pkg } from '../../expose.cjs';\nimport { getProblems, logger, setMeta } from '../../logger';\nimport * as hostRules from '../../util/host-rules';\nimport * as repositoryWorker from '../repository';\nimport { autodiscoverRepositories } from './autodiscover';\nimport { parseConfigs } from './config/parse';\nimport { globalFinalize, globalInitialize } from './initialize';\nimport { Limit, isLimitReached } from './limits';\n\nexport async function getRepositoryConfig(\n  globalConfig: RenovateConfig,\n  repository: RenovateRepository\n): Promise<RenovateConfig> {\n  const repoConfig = configParser.mergeChildConfig(\n    globalConfig,\n    is.string(repository) ? { repository } : repository\n  );\n  // TODO: types (#7154)\n  const platform = GlobalConfig.get('platform')!;\n  repoConfig.localDir = upath.join(\n    repoConfig.baseDir,\n    `./repos/${platform}/${repoConfig.repository}`\n  );\n  await fs.ensureDir(repoConfig.localDir);\n  delete repoConfig.baseDir;\n  return configParser.filterConfig(repoConfig, 'repository');\n}\n\nfunction getGlobalConfig(): Promise<RenovateConfig> {\n  return parseConfigs(process.env, process.argv);\n}\n\nfunction haveReachedLimits(): boolean {\n  if (isLimitReached(Limit.Commits)) {\n    logger.info('Max commits created for this run.');\n    return true;\n  }\n  return false;\n}\n\n/* istanbul ignore next */\nfunction checkEnv(): void {\n  const range = pkg.engines!.node!;\n  const rangeNext = pkg['engines-next']?.node;\n  if (process.release?.name !== 'node' || !process.versions?.node) {\n    logger.warn(\n      { release: process.release, versions: process.versions },\n      'Unknown node environment detected.'\n    );\n  } else if (!semver.satisfies(process.versions?.node, range)) {\n    logger.error(\n      { versions: process.versions, range },\n      'Unsupported node environment detected. Please update your node version.'\n    );\n  } else if (\n    rangeNext &&\n    !semver.satisfies(process.versions?.node, rangeNext)\n  ) {\n    logger.warn(\n      { versions: process.versions },\n      `Please upgrade the version of Node.js used to run Renovate to satisfy \"${rangeNext}\". Support for your current version will be removed in Renovate's next major release.`\n    );\n  }\n}\n\nexport async function validatePresets(config: AllConfig): Promise<void> {\n  logger.debug('validatePresets()');\n  try {\n    await resolveConfigPresets(config);\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, CONFIG_PRESETS_INVALID);\n    throw new Error(CONFIG_PRESETS_INVALID);\n  }\n}\n\nexport async function resolveGlobalExtends(\n  globalExtends: string[]\n): Promise<AllConfig> {\n  try {\n    // Make a \"fake\" config to pass to resolveConfigPresets and resolve globalPresets\n    const config = { extends: globalExtends };\n    const resolvedConfig = await resolveConfigPresets(config);\n    return resolvedConfig;\n  } catch (err) {\n    logger.error({ err }, 'Error resolving config preset');\n    throw new Error(CONFIG_PRESETS_INVALID);\n  }\n}\n\nexport async function start(): Promise<number> {\n  let config: AllConfig;\n  try {\n    // read global config from file, env and cli args\n    config = await getGlobalConfig();\n    if (config?.globalExtends) {\n      // resolve global presets immediately\n      config = mergeChildConfig(\n        config,\n        await resolveGlobalExtends(config.globalExtends)\n      );\n    }\n    // initialize all submodules\n    config = await globalInitialize(config);\n\n    // Set platform and endpoint in case local presets are used\n    GlobalConfig.set({ platform: config.platform, endpoint: config.endpoint });\n\n    await validatePresets(config);\n\n    checkEnv();\n\n    // validate secrets. Will throw and abort if invalid\n    validateConfigSecrets(config);\n\n    // autodiscover repositories (needs to come after platform initialization)\n    config = await autodiscoverRepositories(config);\n\n    if (is.nonEmptyString(config.writeDiscoveredRepos)) {\n      const content = JSON.stringify(config.repositories);\n      await fs.writeFile(config.writeDiscoveredRepos, content);\n      logger.info(\n        `Written discovered repositories to ${config.writeDiscoveredRepos}`\n      );\n      return 0;\n    }\n\n    // Iterate through repositories sequentially\n    for (const repository of config.repositories!) {\n      if (haveReachedLimits()) {\n        break;\n      }\n      const repoConfig = await getRepositoryConfig(config, repository);\n      if (repoConfig.hostRules) {\n        logger.debug('Reinitializing hostRules for repo');\n        hostRules.clear();\n        repoConfig.hostRules.forEach((rule) => hostRules.add(rule));\n        repoConfig.hostRules = [];\n      }\n      await repositoryWorker.renovateRepository(repoConfig);\n      setMeta({});\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message.startsWith('Init: ')) {\n      logger.fatal(err.message.substring(6));\n    } else {\n      logger.fatal({ err }, `Fatal error: ${String(err.message)}`);\n    }\n    if (!config!) {\n      // return early if we can't parse config options\n      logger.debug(`Missing config`);\n      return 2;\n    }\n  } finally {\n    await globalFinalize(config!);\n    logger.debug(`Renovate exiting`);\n  }\n  const loggerErrors = getProblems().filter((p) => p.level >= ERROR);\n  if (loggerErrors.length) {\n    logger.info(\n      { loggerErrors },\n      'Renovate is exiting with a non-zero code due to the following logged errors'\n    );\n    return 1;\n  }\n  return 0;\n}\n"]}