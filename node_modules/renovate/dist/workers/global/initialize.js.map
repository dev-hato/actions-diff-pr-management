{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../lib/workers/global/initialize.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport fs from 'fs-extra';\nimport upath from 'upath';\nimport { applySecretsToConfig } from '../../config/secrets';\nimport type { AllConfig, RenovateConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport { initPlatform } from '../../modules/platform';\nimport * as packageCache from '../../util/cache/package';\nimport { setEmojiConfig } from '../../util/emoji';\nimport { validateGitVersion } from '../../util/git';\nimport * as hostRules from '../../util/host-rules';\nimport { Limit, setMaxLimit } from './limits';\n\nasync function setDirectories(input: AllConfig): Promise<AllConfig> {\n  const config: AllConfig = { ...input };\n  process.env.TMPDIR = process.env.RENOVATE_TMPDIR ?? os.tmpdir();\n  if (config.baseDir) {\n    logger.debug('Using configured baseDir: ' + config.baseDir);\n  } else {\n    config.baseDir = upath.join(process.env.TMPDIR, 'renovate');\n    logger.debug('Using baseDir: ' + config.baseDir);\n  }\n  await fs.ensureDir(config.baseDir);\n  if (config.cacheDir) {\n    logger.debug('Using configured cacheDir: ' + config.cacheDir);\n  } else {\n    config.cacheDir = upath.join(config.baseDir, 'cache');\n    logger.debug('Using cacheDir: ' + config.cacheDir);\n  }\n  await fs.ensureDir(config.cacheDir);\n  if (config.binarySource === 'docker' || config.binarySource === 'install') {\n    await fs.ensureDir(upath.join(config.cacheDir, 'buildpack'));\n  }\n  return config;\n}\n\nfunction limitCommitsPerRun(config: RenovateConfig): void {\n  let limit = config.prCommitsPerRunLimit;\n  limit = typeof limit === 'number' && limit > 0 ? limit : null;\n  setMaxLimit(Limit.Commits, limit);\n}\n\nasync function checkVersions(): Promise<void> {\n  const validGitVersion = await validateGitVersion();\n  if (!validGitVersion) {\n    throw new Error('Init: git version needs upgrading');\n  }\n}\n\nfunction setGlobalHostRules(config: RenovateConfig): void {\n  if (config.hostRules) {\n    logger.debug('Setting global hostRules');\n    applySecretsToConfig(config, undefined, false);\n    config.hostRules.forEach((rule) => hostRules.add(rule));\n  }\n}\n\nexport async function globalInitialize(\n  config_: AllConfig\n): Promise<RenovateConfig> {\n  let config = config_;\n  await checkVersions();\n  config = await initPlatform(config);\n  config = await setDirectories(config);\n  await packageCache.init(config);\n  limitCommitsPerRun(config);\n  setEmojiConfig(config);\n  setGlobalHostRules(config);\n  return config;\n}\n\nexport async function globalFinalize(config: RenovateConfig): Promise<void> {\n  await packageCache.cleanup(config);\n}\n"]}