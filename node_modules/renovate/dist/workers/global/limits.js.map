{"version":3,"file":"limits.js","sourceRoot":"","sources":["../../../lib/workers/global/limits.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AAEtC,mDAAmD;AACnD,IAAY,KAIX;AAJD,WAAY,KAAK;IACf,4BAAmB,CAAA;IACnB,sCAA6B,CAAA;IAC7B,8BAAqB,CAAA;AACvB,CAAC,EAJW,KAAK,GAAL,aAAK,KAAL,aAAK,QAIhB;AAOD,MAAM,MAAM,GAAG,IAAI,GAAG,EAAqB,CAAC;AAE5C,SAAgB,cAAc;IAC5B,MAAM,CAAC,KAAK,EAAE,CAAC;AACjB,CAAC;AAFD,wCAEC;AAED,SAAgB,WAAW,CAAC,GAAU,EAAE,GAAY;IAClD,MAAM,GAAG,GAAG,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9D,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IACrC,eAAM,CAAC,KAAK,CAAC,GAAG,GAAG,YAAY,GAAI,EAAE,CAAC,CAAC;AACzC,CAAC;AAJD,kCAIC;AAED,SAAgB,eAAe,CAAC,GAAU,EAAE,KAAK,GAAG,CAAC;IACnD,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;IAC3D,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE;QACd,GAAG,KAAK;QACR,OAAO,EAAE,KAAK,CAAC,OAAO,GAAG,KAAK;KAC/B,CAAC,CAAC;AACL,CAAC;AAND,0CAMC;AAED,SAAgB,cAAc,CAAC,GAAU;IACvC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9B,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,KAAK,IAAI,EAAE;QAChC,OAAO,KAAK,CAAC;KACd;IACD,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IAC/B,OAAO,GAAG,GAAG,OAAO,IAAI,CAAC,CAAC;AAC5B,CAAC;AAPD,wCAOC","sourcesContent":["import { logger } from '../../logger';\n\n// eslint-disable-next-line typescript-enum/no-enum\nexport enum Limit {\n  Commits = 'Commits',\n  PullRequests = 'PullRequests',\n  Branches = 'Branches',\n}\n\ninterface LimitValue {\n  max: number | null;\n  current: number;\n}\n\nconst limits = new Map<Limit, LimitValue>();\n\nexport function resetAllLimits(): void {\n  limits.clear();\n}\n\nexport function setMaxLimit(key: Limit, val: unknown): void {\n  const max = typeof val === 'number' ? Math.max(0, val) : null;\n  limits.set(key, { current: 0, max });\n  logger.debug(`${key} limit = ${max!}`);\n}\n\nexport function incLimitedValue(key: Limit, incBy = 1): void {\n  const limit = limits.get(key) ?? { max: null, current: 0 };\n  limits.set(key, {\n    ...limit,\n    current: limit.current + incBy,\n  });\n}\n\nexport function isLimitReached(key: Limit): boolean {\n  const limit = limits.get(key);\n  if (!limit || limit.max === null) {\n    return false;\n  }\n  const { max, current } = limit;\n  return max - current <= 0;\n}\n"]}