{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/file.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport fs from 'fs-extra';\nimport { load } from 'js-yaml';\nimport JSON5 from 'json5';\nimport upath from 'upath';\nimport { migrateConfig } from '../../../../config/migration';\nimport type { AllConfig, RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { readSystemFile } from '../../../../util/fs';\n\nexport async function getParsedContent(file: string): Promise<RenovateConfig> {\n  switch (upath.extname(file)) {\n    case '.yaml':\n    case '.yml':\n      return load(await readSystemFile(file, 'utf8'), {\n        json: true,\n      }) as RenovateConfig;\n    case '.json5':\n    case '.json':\n      return JSON5.parse(await readSystemFile(file, 'utf8'));\n    case '.js': {\n      const tmpConfig = await import(file);\n      let config = tmpConfig.default ? tmpConfig.default : tmpConfig;\n      // Allow the config to be a function\n      if (is.function_(config)) {\n        config = config();\n      }\n      return config;\n    }\n    default:\n      throw new Error('Unsupported file type');\n  }\n}\n\nexport async function getConfig(env: NodeJS.ProcessEnv): Promise<AllConfig> {\n  let configFile = env.RENOVATE_CONFIG_FILE ?? 'config.js';\n  if (!upath.isAbsolute(configFile)) {\n    configFile = `${process.cwd()}/${configFile}`;\n  }\n\n  if (env.RENOVATE_CONFIG_FILE && !(await fs.pathExists(configFile))) {\n    logger.fatal(\n      { configFile },\n      `Custom config file specified in RENOVATE_CONFIG_FILE must exist`\n    );\n    process.exit(1);\n  }\n\n  logger.debug('Checking for config file in ' + configFile);\n  let config: AllConfig = {};\n  try {\n    config = await getParsedContent(configFile);\n  } catch (err) {\n    // istanbul ignore if\n    if (err instanceof SyntaxError || err instanceof TypeError) {\n      logger.fatal(`Could not parse config file \\n ${err.stack!}`);\n      process.exit(1);\n    } else if (err instanceof ReferenceError) {\n      logger.fatal(\n        `Error parsing config file due to unresolved variable(s): ${err.message}`\n      );\n      process.exit(1);\n    } else if (err.message === 'Unsupported file type') {\n      logger.fatal(err.message);\n      process.exit(1);\n    } else if (env.RENOVATE_CONFIG_FILE) {\n      logger.fatal('No custom config file found on disk');\n      process.exit(1);\n    } else {\n      // istanbul ignore next: we can ignore this\n      logger.debug('No config file found on disk - skipping');\n    }\n  }\n  const { isMigrated, migratedConfig } = migrateConfig(config);\n  if (isMigrated) {\n    logger.warn(\n      { originalConfig: config, migratedConfig },\n      'Config needs migrating'\n    );\n    config = migratedConfig;\n  }\n  return config;\n}\n"]}