{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/finalise/index.ts"],"names":[],"mappings":";;;;AAEA,4CAAyC;AACzC,wDAAqD;AACrD,wFAAkE;AAClE,2CAAsD;AACtD,uDAAwE;AACxE,4EAA+E;AAC/E,+CAAiE;AACjE,oDAAgD;AAChD,mCAA6C;AAC7C,mEAA+D;AAE/D,uBAAuB;AAChB,KAAK,UAAU,YAAY,CAChC,MAAsB,EACtB,UAAoB;IAEpB,IAAI,MAAM,CAAC,eAAe,EAAE;QAC1B,MAAM,kBAAkB,GAAG,MAAM,mCAAmB,CAAC,QAAQ,EAAE,CAAC;QAChE,MAAM,eAAe,GAAG,MAAM,IAAA,mCAA0B,EACtD,MAAM,EACN,kBAAmB,CACpB,CAAC,CAAC,+BAA+B;QAClC,IAAI,eAAe,EAAE;YACnB,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACjC,MAAM,IAAA,4BAAuB,EAAC,MAAM,EAAE,kBAAmB,CAAC,CAAC;SAC5D;QACD,mCAAmB,CAAC,KAAK,EAAE,CAAC;KAC7B;IACD,MAAM,eAAe,CAAC,SAAS,EAAE,CAAC;IAClC,MAAM,IAAA,0BAAkB,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC7C,MAAM,mBAAQ,CAAC,kBAAkB,CAC/B,6CAA6C,CAC9C,CAAC;IACF,MAAM,IAAA,uBAAiB,GAAE,CAAC;IAC1B,4BAAY,CAAC,KAAK,EAAE,CAAC;IACrB,MAAM,MAAM,GAAG,MAAM,mBAAQ,CAAC,SAAS,EAAE,CAAC;IAC1C,IACE,MAAM,EAAE,IAAI,CACV,CAAC,EAAE,EAAE,EAAE,CACL,EAAE,CAAC,KAAK,KAAK,QAAQ;QACrB,EAAE,CAAC,KAAK,KAAK,oBAAoB;QACjC,EAAE,CAAC,KAAK,KAAK,MAAM,CAAC,iBAAiB,CACxC,EACD;QACA,eAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClC,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC;KAC/B;IACD,IAAA,4CAAoB,EAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACvC,CAAC;AApCD,oCAoCC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { platform } from '../../../modules/platform';\nimport * as repositoryCache from '../../../util/cache/repository';\nimport { clearRenovateRefs } from '../../../util/git';\nimport { checkConfigMigrationBranch } from '../config-migration/branch';\nimport { MigratedDataFactory } from '../config-migration/branch/migrated-data';\nimport { ensureConfigMigrationPr } from '../config-migration/pr';\nimport { PackageFiles } from '../package-files';\nimport { pruneStaleBranches } from './prune';\nimport { runRenovateRepoStats } from './repository-statistics';\n\n// istanbul ignore next\nexport async function finaliseRepo(\n  config: RenovateConfig,\n  branchList: string[]\n): Promise<void> {\n  if (config.configMigration) {\n    const migratedConfigData = await MigratedDataFactory.getAsync();\n    const migrationBranch = await checkConfigMigrationBranch(\n      config,\n      migratedConfigData!\n    ); // null if migration not needed\n    if (migrationBranch) {\n      branchList.push(migrationBranch);\n      await ensureConfigMigrationPr(config, migratedConfigData!);\n    }\n    MigratedDataFactory.reset();\n  }\n  await repositoryCache.saveCache();\n  await pruneStaleBranches(config, branchList);\n  await platform.ensureIssueClosing(\n    `Action Required: Fix Renovate Configuration`\n  );\n  await clearRenovateRefs();\n  PackageFiles.clear();\n  const prList = await platform.getPrList();\n  if (\n    prList?.some(\n      (pr) =>\n        pr.state === 'merged' &&\n        pr.title !== 'Configure Renovate' &&\n        pr.title !== config.onboardingPrTitle\n    )\n  ) {\n    logger.debug('Repo is activated');\n    config.repoIsActivated = true;\n  }\n  runRenovateRepoStats(config, prList);\n}\n"]}