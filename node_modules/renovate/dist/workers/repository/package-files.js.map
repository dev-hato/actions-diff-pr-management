{"version":3,"file":"package-files.js","sourceRoot":"","sources":["../../../lib/workers/repository/package-files.ts"],"names":[],"mappings":";;;AACA,yCAAsC;AAGtC,MAAa,YAAY;IAGhB,MAAM,CAAC,GAAG,CACf,UAAkB,EAClB,YAAkD;QAElD,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,EACd,oDAAoD,CACrD,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IAC1C,CAAC;IAEM,MAAM,CAAC,KAAK;QACjB,eAAM,CAAC,KAAK,CACV,EAAE,YAAY,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EACvC,8CAA8C,CAC/C,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,MAAsB;QACvD,MAAM,KAAK,GAAG,8BAA8B,CAAC;QAC7C,MAAM,IAAI,GAAG,mBAAmB,CAAC;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,iDAAiD;QACjF,IAAI,IAAI,GAAG,EAAE,CAAC;QAEd,KAAK,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;YAC9C,IAAI,IAAI,GAAG;gBACT,CAAC,CAAC,4BAA4B,MAAM,8BAA8B;gBAClE,CAAC,CAAC,EAAE,CAAC;YACP,IAAI,YAAY,KAAK,IAAI,EAAE;gBACzB,IAAI,IAAI,IAAI,CAAC;gBACb,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAAE,CAAC;gBACnD,SAAS;aACV;YAED,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3C,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACzB,IAAI,IAAI,IAAI,CAAC;gBACb,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAAE,CAAC;gBACnD,SAAS;aACV;YAED,MAAM,WAAW,GAAG,kBAAkB,CAAC;YAEvC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;gBAC9B,IAAI,IAAI,qBAAqB,OAAO,8BAA8B,CAAC;gBACnE,KAAK,MAAM,WAAW,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE;oBAC/C,sBAAsB;oBACtB,IAAI,IAAI,qBAAqB,WAAW,CAAC,WAAY,gBAAgB,CAAC;oBACtE,KAAK,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE;wBAClC,MAAM,GAAG,GAAG,GAAG,CAAC,YAAY,CAAC;wBAC7B,MAAM,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC;wBACjC,MAAM,OAAO,GACX,GAAG,IAAI,MAAM;4BACX,CAAC,CAAC,GAAG,GAAG,IAAI,MAAM,EAAE;4BACpB,CAAC,CAAC,GAAG,MAAM,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC;wBACxC,sBAAsB;wBACtB,IAAI,IAAI,QAAQ,GAAG,CAAC,OAAQ,IAAI,OAAO,MAAM,CAAC;qBAC/C;oBACD,IAAI,IAAI,kBAAkB,CAAC;iBAC5B;gBACD,IAAI,IAAI,+BAA+B,CAAC;aACzC;YACD,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAAE,CAAC;SACpD;QAED,OAAO,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;;AAtEH,oCAuEC;AAtEgB,iBAAI,GAAG,IAAI,GAAG,EAAgD,CAAC","sourcesContent":["import type { RenovateConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport type { PackageFile } from '../../modules/manager/types';\n\nexport class PackageFiles {\n  private static data = new Map<string, Record<string, PackageFile[]> | null>();\n\n  public static add(\n    baseBranch: string,\n    packageFiles: Record<string, PackageFile[]> | null\n  ): void {\n    logger.debug(\n      { baseBranch },\n      `PackageFiles.add() - Package file saved for branch`\n    );\n    this.data.set(baseBranch, packageFiles);\n  }\n\n  public static clear(): void {\n    logger.debug(\n      { baseBranches: [...this.data.keys()] },\n      'PackageFiles.clear() - Package files deleted'\n    );\n    this.data.clear();\n  }\n\n  public static getDashboardMarkdown(config: RenovateConfig): string {\n    const title = `## Detected dependencies\\n\\n`;\n    const none = 'None detected\\n\\n';\n    const pad = this.data.size > 1; // padding condition for a multi base branch repo\n    let deps = '';\n\n    for (const [branch, packageFiles] of this.data) {\n      deps += pad\n        ? `<details><summary>Branch ${branch}</summary>\\n<blockquote>\\n\\n`\n        : '';\n      if (packageFiles === null) {\n        deps += none;\n        deps += pad ? '</blockquote>\\n</details>\\n\\n' : '';\n        continue;\n      }\n\n      const managers = Object.keys(packageFiles);\n      if (managers.length === 0) {\n        deps += none;\n        deps += pad ? '</blockquote>\\n</details>\\n\\n' : '';\n        continue;\n      }\n\n      const placeHolder = `no version found`;\n\n      for (const manager of managers) {\n        deps += `<details><summary>${manager}</summary>\\n<blockquote>\\n\\n`;\n        for (const packageFile of packageFiles[manager]) {\n          // TODO: types (#7154)\n          deps += `<details><summary>${packageFile.packageFile!}</summary>\\n\\n`;\n          for (const dep of packageFile.deps) {\n            const ver = dep.currentValue;\n            const digest = dep.currentDigest;\n            const version =\n              ver && digest\n                ? `${ver}@${digest}`\n                : `${digest ?? ver ?? placeHolder}`;\n            // TODO: types (#7154)\n            deps += ` - \\`${dep.depName!} ${version}\\`\\n`;\n          }\n          deps += '\\n</details>\\n\\n';\n        }\n        deps += `</blockquote>\\n</details>\\n\\n`;\n      }\n      deps += pad ? '</blockquote>\\n</details>\\n\\n' : '';\n    }\n\n    return title + deps;\n  }\n}\n"]}