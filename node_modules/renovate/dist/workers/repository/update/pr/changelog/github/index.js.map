{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../lib/workers/repository/update/pr/changelog/github/index.ts"],"names":[],"mappings":";;;;AAAA,gGAA8D;AAC9D,qDAAkD;AAClD,sFAAqG;AACrG,kFAA6F;AAM7F,+DAAgE;AAChE,0DAA2D;AAC3D,oDAAiE;AAQpD,QAAA,EAAE,GAAG,kBAAkB,CAAC;AACrC,MAAM,IAAI,GAAG,IAAI,mBAAU,CAAC,UAAE,CAAC,CAAC;AAChC,MAAM,SAAS,GAAG,IAAI,2BAAmB,CAAC,IAAI,CAAC,CAAC;AAChD,MAAM,aAAa,GAAG,IAAI,+BAAuB,CAAC,IAAI,CAAC,CAAC;AAEjD,KAAK,UAAU,OAAO,CAC3B,QAAgB,EAChB,UAAkB;IAElB,eAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACjC,IAAI;QACF,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC;YACpC,WAAW,EAAE,QAAQ;YACrB,WAAW,EAAE,UAAU;SACxB,CAAC,CAAC;QAEH,qBAAqB;QACrB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,+BAA+B,CAAC,CAAC;SAC/D;QAED,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAC3D;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,EAAE,EAC/B,6BAA6B,CAC9B,CAAC;QACF,qBAAqB;QACrB,IAAI,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,iBAAiB,CAAC,EAAE;YAC5C,eAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;YACvE,MAAM,GAAG,CAAC;SACX;QACD,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AA7BD,0BA6BC;AAEM,KAAK,UAAU,iBAAiB,CACrC,UAAkB,EAClB,UAAkB,EAClB,eAAuB;IAEvB,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAC3C,MAAM,SAAS,GAAG,GAAG,IAAA,yBAAmB,EAAC,UAAU,CAAC,SAAS,UAAU,EAAE,CAAC;IAC1E,MAAM,EAAE,cAAc,EAAE,aAAa,GAAG,MAAM,EAAE,GAAG,CACjD,MAAM,IAAI,CAAC,OAAO,CAA6B,SAAS,CAAC,CAC1D,CAAC,IAAI,CAAC;IAEP,2DAA2D;IAC3D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAC5B,GAAG,SAAS,cAAc,aAAa,GACrC,eAAe,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EACrC,EAAE,CACH,CAAC;IAEF,qBAAqB;IACrB,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE;QACtB,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,oBAAoB,CAAC,CAAC;KACpD;IAED,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC;IAChE,IAAI,KAAK,GAAwB,EAAE,CAAC;IACpC,IAAI,eAAe,EAAE,MAAM,EAAE;QAC3B,KAAK,GAAG,QAAQ;aACb,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;aACjD,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CACZ,kCAAsB,CAAC,IAAI,CACzB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAA,yBAAmB,EAAC,eAAe,CAAC,EAAE,EAAE,CAAC,CACzD,CACF,CAAC;KACL;IACD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QACjB,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,kCAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;KACrE;IACD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QACjB,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC;KACb;IACD,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC,KAAK,EAAG,CAAC;IACpD,wBAAwB;IACxB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,eAAM,CAAC,KAAK,CACV,iDAAiD,aAAa,EAAE,CACjE,CAAC;KACH;IAED,2DAA2D;IAC3D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAChC,GAAG,SAAS,cAAc,GAAG,EAAE,CAChC,CAAC;IAEF,MAAM,WAAW,GAAG,IAAA,mBAAU,EAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;IACjE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,CAAC;AACxC,CAAC;AAxDD,8CAwDC;AAEM,KAAK,UAAU,cAAc,CAClC,OAAyB,EACzB,OAAyB;IAEzB,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;IACxC,aAAa;IACb,MAAM,UAAU,GAAG,OAAO,CAAC,UAAW,CAAC;IACvC,4EAA4E;IAC5E,MAAM,UAAU,GAAG,OAAO,CAAC,UAAW,CAAC;IACvC,MAAM,cAAc,GAAG,GAAG,IAAA,yBAAmB,EAC3C,UAAU,CACX,SAAS,UAAU,WAAW,CAAC;IAChC,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,QAAQ,CACxC;QACE,WAAW,EAAE,UAAU;QACvB,WAAW,EAAE,UAAU;KACxB,EACD,OAAO,CACR,CAAC;IACF,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;QACxE,GAAG;QACH,cAAc;QACd,EAAE;QACF,GAAG;QACH,IAAI;QACJ,IAAI;KACL,CAAC,CAAC,CAAC;AACN,CAAC;AA3BD,wCA2BC","sourcesContent":["import changelogFilenameRegex from 'changelog-filename-regex';\nimport { logger } from '../../../../../../logger';\nimport { CacheableGithubReleases } from '../../../../../../modules/datasource/github-releases/cache';\nimport { CacheableGithubTags } from '../../../../../../modules/datasource/github-tags/cache';\nimport type {\n  GithubGitBlob,\n  GithubGitTree,\n  GithubGitTreeNode,\n} from '../../../../../../types/platform/github';\nimport { GithubHttp } from '../../../../../../util/http/github';\nimport { fromBase64 } from '../../../../../../util/string';\nimport { ensureTrailingSlash } from '../../../../../../util/url';\nimport type {\n  ChangeLogFile,\n  ChangeLogNotes,\n  ChangeLogProject,\n  ChangeLogRelease,\n} from '../types';\n\nexport const id = 'github-changelog';\nconst http = new GithubHttp(id);\nconst tagsCache = new CacheableGithubTags(http);\nconst releasesCache = new CacheableGithubReleases(http);\n\nexport async function getTags(\n  endpoint: string,\n  repository: string\n): Promise<string[]> {\n  logger.trace('github.getTags()');\n  try {\n    const tags = await tagsCache.getItems({\n      registryUrl: endpoint,\n      packageName: repository,\n    });\n\n    // istanbul ignore if\n    if (!tags.length) {\n      logger.debug({ repository }, 'repository has no Github tags');\n    }\n\n    return tags.map(({ version }) => version).filter(Boolean);\n  } catch (err) {\n    logger.debug(\n      { sourceRepo: repository, err },\n      'Failed to fetch Github tags'\n    );\n    // istanbul ignore if\n    if (err.message?.includes('Bad credentials')) {\n      logger.warn('Bad credentials triggering tag fail lookup in changelog');\n      throw err;\n    }\n    return [];\n  }\n}\n\nexport async function getReleaseNotesMd(\n  repository: string,\n  apiBaseUrl: string,\n  sourceDirectory: string\n): Promise<ChangeLogFile | null> {\n  logger.trace('github.getReleaseNotesMd()');\n  const apiPrefix = `${ensureTrailingSlash(apiBaseUrl)}repos/${repository}`;\n  const { default_branch: defaultBranch = 'HEAD' } = (\n    await http.getJson<{ default_branch: string }>(apiPrefix)\n  ).body;\n\n  // https://docs.github.com/en/rest/reference/git#get-a-tree\n  const res = await http.getJson<GithubGitTree>(\n    `${apiPrefix}/git/trees/${defaultBranch}${\n      sourceDirectory ? '?recursive=1' : ''\n    }`\n  );\n\n  // istanbul ignore if\n  if (res.body.truncated) {\n    logger.debug({ repository }, 'Git tree truncated');\n  }\n\n  const allFiles = res.body.tree.filter((f) => f.type === 'blob');\n  let files: GithubGitTreeNode[] = [];\n  if (sourceDirectory?.length) {\n    files = allFiles\n      .filter((f) => f.path.startsWith(sourceDirectory))\n      .filter((f) =>\n        changelogFilenameRegex.test(\n          f.path.replace(ensureTrailingSlash(sourceDirectory), '')\n        )\n      );\n  }\n  if (!files.length) {\n    files = allFiles.filter((f) => changelogFilenameRegex.test(f.path));\n  }\n  if (!files.length) {\n    logger.trace('no changelog file found');\n    return null;\n  }\n  const { path: changelogFile, sha } = files.shift()!;\n  /* istanbul ignore if */\n  if (files.length !== 0) {\n    logger.debug(\n      `Multiple candidates for changelog file, using ${changelogFile}`\n    );\n  }\n\n  // https://docs.github.com/en/rest/reference/git#get-a-blob\n  const fileRes = await http.getJson<GithubGitBlob>(\n    `${apiPrefix}/git/blobs/${sha}`\n  );\n\n  const changelogMd = fromBase64(fileRes.body.content) + '\\n#\\n##';\n  return { changelogFile, changelogMd };\n}\n\nexport async function getReleaseList(\n  project: ChangeLogProject,\n  release: ChangeLogRelease\n): Promise<ChangeLogNotes[]> {\n  logger.trace('github.getReleaseList()');\n  // TODO #7154\n  const apiBaseUrl = project.apiBaseUrl!;\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  const repository = project.repository!;\n  const notesSourceUrl = `${ensureTrailingSlash(\n    apiBaseUrl\n  )}repos/${repository}/releases`;\n  const items = await releasesCache.getItems(\n    {\n      registryUrl: apiBaseUrl,\n      packageName: repository,\n    },\n    release\n  );\n  return items.map(({ url, id, version: tag, name, description: body }) => ({\n    url,\n    notesSourceUrl,\n    id,\n    tag,\n    name,\n    body,\n  }));\n}\n"]}