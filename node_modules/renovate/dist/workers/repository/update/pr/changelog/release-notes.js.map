{"version":3,"file":"release-notes.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/changelog/release-notes.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #7154\nimport URL from 'url';\nimport is from '@sindresorhus/is';\nimport { DateTime } from 'luxon';\nimport MarkdownIt from 'markdown-it';\nimport { logger } from '../../../../../logger';\nimport * as memCache from '../../../../../util/cache/memory';\nimport * as packageCache from '../../../../../util/cache/package';\nimport { linkify } from '../../../../../util/markdown';\nimport { newlineRegex, regEx } from '../../../../../util/regex';\nimport type { BranchUpgradeConfig } from '../../../../types';\nimport * as github from './github';\nimport * as gitlab from './gitlab';\nimport type {\n  ChangeLogFile,\n  ChangeLogNotes,\n  ChangeLogProject,\n  ChangeLogRelease,\n  ChangeLogResult,\n} from './types';\n\nconst markdown = new MarkdownIt('zero');\nmarkdown.enable(['heading', 'lheading']);\n\nexport async function getReleaseList(\n  project: ChangeLogProject,\n  release: ChangeLogRelease\n): Promise<ChangeLogNotes[]> {\n  logger.trace('getReleaseList()');\n  const { apiBaseUrl, repository, type } = project;\n  try {\n    switch (type) {\n      case 'gitlab':\n        return await gitlab.getReleaseList(project, release);\n      case 'github':\n        return await github.getReleaseList(project, release);\n\n      default:\n        logger.warn({ apiBaseUrl, repository, type }, 'Invalid project type');\n        return [];\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug({ repository, type, apiBaseUrl }, 'getReleaseList 404');\n    } else {\n      logger.debug(\n        { repository, type, apiBaseUrl, err },\n        'getReleaseList error'\n      );\n    }\n  }\n  return [];\n}\n\nexport function getCachedReleaseList(\n  project: ChangeLogProject,\n  release: ChangeLogRelease\n): Promise<ChangeLogNotes[]> {\n  // TODO: types (#7154)\n  const cacheKey = `getReleaseList-${project.apiBaseUrl!}-${\n    project.repository\n  }`;\n  const cachedResult = memCache.get<Promise<ChangeLogNotes[]>>(cacheKey);\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const promisedRes = getReleaseList(project, release);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport function massageBody(\n  input: string | undefined | null,\n  baseUrl: string\n): string {\n  let body = input ?? '';\n  // Convert line returns\n  body = body.replace(regEx(/\\r\\n/g), '\\n');\n  // semantic-release cleanup\n  body = body.replace(regEx(/^<a name=\"[^\"]*\"><\\/a>\\n/), '');\n  body = body.replace(\n    regEx(\n      `^##? \\\\[[^\\\\]]*\\\\]\\\\(${baseUrl}[^/]*\\\\/[^/]*\\\\/compare\\\\/.*?\\\\n`,\n      undefined,\n      false\n    ),\n    ''\n  );\n  // Clean-up unnecessary commits link\n  body = `\\n${body}\\n`.replace(\n    regEx(`\\\\n${baseUrl}[^/]+\\\\/[^/]+\\\\/compare\\\\/[^\\\\n]+(\\\\n|$)`),\n    '\\n'\n  );\n  // Reduce headings size\n  body = body\n    .replace(regEx(/\\n\\s*####? /g), '\\n##### ')\n    .replace(regEx(/\\n\\s*## /g), '\\n#### ')\n    .replace(regEx(/\\n\\s*# /g), '\\n### ');\n  // Trim whitespace\n  return body.trim();\n}\n\nexport async function getReleaseNotes(\n  project: ChangeLogProject,\n  release: ChangeLogRelease,\n  config: BranchUpgradeConfig\n): Promise<ChangeLogNotes | null> {\n  const { depName, repository } = project;\n  const { version, gitRef } = release;\n  // TODO: types (#7154)\n  logger.trace(`getReleaseNotes(${repository}, ${version}, ${depName!})`);\n  const releases = await getCachedReleaseList(project, release);\n  logger.trace({ releases }, 'Release list from getReleaseList');\n  let releaseNotes: ChangeLogNotes | null = null;\n\n  let matchedRelease = getExactReleaseMatch(depName!, version, releases);\n  if (is.undefined(matchedRelease)) {\n    // no exact match of a release then check other cases\n    matchedRelease = releases.find(\n      (r) =>\n        r.tag === version ||\n        r.tag === `v${version}` ||\n        r.tag === gitRef ||\n        r.tag === `v${gitRef}`\n    );\n  }\n  if (is.undefined(matchedRelease) && config.extractVersion) {\n    const extractVersionRegEx = regEx(config.extractVersion);\n    matchedRelease = releases.find((r) => {\n      const extractedVersion = extractVersionRegEx.exec(r.tag!)?.groups\n        ?.version;\n      return version === extractedVersion;\n    });\n  }\n  releaseNotes = await releaseNotesResult(matchedRelease, project);\n  logger.trace({ releaseNotes });\n  return releaseNotes;\n}\n\nfunction getExactReleaseMatch(\n  depName: string,\n  version: string,\n  releases: ChangeLogNotes[]\n): ChangeLogNotes | undefined {\n  const exactReleaseReg = regEx(`${depName}[@_-]v?${version}`);\n  const candidateReleases = releases.filter((r) => r.tag?.endsWith(version));\n  const matchedRelease = candidateReleases.find((r) =>\n    exactReleaseReg.test(r.tag!)\n  );\n  return matchedRelease;\n}\n\nasync function releaseNotesResult(\n  releaseMatch: ChangeLogNotes | undefined,\n  project: ChangeLogProject\n): Promise<ChangeLogNotes | null> {\n  if (!releaseMatch) {\n    return null;\n  }\n  const { baseUrl, repository } = project;\n  const releaseNotes: ChangeLogNotes = releaseMatch;\n  if (releaseMatch.url && !baseUrl.includes('gitlab')) {\n    // there is a ready link\n    releaseNotes.url = releaseMatch.url;\n  } else {\n    // TODO: types (#7154)\n    releaseNotes.url = baseUrl.includes('gitlab')\n      ? `${baseUrl}${repository}/tags/${releaseMatch.tag!}`\n      : `${baseUrl}${repository}/releases/${releaseMatch.tag!}`;\n  }\n  // set body for release notes\n  releaseNotes.body = massageBody(releaseNotes.body, baseUrl);\n  if (releaseNotes.body.length) {\n    try {\n      if (baseUrl !== 'https://gitlab.com/') {\n        releaseNotes.body = await linkify(releaseNotes.body, {\n          repository: `${baseUrl}${repository}`,\n        });\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn({ err, baseUrl, repository }, 'Error linkifying');\n    }\n  } else {\n    return null;\n  }\n\n  return releaseNotes;\n}\n\nfunction sectionize(text: string, level: number): string[] {\n  const sections: [number, number][] = [];\n  const lines = text.split(newlineRegex);\n  const tokens = markdown.parse(text, undefined);\n  tokens.forEach((token) => {\n    if (token.type === 'heading_open') {\n      const lev = +token.tag.substring(1);\n      if (lev <= level) {\n        sections.push([lev, token.map![0]]);\n      }\n    }\n  });\n  sections.push([-1, lines.length]);\n  const result: string[] = [];\n  for (let i = 1; i < sections.length; i += 1) {\n    const [lev, start] = sections[i - 1];\n    const [, end] = sections[i];\n    if (lev === level) {\n      result.push(lines.slice(start, end).join('\\n'));\n    }\n  }\n  return result;\n}\n\nfunction isUrl(url: string): boolean {\n  try {\n    return !!URL.parse(url).hostname;\n  } catch (err) {\n    // istanbul ignore next\n    logger.debug({ err }, `Error parsing ${url} in URL.parse`);\n  }\n  // istanbul ignore next\n  return false;\n}\n\nexport async function getReleaseNotesMdFileInner(\n  project: ChangeLogProject\n): Promise<ChangeLogFile | null> {\n  const { repository, type } = project;\n  const apiBaseUrl = project.apiBaseUrl!;\n  const sourceDirectory = project.sourceDirectory!;\n  try {\n    switch (type) {\n      case 'gitlab':\n        return await gitlab.getReleaseNotesMd(\n          repository,\n          apiBaseUrl,\n          sourceDirectory\n        );\n      case 'github':\n        return await github.getReleaseNotesMd(\n          repository,\n          apiBaseUrl,\n          sourceDirectory\n        );\n\n      default:\n        logger.warn({ apiBaseUrl, repository, type }, 'Invalid project type');\n        return null;\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug(\n        { repository, type, apiBaseUrl },\n        'Error 404 getting changelog md'\n      );\n    } else {\n      logger.debug(\n        { err, repository, type, apiBaseUrl },\n        'Error getting changelog md'\n      );\n    }\n  }\n  return null;\n}\n\nexport function getReleaseNotesMdFile(\n  project: ChangeLogProject\n): Promise<ChangeLogFile | null> {\n  // TODO: types (#7154)\n  const cacheKey = `getReleaseNotesMdFile@v2-${project.repository}${\n    project.sourceDirectory ? `-${project.sourceDirectory}` : ''\n  }-${project.apiBaseUrl!}`;\n  const cachedResult = memCache.get<Promise<ChangeLogFile | null>>(cacheKey);\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const promisedRes = getReleaseNotesMdFileInner(project);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport async function getReleaseNotesMd(\n  project: ChangeLogProject,\n  release: ChangeLogRelease\n): Promise<ChangeLogNotes | null> {\n  const { baseUrl, repository } = project;\n  const version = release.version;\n  logger.trace(`getReleaseNotesMd(${repository}, ${version})`);\n  const skippedRepos = ['facebook/react-native'];\n  // istanbul ignore if\n  if (skippedRepos.includes(repository)) {\n    return null;\n  }\n  const changelog = await getReleaseNotesMdFile(project);\n  if (!changelog) {\n    return null;\n  }\n  const { changelogFile } = changelog;\n  const changelogMd = changelog.changelogMd.replace(\n    regEx(/\\n\\s*<a name=\"[^\"]*\">.*?<\\/a>\\n/g),\n    '\\n'\n  );\n  for (const level of [1, 2, 3, 4, 5, 6, 7]) {\n    const changelogParsed = sectionize(changelogMd, level);\n    if (changelogParsed.length >= 2) {\n      for (const section of changelogParsed) {\n        try {\n          // replace brackets and parenthesis with space\n          const deParenthesizedSection = section.replace(\n            regEx(/[[\\]()]/g),\n            ' '\n          );\n          const [heading] = deParenthesizedSection.split(newlineRegex);\n          const title = heading\n            .replace(regEx(/^\\s*#*\\s*/), '')\n            .split(' ')\n            .filter(Boolean);\n          let body = section.replace(regEx(/.*?\\n(-{3,}\\n)?/), '').trim();\n          for (const word of title) {\n            if (word.includes(version) && !isUrl(word)) {\n              logger.trace({ body }, 'Found release notes for v' + version);\n              // TODO: fix url\n              const notesSourceUrl = `${baseUrl}${repository}/blob/HEAD/${changelogFile}`;\n              const url =\n                notesSourceUrl +\n                '#' +\n                title.join('-').replace(regEx(/[^A-Za-z0-9-]/g), '');\n              body = massageBody(body, baseUrl);\n              if (body?.length) {\n                try {\n                  body = await linkify(body, {\n                    repository: `${baseUrl}${repository}`,\n                  });\n                } catch (err) /* istanbul ignore next */ {\n                  logger.warn({ body, err }, 'linkify error');\n                }\n              }\n              return {\n                body,\n                url,\n                notesSourceUrl,\n              };\n            }\n          }\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn({ err }, `Error parsing ${changelogFile}`);\n        }\n      }\n    }\n    logger.trace({ repository }, `No level ${level} changelogs headings found`);\n  }\n  logger.trace({ repository, version }, `No entry found in ${changelogFile}`);\n  return null;\n}\n\n/**\n * Determine how long to cache release notes based on when the version was released.\n *\n * It's not uncommon for release notes to be updated shortly after the release itself,\n * so only cache for about an hour when the release is less than a week old. Otherwise,\n * cache for days.\n */\nexport function releaseNotesCacheMinutes(releaseDate?: string | Date): number {\n  const dt = is.date(releaseDate)\n    ? DateTime.fromJSDate(releaseDate)\n    : DateTime.fromISO(releaseDate!);\n\n  const now = DateTime.local();\n\n  if (!dt.isValid || now.diff(dt, 'days').days < 7) {\n    return 55;\n  }\n\n  if (now.diff(dt, 'months').months < 6) {\n    return 1435; // 5 minutes shy of one day\n  }\n\n  return 14495; // 5 minutes shy of 10 days\n}\n\n// TODO #7154 allow `null` and `undefined`\nexport async function addReleaseNotes(\n  input: ChangeLogResult,\n  config: BranchUpgradeConfig\n): Promise<ChangeLogResult> {\n  if (!input?.versions || !input.project?.type) {\n    logger.debug('Missing project or versions');\n    return input;\n  }\n  const output: ChangeLogResult = { ...input, versions: [] };\n  const { repository, sourceDirectory } = input.project;\n  const cacheNamespace = `changelog-${input.project.type}-notes@v2`;\n  function getCacheKey(version: string): string {\n    return `${repository}:${\n      sourceDirectory ? `${sourceDirectory}:` : ''\n    }${version}`;\n  }\n  for (const v of input.versions) {\n    let releaseNotes: ChangeLogNotes | null | undefined;\n    const cacheKey = getCacheKey(v.version);\n    releaseNotes = await packageCache.get(cacheNamespace, cacheKey);\n    // istanbul ignore else: no cache tests\n    if (!releaseNotes) {\n      releaseNotes = await getReleaseNotesMd(input.project, v);\n      // istanbul ignore else: should be tested\n      if (!releaseNotes) {\n        releaseNotes = await getReleaseNotes(input.project, v, config);\n      }\n      // Small hack to force display of release notes when there is a compare url\n      if (!releaseNotes && v.compare.url) {\n        releaseNotes = { url: v.compare.url, notesSourceUrl: '' };\n      }\n      const cacheMinutes = releaseNotesCacheMinutes(v.date);\n      await packageCache.set(\n        cacheNamespace,\n        cacheKey,\n        releaseNotes,\n        cacheMinutes\n      );\n    }\n    output.versions!.push({\n      ...v,\n      releaseNotes: releaseNotes!,\n    });\n    output.hasReleaseNotes = !!output.hasReleaseNotes || !!releaseNotes;\n  }\n  return output;\n}\n"]}