{"version":3,"file":"source-gitlab.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/changelog/source-gitlab.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #7154\nimport URL from 'url';\nimport { logger } from '../../../../../logger';\nimport type { Release } from '../../../../../modules/datasource/types';\nimport * as allVersioning from '../../../../../modules/versioning';\nimport * as memCache from '../../../../../util/cache/memory';\nimport * as packageCache from '../../../../../util/cache/package';\nimport { regEx } from '../../../../../util/regex';\nimport type { BranchUpgradeConfig } from '../../../../types';\nimport { getTags } from './gitlab';\nimport { addReleaseNotes } from './release-notes';\nimport { getInRangeReleases } from './releases';\nimport type { ChangeLogRelease, ChangeLogResult } from './types';\n\nconst cacheNamespace = 'changelog-gitlab-release';\n\nfunction getCachedTags(\n  endpoint: string,\n  versionScheme: string,\n  repository: string\n): Promise<string[]> {\n  const cacheKey = `getTags-${endpoint}-${versionScheme}-${repository}`;\n  const cachedResult = memCache.get<Promise<string[]>>(cacheKey);\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const promisedRes = getTags(endpoint, repository);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport async function getChangeLogJSON(\n  config: BranchUpgradeConfig\n): Promise<ChangeLogResult | null> {\n  const versioning = config.versioning!;\n  const currentVersion = config.currentVersion!;\n  const newVersion = config.newVersion!;\n  const sourceUrl = config.sourceUrl!;\n  const depName = config.depName!;\n  const manager = config.manager;\n  const sourceDirectory = config.sourceDirectory!;\n\n  logger.trace('getChangeLogJSON for gitlab');\n  const version = allVersioning.get(versioning);\n\n  const parsedUrl = URL.parse(sourceUrl);\n  const protocol = parsedUrl.protocol!;\n  const host = parsedUrl.host!;\n  const pathname = parsedUrl.pathname!;\n\n  logger.trace({ protocol, host, pathname }, 'Protocol, host, pathname');\n  const baseUrl = protocol.concat('//', host, '/');\n  const apiBaseUrl = baseUrl.concat('api/v4/');\n  const repository = pathname\n    .slice(1)\n    .replace(regEx(/\\/$/), '')\n    .replace(regEx(/\\.git$/), '');\n  if (repository.split('/').length < 2) {\n    logger.info({ sourceUrl }, 'Invalid gitlab URL found');\n    return null;\n  }\n  const releases = config.releases ?? (await getInRangeReleases(config));\n  if (!releases?.length) {\n    logger.debug('No releases');\n    return null;\n  }\n  // This extra filter/sort should not be necessary, but better safe than sorry\n  const validReleases = [...releases]\n    .filter((release) => version.isVersion(release.version))\n    .sort((a, b) => version.sortVersions(a.version, b.version));\n\n  if (validReleases.length < 2) {\n    logger.debug('Not enough valid releases');\n    return null;\n  }\n\n  let tags: string[];\n\n  async function getRef(release: Release): Promise<string | null> {\n    if (!tags) {\n      tags = await getCachedTags(apiBaseUrl, versioning, repository);\n    }\n    const regex = regEx(`(?:${depName}|release)[@-]`, undefined, false);\n    const tagName = tags\n      .filter((tag) => version.isVersion(tag.replace(regex, '')))\n      .find((tag) => version.equals(tag.replace(regex, ''), release.version));\n    if (tagName) {\n      return tagName;\n    }\n    if (release.gitRef) {\n      return release.gitRef;\n    }\n    return null;\n  }\n\n  function getCacheKey(prev: string, next: string): string {\n    return `${manager}:${depName}:${prev}:${next}`;\n  }\n\n  const changelogReleases: ChangeLogRelease[] = [];\n  // compare versions\n  const include = (v: string): boolean =>\n    version.isGreaterThan(v, currentVersion) &&\n    !version.isGreaterThan(v, newVersion);\n  for (let i = 1; i < validReleases.length; i += 1) {\n    const prev = validReleases[i - 1];\n    const next = validReleases[i];\n    if (include(next.version)) {\n      let release = await packageCache.get(\n        cacheNamespace,\n        getCacheKey(prev.version, next.version)\n      );\n      if (!release) {\n        release = {\n          version: next.version,\n          date: next.releaseTimestamp,\n          gitRef: next.gitRef,\n          // put empty changes so that existing templates won't break\n          changes: [],\n          compare: {},\n        };\n        const prevHead = await getRef(prev);\n        const nextHead = await getRef(next);\n        if (prevHead && nextHead) {\n          release.compare.url = `${baseUrl}${repository}/compare/${prevHead}...${nextHead}`;\n        }\n        const cacheMinutes = 55;\n        await packageCache.set(\n          cacheNamespace,\n          getCacheKey(prev.version, next.version),\n          release,\n          cacheMinutes\n        );\n      }\n      changelogReleases.unshift(release);\n    }\n  }\n\n  let res: ChangeLogResult = {\n    project: {\n      apiBaseUrl,\n      baseUrl,\n      type: 'gitlab',\n      repository,\n      sourceUrl,\n      depName,\n      sourceDirectory,\n    },\n    versions: changelogReleases,\n  };\n\n  res = await addReleaseNotes(res, config);\n\n  return res;\n}\n"]}