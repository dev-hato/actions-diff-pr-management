{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/changelog/index.ts"],"names":[],"mappings":";;;;AAAA,kDAA+C;AAC/C,+DAAsE;AACtE,yFAAmE;AAEnE,sEAAgD;AAChD,sEAAgD;AAGhD,kDAAwB;AAEjB,KAAK,UAAU,gBAAgB,CACpC,MAA2B;IAE3B,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,cAAc,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IACrE,IAAI;QACF,IAAI,CAAC,CAAC,SAAS,IAAI,cAAc,IAAI,UAAU,CAAC,EAAE;YAChD,OAAO,IAAI,CAAC;SACb;QACD,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC9C,IAAI,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,UAAU,CAAC,EAAE;YAC9C,OAAO,IAAI,CAAC;SACb;QACD,eAAM,CAAC,KAAK,CACV,uBAAuB,SAAS,KAAK,cAAc,OAAO,UAAU,GAAG,CACxE,CAAC;QAEF,IAAI,GAAG,GAA2B,IAAI,CAAC;QAEvC,MAAM,QAAQ,GAAG,IAAA,qBAAc,EAAC,SAAS,CAAC,CAAC;QAE3C,QAAQ,QAAQ,EAAE;YAChB,KAAK,QAAQ;gBACX,GAAG,GAAG,MAAM,YAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBAClD,MAAM;YACR,KAAK,QAAQ;gBACX,GAAG,GAAG,MAAM,YAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBAClD,MAAM;YAER;gBACE,eAAM,CAAC,IAAI,CACT,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,EACjC,gDAAgD,CACjD,CAAC;gBACF,MAAM;SACT;QAED,OAAO,GAAG,CAAC;KACZ;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,wBAAwB,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAzCD,4CAyCC","sourcesContent":["import { logger } from '../../../../../logger';\nimport { detectPlatform } from '../../../../../modules/platform/util';\nimport * as allVersioning from '../../../../../modules/versioning';\nimport type { BranchUpgradeConfig } from '../../../../types';\nimport * as sourceGithub from './source-github';\nimport * as sourceGitlab from './source-gitlab';\nimport type { ChangeLogResult } from './types';\n\nexport * from './types';\n\nexport async function getChangeLogJSON(\n  config: BranchUpgradeConfig\n): Promise<ChangeLogResult | null> {\n  const { sourceUrl, versioning, currentVersion, newVersion } = config;\n  try {\n    if (!(sourceUrl && currentVersion && newVersion)) {\n      return null;\n    }\n    const version = allVersioning.get(versioning);\n    if (version.equals(currentVersion, newVersion)) {\n      return null;\n    }\n    logger.debug(\n      `Fetching changelog: ${sourceUrl} (${currentVersion} -> ${newVersion})`\n    );\n\n    let res: ChangeLogResult | null = null;\n\n    const platform = detectPlatform(sourceUrl);\n\n    switch (platform) {\n      case 'gitlab':\n        res = await sourceGitlab.getChangeLogJSON(config);\n        break;\n      case 'github':\n        res = await sourceGithub.getChangeLogJSON(config);\n        break;\n\n      default:\n        logger.info(\n          { sourceUrl, hostType: platform },\n          'Unknown platform, skipping changelog fetching.'\n        );\n        break;\n    }\n\n    return res;\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ config, err }, 'getChangeLogJSON error');\n    return null;\n  }\n}\n"]}