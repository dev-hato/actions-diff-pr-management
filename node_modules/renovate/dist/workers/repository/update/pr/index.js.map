{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/pr/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport {\n  PLATFORM_INTEGRATION_UNAUTHORIZED,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n  REPOSITORY_CHANGED,\n} from '../../../../constants/error-messages';\nimport { pkg } from '../../../../expose.cjs';\nimport { logger } from '../../../../logger';\nimport {\n  PlatformPrOptions,\n  Pr,\n  PrDebugData,\n  platform,\n} from '../../../../modules/platform';\nimport { ensureComment } from '../../../../modules/platform/comment';\nimport { hashBody } from '../../../../modules/platform/pr-body';\nimport { BranchStatus } from '../../../../types';\nimport { ExternalHostError } from '../../../../types/errors/external-host-error';\nimport { stripEmojis } from '../../../../util/emoji';\nimport { deleteBranch, getBranchLastCommitTime } from '../../../../util/git';\nimport { memoize } from '../../../../util/memoize';\nimport { Limit, incLimitedValue, isLimitReached } from '../../../global/limits';\nimport type {\n  BranchConfig,\n  BranchUpgradeConfig,\n  PrBlockedBy,\n} from '../../../types';\nimport { resolveBranchStatus } from '../branch/status-checks';\nimport { getPrBody } from './body';\nimport { ChangeLogError } from './changelog/types';\nimport { prepareLabels } from './labels';\nimport { addParticipants } from './participants';\n\nexport function getPlatformPrOptions(\n  config: RenovateConfig & PlatformPrOptions\n): PlatformPrOptions {\n  const usePlatformAutomerge = Boolean(\n    config.automerge &&\n      (config.automergeType === 'pr' || config.automergeType === 'branch') &&\n      config.platformAutomerge\n  );\n\n  return {\n    azureAutoApprove: config.azureAutoApprove,\n    azureWorkItemId: config.azureWorkItemId,\n    bbUseDefaultReviewers: config.bbUseDefaultReviewers,\n    gitLabIgnoreApprovals: config.gitLabIgnoreApprovals,\n    usePlatformAutomerge,\n  };\n}\n\nexport interface ResultWithPr {\n  type: 'with-pr';\n  pr: Pr;\n}\n\nexport interface ResultWithoutPr {\n  type: 'without-pr';\n  prBlockedBy: PrBlockedBy;\n}\n\nexport type EnsurePrResult = ResultWithPr | ResultWithoutPr;\n\nexport function updatePrDebugData(\n  debugData: PrDebugData | undefined\n): PrDebugData {\n  const createdByRenovateVersion = debugData?.createdInVer ?? pkg.version;\n  const updatedByRenovateVersion = pkg.version;\n  return {\n    createdInVer: createdByRenovateVersion,\n    updatedInVer: updatedByRenovateVersion,\n  };\n}\n\n// Ensures that PR exists with matching title/body\nexport async function ensurePr(\n  prConfig: BranchConfig\n): Promise<EnsurePrResult> {\n  const getBranchStatus = memoize(() =>\n    resolveBranchStatus(branchName, ignoreTests)\n  );\n\n  const config: BranchConfig = { ...prConfig };\n\n  logger.trace({ config }, 'ensurePr');\n  // If there is a group, it will use the config of the first upgrade in the array\n  const { branchName, ignoreTests, prTitle = '', upgrades } = config;\n  const dependencyDashboardCheck =\n    config.dependencyDashboardChecks?.[config.branchName];\n  // Check if existing PR exists\n  const existingPr = await platform.getBranchPr(branchName);\n  if (existingPr) {\n    logger.debug('Found existing PR');\n  }\n  config.upgrades = [];\n\n  if (config.artifactErrors?.length) {\n    logger.debug('Forcing PR because of artifact errors');\n    config.forcePr = true;\n  }\n\n  // Only create a PR if a branch automerge has failed\n  if (\n    config.automerge === true &&\n    config.automergeType?.startsWith('branch') &&\n    !config.forcePr\n  ) {\n    logger.debug(`Branch automerge is enabled`);\n    if (\n      config.stabilityStatus !== BranchStatus.yellow &&\n      (await getBranchStatus()) === BranchStatus.yellow &&\n      is.number(config.prNotPendingHours)\n    ) {\n      logger.debug('Checking how long this branch has been pending');\n      const lastCommitTime = await getBranchLastCommitTime(branchName);\n      const currentTime = new Date();\n      const millisecondsPerHour = 1000 * 60 * 60;\n      const elapsedHours = Math.round(\n        (currentTime.getTime() - lastCommitTime.getTime()) / millisecondsPerHour\n      );\n      if (elapsedHours >= config.prNotPendingHours) {\n        logger.debug('Branch exceeds prNotPending hours - forcing PR creation');\n        config.forcePr = true;\n      }\n    }\n    if (config.forcePr || (await getBranchStatus()) === BranchStatus.red) {\n      logger.debug(`Branch tests failed, so will create PR`);\n    } else {\n      // Branch should be automerged, so we don't want to create a PR\n      return { type: 'without-pr', prBlockedBy: 'BranchAutomerge' };\n    }\n  }\n  if (config.prCreation === 'status-success') {\n    logger.debug('Checking branch combined status');\n    if ((await getBranchStatus()) !== BranchStatus.green) {\n      logger.debug(`Branch status isn't green - not creating PR`);\n      return { type: 'without-pr', prBlockedBy: 'AwaitingTests' };\n    }\n    logger.debug('Branch status success');\n  } else if (\n    config.prCreation === 'approval' &&\n    !existingPr &&\n    dependencyDashboardCheck !== 'approvePr'\n  ) {\n    return { type: 'without-pr', prBlockedBy: 'NeedsApproval' };\n  } else if (\n    config.prCreation === 'not-pending' &&\n    !existingPr &&\n    !config.forcePr\n  ) {\n    logger.debug('Checking branch combined status');\n    if ((await getBranchStatus()) === BranchStatus.yellow) {\n      logger.debug(`Branch status is yellow - checking timeout`);\n      const lastCommitTime = await getBranchLastCommitTime(branchName);\n      const currentTime = new Date();\n      const millisecondsPerHour = 1000 * 60 * 60;\n      const elapsedHours = Math.round(\n        (currentTime.getTime() - lastCommitTime.getTime()) / millisecondsPerHour\n      );\n      if (\n        !dependencyDashboardCheck &&\n        ((config.stabilityStatus &&\n          config.stabilityStatus !== BranchStatus.yellow) ||\n          (is.number(config.prNotPendingHours) &&\n            elapsedHours < config.prNotPendingHours))\n      ) {\n        logger.debug(\n          `Branch is ${elapsedHours} hours old - skipping PR creation`\n        );\n        return {\n          type: 'without-pr',\n          prBlockedBy: 'AwaitingTests',\n        };\n      }\n      const prNotPendingHours = String(config.prNotPendingHours);\n      logger.debug(\n        `prNotPendingHours=${prNotPendingHours} threshold hit - creating PR`\n      );\n    }\n    logger.debug('Branch status success');\n  }\n\n  const processedUpgrades: string[] = [];\n  const commitRepos: string[] = [];\n\n  function getRepoNameWithSourceDirectory(\n    upgrade: BranchUpgradeConfig\n  ): string {\n    // TODO: types (#7154)\n    return `${upgrade.repoName!}${\n      upgrade.sourceDirectory ? `:${upgrade.sourceDirectory}` : ''\n    }`;\n  }\n\n  // Get changelog and then generate template strings\n  for (const upgrade of upgrades) {\n    // TODO: types (#7154)\n    const upgradeKey = `${upgrade.depType!}-${upgrade.depName!}-${\n      upgrade.manager\n    }-${\n      upgrade.currentVersion ?? upgrade.currentValue!\n    }-${upgrade.newVersion!}`;\n    if (processedUpgrades.includes(upgradeKey)) {\n      continue;\n    }\n    processedUpgrades.push(upgradeKey);\n\n    const logJSON = upgrade.logJSON;\n\n    if (logJSON) {\n      if (typeof logJSON.error === 'undefined') {\n        if (logJSON.project) {\n          upgrade.repoName = logJSON.project.repository;\n        }\n        upgrade.hasReleaseNotes = false;\n        upgrade.releases = [];\n        if (\n          logJSON.hasReleaseNotes &&\n          upgrade.repoName &&\n          !commitRepos.includes(getRepoNameWithSourceDirectory(upgrade))\n        ) {\n          commitRepos.push(getRepoNameWithSourceDirectory(upgrade));\n          upgrade.hasReleaseNotes = logJSON.hasReleaseNotes;\n          if (logJSON.versions) {\n            for (const version of logJSON.versions) {\n              const release = { ...version };\n              upgrade.releases.push(release);\n            }\n          }\n        }\n      } else if (logJSON.error === ChangeLogError.MissingGithubToken) {\n        upgrade.prBodyNotes ??= [];\n        upgrade.prBodyNotes = [\n          ...upgrade.prBodyNotes,\n          [\n            '\\n',\n            ':warning: Release Notes retrieval for this PR were skipped because no github.com credentials were available.',\n            'If you are self-hosted, please see [this instruction](https://github.com/renovatebot/renovate/blob/master/docs/usage/examples/self-hosting.md#githubcom-token-for-release-notes).',\n            '\\n',\n          ].join('\\n'),\n        ];\n      }\n    }\n    config.upgrades.push(upgrade);\n  }\n\n  config.hasReleaseNotes = config.upgrades.some((upg) => upg.hasReleaseNotes);\n\n  const releaseNotesSources: string[] = [];\n  for (const upgrade of config.upgrades) {\n    let notesSourceUrl = upgrade.releases?.[0]?.releaseNotes?.notesSourceUrl;\n    if (!notesSourceUrl) {\n      // TODO: types (#7154)\n      notesSourceUrl = `${upgrade.sourceUrl!}${\n        upgrade.sourceDirectory ? `:${upgrade.sourceDirectory}` : ''\n      }`;\n    }\n\n    if (upgrade.hasReleaseNotes && notesSourceUrl) {\n      if (releaseNotesSources.includes(notesSourceUrl)) {\n        logger.debug(\n          { depName: upgrade.depName },\n          'Removing duplicate release notes'\n        );\n        upgrade.hasReleaseNotes = false;\n      } else {\n        releaseNotesSources.push(notesSourceUrl);\n      }\n    }\n  }\n\n  const prBody = await getPrBody(config, {\n    debugData: updatePrDebugData(existingPr?.bodyStruct?.debugData),\n  });\n\n  try {\n    if (existingPr) {\n      logger.debug('Processing existing PR');\n      if (\n        !existingPr.hasAssignees &&\n        !existingPr.hasReviewers &&\n        config.automerge &&\n        !config.assignAutomerge &&\n        (await getBranchStatus()) === BranchStatus.red\n      ) {\n        logger.debug(`Setting assignees and reviewers as status checks failed`);\n        await addParticipants(config, existingPr);\n      }\n      // Check if existing PR needs updating\n      const existingPrTitle = stripEmojis(existingPr.title);\n      const existingPrBodyHash = existingPr.bodyStruct?.hash;\n      const newPrTitle = stripEmojis(prTitle);\n      const newPrBodyHash = hashBody(prBody);\n      if (\n        existingPrTitle === newPrTitle &&\n        existingPrBodyHash === newPrBodyHash\n      ) {\n        // TODO: types (#7154)\n        logger.debug(`${existingPr.displayNumber!} does not need updating`);\n        return { type: 'with-pr', pr: existingPr };\n      }\n      // PR must need updating\n      if (existingPrTitle !== newPrTitle) {\n        logger.debug(\n          {\n            branchName,\n            oldPrTitle: existingPr.title,\n            newPrTitle: prTitle,\n          },\n          'PR title changed'\n        );\n      } else if (!config.committedFiles && !config.rebaseRequested) {\n        logger.debug(\n          {\n            prTitle,\n          },\n          'PR body changed'\n        );\n      }\n      if (GlobalConfig.get('dryRun')) {\n        logger.info(`DRY-RUN: Would update PR #${existingPr.number}`);\n      } else {\n        await platform.updatePr({\n          number: existingPr.number,\n          prTitle,\n          prBody,\n          platformOptions: getPlatformPrOptions(config),\n        });\n        logger.info({ pr: existingPr.number, prTitle }, `PR updated`);\n      }\n      return { type: 'with-pr', pr: existingPr };\n    }\n    logger.debug({ branch: branchName, prTitle }, `Creating PR`);\n    if (config.updateType === 'rollback') {\n      logger.info('Creating Rollback PR');\n    }\n    let pr: Pr | null;\n    if (GlobalConfig.get('dryRun')) {\n      logger.info('DRY-RUN: Would create PR: ' + prTitle);\n      pr = { number: 0, displayNumber: 'Dry run PR' } as never;\n    } else {\n      try {\n        if (\n          !dependencyDashboardCheck &&\n          isLimitReached(Limit.PullRequests) &&\n          !config.isVulnerabilityAlert\n        ) {\n          logger.debug('Skipping PR - limit reached');\n          return { type: 'without-pr', prBlockedBy: 'RateLimited' };\n        }\n        pr = await platform.createPr({\n          sourceBranch: branchName,\n          targetBranch: config.baseBranch ?? '',\n          prTitle,\n          prBody,\n          labels: prepareLabels(config),\n          platformOptions: getPlatformPrOptions(config),\n          draftPR: config.draftPR,\n        });\n\n        incLimitedValue(Limit.PullRequests);\n        logger.info({ pr: pr?.number, prTitle }, 'PR created');\n      } catch (err) {\n        logger.debug({ err }, 'Pull request creation error');\n        if (\n          err.body?.message === 'Validation failed' &&\n          err.body.errors?.length &&\n          err.body.errors.some((error: { message?: string }) =>\n            error.message?.startsWith('A pull request already exists')\n          )\n        ) {\n          logger.warn('A pull requests already exists');\n          return { type: 'without-pr', prBlockedBy: 'Error' };\n        }\n        if (err.statusCode === 502) {\n          logger.warn(\n            { branch: branchName },\n            'Deleting branch due to server error'\n          );\n          await deleteBranch(branchName);\n        }\n        return { type: 'without-pr', prBlockedBy: 'Error' };\n      }\n    }\n    if (\n      pr &&\n      config.branchAutomergeFailureMessage &&\n      !config.suppressNotifications?.includes('branchAutomergeFailure')\n    ) {\n      const topic = 'Branch automerge failure';\n      let content =\n        'This PR was configured for branch automerge, however this is not possible so it has been raised as a PR instead.';\n      if (config.branchAutomergeFailureMessage === 'branch status error') {\n        content += '\\n___\\n * Branch has one or more failed status checks';\n      }\n      content = platform.massageMarkdown(content);\n      logger.debug('Adding branch automerge failure message to PR');\n      if (GlobalConfig.get('dryRun')) {\n        logger.info(`DRY-RUN: Would add comment to PR #${pr.number}`);\n      } else {\n        await ensureComment({\n          number: pr.number,\n          topic,\n          content,\n        });\n      }\n    }\n    // Skip assign and review if automerging PR\n    if (pr) {\n      if (\n        config.automerge &&\n        !config.assignAutomerge &&\n        (await getBranchStatus()) !== BranchStatus.red\n      ) {\n        logger.debug(\n          `Skipping assignees and reviewers as automerge=${config.automerge}`\n        );\n      } else {\n        await addParticipants(config, pr);\n      }\n      // TODO: types (#7154)\n      logger.debug(`Created ${pr.displayNumber!}`);\n      return { type: 'with-pr', pr };\n    }\n  } catch (err) {\n    if (\n      err instanceof ExternalHostError ||\n      err.message === REPOSITORY_CHANGED ||\n      err.message === PLATFORM_RATE_LIMIT_EXCEEDED ||\n      err.message === PLATFORM_INTEGRATION_UNAUTHORIZED\n    ) {\n      logger.debug('Passing error up');\n      throw err;\n    }\n    logger.error({ err }, 'Failed to ensure PR: ' + prTitle);\n  }\n  if (existingPr) {\n    return { type: 'with-pr', pr: existingPr };\n  }\n  return { type: 'without-pr', prBlockedBy: 'Error' };\n}\n"]}