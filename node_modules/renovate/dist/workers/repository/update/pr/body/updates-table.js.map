{"version":3,"file":"updates-table.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/body/updates-table.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../../../logger';\nimport { regEx } from '../../../../../util/regex';\nimport * as template from '../../../../../util/template';\nimport type { BranchConfig, BranchUpgradeConfig } from '../../../../types';\n\ntype TableDefinition = {\n  header: string;\n  value: string | undefined;\n};\n\nfunction getRowDefinition(\n  prBodyColumns: string[],\n  upgrade: BranchUpgradeConfig\n): TableDefinition[] {\n  const res: TableDefinition[] = [];\n  if (upgrade.prBodyDefinitions) {\n    for (const header of prBodyColumns) {\n      const value = upgrade.prBodyDefinitions[header];\n      res.push({ header, value });\n    }\n  }\n  return res;\n}\n\nfunction getNonEmptyColumns(\n  prBodyColumns: string[],\n  rows: Record<string, string>[]\n): string[] {\n  const res: string[] = [];\n  for (const header of prBodyColumns) {\n    for (const row of rows) {\n      if (row[header]?.length) {\n        if (!res.includes(header)) {\n          res.push(header);\n        }\n      }\n    }\n  }\n  return res;\n}\n\nexport function getPrUpdatesTable(config: BranchConfig): string {\n  if (config.prBodyColumns === undefined) {\n    logger.warn('getPrUpdatesTable - prBodyColumns is undefined');\n    return '';\n  }\n  const tableValues = config.upgrades\n    .filter((upgrade) => upgrade !== undefined)\n    .map((upgrade) => {\n      const res: Record<string, string> = {};\n      const rowDefinition = getRowDefinition(\n        config.prBodyColumns ?? [],\n        upgrade\n      );\n      for (const column of rowDefinition) {\n        const { header, value } = column;\n        try {\n          // istanbul ignore else\n          if (value) {\n            res[header] = template\n              .compile(value, upgrade)\n              .replace(regEx(/``/g), '');\n          } else {\n            res[header] = '';\n          }\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn({ header, value, err }, 'Handlebars compilation error');\n        }\n      }\n      return res;\n    });\n  const tableColumns = getNonEmptyColumns(config.prBodyColumns, tableValues);\n  let res = '\\n\\nThis PR contains the following updates:\\n\\n';\n  res += '| ' + tableColumns.join(' | ') + ' |\\n';\n  res += '|' + tableColumns.map(() => '---|').join('') + '\\n';\n  const rows = [];\n  for (const row of tableValues) {\n    let val = '|';\n    for (const column of tableColumns) {\n      const content = row[column]\n        ? row[column]\n            .replace(regEx(/^@/), '@&#8203;')\n            .replace(regEx(/\\|/g), '\\\\|')\n        : '';\n      val += ` ${content} |`;\n    }\n    val += '\\n';\n    rows.push(val);\n  }\n  const uniqueRows = [...new Set(rows)];\n  res += uniqueRows.join('');\n  res += '\\n\\n';\n  return res;\n}\n"]}