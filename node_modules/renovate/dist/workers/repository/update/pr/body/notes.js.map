{"version":3,"file":"notes.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/body/notes.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,kDAA+C;AAC/C,qDAAoD;AACpD,+EAAyD;AAGzD,SAAgB,UAAU,CAAC,MAAoB;IAC7C,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,QAAQ,EAAE;QACrC,IAAI,YAAE,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;YACzC,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,WAAW,EAAE;gBACtC,IAAI;oBACF,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;oBACnD,IAAI,GAAG,EAAE,MAAM,EAAE;wBACf,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBACjB;iBACF;gBAAC,OAAO,GAAG,EAAE;oBACZ,eAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,8BAA8B,CAAC,CAAC;iBACvD;aACF;SACF;KACF;IACD,MAAM,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACxC,OAAO,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;AAC3C,CAAC;AAlBD,gCAkBC;AAED,SAAgB,eAAe,CAAC,MAAoB;IAClD,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACrD,GAAG,IAAI,IAAA,eAAO,EACZ,wHAAwH,CACzH,CAAC;KACH;IAED,IAAI,MAAM,CAAC,UAAU,KAAK,qBAAqB,EAAE;QAC/C,GAAG,IAAI,IAAA,eAAO,EACZ,0FAA0F,CAC3F,CAAC;KACH;IAED,IAAI,MAAM,CAAC,KAAK,EAAE;QAChB,GAAG,IAAI,IAAA,eAAO,EACZ,yGAAyG,CAC1G,CAAC;KACH;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AArBD,0CAqBC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../../logger';\nimport { emojify } from '../../../../../util/emoji';\nimport * as template from '../../../../../util/template';\nimport type { BranchConfig } from '../../../../types';\n\nexport function getPrNotes(config: BranchConfig): string {\n  const notes = [];\n  for (const upgrade of config.upgrades) {\n    if (is.nonEmptyArray(upgrade.prBodyNotes)) {\n      for (const note of upgrade.prBodyNotes) {\n        try {\n          const res = template.compile(note, upgrade).trim();\n          if (res?.length) {\n            notes.push(res);\n          }\n        } catch (err) {\n          logger.warn({ note }, 'Error compiling upgrade note');\n        }\n      }\n    }\n  }\n  const uniqueNotes = [...new Set(notes)];\n  return uniqueNotes.join('\\n\\n') + '\\n\\n';\n}\n\nexport function getPrExtraNotes(config: BranchConfig): string {\n  let res = '';\n  if (config.upgrades.some((upgrade) => upgrade.gitRef)) {\n    res += emojify(\n      ':abcd: If you wish to disable git hash updates, add `\":disableDigestUpdates\"` to the extends array in your config.\\n\\n'\n    );\n  }\n\n  if (config.updateType === 'lockFileMaintenance') {\n    res += emojify(\n      ':wrench: This Pull Request updates lock files to use the latest dependency versions.\\n\\n'\n    );\n  }\n\n  if (config.isPin) {\n    res += emojify(\n      `Add the preset \\`:preserveSemverRanges\\` to your config if you don't want to pin your dependencies.\\n\\n`\n    );\n  }\n\n  return res;\n}\n"]}