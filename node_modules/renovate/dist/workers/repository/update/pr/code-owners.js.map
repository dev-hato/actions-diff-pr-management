{"version":3,"file":"code-owners.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/pr/code-owners.ts"],"names":[],"mappings":";;;;AAAA,4DAA4B;AAC5B,+CAA4C;AAE5C,4CAAoD;AACpD,8CAAsD;AACtD,kDAA6D;AAEtD,KAAK,UAAU,eAAe,CAAC,EAAM;IAC1C,eAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAC9C,IAAI;QACF,MAAM,cAAc,GAClB,CAAC,MAAM,IAAA,kBAAa,EAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAC3C,CAAC,MAAM,IAAA,kBAAa,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC,MAAM,IAAA,kBAAa,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC,MAAM,IAAA,kBAAa,EAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,cAAc,EAAE;YACnB,eAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;YACzC,OAAO,EAAE,CAAC;SACX;QAED,eAAM,CAAC,KAAK,CAAC,0BAA0B,cAAc,EAAE,CAAC,CAAC;QAEzD,MAAM,OAAO,GAAG,MAAM,IAAA,oBAAc,EAAC,EAAE,CAAC,YAAY,CAAC,CAAC;QACtD,MAAM,KAAK,GAAG,cAAc;aACzB,KAAK,CAAC,oBAAY,CAAC;aACnB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;aAC1B,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aAC/C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACZ,MAAM,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,CAAC,CAAC;YACzD,OAAO;gBACL,SAAS;gBACT,KAAK,EAAE,CAAC,IAAY,EAAE,EAAE;oBACtB,MAAM,OAAO,GAAG,IAAA,gBAAM,GAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACtC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC/B,CAAC;aACF,CAAC;QACJ,CAAC,CAAC;aACD,OAAO,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CACV,EAAE,OAAO,EAAE,KAAK,EAAE,EAClB,4CAA4C,CAC7C,CAAC;QACF,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,YAAY,EAAE;YACjB,eAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;YAClD,OAAO,EAAE,CAAC;SACX;QACD,eAAM,CAAC,KAAK,CACV,+CAA+C,IAAI,CAAC,SAAS,CAC3D,YAAY,CAAC,SAAS,CACvB,EAAE,CACJ,CAAC;QACF,OAAO,YAAY,CAAC,SAAS,CAAC;KAC/B;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,wCAAwC,CAAC,CAAC;QACnE,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAnDD,0CAmDC","sourcesContent":["import ignore from 'ignore';\nimport { logger } from '../../../../logger';\nimport type { Pr } from '../../../../modules/platform';\nimport { readLocalFile } from '../../../../util/fs';\nimport { getBranchFiles } from '../../../../util/git';\nimport { newlineRegex, regEx } from '../../../../util/regex';\n\nexport async function codeOwnersForPr(pr: Pr): Promise<string[]> {\n  logger.debug('Searching for CODEOWNERS file');\n  try {\n    const codeOwnersFile =\n      (await readLocalFile('CODEOWNERS', 'utf8')) ??\n      (await readLocalFile('.github/CODEOWNERS', 'utf8')) ??\n      (await readLocalFile('.gitlab/CODEOWNERS', 'utf8')) ??\n      (await readLocalFile('docs/CODEOWNERS', 'utf8'));\n\n    if (!codeOwnersFile) {\n      logger.debug('No CODEOWNERS file found');\n      return [];\n    }\n\n    logger.debug(`Found CODEOWNERS file: ${codeOwnersFile}`);\n\n    const prFiles = await getBranchFiles(pr.sourceBranch);\n    const rules = codeOwnersFile\n      .split(newlineRegex)\n      .map((line) => line.trim())\n      .filter((line) => line && !line.startsWith('#'))\n      .map((line) => {\n        const [pattern, ...usernames] = line.split(regEx(/\\s+/));\n        return {\n          usernames,\n          match: (path: string) => {\n            const matcher = ignore().add(pattern);\n            return matcher.ignores(path);\n          },\n        };\n      })\n      .reverse();\n    logger.debug(\n      { prFiles, rules },\n      'PR files and rules to match for CODEOWNERS'\n    );\n    const matchingRule = rules.find((rule) => prFiles?.every(rule.match));\n    if (!matchingRule) {\n      logger.debug('No matching CODEOWNERS rule found');\n      return [];\n    }\n    logger.debug(\n      `CODEOWNERS matched the following usernames: ${JSON.stringify(\n        matchingRule.usernames\n      )}`\n    );\n    return matchingRule.usernames;\n  } catch (err) {\n    logger.warn({ err, pr }, 'Failed to determine CODEOWNERS for PR.');\n    return [];\n  }\n}\n"]}