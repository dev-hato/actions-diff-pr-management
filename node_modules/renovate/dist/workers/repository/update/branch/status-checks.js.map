{"version":3,"file":"status-checks.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/branch/status-checks.ts"],"names":[],"mappings":";;;AACA,+CAA4C;AAC5C,2DAAwD;AACxD,6CAAiD;AACjD,wEAG2C;AAEpC,KAAK,UAAU,mBAAmB,CACvC,UAAkB,EAClB,WAAW,GAAG,KAAK;IAEnB,eAAM,CAAC,KAAK,CACV,kCAAkC,UAAU,iBAAiB,WAAW,GAAG,CAC5E,CAAC;IAEF,IAAI,WAAW,EAAE;QACf,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAC3C,OAAO,oBAAY,CAAC,KAAK,CAAC;KAC3B;IAED,MAAM,MAAM,GAAG,MAAM,mBAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IAC1D,eAAM,CAAC,KAAK,CAAC,iBAAiB,MAAM,EAAE,CAAC,CAAC;IAExC,OAAO,MAAM,CAAC;AAChB,CAAC;AAjBD,kDAiBC;AAED,KAAK,UAAU,cAAc,CAC3B,UAAkB,EAClB,OAAe,EACf,WAAmB,EACnB,KAAmB,EACnB,GAAY;IAEZ,MAAM,aAAa,GAAG,MAAM,mBAAQ,CAAC,oBAAoB,CACvD,UAAU,EACV,OAAO,CACR,CAAC;IACF,IAAI,aAAa,KAAK,KAAK,EAAE;QAC3B,eAAM,CAAC,KAAK,CAAC,gBAAgB,OAAO,wBAAwB,CAAC,CAAC;KAC/D;SAAM;QACL,eAAM,CAAC,KAAK,CAAC,YAAY,OAAO,0BAA0B,KAAK,EAAE,CAAC,CAAC;QACnE,MAAM,mBAAQ,CAAC,eAAe,CAAC;YAC7B,UAAU;YACV,OAAO;YACP,WAAW;YACX,KAAK;YACL,GAAG;SACJ,CAAC,CAAC;KACJ;AACH,CAAC;AAOM,KAAK,UAAU,YAAY,CAAC,MAAuB;IACxD,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE;QAC3B,OAAO;KACR;IACD,MAAM,OAAO,GAAG,yBAAyB,CAAC;IAC1C,MAAM,WAAW,GACf,MAAM,CAAC,eAAe,KAAK,oBAAY,CAAC,KAAK;QAC3C,CAAC,CAAC,6CAA6C;QAC/C,CAAC,CAAC,iDAAiD,CAAC;IACxD,MAAM,cAAc,CAClB,MAAM,CAAC,UAAU,EACjB,OAAO,EACP,WAAW,EACX,MAAM,CAAC,eAAe,EACtB,MAAM,CAAC,YAAY,EAAE,aAAa,CACnC,CAAC;AACJ,CAAC;AAhBD,oCAgBC;AAOM,KAAK,UAAU,aAAa,CAAC,MAAwB;IAC1D,IACE,CAAC,MAAM,CAAC,UAAU;QAClB,CAAC,MAAM,CAAC,gBAAgB;QACxB,CAAC,MAAM,CAAC,iBAAiB;YACvB,CAAC,IAAA,0CAAuB,EAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,EACrD;QACA,OAAO;KACR;IACD,MAAM,OAAO,GAAG,2BAA2B,CAAC;IAC5C,MAAM,WAAW,GACf,MAAM,CAAC,gBAAgB,KAAK,oBAAY,CAAC,KAAK;QAC5C,CAAC,CAAC,+CAA+C;QACjD,CAAC,CAAC,mDAAmD,CAAC;IAC1D,MAAM,cAAc,CAClB,MAAM,CAAC,UAAU,EACjB,OAAO,EACP,WAAW,EACX,MAAM,CAAC,gBAAgB,EACvB,MAAM,CAAC,YAAY,EAAE,aAAa,CACnC,CAAC;AACJ,CAAC;AArBD,sCAqBC","sourcesContent":["import type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { platform } from '../../../../modules/platform';\nimport { BranchStatus } from '../../../../types';\nimport {\n  MergeConfidence,\n  isActiveConfidenceLevel,\n} from '../../../../util/merge-confidence';\n\nexport async function resolveBranchStatus(\n  branchName: string,\n  ignoreTests = false\n): Promise<BranchStatus> {\n  logger.debug(\n    `resolveBranchStatus(branchName=${branchName}, ignoreTests=${ignoreTests})`\n  );\n\n  if (ignoreTests) {\n    logger.debug('Ignore tests. Return green');\n    return BranchStatus.green;\n  }\n\n  const status = await platform.getBranchStatus(branchName);\n  logger.debug(`Branch status ${status}`);\n\n  return status;\n}\n\nasync function setStatusCheck(\n  branchName: string,\n  context: string,\n  description: string,\n  state: BranchStatus,\n  url?: string\n): Promise<void> {\n  const existingState = await platform.getBranchStatusCheck(\n    branchName,\n    context\n  );\n  if (existingState === state) {\n    logger.debug(`Status check ${context} is already up-to-date`);\n  } else {\n    logger.debug(`Updating ${context} status check state to ${state}`);\n    await platform.setBranchStatus({\n      branchName,\n      context,\n      description,\n      state,\n      url,\n    });\n  }\n}\n\nexport interface StabilityConfig extends RenovateConfig {\n  stabilityStatus?: BranchStatus;\n  branchName: string;\n}\n\nexport async function setStability(config: StabilityConfig): Promise<void> {\n  if (!config.stabilityStatus) {\n    return;\n  }\n  const context = `renovate/stability-days`;\n  const description =\n    config.stabilityStatus === BranchStatus.green\n      ? 'Updates have met stability days requirement'\n      : 'Updates have not met stability days requirement';\n  await setStatusCheck(\n    config.branchName,\n    context,\n    description,\n    config.stabilityStatus,\n    config.productLinks?.documentation\n  );\n}\n\nexport interface ConfidenceConfig extends RenovateConfig {\n  confidenceStatus?: BranchStatus;\n  minimumConfidence?: MergeConfidence;\n}\n\nexport async function setConfidence(config: ConfidenceConfig): Promise<void> {\n  if (\n    !config.branchName ||\n    !config.confidenceStatus ||\n    (config.minimumConfidence &&\n      !isActiveConfidenceLevel(config.minimumConfidence))\n  ) {\n    return;\n  }\n  const context = `renovate/merge-confidence`;\n  const description =\n    config.confidenceStatus === BranchStatus.green\n      ? 'Updates have met Merge Confidence requirement'\n      : 'Updates have not met Merge Confidence requirement';\n  await setStatusCheck(\n    config.branchName,\n    context,\n    description,\n    config.confidenceStatus,\n    config.productLinks?.documentation\n  );\n}\n"]}