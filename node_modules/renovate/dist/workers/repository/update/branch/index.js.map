{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/branch/index.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #7154\nimport is from '@sindresorhus/is';\nimport { DateTime } from 'luxon';\nimport { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport {\n  CONFIG_VALIDATION,\n  MANAGER_LOCKFILE_ERROR,\n  PLATFORM_AUTHENTICATION_ERROR,\n  PLATFORM_BAD_CREDENTIALS,\n  PLATFORM_INTEGRATION_UNAUTHORIZED,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n  REPOSITORY_CHANGED,\n  SYSTEM_INSUFFICIENT_DISK_SPACE,\n  TEMPORARY_ERROR,\n  WORKER_FILE_UPDATE_FAILED,\n} from '../../../../constants/error-messages';\nimport { logger, removeMeta } from '../../../../logger';\nimport { getAdditionalFiles } from '../../../../modules/manager/npm/post-update';\nimport { Pr, platform } from '../../../../modules/platform';\nimport {\n  ensureComment,\n  ensureCommentRemoval,\n} from '../../../../modules/platform/comment';\nimport { hashBody } from '../../../../modules/platform/pr-body';\nimport { BranchStatus, PrState } from '../../../../types';\nimport { ExternalHostError } from '../../../../types/errors/external-host-error';\nimport { getElapsedDays } from '../../../../util/date';\nimport { emojify } from '../../../../util/emoji';\nimport {\n  checkoutBranch,\n  deleteBranch,\n  getBranchCommit,\n  branchExists as gitBranchExists,\n  isBranchConflicted,\n  isBranchModified,\n} from '../../../../util/git';\nimport {\n  getMergeConfidenceLevel,\n  isActiveConfidenceLevel,\n  satisfiesConfidenceLevel,\n} from '../../../../util/merge-confidence';\nimport { Limit, isLimitReached } from '../../../global/limits';\nimport { BranchConfig, BranchResult, PrBlockedBy } from '../../../types';\nimport { ensurePr, getPlatformPrOptions, updatePrDebugData } from '../pr';\nimport { checkAutoMerge } from '../pr/automerge';\nimport { getPrBody } from '../pr/body';\nimport { setArtifactErrorStatus } from './artifacts';\nimport { tryBranchAutomerge } from './automerge';\nimport { prAlreadyExisted } from './check-existing';\nimport { commitFilesToBranch } from './commit';\nimport executePostUpgradeCommands from './execute-post-upgrade-commands';\nimport { getUpdatedPackageFiles } from './get-updated';\nimport { handlepr } from './handle-existing';\nimport { shouldReuseExistingBranch } from './reuse';\nimport { isScheduledNow } from './schedule';\nimport { setConfidence, setStability } from './status-checks';\n\nfunction rebaseCheck(config: RenovateConfig, branchPr: Pr): boolean {\n  const titleRebase = branchPr.title?.startsWith('rebase!');\n  const labelRebase = !!branchPr.labels?.includes(config.rebaseLabel!);\n  const prRebaseChecked = !!branchPr.bodyStruct?.rebaseRequested;\n\n  return titleRebase || labelRebase || prRebaseChecked;\n}\n\nasync function deleteBranchSilently(branchName: string): Promise<void> {\n  try {\n    await deleteBranch(branchName);\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ branchName, err }, 'Branch auto-remove failed');\n  }\n}\n\nexport interface ProcessBranchResult {\n  branchExists: boolean;\n  prBlockedBy?: PrBlockedBy;\n  prNo?: number;\n  result: BranchResult;\n}\n\nexport async function processBranch(\n  branchConfig: BranchConfig\n): Promise<ProcessBranchResult> {\n  let config: BranchConfig = { ...branchConfig };\n  logger.trace({ config }, 'processBranch()');\n  let branchExists = gitBranchExists(config.branchName);\n  if (!branchExists && config.branchPrefix !== config.branchPrefixOld) {\n    const branchName = config.branchName.replace(\n      config.branchPrefix!,\n      config.branchPrefixOld!\n    );\n    branchExists = gitBranchExists(branchName);\n    if (branchExists) {\n      config.branchName = branchName;\n      logger.debug('Found existing branch with branchPrefixOld');\n    }\n  }\n\n  let branchPr = await platform.getBranchPr(config.branchName);\n  logger.debug(`branchExists=${branchExists}`);\n  const dependencyDashboardCheck =\n    config.dependencyDashboardChecks?.[config.branchName];\n  logger.debug(`dependencyDashboardCheck=${dependencyDashboardCheck!}`);\n  if (branchPr) {\n    config.rebaseRequested = rebaseCheck(config, branchPr);\n    logger.debug(`PR rebase requested=${config.rebaseRequested}`);\n  }\n  const artifactErrorTopic = emojify(':warning: Artifact update problem');\n  try {\n    // Check if branch already existed\n    const existingPr = branchPr ? undefined : await prAlreadyExisted(config);\n    if (existingPr && !dependencyDashboardCheck) {\n      logger.debug(\n        { prTitle: config.prTitle },\n        'Closed PR already exists. Skipping branch.'\n      );\n      await handlepr(config, existingPr);\n      return {\n        branchExists: false,\n        prNo: existingPr.number,\n        result: BranchResult.AlreadyExisted,\n      };\n    }\n    // istanbul ignore if\n    if (!branchExists && config.dependencyDashboardApproval) {\n      if (dependencyDashboardCheck) {\n        logger.debug(`Branch ${config.branchName} is approved for creation`);\n      } else {\n        logger.debug(`Branch ${config.branchName} needs approval`);\n        return {\n          branchExists,\n          prNo: branchPr?.number,\n          result: BranchResult.NeedsApproval,\n        };\n      }\n    }\n    if (\n      !branchExists &&\n      isLimitReached(Limit.Branches) &&\n      !dependencyDashboardCheck &&\n      !config.isVulnerabilityAlert\n    ) {\n      logger.debug('Reached branch limit - skipping branch creation');\n      return {\n        branchExists,\n        prNo: branchPr?.number,\n        result: BranchResult.BranchLimitReached,\n      };\n    }\n    if (\n      isLimitReached(Limit.Commits) &&\n      !dependencyDashboardCheck &&\n      !config.isVulnerabilityAlert\n    ) {\n      logger.debug('Reached commits limit - skipping branch');\n      return {\n        branchExists,\n        prNo: branchPr?.number,\n        result: BranchResult.CommitLimitReached,\n      };\n    }\n    if (\n      !branchExists &&\n      branchConfig.pendingChecks &&\n      !dependencyDashboardCheck\n    ) {\n      return {\n        branchExists: false,\n        prNo: branchPr?.number,\n        result: BranchResult.Pending,\n      };\n    }\n    if (branchExists) {\n      logger.debug('Checking if PR has been edited');\n      const branchIsModified = await isBranchModified(config.branchName);\n      if (branchPr) {\n        logger.debug('Found existing branch PR');\n        if (branchPr.state !== PrState.Open) {\n          logger.debug(\n            'PR has been closed or merged since this run started - aborting'\n          );\n          throw new Error(REPOSITORY_CHANGED);\n        }\n        if (\n          branchIsModified ||\n          (branchPr.targetBranch &&\n            branchPr.targetBranch !== branchConfig.baseBranch)\n        ) {\n          logger.debug({ prNo: branchPr.number }, 'PR has been edited');\n          if (dependencyDashboardCheck || config.rebaseRequested) {\n            logger.debug('Manual rebase has been requested for PR');\n          } else {\n            const newBody = await getPrBody(branchConfig, {\n              debugData: updatePrDebugData(existingPr?.bodyStruct?.debugData),\n              rebasingNotice:\n                'Renovate will not automatically rebase this PR, because other commits have been found.',\n            });\n            const newBodyHash = hashBody(newBody);\n            if (newBodyHash !== branchPr.bodyStruct?.hash) {\n              logger.debug(\n                'Updating existing PR to indicate that rebasing is not possible'\n              );\n              await platform.updatePr({\n                number: branchPr.number,\n                prTitle: branchPr.title,\n                prBody: newBody,\n                platformOptions: getPlatformPrOptions(config),\n              });\n            }\n            return {\n              branchExists,\n              prNo: branchPr.number,\n              result: BranchResult.PrEdited,\n            };\n          }\n        }\n      } else if (branchIsModified) {\n        const oldPr = await platform.findPr({\n          branchName: config.branchName,\n          state: PrState.NotOpen,\n        });\n        if (!oldPr) {\n          logger.debug('Branch has been edited but found no PR - skipping');\n          return {\n            branchExists,\n            result: BranchResult.PrEdited,\n          };\n        }\n        const branchSha = getBranchCommit(config.branchName);\n        const oldPrSha = oldPr?.sha;\n        if (!oldPrSha || oldPrSha === branchSha) {\n          logger.debug(\n            { oldPrNumber: oldPr.number, oldPrSha, branchSha },\n            'Found old PR matching this branch - will override it'\n          );\n        } else {\n          logger.debug(\n            { oldPrNumber: oldPr.number, oldPrSha, branchSha },\n            'Found old PR but the SHA is different'\n          );\n          return {\n            branchExists,\n            result: BranchResult.PrEdited,\n          };\n        }\n      }\n    }\n\n    // Check schedule\n    config.isScheduledNow = isScheduledNow(config, 'schedule');\n    if (!config.isScheduledNow && !dependencyDashboardCheck) {\n      if (!branchExists) {\n        logger.debug('Skipping branch creation as not within schedule');\n        return {\n          branchExists,\n          prNo: branchPr?.number,\n          result: BranchResult.NotScheduled,\n        };\n      }\n      if (config.updateNotScheduled === false && !config.rebaseRequested) {\n        logger.debug('Skipping branch update as not within schedule');\n        return {\n          branchExists,\n          prNo: branchPr?.number,\n          result: BranchResult.UpdateNotScheduled,\n        };\n      }\n      // istanbul ignore if\n      if (!branchPr) {\n        logger.debug('Skipping PR creation out of schedule');\n        return {\n          branchExists,\n          result: BranchResult.NotScheduled,\n        };\n      }\n      logger.debug(\n        'Branch + PR exists but is not scheduled -- will update if necessary'\n      );\n    }\n    await checkoutBranch(config.baseBranch!);\n    //stability checks\n    if (\n      config.upgrades.some(\n        (upgrade) =>\n          (upgrade.stabilityDays && upgrade.releaseTimestamp) ||\n          isActiveConfidenceLevel(upgrade.minimumConfidence!)\n      )\n    ) {\n      // Only set a stability status check if one or more of the updates contain\n      // both a stabilityDays setting and a releaseTimestamp\n      config.stabilityStatus = BranchStatus.green;\n      // Default to 'success' but set 'pending' if any update is pending\n      for (const upgrade of config.upgrades) {\n        if (is.number(upgrade.stabilityDays) && upgrade.releaseTimestamp) {\n          const daysElapsed = getElapsedDays(upgrade.releaseTimestamp);\n          if (daysElapsed < upgrade.stabilityDays) {\n            logger.debug(\n              {\n                depName: upgrade.depName,\n                daysElapsed,\n                stabilityDays: upgrade.stabilityDays,\n              },\n              'Update has not passed stability days'\n            );\n            config.stabilityStatus = BranchStatus.yellow;\n            continue;\n          }\n        }\n        const datasource = upgrade.datasource!;\n        const depName = upgrade.depName!;\n        const minimumConfidence = upgrade.minimumConfidence!;\n        const updateType = upgrade.updateType!;\n        const currentVersion = upgrade.currentVersion!;\n        const newVersion = upgrade.newVersion!;\n        if (isActiveConfidenceLevel(minimumConfidence)) {\n          const confidence = await getMergeConfidenceLevel(\n            datasource,\n            depName,\n            currentVersion,\n            newVersion,\n            updateType\n          );\n          if (satisfiesConfidenceLevel(confidence, minimumConfidence)) {\n            config.confidenceStatus = BranchStatus.green;\n          } else {\n            logger.debug(\n              { depName, confidence, minimumConfidence },\n              'Update does not meet minimum confidence scores'\n            );\n            config.confidenceStatus = BranchStatus.yellow;\n            continue;\n          }\n        }\n      }\n      // Don't create a branch if we know it will be status ProcessBranchResult.Pending\n      if (\n        !dependencyDashboardCheck &&\n        !branchExists &&\n        config.stabilityStatus === BranchStatus.yellow &&\n        ['not-pending', 'status-success'].includes(config.prCreation!)\n      ) {\n        logger.debug(\n          'Skipping branch creation due to internal status checks not met'\n        );\n        return {\n          branchExists,\n          prNo: branchPr?.number,\n          result: BranchResult.Pending,\n        };\n      }\n    }\n\n    const userRebaseRequested =\n      dependencyDashboardCheck === 'rebase' ||\n      !!config.dependencyDashboardRebaseAllOpen ||\n      !!config.rebaseRequested;\n\n    if (userRebaseRequested) {\n      logger.debug('Manual rebase requested via Dependency Dashboard');\n      config.reuseExistingBranch = false;\n    } else if (branchExists && config.rebaseWhen === 'never') {\n      logger.debug('rebaseWhen=never so skipping branch update check');\n      return {\n        branchExists,\n        prNo: branchPr?.number,\n        result: BranchResult.NoWork,\n      };\n    } else {\n      config = { ...config, ...(await shouldReuseExistingBranch(config)) };\n    }\n    // TODO: types (#7154)\n    logger.debug(`Using reuseExistingBranch: ${config.reuseExistingBranch!}`);\n    const res = await getUpdatedPackageFiles(config);\n    // istanbul ignore if\n    if (res.artifactErrors && config.artifactErrors) {\n      res.artifactErrors = config.artifactErrors.concat(res.artifactErrors);\n    }\n    config = { ...config, ...res };\n    if (config.updatedPackageFiles?.length) {\n      logger.debug(\n        `Updated ${config.updatedPackageFiles.length} package files`\n      );\n    } else {\n      logger.debug('No package files need updating');\n    }\n    const additionalFiles = await getAdditionalFiles(\n      config,\n      branchConfig.packageFiles!\n    );\n    config.artifactErrors = (config.artifactErrors ?? []).concat(\n      additionalFiles.artifactErrors\n    );\n    config.updatedArtifacts = (config.updatedArtifacts ?? []).concat(\n      additionalFiles.updatedArtifacts\n    );\n    if (config.updatedArtifacts?.length) {\n      logger.debug(\n        {\n          updatedArtifacts: config.updatedArtifacts.map((f) =>\n            f.type === 'deletion' ? `${f.path} (delete)` : f.path\n          ),\n        },\n        `Updated ${config.updatedArtifacts.length} lock files`\n      );\n    } else {\n      logger.debug('No updated lock files in branch');\n    }\n    const postUpgradeCommandResults = await executePostUpgradeCommands(config);\n\n    if (postUpgradeCommandResults !== null) {\n      const { updatedArtifacts, artifactErrors } = postUpgradeCommandResults;\n      config.updatedArtifacts = updatedArtifacts;\n      config.artifactErrors = artifactErrors;\n    }\n\n    removeMeta(['dep']);\n\n    if (config.artifactErrors?.length) {\n      if (config.releaseTimestamp) {\n        logger.debug(`Branch timestamp: ` + config.releaseTimestamp);\n        const releaseTimestamp = DateTime.fromISO(config.releaseTimestamp);\n        if (releaseTimestamp.plus({ hours: 2 }) < DateTime.local()) {\n          logger.debug(\n            'PR is older than 2 hours, raise PR with lock file errors'\n          );\n        } else if (branchExists) {\n          logger.debug(\n            'PR is less than 2 hours old but branchExists so updating anyway'\n          );\n        } else {\n          logger.debug(\n            'PR is less than 2 hours old - raise error instead of PR'\n          );\n          throw new Error(MANAGER_LOCKFILE_ERROR);\n        }\n      } else {\n        logger.debug('PR has no releaseTimestamp');\n      }\n    } else if (config.updatedArtifacts?.length && branchPr) {\n      // If there are artifacts, no errors, and an existing PR then ensure any artifacts error comment is removed\n      // istanbul ignore if\n      if (GlobalConfig.get('dryRun')) {\n        logger.info(\n          `DRY-RUN: Would ensure comment removal in PR #${branchPr.number}`\n        );\n      } else {\n        // Remove artifacts error comment only if this run has successfully updated artifacts\n        await ensureCommentRemoval({\n          type: 'by-topic',\n          number: branchPr.number,\n          topic: artifactErrorTopic,\n        });\n      }\n    }\n    const forcedManually = userRebaseRequested || !branchExists;\n\n    config.isConflicted ??=\n      branchExists &&\n      (await isBranchConflicted(config.baseBranch!, config.branchName));\n    config.forceCommit = forcedManually || config.isConflicted;\n\n    config.stopUpdating = branchPr?.labels?.includes(config.stopUpdatingLabel!);\n\n    const prRebaseChecked = !!branchPr?.bodyStruct?.rebaseRequested;\n\n    if (branchExists && dependencyDashboardCheck && config.stopUpdating) {\n      if (!prRebaseChecked) {\n        logger.info(\n          'Branch updating is skipped because stopUpdatingLabel is present in config'\n        );\n        return {\n          branchExists: true,\n          prNo: branchPr?.number,\n          result: BranchResult.NoWork,\n        };\n      }\n    }\n\n    const commitSha = await commitFilesToBranch(config);\n    // istanbul ignore if\n    if (branchPr && platform.refreshPr) {\n      await platform.refreshPr(branchPr.number);\n    }\n    if (!commitSha && !branchExists) {\n      return {\n        branchExists,\n        prNo: branchPr?.number,\n        result: BranchResult.NoWork,\n      };\n    }\n    if (commitSha) {\n      const action = branchExists ? 'updated' : 'created';\n      logger.info({ commitSha }, `Branch ${action}`);\n    }\n    // Set branch statuses\n    await setArtifactErrorStatus(config);\n    await setStability(config);\n    await setConfidence(config);\n\n    // break if we pushed a new commit because status check are pretty sure pending but maybe not reported yet\n    // but do not break when there are artifact errors\n    if (\n      !config.artifactErrors?.length &&\n      !userRebaseRequested &&\n      commitSha &&\n      config.prCreation !== 'immediate'\n    ) {\n      logger.debug({ commitSha }, `Branch status pending`);\n      return {\n        branchExists: true,\n        prNo: branchPr?.number,\n        result: BranchResult.Pending,\n      };\n    }\n\n    // Try to automerge branch and finish if successful, but only if branch already existed before this run\n    if (branchExists || config.ignoreTests) {\n      const mergeStatus = await tryBranchAutomerge(config);\n      logger.debug(`mergeStatus=${mergeStatus}`);\n      if (mergeStatus === 'automerged') {\n        if (GlobalConfig.get('dryRun')) {\n          logger.info('DRY-RUN: Would delete branch' + config.branchName);\n        } else {\n          await deleteBranchSilently(config.branchName);\n        }\n        logger.debug('Branch is automerged - returning');\n        return { branchExists: false, result: BranchResult.Automerged };\n      }\n      if (mergeStatus === 'off schedule') {\n        logger.debug(\n          'Branch cannot automerge now because automergeSchedule is off schedule - skipping'\n        );\n        return { branchExists, result: BranchResult.NotScheduled };\n      }\n      if (\n        mergeStatus === 'stale' &&\n        ['conflicted', 'never'].includes(config.rebaseWhen!)\n      ) {\n        logger.warn(\n          'Branch cannot automerge because it is stale and rebaseWhen setting disallows rebasing - raising a PR instead'\n        );\n        config.forcePr = true;\n        config.branchAutomergeFailureMessage = mergeStatus;\n      }\n      if (\n        mergeStatus === 'automerge aborted - PR exists' ||\n        mergeStatus === 'branch status error' ||\n        mergeStatus === 'failed'\n      ) {\n        logger.debug({ mergeStatus }, 'Branch automerge not possible');\n        config.forcePr = true;\n        config.branchAutomergeFailureMessage = mergeStatus;\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug({ err }, 'Received a 404 error - aborting run');\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    if (err.message === PLATFORM_RATE_LIMIT_EXCEEDED) {\n      logger.debug('Passing rate-limit-exceeded error up');\n      throw err;\n    }\n    if (err.message === REPOSITORY_CHANGED) {\n      logger.debug('Passing repository-changed error up');\n      throw err;\n    }\n    if (err.message?.startsWith('remote: Invalid username or password')) {\n      logger.debug('Throwing bad credentials');\n      throw new Error(PLATFORM_BAD_CREDENTIALS);\n    }\n    if (\n      err.message?.startsWith(\n        'ssh_exchange_identification: Connection closed by remote host'\n      )\n    ) {\n      logger.debug('Throwing bad credentials');\n      throw new Error(PLATFORM_BAD_CREDENTIALS);\n    }\n    if (err.message === PLATFORM_BAD_CREDENTIALS) {\n      logger.debug('Passing bad-credentials error up');\n      throw err;\n    }\n    if (err.message === PLATFORM_INTEGRATION_UNAUTHORIZED) {\n      logger.debug('Passing integration-unauthorized error up');\n      throw err;\n    }\n    if (err.message === MANAGER_LOCKFILE_ERROR) {\n      logger.debug('Passing lockfile-error up');\n      throw err;\n    }\n    if (err.message?.includes('space left on device')) {\n      throw new Error(SYSTEM_INSUFFICIENT_DISK_SPACE);\n    }\n    if (err.message === SYSTEM_INSUFFICIENT_DISK_SPACE) {\n      logger.debug('Passing disk-space error up');\n      throw err;\n    }\n    if (err.message.startsWith('Resource not accessible by integration')) {\n      logger.debug('Passing 403 error up');\n      throw err;\n    }\n    if (err.message === WORKER_FILE_UPDATE_FAILED) {\n      logger.warn('Error updating branch: update failure');\n    } else if (err.message.startsWith('bundler-')) {\n      // we have already warned inside the bundler artifacts error handling, so just return\n      return {\n        branchExists: true,\n        prNo: branchPr?.number,\n        result: BranchResult.Error,\n      };\n    } else if (\n      err.messagee &&\n      err.message.includes('fatal: Authentication failed')\n    ) {\n      throw new Error(PLATFORM_AUTHENTICATION_ERROR);\n    } else if (err.message?.includes('fatal: bad revision')) {\n      logger.debug({ err }, 'Aborting job due to bad revision error');\n      throw new Error(REPOSITORY_CHANGED);\n    } else if (err.message === CONFIG_VALIDATION) {\n      logger.debug('Passing config validation error up');\n      throw err;\n    } else if (err.message === TEMPORARY_ERROR) {\n      logger.debug('Passing TEMPORARY_ERROR error up');\n      throw err;\n    } else if (!(err instanceof ExternalHostError)) {\n      logger.warn({ err }, `Error updating branch`);\n    }\n    // Don't throw here - we don't want to stop the other renovations\n    return { branchExists, prNo: branchPr?.number, result: BranchResult.Error };\n  }\n  try {\n    logger.debug('Ensuring PR');\n    logger.debug(\n      `There are ${config.errors!.length} errors and ${\n        config.warnings!.length\n      } warnings`\n    );\n    const ensurePrResult = await ensurePr(config);\n    if (ensurePrResult.type === 'without-pr') {\n      const { prBlockedBy } = ensurePrResult;\n      branchPr = null;\n      if (prBlockedBy === 'RateLimited' && !config.isVulnerabilityAlert) {\n        logger.debug('Reached PR limit - skipping PR creation');\n        return {\n          branchExists,\n          prBlockedBy,\n          result: BranchResult.PrLimitReached,\n        };\n      }\n      // TODO: ensurePr should check for automerge itself (#9719)\n      if (prBlockedBy === 'NeedsApproval') {\n        return {\n          branchExists,\n          prBlockedBy,\n          result: BranchResult.NeedsPrApproval,\n        };\n      }\n      if (prBlockedBy === 'AwaitingTests') {\n        return { branchExists, prBlockedBy, result: BranchResult.Pending };\n      }\n      if (prBlockedBy === 'BranchAutomerge') {\n        return {\n          branchExists,\n          prBlockedBy,\n          result: BranchResult.Done,\n        };\n      }\n      if (prBlockedBy === 'Error') {\n        return { branchExists, prBlockedBy, result: BranchResult.Error };\n      }\n      logger.warn({ prBlockedBy }, 'Unknown PrBlockedBy result');\n      return { branchExists, prBlockedBy, result: BranchResult.Error };\n    }\n    if (ensurePrResult.type === 'with-pr') {\n      const { pr } = ensurePrResult;\n      branchPr = pr;\n      if (config.artifactErrors?.length) {\n        logger.warn(\n          { artifactErrors: config.artifactErrors },\n          'artifactErrors'\n        );\n        let content = `Renovate failed to update `;\n        content +=\n          config.artifactErrors.length > 1 ? 'artifacts' : 'an artifact';\n        content +=\n          ' related to this branch. You probably do not want to merge this PR as-is.';\n        content += emojify(\n          `\\n\\n:recycle: Renovate will retry this branch, including artifacts, only when one of the following happens:\\n\\n`\n        );\n        content +=\n          ' - any of the package files in this branch needs updating, or \\n';\n        content += ' - the branch becomes conflicted, or\\n';\n        content +=\n          ' - you click the rebase/retry checkbox if found above, or\\n';\n        content +=\n          ' - you rename this PR\\'s title to start with \"rebase!\" to trigger it manually';\n        content += '\\n\\nThe artifact failure details are included below:\\n\\n';\n        // TODO: types (#7154)\n        config.artifactErrors.forEach((error) => {\n          content += `##### File name: ${error.lockFile!}\\n\\n`;\n          content += `\\`\\`\\`\\n${error.stderr!}\\n\\`\\`\\`\\n\\n`;\n        });\n        content = platform.massageMarkdown(content);\n        if (\n          !(\n            config.suppressNotifications!.includes('artifactErrors') ||\n            config.suppressNotifications!.includes('lockFileErrors')\n          )\n        ) {\n          if (GlobalConfig.get('dryRun')) {\n            logger.info(\n              `DRY-RUN: Would ensure lock file error comment in PR #${pr.number}`\n            );\n          } else {\n            await ensureComment({\n              number: pr.number,\n              topic: artifactErrorTopic,\n              content,\n            });\n          }\n        }\n      } else if (config.automerge) {\n        logger.debug('PR is configured for automerge');\n        const prAutomergeResult = await checkAutoMerge(pr, config);\n        if (prAutomergeResult?.automerged) {\n          return { branchExists, result: BranchResult.Automerged };\n        }\n      } else {\n        logger.debug('PR is not configured for automerge');\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (\n      err instanceof ExternalHostError ||\n      [PLATFORM_RATE_LIMIT_EXCEEDED, REPOSITORY_CHANGED].includes(err.message)\n    ) {\n      logger.debug('Passing PR error up');\n      throw err;\n    }\n    // Otherwise don't throw here - we don't want to stop the other renovations\n    logger.error({ err }, `Error ensuring PR: ${String(err.message)}`);\n  }\n  if (!branchExists) {\n    return {\n      branchExists: true,\n      prNo: branchPr?.number,\n      result: BranchResult.PrCreated,\n    };\n  }\n  return { branchExists, prNo: branchPr?.number, result: BranchResult.Done };\n}\n"]}