{"version":3,"file":"get-updated.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/branch/get-updated.ts"],"names":[],"mappings":";;;;AAAA,qEAAqE;AACrE,kEAAkC;AAClC,yEAAiF;AACjF,+CAA4C;AAC5C,yDAAkD;AAKlD,8CAA+C;AAG/C,iDAA+C;AASxC,KAAK,UAAU,sBAAsB,CAC1C,MAAoB;IAEpB,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACzB,MAAM,mBAAmB,GAAG,MAAM,CAAC,mBAAoB,CAAC;IACxD,eAAM,CAAC,KAAK,CACV,wDAAwD,mBAAmB,EAAE,CAC9E,CAAC;IACF,IAAI,mBAAmB,GAA2B,EAAE,CAAC;IACrD,MAAM,sBAAsB,GAA2B,EAAE,CAAC;IAC1D,MAAM,mBAAmB,GAA2B,EAAE,CAAC;IACvD,MAAM,sBAAsB,GAAwC,EAAE,CAAC;IACvE,MAAM,wBAAwB,GAAG,EAAE,CAAC;IACpC,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,QAAQ,EAAE;QACrC,MAAM,OAAO,GAAG,OAAO,CAAC,OAAQ,CAAC;QACjC,MAAM,WAAW,GAAG,OAAO,CAAC,WAAY,CAAC;QACzC,MAAM,OAAO,GAAG,OAAO,CAAC,OAAQ,CAAC;QACjC,MAAM,UAAU,GAAG,OAAO,CAAC,UAAW,CAAC;QACvC,MAAM,sBAAsB,GAAG,IAAA,aAAG,EAAC,OAAO,EAAE,wBAAwB,CAAE,CAAC;QACvE,mBAAmB,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC;QAC3C,sBAAsB,CAAC,WAAW,CAAC;YACjC,sBAAsB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QAC5C,sBAAsB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;QACzD,IAAI,kBAAkB,GAAkB,mBAAmB,CAAC,WAAW,CAAC,CAAC;QACzE,IAAI,CAAC,kBAAkB,EAAE;YACvB,kBAAkB,GAAG,MAAM,IAAA,aAAO,EAChC,WAAW,EACX,mBAAmB,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAC5D,CAAC;SACH;QACD,IAAI,eAAe,GAAkB,IAAI,CAAC;QAC1C,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAClE,IAAI,QAAQ,EAAE;YACZ,eAAe,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,CAAC,eAAe,EAAE;gBACpB,eAAe,GAAG,MAAM,IAAA,aAAO,EAC7B,QAAQ,EACR,mBAAmB,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAC5D,CAAC;aACH;SACF;QACD,qBAAqB;QACrB,IACE,mBAAmB;YACnB,CAAC,CAAC,kBAAkB,IAAI,CAAC,QAAQ,IAAI,CAAC,eAAe,CAAC,CAAC,EACvD;YACA,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,OAAO,EAAE,EACxB,sCAAsC,CACvC,CAAC;YACF,OAAO,sBAAsB,CAAC;gBAC5B,GAAG,MAAM;gBACT,mBAAmB,EAAE,KAAK;aAC3B,CAAC,CAAC;SACJ;QACD,IAAI,OAAO,CAAC,UAAU,KAAK,qBAAqB,EAAE;YAChD,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC5C;aAAM,IAAI,OAAO,CAAC,aAAa,EAAE;YAChC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,sBAAsB,CAAC;gBACrD,GAAG,OAAO;gBACV,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,kBAAkB,EAAE,kBAAmB;gBACvC,QAAQ;gBACR,eAAe,EAAE,eAAgB;gBACjC,kBAAkB,EAAE,IAAI;gBACxB,oBAAoB,EAAE,IAAI;aAC3B,CAAC,CAAC;YACH,IAAI,mBAAmB,IAAI,MAAM,KAAK,iBAAiB,EAAE;gBACvD,eAAM,CAAC,KAAK,CACV,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,EAC7B,sDAAsD,CACvD,CAAC;gBACF,OAAO,sBAAsB,CAAC;oBAC5B,GAAG,MAAM;oBACT,mBAAmB,EAAE,KAAK;iBAC3B,CAAC,CAAC;aACJ;YACD,IAAI,KAAK,EAAE;gBACT,mBAAmB,GAAG,EAAE,GAAG,mBAAmB,EAAE,GAAG,KAAK,EAAE,CAAC;aAC5D;YACD,IAAI,MAAM,KAAK,eAAe,IAAI,MAAM,KAAK,aAAa,EAAE;gBAC1D,OAAO,CAAC,sBAAsB,GAAG,IAAI,CAAC;aACvC;SACF;aAAM,IAAI,OAAO,CAAC,gBAAgB,EAAE;YACnC,IAAI,sBAAsB,EAAE;gBAC1B,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,sBAAsB,CAAC;oBACrD,GAAG,OAAO;oBACV,OAAO;oBACP,UAAU;oBACV,WAAW;oBACX,kBAAkB,EAAE,kBAAmB;oBACvC,QAAQ;oBACR,eAAe,EAAE,eAAgB;oBACjC,kBAAkB,EAAE,KAAK;iBAC1B,CAAC,CAAC;gBACH,IAAI,MAAM,KAAK,aAAa,EAAE;oBAC5B,yBAAyB;oBACzB,sBAAsB,CAAC,WAAW,CAAC,GAAG,kBAAmB,CAAC;iBAC3D;qBAAM,IAAI,MAAM,KAAK,iBAAiB,EAAE;oBACvC,eAAM,CAAC,KAAK,CACV,cAAc,OAAO,OAAO,UAAU,qCAAqC,CAC5E,CAAC;iBACH;qBAAM;oBACL,oBAAoB;oBACpB,IAAI,mBAAmB,EAAE;wBACvB,eAAM,CAAC,KAAK,CACV,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,EAC7B,2DAA2D,CAC5D,CAAC;wBACF,OAAO,sBAAsB,CAAC;4BAC5B,GAAG,MAAM;4BACT,mBAAmB,EAAE,KAAK;yBAC3B,CAAC,CAAC;qBACJ;oBACD,IAAI,KAAK,EAAE;wBACT,mBAAmB,GAAG,EAAE,GAAG,mBAAmB,EAAE,GAAG,KAAK,EAAE,CAAC;qBAC5D;iBACF;aACF;iBAAM;gBACL,eAAM,CAAC,KAAK,CACV,EAAE,OAAO,EAAE,EACX,iDAAiD,CAClD,CAAC;gBACF,sBAAsB,CAAC,WAAW,CAAC,GAAG,kBAAmB,CAAC;aAC3D;SACF;aAAM;YACL,MAAM,kBAAkB,GAAG,IAAA,aAAG,EAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;YAC9D,MAAM,gBAAgB,GAAG,IAAA,aAAG,EAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;YAC1D,IAAI,CAAC,gBAAgB,EAAE;gBACrB,IAAI,GAAG,GAAG,MAAM,IAAA,4BAAa,EAC3B,OAAO,EACP,kBAAmB,EACnB,mBAAmB,CACpB,CAAC;gBACF,IAAI,GAAG,EAAE;oBACP,IAAI,kBAAkB,IAAI,OAAO,CAAC,WAAW,EAAE;wBAC7C,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,kBAAkB,CAChD,GAAG,EACH,OAAO,CAAC,kBAAmB,EAC3B,OAAO,CAAC,WAAW,CACpB,CAAC;wBACF,GAAG,GAAG,aAAa,CAAC;qBACrB;oBACD,IAAI,GAAG,KAAK,kBAAkB,EAAE;wBAC9B,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;qBAC9D;yBAAM;wBACL,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE,kBAAkB,CAAC,CAAC;wBAC3D,mBAAmB,CAAC,WAAW,CAAC,GAAG,GAAI,CAAC;qBACzC;oBACD,SAAS;iBACV;qBAAM,IAAI,mBAAmB,EAAE;oBAC9B,OAAO,sBAAsB,CAAC;wBAC5B,GAAG,MAAM;wBACT,mBAAmB,EAAE,KAAK;qBAC3B,CAAC,CAAC;iBACJ;gBACD,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE,uBAAuB,CAAC,CAAC;gBAChE,MAAM,IAAI,KAAK,CAAC,0CAAyB,CAAC,CAAC;aAC5C;YACD,IAAI,UAAU,GAAG,MAAM,gBAAgB,CAAC;gBACtC,WAAW,EAAE,kBAAmB;gBAChC,OAAO;aACR,CAAC,CAAC;YACH,IAAI,kBAAkB,IAAI,OAAO,CAAC,WAAW,EAAE;gBAC7C,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,kBAAkB,CAChD,UAAW,EACX,OAAO,CAAC,kBAAmB,EAC3B,OAAO,CAAC,WAAW,CACpB,CAAC;gBACF,UAAU,GAAG,aAAa,CAAC;aAC5B;YACD,IAAI,CAAC,UAAU,EAAE;gBACf,IAAI,mBAAmB,EAAE;oBACvB,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,OAAO,EAAE,EACxB,8CAA8C,CAC/C,CAAC;oBACF,OAAO,sBAAsB,CAAC;wBAC5B,GAAG,MAAM;wBACT,mBAAmB,EAAE,KAAK;qBAC3B,CAAC,CAAC;iBACJ;gBACD,eAAM,CAAC,KAAK,CACV,EAAE,eAAe,EAAE,kBAAkB,EAAE,MAAM,EAAE,OAAO,EAAE,EACxD,qBAAqB,CACtB,CAAC;gBACF,MAAM,IAAI,KAAK,CAAC,0CAAyB,CAAC,CAAC;aAC5C;YACD,IAAI,UAAU,KAAK,kBAAkB,EAAE;gBACrC,IAAI,mBAAmB,EAAE;oBACvB,gDAAgD;oBAChD,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,OAAO,EAAE,EACxB,kDAAkD,CACnD,CAAC;oBACF,OAAO,sBAAsB,CAAC;wBAC5B,GAAG,MAAM;wBACT,mBAAmB,EAAE,KAAK;qBAC3B,CAAC,CAAC;iBACJ;gBACD,eAAM,CAAC,KAAK,CAAC,YAAY,OAAO,OAAO,WAAW,IAAI,QAAQ,EAAE,CAAC,CAAC;gBAClE,mBAAmB,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC;aAC/C;YACD,IAAI,UAAU,KAAK,kBAAkB,EAAE;gBACrC,IAAI,OAAO,CAAC,OAAO,KAAK,gBAAgB,EAAE;oBACxC,mBAAmB,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC;iBAC/C;aACF;SACF;KACF;IACD,MAAM,mBAAmB,GAAmB,MAAM,CAAC,IAAI,CACrD,mBAAmB,CACpB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACf,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,mBAAmB,CAAC,IAAI,CAAC;KACpC,CAAC,CAAC,CAAC;IACJ,MAAM,gBAAgB,GAAiB,EAAE,CAAC;IAC1C,MAAM,cAAc,GAAoB,EAAE,CAAC;IAC3C,KAAK,MAAM,WAAW,IAAI,mBAAmB,EAAE;QAC7C,MAAM,OAAO,GAAG,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,WAAW,GAAG,sBAAsB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC7D,MAAM,eAAe,GAAG,IAAA,aAAG,EAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QACxD,IAAI,eAAe,EAAE;YACnB,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC;gBACpC,eAAe,EAAE,WAAW,CAAC,IAAI;gBACjC,WAAW;gBACX,aAAa;gBACb,qBAAqB,EAAE,WAAW,CAAC,QAAS,CAAC,QAAQ,EAAE;gBACvD,MAAM;aACP,CAAC,CAAC;YACH,IAAI,YAAE,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;gBAC7B,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;oBACzB,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC;oBACpC,IAAI,IAAI,EAAE;wBACR,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAC7B;yBAAM,IAAI,aAAa,EAAE;wBACxB,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;qBACpC;iBACF;aACF;SACF;KACF;IACD,MAAM,sBAAsB,GAAmB,MAAM,CAAC,IAAI,CACxD,sBAAsB,CACvB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACf,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,sBAAsB,CAAC,IAAI,CAAC;KACvC,CAAC,CAAC,CAAC;IACJ,KAAK,MAAM,WAAW,IAAI,sBAAsB,EAAE;QAChD,MAAM,OAAO,GAAG,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,WAAW,GAAG,sBAAsB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC7D,MAAM,eAAe,GAAG,IAAA,aAAG,EAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QACxD,IAAI,eAAe,EAAE;YACnB,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC;gBACpC,eAAe,EAAE,WAAW,CAAC,IAAI;gBACjC,WAAW;gBACX,aAAa;gBACb,qBAAqB,EAAE,WAAW,CAAC,QAAS,CAAC,QAAQ,EAAE;gBACvD,MAAM;aACP,CAAC,CAAC;YACH,IAAI,YAAE,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;gBAC7B,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACtC,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;oBACzB,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC;oBACpC,uBAAuB;oBACvB,IAAI,IAAI,EAAE;wBACR,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAC7B;yBAAM,IAAI,aAAa,EAAE;wBACxB,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;qBACpC;iBACF;aACF;SACF;KACF;IACD,IAAI,CAAC,mBAAmB,EAAE;QACxB,4DAA4D;QAC5D,KAAK,MAAM,WAAW,IAAI,wBAAwB,EAAE;YAClD,MAAM,OAAO,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;YACjD,MAAM,eAAe,GAAG,IAAA,aAAG,EAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;YACxD,IAAI,eAAe,EAAE;gBACnB,MAAM,mBAAmB,GACvB,mBAAmB,CAAC,WAAW,CAAC;oBAChC,CAAC,MAAM,IAAA,aAAO,EACZ,WAAW,EACX,mBAAmB,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAC5D,CAAC,CAAC;gBACL,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC;oBACpC,eAAe,EAAE,WAAW;oBAC5B,WAAW,EAAE,EAAE;oBACf,qBAAqB,EAAE,mBAAoB;oBAC3C,MAAM;iBACP,CAAC,CAAC;gBACH,IAAI,YAAE,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;oBAC7B,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;wBACzB,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC;wBACpC,IAAI,IAAI,EAAE;4BACR,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBAC7B;6BAAM,IAAI,aAAa,EAAE;4BACxB,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;yBACpC;qBACF;iBACF;aACF;SACF;KACF;IACD,OAAO;QACL,mBAAmB;QACnB,mBAAmB;QACnB,gBAAgB;QAChB,cAAc;KACf,CAAC;AACJ,CAAC;AA3TD,wDA2TC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */\nimport is from '@sindresorhus/is';\nimport { WORKER_FILE_UPDATE_FAILED } from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { get } from '../../../../modules/manager';\nimport type {\n  ArtifactError,\n  PackageDependency,\n} from '../../../../modules/manager/types';\nimport { getFile } from '../../../../util/git';\nimport type { FileAddition, FileChange } from '../../../../util/git/types';\nimport type { BranchConfig } from '../../../types';\nimport { doAutoReplace } from './auto-replace';\n\nexport interface PackageFilesResult {\n  artifactErrors: ArtifactError[];\n  reuseExistingBranch?: boolean;\n  updatedPackageFiles: FileChange[];\n  updatedArtifacts: FileChange[];\n}\n\nexport async function getUpdatedPackageFiles(\n  config: BranchConfig\n): Promise<PackageFilesResult> {\n  logger.trace({ config });\n  const reuseExistingBranch = config.reuseExistingBranch!;\n  logger.debug(\n    `manager.getUpdatedPackageFiles() reuseExistingBranch=${reuseExistingBranch}`\n  );\n  let updatedFileContents: Record<string, string> = {};\n  const nonUpdatedFileContents: Record<string, string> = {};\n  const packageFileManagers: Record<string, string> = {};\n  const packageFileUpdatedDeps: Record<string, PackageDependency[]> = {};\n  const lockFileMaintenanceFiles = [];\n  for (const upgrade of config.upgrades) {\n    const manager = upgrade.manager!;\n    const packageFile = upgrade.packageFile!;\n    const depName = upgrade.depName!;\n    const newVersion = upgrade.newVersion!;\n    const updateLockedDependency = get(manager, 'updateLockedDependency')!;\n    packageFileManagers[packageFile] = manager;\n    packageFileUpdatedDeps[packageFile] =\n      packageFileUpdatedDeps[packageFile] || [];\n    packageFileUpdatedDeps[packageFile].push({ ...upgrade });\n    let packageFileContent: string | null = updatedFileContents[packageFile];\n    if (!packageFileContent) {\n      packageFileContent = await getFile(\n        packageFile,\n        reuseExistingBranch ? config.branchName : config.baseBranch\n      );\n    }\n    let lockFileContent: string | null = null;\n    const lockFile = upgrade.lockFile ?? upgrade.lockFiles?.[0] ?? '';\n    if (lockFile) {\n      lockFileContent = updatedFileContents[lockFile];\n      if (!lockFileContent) {\n        lockFileContent = await getFile(\n          lockFile,\n          reuseExistingBranch ? config.branchName : config.baseBranch\n        );\n      }\n    }\n    // istanbul ignore if\n    if (\n      reuseExistingBranch &&\n      (!packageFileContent || (lockFile && !lockFileContent))\n    ) {\n      logger.debug(\n        { packageFile, depName },\n        'Rebasing branch after file not found'\n      );\n      return getUpdatedPackageFiles({\n        ...config,\n        reuseExistingBranch: false,\n      });\n    }\n    if (upgrade.updateType === 'lockFileMaintenance') {\n      lockFileMaintenanceFiles.push(packageFile);\n    } else if (upgrade.isRemediation) {\n      const { status, files } = await updateLockedDependency({\n        ...upgrade,\n        depName,\n        newVersion,\n        packageFile,\n        packageFileContent: packageFileContent!,\n        lockFile,\n        lockFileContent: lockFileContent!,\n        allowParentUpdates: true,\n        allowHigherOrRemoved: true,\n      });\n      if (reuseExistingBranch && status !== 'already-updated') {\n        logger.debug(\n          { lockFile, depName, status },\n          'Need to retry branch as it is not already up-to-date'\n        );\n        return getUpdatedPackageFiles({\n          ...config,\n          reuseExistingBranch: false,\n        });\n      }\n      if (files) {\n        updatedFileContents = { ...updatedFileContents, ...files };\n      }\n      if (status === 'update-failed' || status === 'unsupported') {\n        upgrade.remediationNotPossible = true;\n      }\n    } else if (upgrade.isLockfileUpdate) {\n      if (updateLockedDependency) {\n        const { status, files } = await updateLockedDependency({\n          ...upgrade,\n          depName,\n          newVersion,\n          packageFile,\n          packageFileContent: packageFileContent!,\n          lockFile,\n          lockFileContent: lockFileContent!,\n          allowParentUpdates: false,\n        });\n        if (status === 'unsupported') {\n          // incompatible lock file\n          nonUpdatedFileContents[packageFile] = packageFileContent!;\n        } else if (status === 'already-updated') {\n          logger.debug(\n            `Upgrade of ${depName} to ${newVersion} is already done in existing branch`\n          );\n        } else {\n          // something changed\n          if (reuseExistingBranch) {\n            logger.debug(\n              { lockFile, depName, status },\n              'Need to retry branch as upgrade requirements are not mets'\n            );\n            return getUpdatedPackageFiles({\n              ...config,\n              reuseExistingBranch: false,\n            });\n          }\n          if (files) {\n            updatedFileContents = { ...updatedFileContents, ...files };\n          }\n        }\n      } else {\n        logger.debug(\n          { manager },\n          'isLockFileUpdate without updateLockedDependency'\n        );\n        nonUpdatedFileContents[packageFile] = packageFileContent!;\n      }\n    } else {\n      const bumpPackageVersion = get(manager, 'bumpPackageVersion');\n      const updateDependency = get(manager, 'updateDependency');\n      if (!updateDependency) {\n        let res = await doAutoReplace(\n          upgrade,\n          packageFileContent!,\n          reuseExistingBranch\n        );\n        if (res) {\n          if (bumpPackageVersion && upgrade.bumpVersion) {\n            const { bumpedContent } = await bumpPackageVersion(\n              res,\n              upgrade.packageFileVersion!,\n              upgrade.bumpVersion\n            );\n            res = bumpedContent;\n          }\n          if (res === packageFileContent) {\n            logger.debug({ packageFile, depName }, 'No content changed');\n          } else {\n            logger.debug({ packageFile, depName }, 'Contents updated');\n            updatedFileContents[packageFile] = res!;\n          }\n          continue;\n        } else if (reuseExistingBranch) {\n          return getUpdatedPackageFiles({\n            ...config,\n            reuseExistingBranch: false,\n          });\n        }\n        logger.error({ packageFile, depName }, 'Could not autoReplace');\n        throw new Error(WORKER_FILE_UPDATE_FAILED);\n      }\n      let newContent = await updateDependency({\n        fileContent: packageFileContent!,\n        upgrade,\n      });\n      if (bumpPackageVersion && upgrade.bumpVersion) {\n        const { bumpedContent } = await bumpPackageVersion(\n          newContent!,\n          upgrade.packageFileVersion!,\n          upgrade.bumpVersion\n        );\n        newContent = bumpedContent;\n      }\n      if (!newContent) {\n        if (reuseExistingBranch) {\n          logger.debug(\n            { packageFile, depName },\n            'Rebasing branch after error updating content'\n          );\n          return getUpdatedPackageFiles({\n            ...config,\n            reuseExistingBranch: false,\n          });\n        }\n        logger.debug(\n          { existingContent: packageFileContent, config: upgrade },\n          'Error updating file'\n        );\n        throw new Error(WORKER_FILE_UPDATE_FAILED);\n      }\n      if (newContent !== packageFileContent) {\n        if (reuseExistingBranch) {\n          // This ensure it's always 1 commit from the bot\n          logger.debug(\n            { packageFile, depName },\n            'Need to update package file so will rebase first'\n          );\n          return getUpdatedPackageFiles({\n            ...config,\n            reuseExistingBranch: false,\n          });\n        }\n        logger.debug(`Updating ${depName} in ${packageFile || lockFile}`);\n        updatedFileContents[packageFile] = newContent;\n      }\n      if (newContent === packageFileContent) {\n        if (upgrade.manager === 'git-submodules') {\n          updatedFileContents[packageFile] = newContent;\n        }\n      }\n    }\n  }\n  const updatedPackageFiles: FileAddition[] = Object.keys(\n    updatedFileContents\n  ).map((name) => ({\n    type: 'addition',\n    path: name,\n    contents: updatedFileContents[name],\n  }));\n  const updatedArtifacts: FileChange[] = [];\n  const artifactErrors: ArtifactError[] = [];\n  for (const packageFile of updatedPackageFiles) {\n    const manager = packageFileManagers[packageFile.path];\n    const updatedDeps = packageFileUpdatedDeps[packageFile.path];\n    const updateArtifacts = get(manager, 'updateArtifacts');\n    if (updateArtifacts) {\n      const results = await updateArtifacts({\n        packageFileName: packageFile.path,\n        updatedDeps,\n        // TODO #7154\n        newPackageFileContent: packageFile.contents!.toString(),\n        config,\n      });\n      if (is.nonEmptyArray(results)) {\n        for (const res of results) {\n          const { file, artifactError } = res;\n          if (file) {\n            updatedArtifacts.push(file);\n          } else if (artifactError) {\n            artifactErrors.push(artifactError);\n          }\n        }\n      }\n    }\n  }\n  const nonUpdatedPackageFiles: FileAddition[] = Object.keys(\n    nonUpdatedFileContents\n  ).map((name) => ({\n    type: 'addition',\n    path: name,\n    contents: nonUpdatedFileContents[name],\n  }));\n  for (const packageFile of nonUpdatedPackageFiles) {\n    const manager = packageFileManagers[packageFile.path];\n    const updatedDeps = packageFileUpdatedDeps[packageFile.path];\n    const updateArtifacts = get(manager, 'updateArtifacts');\n    if (updateArtifacts) {\n      const results = await updateArtifacts({\n        packageFileName: packageFile.path,\n        updatedDeps,\n        // TODO #7154\n        newPackageFileContent: packageFile.contents!.toString(),\n        config,\n      });\n      if (is.nonEmptyArray(results)) {\n        updatedPackageFiles.push(packageFile);\n        for (const res of results) {\n          const { file, artifactError } = res;\n          // istanbul ignore else\n          if (file) {\n            updatedArtifacts.push(file);\n          } else if (artifactError) {\n            artifactErrors.push(artifactError);\n          }\n        }\n      }\n    }\n  }\n  if (!reuseExistingBranch) {\n    // Only perform lock file maintenance if it's a fresh commit\n    for (const packageFile of lockFileMaintenanceFiles) {\n      const manager = packageFileManagers[packageFile];\n      const updateArtifacts = get(manager, 'updateArtifacts');\n      if (updateArtifacts) {\n        const packageFileContents =\n          updatedFileContents[packageFile] ||\n          (await getFile(\n            packageFile,\n            reuseExistingBranch ? config.branchName : config.baseBranch\n          ));\n        const results = await updateArtifacts({\n          packageFileName: packageFile,\n          updatedDeps: [],\n          newPackageFileContent: packageFileContents!,\n          config,\n        });\n        if (is.nonEmptyArray(results)) {\n          for (const res of results) {\n            const { file, artifactError } = res;\n            if (file) {\n              updatedArtifacts.push(file);\n            } else if (artifactError) {\n              artifactErrors.push(artifactError);\n            }\n          }\n        }\n      }\n    }\n  }\n  return {\n    reuseExistingBranch, // Need to overwrite original config\n    updatedPackageFiles,\n    updatedArtifacts,\n    artifactErrors,\n  };\n}\n"]}