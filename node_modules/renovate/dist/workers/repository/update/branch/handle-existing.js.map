{"version":3,"file":"handle-existing.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/branch/handle-existing.ts"],"names":[],"mappings":";;;;AAAA,sDAAyD;AACzD,+CAA4C;AAE5C,kEAAqE;AACrE,6CAA4C;AAC5C,8CAAkE;AAClE,4EAAsD;AAG/C,KAAK,UAAU,QAAQ,CAAC,MAAoB,EAAE,EAAM;IACzD,IAAI,EAAE,CAAC,KAAK,KAAK,eAAO,CAAC,MAAM,EAAE;QAC/B,IAAI,OAAO,CAAC;QACZ,aAAa;QACb,MAAM,WAAW,GAAG,MAAM,CAAC,WAAY,CAAC;QACxC,IAAI,MAAM,CAAC,UAAU,KAAK,OAAO,EAAE;YACjC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;SAC7D;aAAM,IAAI,MAAM,CAAC,UAAU,KAAK,QAAQ,EAAE;YACzC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;SAC9D;aAAM;YACL,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;SAC7D;QACD,OAAO;YACL,mJAAmJ,CAAC;QACtJ,IAAI,CAAC,MAAM,CAAC,qBAAsB,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;YACnE,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC9B,eAAM,CAAC,IAAI,CACT,kDAAkD,EAAE,CAAC,MAAM,EAAE,CAC9D,CAAC;aACH;iBAAM;gBACL,MAAM,IAAA,uBAAa,EAAC;oBAClB,MAAM,EAAE,EAAE,CAAC,MAAM;oBACjB,KAAK,EAAE,WAAW,CAAC,WAAW;oBAC9B,OAAO;iBACR,CAAC,CAAC;aACJ;SACF;QACD,IAAI,IAAA,kBAAY,EAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YACnC,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC9B,eAAM,CAAC,IAAI,CAAC,+BAA+B,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;aAClE;iBAAM;gBACL,MAAM,IAAA,kBAAY,EAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACvC;SACF;KACF;SAAM,IAAI,EAAE,CAAC,KAAK,KAAK,eAAO,CAAC,MAAM,EAAE;QACtC,eAAM,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE,mCAAmC,CAAC,CAAC;KACtE;AACH,CAAC;AArCD,4BAqCC","sourcesContent":["import { GlobalConfig } from '../../../../config/global';\nimport { logger } from '../../../../logger';\nimport type { Pr } from '../../../../modules/platform';\nimport { ensureComment } from '../../../../modules/platform/comment';\nimport { PrState } from '../../../../types';\nimport { branchExists, deleteBranch } from '../../../../util/git';\nimport * as template from '../../../../util/template';\nimport type { BranchConfig } from '../../../types';\n\nexport async function handlepr(config: BranchConfig, pr: Pr): Promise<void> {\n  if (pr.state === PrState.Closed) {\n    let content;\n    // TODO #7154\n    const userStrings = config.userStrings!;\n    if (config.updateType === 'major') {\n      content = template.compile(userStrings.ignoreMajor, config);\n    } else if (config.updateType === 'digest') {\n      content = template.compile(userStrings.ignoreDigest, config);\n    } else {\n      content = template.compile(userStrings.ignoreOther, config);\n    }\n    content +=\n      '\\n\\nIf this PR was closed by mistake or you changed your mind, you can simply rename this PR and you will soon get a fresh replacement PR opened.';\n    if (!config.suppressNotifications!.includes('prIgnoreNotification')) {\n      if (GlobalConfig.get('dryRun')) {\n        logger.info(\n          `DRY-RUN: Would ensure closed PR comment in PR #${pr.number}`\n        );\n      } else {\n        await ensureComment({\n          number: pr.number,\n          topic: userStrings.ignoreTopic,\n          content,\n        });\n      }\n    }\n    if (branchExists(config.branchName)) {\n      if (GlobalConfig.get('dryRun')) {\n        logger.info('DRY-RUN: Would delete branch ' + config.branchName);\n      } else {\n        await deleteBranch(config.branchName);\n      }\n    }\n  } else if (pr.state === PrState.Merged) {\n    logger.debug({ pr: pr.number }, 'Merged PR is blocking this branch');\n  }\n}\n"]}