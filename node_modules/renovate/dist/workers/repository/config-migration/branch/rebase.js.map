{"version":3,"file":"rebase.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/config-migration/branch/rebase.ts"],"names":[],"mappings":";;;AAAA,sDAAyD;AAEzD,+CAA4C;AAC5C,gEAAoE;AACpE,8CAI8B;AAC9B,sCAAmD;AACnD,qDAAuE;AAGhE,KAAK,UAAU,qBAAqB,CACzC,MAAsB,EACtB,kBAAgC;IAEhC,eAAM,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;IAC5D,MAAM,UAAU,GAAG,IAAA,+BAAsB,EAAC,MAAM,CAAC,CAAC;IAClD,IAAI,MAAM,IAAA,sBAAgB,EAAC,UAAU,CAAC,EAAE;QACtC,eAAM,CAAC,KAAK,CAAC,wDAAwD,CAAC,CAAC;QACvE,OAAO,IAAI,CAAC;KACb;IACD,MAAM,cAAc,GAAG,kBAAkB,CAAC,QAAQ,CAAC;IACnD,MAAM,QAAQ,GAAG,kBAAkB,CAAC,OAAO,CAAC;IAC5C,MAAM,gBAAgB,GAAG,MAAM,IAAA,aAAO,EAAC,cAAc,EAAE,UAAU,CAAC,CAAC;IACnE,IACE,QAAQ,KAAK,gBAAgB;QAC7B,CAAC,CAAC,MAAM,IAAA,wBAAkB,EAAC,UAAU,CAAC,CAAC,EACvC;QACA,eAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC;KACb;IACD,eAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAE1C,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QAC9B,eAAM,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC;KACb;IAED,MAAM,oBAAoB,GAAG,IAAI,oDAAmC,CAClE,MAAM,EACN,cAAc,CACf,CAAC;IACF,MAAM,aAAa,GAAG,oBAAoB,CAAC,gBAAgB,EAAE,CAAC;IAE9D,OAAO,IAAA,sBAAa,EAAC;QACnB,UAAU;QACV,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,cAAc;gBACpB,QAAQ;aACT;SACF;QACD,OAAO,EAAE,aAAa,CAAC,QAAQ,EAAE;QACjC,cAAc,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc;KACxC,CAAC,CAAC;AACL,CAAC;AA7CD,sDA6CC","sourcesContent":["import { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { commitAndPush } from '../../../../modules/platform/commit';\nimport {\n  getFile,\n  isBranchBehindBase,\n  isBranchModified,\n} from '../../../../util/git';\nimport { getMigrationBranchName } from '../common';\nimport { ConfigMigrationCommitMessageFactory } from './commit-message';\nimport type { MigratedData } from './migrated-data';\n\nexport async function rebaseMigrationBranch(\n  config: RenovateConfig,\n  migratedConfigData: MigratedData\n): Promise<string | null> {\n  logger.debug('Checking if migration branch needs rebasing');\n  const branchName = getMigrationBranchName(config);\n  if (await isBranchModified(branchName)) {\n    logger.debug('Migration branch has been edited and cannot be rebased');\n    return null;\n  }\n  const configFileName = migratedConfigData.filename;\n  const contents = migratedConfigData.content;\n  const existingContents = await getFile(configFileName, branchName);\n  if (\n    contents === existingContents &&\n    !(await isBranchBehindBase(branchName))\n  ) {\n    logger.debug('Migration branch is up to date');\n    return null;\n  }\n  logger.debug('Rebasing migration branch');\n\n  if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would rebase files in migration branch');\n    return null;\n  }\n\n  const commitMessageFactory = new ConfigMigrationCommitMessageFactory(\n    config,\n    configFileName\n  );\n  const commitMessage = commitMessageFactory.getCommitMessage();\n\n  return commitAndPush({\n    branchName,\n    files: [\n      {\n        type: 'addition',\n        path: configFileName,\n        contents,\n      },\n    ],\n    message: commitMessage.toString(),\n    platformCommit: !!config.platformCommit,\n  });\n}\n"]}