{"version":3,"file":"migrated-data.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/config-migration/branch/migrated-data.ts"],"names":[],"mappings":"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","sourcesContent":["import detectIndent from 'detect-indent';\nimport JSON5 from 'json5';\nimport prettier from 'prettier';\nimport { migrateConfig } from '../../../../config/migration';\nimport { logger } from '../../../../logger';\nimport { readLocalFile } from '../../../../util/fs';\nimport { getFileList } from '../../../../util/git';\nimport { detectRepoFileConfig } from '../../init/merge';\n\nexport interface MigratedData {\n  content: string;\n  filename: string;\n}\ninterface Indent {\n  amount: number;\n  indent: string;\n  type?: string;\n}\n\nconst prettierConfigFilenames = new Set([\n  '.prettierrc',\n  '.prettierrc.json',\n  '.prettierrc.yml',\n  '.prettierrc.yaml',\n  '.prettierrc.json5',\n  '.prettierrc.js',\n  '.prettierrc.cjs',\n  'prettier.config.js',\n  'prettier.config.cjs',\n  '.prettierrc.toml',\n]);\n\nexport async function applyPrettierFormatting(\n  content: string,\n  parser: string,\n  indent: Indent\n): Promise<string> {\n  const fileList = await getFileList();\n  let prettierExists = fileList.some((file) =>\n    prettierConfigFilenames.has(file)\n  );\n  if (!prettierExists) {\n    try {\n      const packageJsonContent = await readLocalFile('package.json', 'utf8');\n      prettierExists =\n        packageJsonContent && JSON.parse(packageJsonContent).prettier;\n    } catch {\n      logger.warn('Invalid JSON found in package.json');\n    }\n  }\n\n  if (!prettierExists) {\n    return content;\n  }\n  const options = {\n    parser,\n    tabWidth: indent.amount === 0 ? 2 : indent.amount,\n    useTabs: indent.type === 'tab',\n  };\n\n  return prettier.format(content, options);\n}\n\nexport class MigratedDataFactory {\n  // singleton\n  private static data: MigratedData | null;\n\n  public static async getAsync(): Promise<MigratedData | null> {\n    if (this.data) {\n      return this.data;\n    }\n    const migrated = await this.build();\n\n    if (!migrated) {\n      return null;\n    }\n\n    this.data = migrated;\n    return this.data;\n  }\n\n  public static reset(): void {\n    this.data = null;\n  }\n\n  private static async build(): Promise<MigratedData | null> {\n    let res: MigratedData | null = null;\n    try {\n      const rc = await detectRepoFileConfig();\n      const configFileParsed = rc?.configFileParsed || {};\n\n      // get migrated config\n      const { isMigrated, migratedConfig } = migrateConfig(configFileParsed);\n      if (!isMigrated) {\n        return null;\n      }\n\n      delete migratedConfig.errors;\n      delete migratedConfig.warnings;\n\n      const filename = rc.configFileName ?? '';\n      const raw = await readLocalFile(filename, 'utf8');\n\n      // indent defaults to 2 spaces\n      // TODO #7154\n      const indent = detectIndent(raw!);\n      const indentSpace = indent.indent ?? '  ';\n      let content: string;\n\n      if (filename.endsWith('.json5')) {\n        content = JSON5.stringify(migratedConfig, undefined, indentSpace);\n      } else {\n        content = JSON.stringify(migratedConfig, undefined, indentSpace);\n      }\n\n      // format if prettier is found in the user's repo\n      content = await applyPrettierFormatting(\n        content,\n        filename.endsWith('.json5') ? 'json5' : 'json',\n        indent\n      );\n      if (!content.endsWith('\\n')) {\n        content += '\\n';\n      }\n\n      res = { content, filename };\n    } catch (err) {\n      logger.debug(\n        { err },\n        'MigratedDataFactory.getAsync() Error initializing renovate MigratedData'\n      );\n    }\n    return res;\n  }\n}\n"]}