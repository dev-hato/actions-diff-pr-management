"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrationPrExists = exports.checkConfigMigrationBranch = void 0;
const global_1 = require("../../../../config/global");
const logger_1 = require("../../../../logger");
const platform_1 = require("../../../../modules/platform");
const git_1 = require("../../../../util/git");
const common_1 = require("../common");
const create_1 = require("./create");
const rebase_1 = require("./rebase");
async function checkConfigMigrationBranch(config, migratedConfigData) {
    logger_1.logger.debug('checkConfigMigrationBranch()');
    if (!migratedConfigData) {
        logger_1.logger.debug('checkConfigMigrationBranch() Config does not need migration');
        return null;
    }
    const configMigrationBranch = (0, common_1.getMigrationBranchName)(config);
    if (await migrationPrExists(configMigrationBranch)) {
        logger_1.logger.debug('Config Migration PR already exists');
        await (0, rebase_1.rebaseMigrationBranch)(config, migratedConfigData);
        if (platform_1.platform.refreshPr) {
            const configMigrationPr = await platform_1.platform.getBranchPr(configMigrationBranch);
            if (configMigrationPr) {
                await platform_1.platform.refreshPr(configMigrationPr.number);
            }
        }
    }
    else {
        logger_1.logger.debug('Config Migration PR does not exist');
        logger_1.logger.debug('Need to create migration PR');
        await (0, create_1.createConfigMigrationBranch)(config, migratedConfigData);
    }
    if (!global_1.GlobalConfig.get('dryRun')) {
        await (0, git_1.checkoutBranch)(configMigrationBranch);
    }
    return configMigrationBranch;
}
exports.checkConfigMigrationBranch = checkConfigMigrationBranch;
async function migrationPrExists(branchName) {
    return !!(await platform_1.platform.getBranchPr(branchName));
}
exports.migrationPrExists = migrationPrExists;
//# sourceMappingURL=index.js.map