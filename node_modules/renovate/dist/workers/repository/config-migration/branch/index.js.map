{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/config-migration/branch/index.ts"],"names":[],"mappings":";;;AAAA,sDAAyD;AAEzD,+CAA4C;AAC5C,2DAAwD;AACxD,8CAAsD;AACtD,sCAAmD;AACnD,qCAAuD;AAEvD,qCAAiD;AAE1C,KAAK,UAAU,0BAA0B,CAC9C,MAAsB,EACtB,kBAAuC;IAEvC,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAC7C,IAAI,CAAC,kBAAkB,EAAE;QACvB,eAAM,CAAC,KAAK,CAAC,6DAA6D,CAAC,CAAC;QAC5E,OAAO,IAAI,CAAC;KACb;IACD,MAAM,qBAAqB,GAAG,IAAA,+BAAsB,EAAC,MAAM,CAAC,CAAC;IAC7D,IAAI,MAAM,iBAAiB,CAAC,qBAAqB,CAAC,EAAE;QAClD,eAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACnD,MAAM,IAAA,8BAAqB,EAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;QAExD,IAAI,mBAAQ,CAAC,SAAS,EAAE;YACtB,MAAM,iBAAiB,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAClD,qBAAqB,CACtB,CAAC;YACF,IAAI,iBAAiB,EAAE;gBACrB,MAAM,mBAAQ,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;aACpD;SACF;KACF;SAAM;QACL,eAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACnD,eAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAC5C,MAAM,IAAA,oCAA2B,EAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;KAC/D;IACD,IAAI,CAAC,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QAC/B,MAAM,IAAA,oBAAc,EAAC,qBAAqB,CAAC,CAAC;KAC7C;IACD,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AA/BD,gEA+BC;AAEM,KAAK,UAAU,iBAAiB,CAAC,UAAkB;IACxD,OAAO,CAAC,CAAC,CAAC,MAAM,mBAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;AACpD,CAAC;AAFD,8CAEC","sourcesContent":["import { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { platform } from '../../../../modules/platform';\nimport { checkoutBranch } from '../../../../util/git';\nimport { getMigrationBranchName } from '../common';\nimport { createConfigMigrationBranch } from './create';\nimport type { MigratedData } from './migrated-data';\nimport { rebaseMigrationBranch } from './rebase';\n\nexport async function checkConfigMigrationBranch(\n  config: RenovateConfig,\n  migratedConfigData: MigratedData | null\n): Promise<string | null> {\n  logger.debug('checkConfigMigrationBranch()');\n  if (!migratedConfigData) {\n    logger.debug('checkConfigMigrationBranch() Config does not need migration');\n    return null;\n  }\n  const configMigrationBranch = getMigrationBranchName(config);\n  if (await migrationPrExists(configMigrationBranch)) {\n    logger.debug('Config Migration PR already exists');\n    await rebaseMigrationBranch(config, migratedConfigData);\n\n    if (platform.refreshPr) {\n      const configMigrationPr = await platform.getBranchPr(\n        configMigrationBranch\n      );\n      if (configMigrationPr) {\n        await platform.refreshPr(configMigrationPr.number);\n      }\n    }\n  } else {\n    logger.debug('Config Migration PR does not exist');\n    logger.debug('Need to create migration PR');\n    await createConfigMigrationBranch(config, migratedConfigData);\n  }\n  if (!GlobalConfig.get('dryRun')) {\n    await checkoutBranch(configMigrationBranch);\n  }\n  return configMigrationBranch;\n}\n\nexport async function migrationPrExists(branchName: string): Promise<boolean> {\n  return !!(await platform.getBranchPr(branchName));\n}\n"]}