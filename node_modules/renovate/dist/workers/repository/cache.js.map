{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../lib/workers/repository/cache.ts"],"names":[],"mappings":";AAAA,0BAA0B;;;AAE1B,yCAAsC;AACtC,qDAAkD;AAClD,4DAAuD;AAKvD,wCAIwB;AAGxB,SAAS,0BAA0B,CACjC,OAA4B;IAE5B,MAAM,EACJ,UAAU,EACV,OAAO,EACP,WAAW,EACX,YAAY,EACZ,cAAc,EACd,UAAU,EACV,aAAa,EACb,SAAS,EACT,SAAS,GACV,GAAG,OAAO,CAAC;IACZ,MAAM,MAAM,GAAuB;QACjC,UAAU;QACV,OAAO;QACP,YAAY;QACZ,cAAc;QACd,UAAU;QACV,aAAa;QACb,SAAS;QACT,SAAS;KACV,CAAC;IACF,IAAI,WAAW,EAAE;QACf,MAAM,CAAC,WAAW,GAAG,WAAW,CAAC;KAClC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,KAAK,UAAU,mBAAmB,CAChC,MAAoB;IAEpB,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IAC9B,IAAI;QACF,MAAM,GAAG,GAAG,IAAA,qBAAe,EAAC,UAAU,CAAC,IAAI,IAAI,CAAC;QAChD,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,GAAG,EAAE;YACP,SAAS,GAAG,MAAM,IAAA,wBAAkB,EAAC,UAAU,CAAC,CAAC;YACjD,MAAM,QAAQ,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACxD,IAAI,QAAQ,EAAE;gBACZ,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC;aACxB;SACF;QACD,MAAM,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;QACrC,IAAI,UAAU,GAAG,KAAK,CAAC;QACvB,IAAI,GAAG,EAAE;YACP,IAAI;gBACF,UAAU,GAAG,MAAM,IAAA,sBAAgB,EAAC,UAAU,CAAC,CAAC;aACjD;YAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;gBACvC,aAAa;aACd;SACF;QACD,MAAM,QAAQ,GAAyB,MAAM,CAAC,QAAQ;YACpD,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC;YACjD,CAAC,CAAC,EAAE,CAAC;QACP,OAAO;YACL,UAAU;YACV,GAAG;YACH,SAAS;YACT,IAAI;YACJ,SAAS;YACT,UAAU;YACV,QAAQ;SACT,CAAC;KACH;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,gCAAgC;QAChE,MAAM,QAAQ,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC5B,qBAAqB;QACrB,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE;YAC/C,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,oCAAoC,CAAC,CAAC;YACvE,OAAO,IAAI,CAAC;SACb;QACD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,+BAA+B,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAEM,KAAK,UAAU,cAAc,CAAC,QAAwB;IAC3D,MAAM,YAAY,GAAkB,EAAE,CAAC;IACvC,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;QAC7B,MAAM,WAAW,GAAG,MAAM,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACtD,IAAI,WAAW,EAAE;YACf,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAChC;KACF;IACD,IAAA,qBAAQ,GAAE,CAAC,QAAQ,GAAG,YAAY,CAAC;AACrC,CAAC;AATD,wCASC","sourcesContent":["/* istanbul ignore file */\n\nimport { logger } from '../../logger';\nimport { platform } from '../../modules/platform';\nimport { getCache } from '../../util/cache/repository';\nimport type {\n  BranchCache,\n  BranchUpgradeCache,\n} from '../../util/cache/repository/types';\nimport {\n  getBranchCommit,\n  getBranchParentSha,\n  isBranchModified,\n} from '../../util/git';\nimport type { BranchConfig, BranchUpgradeConfig } from '../types';\n\nfunction generateBranchUpgradeCache(\n  upgrade: BranchUpgradeConfig\n): BranchUpgradeCache {\n  const {\n    datasource,\n    depName,\n    packageName,\n    fixedVersion,\n    currentVersion,\n    newVersion,\n    currentDigest,\n    newDigest,\n    sourceUrl,\n  } = upgrade;\n  const result: BranchUpgradeCache = {\n    datasource,\n    depName,\n    fixedVersion,\n    currentVersion,\n    newVersion,\n    currentDigest,\n    newDigest,\n    sourceUrl,\n  };\n  if (packageName) {\n    result.packageName = packageName;\n  }\n  return result;\n}\n\nasync function generateBranchCache(\n  branch: BranchConfig\n): Promise<BranchCache | null> {\n  const { branchName } = branch;\n  try {\n    const sha = getBranchCommit(branchName) ?? null;\n    let prNo = null;\n    let parentSha = null;\n    if (sha) {\n      parentSha = await getBranchParentSha(branchName);\n      const branchPr = await platform.getBranchPr(branchName);\n      if (branchPr) {\n        prNo = branchPr.number;\n      }\n    }\n    const automerge = !!branch.automerge;\n    let isModified = false;\n    if (sha) {\n      try {\n        isModified = await isBranchModified(branchName);\n      } catch (err) /* istanbul ignore next */ {\n        // Do nothing\n      }\n    }\n    const upgrades: BranchUpgradeCache[] = branch.upgrades\n      ? branch.upgrades.map(generateBranchUpgradeCache)\n      : [];\n    return {\n      branchName,\n      sha,\n      parentSha,\n      prNo,\n      automerge,\n      isModified,\n      upgrades,\n    };\n  } catch (error) {\n    const err = error.err || error; // external host error nests err\n    const errCodes = [401, 404];\n    // istanbul ignore if\n    if (errCodes.includes(err.response?.statusCode)) {\n      logger.warn({ err, branchName }, 'HTTP error generating branch cache');\n      return null;\n    }\n    logger.error({ err, branchName }, 'Error generating branch cache');\n    return null;\n  }\n}\n\nexport async function setBranchCache(branches: BranchConfig[]): Promise<void> {\n  const branchCaches: BranchCache[] = [];\n  for (const branch of branches) {\n    const branchCache = await generateBranchCache(branch);\n    if (branchCache) {\n      branchCaches.push(branchCache);\n    }\n  }\n  getCache().branches = branchCaches;\n}\n"]}