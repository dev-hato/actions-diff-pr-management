{"version":3,"file":"deprecated.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/deprecated.ts"],"names":[],"mappings":";;;AAAA,aAAa;AACb,mDAAsD;AAEtD,4CAAyC;AAEzC,wDAAqD;AAE9C,KAAK,UAAU,wBAAwB,CAC5C,MAAsB,EACtB,YAA2C;IAE3C,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE;QAC3B,OAAO;KACR;IACD,IAAI,MAAM,CAAC,qBAAqB,EAAE,QAAQ,CAAC,0BAA0B,CAAC,EAAE;QACtE,OAAO;KACR;IACD,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QAC3D,MAAM,kBAAkB,GAGpB,EAAE,CAAC;QACP,KAAK,MAAM,WAAW,IAAI,KAAK,EAAE;YAC/B,KAAK,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE;gBAClC,MAAM,EAAE,kBAAkB,EAAE,GAAG,GAAG,CAAC;gBACnC,IAAI,kBAAkB,EAAE;oBACtB,kBAAkB,CAAC,GAAG,CAAC,OAAQ,CAAC,GAAG,kBAAkB,CACnD,GAAG,CAAC,OAAQ,CACb,IAAI;wBACH,kBAAkB;wBAClB,eAAe,EAAE,EAAE;qBACpB,CAAC;oBACF,kBAAkB,CAAC,GAAG,CAAC,OAAQ,CAAC,CAAC,eAAe,CAAC,IAAI,CACnD,WAAW,CAAC,WAAY,CACzB,CAAC;iBACH;aACF;SACF;QAED,eAAM,CAAC,KAAK,CAAC,EAAE,kBAAkB,EAAE,CAAC,CAAC;QACrC,MAAM,cAAc,GAAa,EAAE,CAAC;QACpC,MAAM,gBAAgB,GAAG,iCAAiC,CAAC;QAC3D,KAAK,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;YAC/D,MAAM,EAAE,kBAAkB,EAAE,eAAe,EAAE,GAAG,GAAG,CAAC;YACpD,eAAM,CAAC,KAAK,CACV;gBACE,OAAO;gBACP,kBAAkB;gBAClB,YAAY,EAAE,eAAe;aAC9B,EACD,0BAA0B,CAC3B,CAAC;YACF,MAAM,UAAU,GAAG,GAAG,gBAAgB,IAAI,OAAO,KAAK,OAAO,GAAG,CAAC;YACjE,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChC,IAAI,SAAS,GAAG,kBAAkB,CAAC;YACnC,SAAS,IAAI,iCAAiC,eAAe;iBAC1D,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;iBACzB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAChB,SAAS,IAAI,wFAAwF,OAAO,qNAAqN,CAAC;YAClU,qBAAqB;YACrB,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC9B,eAAM,CAAC,IAAI,CAAC,gDAAgD,GAAG,OAAO,CAAC,CAAC;aACzE;iBAAM;gBACL,MAAM,UAAU,GAAG,IAAI,CAAC;gBACxB,MAAM,mBAAQ,CAAC,WAAW,CAAC;oBACzB,KAAK,EAAE,UAAU;oBACjB,IAAI,EAAE,SAAU;oBAChB,IAAI,EAAE,UAAU;oBAChB,YAAY,EAAE,MAAM,CAAC,YAAY;iBAClC,CAAC,CAAC;aACJ;SACF;QACD,eAAM,CAAC,KAAK,CACV,uFAAuF,CACxF,CAAC;QACF,MAAM,SAAS,GAAG,MAAM,mBAAQ,CAAC,YAAY,EAAE,CAAC;QAChD,IAAI,SAAS,EAAE,MAAM,EAAE;YACrB,MAAM,gBAAgB,GAAG,SAAS,CAAC,MAAM,CACvC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,CACnE,CAAC;YACF,KAAK,MAAM,CAAC,IAAI,gBAAgB,EAAE;gBAChC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAM,CAAC,EAAE;oBACtC,MAAM,mBAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,KAAM,CAAC,CAAC;iBAC7C;aACF;SACF;KACF;AACH,CAAC;AAhFD,4DAgFC","sourcesContent":["// TODO #7154\nimport { GlobalConfig } from '../../../config/global';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport type { PackageFile } from '../../../modules/manager/types';\nimport { platform } from '../../../modules/platform';\n\nexport async function raiseDeprecationWarnings(\n  config: RenovateConfig,\n  packageFiles: Record<string, PackageFile[]>\n): Promise<void> {\n  if (!config.repoIsOnboarded) {\n    return;\n  }\n  if (config.suppressNotifications?.includes('deprecationWarningIssues')) {\n    return;\n  }\n  for (const [manager, files] of Object.entries(packageFiles)) {\n    const deprecatedPackages: Record<\n      string,\n      { deprecationMessage?: string; depPackageFiles: string[] }\n    > = {};\n    for (const packageFile of files) {\n      for (const dep of packageFile.deps) {\n        const { deprecationMessage } = dep;\n        if (deprecationMessage) {\n          deprecatedPackages[dep.depName!] = deprecatedPackages[\n            dep.depName!\n          ] || {\n            deprecationMessage,\n            depPackageFiles: [],\n          };\n          deprecatedPackages[dep.depName!].depPackageFiles.push(\n            packageFile.packageFile!\n          );\n        }\n      }\n    }\n\n    logger.debug({ deprecatedPackages });\n    const issueTitleList: string[] = [];\n    const issueTitlePrefix = 'Dependency deprecation warning:';\n    for (const [depName, val] of Object.entries(deprecatedPackages)) {\n      const { deprecationMessage, depPackageFiles } = val;\n      logger.debug(\n        {\n          depName,\n          deprecationMessage,\n          packageFiles: depPackageFiles,\n        },\n        'dependency is deprecated'\n      );\n      const issueTitle = `${issueTitlePrefix} ${depName} (${manager})`;\n      issueTitleList.push(issueTitle);\n      let issueBody = deprecationMessage;\n      issueBody += `\\n\\nAffected package file(s): ${depPackageFiles\n        .map((f) => '`' + f + '`')\n        .join(', ')}`;\n      issueBody += `\\n\\nIf you don't care about this, you can close this issue and not be warned about \\`${depName}\\`'s deprecation again. If you would like to completely disable all future deprecation warnings then add the following to your config:\\n\\n\\`\\`\\`\\n\"suppressNotifications\": [\"deprecationWarningIssues\"]\\n\\`\\`\\`\\n\\n`;\n      // istanbul ignore if\n      if (GlobalConfig.get('dryRun')) {\n        logger.info('DRY-RUN: Ensure deprecation warning issue for ' + depName);\n      } else {\n        const ensureOnce = true;\n        await platform.ensureIssue({\n          title: issueTitle,\n          body: issueBody!,\n          once: ensureOnce,\n          confidential: config.confidential,\n        });\n      }\n    }\n    logger.debug(\n      'Checking for existing deprecated package issues missing in current deprecatedPackages'\n    );\n    const issueList = await platform.getIssueList();\n    if (issueList?.length) {\n      const deprecatedIssues = issueList.filter(\n        (i) => i.title!.startsWith(issueTitlePrefix) && i.state === 'open'\n      );\n      for (const i of deprecatedIssues) {\n        if (!issueTitleList.includes(i.title!)) {\n          await platform.ensureIssueClosing(i.title!);\n        }\n      }\n    }\n  }\n}\n"]}