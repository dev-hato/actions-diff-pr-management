{"version":3,"file":"error-config.js","sourceRoot":"","sources":["../../../lib/workers/repository/error-config.ts"],"names":[],"mappings":";;;AAAA,aAAa;AACb,gDAAmD;AAEnD,yCAAsC;AACtC,qDAAkD;AAClD,uCAAsC;AACtC,4CAAyC;AAElC,KAAK,UAAU,uBAAuB,CAC3C,MAAsB,EACtB,KAAY;IAEZ,eAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAC1C,IAAI,IAAI,GAAG,2JAA2J,CAAC;IACvK,IAAI,KAAK,CAAC,gBAAgB,EAAE;QAC1B,IAAI,IAAI,eAAe,KAAK,CAAC,gBAAgB,MAAM,CAAC;KACrD;IACD,IAAI,IAAI,eAAe,KAAK,CAAC,eAAgB,IAAI,CAAC;IAClD,IAAI,KAAK,CAAC,iBAAiB,EAAE;QAC3B,IAAI,IAAI,cAAc,KAAK,CAAC,iBAAiB,CAAC,OAAO,CACnD,IAAA,aAAK,EAAC,IAAI,CAAC,EACX,GAAG,CACJ,MAAM,CAAC;KACT;IACD,MAAM,EAAE,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAiB,CAAC,CAAC;IAChE,IAAI,EAAE,EAAE,KAAK,KAAK,eAAO,CAAC,IAAI,EAAE;QAC9B,eAAM,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;QAChE,IAAI,GAAG,qDAAqD,IAAI,EAAE,CAAC;QACnE,IAAI,IAAI,+JAA+J,CAAC;QACxK,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC9B,eAAM,CAAC,IAAI,CAAC,6BAA6B,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;SACvD;aAAM;YACL,IAAI;gBACF,MAAM,mBAAQ,CAAC,QAAQ,CAAC;oBACtB,MAAM,EAAE,EAAE,CAAC,MAAM;oBACjB,OAAO,EAAE,MAAM,CAAC,iBAAkB;oBAClC,MAAM,EAAE,IAAI;iBACb,CAAC,CAAC;aACJ;YAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;gBACvC,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,8BAA8B,CAAC,CAAC;aACtD;SACF;KACF;SAAM,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QACrC,eAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;KACzD;SAAM,IAAI,MAAM,CAAC,qBAAqB,EAAE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QACrE,eAAM,CAAC,IAAI,CACT,qEAAqE,CACtE,CAAC;KACH;SAAM;QACL,MAAM,IAAI,GAAG,KAAK,CAAC;QACnB,MAAM,YAAY,GAAG,MAAM,CAAC,uBAAuB,CAAC;QACpD,MAAM,GAAG,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAAC;YACrC,KAAK,EAAE,6CAA6C;YACpD,IAAI;YACJ,IAAI;YACJ,YAAY,EAAE,YAAY;YAC1B,YAAY,EAAE,MAAM,CAAC,YAAY;SAClC,CAAC,CAAC;QACH,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,eAAM,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,gBAAgB,CAAC,CAAC;SAC5D;KACF;AACH,CAAC;AAtDD,0DAsDC","sourcesContent":["// TODO #7154\nimport { GlobalConfig } from '../../config/global';\nimport type { RenovateConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport { platform } from '../../modules/platform';\nimport { PrState } from '../../types';\nimport { regEx } from '../../util/regex';\n\nexport async function raiseConfigWarningIssue(\n  config: RenovateConfig,\n  error: Error\n): Promise<void> {\n  logger.debug('raiseConfigWarningIssue()');\n  let body = `There is an error with this repository's Renovate configuration that needs to be fixed. As a precaution, Renovate will stop PRs until it is resolved.\\n\\n`;\n  if (error.validationSource) {\n    body += `Location: \\`${error.validationSource}\\`\\n`;\n  }\n  body += `Error type: ${error.validationError!}\\n`;\n  if (error.validationMessage) {\n    body += `Message: \\`${error.validationMessage.replace(\n      regEx(/`/g),\n      \"'\"\n    )}\\`\\n`;\n  }\n  const pr = await platform.getBranchPr(config.onboardingBranch!);\n  if (pr?.state === PrState.Open) {\n    logger.debug('Updating onboarding PR with config error notice');\n    body = `## Action Required: Fix Renovate Configuration\\n\\n${body}`;\n    body += `\\n\\nOnce you have resolved this problem (in this onboarding branch), Renovate will return to providing you with a preview of your repository's configuration.`;\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(`DRY-RUN: Would update PR #${pr.number}`);\n    } else {\n      try {\n        await platform.updatePr({\n          number: pr.number,\n          prTitle: config.onboardingPrTitle!,\n          prBody: body,\n        });\n      } catch (err) /* istanbul ignore next */ {\n        logger.warn({ err }, 'Error updating onboarding PR');\n      }\n    }\n  } else if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would ensure config error issue');\n  } else if (config.suppressNotifications?.includes('configErrorIssue')) {\n    logger.info(\n      'configErrorIssue - configuration failure, issues will be suppressed'\n    );\n  } else {\n    const once = false;\n    const shouldReopen = config.configWarningReuseIssue;\n    const res = await platform.ensureIssue({\n      title: `Action Required: Fix Renovate Configuration`,\n      body,\n      once,\n      shouldReOpen: shouldReopen,\n      confidential: config.confidential,\n    });\n    if (res === 'created') {\n      logger.warn({ configError: error, res }, 'Config Warning');\n    }\n  }\n}\n"]}