{"version":3,"file":"manager-files.js","sourceRoot":"","sources":["../../../../lib/workers/repository/extract/manager-files.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AACzC,sDAIkC;AAElC,yCAAiD;AAG1C,KAAK,UAAU,sBAAsB,CAC1C,MAA2B;IAE3B,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;IAC9C,eAAM,CAAC,KAAK,CAAC,mBAAmB,OAAO,GAAG,CAAC,CAAC;IAC5C,IAAI,CAAC,OAAO,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,GAAG,OAAO,cAAc,CAAC,CAAC;QACvC,OAAO,EAAE,CAAC;KACX;IACD,uBAAuB;IACvB,IAAI,YAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;QAC9B,eAAM,CAAC,KAAK,CACV,WACE,QAAQ,CAAC,MACX,wBAAwB,OAAO,KAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1D,CAAC;KACH;SAAM;QACL,OAAO,EAAE,CAAC;KACX;IACD,6DAA6D;IAC7D,IAAI,IAAA,aAAG,EAAC,OAAO,EAAE,wBAAwB,CAAC,EAAE;QAC1C,MAAM,eAAe,GAAG,MAAM,IAAA,gCAAsB,EAClD,OAAO,EACP,MAAM,EACN,QAAQ,CACT,CAAC;QACF,IAAI,eAAe,EAAE;YACnB,KAAK,MAAM,WAAW,IAAI,eAAe,EAAE;gBACzC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;oBAC/D,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC;iBAC1C;aACF;SACF;QACD,OAAO,eAAe,CAAC;KACxB;IACD,MAAM,YAAY,GAAkB,EAAE,CAAC;IACvC,KAAK,MAAM,WAAW,IAAI,QAAQ,EAAE;QAClC,MAAM,OAAO,GAAG,MAAM,IAAA,kBAAa,EAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QACzD,uBAAuB;QACvB,IAAI,OAAO,EAAE;YACX,MAAM,GAAG,GAAG,MAAM,IAAA,4BAAkB,EAClC,OAAO,EACP,OAAO,EACP,WAAW,EACX,MAAM,CACP,CAAC;YACF,IAAI,GAAG,EAAE;gBACP,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;oBACvD,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC;iBAClC;gBACD,YAAY,CAAC,IAAI,CAAC;oBAChB,WAAW;oBACX,GAAG,GAAG;iBACP,CAAC,CAAC;aACJ;SACF;aAAM;YACL,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,4BAA4B,CAAC,CAAC;SAC7D;KACF;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AA5DD,wDA4DC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport {\n  extractAllPackageFiles,\n  extractPackageFile,\n  get,\n} from '../../../modules/manager';\nimport type { PackageFile } from '../../../modules/manager/types';\nimport { readLocalFile } from '../../../util/fs';\nimport type { WorkerExtractConfig } from '../../types';\n\nexport async function getManagerPackageFiles(\n  config: WorkerExtractConfig\n): Promise<PackageFile[] | null> {\n  const { enabled, manager, fileList } = config;\n  logger.trace(`getPackageFiles(${manager})`);\n  if (!enabled) {\n    logger.debug(`${manager} is disabled`);\n    return [];\n  }\n  // istanbul ignore else\n  if (is.nonEmptyArray(fileList)) {\n    logger.debug(\n      `Matched ${\n        fileList.length\n      } file(s) for manager ${manager}: ${fileList.join(', ')}`\n    );\n  } else {\n    return [];\n  }\n  // Extract package files synchronously if manager requires it\n  if (get(manager, 'extractAllPackageFiles')) {\n    const allPackageFiles = await extractAllPackageFiles(\n      manager,\n      config,\n      fileList\n    );\n    if (allPackageFiles) {\n      for (const packageFile of allPackageFiles) {\n        for (let index = 0; index < packageFile.deps.length; index += 1) {\n          packageFile.deps[index].depIndex = index;\n        }\n      }\n    }\n    return allPackageFiles;\n  }\n  const packageFiles: PackageFile[] = [];\n  for (const packageFile of fileList) {\n    const content = await readLocalFile(packageFile, 'utf8');\n    // istanbul ignore else\n    if (content) {\n      const res = await extractPackageFile(\n        manager,\n        content,\n        packageFile,\n        config\n      );\n      if (res) {\n        for (let index = 0; index < res.deps.length; index += 1) {\n          res.deps[index].depIndex = index;\n        }\n        packageFiles.push({\n          packageFile,\n          ...res,\n        });\n      }\n    } else {\n      logger.debug({ packageFile }, 'packageFile has no content');\n    }\n  }\n  return packageFiles;\n}\n"]}