{"version":3,"file":"dependency-dashboard.js","sourceRoot":"","sources":["../../../lib/workers/repository/dependency-dashboard.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #7154\nimport is from '@sindresorhus/is';\nimport { nameFromLevel } from 'bunyan';\nimport { GlobalConfig } from '../../config/global';\nimport type { RenovateConfig } from '../../config/types';\nimport { getProblems, logger } from '../../logger';\nimport type { PackageFile } from '../../modules/manager/types';\nimport { platform } from '../../modules/platform';\nimport { regEx } from '../../util/regex';\nimport * as template from '../../util/template';\nimport { BranchConfig, BranchResult, SelectAllConfig } from '../types';\nimport { getDepWarningsDashboard } from './errors-warnings';\nimport { PackageFiles } from './package-files';\n\ninterface DependencyDashboard {\n  dependencyDashboardChecks: Record<string, string>;\n  dependencyDashboardRebaseAllOpen: boolean;\n}\n\nfunction checkRebaseAll(issueBody: string): boolean {\n  return issueBody.includes(' - [x] <!-- rebase-all-open-prs -->');\n}\n\nfunction getCheckedBranches(issueBody: string): Record<string, string> {\n  const checkMatch = /- \\[x\\] <!-- ([a-zA-Z]+)-branch=([^\\s]+) -->/g;\n  const dependencyDashboardChecks: Record<string, string> = {};\n  for (const [, type, branchName] of issueBody.matchAll(regEx(checkMatch))) {\n    dependencyDashboardChecks[branchName] = type;\n  }\n  return dependencyDashboardChecks;\n}\n\nfunction parseDashboardIssue(issueBody: string): DependencyDashboard {\n  const dependencyDashboardChecks = getCheckedBranches(issueBody);\n  const dependencyDashboardRebaseAllOpen = checkRebaseAll(issueBody);\n  return {\n    dependencyDashboardChecks,\n    dependencyDashboardRebaseAllOpen,\n  };\n}\n\nexport async function readDashboardBody(\n  config: SelectAllConfig\n): Promise<void> {\n  config.dependencyDashboardChecks = {};\n  const stringifiedConfig = JSON.stringify(config);\n  if (\n    config.dependencyDashboard ||\n    stringifiedConfig.includes('\"dependencyDashboardApproval\":true') ||\n    stringifiedConfig.includes('\"prCreation\":\"approval\"')\n  ) {\n    config.dependencyDashboardTitle =\n      config.dependencyDashboardTitle ?? `Dependency Dashboard`;\n    const issue = await platform.findIssue(config.dependencyDashboardTitle);\n    if (issue) {\n      config.dependencyDashboardIssue = issue.number;\n      Object.assign(config, parseDashboardIssue(issue.body!));\n    }\n  }\n}\n\nfunction getListItem(branch: BranchConfig, type: string): string {\n  let item = ' - [ ] ';\n  item += `<!-- ${type}-branch=${branch.branchName} -->`;\n  if (branch.prNo) {\n    // TODO: types (#7154)\n    item += `[${branch.prTitle!}](../pull/${branch.prNo})`;\n  } else {\n    item += branch.prTitle;\n  }\n  const uniquePackages = [\n    // TODO: types (#7154)\n    ...new Set(branch.upgrades.map((upgrade) => `\\`${upgrade.depName!}\\``)),\n  ];\n  if (uniquePackages.length < 2) {\n    return item + '\\n';\n  }\n  return item + ' (' + uniquePackages.join(', ') + ')\\n';\n}\n\nfunction appendRepoProblems(config: RenovateConfig, issueBody: string): string {\n  let newIssueBody = issueBody;\n  const repoProblems = new Set(\n    getProblems()\n      .filter(\n        (problem) =>\n          problem.repository === config.repository && !problem.artifactErrors\n      )\n      .map(\n        (problem) =>\n          `${nameFromLevel[problem.level].toUpperCase()}: ${problem.msg}`\n      )\n  );\n  if (repoProblems.size) {\n    newIssueBody += '## Repository problems\\n\\n';\n    newIssueBody +=\n      'These problems occurred while renovating this repository.\\n\\n';\n    for (const repoProblem of repoProblems) {\n      newIssueBody += ` - ${repoProblem}\\n`;\n    }\n    newIssueBody += '\\n';\n  }\n  return newIssueBody;\n}\n\nexport async function ensureDependencyDashboard(\n  config: SelectAllConfig,\n  allBranches: BranchConfig[],\n  packageFiles: Record<string, PackageFile[]> = {}\n): Promise<void> {\n  // legacy/migrated issue\n  const reuseTitle = 'Update Dependencies (Renovate Bot)';\n  const branches = allBranches.filter(\n    (branch) =>\n      branch.result !== BranchResult.Automerged &&\n      !branch.upgrades?.every((upgrade) => upgrade.remediationNotPossible)\n  );\n  if (\n    !(\n      config.dependencyDashboard ||\n      config.dependencyDashboardApproval ||\n      config.packageRules?.some((rule) => rule.dependencyDashboardApproval) ||\n      branches.some(\n        (branch) =>\n          !!branch.dependencyDashboardApproval ||\n          !!branch.dependencyDashboardPrApproval\n      )\n    )\n  ) {\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        { title: config.dependencyDashboardTitle },\n        'DRY-RUN: Would close Dependency Dashboard'\n      );\n    } else {\n      logger.debug('Closing Dependency Dashboard');\n      await platform.ensureIssueClosing(config.dependencyDashboardTitle!);\n    }\n    return;\n  }\n  // istanbul ignore if\n  if (config.repoIsOnboarded === false) {\n    logger.debug('Repo is onboarding - skipping dependency dashboard');\n    return;\n  }\n  logger.debug('Ensuring Dependency Dashboard');\n  const hasBranches = is.nonEmptyArray(branches);\n  if (config.dependencyDashboardAutoclose && !hasBranches) {\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        { title: config.dependencyDashboardTitle },\n        'DRY-RUN: Would close Dependency Dashboard'\n      );\n    } else {\n      logger.debug('Closing Dependency Dashboard');\n      await platform.ensureIssueClosing(config.dependencyDashboardTitle!);\n    }\n    return;\n  }\n  let issueBody = '';\n  if (config.dependencyDashboardHeader?.length) {\n    issueBody +=\n      template.compile(config.dependencyDashboardHeader, config) + '\\n\\n';\n  }\n\n  issueBody = appendRepoProblems(config, issueBody);\n\n  const pendingApprovals = branches.filter(\n    (branch) => branch.result === BranchResult.NeedsApproval\n  );\n  if (pendingApprovals.length) {\n    issueBody += '## Pending Approval\\n\\n';\n    issueBody += `These branches will be created by Renovate only once you click their checkbox below.\\n\\n`;\n    for (const branch of pendingApprovals) {\n      issueBody += getListItem(branch, 'approve');\n    }\n    issueBody += '\\n';\n  }\n  const awaitingSchedule = branches.filter(\n    (branch) => branch.result === BranchResult.NotScheduled\n  );\n  if (awaitingSchedule.length) {\n    issueBody += '## Awaiting Schedule\\n\\n';\n    issueBody +=\n      'These updates are awaiting their schedule. Click on a checkbox to get an update now.\\n\\n';\n    for (const branch of awaitingSchedule) {\n      issueBody += getListItem(branch, 'unschedule');\n    }\n    issueBody += '\\n';\n  }\n  const rateLimited = branches.filter(\n    (branch) =>\n      branch.result === BranchResult.BranchLimitReached ||\n      branch.result === BranchResult.PrLimitReached ||\n      branch.result === BranchResult.CommitLimitReached\n  );\n  if (rateLimited.length) {\n    issueBody += '## Rate Limited\\n\\n';\n    issueBody +=\n      'These updates are currently rate limited. Click on a checkbox below to force their creation now.\\n\\n';\n    for (const branch of rateLimited) {\n      issueBody += getListItem(branch, 'unlimit');\n    }\n    issueBody += '\\n';\n  }\n  const errorList = branches.filter(\n    (branch) => branch.result === BranchResult.Error\n  );\n  if (errorList.length) {\n    issueBody += '## Errored\\n\\n';\n    issueBody +=\n      'These updates encountered an error and will be retried. Click on a checkbox below to force a retry now.\\n\\n';\n    for (const branch of errorList) {\n      issueBody += getListItem(branch, 'retry');\n    }\n    issueBody += '\\n';\n  }\n  const awaitingPr = branches.filter(\n    (branch) => branch.result === BranchResult.NeedsPrApproval\n  );\n  if (awaitingPr.length) {\n    issueBody += '## PR Creation Approval Required\\n\\n';\n    issueBody +=\n      \"These branches exist but PRs won't be created until you approve them by clicking on a checkbox.\\n\\n\";\n    for (const branch of awaitingPr) {\n      issueBody += getListItem(branch, 'approvePr');\n    }\n    issueBody += '\\n';\n  }\n  const prEdited = branches.filter(\n    (branch) => branch.result === BranchResult.PrEdited\n  );\n  if (prEdited.length) {\n    issueBody += '## Edited/Blocked\\n\\n';\n    issueBody += `These updates have been manually edited so Renovate will no longer make changes. To discard all commits and start over, click on a checkbox.\\n\\n`;\n    for (const branch of prEdited) {\n      issueBody += getListItem(branch, 'rebase');\n    }\n    issueBody += '\\n';\n  }\n  const prPending = branches.filter(\n    (branch) => branch.result === BranchResult.Pending\n  );\n  if (prPending.length) {\n    issueBody += '## Pending Status Checks\\n\\n';\n    issueBody += `These updates await pending status checks. To force their creation now, click the checkbox below.\\n\\n`;\n    for (const branch of prPending) {\n      issueBody += getListItem(branch, 'approvePr');\n    }\n    issueBody += '\\n';\n  }\n  const prPendingBranchAutomerge = branches.filter(\n    (branch) => branch.prBlockedBy === 'BranchAutomerge'\n  );\n  if (prPendingBranchAutomerge.length) {\n    issueBody += '## Pending Branch Automerge\\n\\n';\n    issueBody += `These updates await pending status checks before automerging. Click on a checkbox to abort the branch automerge, and create a PR instead.\\n\\n`;\n    for (const branch of prPendingBranchAutomerge) {\n      issueBody += getListItem(branch, 'approvePr');\n    }\n    issueBody += '\\n';\n  }\n\n  const warn = getDepWarningsDashboard(packageFiles);\n  if (warn) {\n    issueBody += warn;\n    issueBody += '\\n';\n  }\n\n  const otherRes = [\n    BranchResult.Pending,\n    BranchResult.NeedsApproval,\n    BranchResult.NeedsPrApproval,\n    BranchResult.NotScheduled,\n    BranchResult.PrLimitReached,\n    BranchResult.CommitLimitReached,\n    BranchResult.BranchLimitReached,\n    BranchResult.AlreadyExisted,\n    BranchResult.Error,\n    BranchResult.Automerged,\n    BranchResult.PrEdited,\n  ];\n  let inProgress = branches.filter(\n    (branch) =>\n      !otherRes.includes(branch.result!) &&\n      branch.prBlockedBy !== 'BranchAutomerge'\n  );\n  const otherBranches = inProgress.filter(\n    (branch) => !!branch.prBlockedBy || !branch.prNo\n  );\n  // istanbul ignore if\n  if (otherBranches.length) {\n    issueBody += '## Other Branches\\n\\n';\n    issueBody += `These updates are pending. To force PRs open, click the checkbox below.\\n\\n`;\n    for (const branch of otherBranches) {\n      issueBody += getListItem(branch, 'other');\n    }\n    issueBody += '\\n';\n  }\n  inProgress = inProgress.filter(\n    (branch) => branch.prNo && !branch.prBlockedBy\n  );\n  if (inProgress.length) {\n    issueBody += '## Open\\n\\n';\n    issueBody +=\n      'These updates have all been created already. Click a checkbox below to force a retry/rebase of any.\\n\\n';\n    for (const branch of inProgress) {\n      issueBody += getListItem(branch, 'rebase');\n    }\n    if (inProgress.length > 2) {\n      issueBody += ' - [ ] ';\n      issueBody += '<!-- rebase-all-open-prs -->';\n      issueBody += '**Click on this checkbox to rebase all open PRs at once**';\n      issueBody += '\\n';\n    }\n    issueBody += '\\n';\n  }\n  const alreadyExisted = branches.filter(\n    (branch) => branch.result === BranchResult.AlreadyExisted\n  );\n  if (alreadyExisted.length) {\n    issueBody += '## Ignored or Blocked\\n\\n';\n    issueBody +=\n      'These are blocked by an existing closed PR and will not be recreated unless you click a checkbox below.\\n\\n';\n    for (const branch of alreadyExisted) {\n      issueBody += getListItem(branch, 'recreate');\n    }\n    issueBody += '\\n';\n  }\n\n  if (!hasBranches) {\n    issueBody +=\n      'This repository currently has no open or pending branches.\\n\\n';\n  }\n\n  issueBody += PackageFiles.getDashboardMarkdown(config);\n\n  if (config.dependencyDashboardFooter?.length) {\n    issueBody +=\n      '---\\n' +\n      template.compile(config.dependencyDashboardFooter, config) +\n      '\\n';\n  }\n\n  if (config.dependencyDashboardIssue) {\n    const updatedIssue = await platform.getIssue?.(\n      config.dependencyDashboardIssue,\n      false\n    );\n    if (updatedIssue) {\n      const { dependencyDashboardChecks } = parseDashboardIssue(\n        updatedIssue.body!\n      );\n      for (const branchName of Object.keys(config.dependencyDashboardChecks!)) {\n        delete dependencyDashboardChecks[branchName];\n      }\n      for (const branchName of Object.keys(dependencyDashboardChecks)) {\n        const checkText = `- [ ] <!-- ${dependencyDashboardChecks[branchName]}-branch=${branchName} -->`;\n        issueBody = issueBody.replace(\n          checkText,\n          checkText.replace('[ ]', '[x]')\n        );\n      }\n    }\n  }\n\n  if (GlobalConfig.get('dryRun')) {\n    logger.info(\n      { title: config.dependencyDashboardTitle },\n      'DRY-RUN: Would ensure Dependency Dashboard'\n    );\n  } else {\n    await platform.ensureIssue({\n      title: config.dependencyDashboardTitle!,\n      reuseTitle,\n      body: platform.massageMarkdown(issueBody),\n      labels: config.dependencyDashboardLabels,\n      confidential: config.confidential,\n    });\n  }\n}\n"]}