{"version":3,"file":"flatten.js","sourceRoot":"","sources":["../../../../lib/workers/repository/updates/flatten.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  filterConfig,\n  getManagerConfig,\n  mergeChildConfig,\n} from '../../../config';\nimport type { RenovateConfig } from '../../../config/types';\nimport { getDefaultConfig } from '../../../modules/datasource';\nimport { get } from '../../../modules/manager';\nimport { applyPackageRules } from '../../../util/package-rules';\nimport { regEx } from '../../../util/regex';\nimport { parseUrl } from '../../../util/url';\nimport type { BranchUpgradeConfig } from '../../types';\nimport { generateBranchName } from './branch-name';\n\nconst upper = (str: string): string =>\n  str.charAt(0).toUpperCase() + str.substring(1);\n\nfunction sanitizeDepName(depName: string): string {\n  return depName\n    .replace('@types/', '')\n    .replace('@', '')\n    .replace(regEx(/\\//g), '-')\n    .replace(regEx(/\\s+/g), '-')\n    .replace(regEx(/-+/), '-')\n    .toLowerCase();\n}\n\nexport function applyUpdateConfig(input: BranchUpgradeConfig): any {\n  const updateConfig = { ...input };\n  delete updateConfig.packageRules;\n  // TODO: Remove next line once #8075 is complete\n  updateConfig.depNameSanitized = updateConfig.depName\n    ? sanitizeDepName(updateConfig.depName)\n    : undefined;\n  updateConfig.newNameSanitized = updateConfig.newName\n    ? sanitizeDepName(updateConfig.newName)\n    : undefined;\n  if (updateConfig.sourceUrl) {\n    const parsedSourceUrl = parseUrl(updateConfig.sourceUrl);\n    if (parsedSourceUrl?.pathname) {\n      updateConfig.sourceRepoSlug = parsedSourceUrl.pathname\n        .replace(regEx(/^\\//), '') // remove leading slash\n        .replace(regEx(/\\//g), '-') // change slashes to hyphens\n        .replace(regEx(/-+/g), '-'); // remove multiple hyphens\n      updateConfig.sourceRepo = parsedSourceUrl.pathname.replace(\n        regEx(/^\\//),\n        ''\n      ); // remove leading slash\n      updateConfig.sourceRepoOrg = updateConfig.sourceRepo.replace(\n        regEx(/\\/.*/g),\n        ''\n      ); // remove everything after first slash\n      updateConfig.sourceRepoName = updateConfig.sourceRepo.replace(\n        regEx(/.*\\//g),\n        ''\n      ); // remove everything up to the last slash\n    }\n  }\n  generateBranchName(updateConfig);\n  return updateConfig;\n}\n\nexport async function flattenUpdates(\n  config: RenovateConfig,\n  packageFiles: Record<string, any[]>\n): Promise<RenovateConfig[]> {\n  const updates = [];\n  const updateTypes = [\n    'major',\n    'minor',\n    'patch',\n    'pin',\n    'digest',\n    'lockFileMaintenance',\n    'replacement',\n  ];\n  for (const [manager, files] of Object.entries(packageFiles)) {\n    const managerConfig = getManagerConfig(config, manager);\n    for (const packageFile of files) {\n      const packageFileConfig = mergeChildConfig(managerConfig, packageFile);\n      const packagePath = packageFile.packageFile?.split('/');\n      // istanbul ignore else: can never happen and would throw\n      if (packagePath.length > 0) {\n        packagePath.splice(-1, 1);\n      }\n      if (packagePath.length > 0) {\n        packageFileConfig.parentDir = packagePath[packagePath.length - 1];\n        packageFileConfig.packageFileDir = packagePath.join('/');\n      } else {\n        packageFileConfig.parentDir = '';\n        packageFileConfig.packageFileDir = '';\n      }\n      for (const dep of packageFile.deps) {\n        if (dep.updates.length) {\n          const depConfig = mergeChildConfig(packageFileConfig, dep);\n          delete depConfig.deps;\n          for (const update of dep.updates) {\n            let updateConfig = mergeChildConfig(depConfig, update);\n            delete updateConfig.updates;\n            if (updateConfig.updateType) {\n              updateConfig[`is${upper(updateConfig.updateType)}`] = true;\n            }\n            if (updateConfig.updateTypes) {\n              updateConfig.updateTypes.forEach((updateType: string) => {\n                updateConfig[`is${upper(updateType)}`] = true;\n              });\n            }\n            // apply config from datasource\n            const datasourceConfig = await getDefaultConfig(\n              depConfig.datasource\n            );\n            updateConfig = mergeChildConfig(updateConfig, datasourceConfig);\n            updateConfig = applyPackageRules(updateConfig);\n            // apply major/minor/patch/pin/digest\n            updateConfig = mergeChildConfig(\n              updateConfig,\n              updateConfig[updateConfig.updateType]\n            );\n            for (const updateType of updateTypes) {\n              delete updateConfig[updateType];\n            }\n            // Apply again in case any were added by the updateType config\n            updateConfig = applyPackageRules(updateConfig);\n            updateConfig = applyUpdateConfig(updateConfig);\n            updateConfig.baseDeps = packageFile.deps;\n            update.branchName = updateConfig.branchName;\n            updates.push(updateConfig);\n          }\n        }\n      }\n      if (\n        get(manager, 'supportsLockFileMaintenance') &&\n        packageFileConfig.lockFileMaintenance.enabled\n      ) {\n        // Apply lockFileMaintenance config before packageRules\n        let lockFileConfig = mergeChildConfig(\n          packageFileConfig,\n          packageFileConfig.lockFileMaintenance\n        );\n        lockFileConfig.updateType = 'lockFileMaintenance';\n        lockFileConfig.isLockFileMaintenance = true;\n        lockFileConfig = applyPackageRules(lockFileConfig);\n        // Apply lockFileMaintenance and packageRules again\n        lockFileConfig = mergeChildConfig(\n          lockFileConfig,\n          lockFileConfig.lockFileMaintenance\n        );\n        lockFileConfig = applyPackageRules(lockFileConfig);\n        // Remove unnecessary objects\n        for (const updateType of updateTypes) {\n          delete lockFileConfig[updateType];\n        }\n        delete lockFileConfig.packageRules;\n        delete lockFileConfig.deps;\n        generateBranchName(lockFileConfig);\n        updates.push(lockFileConfig);\n      }\n      if (get(manager, 'updateLockedDependency')) {\n        for (const lockFile of packageFileConfig.lockFiles || []) {\n          const lockfileRemediations = config.remediations as Record<\n            string,\n            Record<string, any>[]\n          >;\n          const remediations = lockfileRemediations?.[lockFile];\n          if (remediations) {\n            for (const remediation of remediations) {\n              let updateConfig = mergeChildConfig(\n                packageFileConfig,\n                remediation\n              );\n              updateConfig = mergeChildConfig(\n                updateConfig,\n                config.vulnerabilityAlerts\n              );\n              delete updateConfig.vulnerabilityAlerts;\n              updateConfig.isVulnerabilityAlert = true;\n              updateConfig.isRemediation = true;\n              updateConfig.lockFile = lockFile;\n              updateConfig.currentValue = updateConfig.currentVersion;\n              updateConfig.newValue = updateConfig.newVersion;\n              updateConfig = applyUpdateConfig(updateConfig);\n              updateConfig.enabled = true;\n              updates.push(updateConfig);\n            }\n          }\n        }\n      }\n    }\n  }\n  return updates\n    .filter((update) => update.enabled)\n    .map(({ vulnerabilityAlerts, ...update }) => update)\n    .map((update) => filterConfig(update, 'branch'));\n}\n"]}