{"version":3,"file":"branchify.js","sourceRoot":"","sources":["../../../../lib/workers/repository/updates/branchify.ts"],"names":[],"mappings":";;;AAGA,4CAA8D;AAE9D,4CAA+C;AAC/C,uCAA2C;AAC3C,yCAAkD;AAS3C,KAAK,UAAU,iBAAiB,CACrC,MAAsB,EACtB,YAAmC;IAEnC,eAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAClC,MAAM,OAAO,GAAG,MAAM,IAAA,wBAAc,EAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IAC3D,eAAM,CAAC,KAAK,CACV,GAAG,OAAO,CAAC,MAAM,6BAA6B,OAAO;SAClD,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;SACrB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC;SACnC,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,CAAC;IACF,MAAM,MAAM,GAAwB,EAAE,CAAC;IACvC,MAAM,QAAQ,GAAwB,EAAE,CAAC;IACzC,MAAM,cAAc,GAA0C,EAAE,CAAC;IACjE,MAAM,QAAQ,GAAmB,EAAE,CAAC;IACpC,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;QACvB,MAAM,MAAM,GAAwB,EAAE,GAAG,CAAC,EAAS,CAAC;QACpD,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QAC5E,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CACjD,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAClC,CAAC;KACH;IACD,eAAM,CAAC,KAAK,CAAC,aAAa,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,aAAa,CAAC,CAAC;IAC3E,IAAI,MAAM,CAAC,iBAAiB,EAAE;QAC5B,MAAM,IAAA,2BAAe,EAAC,cAAc,CAAC,CAAC;KACvC;IACD,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;QACpD,8DAA8D;QAC9D,IAAA,gBAAO,EAAC;YACN,MAAM,EAAE,UAAU;SACnB,CAAC,CAAC;QACH,MAAM,WAAW,GAA2B,EAAE,CAAC;QAC/C,wBAAwB;QACxB,cAAc,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC,UAAU,CAAC;aACpD,OAAO,EAAE;aACT,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;YAClB,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,GAC7D,OAAO,CAAC;YACV,sBAAsB;YACtB,MAAM,UAAU,GAAG,GAAG,WAAY,IAAI,OAAQ,IAAI,YAAa,EAAE,CAAC;YAClE,MAAM,gBAAgB,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,gBAAgB,IAAI,gBAAgB,KAAK,QAAQ,EAAE;gBACrD,eAAM,CAAC,IAAI,CACT;oBACE,OAAO;oBACP,WAAW;oBACX,OAAO;oBACP,YAAY;oBACZ,gBAAgB;oBAChB,YAAY,EAAE,QAAQ;iBACvB,EACD,4BAA4B,CAC7B,CAAC;gBACF,OAAO,KAAK,CAAC;aACd;YACD,WAAW,CAAC,UAAU,CAAC,GAAG,QAAS,CAAC;YACpC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;aACD,OAAO,EAAE,CAAC;QACb,MAAM,MAAM,GAAG,IAAA,+BAAoB,EAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;QAC/B,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;QACnC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACvB;IACD,IAAA,mBAAU,EAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvB,sBAAsB;IACtB,eAAM,CAAC,KAAK,CAAC,0BAA0B,MAAM,CAAC,eAAgB,EAAE,CAAC,CAAC;IAClE,MAAM,UAAU,GAAG,MAAM,CAAC,eAAe;QACvC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC;QAC/C,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;IACtB,uBAAuB;IACvB,IAAI;QACF,+DAA+D;QAC/D,4CAA4C;QAC5C,MAAM,aAAa,GAA2C,EAAE,CAAC;QACjE,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;YAC7B,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;YAC9D,IAAI,SAAS,IAAI,UAAU,EAAE;gBAC3B,MAAM,GAAG,GAAG,GAAG,SAAS,IAAI,UAAU,EAAE,CAAC;gBACzC,aAAa,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;gBAC9C,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,EAAE;oBACnC,aAAa,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,GAAG,OAAQ,CAAC;iBAC3C;aACF;SACF;QACD,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YACxD,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC/C,eAAM,CAAC,KAAK,CACV,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,EAC1C,sFAAsF,CACvF,CAAC;aACH;SACF;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;KAC3D;IACD,OAAO;QACL,MAAM,EAAE,MAAM,CAAC,MAAO,CAAC,MAAM,CAAC,MAAM,CAAC;QACrC,QAAQ,EAAE,MAAM,CAAC,QAAS,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC3C,QAAQ;QACR,UAAU,EAAE,UAAW;KACxB,CAAC;AACJ,CAAC;AAxGD,8CAwGC","sourcesContent":["// TODO #7154\nimport type { Merge } from 'type-fest';\nimport type { RenovateConfig, ValidationMessage } from '../../../config/types';\nimport { addMeta, logger, removeMeta } from '../../../logger';\nimport type { BranchConfig, BranchUpgradeConfig } from '../../types';\nimport { embedChangelogs } from '../changelog';\nimport { flattenUpdates } from './flatten';\nimport { generateBranchConfig } from './generate';\n\nexport type BranchifiedConfig = Merge<\n  RenovateConfig,\n  {\n    branches: BranchConfig[];\n    branchList: string[];\n  }\n>;\nexport async function branchifyUpgrades(\n  config: RenovateConfig,\n  packageFiles: Record<string, any[]>\n): Promise<BranchifiedConfig> {\n  logger.debug('branchifyUpgrades');\n  const updates = await flattenUpdates(config, packageFiles);\n  logger.debug(\n    `${updates.length} flattened updates found: ${updates\n      .map((u) => u.depName)\n      .filter((txt) => txt?.trim().length)\n      .join(', ')}`\n  );\n  const errors: ValidationMessage[] = [];\n  const warnings: ValidationMessage[] = [];\n  const branchUpgrades: Record<string, BranchUpgradeConfig[]> = {};\n  const branches: BranchConfig[] = [];\n  for (const u of updates) {\n    const update: BranchUpgradeConfig = { ...u } as any;\n    branchUpgrades[update.branchName] = branchUpgrades[update.branchName] || [];\n    branchUpgrades[update.branchName] = [update].concat(\n      branchUpgrades[update.branchName]\n    );\n  }\n  logger.debug(`Returning ${Object.keys(branchUpgrades).length} branch(es)`);\n  if (config.fetchReleaseNotes) {\n    await embedChangelogs(branchUpgrades);\n  }\n  for (const branchName of Object.keys(branchUpgrades)) {\n    // Add branch name to metadata before generating branch config\n    addMeta({\n      branch: branchName,\n    });\n    const seenUpdates: Record<string, string> = {};\n    // Filter out duplicates\n    branchUpgrades[branchName] = branchUpgrades[branchName]\n      .reverse()\n      .filter((upgrade) => {\n        const { manager, packageFile, depName, currentValue, newValue } =\n          upgrade;\n        // TODO: types (#7154)\n        const upgradeKey = `${packageFile!}:${depName!}:${currentValue!}`;\n        const previousNewValue = seenUpdates[upgradeKey];\n        if (previousNewValue && previousNewValue !== newValue) {\n          logger.info(\n            {\n              manager,\n              packageFile,\n              depName,\n              currentValue,\n              previousNewValue,\n              thisNewValue: newValue,\n            },\n            'Ignoring upgrade collision'\n          );\n          return false;\n        }\n        seenUpdates[upgradeKey] = newValue!;\n        return true;\n      })\n      .reverse();\n    const branch = generateBranchConfig(branchUpgrades[branchName]);\n    branch.branchName = branchName;\n    branch.packageFiles = packageFiles;\n    branches.push(branch);\n  }\n  removeMeta(['branch']);\n  // TODO: types (#7154)\n  logger.debug(`config.repoIsOnboarded=${config.repoIsOnboarded!}`);\n  const branchList = config.repoIsOnboarded\n    ? branches.map((upgrade) => upgrade.branchName)\n    : config.branchList;\n  // istanbul ignore next\n  try {\n    // Here we check if there are updates from the same source repo\n    // that are not grouped into the same branch\n    const branchUpdates: Record<string, Record<string, string>> = {};\n    for (const branch of branches) {\n      const { sourceUrl, branchName, depName, newVersion } = branch;\n      if (sourceUrl && newVersion) {\n        const key = `${sourceUrl}|${newVersion}`;\n        branchUpdates[key] = branchUpdates[key] || {};\n        if (!branchUpdates[key][branchName]) {\n          branchUpdates[key][branchName] = depName!;\n        }\n      }\n    }\n    for (const [key, value] of Object.entries(branchUpdates)) {\n      if (Object.keys(value).length > 1) {\n        const [sourceUrl, newVersion] = key.split('|');\n        logger.debug(\n          { sourceUrl, newVersion, branches: value },\n          'Found sourceUrl with multiple branches that should probably be combined into a group'\n        );\n      }\n    }\n  } catch (err) {\n    logger.debug({ err }, 'Error checking branch duplicates');\n  }\n  return {\n    errors: config.errors!.concat(errors),\n    warnings: config.warnings!.concat(warnings),\n    branches,\n    branchList: branchList!,\n  };\n}\n"]}