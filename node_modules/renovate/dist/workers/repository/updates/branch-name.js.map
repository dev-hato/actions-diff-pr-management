{"version":3,"file":"branch-name.js","sourceRoot":"","sources":["../../../../lib/workers/repository/updates/branch-name.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #7154\nimport cleanGitRef from 'clean-git-ref';\nimport hasha from 'hasha';\nimport slugify from 'slugify';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport * as template from '../../../util/template';\n\nconst MIN_HASH_LENGTH = 6;\n\nconst RE_MULTIPLE_DASH = regEx(/--+/g);\n/**\n * Clean git branch name\n *\n * Remove what clean-git-ref fails to:\n * - leading dot/leading dot after slash\n * - trailing dot\n * - whitespace\n * - chained dashes(breaks markdown comments) are replaced by single dash\n */\nfunction cleanBranchName(branchName: string): string {\n  return cleanGitRef\n    .clean(branchName)\n    .replace(regEx(/^\\.|\\.$/), '') // leading or trailing dot\n    .replace(regEx(/\\/\\./g), '/') // leading dot after slash\n    .replace(regEx(/\\s/g), '') // whitespace\n    .replace(regEx(/[[\\]?:\\\\^~]/g), '-') // massage out all these characters: : ? [ \\ ^ ~\n    .replace(regEx(/(^|\\/)-+/g), '$1') // leading dashes\n    .replace(regEx(/-+(\\/|$)/g), '$1') // trailing dashes\n    .replace(RE_MULTIPLE_DASH, '-'); // chained dashes\n}\n\nexport function generateBranchName(update: RenovateConfig): void {\n  // Check whether to use a group name\n  if (update.groupName) {\n    logger.debug('Using group branchName template');\n    // TODO: types (#7154)\n    logger.debug(\n      `Dependency ${update.depName!} is part of group ${update.groupName}`\n    );\n    update.groupSlug = slugify(update.groupSlug ?? update.groupName, {\n      lower: true,\n    });\n    if (update.updateType === 'major' && update.separateMajorMinor) {\n      if (update.separateMultipleMajor) {\n        const newMajor = String(update.newMajor);\n        update.groupSlug = `major-${newMajor}-${update.groupSlug}`;\n      } else {\n        update.groupSlug = `major-${update.groupSlug}`;\n      }\n    }\n    if (update.updateType === 'patch' && update.separateMinorPatch) {\n      update.groupSlug = `patch-${update.groupSlug}`;\n    }\n    update.branchTopic = update.group!.branchTopic ?? update.branchTopic;\n    update.branchName = update.group!.branchName ?? update.branchName;\n  }\n\n  if (update.hashedBranchLength) {\n    let hashLength = update.hashedBranchLength - update.branchPrefix!.length;\n    if (hashLength < MIN_HASH_LENGTH) {\n      logger.warn(\n        `\\`hashedBranchLength\\` must allow for at least ${MIN_HASH_LENGTH} characters hashing in addition to \\`branchPrefix\\`. Using ${MIN_HASH_LENGTH} character hash instead.`\n      );\n      hashLength = MIN_HASH_LENGTH;\n    }\n\n    const additionalBranchPrefix = template.compile(\n      String(update.additionalBranchPrefix || ''),\n      update\n    );\n\n    const branchTopic = template.compile(\n      String(update.branchTopic || ''),\n      update\n    );\n\n    let hashInput = additionalBranchPrefix + branchTopic;\n\n    // Compile extra times in case of nested templates\n    hashInput = template.compile(hashInput, update);\n    hashInput = template.compile(hashInput, update);\n\n    const hash = hasha(hashInput);\n\n    // TODO: types (#7154)\n    update.branchName = `${update.branchPrefix!}${hash.slice(0, hashLength)}`;\n  } else {\n    update.branchName = template.compile(update.branchName!, update);\n\n    // Compile extra times in case of nested templates\n    update.branchName = template.compile(update.branchName, update);\n    update.branchName = template.compile(update.branchName, update);\n  }\n\n  update.branchName = cleanBranchName(update.branchName);\n}\n"]}