{"version":3,"file":"merge.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/merge.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport jsonValidator from 'json-dup-key-validator';\nimport JSON5 from 'json5';\nimport upath from 'upath';\nimport { mergeChildConfig } from '../../../config';\nimport { configFileNames } from '../../../config/app-strings';\nimport { decryptConfig } from '../../../config/decrypt';\nimport { migrateAndValidate } from '../../../config/migrate-validate';\nimport { migrateConfig } from '../../../config/migration';\nimport * as presets from '../../../config/presets';\nimport { applySecretsToConfig } from '../../../config/secrets';\nimport type { RenovateConfig } from '../../../config/types';\nimport {\n  CONFIG_VALIDATION,\n  REPOSITORY_CHANGED,\n} from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport * as npmApi from '../../../modules/datasource/npm';\nimport { platform } from '../../../modules/platform';\nimport { getCache } from '../../../util/cache/repository';\nimport { readLocalFile } from '../../../util/fs';\nimport { getFileList } from '../../../util/git';\nimport * as hostRules from '../../../util/host-rules';\nimport type { RepoFileConfig } from './types';\n\nexport async function detectRepoFileConfig(): Promise<RepoFileConfig> {\n  const cache = getCache();\n  let { configFileName } = cache;\n  if (configFileName) {\n    let configFileParsed = (await platform.getJsonFile(configFileName))!;\n    if (configFileParsed) {\n      if (configFileName === 'package.json') {\n        configFileParsed = configFileParsed.renovate;\n      }\n      return { configFileName, configFileParsed };\n    }\n    logger.debug('Existing config file no longer exists');\n  }\n  const fileList = await getFileList();\n  async function detectConfigFile(): Promise<string | null> {\n    for (const fileName of configFileNames) {\n      if (fileName === 'package.json') {\n        try {\n          const pJson = JSON.parse(\n            (await readLocalFile('package.json', 'utf8'))!\n          );\n          if (pJson.renovate) {\n            logger.debug('Using package.json for global renovate config');\n            return 'package.json';\n          }\n        } catch (err) {\n          // Do nothing\n        }\n      } else if (fileList.includes(fileName)) {\n        return fileName;\n      }\n    }\n    return null;\n  }\n  configFileName = (await detectConfigFile()) ?? undefined;\n  if (!configFileName) {\n    logger.debug('No renovate config file found');\n    return {};\n  }\n  cache.configFileName = configFileName;\n  logger.debug(`Found ${configFileName} config file`);\n  // TODO #7154\n  let configFileParsed: any;\n  if (configFileName === 'package.json') {\n    // We already know it parses\n    configFileParsed = JSON.parse(\n      // TODO #7154\n      (await readLocalFile('package.json', 'utf8'))!\n    ).renovate;\n    if (is.string(configFileParsed)) {\n      logger.debug('Massaging string renovate config to extends array');\n      configFileParsed = { extends: [configFileParsed] };\n    }\n    logger.debug({ config: configFileParsed }, 'package.json>renovate config');\n  } else {\n    let rawFileContents = await readLocalFile(configFileName, 'utf8');\n    // istanbul ignore if\n    if (!is.string(rawFileContents)) {\n      logger.warn({ configFileName }, 'Null contents when reading config file');\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    // istanbul ignore if\n    if (!rawFileContents.length) {\n      rawFileContents = '{}';\n    }\n\n    const fileType = upath.extname(configFileName);\n\n    if (fileType === '.json5') {\n      try {\n        configFileParsed = JSON5.parse(rawFileContents);\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug(\n          { renovateConfig: rawFileContents },\n          'Error parsing renovate config renovate.json5'\n        );\n        const validationError = 'Invalid JSON5 (parsing failed)';\n        const validationMessage = `JSON5.parse error:  ${String(err.message)}`;\n        return {\n          configFileName,\n          configFileParseError: { validationError, validationMessage },\n        };\n      }\n    } else {\n      let allowDuplicateKeys = true;\n      let jsonValidationError = jsonValidator.validate(\n        rawFileContents,\n        allowDuplicateKeys\n      );\n      if (jsonValidationError) {\n        const validationError = 'Invalid JSON (parsing failed)';\n        const validationMessage = jsonValidationError;\n        return {\n          configFileName,\n          configFileParseError: { validationError, validationMessage },\n        };\n      }\n      allowDuplicateKeys = false;\n      jsonValidationError = jsonValidator.validate(\n        rawFileContents,\n        allowDuplicateKeys\n      );\n      if (jsonValidationError) {\n        const validationError = 'Duplicate keys in JSON';\n        const validationMessage = JSON.stringify(jsonValidationError);\n        return {\n          configFileName,\n          configFileParseError: { validationError, validationMessage },\n        };\n      }\n      try {\n        configFileParsed = JSON5.parse(rawFileContents);\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug(\n          { renovateConfig: rawFileContents },\n          'Error parsing renovate config'\n        );\n        const validationError = 'Invalid JSON (parsing failed)';\n        const validationMessage = `JSON.parse error:  ${String(err.message)}`;\n        return {\n          configFileName,\n          configFileParseError: { validationError, validationMessage },\n        };\n      }\n    }\n    logger.debug(\n      { fileName: configFileName, config: configFileParsed },\n      'Repository config'\n    );\n  }\n  return { configFileName, configFileParsed };\n}\n\nexport function checkForRepoConfigError(repoConfig: RepoFileConfig): void {\n  if (!repoConfig.configFileParseError) {\n    return;\n  }\n  const error = new Error(CONFIG_VALIDATION);\n  error.validationSource = repoConfig.configFileName;\n  error.validationError = repoConfig.configFileParseError.validationError;\n  error.validationMessage = repoConfig.configFileParseError.validationMessage;\n  throw error;\n}\n\n// Check for repository config\nexport async function mergeRenovateConfig(\n  config: RenovateConfig\n): Promise<RenovateConfig> {\n  let returnConfig = { ...config };\n  let repoConfig: RepoFileConfig = {};\n  if (config.requireConfig !== 'ignored') {\n    repoConfig = await detectRepoFileConfig();\n  }\n  const configFileParsed = repoConfig?.configFileParsed || {};\n  if (is.nonEmptyArray(returnConfig.extends)) {\n    configFileParsed.extends = [\n      ...returnConfig.extends,\n      ...(configFileParsed.extends || []),\n    ];\n    delete returnConfig.extends;\n  }\n  checkForRepoConfigError(repoConfig);\n  const migratedConfig = await migrateAndValidate(config, configFileParsed);\n  if (migratedConfig.errors?.length) {\n    const error = new Error(CONFIG_VALIDATION);\n    error.validationSource = repoConfig.configFileName;\n    error.validationError =\n      'The renovate configuration file contains some invalid settings';\n    error.validationMessage = migratedConfig.errors\n      .map((e) => e.message)\n      .join(', ');\n    throw error;\n  }\n  if (migratedConfig.warnings) {\n    returnConfig.warnings = [\n      ...(returnConfig.warnings ?? []),\n      ...migratedConfig.warnings,\n    ];\n  }\n  delete migratedConfig.errors;\n  delete migratedConfig.warnings;\n  logger.debug({ config: migratedConfig }, 'migrated config');\n  // TODO #7154\n  const repository = config.repository!;\n  // Decrypt before resolving in case we need npm authentication for any presets\n  const decryptedConfig = await decryptConfig(migratedConfig, repository);\n  // istanbul ignore if\n  if (is.string(decryptedConfig.npmrc)) {\n    logger.debug('Found npmrc in decrypted config - setting');\n    npmApi.setNpmrc(decryptedConfig.npmrc);\n  }\n  // Decrypt after resolving in case the preset contains npm authentication instead\n  let resolvedConfig = await decryptConfig(\n    await presets.resolveConfigPresets(decryptedConfig, config),\n    repository\n  );\n  logger.trace({ config: resolvedConfig }, 'resolved config');\n  const migrationResult = migrateConfig(resolvedConfig);\n  if (migrationResult.isMigrated) {\n    logger.debug('Resolved config needs migrating');\n    logger.trace({ config: resolvedConfig }, 'resolved config after migrating');\n    resolvedConfig = migrationResult.migratedConfig;\n  }\n  // istanbul ignore if\n  if (is.string(resolvedConfig.npmrc)) {\n    logger.debug(\n      'Ignoring any .npmrc files in repository due to configured npmrc'\n    );\n    npmApi.setNpmrc(resolvedConfig.npmrc);\n  }\n  resolvedConfig = applySecretsToConfig(\n    resolvedConfig,\n    mergeChildConfig(config.secrets ?? {}, resolvedConfig.secrets ?? {})\n  );\n  // istanbul ignore if\n  if (resolvedConfig.hostRules) {\n    logger.debug('Setting hostRules from config');\n    for (const rule of resolvedConfig.hostRules) {\n      try {\n        hostRules.add(rule);\n      } catch (err) {\n        logger.warn(\n          { err, config: rule },\n          'Error setting hostRule from config'\n        );\n      }\n    }\n    delete resolvedConfig.hostRules;\n  }\n  returnConfig = mergeChildConfig(returnConfig, resolvedConfig);\n  returnConfig = await presets.resolveConfigPresets(returnConfig, config);\n  returnConfig.renovateJsonPresent = true;\n  // istanbul ignore if\n  if (returnConfig.ignorePaths?.length) {\n    logger.debug(\n      { ignorePaths: returnConfig.ignorePaths },\n      `Found repo ignorePaths`\n    );\n  }\n  return returnConfig;\n}\n"]}