{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { mergeChildConfig } from '../../../../config';\nimport { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport {\n  REPOSITORY_FORKED,\n  REPOSITORY_NO_PACKAGE_FILES,\n} from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { platform } from '../../../../modules/platform';\nimport { checkoutBranch, setGitAuthor } from '../../../../util/git';\nimport { extractAllDependencies } from '../../extract';\nimport { mergeRenovateConfig } from '../../init/merge';\nimport { isOnboarded, onboardingPrExists } from './check';\nimport { getOnboardingConfig } from './config';\nimport { createOnboardingBranch } from './create';\nimport { rebaseOnboardingBranch } from './rebase';\n\nexport async function checkOnboardingBranch(\n  config: RenovateConfig\n): Promise<RenovateConfig> {\n  logger.debug('checkOnboarding()');\n  logger.trace({ config });\n  let onboardingBranch = config.onboardingBranch;\n  const repoIsOnboarded = await isOnboarded(config);\n  if (repoIsOnboarded) {\n    logger.debug('Repo is onboarded');\n    return { ...config, repoIsOnboarded };\n  }\n  if (config.isFork && !config.includeForks) {\n    throw new Error(REPOSITORY_FORKED);\n  }\n  logger.debug('Repo is not onboarded');\n  // global gitAuthor will need to be used\n  setGitAuthor(config.gitAuthor);\n  if (await onboardingPrExists(config)) {\n    logger.debug('Onboarding PR already exists');\n    const commit = await rebaseOnboardingBranch(config);\n    if (commit) {\n      logger.info(\n        { branch: config.onboardingBranch, commit, onboarding: true },\n        'Branch updated'\n      );\n    }\n    // istanbul ignore if\n    if (platform.refreshPr) {\n      // TODO #7154\n      const onboardingPr = await platform.getBranchPr(config.onboardingBranch!);\n      await platform.refreshPr(onboardingPr!.number);\n    }\n  } else {\n    logger.debug('Onboarding PR does not exist');\n    const onboardingConfig = await getOnboardingConfig(config);\n    let mergedConfig = mergeChildConfig(config, onboardingConfig);\n    mergedConfig = await mergeRenovateConfig(mergedConfig);\n    onboardingBranch = mergedConfig.onboardingBranch;\n\n    if (\n      Object.entries(await extractAllDependencies(mergedConfig)).length === 0\n    ) {\n      if (!config?.onboardingNoDeps) {\n        throw new Error(REPOSITORY_NO_PACKAGE_FILES);\n      }\n    }\n    logger.debug('Need to create onboarding PR');\n    const commit = await createOnboardingBranch(mergedConfig);\n    // istanbul ignore if\n    if (commit) {\n      logger.info(\n        { branch: onboardingBranch, commit, onboarding: true },\n        'Branch created'\n      );\n    }\n  }\n  if (!GlobalConfig.get('dryRun')) {\n    logger.debug('Checkout onboarding branch.');\n    // TODO #7154\n    await checkoutBranch(onboardingBranch!);\n  }\n  // TODO #7154\n  const branchList = [onboardingBranch!];\n  return { ...config, repoIsOnboarded, onboardingBranch, branchList };\n}\n"]}