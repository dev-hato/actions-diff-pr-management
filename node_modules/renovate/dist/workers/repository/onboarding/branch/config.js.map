{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/config.ts"],"names":[],"mappings":";;;AAAA,sDAAyD;AACzD,4DAA6D;AAC7D,0DAAuE;AAKvE,+CAA4C;AAC5C,kDAA+C;AAC/C,8DAAwE;AAExE,KAAK,UAAU,mBAAmB,CAChC,MAAsB;IAEtB,IAAI,gBAAgB,GAAG,IAAA,aAAK,EAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAEtD,IAAI,SAA6B,CAAC;IAElC,eAAM,CAAC,KAAK,CACV,6EAA6E,CAC9E,CAAC;IAEF,aAAa;IACb,MAAM,OAAO,GAAG,MAAM,CAAC,UAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEjD,gCAAgC;IAChC,IAAI;QACF,MAAM,IAAI,GAAG,GAAG,OAAO,kBAAkB,CAAC;QAC1C,IAAI,MAAM,IAAA,iBAAS,EAAC,EAAE,IAAI,EAAE,CAAC,EAAE;YAC7B,SAAS,GAAG,SAAS,IAAI,EAAE,CAAC;SAC7B;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,IACE,GAAG,CAAC,OAAO,KAAK,2BAAoB;YACpC,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAC/C;YACA,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,6CAA6C,CAAC,CAAC;SACrE;KACF;IAED,IAAI,CAAC,SAAS,EAAE;QACd,8BAA8B;QAC9B,sBAAsB;QACtB,MAAM,QAAQ,GAAG,qBAAY,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC;QAC/C,IAAI;YACF,MAAM,IAAI,GAAG,GAAG,OAAO,KAAK,QAAQ,EAAE,CAAC;YACvC,MAAM,UAAU,GAAG,iBAAiB,CAAC;YACrC,IACE,MAAM,IAAA,iBAAS,EAAC;gBACd,IAAI;gBACJ,UAAU;aACX,CAAC,EACF;gBACA,SAAS,GAAG,SAAS,IAAI,IAAI,UAAU,EAAE,CAAC;aAC3C;SACF;QAAC,OAAO,GAAG,EAAE;YACZ,IACE,GAAG,CAAC,OAAO,KAAK,2BAAoB;gBACpC,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAC/C;gBACA,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,6CAA6C,CAAC,CAAC;aACrE;SACF;KACF;IAED,IAAI,SAAS,EAAE;QACb,eAAM,CAAC,KAAK,CACV,oBAAoB,SAAS,kCAAkC,CAChE,CAAC;QACF,gBAAgB,GAAG;YACjB,OAAO,EAAE,mDAAmD;YAC5D,OAAO,EAAE,CAAC,SAAS,CAAC;SACrB,CAAC;KACH;SAAM;QACL,oCAAoC;QACpC,eAAM,CAAC,KAAK,CACV,+JAA+J,CAChK,CAAC;KACH;IAED,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,EAAE,mBAAmB,CAAC,CAAC;IAChE,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAYQ,kDAAmB;AAV5B,KAAK,UAAU,2BAA2B,CACxC,MAAsB,EACtB,QAAgB;IAEhB,MAAM,UAAU,GAAG,MAAM,0BAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC9D,MAAM,UAAU,GAAG,IAAI,wBAAU,CAAC,UAAU,CAAC,CAAC;IAC9C,MAAM,gBAAgB,GAAG,MAAM,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAC3D,OAAO,UAAU,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;AAC5C,CAAC;AAE6B,kEAA2B","sourcesContent":["import { GlobalConfig } from '../../../../config/global';\nimport { getPreset } from '../../../../config/presets/local';\nimport { PRESET_DEP_NOT_FOUND } from '../../../../config/presets/util';\nimport type {\n  RenovateConfig,\n  RenovateSharedConfig,\n} from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { clone } from '../../../../util/clone';\nimport { EditorConfig, JSONWriter } from '../../../../util/json-writer';\n\nasync function getOnboardingConfig(\n  config: RenovateConfig\n): Promise<RenovateSharedConfig> {\n  let onboardingConfig = clone(config.onboardingConfig);\n\n  let orgPreset: string | undefined;\n\n  logger.debug(\n    'Checking if this org/owner has a default Renovate preset which can be used.'\n  );\n\n  // TODO #7154\n  const orgName = config.repository!.split('/')[0];\n\n  // Check for org/renovate-config\n  try {\n    const repo = `${orgName}/renovate-config`;\n    if (await getPreset({ repo })) {\n      orgPreset = `local>${repo}`;\n    }\n  } catch (err) {\n    if (\n      err.message !== PRESET_DEP_NOT_FOUND &&\n      !err.message.startsWith('Unsupported platform')\n    ) {\n      logger.warn({ err }, 'Unknown error fetching default owner preset');\n    }\n  }\n\n  if (!orgPreset) {\n    // Check for org/.{{platform}}\n    // TODO: types (#7154)\n    const platform = GlobalConfig.get('platform')!;\n    try {\n      const repo = `${orgName}/.${platform}`;\n      const presetName = 'renovate-config';\n      if (\n        await getPreset({\n          repo,\n          presetName,\n        })\n      ) {\n        orgPreset = `local>${repo}:${presetName}`;\n      }\n    } catch (err) {\n      if (\n        err.message !== PRESET_DEP_NOT_FOUND &&\n        !err.message.startsWith('Unsupported platform')\n      ) {\n        logger.warn({ err }, 'Unknown error fetching default owner preset');\n      }\n    }\n  }\n\n  if (orgPreset) {\n    logger.debug(\n      `Found org preset ${orgPreset} - using it in onboarding config`\n    );\n    onboardingConfig = {\n      $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n      extends: [orgPreset],\n    };\n  } else {\n    // Organization preset did not exist\n    logger.debug(\n      'No default org/owner preset found, so the default onboarding config will be used instead. Note: do not be concerned with any 404 messages that preceded this.'\n    );\n  }\n\n  logger.debug({ config: onboardingConfig }, 'onboarding config');\n  return onboardingConfig;\n}\n\nasync function getOnboardingConfigContents(\n  config: RenovateConfig,\n  fileName: string\n): Promise<string> {\n  const codeFormat = await EditorConfig.getCodeFormat(fileName);\n  const jsonWriter = new JSONWriter(codeFormat);\n  const onboardingConfig = await getOnboardingConfig(config);\n  return jsonWriter.write(onboardingConfig);\n}\n\nexport { getOnboardingConfig, getOnboardingConfigContents };\n"]}