{"version":3,"file":"massage-markdown-links.js","sourceRoot":"","sources":["../../../../lib/modules/platform/github/massage-markdown-links.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Content } from 'mdast';\nimport remark from 'remark';\nimport type { Plugin, Transformer } from 'unified';\nimport { logger } from '../../../logger';\nimport { hasKey } from '../../../util/object';\nimport { regEx } from '../../../util/regex';\n\ninterface UrlMatch {\n  start: number;\n  end: number;\n  replaceTo: string;\n}\n\nconst urlRegex =\n  /(?:https?:)?(?:\\/\\/)?(?:www\\.)?(?<!api\\.)(?:to)?github\\.com\\/[-_a-z0-9]+\\/[-_a-z0-9]+\\/(?:discussions|issues|pull)\\/[0-9]+(?:#[-_a-z0-9]+)?/i; // TODO #12872 (?<!re) after text not matching\n\nfunction massageLink(input: string): string {\n  return input.replace(regEx(/(?:to)?github\\.com/i), 'togithub.com');\n}\n\nfunction collectLinkPosition(input: string, matches: UrlMatch[]): Plugin {\n  const transformer = (tree: Content): void => {\n    const startOffset: number = tree.position?.start.offset ?? 0;\n    const endOffset: number = tree.position?.end.offset ?? 0;\n\n    if (tree.type === 'link') {\n      const substr = input.slice(startOffset, endOffset);\n      const url: string = tree.url;\n      const offset: number = startOffset + substr.lastIndexOf(url);\n      if (urlRegex.test(url)) {\n        matches.push({\n          start: offset,\n          end: offset + url.length,\n          replaceTo: massageLink(url),\n        });\n      }\n    } else if (tree.type === 'text') {\n      const globalUrlReg = new RegExp(urlRegex, 'gi');\n      const urlMatches = [...tree.value.matchAll(globalUrlReg)];\n      for (const match of urlMatches) {\n        const [url] = match;\n        const start = startOffset + (match.index ?? 0);\n        const end = start + url.length;\n        const newUrl = massageLink(url);\n        matches.push({ start, end, replaceTo: `[${url}](${newUrl})` });\n      }\n    } else if (hasKey('children', tree)) {\n      tree.children.forEach((child: Content) => {\n        transformer(child);\n      });\n    }\n  };\n\n  return () => transformer as Transformer;\n}\n\nexport function massageMarkdownLinks(content: string): string {\n  try {\n    const rightSpaces = content.replace(content.trimEnd(), '');\n    const matches: UrlMatch[] = [];\n    remark().use(collectLinkPosition(content, matches)).processSync(content);\n    const result = matches.reduceRight((acc, { start, end, replaceTo }) => {\n      const leftPart = acc.slice(0, start);\n      const rightPart = acc.slice(end);\n      return leftPart + replaceTo + rightPart;\n    }, content);\n    return result.trimEnd() + rightSpaces;\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, `Unable to massage markdown text`);\n    return content;\n  }\n}\n"]}