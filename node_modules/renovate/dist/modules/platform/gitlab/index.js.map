{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gitlab/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport is from '@sindresorhus/is';\nimport delay from 'delay';\nimport JSON5 from 'json5';\nimport pAll from 'p-all';\nimport semver from 'semver';\nimport { PlatformId } from '../../../constants';\nimport {\n  CONFIG_GIT_URL_UNAVAILABLE,\n  PLATFORM_AUTHENTICATION_ERROR,\n  REPOSITORY_ACCESS_FORBIDDEN,\n  REPOSITORY_ARCHIVED,\n  REPOSITORY_CHANGED,\n  REPOSITORY_DISABLED,\n  REPOSITORY_EMPTY,\n  REPOSITORY_MIRRORED,\n  REPOSITORY_NOT_FOUND,\n  TEMPORARY_ERROR,\n} from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { BranchStatus, PrState, VulnerabilityAlert } from '../../../types';\nimport * as git from '../../../util/git';\nimport * as hostRules from '../../../util/host-rules';\nimport { setBaseUrl } from '../../../util/http/gitlab';\nimport type { HttpResponse } from '../../../util/http/types';\nimport { regEx } from '../../../util/regex';\nimport { sanitize } from '../../../util/sanitize';\nimport {\n  ensureTrailingSlash,\n  getQueryString,\n  parseUrl,\n} from '../../../util/url';\nimport { getPrBodyStruct } from '../pr-body';\nimport type {\n  BranchStatusConfig,\n  CreatePRConfig,\n  EnsureCommentConfig,\n  EnsureCommentRemovalConfig,\n  EnsureIssueConfig,\n  FindPRConfig,\n  GitUrlOption,\n  Issue,\n  MergePRConfig,\n  PlatformParams,\n  PlatformPrOptions,\n  PlatformResult,\n  Pr,\n  RepoParams,\n  RepoResult,\n  UpdatePrConfig,\n} from '../types';\nimport { smartTruncate } from '../utils/pr-body';\nimport { getUserID, gitlabApi, isUserBusy } from './http';\nimport { getMR, updateMR } from './merge-request';\nimport type {\n  GitLabMergeRequest,\n  GitlabComment,\n  GitlabIssue,\n  MergeMethod,\n  RepoResponse,\n} from './types';\n\nlet config: {\n  repository: string;\n  email: string;\n  prList: any[] | undefined;\n  issueList: GitlabIssue[] | undefined;\n  mergeMethod: MergeMethod;\n  defaultBranch: string;\n  cloneSubmodules: boolean | undefined;\n  ignorePrAuthor: boolean | undefined;\n  squash: boolean;\n} = {} as any;\n\nconst defaults = {\n  hostType: PlatformId.Gitlab,\n  endpoint: 'https://gitlab.com/api/v4/',\n  version: '0.0.0',\n};\n\nconst DRAFT_PREFIX = 'Draft: ';\nconst DRAFT_PREFIX_DEPRECATED = 'WIP: ';\n\nlet draftPrefix = DRAFT_PREFIX;\n\nexport async function initPlatform({\n  endpoint,\n  token,\n  gitAuthor,\n}: PlatformParams): Promise<PlatformResult> {\n  if (!token) {\n    throw new Error('Init: You must configure a GitLab personal access token');\n  }\n  if (endpoint) {\n    defaults.endpoint = ensureTrailingSlash(endpoint);\n    setBaseUrl(defaults.endpoint);\n  } else {\n    logger.debug('Using default GitLab endpoint: ' + defaults.endpoint);\n  }\n  const platformConfig: PlatformResult = {\n    endpoint: defaults.endpoint,\n  };\n  let gitlabVersion: string;\n  try {\n    if (!gitAuthor) {\n      const user = (\n        await gitlabApi.getJson<{ email: string; name: string; id: number }>(\n          `user`,\n          { token }\n        )\n      ).body;\n      platformConfig.gitAuthor = `${user.name} <${user.email}>`;\n    }\n    // istanbul ignore if: experimental feature\n    if (process.env.RENOVATE_X_PLATFORM_VERSION) {\n      gitlabVersion = process.env.RENOVATE_X_PLATFORM_VERSION;\n    } else {\n      const version = (\n        await gitlabApi.getJson<{ version: string }>('version', { token })\n      ).body;\n      gitlabVersion = version.version;\n    }\n    logger.debug('GitLab version is: ' + gitlabVersion);\n    // version is 'x.y.z-edition', so not strictly semver; need to strip edition\n    [gitlabVersion] = gitlabVersion.split('-');\n    defaults.version = gitlabVersion;\n  } catch (err) {\n    logger.debug(\n      { err },\n      'Error authenticating with GitLab. Check that your token includes \"api\" permissions'\n    );\n    throw new Error('Init: Authentication failure');\n  }\n  draftPrefix = semver.lt(defaults.version, '13.2.0')\n    ? DRAFT_PREFIX_DEPRECATED\n    : DRAFT_PREFIX;\n\n  return platformConfig;\n}\n\n// Get all repositories that the user has access to\nexport async function getRepos(): Promise<string[]> {\n  logger.debug('Autodiscovering GitLab repositories');\n  try {\n    const url = `projects?membership=true&per_page=100&with_merge_requests_enabled=true&min_access_level=30`;\n    const res = await gitlabApi.getJson<RepoResponse[]>(url, {\n      paginate: true,\n    });\n    logger.debug(`Discovered ${res.body.length} project(s)`);\n    return res.body\n      .filter((repo) => !repo.mirror && !repo.archived)\n      .map((repo) => repo.path_with_namespace);\n  } catch (err) {\n    logger.error({ err }, `GitLab getRepos error`);\n    throw err;\n  }\n}\n\nfunction urlEscape(str: string): string {\n  return str ? str.replace(regEx(/\\//g), '%2F') : str;\n}\n\nexport async function getRawFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string\n): Promise<string | null> {\n  const escapedFileName = urlEscape(fileName);\n  const repo = urlEscape(repoName ?? config.repository);\n  const url =\n    `projects/${repo}/repository/files/${escapedFileName}?ref=` +\n    (branchOrTag ?? `HEAD`);\n  const res = await gitlabApi.getJson<{ content: string }>(url);\n  const buf = res.body.content;\n  const str = Buffer.from(buf, 'base64').toString();\n  return str;\n}\n\nexport async function getJsonFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string\n): Promise<any | null> {\n  // TODO #7154\n  const raw = (await getRawFile(fileName, repoName, branchOrTag)) as string;\n  return JSON5.parse(raw);\n}\n\nfunction getRepoUrl(\n  repository: string,\n  gitUrl: GitUrlOption | undefined,\n  res: HttpResponse<RepoResponse>\n): string {\n  if (gitUrl === 'ssh') {\n    if (!res.body.ssh_url_to_repo) {\n      throw new Error(CONFIG_GIT_URL_UNAVAILABLE);\n    }\n    logger.debug({ url: res.body.ssh_url_to_repo }, `using ssh URL`);\n    return res.body.ssh_url_to_repo;\n  }\n\n  const opts = hostRules.find({\n    hostType: defaults.hostType,\n    url: defaults.endpoint,\n  });\n\n  if (\n    gitUrl === 'endpoint' ||\n    process.env.GITLAB_IGNORE_REPO_URL ||\n    res.body.http_url_to_repo === null\n  ) {\n    if (res.body.http_url_to_repo === null) {\n      logger.debug('no http_url_to_repo found. Falling back to old behaviour.');\n    }\n    if (process.env.GITLAB_IGNORE_REPO_URL) {\n      logger.warn(\n        'GITLAB_IGNORE_REPO_URL environment variable is deprecated. Please use \"gitUrl\" option.'\n      );\n    }\n\n    // TODO: null check (#7154)\n    const { protocol, host, pathname } = parseUrl(defaults.endpoint)!;\n    const newPathname = pathname.slice(0, pathname.indexOf('/api'));\n    const url = URL.format({\n      protocol: protocol.slice(0, -1) || 'https',\n      // TODO: types (#7154)\n      auth: `oauth2:${opts.token!}`,\n      host,\n      pathname: newPathname + '/' + repository + '.git',\n    });\n    logger.debug({ url }, 'using URL based on configured endpoint');\n    return url;\n  }\n\n  logger.debug({ url: res.body.http_url_to_repo }, `using http URL`);\n  const repoUrl = URL.parse(`${res.body.http_url_to_repo}`);\n  // TODO: types (#7154)\n  repoUrl.auth = `oauth2:${opts.token!}`;\n  return URL.format(repoUrl);\n}\n\n// Initialize GitLab by getting base branch\nexport async function initRepo({\n  repository,\n  cloneSubmodules,\n  ignorePrAuthor,\n  gitUrl,\n}: RepoParams): Promise<RepoResult> {\n  config = {} as any;\n  config.repository = urlEscape(repository);\n  config.cloneSubmodules = cloneSubmodules;\n  config.ignorePrAuthor = ignorePrAuthor;\n\n  let res: HttpResponse<RepoResponse>;\n  try {\n    res = await gitlabApi.getJson<RepoResponse>(\n      `projects/${config.repository}`\n    );\n    if (res.body.archived) {\n      logger.debug(\n        'Repository is archived - throwing error to abort renovation'\n      );\n      throw new Error(REPOSITORY_ARCHIVED);\n    }\n    if (res.body.mirror) {\n      logger.debug(\n        'Repository is a mirror - throwing error to abort renovation'\n      );\n      throw new Error(REPOSITORY_MIRRORED);\n    }\n    if (res.body.repository_access_level === 'disabled') {\n      logger.debug(\n        'Repository portion of project is disabled - throwing error to abort renovation'\n      );\n      throw new Error(REPOSITORY_DISABLED);\n    }\n    if (res.body.merge_requests_access_level === 'disabled') {\n      logger.debug(\n        'MRs are disabled for the project - throwing error to abort renovation'\n      );\n      throw new Error(REPOSITORY_DISABLED);\n    }\n    if (res.body.default_branch === null || res.body.empty_repo) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    config.defaultBranch = res.body.default_branch;\n    // istanbul ignore if\n    if (!config.defaultBranch) {\n      logger.warn({ resBody: res.body }, 'Error fetching GitLab project');\n      throw new Error(TEMPORARY_ERROR);\n    }\n    config.mergeMethod = res.body.merge_method || 'merge';\n    if (res.body.squash_option) {\n      config.squash =\n        res.body.squash_option === 'always' ||\n        res.body.squash_option === 'default_on';\n    }\n    logger.debug(`${repository} default branch = ${config.defaultBranch}`);\n    delete config.prList;\n    logger.debug('Enabling Git FS');\n    const url = getRepoUrl(repository, gitUrl, res);\n    await git.initRepo({\n      ...config,\n      url,\n    });\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'Caught initRepo error');\n    if (err.message.includes('HEAD is not a symbolic ref')) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    if ([REPOSITORY_ARCHIVED, REPOSITORY_EMPTY].includes(err.message)) {\n      throw err;\n    }\n    if (err.statusCode === 403) {\n      throw new Error(REPOSITORY_ACCESS_FORBIDDEN);\n    }\n    if (err.statusCode === 404) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    }\n    if (err.message === REPOSITORY_DISABLED) {\n      throw err;\n    }\n    logger.debug({ err }, 'Unknown GitLab initRepo error');\n    throw err;\n  }\n  const repoConfig: RepoResult = {\n    defaultBranch: config.defaultBranch,\n    isFork: !!res.body.forked_from_project,\n  };\n  return repoConfig;\n}\n\nexport function getRepoForceRebase(): Promise<boolean> {\n  return Promise.resolve(config?.mergeMethod !== 'merge');\n}\n\ntype BranchState =\n  | 'pending'\n  | 'created'\n  | 'running'\n  | 'waiting_for_resource'\n  | 'manual'\n  | 'success'\n  | 'failed'\n  | 'canceled'\n  | 'skipped'\n  | 'scheduled';\n\ninterface GitlabBranchStatus {\n  status: BranchState;\n  name: string;\n  allow_failure?: boolean;\n}\n\nasync function getStatus(\n  branchName: string,\n  useCache = true\n): Promise<GitlabBranchStatus[]> {\n  const branchSha = git.getBranchCommit(branchName);\n  try {\n    // TODO: types (#7154)\n    const url = `projects/${\n      config.repository\n    }/repository/commits/${branchSha!}/statuses`;\n\n    return (\n      await gitlabApi.getJson<GitlabBranchStatus[]>(url, {\n        paginate: true,\n        useCache,\n      })\n    ).body;\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'Error getting commit status');\n    if (err.response?.statusCode === 404) {\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    throw err;\n  }\n}\n\nconst gitlabToRenovateStatusMapping: Record<BranchState, BranchStatus> = {\n  pending: BranchStatus.yellow,\n  created: BranchStatus.yellow,\n  manual: BranchStatus.yellow,\n  running: BranchStatus.yellow,\n  waiting_for_resource: BranchStatus.yellow,\n  success: BranchStatus.green,\n  failed: BranchStatus.red,\n  canceled: BranchStatus.red,\n  skipped: BranchStatus.red,\n  scheduled: BranchStatus.yellow,\n};\n\n// Returns the combined status for a branch.\nexport async function getBranchStatus(\n  branchName: string\n): Promise<BranchStatus> {\n  logger.debug(`getBranchStatus(${branchName})`);\n\n  if (!git.branchExists(branchName)) {\n    throw new Error(REPOSITORY_CHANGED);\n  }\n\n  const branchStatuses = await getStatus(branchName);\n  // istanbul ignore if\n  if (!is.array(branchStatuses)) {\n    logger.warn(\n      { branchName, branchStatuses },\n      'Empty or unexpected branch statuses'\n    );\n    return BranchStatus.yellow;\n  }\n  logger.debug(`Got res with ${branchStatuses.length} results`);\n  // ignore all skipped jobs\n  const res = branchStatuses.filter((check) => check.status !== 'skipped');\n  if (res.length === 0) {\n    // Return 'pending' if we have no status checks\n    return BranchStatus.yellow;\n  }\n  let status: BranchStatus = BranchStatus.green; // default to green\n  res\n    .filter((check) => !check.allow_failure)\n    .forEach((check) => {\n      if (status !== BranchStatus.red) {\n        // if red, stay red\n        let mappedStatus: BranchStatus =\n          gitlabToRenovateStatusMapping[check.status];\n        if (!mappedStatus) {\n          logger.warn(\n            { check },\n            'Could not map GitLab check.status to Renovate status'\n          );\n          mappedStatus = BranchStatus.yellow;\n        }\n        if (mappedStatus !== BranchStatus.green) {\n          logger.trace({ check }, 'Found non-green check');\n          status = mappedStatus;\n        }\n      }\n    });\n  return status;\n}\n\n// Pull Request\n\nfunction massagePr(prToModify: Pr): Pr {\n  const pr = prToModify;\n  if (pr.title.startsWith(DRAFT_PREFIX)) {\n    pr.title = pr.title.substring(DRAFT_PREFIX.length);\n    pr.isDraft = true;\n  } else if (pr.title.startsWith(DRAFT_PREFIX_DEPRECATED)) {\n    pr.title = pr.title.substring(DRAFT_PREFIX_DEPRECATED.length);\n    pr.isDraft = true;\n  }\n  return pr;\n}\n\nasync function fetchPrList(): Promise<Pr[]> {\n  const searchParams = {\n    per_page: '100',\n  } as any;\n  // istanbul ignore if\n  if (!config.ignorePrAuthor) {\n    searchParams.scope = 'created_by_me';\n  }\n  const query = getQueryString(searchParams);\n  const urlString = `projects/${config.repository}/merge_requests?${query}`;\n  try {\n    const res = await gitlabApi.getJson<\n      {\n        iid: number;\n        source_branch: string;\n        title: string;\n        state: string;\n        created_at: string;\n      }[]\n    >(urlString, { paginate: true });\n    return res.body.map((pr) =>\n      massagePr({\n        number: pr.iid,\n        sourceBranch: pr.source_branch,\n        title: pr.title,\n        state: pr.state === 'opened' ? PrState.Open : pr.state,\n        createdAt: pr.created_at,\n      })\n    );\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'Error fetching PR list');\n    if (err.statusCode === 403) {\n      throw new Error(PLATFORM_AUTHENTICATION_ERROR);\n    }\n    throw err;\n  }\n}\n\nexport async function getPrList(): Promise<Pr[]> {\n  if (!config.prList) {\n    config.prList = await fetchPrList();\n  }\n  return config.prList;\n}\n\nasync function ignoreApprovals(pr: number): Promise<void> {\n  try {\n    const url = `projects/${config.repository}/merge_requests/${pr}/approval_rules`;\n    const { body: rules } = await gitlabApi.getJson<{ name: string }[]>(url);\n    const ruleName = 'renovateIgnoreApprovals';\n    const zeroApproversRule = rules?.find(({ name }) => name === ruleName);\n    if (!zeroApproversRule) {\n      await gitlabApi.postJson(url, {\n        body: {\n          name: ruleName,\n          approvals_required: 0,\n        },\n      });\n    }\n  } catch (err) {\n    logger.warn({ err }, 'GitLab: Error adding approval rule');\n  }\n}\n\nasync function tryPrAutomerge(\n  pr: number,\n  platformOptions: PlatformPrOptions | undefined\n): Promise<void> {\n  if (platformOptions?.usePlatformAutomerge) {\n    try {\n      if (platformOptions?.gitLabIgnoreApprovals) {\n        await ignoreApprovals(pr);\n      }\n\n      const desiredStatus = 'can_be_merged';\n      const retryTimes = 5;\n\n      // Check for correct merge request status before setting `merge_when_pipeline_succeeds` to  `true`.\n      for (let attempt = 1; attempt <= retryTimes; attempt += 1) {\n        const { body } = await gitlabApi.getJson<{\n          merge_status: string;\n          pipeline: string;\n        }>(`projects/${config.repository}/merge_requests/${pr}`);\n        // Only continue if the merge request can be merged and has a pipeline.\n        if (body.merge_status === desiredStatus && body.pipeline !== null) {\n          break;\n        }\n        await delay(500 * attempt);\n      }\n\n      await gitlabApi.putJson(\n        `projects/${config.repository}/merge_requests/${pr}/merge`,\n        {\n          body: {\n            should_remove_source_branch: true,\n            merge_when_pipeline_succeeds: true,\n          },\n        }\n      );\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug({ err }, 'Automerge on PR creation failed');\n    }\n  }\n}\n\nexport async function createPr({\n  sourceBranch,\n  targetBranch,\n  prTitle,\n  prBody: rawDescription,\n  draftPR,\n  labels,\n  platformOptions,\n}: CreatePRConfig): Promise<Pr> {\n  let title = prTitle;\n  if (draftPR) {\n    title = draftPrefix + title;\n  }\n  const description = sanitize(rawDescription);\n  logger.debug(`Creating Merge Request: ${title}`);\n  const res = await gitlabApi.postJson<Pr & { iid: number }>(\n    `projects/${config.repository}/merge_requests`,\n    {\n      body: {\n        source_branch: sourceBranch,\n        target_branch: targetBranch,\n        remove_source_branch: true,\n        title,\n        description,\n        labels: (labels ?? []).join(','),\n        squash: config.squash,\n      },\n    }\n  );\n  const pr = res.body;\n  pr.number = pr.iid;\n  pr.sourceBranch = sourceBranch;\n  pr.displayNumber = `Merge Request #${pr.iid}`;\n  // istanbul ignore if\n  if (config.prList) {\n    config.prList.push(pr);\n  }\n\n  await tryPrAutomerge(pr.iid, platformOptions);\n\n  return massagePr(pr);\n}\n\nexport async function getPr(iid: number): Promise<Pr> {\n  logger.debug(`getPr(${iid})`);\n  const mr = await getMR(config.repository, iid);\n\n  // Harmonize fields with GitHub\n  const pr: Pr = {\n    sourceBranch: mr.source_branch,\n    targetBranch: mr.target_branch,\n    number: mr.iid,\n    displayNumber: `Merge Request #${mr.iid}`,\n    bodyStruct: getPrBodyStruct(mr.description),\n    state: mr.state === 'opened' ? PrState.Open : mr.state,\n    hasAssignees: !!(mr.assignee?.id ?? mr.assignees?.[0]?.id),\n    hasReviewers: !!mr.reviewers?.length,\n    title: mr.title,\n    labels: mr.labels,\n    sha: mr.sha,\n  };\n\n  return massagePr(pr);\n}\n\nexport async function updatePr({\n  number: iid,\n  prTitle,\n  prBody: description,\n  state,\n  platformOptions,\n}: UpdatePrConfig): Promise<void> {\n  let title = prTitle;\n  if ((await getPrList()).find((pr) => pr.number === iid)?.isDraft) {\n    title = draftPrefix + title;\n  }\n  const newState = {\n    [PrState.Closed]: 'close',\n    [PrState.Open]: 'reopen',\n    // TODO: null check (#7154)\n  }[state!];\n  await gitlabApi.putJson(\n    `projects/${config.repository}/merge_requests/${iid}`,\n    {\n      body: {\n        title,\n        description: sanitize(description),\n        ...(newState && { state_event: newState }),\n      },\n    }\n  );\n\n  await tryPrAutomerge(iid, platformOptions);\n}\n\nexport async function mergePr({ id }: MergePRConfig): Promise<boolean> {\n  try {\n    await gitlabApi.putJson(\n      `projects/${config.repository}/merge_requests/${id}/merge`,\n      {\n        body: {\n          should_remove_source_branch: true,\n        },\n      }\n    );\n    return true;\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 401) {\n      logger.debug('No permissions to merge PR');\n      return false;\n    }\n    if (err.statusCode === 406) {\n      logger.debug({ err }, 'PR not acceptable for merging');\n      return false;\n    }\n    logger.debug({ err }, 'merge PR error');\n    logger.debug('PR merge failed');\n    return false;\n  }\n}\n\nexport function massageMarkdown(input: string): string {\n  let desc = input\n    .replace(regEx(/Pull Request/g), 'Merge Request')\n    .replace(regEx(/PR/g), 'MR')\n    .replace(regEx(/\\]\\(\\.\\.\\/pull\\//g), '](!');\n\n  if (semver.lt(defaults.version, '13.4.0')) {\n    logger.debug(\n      { version: defaults.version },\n      'GitLab versions earlier than 13.4 have issues with long descriptions, truncating to 25K characters'\n    );\n\n    desc = smartTruncate(desc, 25000);\n  } else {\n    desc = smartTruncate(desc, 1000000);\n  }\n\n  return desc;\n}\n\n// Branch\n\nfunction matchesState(state: string, desiredState: string): boolean {\n  if (desiredState === PrState.All) {\n    return true;\n  }\n  if (desiredState.startsWith('!')) {\n    return state !== desiredState.substring(1);\n  }\n  return state === desiredState;\n}\n\nexport async function findPr({\n  branchName,\n  prTitle,\n  state = PrState.All,\n}: FindPRConfig): Promise<Pr | null> {\n  logger.debug(`findPr(${branchName}, ${prTitle!}, ${state})`);\n  const prList = await getPrList();\n  return (\n    prList.find(\n      (p: { sourceBranch: string; title: string; state: string }) =>\n        p.sourceBranch === branchName &&\n        (!prTitle || p.title === prTitle) &&\n        matchesState(p.state, state)\n    ) ?? null\n  );\n}\n\n// Returns the Pull Request for a branch. Null if not exists.\nexport async function getBranchPr(branchName: string): Promise<Pr | null> {\n  logger.debug(`getBranchPr(${branchName})`);\n  const existingPr = await findPr({\n    branchName,\n    state: PrState.Open,\n  });\n  return existingPr ? getPr(existingPr.number) : null;\n}\n\nexport async function getBranchStatusCheck(\n  branchName: string,\n  context: string\n): Promise<BranchStatus | null> {\n  // cache-bust in case we have rebased\n  const res = await getStatus(branchName, false);\n  logger.debug(`Got res with ${res.length} results`);\n  for (const check of res) {\n    if (check.name === context) {\n      return gitlabToRenovateStatusMapping[check.status] || BranchStatus.yellow;\n    }\n  }\n  return null;\n}\n\nexport async function setBranchStatus({\n  branchName,\n  context,\n  description,\n  state: renovateState,\n  url: targetUrl,\n}: BranchStatusConfig): Promise<void> {\n  // First, get the branch commit SHA\n  const branchSha = git.getBranchCommit(branchName);\n  // Now, check the statuses for that commit\n  // TODO: types (#7154)\n  const url = `projects/${config.repository}/statuses/${branchSha!}`;\n  let state = 'success';\n  if (renovateState === BranchStatus.yellow) {\n    state = 'pending';\n  } else if (renovateState === BranchStatus.red) {\n    state = 'failed';\n  }\n  const options: any = {\n    state,\n    description,\n    context,\n  };\n  if (targetUrl) {\n    options.target_url = targetUrl;\n  }\n  try {\n    // give gitlab some time to create pipelines for the sha\n    await delay(1000);\n\n    await gitlabApi.postJson(url, { body: options });\n\n    // update status cache\n    await getStatus(branchName, false);\n  } catch (err) /* istanbul ignore next */ {\n    if (\n      err.body?.message?.startsWith(\n        'Cannot transition status via :enqueue from :pending'\n      )\n    ) {\n      // https://gitlab.com/gitlab-org/gitlab-foss/issues/25807\n      logger.debug('Ignoring status transition error');\n    } else {\n      logger.debug({ err });\n      logger.warn('Failed to set branch status');\n    }\n  }\n}\n\n// Issue\n\nexport async function getIssueList(): Promise<GitlabIssue[]> {\n  if (!config.issueList) {\n    const query = getQueryString({\n      per_page: '100',\n      scope: 'created_by_me',\n      state: 'opened',\n    });\n    const res = await gitlabApi.getJson<\n      { iid: number; title: string; labels: string[] }[]\n    >(`projects/${config.repository}/issues?${query}`, {\n      useCache: false,\n      paginate: true,\n    });\n    // istanbul ignore if\n    if (!is.array(res.body)) {\n      logger.warn({ responseBody: res.body }, 'Could not retrieve issue list');\n      return [];\n    }\n    config.issueList = res.body.map((i) => ({\n      iid: i.iid,\n      title: i.title,\n      labels: i.labels,\n    }));\n  }\n  return config.issueList;\n}\n\nexport async function getIssue(\n  number: number,\n  useCache = true\n): Promise<Issue | null> {\n  try {\n    const issueBody = (\n      await gitlabApi.getJson<{ description: string }>(\n        `projects/${config.repository}/issues/${number}`,\n        { useCache }\n      )\n    ).body.description;\n    return {\n      number,\n      body: issueBody,\n    };\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err, number }, 'Error getting issue');\n    return null;\n  }\n}\n\nexport async function findIssue(title: string): Promise<Issue | null> {\n  logger.debug(`findIssue(${title})`);\n  try {\n    const issueList = await getIssueList();\n    const issue = issueList.find((i) => i.title === title);\n    if (!issue) {\n      return null;\n    }\n    return await getIssue(issue.iid);\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn('Error finding issue');\n    return null;\n  }\n}\n\nexport async function ensureIssue({\n  title,\n  reuseTitle,\n  body,\n  labels,\n  confidential,\n}: EnsureIssueConfig): Promise<'updated' | 'created' | null> {\n  logger.debug(`ensureIssue()`);\n  const description = massageMarkdown(sanitize(body));\n  try {\n    const issueList = await getIssueList();\n    let issue = issueList.find((i) => i.title === title);\n    if (!issue) {\n      issue = issueList.find((i) => i.title === reuseTitle);\n    }\n    if (issue) {\n      const existingDescription = (\n        await gitlabApi.getJson<{ description: string }>(\n          `projects/${config.repository}/issues/${issue.iid}`\n        )\n      ).body.description;\n      if (issue.title !== title || existingDescription !== description) {\n        logger.debug('Updating issue');\n        await gitlabApi.putJson(\n          `projects/${config.repository}/issues/${issue.iid}`,\n          {\n            body: {\n              title,\n              description,\n              labels: (labels ?? issue.labels ?? []).join(','),\n              confidential: confidential ?? false,\n            },\n          }\n        );\n        return 'updated';\n      }\n    } else {\n      await gitlabApi.postJson(`projects/${config.repository}/issues`, {\n        body: {\n          title,\n          description,\n          labels: (labels ?? []).join(','),\n          confidential: confidential ?? false,\n        },\n      });\n      logger.info('Issue created');\n      // delete issueList so that it will be refetched as necessary\n      delete config.issueList;\n      return 'created';\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message.startsWith('Issues are disabled for this repo')) {\n      logger.debug(`Could not create issue: ${(err as Error).message}`);\n    } else {\n      logger.warn({ err }, 'Could not ensure issue');\n    }\n  }\n  return null;\n}\n\nexport async function ensureIssueClosing(title: string): Promise<void> {\n  logger.debug(`ensureIssueClosing()`);\n  const issueList = await getIssueList();\n  for (const issue of issueList) {\n    if (issue.title === title) {\n      logger.debug({ issue }, 'Closing issue');\n      await gitlabApi.putJson(\n        `projects/${config.repository}/issues/${issue.iid}`,\n        {\n          body: { state_event: 'close' },\n        }\n      );\n    }\n  }\n}\n\nexport async function addAssignees(\n  iid: number,\n  assignees: string[]\n): Promise<void> {\n  try {\n    logger.debug(`Adding assignees '${assignees.join(', ')}' to #${iid}`);\n    const assigneeIds: number[] = [];\n    for (const assignee of assignees) {\n      assigneeIds.push(await getUserID(assignee));\n    }\n    const url = `projects/${\n      config.repository\n    }/merge_requests/${iid}?${getQueryString({\n      'assignee_ids[]': assigneeIds,\n    })}`;\n    await gitlabApi.putJson(url);\n  } catch (err) {\n    logger.debug({ err }, 'addAssignees error');\n    logger.warn({ iid, assignees }, 'Failed to add assignees');\n  }\n}\n\nexport async function addReviewers(\n  iid: number,\n  reviewers: string[]\n): Promise<void> {\n  logger.debug(`Adding reviewers '${reviewers.join(', ')}' to #${iid}`);\n\n  if (semver.lt(defaults.version, '13.9.0')) {\n    logger.warn(\n      { version: defaults.version },\n      'Adding reviewers is only available in GitLab 13.9 and onwards'\n    );\n    return;\n  }\n\n  let mr: GitLabMergeRequest;\n  try {\n    mr = await getMR(config.repository, iid);\n  } catch (err) {\n    logger.warn({ err }, 'Failed to get existing reviewers');\n    return;\n  }\n\n  mr.reviewers = mr.reviewers ?? [];\n  const existingReviewers = mr.reviewers.map((r) => r.username);\n  const existingReviewerIDs = mr.reviewers.map((r) => r.id);\n\n  // Figure out which reviewers (of the ones we want to add) are not already on the MR as a reviewer\n  const newReviewers = reviewers.filter((r) => !existingReviewers.includes(r));\n\n  // Gather the IDs for all the reviewers we want to add\n  let newReviewerIDs: number[];\n  try {\n    newReviewerIDs = await pAll(\n      newReviewers.map((r) => () => getUserID(r)),\n      { concurrency: 5 }\n    );\n  } catch (err) {\n    logger.warn({ err }, 'Failed to get IDs of the new reviewers');\n    return;\n  }\n\n  try {\n    await updateMR(config.repository, iid, {\n      reviewer_ids: [...existingReviewerIDs, ...newReviewerIDs],\n    });\n  } catch (err) {\n    logger.warn({ err }, 'Failed to add reviewers');\n  }\n}\n\nexport async function deleteLabel(\n  issueNo: number,\n  label: string\n): Promise<void> {\n  logger.debug(`Deleting label ${label} from #${issueNo}`);\n  try {\n    const pr = await getPr(issueNo);\n    const labels = (pr.labels ?? [])\n      .filter((l: string) => l !== label)\n      .join(',');\n    await gitlabApi.putJson(\n      `projects/${config.repository}/merge_requests/${issueNo}`,\n      {\n        body: { labels },\n      }\n    );\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err, issueNo, label }, 'Failed to delete label');\n  }\n}\n\nasync function getComments(issueNo: number): Promise<GitlabComment[]> {\n  // GET projects/:owner/:repo/merge_requests/:number/notes\n  logger.debug(`Getting comments for #${issueNo}`);\n  const url = `projects/${config.repository}/merge_requests/${issueNo}/notes`;\n  const comments = (\n    await gitlabApi.getJson<GitlabComment[]>(url, { paginate: true })\n  ).body;\n  logger.debug(`Found ${comments.length} comments`);\n  return comments;\n}\n\nasync function addComment(issueNo: number, body: string): Promise<void> {\n  // POST projects/:owner/:repo/merge_requests/:number/notes\n  await gitlabApi.postJson(\n    `projects/${config.repository}/merge_requests/${issueNo}/notes`,\n    {\n      body: { body },\n    }\n  );\n}\n\nasync function editComment(\n  issueNo: number,\n  commentId: number,\n  body: string\n): Promise<void> {\n  // PUT projects/:owner/:repo/merge_requests/:number/notes/:id\n  await gitlabApi.putJson(\n    `projects/${config.repository}/merge_requests/${issueNo}/notes/${commentId}`,\n    {\n      body: { body },\n    }\n  );\n}\n\nasync function deleteComment(\n  issueNo: number,\n  commentId: number\n): Promise<void> {\n  // DELETE projects/:owner/:repo/merge_requests/:number/notes/:id\n  await gitlabApi.deleteJson(\n    `projects/${config.repository}/merge_requests/${issueNo}/notes/${commentId}`\n  );\n}\n\nexport async function ensureComment({\n  number,\n  topic,\n  content,\n}: EnsureCommentConfig): Promise<boolean> {\n  const sanitizedContent = sanitize(content);\n  const massagedTopic = topic\n    ? topic\n        .replace(regEx(/Pull Request/g), 'Merge Request')\n        .replace(regEx(/PR/g), 'MR')\n    : topic;\n  const comments = await getComments(number);\n  let body: string;\n  let commentId: number | undefined;\n  let commentNeedsUpdating: boolean | undefined;\n  // TODO: types (#7154)\n  if (topic) {\n    logger.debug(`Ensuring comment \"${massagedTopic!}\" in #${number}`);\n    body = `### ${topic}\\n\\n${sanitizedContent}`;\n    body = body\n      .replace(regEx(/Pull Request/g), 'Merge Request')\n      .replace(regEx(/PR/g), 'MR');\n    comments.forEach((comment: { body: string; id: number }) => {\n      if (comment.body.startsWith(`### ${massagedTopic!}\\n\\n`)) {\n        commentId = comment.id;\n        commentNeedsUpdating = comment.body !== body;\n      }\n    });\n  } else {\n    logger.debug(`Ensuring content-only comment in #${number}`);\n    body = `${sanitizedContent}`;\n    comments.forEach((comment: { body: string; id: number }) => {\n      if (comment.body === body) {\n        commentId = comment.id;\n        commentNeedsUpdating = false;\n      }\n    });\n  }\n  if (!commentId) {\n    await addComment(number, body);\n    logger.debug(\n      { repository: config.repository, issueNo: number },\n      'Added comment'\n    );\n  } else if (commentNeedsUpdating) {\n    await editComment(number, commentId, body);\n    logger.debug(\n      { repository: config.repository, issueNo: number },\n      'Updated comment'\n    );\n  } else {\n    logger.debug('Comment is already update-to-date');\n  }\n  return true;\n}\n\nexport async function ensureCommentRemoval(\n  deleteConfig: EnsureCommentRemovalConfig\n): Promise<void> {\n  const { number: issueNo } = deleteConfig;\n  const key =\n    deleteConfig.type === 'by-topic'\n      ? deleteConfig.topic\n      : deleteConfig.content;\n  logger.debug(`Ensuring comment \"${key}\" in #${issueNo} is removed`);\n\n  const comments = await getComments(issueNo);\n  let commentId: number | null | undefined = null;\n\n  if (deleteConfig.type === 'by-topic') {\n    const byTopic = (comment: GitlabComment): boolean =>\n      comment.body.startsWith(`### ${deleteConfig.topic}\\n\\n`);\n    commentId = comments.find(byTopic)?.id;\n  } else if (deleteConfig.type === 'by-content') {\n    const byContent = (comment: GitlabComment): boolean =>\n      comment.body.trim() === deleteConfig.content;\n    commentId = comments.find(byContent)?.id;\n  }\n\n  if (commentId) {\n    await deleteComment(issueNo, commentId);\n  }\n}\n\nexport function getVulnerabilityAlerts(): Promise<VulnerabilityAlert[]> {\n  return Promise.resolve([]);\n}\n\nexport async function filterUnavailableUsers(\n  users: string[]\n): Promise<string[]> {\n  const filteredUsers: string[] = [];\n  for (const user of users) {\n    if (!(await isUserBusy(user))) {\n      filteredUsers.push(user);\n    }\n  }\n  return filteredUsers;\n}\n"]}