import { BranchStatus, VulnerabilityAlert } from '../../../types';
import type { BranchStatusConfig, CreatePRConfig, EnsureCommentConfig, EnsureIssueConfig, FindPRConfig, Issue, MergePRConfig, PlatformParams, PlatformResult, Pr, RepoParams, RepoResult, UpdatePrConfig } from '../types';
export declare const addAssignees: (number: number, assignees: string[]) => Promise<void>, addReviewers: (number: number, reviewers: string[]) => Promise<void>, createPr: (prConfig: CreatePRConfig) => Promise<Pr | null>, deleteLabel: (number: number, label: string) => Promise<void>, ensureComment: (ensureComment: EnsureCommentConfig) => Promise<boolean>, ensureCommentRemoval: (ensureCommentRemoval: import("../types").EnsureCommentRemovalConfigByTopic | import("../types").EnsureCommentRemovalConfigByContent) => Promise<void>, ensureIssue: (issueConfig: EnsureIssueConfig) => Promise<import("../types").EnsureIssueResult | null>, ensureIssueClosing: (title: string) => Promise<void>, findIssue: (title: string) => Promise<Issue | null>, findPr: (findPRConfig: FindPRConfig) => Promise<Pr | null>, getBranchPr: (branchName: string) => Promise<Pr | null>, getBranchStatus: (branchName: string) => Promise<BranchStatus>, getBranchStatusCheck: (branchName: string, context: string | null | undefined) => Promise<BranchStatus | null>, getIssue: ((number: number, useCache?: boolean | undefined) => Promise<Issue | null>) | undefined, getRawFile: (fileName: string, repoName?: string | undefined, branchOrTag?: string | undefined) => Promise<string | null>, getJsonFile: (fileName: string, repoName?: string | undefined, branchOrTag?: string | undefined) => Promise<any>, getIssueList: () => Promise<Issue[]>, getPr: (number: number) => Promise<Pr | null>, massageMarkdown: (prBody: string) => string, getPrList: () => Promise<Pr[]>, getRepoForceRebase: () => Promise<boolean>, getRepos: () => Promise<string[]>, getVulnerabilityAlerts: () => Promise<VulnerabilityAlert[]>, initPlatform: (config: PlatformParams) => Promise<PlatformResult>, initRepo: (config: RepoParams) => Promise<RepoResult>, mergePr: (config: MergePRConfig) => Promise<boolean>, setBranchStatus: (branchStatusConfig: BranchStatusConfig) => Promise<void>, updatePr: (prConfig: UpdatePrConfig) => Promise<void>;
