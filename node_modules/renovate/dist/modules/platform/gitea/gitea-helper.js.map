{"version":3,"file":"gitea-helper.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gitea/gitea-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { BranchStatus, PrState } from '../../../types';\nimport { GiteaHttp, GiteaHttpOptions } from '../../../util/http/gitea';\nimport { getQueryString } from '../../../util/url';\nimport type {\n  Branch,\n  CombinedCommitStatus,\n  Comment,\n  CommentCreateParams,\n  CommentUpdateParams,\n  CommitStatus,\n  CommitStatusCreateParams,\n  CommitStatusType,\n  Issue,\n  IssueCreateParams,\n  IssueSearchParams,\n  IssueUpdateLabelsParams,\n  IssueUpdateParams,\n  Label,\n  PR,\n  PRCreateParams,\n  PRMergeParams,\n  PRSearchParams,\n  PRUpdateParams,\n  PrReviewersParams,\n  Repo,\n  RepoContents,\n  RepoSearchParams,\n  RepoSearchResults,\n  User,\n} from './types';\n\nconst giteaHttp = new GiteaHttp();\n\nconst API_PATH = '/api/v1';\n\nconst urlEscape = (raw: string): string => encodeURIComponent(raw);\nconst commitStatusStates: CommitStatusType[] = [\n  'unknown',\n  'success',\n  'pending',\n  'warning',\n  'failure',\n  'error',\n];\n\nexport async function getCurrentUser(\n  options?: GiteaHttpOptions\n): Promise<User> {\n  const url = `${API_PATH}/user`;\n  const res = await giteaHttp.getJson<User>(url, options);\n  return res.body;\n}\n\nexport async function getVersion(options?: GiteaHttpOptions): Promise<string> {\n  const url = `${API_PATH}/version`;\n  const res = await giteaHttp.getJson<{ version: string }>(url, options);\n  return res.body.version;\n}\n\nexport async function searchRepos(\n  params: RepoSearchParams,\n  options?: GiteaHttpOptions\n): Promise<Repo[]> {\n  const query = getQueryString(params);\n  const url = `${API_PATH}/repos/search?${query}`;\n  const res = await giteaHttp.getJson<RepoSearchResults>(url, {\n    ...options,\n    paginate: true,\n  });\n\n  if (!res.body.ok) {\n    throw new Error(\n      'Unable to search for repositories, ok flag has not been set'\n    );\n  }\n\n  return res.body.data;\n}\n\nexport async function getRepo(\n  repoPath: string,\n  options?: GiteaHttpOptions\n): Promise<Repo> {\n  const url = `${API_PATH}/repos/${repoPath}`;\n  const res = await giteaHttp.getJson<Repo>(url, options);\n  return res.body;\n}\n\nexport async function getRepoContents(\n  repoPath: string,\n  filePath: string,\n  ref?: string | null,\n  options?: GiteaHttpOptions\n): Promise<RepoContents> {\n  const query = getQueryString(ref ? { ref } : {});\n  const url = `${API_PATH}/repos/${repoPath}/contents/${urlEscape(\n    filePath\n  )}?${query}`;\n  const res = await giteaHttp.getJson<RepoContents>(url, options);\n\n  if (res.body.content) {\n    res.body.contentString = Buffer.from(res.body.content, 'base64').toString();\n  }\n\n  return res.body;\n}\n\nexport async function createPR(\n  repoPath: string,\n  params: PRCreateParams,\n  options?: GiteaHttpOptions\n): Promise<PR> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls`;\n  const res = await giteaHttp.postJson<PR>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function updatePR(\n  repoPath: string,\n  idx: number,\n  params: PRUpdateParams,\n  options?: GiteaHttpOptions\n): Promise<PR> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls/${idx}`;\n  const res = await giteaHttp.patchJson<PR>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function closePR(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions\n): Promise<void> {\n  await updatePR(repoPath, idx, {\n    ...options,\n    state: PrState.Closed,\n  });\n}\n\nexport async function mergePR(\n  repoPath: string,\n  idx: number,\n  params: PRMergeParams,\n  options?: GiteaHttpOptions\n): Promise<void> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls/${idx}/merge`;\n  await giteaHttp.postJson(url, {\n    ...options,\n    body: params,\n  });\n}\n\nexport async function getPR(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions\n): Promise<PR> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls/${idx}`;\n  const res = await giteaHttp.getJson<PR>(url, options);\n  return res.body;\n}\n\nexport async function requestPrReviewers(\n  repoPath: string,\n  idx: number,\n  params: PrReviewersParams,\n  options?: GiteaHttpOptions\n): Promise<void> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls/${idx}/requested_reviewers`;\n  await giteaHttp.postJson(url, {\n    ...options,\n    body: params,\n  });\n}\n\nexport async function searchPRs(\n  repoPath: string,\n  params: PRSearchParams,\n  options?: GiteaHttpOptions\n): Promise<PR[]> {\n  const query = getQueryString(params);\n  const url = `${API_PATH}/repos/${repoPath}/pulls?${query}`;\n  const res = await giteaHttp.getJson<PR[]>(url, {\n    ...options,\n    paginate: true,\n  });\n\n  return res.body;\n}\n\nexport async function createIssue(\n  repoPath: string,\n  params: IssueCreateParams,\n  options?: GiteaHttpOptions\n): Promise<Issue> {\n  const url = `${API_PATH}/repos/${repoPath}/issues`;\n  const res = await giteaHttp.postJson<Issue>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function updateIssue(\n  repoPath: string,\n  idx: number,\n  params: IssueUpdateParams,\n  options?: GiteaHttpOptions\n): Promise<Issue> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${idx}`;\n  const res = await giteaHttp.patchJson<Issue>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function updateIssueLabels(\n  repoPath: string,\n  idx: number,\n  params: IssueUpdateLabelsParams,\n  options?: GiteaHttpOptions\n): Promise<Label[]> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${idx}/labels`;\n  const res = await giteaHttp.putJson<Label[]>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function closeIssue(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions\n): Promise<void> {\n  await updateIssue(repoPath, idx, {\n    ...options,\n    state: 'closed',\n  });\n}\n\nexport async function searchIssues(\n  repoPath: string,\n  params: IssueSearchParams,\n  options?: GiteaHttpOptions\n): Promise<Issue[]> {\n  const query = getQueryString({ ...params, type: 'issues' });\n  const url = `${API_PATH}/repos/${repoPath}/issues?${query}`;\n  const res = await giteaHttp.getJson<Issue[]>(url, {\n    ...options,\n    paginate: true,\n  });\n\n  return res.body;\n}\n\nexport async function getIssue(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions\n): Promise<Issue> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${idx}`;\n  const res = await giteaHttp.getJson<Issue>(url, options);\n  return res.body;\n}\n\nexport async function getRepoLabels(\n  repoPath: string,\n  options?: GiteaHttpOptions\n): Promise<Label[]> {\n  const url = `${API_PATH}/repos/${repoPath}/labels`;\n  const res = await giteaHttp.getJson<Label[]>(url, options);\n\n  return res.body;\n}\n\nexport async function getOrgLabels(\n  orgName: string,\n  options?: GiteaHttpOptions\n): Promise<Label[]> {\n  const url = `${API_PATH}/orgs/${orgName}/labels`;\n  const res = await giteaHttp.getJson<Label[]>(url, options);\n\n  return res.body;\n}\n\nexport async function unassignLabel(\n  repoPath: string,\n  issue: number,\n  label: number,\n  options?: GiteaHttpOptions\n): Promise<void> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${issue}/labels/${label}`;\n  await giteaHttp.deleteJson(url, options);\n}\n\nexport async function createComment(\n  repoPath: string,\n  issue: number,\n  body: string,\n  options?: GiteaHttpOptions\n): Promise<Comment> {\n  const params: CommentCreateParams = { body };\n  const url = `${API_PATH}/repos/${repoPath}/issues/${issue}/comments`;\n  const res = await giteaHttp.postJson<Comment>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function updateComment(\n  repoPath: string,\n  idx: number,\n  body: string,\n  options?: GiteaHttpOptions\n): Promise<Comment> {\n  const params: CommentUpdateParams = { body };\n  const url = `${API_PATH}/repos/${repoPath}/issues/comments/${idx}`;\n  const res = await giteaHttp.patchJson<Comment>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function deleteComment(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions\n): Promise<void> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/comments/${idx}`;\n  await giteaHttp.deleteJson(url, options);\n}\n\nexport async function getComments(\n  repoPath: string,\n  issue: number,\n  options?: GiteaHttpOptions\n): Promise<Comment[]> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${issue}/comments`;\n  const res = await giteaHttp.getJson<Comment[]>(url, options);\n\n  return res.body;\n}\n\nexport async function createCommitStatus(\n  repoPath: string,\n  branchCommit: string,\n  params: CommitStatusCreateParams,\n  options?: GiteaHttpOptions\n): Promise<CommitStatus> {\n  const url = `${API_PATH}/repos/${repoPath}/statuses/${branchCommit}`;\n  const res = await giteaHttp.postJson<CommitStatus>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport const giteaToRenovateStatusMapping: Record<\n  CommitStatusType,\n  BranchStatus | null\n> = {\n  unknown: BranchStatus.yellow,\n  success: BranchStatus.green,\n  pending: BranchStatus.yellow,\n  warning: BranchStatus.red,\n  failure: BranchStatus.red,\n  error: BranchStatus.red,\n};\n\nexport const renovateToGiteaStatusMapping: Record<\n  BranchStatus,\n  CommitStatusType\n> = {\n  green: 'success',\n  yellow: 'pending',\n  red: 'failure',\n};\n\nfunction filterStatus(data: CommitStatus[]): CommitStatus[] {\n  const ret: Record<string, CommitStatus> = {};\n  for (const i of data) {\n    if (\n      !ret[i.context] ||\n      new Date(ret[i.context].created_at) < new Date(i.created_at)\n    ) {\n      ret[i.context] = i;\n    }\n  }\n  return Object.values(ret);\n}\n\nexport async function getCombinedCommitStatus(\n  repoPath: string,\n  branchName: string,\n  options?: GiteaHttpOptions\n): Promise<CombinedCommitStatus> {\n  const url = `${API_PATH}/repos/${repoPath}/commits/${urlEscape(\n    branchName\n  )}/statuses`;\n  const res = await giteaHttp.getJson<CommitStatus[]>(url, {\n    ...options,\n    paginate: true,\n  });\n\n  let worstState = 0;\n  for (const cs of filterStatus(res.body)) {\n    worstState = Math.max(worstState, commitStatusStates.indexOf(cs.status));\n  }\n\n  return {\n    worstStatus: commitStatusStates[worstState],\n    statuses: res.body,\n  };\n}\n\nexport async function getBranch(\n  repoPath: string,\n  branchName: string,\n  options?: GiteaHttpOptions\n): Promise<Branch> {\n  const url = `${API_PATH}/repos/${repoPath}/branches/${urlEscape(branchName)}`;\n  const res = await giteaHttp.getJson<Branch>(url, options);\n\n  return res.body;\n}\n"]}