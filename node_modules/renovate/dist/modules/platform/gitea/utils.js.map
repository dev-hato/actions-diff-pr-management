{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gitea/utils.ts"],"names":[],"mappings":";;;;AACA,kDAAgD;AAChD,sEAA+E;AAC/E,4CAAyC;AACzC,4EAAsD;AACtD,+CAA4C;AAC5C,2CAA6C;AAI7C,SAAgB,UAAU,CAAC,IAAY;IACrC,OAAO,IAAI,EAAE,OAAO,CAAC,IAAA,aAAK,EAAC,mBAAmB,CAAC,EAAE,UAAU,CAAC,CAAC;AAC/D,CAAC;AAFD,gCAEC;AAED,SAAgB,mBAAmB,CAAC,GAAW;IAC7C,OAAO,GAAG,EAAE,OAAO,CAAC,IAAA,aAAK,EAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;AACjD,CAAC;AAFD,kDAEC;AAED,SAAgB,UAAU,CACxB,IAAU,EACV,MAAgC,EAChC,QAAgB;IAEhB,IAAI,MAAM,KAAK,KAAK,EAAE;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,2CAA0B,CAAC,CAAC;SAC7C;QACD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,eAAe,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;IAED,2DAA2D;IAC3D,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;QAC1B,QAAQ,EAAE,sBAAU,CAAC,KAAK;QAC1B,GAAG,EAAE,QAAQ;KACd,CAAC,CAAC;IAEH,IAAI,MAAM,KAAK,UAAU,EAAE;QACzB,MAAM,GAAG,GAAG,IAAA,cAAQ,EAAC,QAAQ,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,2CAA0B,CAAC,CAAC;SAC7C;QACD,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QAChC,GAAG,CAAC,QAAQ,GAAG,GAAG,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,MAAM,CAAC;QACtD,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,EACvB,wCAAwC,CACzC,CAAC;QACF,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;KACvB;IAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,2CAA0B,CAAC,CAAC;KAC7C;IAED,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,gBAAgB,CAAC,CAAC;IACxD,MAAM,OAAO,GAAG,IAAA,cAAQ,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzC,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,2CAA0B,CAAC,CAAC;KAC7C;IACD,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;IACpC,OAAO,OAAO,CAAC,QAAQ,EAAE,CAAC;AAC5B,CAAC;AA5CD,gCA4CC;AAED,SAAgB,cAAc,CAC5B,QAAmC;IAEnC,QAAQ,QAAQ,EAAE;QAChB,KAAK,cAAc;YACjB,OAAO,QAAQ,CAAC;QAClB,KAAK,cAAc;YACjB,OAAO,OAAO,CAAC;QACjB,KAAK,QAAQ;YACX,OAAO,cAAc,CAAC;QACxB,KAAK,QAAQ;YACX,OAAO,QAAQ,CAAC;QAClB,KAAK,MAAM,CAAC;QACZ;YACE,OAAO,IAAI,CAAC;KACf;AACH,CAAC;AAhBD,wCAgBC","sourcesContent":["import type { MergeStrategy } from '../../../config/types';\nimport { PlatformId } from '../../../constants';\nimport { CONFIG_GIT_URL_UNAVAILABLE } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport * as hostRules from '../../../util/host-rules';\nimport { regEx } from '../../../util/regex';\nimport { parseUrl } from '../../../util/url';\nimport type { GitUrlOption } from '../types';\nimport type { PRMergeMethod, Repo } from './types';\n\nexport function smartLinks(body: string): string {\n  return body?.replace(regEx(/\\]\\(\\.\\.\\/pull\\//g), '](pulls/');\n}\n\nexport function trimTrailingApiPath(url: string): string {\n  return url?.replace(regEx(/api\\/v1\\/?$/g), '');\n}\n\nexport function getRepoUrl(\n  repo: Repo,\n  gitUrl: GitUrlOption | undefined,\n  endpoint: string\n): string {\n  if (gitUrl === 'ssh') {\n    if (!repo.ssh_url) {\n      throw new Error(CONFIG_GIT_URL_UNAVAILABLE);\n    }\n    logger.debug({ url: repo.ssh_url }, `using SSH URL`);\n    return repo.ssh_url;\n  }\n\n  // Find options for current host and determine Git endpoint\n  const opts = hostRules.find({\n    hostType: PlatformId.Gitea,\n    url: endpoint,\n  });\n\n  if (gitUrl === 'endpoint') {\n    const url = parseUrl(endpoint);\n    if (!url) {\n      throw new Error(CONFIG_GIT_URL_UNAVAILABLE);\n    }\n    url.username = opts.token ?? '';\n    url.pathname = `${url.pathname}${repo.full_name}.git`;\n    logger.debug(\n      { url: url.toString() },\n      'using URL based on configured endpoint'\n    );\n    return url.toString();\n  }\n\n  if (!repo.clone_url) {\n    throw new Error(CONFIG_GIT_URL_UNAVAILABLE);\n  }\n\n  logger.debug({ url: repo.clone_url }, `using HTTP URL`);\n  const repoUrl = parseUrl(repo.clone_url);\n  if (!repoUrl) {\n    throw new Error(CONFIG_GIT_URL_UNAVAILABLE);\n  }\n  repoUrl.username = opts.token ?? '';\n  return repoUrl.toString();\n}\n\nexport function getMergeMethod(\n  strategy: MergeStrategy | undefined\n): PRMergeMethod | null {\n  switch (strategy) {\n    case 'fast-forward':\n      return 'rebase';\n    case 'merge-commit':\n      return 'merge';\n    case 'rebase':\n      return 'rebase-merge';\n    case 'squash':\n      return strategy;\n    case 'auto':\n    default:\n      return null;\n  }\n}\n"]}