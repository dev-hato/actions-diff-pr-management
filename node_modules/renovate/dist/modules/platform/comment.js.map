{"version":3,"file":"comment.js","sourceRoot":"","sources":["../../../lib/modules/platform/comment.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,4DAAuD;AAEvD,wBAA6B;AAE7B,4DAA4D;AAC5D,MAAM,IAAI,GAAG,CAAC,OAAe,EAAU,EAAE,CAAC,IAAA,eAAK,EAAC,OAAO,CAAC,CAAC;AAElD,KAAK,UAAU,aAAa,CACjC,aAAkC;;IAElC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,aAAa,CAAC;IAC1C,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,IAAI,EAAE,CAAC;IAExC,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IAClC,MAAM,SAAS,GAAG,IAAA,qBAAQ,GAAE,CAAC;IAE7B,IAAI,WAAW,KAAK,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;QAC3D,MAAM,GAAG,GAAG,MAAM,WAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACxD,IAAI,GAAG,EAAE;YACP,SAAS,CAAC,UAAU,KAApB,SAAS,CAAC,UAAU,GAAK,EAAE,EAAC;YAC5B,MAAA,SAAS,CAAC,UAAU,EAAC,MAAM,SAAN,MAAM,IAAM,EAAE,EAAC;YACpC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;SACnD;QACD,OAAO,GAAG,CAAC;KACZ;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AApBD,sCAoBC;AAEM,KAAK,UAAU,oBAAoB,CACxC,MAAkC;IAElC,MAAM,WAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAE5C,MAAM,SAAS,GAAG,IAAA,qBAAQ,GAAE,CAAC;IAE7B,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IAChC,IAAI,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE;QAClC,IAAI,IAAI,KAAK,UAAU,EAAE;YACvB,OAAO,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACvD;aAAM,IAAI,IAAI,KAAK,YAAY,EAAE;YAChC,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACzC,KAAK,MAAM,CAAC,WAAW,EAAE,iBAAiB,CAAC,IAAI,MAAM,CAAC,OAAO,CAC3D,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,CAC/B,EAAE;gBACD,IAAI,iBAAiB,KAAK,WAAW,EAAE;oBACrC,OAAO,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;oBACrD,OAAO;iBACR;aACF;SACF;KACF;AACH,CAAC;AAvBD,oDAuBC","sourcesContent":["import hasha from 'hasha';\nimport { getCache } from '../../util/cache/repository';\nimport type { EnsureCommentConfig, EnsureCommentRemovalConfig } from './types';\nimport { platform } from '.';\n\n// use sha512: https://www.npmjs.com/package/hasha#algorithm\nconst hash = (content: string): string => hasha(content);\n\nexport async function ensureComment(\n  commentConfig: EnsureCommentConfig\n): Promise<boolean> {\n  const { number, content } = commentConfig;\n  const topic = commentConfig.topic ?? '';\n\n  const contentHash = hash(content);\n  const repoCache = getCache();\n\n  if (contentHash !== repoCache.prComments?.[number]?.[topic]) {\n    const res = await platform.ensureComment(commentConfig);\n    if (res) {\n      repoCache.prComments ??= {};\n      repoCache.prComments[number] ??= {};\n      repoCache.prComments[number][topic] = contentHash;\n    }\n    return res;\n  }\n\n  return true;\n}\n\nexport async function ensureCommentRemoval(\n  config: EnsureCommentRemovalConfig\n): Promise<void> {\n  await platform.ensureCommentRemoval(config);\n\n  const repoCache = getCache();\n\n  const { type, number } = config;\n  if (repoCache.prComments?.[number]) {\n    if (type === 'by-topic') {\n      delete repoCache.prComments?.[number]?.[config.topic];\n    } else if (type === 'by-content') {\n      const contentHash = hash(config.content);\n      for (const [cachedTopic, cachedContentHash] of Object.entries(\n        repoCache.prComments?.[number]\n      )) {\n        if (cachedContentHash === contentHash) {\n          delete repoCache.prComments?.[number]?.[cachedTopic];\n          return;\n        }\n      }\n    }\n  }\n}\n"]}