{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/modules/platform/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { MergeStrategy } from '../../config/types';\nimport type { BranchStatus, PrState, VulnerabilityAlert } from '../../types';\nimport type { CommitFilesConfig, CommitSha } from '../../util/git/types';\n\ntype VulnerabilityKey = string;\ntype VulnerabilityRangeKey = string;\ntype VulnerabilityPatch = string;\nexport type AggregatedVulnerabilities = Record<\n  VulnerabilityKey,\n  Record<VulnerabilityRangeKey, VulnerabilityPatch | null>\n>;\n\nexport interface PlatformParams {\n  endpoint?: string;\n  token?: string;\n  username?: string;\n  password?: string;\n  gitAuthor?: string;\n}\n\nexport interface PlatformResult {\n  endpoint: string;\n  renovateUsername?: string;\n  token?: string;\n  gitAuthor?: string;\n}\n\nexport interface RepoResult {\n  defaultBranch: string;\n  isFork: boolean;\n}\n\nexport type GitUrlOption = 'default' | 'ssh' | 'endpoint';\n\nexport interface RepoParams {\n  repository: string;\n  endpoint?: string;\n  gitUrl?: GitUrlOption;\n  forkMode?: string;\n  forkToken?: string;\n  includeForks?: boolean;\n  renovateUsername?: string;\n  cloneSubmodules?: boolean;\n  ignorePrAuthor?: boolean;\n}\n\nexport interface PrDebugData {\n  createdInVer: string;\n  updatedInVer: string;\n}\n\nexport interface PrBodyStruct {\n  hash: string;\n  rebaseRequested?: boolean;\n  debugData?: PrDebugData;\n}\n\n/**\n *\n */\nexport interface Pr {\n  bodyStruct?: PrBodyStruct;\n  sourceBranch: string;\n  cannotMergeReason?: string; // for reflecting platform policies which may prevent merging\n  createdAt?: string;\n  closedAt?: string;\n  displayNumber?: string;\n  hasAssignees?: boolean;\n  hasReviewers?: boolean;\n  labels?: string[];\n  number: number;\n  reviewers?: string[];\n  sha?: string;\n  sourceRepo?: string;\n  state: string;\n  targetBranch?: string;\n  title: string;\n  isDraft?: boolean;\n}\n\n/**\n * TODO: Proper typing\n */\nexport interface Issue {\n  body?: string;\n  number?: number;\n  state?: string;\n  title?: string;\n}\nexport type PlatformPrOptions = {\n  azureAutoApprove?: boolean;\n  azureWorkItemId?: number;\n  bbUseDefaultReviewers?: boolean;\n  gitLabIgnoreApprovals?: boolean;\n  usePlatformAutomerge?: boolean;\n};\nexport interface CreatePRConfig {\n  sourceBranch: string;\n  targetBranch: string;\n  prTitle: string;\n  prBody: string;\n  labels?: string[] | null;\n  platformOptions?: PlatformPrOptions;\n  draftPR?: boolean;\n}\nexport interface UpdatePrConfig {\n  number: number;\n  platformOptions?: PlatformPrOptions;\n  prTitle: string;\n  prBody?: string;\n  state?: PrState.Open | PrState.Closed;\n}\nexport interface EnsureIssueConfig {\n  title: string;\n  reuseTitle?: string;\n  body: string;\n  labels?: string[];\n  once?: boolean;\n  shouldReOpen?: boolean;\n  confidential?: boolean;\n}\nexport interface BranchStatusConfig {\n  branchName: string;\n  context: string;\n  description: string;\n  state: BranchStatus;\n  url?: string;\n}\nexport interface FindPRConfig {\n  branchName: string;\n  prTitle?: string | null;\n  state?: PrState.Open | PrState.Closed | PrState.NotOpen | PrState.All;\n  refreshCache?: boolean;\n}\nexport interface MergePRConfig {\n  branchName?: string;\n  id: number;\n  strategy?: MergeStrategy;\n}\nexport interface EnsureCommentConfig {\n  number: number;\n  topic: string | null;\n  content: string;\n}\n\nexport interface EnsureCommentRemovalConfigByTopic {\n  type: 'by-topic';\n  number: number;\n  topic: string;\n}\nexport interface EnsureCommentRemovalConfigByContent {\n  type: 'by-content';\n  number: number;\n  content: string;\n}\nexport type EnsureCommentRemovalConfig =\n  | EnsureCommentRemovalConfigByTopic\n  | EnsureCommentRemovalConfigByContent;\n\nexport type EnsureIssueResult = 'updated' | 'created';\n\nexport interface Platform {\n  findIssue(title: string): Promise<Issue | null>;\n  getIssueList(): Promise<Issue[]>;\n  getIssue?(number: number, useCache?: boolean): Promise<Issue | null>;\n  getVulnerabilityAlerts(): Promise<VulnerabilityAlert[]>;\n  getRawFile(\n    fileName: string,\n    repoName?: string,\n    branchOrTag?: string\n  ): Promise<string | null>;\n  getJsonFile(\n    fileName: string,\n    repoName?: string,\n    branchOrTag?: string\n  ): Promise<any | null>;\n  initRepo(config: RepoParams): Promise<RepoResult>;\n  getPrList(): Promise<Pr[]>;\n  ensureIssueClosing(title: string): Promise<void>;\n  ensureIssue(\n    issueConfig: EnsureIssueConfig\n  ): Promise<EnsureIssueResult | null>;\n  massageMarkdown(prBody: string): string;\n  updatePr(prConfig: UpdatePrConfig): Promise<void>;\n  mergePr(config: MergePRConfig): Promise<boolean>;\n  addReviewers(number: number, reviewers: string[]): Promise<void>;\n  addAssignees(number: number, assignees: string[]): Promise<void>;\n  createPr(prConfig: CreatePRConfig): Promise<Pr | null>;\n  getRepos(): Promise<string[]>;\n  getRepoForceRebase(): Promise<boolean>;\n  deleteLabel(number: number, label: string): Promise<void>;\n  setBranchStatus(branchStatusConfig: BranchStatusConfig): Promise<void>;\n  getBranchStatusCheck(\n    branchName: string,\n    // TODO: can be undefined or null ? #7154\n    context: string | null | undefined\n  ): Promise<BranchStatus | null>;\n  ensureCommentRemoval(\n    ensureCommentRemoval:\n      | EnsureCommentRemovalConfigByTopic\n      | EnsureCommentRemovalConfigByContent\n  ): Promise<void>;\n  ensureComment(ensureComment: EnsureCommentConfig): Promise<boolean>;\n  getPr(number: number): Promise<Pr | null>;\n  findPr(findPRConfig: FindPRConfig): Promise<Pr | null>;\n  refreshPr?(number: number): Promise<void>;\n  getBranchStatus(branchName: string): Promise<BranchStatus>;\n  getBranchPr(branchName: string): Promise<Pr | null>;\n  initPlatform(config: PlatformParams): Promise<PlatformResult>;\n  filterUnavailableUsers?(users: string[]): Promise<string[]>;\n  commitFiles?(config: CommitFilesConfig): Promise<CommitSha | null>;\n}\n"]}