{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/modules/platform/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport type { AllConfig } from '../../config/types';\nimport { PLATFORM_NOT_FOUND } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport type { HostRule } from '../../types';\nimport { setGitAuthor, setNoVerify, setPrivateKey } from '../../util/git';\nimport * as hostRules from '../../util/host-rules';\nimport platforms from './api';\nimport type { Platform } from './types';\n\nexport * from './types';\n\nexport const getPlatformList = (): string[] => Array.from(platforms.keys());\nexport const getPlatforms = (): Map<string, Platform> => platforms;\n\nlet _platform: Platform | undefined;\n\nconst handler: ProxyHandler<Platform> = {\n  get(_target: Platform, prop: keyof Platform) {\n    if (!_platform) {\n      throw new Error(PLATFORM_NOT_FOUND);\n    }\n    return _platform[prop];\n  },\n};\n\nexport const platform = new Proxy<Platform>({} as any, handler);\n\nexport function setPlatformApi(name: string): void {\n  if (!platforms.has(name)) {\n    throw new Error(\n      `Init: Platform \"${name}\" not found. Must be one of: ${getPlatformList().join(\n        ', '\n      )}`\n    );\n  }\n  _platform = platforms.get(name);\n}\n\nexport async function initPlatform(config: AllConfig): Promise<AllConfig> {\n  setPrivateKey(config.gitPrivateKey);\n  setNoVerify(config.gitNoVerify ?? []);\n  // TODO: `platform` (#7154)\n  setPlatformApi(config.platform!);\n  // TODO: types\n  const platformInfo = await platform.initPlatform(config);\n  const returnConfig: any = { ...config, ...platformInfo };\n  // istanbul ignore else\n  if (config?.gitAuthor) {\n    logger.debug(`Using configured gitAuthor (${config.gitAuthor})`);\n    returnConfig.gitAuthor = config.gitAuthor;\n  } else if (platformInfo?.gitAuthor) {\n    logger.debug(`Using platform gitAuthor: ${String(platformInfo.gitAuthor)}`);\n    returnConfig.gitAuthor = platformInfo.gitAuthor;\n  }\n  // This is done for validation and will be overridden later once repo config is incorporated\n  setGitAuthor(returnConfig.gitAuthor);\n  const platformRule: HostRule = {\n    // TODO: null check (#7154)\n    matchHost: URL.parse(returnConfig.endpoint).hostname!,\n  };\n  // There might have been platform-specific modifications to the token\n  if (returnConfig.token) {\n    config.token = returnConfig.token;\n  }\n  (\n    ['token', 'username', 'password'] as ('token' | 'username' | 'password')[]\n  ).forEach((field) => {\n    if (config[field]) {\n      // TODO: types #7154\n      platformRule[field] = config[field] as string;\n      delete returnConfig[field];\n    }\n  });\n  returnConfig.hostRules = returnConfig.hostRules || [];\n  const typedPlatformRule = {\n    ...platformRule,\n    hostType: returnConfig.platform,\n  };\n  returnConfig.hostRules.push(typedPlatformRule);\n  hostRules.add(typedPlatformRule);\n  return returnConfig;\n}\n"]}