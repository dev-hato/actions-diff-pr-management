{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport is from '@sindresorhus/is';\nimport JSON5 from 'json5';\nimport { PlatformId } from '../../../constants';\nimport { REPOSITORY_NOT_FOUND } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { BranchStatus, PrState, VulnerabilityAlert } from '../../../types';\nimport * as git from '../../../util/git';\nimport * as hostRules from '../../../util/host-rules';\nimport { BitbucketHttp, setBaseUrl } from '../../../util/http/bitbucket';\nimport { regEx } from '../../../util/regex';\nimport { sanitize } from '../../../util/sanitize';\nimport type {\n  BranchStatusConfig,\n  CreatePRConfig,\n  EnsureCommentConfig,\n  EnsureCommentRemovalConfig,\n  EnsureIssueConfig,\n  EnsureIssueResult,\n  FindPRConfig,\n  Issue,\n  MergePRConfig,\n  PlatformParams,\n  PlatformResult,\n  Pr,\n  RepoParams,\n  RepoResult,\n  UpdatePrConfig,\n} from '../types';\nimport { smartTruncate } from '../utils/pr-body';\nimport { readOnlyIssueBody } from '../utils/read-only-issue-body';\nimport * as comments from './comments';\nimport * as utils from './utils';\nimport {\n  Account,\n  PrResponse,\n  RepoInfoBody,\n  mergeBodyTransformer,\n} from './utils';\n\nconst bitbucketHttp = new BitbucketHttp();\n\nconst BITBUCKET_PROD_ENDPOINT = 'https://api.bitbucket.org/';\n\nlet config: utils.Config = {} as any;\n\nconst defaults = { endpoint: BITBUCKET_PROD_ENDPOINT };\n\nconst pathSeparator = '/';\n\nlet renovateUserUuid: string | null = null;\n\nexport async function initPlatform({\n  endpoint,\n  username,\n  password,\n}: PlatformParams): Promise<PlatformResult> {\n  if (!(username && password)) {\n    throw new Error(\n      'Init: You must configure a Bitbucket username and password'\n    );\n  }\n  if (endpoint && endpoint !== BITBUCKET_PROD_ENDPOINT) {\n    logger.warn(\n      `Init: Bitbucket Cloud endpoint should generally be ${BITBUCKET_PROD_ENDPOINT} but is being configured to a different value. Did you mean to use Bitbucket Server?`\n    );\n    defaults.endpoint = endpoint;\n  }\n  setBaseUrl(defaults.endpoint);\n  renovateUserUuid = null;\n  try {\n    const { uuid } = (\n      await bitbucketHttp.getJson<Account>('/2.0/user', {\n        username,\n        password,\n        useCache: false,\n      })\n    ).body;\n    renovateUserUuid = uuid;\n  } catch (err) {\n    if (\n      err.statusCode === 403 &&\n      err.body?.error?.detail?.required?.includes('account')\n    ) {\n      logger.warn(`Bitbucket: missing 'account' scope for password`);\n    } else {\n      logger.debug({ err }, 'Unknown error fetching Bitbucket user identity');\n    }\n  }\n  // TODO: Add a connection check that endpoint/username/password combination are valid (#9594)\n  const platformConfig: PlatformResult = {\n    endpoint: endpoint ?? BITBUCKET_PROD_ENDPOINT,\n  };\n  return Promise.resolve(platformConfig);\n}\n\n// Get all repositories that the user has access to\nexport async function getRepos(): Promise<string[]> {\n  logger.debug('Autodiscovering Bitbucket Cloud repositories');\n  try {\n    const repos = await utils.accumulateValues<{ full_name: string }>(\n      `/2.0/repositories/?role=contributor`\n    );\n    return repos.map((repo) => repo.full_name);\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, `bitbucket getRepos error`);\n    throw err;\n  }\n}\n\nexport async function getRawFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string\n): Promise<string | null> {\n  // See: https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Bworkspace%7D/%7Brepo_slug%7D/src/%7Bcommit%7D/%7Bpath%7D\n  const repo = repoName ?? config.repository;\n  const path = fileName;\n\n  let finalBranchOrTag = branchOrTag;\n  if (branchOrTag?.includes(pathSeparator)) {\n    // Branch name contans slash, so we have to replace branch name with SHA1 of the head commit; otherwise the API will not work.\n    finalBranchOrTag = await getBranchCommit(branchOrTag);\n  }\n\n  const url =\n    `/2.0/repositories/${repo}/src/` +\n    (finalBranchOrTag ?? `HEAD`) +\n    `/${path}`;\n  const res = await bitbucketHttp.get(url);\n  return res.body;\n}\n\nexport async function getJsonFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string\n): Promise<any | null> {\n  // TODO #7154\n  const raw = (await getRawFile(fileName, repoName, branchOrTag)) as string;\n  return JSON5.parse(raw);\n}\n\n// Initialize bitbucket by getting base branch and SHA\nexport async function initRepo({\n  repository,\n  cloneSubmodules,\n  ignorePrAuthor,\n}: RepoParams): Promise<RepoResult> {\n  logger.debug(`initRepo(\"${repository}\")`);\n  const opts = hostRules.find({\n    hostType: PlatformId.Bitbucket,\n    url: defaults.endpoint,\n  });\n  config = {\n    repository,\n    username: opts.username,\n    ignorePrAuthor,\n  } as utils.Config;\n  let info: utils.RepoInfo;\n  try {\n    info = utils.repoInfoTransformer(\n      (\n        await bitbucketHttp.getJson<RepoInfoBody>(\n          `/2.0/repositories/${repository}`\n        )\n      ).body\n    );\n    config.defaultBranch = info.mainbranch;\n\n    config = {\n      ...config,\n      owner: info.owner,\n      mergeMethod: info.mergeMethod,\n      has_issues: info.has_issues,\n    };\n\n    logger.debug(`${repository} owner = ${config.owner}`);\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      throw new Error(REPOSITORY_NOT_FOUND);\n    }\n    logger.debug({ err }, 'Unknown Bitbucket initRepo error');\n    throw err;\n  }\n\n  const { hostname } = URL.parse(defaults.endpoint);\n\n  // Converts API hostnames to their respective HTTP git hosts:\n  // `api.bitbucket.org`  to `bitbucket.org`\n  // `api-staging.<host>` to `staging.<host>`\n  // TODO #7154\n  const hostnameWithoutApiPrefix = regEx(/api[.|-](.+)/).exec(hostname!)?.[1];\n\n  const url = git.getUrl({\n    protocol: 'https',\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    auth: `${opts.username}:${opts.password}`,\n    hostname: hostnameWithoutApiPrefix,\n    repository,\n  });\n\n  await git.initRepo({\n    ...config,\n    url,\n    cloneSubmodules,\n  });\n  const repoConfig: RepoResult = {\n    defaultBranch: info.mainbranch,\n    isFork: info.isFork,\n  };\n  return repoConfig;\n}\n\n// Returns true if repository has rule enforcing PRs are up-to-date with base branch before merging\nexport function getRepoForceRebase(): Promise<boolean> {\n  // BB doesn't have an option to flag staled branches\n  return Promise.resolve(false);\n}\n\n// istanbul ignore next\nfunction matchesState(state: string, desiredState: string): boolean {\n  if (desiredState === PrState.All) {\n    return true;\n  }\n  if (desiredState.startsWith('!')) {\n    return state !== desiredState.substring(1);\n  }\n  return state === desiredState;\n}\n\nexport async function getPrList(): Promise<Pr[]> {\n  logger.debug('getPrList()');\n  if (!config.prList) {\n    logger.debug('Retrieving PR list');\n    let url = `/2.0/repositories/${config.repository}/pullrequests?`;\n    url += utils.prStates.all.map((state) => 'state=' + state).join('&');\n    if (renovateUserUuid && !config.ignorePrAuthor) {\n      url += `&q=author.uuid=\"${renovateUserUuid}\"`;\n    }\n    const prs = await utils.accumulateValues(url, undefined, undefined, 50);\n    config.prList = prs.map(utils.prInfo);\n    logger.debug({ length: config.prList.length }, 'Retrieved Pull Requests');\n  }\n  return config.prList;\n}\n\nexport async function findPr({\n  branchName,\n  prTitle,\n  state = PrState.All,\n}: FindPRConfig): Promise<Pr | null> {\n  // TODO: types (#7154)\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  logger.debug(`findPr(${branchName}, ${prTitle}, ${state})`);\n  const prList = await getPrList();\n  const pr = prList.find(\n    (p) =>\n      p.sourceBranch === branchName &&\n      (!prTitle || p.title === prTitle) &&\n      matchesState(p.state, state)\n  );\n  if (pr) {\n    logger.debug(`Found PR #${pr.number}`);\n  }\n  return pr ?? null;\n}\n\n// Gets details for a PR\nexport async function getPr(prNo: number): Promise<Pr | null> {\n  const pr = (\n    await bitbucketHttp.getJson<PrResponse>(\n      `/2.0/repositories/${config.repository}/pullrequests/${prNo}`\n    )\n  ).body;\n\n  // istanbul ignore if\n  if (!pr) {\n    return null;\n  }\n\n  const res: any = {\n    displayNumber: `Pull Request #${pr.id}`,\n    ...utils.prInfo(pr),\n  };\n\n  res.hasReviewers = is.nonEmptyArray(pr.reviewers);\n\n  return res;\n}\n\nconst escapeHash = (input: string): string =>\n  input ? input.replace(regEx(/#/g), '%23') : input;\n\ninterface BranchResponse {\n  target: {\n    hash: string;\n  };\n}\n\n// Return the commit SHA for a branch\nasync function getBranchCommit(\n  branchName: string\n): Promise<string | undefined> {\n  try {\n    const branch = (\n      await bitbucketHttp.getJson<BranchResponse>(\n        `/2.0/repositories/${config.repository}/refs/branches/${escapeHash(\n          branchName\n        )}`\n      )\n    ).body;\n    return branch.target.hash;\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, `getBranchCommit('${branchName}') failed'`);\n    return undefined;\n  }\n}\n\n// Returns the Pull Request for a branch. Null if not exists.\nexport async function getBranchPr(branchName: string): Promise<Pr | null> {\n  logger.debug(`getBranchPr(${branchName})`);\n  const existingPr = await findPr({\n    branchName,\n    state: PrState.Open,\n  });\n  return existingPr ? getPr(existingPr.number) : null;\n}\n\nasync function getStatus(\n  branchName: string,\n  useCache = true\n): Promise<utils.BitbucketStatus[]> {\n  const sha = await getBranchCommit(branchName);\n  return utils.accumulateValues<utils.BitbucketStatus>(\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    `/2.0/repositories/${config.repository}/commit/${sha}/statuses`,\n    'get',\n    { useCache }\n  );\n}\n// Returns the combined status for a branch.\nexport async function getBranchStatus(\n  branchName: string\n): Promise<BranchStatus> {\n  logger.debug(`getBranchStatus(${branchName})`);\n  const statuses = await getStatus(branchName);\n  logger.debug({ branch: branchName, statuses }, 'branch status check result');\n  if (!statuses.length) {\n    logger.debug('empty branch status check result = returning \"pending\"');\n    return BranchStatus.yellow;\n  }\n  const noOfFailures = statuses.filter(\n    (status: { state: string }) =>\n      status.state === 'FAILED' || status.state === 'STOPPED'\n  ).length;\n  if (noOfFailures) {\n    return BranchStatus.red;\n  }\n  const noOfPending = statuses.filter(\n    (status: { state: string }) => status.state === 'INPROGRESS'\n  ).length;\n  if (noOfPending) {\n    return BranchStatus.yellow;\n  }\n  return BranchStatus.green;\n}\n\nconst bbToRenovateStatusMapping: Record<string, BranchStatus> = {\n  SUCCESSFUL: BranchStatus.green,\n  INPROGRESS: BranchStatus.yellow,\n  FAILED: BranchStatus.red,\n};\n\nexport async function getBranchStatusCheck(\n  branchName: string,\n  context: string\n): Promise<BranchStatus | null> {\n  const statuses = await getStatus(branchName);\n  const bbState = statuses.find((status) => status.key === context)?.state;\n  // TODO #7154\n  return bbToRenovateStatusMapping[bbState!] || null;\n}\n\nexport async function setBranchStatus({\n  branchName,\n  context,\n  description,\n  state,\n  url: targetUrl,\n}: BranchStatusConfig): Promise<void> {\n  const sha = await getBranchCommit(branchName);\n\n  // TargetUrl can not be empty so default to bitbucket\n  const url = targetUrl ?? /* istanbul ignore next */ 'https://bitbucket.org';\n\n  const body = {\n    name: context,\n    state: utils.buildStates[state],\n    key: context,\n    description,\n    url,\n  };\n\n  await bitbucketHttp.postJson(\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    `/2.0/repositories/${config.repository}/commit/${sha}/statuses/build`,\n    { body }\n  );\n  // update status cache\n  await getStatus(branchName, false);\n}\n\ntype BbIssue = { id: number; title: string; content?: { raw: string } };\n\nasync function findOpenIssues(title: string): Promise<BbIssue[]> {\n  try {\n    const filter = encodeURIComponent(\n      [\n        `title=${JSON.stringify(title)}`,\n        '(state = \"new\" OR state = \"open\")',\n        `reporter.username=\"${config.username}\"`,\n      ].join(' AND ')\n    );\n    return (\n      (\n        await bitbucketHttp.getJson<{ values: BbIssue[] }>(\n          `/2.0/repositories/${config.repository}/issues?q=${filter}`\n        )\n      ).body.values || /* istanbul ignore next */ []\n    );\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error finding issues');\n    return [];\n  }\n}\n\nexport async function findIssue(title: string): Promise<Issue | null> {\n  logger.debug(`findIssue(${title})`);\n\n  /* istanbul ignore if */\n  if (!config.has_issues) {\n    logger.debug('Issues are disabled - cannot findIssue');\n    return null;\n  }\n  const issues = await findOpenIssues(title);\n  if (!issues.length) {\n    return null;\n  }\n  const [issue] = issues;\n  return {\n    number: issue.id,\n    body: issue.content?.raw,\n  };\n}\n\nasync function closeIssue(issueNumber: number): Promise<void> {\n  await bitbucketHttp.putJson(\n    `/2.0/repositories/${config.repository}/issues/${issueNumber}`,\n    {\n      body: { state: 'closed' },\n    }\n  );\n}\n\nexport function massageMarkdown(input: string): string {\n  // Remove any HTML we use\n  return smartTruncate(input, 50000)\n    .replace(\n      'you tick the rebase/retry checkbox',\n      'rename PR to start with \"rebase!\"'\n    )\n    .replace(regEx(/<\\/?summary>/g), '**')\n    .replace(regEx(/<\\/?details>/g), '')\n    .replace(regEx(`\\n---\\n\\n.*?<!-- rebase-check -->.*?\\n`), '')\n    .replace(regEx(/\\]\\(\\.\\.\\/pull\\//g), '](../../pull-requests/')\n    .replace(regEx(/<!--renovate-debug:.*?-->/), '');\n}\n\nexport async function ensureIssue({\n  title,\n  reuseTitle,\n  body,\n}: EnsureIssueConfig): Promise<EnsureIssueResult | null> {\n  logger.debug(`ensureIssue()`);\n  const description = massageMarkdown(sanitize(body));\n\n  /* istanbul ignore if */\n  if (!config.has_issues) {\n    logger.warn('Issues are disabled - cannot ensureIssue');\n    logger.debug({ title }, 'Failed to ensure Issue');\n    return null;\n  }\n  try {\n    let issues = await findOpenIssues(title);\n    if (!issues.length && reuseTitle) {\n      issues = await findOpenIssues(reuseTitle);\n    }\n    if (issues.length) {\n      // Close any duplicates\n      for (const issue of issues.slice(1)) {\n        await closeIssue(issue.id);\n      }\n      const [issue] = issues;\n      if (\n        issue.title !== title ||\n        String(issue.content?.raw).trim() !== description.trim()\n      ) {\n        logger.debug('Issue updated');\n        await bitbucketHttp.putJson(\n          `/2.0/repositories/${config.repository}/issues/${issue.id}`,\n          {\n            body: {\n              content: {\n                raw: readOnlyIssueBody(description),\n                markup: 'markdown',\n              },\n            },\n          }\n        );\n        return 'updated';\n      }\n    } else {\n      logger.info('Issue created');\n      await bitbucketHttp.postJson(\n        `/2.0/repositories/${config.repository}/issues`,\n        {\n          body: {\n            title,\n            content: {\n              raw: readOnlyIssueBody(description),\n              markup: 'markdown',\n            },\n          },\n        }\n      );\n      return 'created';\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message.startsWith('Repository has no issue tracker.')) {\n      logger.debug(`Issues are disabled, so could not create issue: ${title}`);\n    } else {\n      logger.warn({ err }, 'Could not ensure issue');\n    }\n  }\n  return null;\n}\n\n/* istanbul ignore next */\nexport async function getIssueList(): Promise<Issue[]> {\n  logger.debug(`getIssueList()`);\n\n  if (!config.has_issues) {\n    logger.debug('Issues are disabled - cannot getIssueList');\n    return [];\n  }\n  try {\n    const filter = encodeURIComponent(\n      [\n        '(state = \"new\" OR state = \"open\")',\n        `reporter.username=\"${config.username}\"`,\n      ].join(' AND ')\n    );\n    return (\n      (\n        await bitbucketHttp.getJson<{ values: Issue[] }>(\n          `/2.0/repositories/${config.repository}/issues?q=${filter}`\n        )\n      ).body.values || []\n    );\n  } catch (err) {\n    logger.warn({ err }, 'Error finding issues');\n    return [];\n  }\n}\n\nexport async function ensureIssueClosing(title: string): Promise<void> {\n  /* istanbul ignore if */\n  if (!config.has_issues) {\n    logger.debug('Issues are disabled - cannot ensureIssueClosing');\n    return;\n  }\n  const issues = await findOpenIssues(title);\n  for (const issue of issues) {\n    await closeIssue(issue.id);\n  }\n}\n\nexport function addAssignees(\n  _prNr: number,\n  _assignees: string[]\n): Promise<void> {\n  // Bitbucket supports \"participants\" and \"reviewers\" so does not seem to have the concept of \"assignee\"\n  logger.warn('Cannot add assignees');\n  return Promise.resolve();\n}\n\nexport async function addReviewers(\n  prId: number,\n  reviewers: string[]\n): Promise<void> {\n  logger.debug(`Adding reviewers '${reviewers.join(', ')}' to #${prId}`);\n\n  // TODO #7154\n  const { title } = (await getPr(prId))!;\n\n  const body = {\n    title,\n    reviewers: reviewers.map((username: string) => ({ username })),\n  };\n\n  await bitbucketHttp.putJson(\n    `/2.0/repositories/${config.repository}/pullrequests/${prId}`,\n    {\n      body,\n    }\n  );\n}\n\n/* istanbul ignore next */\nexport function deleteLabel(): never {\n  throw new Error('deleteLabel not implemented');\n}\n\nexport function ensureComment({\n  number,\n  topic,\n  content,\n}: EnsureCommentConfig): Promise<boolean> {\n  // https://developer.atlassian.com/bitbucket/api/2/reference/search?q=pullrequest+comment\n  return comments.ensureComment({\n    config,\n    number,\n    topic,\n    content: sanitize(content),\n  });\n}\n\nexport function ensureCommentRemoval(\n  deleteConfig: EnsureCommentRemovalConfig\n): Promise<void> {\n  return comments.ensureCommentRemoval(config, deleteConfig);\n}\n\nasync function sanitizeReviewers(\n  reviewers: Account[],\n  err: any\n): Promise<Account[] | undefined> {\n  if (err.statusCode === 400 && err.body?.error?.fields?.reviewers) {\n    const sanitizedReviewers: Account[] = [];\n\n    for (const msg of err.body.error.fields.reviewers) {\n      // Bitbucket returns a 400 if any of the PR reviewer accounts are now inactive (ie: disabled/suspended)\n      if (msg === 'Malformed reviewers list') {\n        logger.debug(\n          { err },\n          'PR contains inactive reviewer accounts. Will try setting only active reviewers'\n        );\n\n        // Validate that each previous PR reviewer account is still active\n        for (const reviewer of reviewers) {\n          const reviewerUser = (\n            await bitbucketHttp.getJson<Account>(`/2.0/users/${reviewer.uuid}`)\n          ).body;\n\n          if (reviewerUser.account_status === 'active') {\n            sanitizedReviewers.push(reviewer);\n          }\n        }\n\n        // Bitbucket returns a 400 if any of the PR reviewer accounts are no longer members of this workspace\n      } else if (\n        msg.endsWith(\n          'is not a member of this workspace and cannot be added to this pull request'\n        )\n      ) {\n        logger.debug(\n          { err },\n          'PR contains reviewer accounts which are no longer member of this workspace. Will try setting only member reviewers'\n        );\n\n        const workspace = config.repository.split('/')[0];\n\n        // Validate that each previous PR reviewer account is still a member of this workspace\n        for (const reviewer of reviewers) {\n          try {\n            await bitbucketHttp.get(\n              `/2.0/workspaces/${workspace}/members/${reviewer.uuid}`\n            );\n\n            sanitizedReviewers.push(reviewer);\n          } catch (err) {\n            // HTTP 404: User cannot be found, or the user is not a member of this workspace.\n            if (err.response?.statusCode !== 404) {\n              throw err;\n            }\n          }\n        }\n      } else {\n        return undefined;\n      }\n    }\n\n    return sanitizedReviewers;\n  }\n\n  return undefined;\n}\n\n// Creates PR and returns PR number\nexport async function createPr({\n  sourceBranch,\n  targetBranch,\n  prTitle: title,\n  prBody: description,\n  platformOptions,\n}: CreatePRConfig): Promise<Pr> {\n  // labels is not supported in Bitbucket: https://bitbucket.org/site/master/issues/11976/ability-to-add-labels-to-pull-requests-bb\n\n  const base = targetBranch;\n\n  logger.debug({ repository: config.repository, title, base }, 'Creating PR');\n\n  let reviewers: Account[] = [];\n\n  if (platformOptions?.bbUseDefaultReviewers) {\n    const reviewersResponse = (\n      await bitbucketHttp.getJson<utils.PagedResult<Account>>(\n        `/2.0/repositories/${config.repository}/default-reviewers`\n      )\n    ).body;\n    reviewers = reviewersResponse.values.map((reviewer: Account) => ({\n      uuid: reviewer.uuid,\n    }));\n  }\n\n  const body = {\n    title,\n    description: sanitize(description),\n    source: {\n      branch: {\n        name: sourceBranch,\n      },\n    },\n    destination: {\n      branch: {\n        name: base,\n      },\n    },\n    close_source_branch: true,\n    reviewers,\n  };\n\n  try {\n    const prRes = (\n      await bitbucketHttp.postJson<PrResponse>(\n        `/2.0/repositories/${config.repository}/pullrequests`,\n        {\n          body,\n        }\n      )\n    ).body;\n    const pr = utils.prInfo(prRes);\n    // istanbul ignore if\n    if (config.prList) {\n      config.prList.push(pr);\n    }\n    return pr;\n  } catch (err) /* istanbul ignore next */ {\n    // Try sanitizing reviewers\n    const sanitizedReviewers = await sanitizeReviewers(reviewers, err);\n\n    if (sanitizedReviewers === undefined) {\n      logger.warn({ err }, 'Error creating pull request');\n      throw err;\n    } else {\n      const prRes = (\n        await bitbucketHttp.postJson<PrResponse>(\n          `/2.0/repositories/${config.repository}/pullrequests`,\n          {\n            body: {\n              ...body,\n              reviewers: sanitizedReviewers,\n            },\n          }\n        )\n      ).body;\n      const pr = utils.prInfo(prRes);\n      // istanbul ignore if\n      if (config.prList) {\n        config.prList.push(pr);\n      }\n      return pr;\n    }\n  }\n}\n\nexport async function updatePr({\n  number: prNo,\n  prTitle: title,\n  prBody: description,\n  state,\n}: UpdatePrConfig): Promise<void> {\n  logger.debug(`updatePr(${prNo}, ${title}, body)`);\n  // Updating a PR in Bitbucket will clear the reviewers if reviewers is not present\n  const pr = (\n    await bitbucketHttp.getJson<PrResponse>(\n      `/2.0/repositories/${config.repository}/pullrequests/${prNo}`\n    )\n  ).body;\n\n  try {\n    await bitbucketHttp.putJson(\n      `/2.0/repositories/${config.repository}/pullrequests/${prNo}`,\n      {\n        body: {\n          title,\n          description: sanitize(description),\n          reviewers: pr.reviewers,\n        },\n      }\n    );\n  } catch (err) {\n    // Try sanitizing reviewers\n    const sanitizedReviewers = await sanitizeReviewers(pr.reviewers, err);\n\n    if (sanitizedReviewers === undefined) {\n      throw err;\n    } else {\n      await bitbucketHttp.putJson(\n        `/2.0/repositories/${config.repository}/pullrequests/${prNo}`,\n        {\n          body: {\n            title,\n            description: sanitize(description),\n            reviewers: sanitizedReviewers,\n          },\n        }\n      );\n    }\n  }\n\n  if (state === PrState.Closed && pr) {\n    await bitbucketHttp.postJson(\n      `/2.0/repositories/${config.repository}/pullrequests/${prNo}/decline`\n    );\n  }\n}\n\nexport async function mergePr({\n  branchName,\n  id: prNo,\n  strategy: mergeStrategy,\n}: MergePRConfig): Promise<boolean> {\n  // TODO: types (#7154)\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  logger.debug(`mergePr(${prNo}, ${branchName}, ${mergeStrategy})`);\n\n  // Bitbucket Cloud does not support a rebase-alike; https://jira.atlassian.com/browse/BCLOUD-16610\n  if (mergeStrategy === 'rebase') {\n    logger.warn('Bitbucket Cloud does not support a \"rebase\" strategy.');\n    return false;\n  }\n\n  try {\n    await bitbucketHttp.postJson(\n      `/2.0/repositories/${config.repository}/pullrequests/${prNo}/merge`,\n      {\n        body: mergeBodyTransformer(mergeStrategy),\n      }\n    );\n    logger.debug('Automerging succeeded');\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, `PR merge error`);\n    logger.info({ pr: prNo }, 'PR automerge failed');\n    return false;\n  }\n  return true;\n}\n\nexport function getVulnerabilityAlerts(): Promise<VulnerabilityAlert[]> {\n  return Promise.resolve([]);\n}\n"]}