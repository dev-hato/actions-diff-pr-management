{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket-server/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// SEE for the reference https://github.com/renovatebot/renovate/blob/c3e9e572b225085448d94aa121c7ec81c14d3955/lib/platform/bitbucket/utils.js\nimport url from 'url';\nimport is from '@sindresorhus/is';\nimport { CONFIG_GIT_URL_UNAVAILABLE } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { HostRule, PrState } from '../../../types';\nimport type { GitProtocol } from '../../../types/git';\nimport * as git from '../../../util/git';\nimport { BitbucketServerHttp } from '../../../util/http/bitbucket-server';\nimport type {\n  HttpOptions,\n  HttpPostOptions,\n  HttpResponse,\n} from '../../../util/http/types';\nimport { parseUrl } from '../../../util/url';\nimport { getPrBodyStruct } from '../pr-body';\nimport type { GitUrlOption } from '../types';\nimport type { BbsPr, BbsRestPr, BbsRestRepo, BitbucketError } from './types';\n\nexport const BITBUCKET_INVALID_REVIEWERS_EXCEPTION =\n  'com.atlassian.bitbucket.pull.InvalidPullRequestReviewersException';\n\nconst bitbucketServerHttp = new BitbucketServerHttp();\n\n// https://docs.atlassian.com/bitbucket-server/rest/6.0.0/bitbucket-rest.html#idp250\nconst prStateMapping: any = {\n  MERGED: PrState.Merged,\n  DECLINED: PrState.Closed,\n  OPEN: PrState.Open,\n};\n\nexport function prInfo(pr: BbsRestPr): BbsPr {\n  return {\n    version: pr.version,\n    number: pr.id,\n    bodyStruct: getPrBodyStruct(pr.description),\n    sourceBranch: pr.fromRef.displayId,\n    targetBranch: pr.toRef.displayId,\n    title: pr.title,\n    state: prStateMapping[pr.state],\n    createdAt: pr.createdDate,\n  };\n}\n\nconst addMaxLength = (inputUrl: string, limit = 100): string => {\n  const { search, ...parsedUrl } = url.parse(inputUrl, true); // eslint-disable-line @typescript-eslint/no-unused-vars\n  const maxedUrl = url.format({\n    ...parsedUrl,\n    query: { ...parsedUrl.query, limit },\n  });\n  return maxedUrl;\n};\n\nfunction callApi<T>(\n  apiUrl: string,\n  method: string,\n  options?: HttpOptions | HttpPostOptions\n): Promise<HttpResponse<T>> {\n  /* istanbul ignore next */\n  switch (method.toLowerCase()) {\n    case 'post':\n      return bitbucketServerHttp.postJson<T>(\n        apiUrl,\n        options as HttpPostOptions\n      );\n    case 'put':\n      return bitbucketServerHttp.putJson<T>(apiUrl, options as HttpPostOptions);\n    case 'patch':\n      return bitbucketServerHttp.patchJson<T>(\n        apiUrl,\n        options as HttpPostOptions\n      );\n    case 'head':\n      return bitbucketServerHttp.headJson<T>(apiUrl, options);\n    case 'delete':\n      return bitbucketServerHttp.deleteJson<T>(\n        apiUrl,\n        options as HttpPostOptions\n      );\n    case 'get':\n    default:\n      return bitbucketServerHttp.getJson<T>(apiUrl, options);\n  }\n}\n\nexport async function accumulateValues<T = any>(\n  reqUrl: string,\n  method = 'get',\n  options?: HttpOptions | HttpPostOptions,\n  limit?: number\n): Promise<T[]> {\n  let accumulator: T[] = [];\n  let nextUrl = addMaxLength(reqUrl, limit);\n\n  while (typeof nextUrl !== 'undefined') {\n    // TODO: fix typing (#9610)\n    const { body } = await callApi<{\n      values: T[];\n      isLastPage: boolean;\n      nextPageStart: string;\n    }>(nextUrl, method, options);\n    accumulator = [...accumulator, ...body.values];\n    if (body.isLastPage !== false) {\n      break;\n    }\n\n    const { search, ...parsedUrl } = url.parse(nextUrl, true); // eslint-disable-line @typescript-eslint/no-unused-vars\n    nextUrl = url.format({\n      ...parsedUrl,\n      query: {\n        ...parsedUrl.query,\n        start: body.nextPageStart,\n      },\n    });\n  }\n\n  return accumulator;\n}\n\nexport interface BitbucketCommitStatus {\n  failed: number;\n  inProgress: number;\n  successful: number;\n}\n\nexport type BitbucketBranchState =\n  | 'SUCCESSFUL'\n  | 'FAILED'\n  | 'INPROGRESS'\n  | 'STOPPED';\n\nexport interface BitbucketStatus {\n  key: string;\n  state: BitbucketBranchState;\n}\n\nexport function isInvalidReviewersResponse(err: BitbucketError): boolean {\n  const errors = err?.response?.body?.errors ?? [];\n  return (\n    errors.length > 0 &&\n    errors.every(\n      (error) => error.exceptionName === BITBUCKET_INVALID_REVIEWERS_EXCEPTION\n    )\n  );\n}\n\nexport function getInvalidReviewers(err: BitbucketError): string[] {\n  const errors = err?.response?.body?.errors ?? [];\n  let invalidReviewers: string[] = [];\n  for (const error of errors) {\n    if (error.exceptionName === BITBUCKET_INVALID_REVIEWERS_EXCEPTION) {\n      invalidReviewers = invalidReviewers.concat(\n        error.reviewerErrors\n          ?.map(({ context }) => context)\n          .filter(is.nonEmptyString) ?? []\n      );\n    }\n  }\n\n  return invalidReviewers;\n}\n\nfunction generateUrlFromEndpoint(\n  defaultEndpoint: string,\n  opts: HostRule,\n  repository: string\n): string {\n  const url = new URL(defaultEndpoint);\n  const generatedUrl = git.getUrl({\n    protocol: url.protocol as GitProtocol,\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    auth: `${opts.username}:${opts.password}`,\n    host: `${url.host}${url.pathname}${\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      url.pathname!.endsWith('/') ? '' : /* istanbul ignore next */ '/'\n    }scm`,\n    repository,\n  });\n  logger.debug({ url: generatedUrl }, `using generated endpoint URL`);\n  return generatedUrl;\n}\n\nfunction injectAuth(url: string, opts: HostRule): string {\n  const repoUrl = parseUrl(url)!;\n  if (!repoUrl) {\n    logger.debug(`Invalid url: ${url}`);\n    throw new Error(CONFIG_GIT_URL_UNAVAILABLE);\n  }\n  // TODO: null checks (#7154)\n  repoUrl.username = opts.username!;\n  repoUrl.password = opts.password!;\n  return repoUrl.toString();\n}\n\nexport function getRepoGitUrl(\n  repository: string,\n  defaultEndpoint: string,\n  gitUrl: GitUrlOption | undefined,\n  info: BbsRestRepo,\n  opts: HostRule\n): string {\n  if (gitUrl === 'ssh') {\n    const sshUrl = info.links.clone?.find(({ name }) => name === 'ssh');\n    if (sshUrl === undefined) {\n      throw new Error(CONFIG_GIT_URL_UNAVAILABLE);\n    }\n    logger.debug({ url: sshUrl.href }, `using ssh URL`);\n    return sshUrl.href;\n  }\n  let cloneUrl = info.links.clone?.find(({ name }) => name === 'http');\n  if (cloneUrl) {\n    // Inject auth into the API provided URL\n    return injectAuth(cloneUrl.href, opts);\n  }\n  // Http access might be disabled, try to find ssh url in this case\n  cloneUrl = info.links.clone?.find(({ name }) => name === 'ssh');\n  if (gitUrl === 'endpoint' || !cloneUrl) {\n    return generateUrlFromEndpoint(defaultEndpoint, opts, repository);\n  }\n  // SSH urls can be used directly\n  return cloneUrl.href;\n}\n"]}