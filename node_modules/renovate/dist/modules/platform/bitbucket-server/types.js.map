{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket-server/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { HTTPError, Response } from 'got';\nimport type { Pr } from '../types';\n\nexport interface BbsConfig {\n  bbUseDefaultReviewers: boolean;\n  fileList: any[];\n  mergeMethod: string;\n  owner: string;\n  prList: BbsPr[];\n  projectKey: string;\n  repository: string;\n  repositorySlug: string;\n\n  prVersions: Map<number, number>;\n  ignorePrAuthor: boolean;\n  username: string;\n}\n\nexport interface BbsPr extends Pr {\n  version?: number;\n}\n\nexport type BbsRestPrState = 'DECLINED' | 'OPEN' | 'MERGED';\n\nexport interface BbsRestBranchRef {\n  displayId: string;\n  id: string;\n}\n\nexport interface BbsRestUser {\n  name: string;\n}\n\nexport interface BbsRestUserRef {\n  user: BbsRestUser;\n}\n\nexport interface BbsRestPr {\n  createdDate: string;\n  description: string;\n  fromRef: BbsRestBranchRef;\n  id: number;\n  reviewers: BbsRestUserRef[];\n  state: BbsRestPrState;\n  title: string;\n  toRef: BbsRestBranchRef;\n  version?: number;\n}\n\nexport interface BbsRestRepo {\n  project: { key: string };\n  origin: { name: string; slug: string };\n  links: {\n    clone?: { href: string; name: string }[];\n  };\n}\n\nexport interface BbsRestBranch {\n  displayId: string;\n}\n\nexport interface BitbucketErrorResponse {\n  errors?: {\n    exceptionName?: string;\n    reviewerErrors?: { context?: string }[];\n  }[];\n}\n\nexport interface BitbucketError extends HTTPError {\n  readonly response: Response<BitbucketErrorResponse>;\n}\n"]}