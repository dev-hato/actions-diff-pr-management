{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/regex/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport semver from 'semver';\nimport { CONFIG_VALIDATION } from '../../../constants/error-messages';\nimport { regEx } from '../../../util/regex';\nimport { GenericVersion, GenericVersioningApi } from '../generic';\nimport type { VersioningApiConstructor } from '../types';\n\nexport const id = 'regex';\nexport const displayName = 'Regular Expression';\nexport const urls = [];\nexport const supportsRanges = false;\n\nexport interface RegExpVersion extends GenericVersion {\n  /**\n   * compatibility, if present, are treated as a compatibility layer: we will\n   * never try to update to a version with a different compatibility.\n   */\n  compatibility: string;\n}\n\n// convenience method for passing a Version object into any semver.* method.\nfunction asSemver(version: RegExpVersion): string {\n  let vstring = `${version.release[0]}.${version.release[1]}.${version.release[2]}`;\n  if (is.nonEmptyString(version.prerelease)) {\n    vstring += `-${version.prerelease}`;\n  }\n  return vstring;\n}\n\nexport class RegExpVersioningApi extends GenericVersioningApi<RegExpVersion> {\n  // config is expected to be overridden by a user-specified RegExp value\n  // sample values:\n  //\n  // * emulates the \"semver\" configuration:\n  //   RegExp('^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(-(?<prerelease>.*))?$')\n  // * emulates the \"docker\" configuration:\n  //   RegExp('^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(-(?<compatibility>.*))?$')\n  // * matches the versioning approach used by the Python images on DockerHub:\n  //   RegExp('^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(?<prerelease>[^.-]+)?(-(?<compatibility>.*))?$');\n  // * matches the versioning approach used by the Bitnami images on DockerHub:\n  //   RegExp('^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(:?-(?<compatibility>.*-r)(?<build>\\\\d+))?$');\n  protected readonly _config: RegExp;\n\n  constructor(_new_config: string | undefined) {\n    super();\n    const new_config = _new_config ?? '^(?<major>\\\\d+)?$';\n\n    // without at least one of {major, minor, patch} specified in the regex,\n    // this versioner will not work properly\n    if (\n      !new_config.includes('<major>') &&\n      !new_config.includes('<minor>') &&\n      !new_config.includes('<patch>')\n    ) {\n      const error = new Error(CONFIG_VALIDATION);\n      error.validationSource = new_config;\n      error.validationError =\n        'regex versioning needs at least one major, minor or patch group defined';\n      throw error;\n    }\n\n    // TODO: should we validate the user has not added extra unsupported\n    // capture groups? (#9717)\n    this._config = regEx(new_config);\n  }\n\n  // convenience method for passing a string into a Version given current config.\n  protected _parse(version: string): RegExpVersion | null {\n    const groups = this._config?.exec(version)?.groups;\n    if (!groups) {\n      return null;\n    }\n\n    const { major, minor, patch, build, prerelease, compatibility } = groups;\n    const release = [\n      typeof major === 'undefined' ? 0 : Number.parseInt(major, 10),\n      typeof minor === 'undefined' ? 0 : Number.parseInt(minor, 10),\n      typeof patch === 'undefined' ? 0 : Number.parseInt(patch, 10),\n    ];\n\n    if (build) {\n      release.push(Number.parseInt(build, 10));\n    }\n\n    return {\n      release,\n      prerelease: prerelease,\n      compatibility: compatibility,\n    };\n  }\n\n  override isCompatible(version: string, current: string): boolean {\n    const parsedVersion = this._parse(version);\n    const parsedCurrent = this._parse(current);\n    return !!(\n      parsedVersion &&\n      parsedCurrent &&\n      parsedVersion.compatibility === parsedCurrent.compatibility\n    );\n  }\n\n  override isLessThanRange(version: string, range: string): boolean {\n    const parsedVersion = this._parse(version);\n    const parsedRange = this._parse(range);\n    return !!(\n      parsedVersion &&\n      parsedRange &&\n      semver.ltr(asSemver(parsedVersion), asSemver(parsedRange))\n    );\n  }\n\n  override getSatisfyingVersion(\n    versions: string[],\n    range: string\n  ): string | null {\n    const parsedRange = this._parse(range);\n    return parsedRange\n      ? semver.maxSatisfying(\n          versions\n            .map((v) => this._parse(v))\n            .filter(is.truthy)\n            .map(asSemver),\n          asSemver(parsedRange)\n        )\n      : null;\n  }\n\n  override minSatisfyingVersion(\n    versions: string[],\n    range: string\n  ): string | null {\n    const parsedRange = this._parse(range);\n    return parsedRange\n      ? semver.minSatisfying(\n          versions\n            .map((v) => this._parse(v))\n            .filter(is.truthy)\n            .map(asSemver),\n          asSemver(parsedRange)\n        )\n      : null;\n  }\n\n  override matches(version: string, range: string): boolean {\n    const parsedVersion = this._parse(version);\n    const parsedRange = this._parse(range);\n    return !!(\n      parsedVersion &&\n      parsedRange &&\n      semver.satisfies(asSemver(parsedVersion), asSemver(parsedRange))\n    );\n  }\n}\n\nexport const api: VersioningApiConstructor = RegExpVersioningApi;\n\nexport default api;\n"]}