{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/nuget/index.ts"],"names":[],"mappings":";;;;AAAA,4DAA4B;AAC5B,+CAA4C;AAC5C,wCAAkE;AAGrD,QAAA,EAAE,GAAG,OAAO,CAAC;AACb,QAAA,WAAW,GAAG,OAAO,CAAC;AACtB,QAAA,IAAI,GAAG;IAClB,oEAAoE;CACrE,CAAC;AACW,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC,MAAM,OAAO,GAAG,IAAA,aAAK,EAAC,mCAAmC,CAAC,CAAC;AAE3D,MAAM,kBAAmB,SAAQ,8BAAoB;IACzC,MAAM,CAAC,OAAe;QAC9B,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,IAAI,CAAC;SACb;QACD,MAAM,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,GAAG,OAAO,CAAC;QACvC,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC9C,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,IAAI,EAAE,EAAE,CAAC;IACnD,CAAC;IAEkB,QAAQ,CAAC,OAAe,EAAE,KAAa;QACxD,MAAM,OAAO,GAAG,gBAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,gBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEpC,IAAI,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,EAAE;YACzB,OAAO,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;SACvC;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;CACF;AAEY,QAAA,GAAG,GAAkB,IAAI,kBAAkB,EAAE,CAAC;AAE3D,kBAAe,WAAG,CAAC","sourcesContent":["import semver from 'semver';\nimport { regEx } from '../../../util/regex';\nimport { GenericVersion, GenericVersioningApi } from '../generic';\nimport type { VersioningApi } from '../types';\n\nexport const id = 'nuget';\nexport const displayName = 'NuGet';\nexport const urls = [\n  'https://docs.microsoft.com/en-us/nuget/concepts/package-versioning',\n];\nexport const supportsRanges = false;\n\nconst pattern = regEx(/^(\\d+(?:\\.\\d+)*)(-[^+]+)?(\\+.*)?$/);\n\nclass NugetVersioningApi extends GenericVersioningApi {\n  protected _parse(version: string): GenericVersion | null {\n    const matches = pattern.exec(version);\n    if (!matches) {\n      return null;\n    }\n    const [, prefix, prerelease] = matches;\n    const release = prefix.split('.').map(Number);\n    return { release, prerelease: prerelease || '' };\n  }\n\n  protected override _compare(version: string, other: string): number {\n    const parsed1 = semver.parse(version);\n    const parsed2 = semver.parse(other);\n\n    if (!(parsed1 && parsed2)) {\n      return super._compare(version, other);\n    }\n    return parsed1.compare(parsed2);\n  }\n}\n\nexport const api: VersioningApi = new NugetVersioningApi();\n\nexport default api;\n"]}