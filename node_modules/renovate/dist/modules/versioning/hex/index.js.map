{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/hex/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RangeStrategy } from '../../../types/versioning';\nimport { regEx } from '../../../util/regex';\nimport { api as npm } from '../npm';\nimport type { NewValueConfig, VersioningApi } from '../types';\n\nexport const id = 'hex';\nexport const displayName = 'Hex';\nexport const urls = ['https://hexdocs.pm/elixir/Version.html'];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = [\n  'bump',\n  'widen',\n  'pin',\n  'replace',\n];\n\nfunction hex2npm(input: string): string {\n  return input\n    .replace(regEx(/~>\\s*(\\d+\\.\\d+)$/), '^$1')\n    .replace(regEx(/~>\\s*(\\d+\\.\\d+\\.\\d+)/), '~$1')\n    .replace(regEx(/==|and/), '')\n    .replace('or', '||')\n    .replace(regEx(/!=\\s*(\\d+\\.\\d+(\\.\\d+.*)?)/), '>$1 <$1')\n    .trim();\n}\n\nfunction npm2hex(input: string): string {\n  const res = input\n    .split(' ')\n    .map((str) => str.trim())\n    .filter((str) => str !== '');\n  let output = '';\n  const operators = ['^', '=', '>', '<', '<=', '>=', '~'];\n  for (let i = 0; i < res.length; i += 1) {\n    if (i === res.length - 1) {\n      output += res[i];\n      break;\n    }\n    if (i < res.length - 1 && res[i + 1].includes('||')) {\n      output += res[i] + ' or ';\n      i += 1;\n    } else if (operators.includes(res[i])) {\n      output += res[i] + ' ';\n    } else {\n      output += res[i] + ' and ';\n    }\n  }\n  return output;\n}\n\nfunction isLessThanRange(version: string, range: string): boolean {\n  return !!npm.isLessThanRange?.(hex2npm(version), hex2npm(range));\n}\n\nconst isValid = (input: string): boolean => !!npm.isValid(hex2npm(input));\n\nconst matches = (version: string, range: string): boolean =>\n  npm.matches(hex2npm(version), hex2npm(range));\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string\n): string | null {\n  return npm.getSatisfyingVersion(versions.map(hex2npm), hex2npm(range));\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string\n): string | null {\n  return npm.minSatisfyingVersion(versions.map(hex2npm), hex2npm(range));\n}\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string | null {\n  let newSemver = npm.getNewValue({\n    currentValue: hex2npm(currentValue),\n    rangeStrategy,\n    currentVersion,\n    newVersion,\n  });\n  if (newSemver) {\n    newSemver = npm2hex(newSemver);\n\n    if (regEx(/~>\\s*(\\d+\\.\\d+\\.\\d+)$/).test(currentValue)) {\n      newSemver = newSemver.replace(\n        regEx(/[\\^~]\\s*(\\d+\\.\\d+\\.\\d+)/),\n        (_str, p1: string) => `~> ${p1}`\n      );\n    } else if (regEx(/~>\\s*(\\d+\\.\\d+)$/).test(currentValue)) {\n      newSemver = newSemver.replace(\n        regEx(/\\^\\s*(\\d+\\.\\d+)(\\.\\d+)?/),\n        (_str, p1: string) => `~> ${p1}`\n      );\n    } else {\n      newSemver = newSemver.replace(regEx(/~\\s*(\\d+\\.\\d+\\.\\d)/), '~> $1');\n    }\n    if (npm.isVersion(newSemver)) {\n      newSemver = `== ${newSemver}`;\n    }\n  }\n  return newSemver;\n}\n\nexport { isValid };\n\nexport const api: VersioningApi = {\n  ...npm,\n  isLessThanRange,\n  isValid,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n  getNewValue,\n};\n\nexport default api;\n"]}