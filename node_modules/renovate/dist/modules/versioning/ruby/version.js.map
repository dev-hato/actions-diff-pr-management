{"version":3,"file":"version.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/ruby/version.ts"],"names":[],"mappings":"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","sourcesContent":["import { eq, major, minor, patch, prerelease } from '@renovatebot/ruby-semver';\nimport {\n  SegmentElement,\n  create,\n} from '@renovatebot/ruby-semver/dist/ruby/version.js';\nimport { regEx } from '../../../util/regex';\n\ninterface RubyVersion {\n  major: number;\n  minor: number;\n  patch: number;\n  prerelease: string[] | null;\n}\n\nfunction releaseSegments(version: string): SegmentElement[] {\n  const v = create(version);\n  if (v) {\n    return v.release().getSegments();\n  }\n  /* istanbul ignore next */\n  return [];\n}\n\nconst parse = (version: string): RubyVersion => ({\n  major: major(version),\n  minor: minor(version),\n  patch: patch(version),\n  prerelease: prerelease(version),\n});\n\nconst adapt = (left: string, right: string): string =>\n  left.split('.').slice(0, right.split('.').length).join('.');\n\nconst floor = (version: string): string =>\n  [...releaseSegments(version).slice(0, -1), 0].join('.');\n\n// istanbul ignore next\nconst incrementLastSegment = (version: string): string => {\n  const segments = releaseSegments(version);\n  const nextLast = parseInt(segments.pop() as string, 10) + 1;\n\n  return [...segments, nextLast].join('.');\n};\n\n// istanbul ignore next\nconst incrementMajor = (\n  maj: number,\n  min: number,\n  ptch: number,\n  pre: string[]\n): number => (min === 0 || ptch === 0 || pre.length === 0 ? maj + 1 : maj);\n\n// istanbul ignore next\nconst incrementMinor = (min: number, ptch: number, pre: string[]): number =>\n  ptch === 0 || pre.length === 0 ? min + 1 : min;\n\n// istanbul ignore next\nconst incrementPatch = (ptch: number, pre: string[]): number =>\n  pre.length === 0 ? ptch + 1 : ptch;\n\n// istanbul ignore next\nconst increment = (from: string, to: string): string => {\n  const parsed = parse(from);\n  const { major: maj, prerelease: pre } = parsed;\n  let { minor: min, patch: ptch } = parsed;\n  min = min || 0;\n  ptch = ptch || 0;\n\n  let nextVersion: string;\n  const adapted = adapt(to, from);\n  if (eq(from, adapted)) {\n    return incrementLastSegment(from);\n  }\n\n  const isStable = (x: string): boolean => regEx(/^[0-9.-/]+$/).test(x);\n  if (major(from) !== major(adapted)) {\n    nextVersion = [incrementMajor(maj, min, ptch, pre ?? []), 0, 0].join('.');\n  } else if (minor(from) !== minor(adapted)) {\n    nextVersion = [maj, incrementMinor(min, ptch, pre ?? []), 0].join('.');\n  } else if (patch(from) !== patch(adapted)) {\n    nextVersion = [maj, min, incrementPatch(ptch, pre ?? [])].join('.');\n  } else if (isStable(from) && isStable(adapted)) {\n    nextVersion = [maj, min, incrementPatch(ptch, pre ?? [])].join('.');\n  } else {\n    nextVersion = [maj, min, ptch].join('.');\n  }\n\n  return increment(nextVersion, to);\n};\n\n// istanbul ignore next\nconst decrement = (version: string): string => {\n  const segments = releaseSegments(version);\n  const nextSegments = segments\n    .reverse()\n    .reduce(\n      (\n        accumulator: number[],\n        segment: SegmentElement,\n        index: number\n      ): number[] => {\n        if (index === 0) {\n          return [(segment as number) - 1];\n        }\n\n        if (accumulator[index - 1] === -1) {\n          return [\n            ...accumulator.slice(0, index - 1),\n            0,\n            (segment as number) - 1,\n          ];\n        }\n\n        return [...accumulator, segment as number];\n      },\n      []\n    );\n\n  return nextSegments.reverse().join('.');\n};\n\nexport { parse, floor, increment, decrement };\n"]}