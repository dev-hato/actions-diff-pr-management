{"version":3,"file":"bump.js","sourceRoot":"","sources":["../../../../../lib/modules/versioning/ruby/strategies/bump.ts"],"names":[],"mappings":";;AAAA,0DAAoD;AACpD,+CAA4C;AAC5C,0CAAuE;AACvE,oCAA+C;AAC/C,wCAAyD;AAEzD,kBAAe,CAAC,EAAE,KAAK,EAAE,EAAE,EAAiC,EAAU,EAAE;IACtE,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,aAAU,CAAC,CAAC;IAChD,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,EAAE;QACnE,QAAQ,QAAQ,EAAE;YAChB,KAAK,aAAE;gBACL,OAAO,IAAA,iBAAG,EAAC,EAAE,EAAE,GAAG,CAAC;oBACjB,CAAC,CAAC,GAAG,aAAE,GAAG,SAAS,GAAG,GAAG,EAAE;oBAC3B,CAAC,CAAC,GAAG,aAAE,GAAG,SAAS,GAAG,IAAA,mBAAS,EAAC,EAAE,CAAC,EAAE,CAAC;YAC1C,KAAK,aAAE;gBACL,OAAO,IAAA,iBAAG,EAAC,EAAE,EAAE,GAAG,CAAC;oBACjB,CAAC,CAAC,GAAG,aAAE,GAAG,SAAS,GAAG,IAAA,mBAAS,EAAC,GAAG,EAAE,EAAE,CAAC,EAAE;oBAC1C,CAAC,CAAC,GAAG,aAAE,GAAG,SAAS,GAAG,GAAG,EAAE,CAAC;YAChC,KAAK,eAAI;gBACP,OAAO,GAAG,QAAQ,GAAG,SAAS,GAAG,IAAA,eAAK,EAAC,EAAE,CAAC,EAAE,CAAC;YAC/C,KAAK,cAAG,CAAC;YACT,KAAK,cAAG,CAAC;YACT,KAAK,gBAAK;gBACR,OAAO,GAAG,QAAQ,GAAG,SAAS,GAAG,EAAE,EAAE,CAAC;YACxC,KAAK,oBAAS;gBACZ,OAAO,GAAG,oBAAS,GAAG,SAAS,GAAG,GAAG,EAAE,CAAC;YAC1C,uBAAuB;YACvB;gBACE,eAAM,CAAC,IAAI,CAAC,yBAAyB,QAAQ,GAAG,CAAC,CAAC;gBAClD,OAAO,IAAI,CAAC;SACf;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC,CAAC","sourcesContent":["import { gte, lte } from '@renovatebot/ruby-semver';\nimport { logger } from '../../../../logger';\nimport { EQUAL, GT, GTE, LT, LTE, NOT_EQUAL, PGTE } from '../operator';\nimport { parse as parseRange } from '../range';\nimport { decrement, floor, increment } from '../version';\n\nexport default ({ range, to }: { range: string; to: string }): string => {\n  const ranges = range.split(',').map(parseRange);\n  const results = ranges.map(({ operator, version: ver, delimiter }) => {\n    switch (operator) {\n      case GT:\n        return lte(to, ver)\n          ? `${GT}${delimiter}${ver}`\n          : `${GT}${delimiter}${decrement(to)}`;\n      case LT:\n        return gte(to, ver)\n          ? `${LT}${delimiter}${increment(ver, to)}`\n          : `${LT}${delimiter}${ver}`;\n      case PGTE:\n        return `${operator}${delimiter}${floor(to)}`;\n      case GTE:\n      case LTE:\n      case EQUAL:\n        return `${operator}${delimiter}${to}`;\n      case NOT_EQUAL:\n        return `${NOT_EQUAL}${delimiter}${ver}`;\n      // istanbul ignore next\n      default:\n        logger.warn(`Unsupported operator '${operator}'`);\n        return null;\n    }\n  });\n\n  return results.join(', ');\n};\n"]}