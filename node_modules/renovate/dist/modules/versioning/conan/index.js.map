{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/conan/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as semver from 'semver';\nimport type { RangeStrategy } from '../../../types/versioning';\nimport { api as looseAPI } from '../loose';\nimport type { NewValueConfig, VersioningApi } from '../types';\nimport {\n  cleanVersion,\n  findSatisfyingVersion,\n  getOptions,\n  makeVersion,\n  matchesWithOptions,\n} from './common';\nimport {\n  bumpRange,\n  getMajor,\n  getMinor,\n  getPatch,\n  replaceRange,\n  widenRange,\n} from './range';\n\nexport const id = 'conan';\nexport const displayName = 'conan';\nexport const urls = [\n  'https://semver.org/',\n  'https://github.com/podhmo/python-node-semver',\n  'https://github.com/podhmo/python-node-semver/tree/master/examples',\n  'https://docs.conan.io/en/latest/versioning/version_ranges.html#version-ranges',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = [\n  'auto',\n  'bump',\n  'widen',\n  'replace',\n];\n\nconst MIN = 1;\nconst MAX = -1;\n\nfunction isVersion(input: string): boolean {\n  if (input && !input.includes('[')) {\n    const qualifiers = getOptions(input);\n    const version = cleanVersion(input);\n    if (qualifiers.loose) {\n      if (looseAPI.isVersion(version)) {\n        return true;\n      }\n    }\n    return makeVersion(version, qualifiers) !== null;\n  }\n  return false;\n}\n\nfunction isValid(input: string): boolean {\n  const version = cleanVersion(input);\n  const qualifiers = getOptions(input);\n  if (makeVersion(version, qualifiers)) {\n    return version !== null;\n  }\n\n  return semver.validRange(version, qualifiers) !== null;\n}\n\nfunction equals(version: string, other: string): boolean {\n  const cleanedVersion = cleanVersion(version);\n  const cleanOther = cleanVersion(other);\n  const options = { loose: true, includePrerelease: true };\n  const looseResult = looseAPI.equals(cleanedVersion, cleanOther);\n  try {\n    return semver.eq(cleanedVersion, cleanOther, options) || looseResult;\n  } catch {\n    return looseResult;\n  }\n}\n\nfunction isGreaterThan(version: string, other: string): boolean {\n  const cleanedVersion = cleanVersion(version);\n  const cleanOther = cleanVersion(other);\n  const options = { loose: true, includePrerelease: true };\n  const looseResult = looseAPI.isGreaterThan(cleanedVersion, cleanOther);\n  try {\n    return semver.gt(cleanedVersion, cleanOther, options) || looseResult;\n  } catch {\n    return looseResult;\n  }\n}\n\nfunction isLessThanRange(version: string, range: string): boolean {\n  const cleanedVersion = cleanVersion(version);\n  const cleanRange = cleanVersion(range);\n  const options = getOptions(range);\n  const looseResult: any = looseAPI.isLessThanRange?.(\n    cleanedVersion,\n    cleanRange\n  );\n  try {\n    return semver.ltr(cleanedVersion, cleanRange, options) || looseResult;\n  } catch {\n    return looseResult;\n  }\n}\n\nfunction sortVersions(version: string, other: string): number {\n  const cleanedVersion = cleanVersion(version);\n  const cleanOther = cleanVersion(other);\n  const options = { loose: true, includePrerelease: true };\n  try {\n    return semver.compare(cleanedVersion, cleanOther, options);\n  } catch {\n    return looseAPI.sortVersions(cleanedVersion, cleanOther);\n  }\n}\n\nfunction matches(version: string, range: string): boolean {\n  if (isVersion(version) && isVersion(range)) {\n    return true;\n  }\n  const cleanedVersion = cleanVersion(version);\n  const options = getOptions(range);\n  const cleanRange = cleanVersion(range);\n  return matchesWithOptions(cleanedVersion, cleanRange, options);\n}\n\nfunction isCompatible(version: string, range: string): boolean {\n  if (isVersion(version) && isVersion(range)) {\n    return true;\n  }\n  const options = getOptions(range);\n  const compatibleVersion = makeVersion(version, options);\n  if (compatibleVersion) {\n    return !isLessThanRange(version, range);\n  }\n  return false;\n}\n\nfunction isStable(version: string): boolean {\n  const cleanedVersion = cleanVersion(version);\n  const options = getOptions(version);\n  if (\n    !options.includePrerelease &&\n    semver.prerelease(cleanedVersion, options)\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string\n): string | null {\n  return findSatisfyingVersion(versions, range, MIN);\n}\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string\n): string | null {\n  return findSatisfyingVersion(versions, range, MAX);\n}\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string | null {\n  const cleanRange = cleanVersion(currentValue);\n  if (isVersion(currentValue) || rangeStrategy === 'pin') {\n    return newVersion;\n  }\n  const options = getOptions(currentValue);\n  let newValue: any = '';\n\n  if (rangeStrategy === 'widen') {\n    newValue = widenRange(\n      { currentValue: cleanRange, rangeStrategy, currentVersion, newVersion },\n      options\n    );\n  } else if (rangeStrategy === 'bump') {\n    newValue = bumpRange(\n      { currentValue: cleanRange, rangeStrategy, currentVersion, newVersion },\n      options\n    );\n  } else {\n    newValue = replaceRange({\n      currentValue: cleanRange,\n      rangeStrategy,\n      currentVersion,\n      newVersion,\n    });\n  }\n\n  if (newValue) {\n    return currentValue.replace(cleanRange, newValue);\n  }\n\n  return null;\n}\n\nexport const api: VersioningApi = {\n  equals,\n  getMajor,\n  getMinor,\n  getNewValue,\n  getPatch,\n  isCompatible,\n  isGreaterThan,\n  isLessThanRange,\n  isSingleVersion: isVersion,\n  isStable,\n  isValid,\n  isVersion,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n  sortVersions,\n};\n\nexport default api;\n"]}