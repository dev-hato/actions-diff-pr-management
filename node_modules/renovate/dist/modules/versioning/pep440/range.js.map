{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/pep440/range.ts"],"names":[],"mappings":"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","sourcesContent":["import { gte, lt, lte, satisfies } from '@renovatebot/pep440';\nimport { parse as parseRange } from '@renovatebot/pep440/lib/specifier.js';\nimport { parse as parseVersion } from '@renovatebot/pep440/lib/version.js';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport type { NewValueConfig } from '../types';\n\nconst UserPolicy = {\n  Major: 0,\n  Minor: 1,\n  Micro: 2,\n  Bug: 3,\n  0: 'Major',\n  1: 'Minor',\n  2: 'Micro',\n  3: 'Bug',\n  None: Infinity,\n} as const;\n\ntype UserPolicy = typeof UserPolicy[keyof typeof UserPolicy];\n\n/**\n * Calculate current update range precision.\n * @param ranges A {@link Range} consists of current range\n * @returns A {@link UserPolicy}\n */\nfunction getRangePrecision(ranges: Range[]): UserPolicy {\n  const bound: number[] =\n    parseVersion((ranges[1] || ranges[0]).version)?.release ?? [];\n  let rangePrecision = -1;\n  // range is defined by a single bound.\n  // ie. <1.2.2.3,\n  //     >=7\n  if (ranges.length === 1) {\n    rangePrecision = bound.length - 1;\n  }\n  // Range is defined by both upper and lower bounds.\n  if (ranges.length === 2) {\n    const lowerBound: number[] = parseVersion(ranges[0].version)?.release ?? [];\n    rangePrecision = bound.findIndex((el, index) => el > lowerBound[index]);\n  }\n  // Tune down Major precision if followed by a zero\n  if (\n    rangePrecision === UserPolicy.Major &&\n    rangePrecision + 1 < bound.length &&\n    bound[rangePrecision + 1] === 0\n  ) {\n    rangePrecision++;\n  }\n  // Could not calculate user precision\n  // Default to the smallest possible\n  // istanbul ignore next\n  if (rangePrecision === -1) {\n    rangePrecision = bound.length - 1;\n  }\n  const key = UserPolicy[rangePrecision as keyof typeof UserPolicy];\n  return UserPolicy[key as keyof typeof UserPolicy];\n}\n\n/**\n * @param policy Required range precision\n * @param newVersion The newly accepted version\n * @param baseVersion Optional Current upper bound\n * @returns A string represents a future version upper bound.\n */\nfunction getFutureVersion(\n  policy: UserPolicy,\n  newVersion: string,\n  baseVersion?: string\n): number[] {\n  const toRelease: number[] = parseVersion(newVersion)?.release ?? [];\n  const baseRelease: number[] =\n    parseVersion(baseVersion ?? newVersion)?.release ?? [];\n  return baseRelease.map((_, index) => {\n    const toPart: number = toRelease[index] ?? 0;\n    if (index < policy) {\n      return toPart;\n    }\n    if (index === policy) {\n      return toPart + (baseVersion === undefined ? 0 : 1);\n    }\n    return 0;\n  });\n}\n\ninterface Range {\n  operator: string;\n  prefix?: string;\n  version: string;\n}\n\nexport function getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string | null {\n  let ranges: Range[];\n  let updatedRange: (string | null)[];\n  if (rangeStrategy === 'pin') {\n    return '==' + newVersion;\n  }\n\n  // no symbol: accept only that specific version specified\n  if (currentValue === currentVersion) {\n    return newVersion;\n  }\n\n  try {\n    ranges = parseCurrentRange(currentValue);\n    if (!ranges.length) {\n      // an empty string is an allowed value for PEP440 range\n      // it means get any version\n      logger.warn('Empty currentValue: ' + currentValue);\n      return currentValue;\n    }\n  } catch (err) {\n    logger.warn({ currentValue, err }, 'Unexpected range error');\n    return null;\n  }\n\n  switch (rangeStrategy) {\n    case 'auto':\n    case 'replace':\n      updatedRange = handleReplaceStrategy(\n        {\n          currentValue,\n          rangeStrategy,\n          currentVersion,\n          newVersion,\n        },\n        ranges\n      );\n      break;\n    case 'widen':\n      updatedRange = handleWidenStrategy(\n        {\n          currentValue,\n          rangeStrategy,\n          currentVersion,\n          newVersion,\n        },\n        ranges\n      );\n      break;\n    case 'bump':\n      updatedRange = handleBumpStrategy(\n        {\n          currentValue,\n          rangeStrategy,\n          currentVersion,\n          newVersion,\n        },\n        ranges\n      );\n      break;\n    default:\n      // Unsupported rangeStrategy\n      // Valid rangeStrategy values are: bump, extend, pin, replace.\n      // https://docs.renovatebot.com/modules/versioning/#pep440-versioning\n      logger.debug(\n        'Unsupported rangeStrategy: ' +\n          rangeStrategy +\n          '. Using \"replace\" instead.'\n      );\n      return getNewValue({\n        currentValue,\n        rangeStrategy: 'replace',\n        currentVersion,\n        newVersion,\n      });\n  }\n\n  let result = updatedRange.filter(Boolean).join(', ');\n\n  if (result.includes(', ') && !currentValue.includes(', ')) {\n    result = result.replace(regEx(/, /g), ',');\n  }\n  const checkedResult = checkRangeAndRemoveUnnecessaryRangeLimit(\n    result,\n    newVersion\n  );\n\n  if (!satisfies(newVersion, checkedResult)) {\n    // we failed at creating the range\n    logger.warn(\n      { result, newVersion, currentValue },\n      'pep440: failed to calculate newValue'\n    );\n    return null;\n  }\n  return checkedResult;\n}\n\nexport function isLessThanRange(input: string, range: string): boolean {\n  try {\n    let invertResult = true;\n\n    const results = range\n      .split(',')\n      .map((x) =>\n        x\n          .replace(regEx(/\\s*/g), '')\n          .split(regEx(/(~=|==|!=|<=|>=|<|>|===)/))\n          .slice(1)\n      )\n      .map(([op, version]) => {\n        if (['!=', '<=', '<'].includes(op)) {\n          return true;\n        }\n        invertResult = false;\n        if (['~=', '==', '>=', '==='].includes(op)) {\n          return lt(input, version);\n        }\n        if (op === '>') {\n          return lte(input, version);\n        }\n        // istanbul ignore next\n        return false;\n      });\n\n    const result = results.every((res) => res === true);\n\n    return invertResult ? !result : result;\n  } catch (err) /* istanbul ignore next */ {\n    return false;\n  }\n}\n\nfunction parseCurrentRange(currentValue: string): Range[] {\n  const ranges: Range[] = parseRange(currentValue);\n  if (!ranges) {\n    throw new TypeError('Invalid pep440 currentValue');\n  }\n  if (ranges.some((range) => range.operator === '===')) {\n    // the operator \"===\" is used for legacy non PEP440 versions\n    throw new TypeError('PEP440 arbitrary equality (===) not supported');\n  }\n  return ranges;\n}\n\nfunction handleLowerBound(range: Range, newVersion: string): string | null {\n  // used to mark minimum supported version\n  // lower the bound if the new version is lower than current range\n  if (['>', '>='].includes(range.operator)) {\n    if (lte(newVersion, range.version)) {\n      // this looks like a rollback\n      return '>=' + newVersion;\n    }\n    // otherwise, treat it same as exclude\n    return range.operator + range.version;\n  }\n  // istanbul ignore next\n  return null;\n}\n\nfunction handleUpperBound(range: Range, newVersion: string): string | null {\n  // this is used to exclude future versions\n  if (range.operator === '<') {\n    // if newVersion is that future version\n    if (gte(newVersion, range.version)) {\n      // now here things get tricky\n      // we calculate the new future version\n      const precision = getRangePrecision([range]);\n      const futureVersion = getFutureVersion(\n        precision,\n        newVersion,\n        range.version\n      );\n      return range.operator + futureVersion.join('.');\n    }\n    // newVersion is in range, for other than \"replace\" strategies\n    return range.operator + range.version;\n  }\n  // istanbul ignore next\n  return null;\n}\n\nfunction updateRangeValue(\n  { currentValue, rangeStrategy, currentVersion, newVersion }: NewValueConfig,\n  range: Range\n): string | null {\n  // used to exclude versions,\n  // we assume that's for a good reason\n  if (range.operator === '!=') {\n    return range.operator + range.version;\n  }\n\n  // keep the .* suffix\n  if (range.prefix) {\n    const futureVersion = getFutureVersion(\n      UserPolicy.None,\n      newVersion,\n      range.version\n    ).join('.');\n    return range.operator + futureVersion + '.*';\n  }\n  if (range.operator === '~=') {\n    const baseVersion = parseVersion(range.version)?.release ?? [];\n    const futureVersion = parseVersion(newVersion)?.release ?? [];\n    const baseLen = baseVersion.length;\n    const newVerLen = futureVersion.length;\n    // trim redundant trailing version specifiers\n    if (baseLen < newVerLen) {\n      return (\n        range.operator + futureVersion.slice(0, baseVersion.length).join('.')\n      );\n    }\n    // pad with specifiers\n    if (baseLen > newVerLen) {\n      for (let i = baseLen - newVerLen - 1; i >= 0; i--) {\n        futureVersion.push(0);\n      }\n      return range.operator + futureVersion.join('.');\n    }\n    return range.operator + newVersion;\n  }\n  if (['==', '<='].includes(range.operator)) {\n    if (lte(newVersion, range.version)) {\n      return range.operator + range.version;\n    }\n    return range.operator + newVersion;\n  }\n\n  let output = handleUpperBound(range, newVersion);\n  if (output) {\n    // manged to update upperbound\n    // no need to try anything else\n    return output;\n  }\n  output = handleLowerBound(range, newVersion);\n  if (output) {\n    return output;\n  }\n\n  // unless PEP440 changes, this won't happen\n  // istanbul ignore next\n  logger.error(\n    { newVersion, currentValue, range },\n    'pep440: failed to process range'\n  );\n  // istanbul ignore next\n  return null;\n}\n\n/**\n * Checks for zero specifiers.\n * returns true if one of the bounds' length is < 3.\n * @param ranges A {@link Range} array.\n * @returns A boolean value\n * Used mainly for cosmetics for the rez versioning syntax.\n */\nfunction hasZeroSpecifier(ranges: Range[]): boolean {\n  return ranges.some((range) => {\n    const release = parseVersion(range.version)?.release;\n    return release && release.length < 3;\n  });\n}\n\nfunction trimTrailingZeros(numbers: number[]): number[] {\n  let i = numbers.length - 1;\n  while (numbers[i] === 0) {\n    i--;\n  }\n  return numbers.slice(0, i + 1);\n}\n\nfunction divideCompatibleReleaseRange(currentRange: Range): Range[] {\n  const currentVersionUpperBound = currentRange.version\n    .split('.')\n    .map((num) => parseInt(num));\n  if (currentVersionUpperBound.length > 1) {\n    currentVersionUpperBound.splice(-1);\n  }\n  currentVersionUpperBound[currentVersionUpperBound.length - 1] += 1;\n  return [\n    { operator: '>=', version: currentRange.version },\n    {\n      operator: '<',\n      version: currentVersionUpperBound.join('.'),\n    },\n  ];\n}\n\nfunction handleWidenStrategy(\n  { currentValue, rangeStrategy, currentVersion, newVersion }: NewValueConfig,\n  ranges: Range[]\n): (string | null)[] {\n  // newVersion is within range\n  if (satisfies(newVersion, currentValue)) {\n    return [currentValue];\n  }\n  let rangePrecision = getRangePrecision(ranges);\n  const trimZeros = hasZeroSpecifier(ranges);\n  let newRanges: Range[] = [];\n  if (ranges.length === 1 && ranges[0].operator === '~=') {\n    // If range operator is '~=', divide the range into its logical equivalent.\n    // Example: ~=1.0 --> >=1.0,<2\n    newRanges = divideCompatibleReleaseRange(ranges[0]);\n  } else {\n    newRanges = ranges;\n  }\n  return newRanges.map((range) => {\n    // newVersion is over the upper bound\n    if (range.operator === '<' && gte(newVersion, range.version)) {\n      const upperBound = parseVersion(range.version)?.release ?? [];\n      const len = upperBound.length;\n      // Match the precision of the smallest specifier if other than 0\n      if (upperBound[len - 1] !== 0) {\n        const key = UserPolicy[(len - 1) as keyof typeof UserPolicy];\n        rangePrecision = UserPolicy[key as keyof typeof UserPolicy];\n      }\n      let futureVersion = getFutureVersion(\n        rangePrecision,\n        newVersion,\n        range.version\n      );\n      if (trimZeros) {\n        futureVersion = trimTrailingZeros(futureVersion);\n      }\n      return range.operator + futureVersion.join('.');\n    }\n    // default\n    return updateRangeValue(\n      {\n        currentValue,\n        rangeStrategy,\n        currentVersion,\n        newVersion,\n      },\n      range\n    );\n  });\n}\n\nfunction handleReplaceStrategy(\n  { currentValue, rangeStrategy, currentVersion, newVersion }: NewValueConfig,\n  ranges: Range[]\n): (string | null)[] {\n  // newVersion is within range\n  if (satisfies(newVersion, currentValue)) {\n    return [currentValue];\n  }\n  const trimZeros = hasZeroSpecifier(ranges);\n  return ranges.map((range) => {\n    // newVersion is over the upper bound\n    if (range.operator === '<' && gte(newVersion, range.version)) {\n      const rangePrecision = getRangePrecision(ranges);\n      let futureVersion = getFutureVersion(\n        rangePrecision,\n        newVersion,\n        range.version\n      );\n      if (trimZeros) {\n        futureVersion = trimTrailingZeros(futureVersion);\n      }\n      return range.operator + futureVersion.join('.');\n    }\n    // handle lower bound\n    if (['>', '>='].includes(range.operator)) {\n      if (lte(newVersion, range.version)) {\n        // this looks like a rollback\n        return '>=' + newVersion;\n      }\n      // update the lower bound to reflect the accepted new version\n      const lowerBound = parseVersion(range.version)?.release ?? [];\n      const rangePrecision = lowerBound.length - 1;\n      let newBase = getFutureVersion(rangePrecision, newVersion);\n      if (trimZeros) {\n        newBase = trimTrailingZeros(newBase);\n      }\n      // trim last element of the newBase when new accepted version is out of range.\n      // example: let new bound be >8.2.5 & newVersion be 8.2.5\n      // return value will be: >8.2\n      if (range.operator === '>') {\n        if (newVersion === newBase.join('.') && newBase.length > 1) {\n          newBase.pop();\n        }\n      }\n      return range.operator + newBase.join('.');\n    }\n    // default\n    return updateRangeValue(\n      {\n        currentValue,\n        rangeStrategy,\n        currentVersion,\n        newVersion,\n      },\n      range\n    );\n  });\n}\n\nfunction handleBumpStrategy(\n  { currentValue, rangeStrategy, currentVersion, newVersion }: NewValueConfig,\n  ranges: Range[]\n): (string | null)[] {\n  return ranges.map((range) => {\n    // bump lower bound to current new version\n    if (range.operator === '>=') {\n      return range.operator + newVersion;\n    }\n    return updateRangeValue(\n      {\n        currentValue,\n        rangeStrategy,\n        currentVersion,\n        newVersion,\n      },\n      range\n    );\n  });\n}\n\nexport function checkRangeAndRemoveUnnecessaryRangeLimit(\n  rangeInput: string,\n  newVersion: string\n): string {\n  let newRange: string = rangeInput;\n  if (rangeInput.includes(',')) {\n    const newRes = rangeInput.split(',');\n    if (\n      newRes[0].includes('.*') &&\n      newRes[0].includes('==') &&\n      newRes[1].includes('>=')\n    ) {\n      if (satisfies(newVersion, newRes[0])) {\n        newRange = newRes[0];\n      }\n    }\n  } else {\n    return rangeInput;\n  }\n\n  return newRange;\n}\n"]}