{"version":3,"file":"compare.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/gradle/compare.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\n\n// eslint-disable-next-line typescript-enum/no-enum\nexport enum TokenType {\n  Number = 1,\n  String,\n}\n\ntype Token = {\n  type: TokenType;\n  val: string | number;\n};\n\nfunction iterateChars(\n  str: string,\n  cb: (p: string | null, n: string | null) => void\n): void {\n  let prev = null;\n  let next = null;\n  for (let i = 0; i < str.length; i += 1) {\n    next = str.charAt(i);\n    cb(prev, next);\n    prev = next;\n  }\n  cb(prev, null);\n}\n\nfunction isSeparator(char: string): boolean {\n  return regEx(/^[-._+]$/i).test(char);\n}\n\nfunction isDigit(char: string): boolean {\n  return regEx(/^\\d$/).test(char);\n}\n\nfunction isLetter(char: string): boolean {\n  return !isSeparator(char) && !isDigit(char);\n}\n\nfunction isTransition(prevChar: string, nextChar: string): boolean {\n  return (\n    (isDigit(prevChar) && isLetter(nextChar)) ||\n    (isLetter(prevChar) && isDigit(nextChar))\n  );\n}\n\nexport function tokenize(versionStr: string): Token[] | null {\n  let result: Token[] | null = [];\n  let currentVal = '';\n\n  function yieldToken(): void {\n    if (currentVal === '') {\n      result = null;\n    }\n    if (result) {\n      const val = currentVal;\n      if (regEx(/^\\d+$/).test(val)) {\n        result.push({\n          type: TokenType.Number,\n          val: parseInt(val, 10),\n        });\n      } else {\n        result.push({\n          type: TokenType.String,\n          val,\n        });\n      }\n    }\n  }\n\n  iterateChars(versionStr, (prevChar, nextChar) => {\n    if (nextChar === null) {\n      yieldToken();\n    } else if (isSeparator(nextChar)) {\n      yieldToken();\n      currentVal = '';\n    } else if (prevChar !== null && isTransition(prevChar, nextChar)) {\n      yieldToken();\n      currentVal = nextChar;\n    } else {\n      currentVal = currentVal.concat(nextChar);\n    }\n  });\n\n  return result;\n}\n\n// eslint-disable-next-line typescript-enum/no-enum\nexport enum QualifierRank {\n  Dev = -1,\n  Default = 0,\n  RC,\n  Snapshot,\n  Final,\n  GA,\n  Release,\n  SP,\n}\n\nexport function qualifierRank(input: string): number {\n  const val = input.toLowerCase();\n  if (val === 'dev') {\n    return QualifierRank.Dev;\n  }\n  if (val === 'rc' || val === 'cr') {\n    return QualifierRank.RC;\n  }\n  if (val === 'snapshot') {\n    return QualifierRank.Snapshot;\n  }\n  if (val === 'ga') {\n    return QualifierRank.GA;\n  }\n  if (val === 'final') {\n    return QualifierRank.Final;\n  }\n  if (val === 'release' || val === 'latest' || val === 'sr') {\n    return QualifierRank.Release;\n  }\n  if (val === 'sp') {\n    return QualifierRank.SP;\n  }\n  return QualifierRank.Default;\n}\n\nfunction stringTokenCmp(left: string, right: string): number {\n  const leftRank = qualifierRank(left);\n  const rightRank = qualifierRank(right);\n  if (leftRank === 0 && rightRank === 0) {\n    if (left < right) {\n      return -1;\n    }\n\n    if (left > right) {\n      return 1;\n    }\n  } else {\n    if (leftRank < rightRank) {\n      return -1;\n    }\n    if (leftRank > rightRank) {\n      return 1;\n    }\n  }\n  return 0;\n}\n\nfunction tokenCmp(left: Token | null, right: Token | null): number {\n  if (left === null) {\n    if (right?.type === TokenType.String) {\n      return 1;\n    }\n    return -1;\n  }\n\n  if (right === null) {\n    if (left.type === TokenType.String) {\n      return -1;\n    }\n    return 1;\n  }\n\n  if (left.type === TokenType.Number && right.type === TokenType.Number) {\n    if (left.val < right.val) {\n      return -1;\n    }\n    if (left.val > right.val) {\n      return 1;\n    }\n  } else if (typeof left.val === 'string' && typeof right.val === 'string') {\n    return stringTokenCmp(left.val, right.val);\n  } else if (right.type === TokenType.Number) {\n    return -1;\n  } else if (left.type === TokenType.Number) {\n    return 1;\n  }\n\n  return 0;\n}\n\nexport function compare(left: string, right: string): number {\n  const leftTokens = tokenize(left) ?? [];\n  const rightTokens = tokenize(right) ?? [];\n  const length = Math.max(leftTokens.length, rightTokens.length);\n  for (let idx = 0; idx < length; idx += 1) {\n    const leftToken = leftTokens[idx] || null;\n    const rightToken = rightTokens[idx] || null;\n    const cmpResult = tokenCmp(leftToken, rightToken);\n    if (cmpResult !== 0) {\n      return cmpResult;\n    }\n  }\n  return 0;\n}\n\nexport function parse(input: string): Token[] | null {\n  if (!input) {\n    return null;\n  }\n\n  if (!regEx(/^[-._+a-zA-Z0-9]+$/i).test(input)) {\n    return null;\n  }\n\n  if (regEx(/^latest\\.?/i).test(input)) {\n    return null;\n  }\n\n  const tokens = tokenize(input);\n  // istanbul ignore if: should not happen\n  if (!tokens?.length) {\n    return null;\n  }\n  return tokens;\n}\n\nexport function isVersion(input: string): boolean {\n  return !!parse(input);\n}\n\ninterface PrefixRange {\n  tokens: Token[];\n}\n\n// eslint-disable-next-line typescript-enum/no-enum\nexport enum RangeBound {\n  Inclusive = 1,\n  Exclusive,\n}\n\ninterface MavenBasedRange {\n  leftBound: RangeBound;\n  leftBoundStr: string;\n  leftVal: string | null;\n  separator: string;\n  rightBound: RangeBound;\n  rightBoundStr: string;\n  rightVal: string | null;\n}\n\nexport function parsePrefixRange(input: string): PrefixRange | null {\n  if (!input) {\n    return null;\n  }\n\n  if (input.trim() === '+') {\n    return { tokens: [] };\n  }\n\n  const postfixRegex = regEx(/[-._]\\+$/);\n  if (postfixRegex.test(input)) {\n    const prefixValue = input.replace(regEx(/[-._]\\+$/), '');\n    const tokens = tokenize(prefixValue);\n    return tokens ? { tokens } : null;\n  }\n\n  return null;\n}\n\nconst mavenBasedRangeRegex = regEx(\n  /^(?<leftBoundStr>[[\\](]\\s*)(?<leftVal>[-._+a-zA-Z0-9]*?)(?<separator>\\s*,\\s*)(?<rightVal>[-._+a-zA-Z0-9]*?)(?<rightBoundStr>\\s*[[\\])])$/\n);\n\nexport function parseMavenBasedRange(input: string): MavenBasedRange | null {\n  if (!input) {\n    return null;\n  }\n\n  const matchGroups = mavenBasedRangeRegex.exec(input)?.groups;\n  if (matchGroups) {\n    const { leftBoundStr, separator, rightBoundStr } = matchGroups;\n    let leftVal: string | null = matchGroups.leftVal;\n    let rightVal: string | null = matchGroups.rightVal;\n    if (!leftVal) {\n      leftVal = null;\n    }\n    if (!rightVal) {\n      rightVal = null;\n    }\n    const isVersionLeft = is.string(leftVal) && isVersion(leftVal);\n    const isVersionRight = is.string(rightVal) && isVersion(rightVal);\n    if (\n      (leftVal === null || isVersionLeft) &&\n      (rightVal === null || isVersionRight)\n    ) {\n      if (\n        isVersionLeft &&\n        isVersionRight &&\n        leftVal &&\n        rightVal &&\n        compare(leftVal, rightVal) === 1\n      ) {\n        return null;\n      }\n      const leftBound =\n        leftBoundStr.trim() === '['\n          ? RangeBound.Inclusive\n          : RangeBound.Exclusive;\n      const rightBound =\n        rightBoundStr.trim() === ']'\n          ? RangeBound.Inclusive\n          : RangeBound.Exclusive;\n      return {\n        leftBound,\n        leftBoundStr,\n        leftVal,\n        separator,\n        rightBound,\n        rightBoundStr,\n        rightVal,\n      };\n    }\n  }\n\n  return null;\n}\n\nexport function isValid(str: string): boolean {\n  if (!str) {\n    return false;\n  }\n\n  return (\n    isVersion(str) || !!parsePrefixRange(str) || !!parseMavenBasedRange(str)\n  );\n}\n"]}