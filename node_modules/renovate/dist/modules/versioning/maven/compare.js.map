{"version":3,"file":"compare.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/maven/compare.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../../util/regex';\n\nconst PREFIX_DOT = 'PREFIX_DOT';\nconst PREFIX_HYPHEN = 'PREFIX_HYPHEN';\n\nconst TYPE_NUMBER = 'TYPE_NUMBER';\nconst TYPE_QUALIFIER = 'TYPE_QUALIFIER';\n\nexport interface BaseToken {\n  prefix: string;\n  type: typeof TYPE_NUMBER | typeof TYPE_QUALIFIER;\n  val: number | string;\n  isTransition?: boolean;\n}\n\nexport interface NumberToken extends BaseToken {\n  type: typeof TYPE_NUMBER;\n  val: number;\n}\n\nexport interface QualifierToken extends BaseToken {\n  type: typeof TYPE_QUALIFIER;\n  val: string;\n}\n\nexport type Token = NumberToken | QualifierToken;\n\nfunction iterateChars(\n  str: string,\n  cb: (p: string | null, n: string | null) => void\n): void {\n  let prev = null;\n  let next = null;\n  for (let i = 0; i < str.length; i += 1) {\n    next = str.charAt(i);\n    cb(prev, next);\n    prev = next;\n  }\n  cb(prev, null);\n}\n\nfunction isDigit(char: string): boolean {\n  return regEx(/^\\d$/).test(char);\n}\n\nfunction isLetter(char: string): boolean {\n  return regEx(/^[a-z_]$/i).test(char);\n}\n\nfunction isTransition(prevChar: string, nextChar: string): boolean {\n  return (\n    (isDigit(prevChar) && isLetter(nextChar)) ||\n    (isLetter(prevChar) && isDigit(nextChar))\n  );\n}\n\nfunction iterateTokens(versionStr: string, cb: (token: Token) => void): void {\n  let currentPrefix = PREFIX_HYPHEN;\n  let currentVal = '';\n\n  function yieldToken(transition = false): void {\n    const val = currentVal || '0';\n    if (regEx(/^\\d+$/).test(val)) {\n      cb({\n        prefix: currentPrefix,\n        type: TYPE_NUMBER,\n        val: parseInt(val, 10),\n        isTransition: transition,\n      });\n    } else {\n      cb({\n        prefix: currentPrefix,\n        type: TYPE_QUALIFIER,\n        val,\n        isTransition: transition,\n      });\n    }\n  }\n\n  iterateChars(versionStr, (prevChar, nextChar) => {\n    if (nextChar === null) {\n      yieldToken();\n    } else if (nextChar === '-') {\n      yieldToken();\n      currentPrefix = PREFIX_HYPHEN;\n      currentVal = '';\n    } else if (nextChar === '.') {\n      yieldToken();\n      currentPrefix = PREFIX_DOT;\n      currentVal = '';\n    } else if (prevChar !== null && isTransition(prevChar, nextChar)) {\n      yieldToken(true);\n      currentPrefix = PREFIX_HYPHEN;\n      currentVal = nextChar;\n    } else {\n      currentVal = currentVal.concat(nextChar);\n    }\n  });\n}\n\nfunction isNull(token: Token): boolean {\n  const val = token.val;\n  return (\n    val === 0 ||\n    val === '' ||\n    val === 'final' ||\n    val === 'ga' ||\n    val === 'release' ||\n    val === 'latest' ||\n    val === 'sr'\n  );\n}\n\nconst zeroToken: NumberToken = {\n  prefix: PREFIX_HYPHEN,\n  type: TYPE_NUMBER,\n  val: 0,\n  isTransition: false,\n};\n\nfunction tokenize(versionStr: string, preserveMinorZeroes = false): Token[] {\n  let buf: Token[] = [];\n  let result: Token[] = [];\n  let leadingZero = true;\n  iterateTokens(versionStr.toLowerCase().replace(regEx(/^v/i), ''), (token) => {\n    if (token.prefix === PREFIX_HYPHEN) {\n      buf = [];\n    }\n    buf.push(token);\n    if (!isNull(token)) {\n      leadingZero = false;\n      result = result.concat(buf);\n      buf = [];\n    } else if (leadingZero || preserveMinorZeroes) {\n      result = result.concat(buf);\n      buf = [];\n    }\n  });\n  return result.length ? result : [zeroToken];\n}\n\nfunction nullFor(token: Token): Token {\n  return token.type === TYPE_NUMBER\n    ? {\n        prefix: token.prefix,\n        type: TYPE_NUMBER,\n        val: 0,\n      }\n    : {\n        prefix: token.prefix,\n        type: TYPE_QUALIFIER,\n        val: '',\n      };\n}\n\nfunction commonOrder(token: Token): number {\n  if (token.prefix === PREFIX_DOT && token.type === TYPE_QUALIFIER) {\n    return 0;\n  }\n  if (token.prefix === PREFIX_HYPHEN && token.type === TYPE_QUALIFIER) {\n    return 1;\n  }\n  if (token.prefix === PREFIX_HYPHEN && token.type === TYPE_NUMBER) {\n    return 2;\n  }\n  return 3;\n}\n\n// eslint-disable-next-line typescript-enum/no-enum\nexport enum QualifierTypes {\n  Alpha = 1,\n  Beta,\n  Milestone,\n  RC,\n  Snapshot,\n  Release,\n  SP,\n}\n\nexport function qualifierType(token: Token): number | null {\n  const val = token.val;\n  if (val === 'alpha' || (token.isTransition && val === 'a')) {\n    return QualifierTypes.Alpha;\n  }\n  if (val === 'beta' || (token.isTransition && val === 'b')) {\n    return QualifierTypes.Beta;\n  }\n  if (val === 'milestone' || (token.isTransition && val === 'm')) {\n    return QualifierTypes.Milestone;\n  }\n  if (val === 'rc' || val === 'cr' || val === 'preview') {\n    return QualifierTypes.RC;\n  }\n  if (val === 'snapshot' || val === 'snap') {\n    return QualifierTypes.Snapshot;\n  }\n  if (\n    val === '' ||\n    val === 'final' ||\n    val === 'ga' ||\n    val === 'release' ||\n    val === 'latest' ||\n    val === 'sr'\n  ) {\n    return QualifierTypes.Release;\n  }\n  if (val === 'sp') {\n    return QualifierTypes.SP;\n  }\n  return null;\n}\n\nfunction qualifierCmp(left: Token, right: Token): number {\n  const leftOrder = qualifierType(left);\n  const rightOrder = qualifierType(right);\n  if (leftOrder && rightOrder) {\n    if (leftOrder < rightOrder) {\n      return -1;\n    }\n    if (leftOrder > rightOrder) {\n      return 1;\n    }\n    return 0;\n  }\n\n  if (leftOrder && leftOrder < QualifierTypes.Release) {\n    return -1;\n  }\n  if (rightOrder && rightOrder < QualifierTypes.Release) {\n    return 1;\n  }\n\n  if (left.val < right.val) {\n    return -1;\n  }\n  if (left.val > right.val) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction tokenCmp(left: Token, right: Token): number {\n  const leftOrder = commonOrder(left);\n  const rightOrder = commonOrder(right);\n\n  if (leftOrder < rightOrder) {\n    return -1;\n  }\n  if (leftOrder > rightOrder) {\n    return 1;\n  }\n\n  if (left.type === TYPE_NUMBER && right.type === TYPE_NUMBER) {\n    if (left.val < right.val) {\n      return -1;\n    }\n    if (left.val > right.val) {\n      return 1;\n    }\n    return 0;\n  }\n\n  return qualifierCmp(left, right);\n}\n\nfunction compare(left: string, right: string): number {\n  const leftTokens = tokenize(left);\n  const rightTokens = tokenize(right);\n  const length = Math.max(leftTokens.length, rightTokens.length);\n  for (let idx = 0; idx < length; idx += 1) {\n    const leftToken = leftTokens[idx] || nullFor(rightTokens[idx]);\n    const rightToken = rightTokens[idx] || nullFor(leftTokens[idx]);\n    const cmpResult = tokenCmp(leftToken, rightToken);\n    if (cmpResult !== 0) {\n      return cmpResult;\n    }\n  }\n  return 0;\n}\n\nfunction isVersion(version: unknown): version is string {\n  if (!version || typeof version !== 'string') {\n    return false;\n  }\n  if (!regEx(/^[a-z_0-9.-]+$/i).test(version)) {\n    return false;\n  }\n  if (regEx(/^[.-]/).test(version)) {\n    return false;\n  }\n  if (regEx(/[.-]$/).test(version)) {\n    return false;\n  }\n  if (['latest', 'release'].includes(version.toLowerCase())) {\n    return false;\n  }\n  const tokens = tokenize(version);\n  return !!tokens.length;\n}\n\nconst INCLUDING_POINT = 'INCLUDING_POINT';\nconst EXCLUDING_POINT = 'EXCLUDING_POINT';\n\nfunction parseRange(rangeStr: string): Range[] | null {\n  function emptyInterval(): Range {\n    return {\n      leftType: null,\n      leftValue: null,\n      leftBracket: null,\n      rightType: null,\n      rightValue: null,\n      rightBracket: null,\n    };\n  }\n\n  const commaSplit = rangeStr.split(/\\s*,\\s*/);\n  let ranges: Range[] | null = [];\n  let interval = emptyInterval();\n\n  commaSplit.forEach((subStr) => {\n    if (!ranges) {\n      return;\n    }\n    if (interval.leftType === null) {\n      if (regEx(/^\\[.*]$/).test(subStr)) {\n        const ver = subStr.slice(1, -1);\n        ranges.push({\n          leftType: INCLUDING_POINT,\n          leftValue: ver,\n          leftBracket: '[',\n          rightType: INCLUDING_POINT,\n          rightValue: ver,\n          rightBracket: ']',\n        });\n        interval = emptyInterval();\n      } else if (subStr.startsWith('[')) {\n        const ver = subStr.slice(1);\n        interval.leftType = INCLUDING_POINT;\n        interval.leftValue = ver;\n        interval.leftBracket = '[';\n      } else if (subStr.startsWith('(') || subStr.startsWith(']')) {\n        const ver = subStr.slice(1);\n        interval.leftType = EXCLUDING_POINT;\n        interval.leftValue = ver;\n        interval.leftBracket = subStr[0];\n      } else {\n        ranges = null;\n      }\n    } else if (subStr.endsWith(']')) {\n      const ver = subStr.slice(0, -1);\n      interval.rightType = INCLUDING_POINT;\n      interval.rightValue = ver;\n      interval.rightBracket = ']';\n      ranges.push(interval);\n      interval = emptyInterval();\n    } else if (subStr.endsWith(')') || subStr.endsWith('[')) {\n      const ver = subStr.slice(0, -1);\n      interval.rightType = EXCLUDING_POINT;\n      interval.rightValue = ver;\n      interval.rightBracket = subStr.endsWith(')') ? ')' : '[';\n      ranges.push(interval);\n      interval = emptyInterval();\n    } else {\n      ranges = null;\n    }\n  });\n\n  if (interval.leftType) {\n    return null;\n  } // something like '[1,2],[3'\n  if (!ranges || !ranges.length) {\n    return null;\n  }\n\n  const lastIdx = ranges.length - 1;\n  let prevValue: string | null = null;\n  const result: Range[] = [];\n  for (let idx = 0; idx < ranges.length; idx += 1) {\n    const range = ranges[idx];\n    const { leftType, leftValue, rightType, rightValue } = range;\n\n    if (idx === 0 && leftValue === '') {\n      if (leftType === EXCLUDING_POINT && isVersion(rightValue)) {\n        prevValue = rightValue;\n        result.push({ ...range, leftValue: null });\n        continue;\n      }\n      return null;\n    }\n    if (idx === lastIdx && rightValue === '') {\n      if (rightType === EXCLUDING_POINT && isVersion(leftValue)) {\n        if (prevValue && compare(prevValue, leftValue) === 1) {\n          return null;\n        }\n        result.push({ ...range, rightValue: null });\n        continue;\n      }\n      return null;\n    }\n    if (isVersion(leftValue) && isVersion(rightValue)) {\n      if (compare(leftValue, rightValue) === 1) {\n        return null;\n      }\n      if (prevValue && compare(prevValue, leftValue) === 1) {\n        return null;\n      }\n      prevValue = rightValue;\n      result.push(range);\n      continue;\n    }\n    return null;\n  }\n  return result;\n}\n\nfunction isValid(str: string): boolean {\n  if (!str) {\n    return false;\n  }\n  return isVersion(str) || !!parseRange(str);\n}\n\nexport interface Range {\n  leftType: typeof INCLUDING_POINT | typeof EXCLUDING_POINT | null;\n  leftValue: string | null;\n  leftBracket: string | null;\n  rightType: typeof INCLUDING_POINT | typeof EXCLUDING_POINT | null;\n  rightValue: string | null;\n  rightBracket: string | null;\n}\n\nfunction rangeToStr(fullRange: Range[] | null): string | null {\n  if (fullRange === null) {\n    return null;\n  }\n\n  const valToStr = (val: string | null): string => (val === null ? '' : val);\n\n  if (fullRange.length === 1) {\n    const { leftBracket, rightBracket, leftValue, rightValue } = fullRange[0];\n    if (\n      leftValue === rightValue &&\n      leftBracket === '[' &&\n      rightBracket === ']'\n    ) {\n      return `[${valToStr(leftValue)}]`;\n    }\n  }\n\n  const intervals = fullRange.map((val) =>\n    [\n      val.leftBracket,\n      valToStr(val.leftValue),\n      ',',\n      valToStr(val.rightValue),\n      val.rightBracket,\n    ].join('')\n  );\n  return intervals.join(',');\n}\n\nfunction tokensToStr(tokens: Token[]): string {\n  return tokens.reduce((result: string, token: Token, idx) => {\n    const prefix = token.prefix === PREFIX_DOT ? '.' : '-';\n    return `${result}${idx !== 0 && token.val !== '' ? prefix : ''}${\n      token.val\n    }`;\n  }, '');\n}\n\nfunction coerceRangeValue(prev: string, next: string): string {\n  const prevTokens = tokenize(prev, true);\n  const nextTokens = tokenize(next, true);\n  const resultTokens = nextTokens.slice(0, prevTokens.length);\n  const align = Math.max(0, prevTokens.length - nextTokens.length);\n  if (align > 0) {\n    resultTokens.push(...prevTokens.slice(prevTokens.length - align));\n  }\n  return tokensToStr(resultTokens);\n}\n\nfunction incrementRangeValue(value: string): string {\n  const tokens = tokenize(value);\n  const lastToken = tokens[tokens.length - 1];\n  if (typeof lastToken.val === 'number') {\n    lastToken.val += 1;\n    return coerceRangeValue(value, tokensToStr(tokens));\n  }\n  return value;\n}\n\nfunction autoExtendMavenRange(\n  currentRepresentation: string,\n  newValue: string\n): string | null {\n  const range = parseRange(currentRepresentation);\n  if (!range) {\n    return currentRepresentation;\n  }\n  const isPoint = (vals: Range[]): boolean => {\n    if (vals.length !== 1) {\n      return false;\n    }\n    const { leftType, leftValue, rightType, rightValue } = vals[0];\n    return (\n      leftType === 'INCLUDING_POINT' &&\n      leftType === rightType &&\n      leftValue === rightValue\n    );\n  };\n  if (isPoint(range)) {\n    return `[${newValue}]`;\n  }\n\n  const interval = [...range].reverse().find((elem) => {\n    const { rightType, rightValue } = elem;\n    return (\n      rightValue === null ||\n      (rightType === INCLUDING_POINT && compare(rightValue, newValue) === -1) ||\n      (rightType === EXCLUDING_POINT && compare(rightValue, newValue) !== 1)\n    );\n  });\n\n  if (!interval) {\n    return currentRepresentation;\n  }\n\n  const { leftValue, rightValue } = interval;\n  if (\n    leftValue !== null &&\n    rightValue !== null &&\n    incrementRangeValue(leftValue) === rightValue\n  ) {\n    if (compare(newValue, leftValue) !== -1) {\n      interval.leftValue = coerceRangeValue(leftValue, newValue);\n      interval.rightValue = incrementRangeValue(interval.leftValue);\n    }\n  } else if (rightValue !== null) {\n    if (interval.rightType === INCLUDING_POINT) {\n      const tokens = tokenize(rightValue);\n      const lastToken = tokens[tokens.length - 1];\n      if (typeof lastToken.val === 'number') {\n        interval.rightValue = coerceRangeValue(rightValue, newValue);\n      } else {\n        interval.rightValue = newValue;\n      }\n    } else {\n      interval.rightValue = incrementRangeValue(\n        coerceRangeValue(rightValue, newValue)\n      );\n    }\n  } else if (leftValue !== null) {\n    interval.leftValue = coerceRangeValue(leftValue, newValue);\n  }\n\n  return rangeToStr(range);\n}\n\nfunction isSubversion(majorVersion: string, minorVersion: string): boolean {\n  const majorTokens = tokenize(majorVersion);\n  const minorTokens = tokenize(minorVersion);\n\n  let result = true;\n  const len = majorTokens.length;\n  for (let idx = 0; idx < len; idx += 1) {\n    const major = majorTokens[idx];\n    const minor = minorTokens[idx] || nullFor(majorTokens[idx]);\n    const cmpResult = tokenCmp(major, minor);\n    if (cmpResult !== 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\nexport {\n  PREFIX_DOT,\n  PREFIX_HYPHEN,\n  TYPE_NUMBER,\n  TYPE_QUALIFIER,\n  tokenize,\n  isSubversion,\n  compare,\n  isVersion,\n  isVersion as isSingleVersion,\n  isValid,\n  parseRange,\n  rangeToStr,\n  INCLUDING_POINT,\n  EXCLUDING_POINT,\n  autoExtendMavenRange,\n};\n"]}