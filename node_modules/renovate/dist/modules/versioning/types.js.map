{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/modules/versioning/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Range, SemVer } from 'semver';\nimport type { RangeStrategy } from '../../types';\n\nexport interface NewValueConfig {\n  currentValue: string;\n  rangeStrategy: RangeStrategy;\n  currentVersion?: string;\n  newVersion: string;\n}\nexport interface VersioningApi {\n  // validation\n  isCompatible(version: string, current?: string): boolean;\n  isSingleVersion(version: string): boolean;\n  isStable(version: string): boolean;\n  isValid(input: string): boolean;\n  isVersion(input: string | undefined | null): boolean;\n\n  // digestion of version\n  getMajor(version: string | SemVer): null | number;\n  getMinor(version: string | SemVer): null | number;\n  getPatch(version: string | SemVer): null | number;\n\n  // comparison\n  equals(version: string, other: string): boolean;\n  isGreaterThan(version: string, other: string): boolean;\n  isLessThanRange?(version: string, range: string): boolean;\n  getSatisfyingVersion(versions: string[], range: string): string | null;\n  minSatisfyingVersion(versions: string[], range: string): string | null;\n  getNewValue(newValueConfig: NewValueConfig): string | null;\n  sortVersions(version: string, other: string): number;\n\n  matches(version: string, range: string | Range): boolean;\n\n  valueToVersion?(version: string): string;\n}\n\nexport interface VersioningApiConstructor {\n  new (config?: string): VersioningApi;\n}\n"]}