{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/hermit/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { RegExpVersion, RegExpVersioningApi } from '../regex';\nimport type { VersioningApiConstructor } from '../types';\n\nexport const id = 'hermit';\nexport const displayName = 'Hermit';\nexport const urls = [\n  'https://cashapp.github.io/hermit/packaging/reference/#versions',\n];\nexport const supportsRanges = false;\n\nexport class HermitVersioning extends RegExpVersioningApi {\n  static versionRegex =\n    '^(?<major>\\\\d+)(\\\\.(?<minor>\\\\d+))?(\\\\.(?<patch>\\\\d+))?(_(?<build>\\\\d+))?([-]?(?<prerelease>[^.+][^+]*))?([+](?<compatibility>[^.-][^+]*))?$';\n\n  public constructor() {\n    super(HermitVersioning.versionRegex);\n  }\n\n  private _isValid(version: string): boolean {\n    return super._parse(version) !== null;\n  }\n\n  protected override _parse(version: string): RegExpVersion | null {\n    const parsed = super._parse(version);\n    if (parsed) {\n      return parsed;\n    }\n    const channelVer = HermitVersioning._getChannel(version);\n\n    const groups = this._config?.exec(channelVer)?.groups;\n\n    if (!groups) {\n      return null;\n    }\n\n    const { major, minor, patch, build, prerelease, compatibility } = groups;\n    const release = [];\n\n    if (major) {\n      release.push(Number.parseInt(major, 10));\n    }\n\n    if (minor) {\n      release.push(Number.parseInt(minor, 10));\n    }\n    if (patch) {\n      release.push(Number.parseInt(patch, 10));\n    }\n    if (build) {\n      release.push(Number.parseInt(build, 10));\n    }\n\n    return {\n      release,\n      prerelease: prerelease,\n      compatibility: compatibility,\n    };\n  }\n\n  private static _isChannel(version: string): boolean {\n    return version.startsWith('@');\n  }\n\n  private static _getChannel(version: string): string {\n    return version.substring(1);\n  }\n\n  override isStable(version: string): boolean {\n    if (this._isValid(version)) {\n      return super.isStable(version);\n    }\n\n    // channel and the rest should be considered unstable version\n    // as channels are changing values\n    return false;\n  }\n\n  override isValid(version: string): boolean {\n    return this._isValid(version) || HermitVersioning._isChannel(version);\n  }\n\n  override isLessThanRange(version: string, range: string): boolean {\n    return this._compare(version, range) < 0;\n  }\n\n  protected override _compare(version: string, other: string): number {\n    if (this._isValid(version) && this._isValid(other)) {\n      return super._compare(version, other);\n    }\n\n    const parsedVersion = this._parse(version);\n    const parsedOther = this._parse(other);\n\n    if (parsedVersion === null || parsedOther === null) {\n      if (parsedVersion === null && parsedOther === null) {\n        return version.localeCompare(other);\n      }\n      return parsedVersion === null ? -1 : 1;\n    }\n\n    const versionReleases = parsedVersion.release;\n    const otherReleases = parsedOther.release;\n\n    const maxLength =\n      versionReleases.length > otherReleases.length\n        ? versionReleases.length\n        : otherReleases.length;\n\n    for (let i = 0; i < maxLength; i++) {\n      const verVal = versionReleases[i];\n      const otherVal = otherReleases[i];\n\n      if (\n        verVal !== undefined &&\n        otherVal !== undefined &&\n        verVal !== otherVal\n      ) {\n        return verVal - otherVal;\n      } else if (verVal === undefined) {\n        return 1;\n      } else if (otherVal === undefined) {\n        return -1;\n      }\n    }\n\n    return 0;\n  }\n\n  override matches(version: string, range: string): boolean {\n    return this.equals(version, range);\n  }\n}\n\nexport const api: VersioningApiConstructor = HermitVersioning;\n\nexport default api;\n"]}