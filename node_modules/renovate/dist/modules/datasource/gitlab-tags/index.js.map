{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/gitlab-tags/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { GitlabHttp } from '../../../util/http/gitlab';\nimport { joinUrlParts } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport type { GitlabCommit, GitlabTag } from './types';\nimport { defaultRegistryUrl, getDepHost, getSourceUrl } from './util';\n\nexport class GitlabTagsDatasource extends Datasource {\n  static readonly id = 'gitlab-tags';\n\n  protected override http: GitlabHttp;\n\n  constructor() {\n    super(GitlabTagsDatasource.id);\n    this.http = new GitlabHttp(GitlabTagsDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  @cache({\n    namespace: `datasource-${GitlabTagsDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      `${getDepHost(registryUrl)}:${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName: repo,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const depHost = getDepHost(registryUrl);\n\n    const urlEncodedRepo = encodeURIComponent(repo);\n\n    // tag\n    const url = joinUrlParts(\n      depHost,\n      `api/v4/projects`,\n      urlEncodedRepo,\n      `repository/tags?per_page=100`\n    );\n\n    const gitlabTags = (\n      await this.http.getJson<GitlabTag[]>(url, {\n        paginate: true,\n      })\n    ).body;\n\n    const dependency: ReleaseResult = {\n      sourceUrl: getSourceUrl(repo, registryUrl),\n      releases: [],\n    };\n    dependency.releases = gitlabTags.map(({ name, commit }) => ({\n      version: name,\n      gitRef: name,\n      releaseTimestamp: commit?.created_at,\n    }));\n\n    return dependency;\n  }\n\n  /**\n   * gitlab.getDigest\n   *\n   * Returs the latest commit hash of the repository.\n   */\n  @cache({\n    namespace: `datasource-${GitlabTagsDatasource.id}-commit`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      `${getDepHost(registryUrl)}:${packageName}`,\n  })\n  override async getDigest(\n    { packageName: repo, registryUrl }: Partial<DigestConfig>,\n    newValue?: string\n  ): Promise<string | null> {\n    const depHost = getDepHost(registryUrl);\n\n    const urlEncodedRepo = encodeURIComponent(repo!);\n    let digest: string | null = null;\n\n    try {\n      if (newValue) {\n        const url = joinUrlParts(\n          depHost,\n          `api/v4/projects`,\n          urlEncodedRepo,\n          `repository/commits/`,\n          newValue\n        );\n        const gitlabCommits = await this.http.getJson<GitlabCommit>(url);\n        digest = gitlabCommits.body.id;\n      } else {\n        const url = joinUrlParts(\n          depHost,\n          `api/v4/projects`,\n          urlEncodedRepo,\n          `repository/commits?per_page=1`\n        );\n        const gitlabCommits = await this.http.getJson<GitlabCommit[]>(url);\n        digest = gitlabCommits.body[0].id;\n      }\n    } catch (err) {\n      logger.debug(\n        { gitlabRepo: repo, err, registryUrl },\n        'Error getting latest commit from Gitlab repo'\n      );\n    }\n\n    if (!digest) {\n      return null;\n    }\n\n    return digest;\n  }\n}\n"]}