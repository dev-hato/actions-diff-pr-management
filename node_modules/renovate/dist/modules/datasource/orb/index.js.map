{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/orb/index.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AACzC,qEAA8D;AAC9D,8CAA2C;AAI3C,MAAM,KAAK,GAAG;;;;;;;;;;;CAWb,CAAC;AAEF,MAAa,aAAc,SAAQ,uBAAU;IAG3C;QACE,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAGR,0BAAqB,GAAG,KAAK,CAAC;QAE9B,wBAAmB,GAAG,CAAC,uBAAuB,CAAC,CAAC;IAJlE,CAAC;IAUD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,qBAAqB;QACrB,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,GAAG,GAAG,GAAG,WAAW,kBAAkB,CAAC;QAC7C,MAAM,IAAI,GAAG;YACX,KAAK;YACL,SAAS,EAAE,EAAE,WAAW,EAAE;SAC3B,CAAC;QACF,MAAM,GAAG,GAAe,CACtB,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAgC,GAAG,EAAE;YAC3D,IAAI;SACL,CAAC,CACH,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QAChB,IAAI,CAAC,GAAG,EAAE;YACR,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,uBAAuB,CAAC,CAAC;YACvD,OAAO,IAAI,CAAC;SACb;QACD,iDAAiD;QACjD,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,EAAE,MAAM;YAClC,CAAC,CAAC,GAAG,CAAC,OAAO;YACb,CAAC,CAAC,2CAA2C,WAAW,EAAE,CAAC;QAC7D,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;YAC7D,OAAO;YACP,gBAAgB,EAAE,SAAS,IAAI,IAAI;SACpC,CAAC,CAAC,CAAC;QAEJ,MAAM,GAAG,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;QACnC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;QAC7B,OAAO,GAAG,CAAC;IACb,CAAC;;AAhDe,gBAAE,GAAG,KAAK,CAAC;AAc3B;IAJC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,aAAa,CAAC,EAAE,EAAE;QAC3C,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,WAAW;KACzD,CAAC;gDAmCD;AAjDH,sCAkDC","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { OrbRelease } from './types';\n\nconst query = `\nquery($packageName: String!) {\n  orb(name: $packageName) {\n    name,\n    homeUrl,\n    versions {\n      version,\n      createdAt\n    }\n  }\n}\n`;\n\nexport class OrbDatasource extends Datasource {\n  static readonly id = 'orb';\n\n  constructor() {\n    super(OrbDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://circleci.com/'];\n\n  @cache({\n    namespace: `datasource-${OrbDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => packageName,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n    const url = `${registryUrl}graphql-unstable`;\n    const body = {\n      query,\n      variables: { packageName },\n    };\n    const res: OrbRelease = (\n      await this.http.postJson<{ data: { orb: OrbRelease } }>(url, {\n        body,\n      })\n    ).body.data.orb;\n    if (!res) {\n      logger.debug({ packageName }, 'Failed to look up orb');\n      return null;\n    }\n    // Simplify response before caching and returning\n    const homepage = res.homeUrl?.length\n      ? res.homeUrl\n      : `https://circleci.com/developer/orbs/orb/${packageName}`;\n    const releases = res.versions.map(({ version, createdAt }) => ({\n      version,\n      releaseTimestamp: createdAt ?? null,\n    }));\n\n    const dep = { homepage, releases };\n    logger.trace({ dep }, 'dep');\n    return dep;\n  }\n}\n"]}