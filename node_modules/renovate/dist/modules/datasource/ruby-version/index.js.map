{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/ruby-version/index.ts"],"names":[],"mappings":";;;;AAAA,mFAA8E;AAC9E,qEAA8D;AAC9D,6CAA2C;AAE3C,gDAA0E;AAC1E,8CAA2C;AAG3C,MAAa,qBAAsB,SAAQ,uBAAU;IAGnD;QACE,KAAK,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;QAGhB,wBAAmB,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAErD,0BAAqB,GAAG,KAAK,CAAC;QAE9B,sBAAiB,GAAG,SAAgB,CAAC;IANvD,CAAC;IASD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,GACO;QAClB,MAAM,GAAG,GAAkB;YACzB,QAAQ,EAAE,2BAA2B;YACrC,SAAS,EAAE,8BAA8B;YACzC,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,sBAAsB;QACtB,4EAA4E;QAC5E,MAAM,eAAe,GAAG,GAAG,WAAW,wBAAwB,CAAC;QAC/D,IAAI;YACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAEtD,MAAM,IAAI,GAAG,IAAA,YAAK,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,IAAI,GACR,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACpE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBACnB,MAAM,GAAG,GAAG,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACvC,MAAM,OAAO,GAAa,EAAE,CAAC;gBAC7B,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;gBAChD,IAAI,OAAO,CAAC,MAAM,EAAE;oBAClB,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;oBAChD,IAAI,IAAA,gBAAS,EAAC,OAAO,CAAC,EAAE;wBACtB,MAAM,gBAAgB,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;wBACpC,MAAM,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC;6BAC5B,OAAO,CAAC,WAAW,EAAE,2BAA2B,CAAC;6BACjD,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;wBAChC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,YAAY,EAAE,CAAC,CAAC;qBAChE;iBACF;YACH,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACxB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;aAC1C;SACF;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAEQ,oBAAoB,CAAC,GAAc;QAC1C,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;;AAzDe,wBAAE,GAAG,cAAc,CAAC;AAapC;IADC,IAAA,iBAAK,EAAC,EAAE,SAAS,EAAE,cAAc,qBAAqB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;wDAyC1E;AAtDH,sDA2DC","sourcesContent":["import { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { parse } from '../../../util/html';\nimport type { HttpError } from '../../../util/http';\nimport { isVersion, id as rubyVersioningId } from '../../versioning/ruby';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\n\nexport class RubyVersionDatasource extends Datasource {\n  static readonly id = 'ruby-version';\n\n  constructor() {\n    super(RubyVersionDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = ['https://www.ruby-lang.org/'];\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultVersioning = rubyVersioningId;\n\n  @cache({ namespace: `datasource-${RubyVersionDatasource.id}`, key: 'all' })\n  async getReleases({\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const res: ReleaseResult = {\n      homepage: 'https://www.ruby-lang.org',\n      sourceUrl: 'https://github.com/ruby/ruby',\n      releases: [],\n    };\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const rubyVersionsUrl = `${registryUrl}en/downloads/releases/`;\n    try {\n      const response = await this.http.get(rubyVersionsUrl);\n\n      const root = parse(response.body);\n      const rows =\n        root.querySelector('.release-list')?.querySelectorAll('tr') ?? [];\n      rows.forEach((row) => {\n        const tds = row.querySelectorAll('td');\n        const columns: string[] = [];\n        tds.forEach((td) => columns.push(td.innerHTML));\n        if (columns.length) {\n          const version = columns[0].replace('Ruby ', '');\n          if (isVersion(version)) {\n            const releaseTimestamp = columns[1];\n            const changelogUrl = columns[2]\n              .replace('<a href=\"', 'https://www.ruby-lang.org')\n              .replace('\">more...</a>', '');\n            res.releases.push({ version, releaseTimestamp, changelogUrl });\n          }\n        }\n      });\n      if (!res.releases.length) {\n        throw new Error('Missing ruby releases');\n      }\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return res;\n  }\n\n  override handleSpecificErrors(err: HttpError): never | void {\n    throw new ExternalHostError(err);\n  }\n}\n"]}