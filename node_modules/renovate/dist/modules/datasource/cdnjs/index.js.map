{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/cdnjs/index.ts"],"names":[],"mappings":";;;AAAA,mFAA8E;AAC9E,8CAA2C;AAI3C,MAAa,eAAgB,SAAQ,uBAAU;IAG7C;QACE,KAAK,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAGV,0BAAqB,GAAG,KAAK,CAAC;QAE9B,wBAAmB,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAEjD,YAAO,GAAG,IAAI,CAAC;IANjC,CAAC;IAQD,sCAAsC;IAEtC,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,+FAA+F;QAC/F,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,sBAAsB;QACtB,4EAA4E;QAC5E,MAAM,GAAG,GAAG,GAAG,WAAW,aAAa,OAAO,oCAAoC,CAAC;QACnF,IAAI,MAAM,GAAyB,IAAI,CAAC;QACxC,IAAI;YACF,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,CACvC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAgB,GAAG,CAAC,CAC5C,CAAC,IAAI,CAAC;YACP,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,IAAI,CAAC;aACb;YACD,MAAM,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,EAAE,EAAE,CAAC,CAAC;YACzD,MAAM,QAAQ,GAAG,MAAM;iBACpB,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;iBAChD,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAEzE,MAAM,GAAG,EAAE,QAAQ,EAAE,CAAC;YAEtB,IAAI,QAAQ,EAAE;gBACZ,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;aAC5B;YACD,IAAI,UAAU,EAAE,GAAG,EAAE;gBACnB,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC;aACnC;SACF;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;gBAC1B,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;aAClC;YACD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;;AApDH,0CAqDC;AApDiB,kBAAE,GAAG,OAAO,CAAC","sourcesContent":["import { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { CdnjsResponse } from './types';\n\nexport class CdnJsDatasource extends Datasource {\n  static readonly id = 'cdnjs';\n\n  constructor() {\n    super(CdnJsDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://api.cdnjs.com/'];\n\n  override readonly caching = true;\n\n  // this.handleErrors will always throw\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // Each library contains multiple assets, so we cache at the library level instead of per-asset\n    const library = packageName.split('/')[0];\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const url = `${registryUrl}libraries/${library}?fields=homepage,repository,assets`;\n    let result: ReleaseResult | null = null;\n    try {\n      const { assets, homepage, repository } = (\n        await this.http.getJson<CdnjsResponse>(url)\n      ).body;\n      if (!assets) {\n        return null;\n      }\n      const assetName = packageName.replace(`${library}/`, '');\n      const releases = assets\n        .filter(({ files }) => files.includes(assetName))\n        .map(({ version, sri }) => ({ version, newDigest: sri?.[assetName] }));\n\n      result = { releases };\n\n      if (homepage) {\n        result.homepage = homepage;\n      }\n      if (repository?.url) {\n        result.sourceUrl = repository.url;\n      }\n    } catch (err) {\n      if (err.statusCode !== 404) {\n        throw new ExternalHostError(err);\n      }\n      this.handleGenericErrors(err);\n    }\n    return result;\n  }\n}\n"]}