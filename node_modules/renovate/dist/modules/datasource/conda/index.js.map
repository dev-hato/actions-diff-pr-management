{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/conda/index.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AACzC,mFAA8E;AAC9E,qEAA8D;AAC9D,6CAA+C;AAC/C,8CAA2C;AAE3C,qCAA0D;AAG1D,MAAa,eAAgB,SAAQ,uBAAU;IAG7C;QACE,KAAK,CAAC,mBAAU,CAAC,CAAC;QAGF,0BAAqB,GAAG,KAAK,CAAC;QAE9B,wBAAmB,GAAG,CAAC,2BAAkB,CAAC,CAAC;QAE3C,YAAO,GAAG,IAAI,CAAC;IANjC,CAAC;IAeD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,EAAE,wBAAwB,CAAC,CAAC;QAErE,sBAAsB;QACtB,4EAA4E;QAC5E,MAAM,GAAG,GAAG,GAAG,WAAW,GAAG,WAAW,EAAE,CAAC;QAE3C,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,IAAI,QAAgC,CAAC;QAErC,IAAI;YACF,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAExC,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;YACzC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;YAEzC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,EAAE;gBACjD,MAAM,WAAW,GAAY;oBAC3B,OAAO,EAAE,OAAO;iBACjB,CAAC;gBACF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE;YACZ,+CAA+C;YAC/C,IAAI,GAAG,YAAY,gBAAS,EAAE;gBAC5B,IAAI,GAAG,CAAC,QAAQ,EAAE,UAAU,KAAK,GAAG,EAAE;oBACpC,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;iBAClC;aACF;YACD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;;AA1De,kBAAE,GAAG,mBAAU,CAAC;AAmBhC;IAPC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAU,EAAE;QACrC,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE;QACvD,sBAAsB;QACtB,4EAA4E;QAC5E,GAAG,WAAW,IAAI,WAAW,EAAE;KAClC,CAAC;kDAwCD;AA3DH,0CA4DC","sourcesContent":["import { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { HttpError } from '../../../util/http';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { datasource, defaultRegistryUrl } from './common';\nimport type { CondaPackage } from './types';\n\nexport class CondaDatasource extends Datasource {\n  static readonly id = datasource;\n\n  constructor() {\n    super(datasource);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly caching = true;\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#7154)\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `${registryUrl}:${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    logger.trace({ registryUrl, packageName }, 'fetching conda package');\n\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const url = `${registryUrl}${packageName}`;\n\n    const result: ReleaseResult = {\n      releases: [],\n    };\n\n    let response: { body: CondaPackage };\n\n    try {\n      response = await this.http.getJson(url);\n\n      result.homepage = response.body.html_url;\n      result.sourceUrl = response.body.dev_url;\n\n      response.body.versions.forEach((version: string) => {\n        const thisRelease: Release = {\n          version: version,\n        };\n        result.releases.push(thisRelease);\n      });\n    } catch (err) {\n      // istanbul ignore else: not testable with nock\n      if (err instanceof HttpError) {\n        if (err.response?.statusCode !== 404) {\n          throw new ExternalHostError(err);\n        }\n      }\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}