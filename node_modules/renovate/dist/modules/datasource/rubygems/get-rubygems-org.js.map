{"version":3,"file":"get-rubygems-org.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/rubygems/get-rubygems-org.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { getElapsedMinutes } from '../../../util/date';\nimport { newlineRegex } from '../../../util/regex';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\n\nlet lastSync = new Date('2000-01-01');\nlet packageReleases: Record<string, string[]> = Object.create(null); // Because we might need a \"constructor\" key\nlet contentLength = 0;\n\n// Note: use only for tests\nexport function resetCache(): void {\n  lastSync = new Date('2000-01-01');\n  packageReleases = Object.create(null);\n  contentLength = 0;\n}\n\nexport class RubyGemsOrgDatasource extends Datasource {\n  constructor(override readonly id: string) {\n    super(id);\n  }\n\n  async getReleases({\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    logger.debug(`getRubygemsOrgDependency(${packageName})`);\n    await this.syncVersions();\n    if (!packageReleases[packageName]) {\n      return null;\n    }\n    const dep: ReleaseResult = {\n      releases: packageReleases[packageName].map((version) => ({\n        version,\n      })),\n    };\n    return dep;\n  }\n\n  /**\n   * https://bugs.chromium.org/p/v8/issues/detail?id=2869\n   */\n  private static copystr(x: string): string {\n    return (' ' + x).slice(1);\n  }\n\n  async updateRubyGemsVersions(): Promise<void> {\n    const url = 'https://rubygems.org/versions';\n    const options = {\n      headers: {\n        'accept-encoding': 'identity',\n        range: `bytes=${contentLength}-`,\n      },\n    };\n    let newLines: string;\n    try {\n      logger.debug('Rubygems: Fetching rubygems.org versions');\n      const startTime = Date.now();\n      newLines = (await this.http.get(url, options)).body;\n      const durationMs = Math.round(Date.now() - startTime);\n      logger.debug({ durationMs }, 'Rubygems: Fetched rubygems.org versions');\n    } catch (err) /* istanbul ignore next */ {\n      if (err.statusCode !== 416) {\n        contentLength = 0;\n        packageReleases = Object.create(null); // Because we might need a \"constructor\" key\n        logger.debug({ err }, 'Rubygems fetch error');\n        throw new ExternalHostError(new Error('Rubygems fetch error'));\n      }\n      logger.debug('Rubygems: No update');\n      lastSync = new Date();\n      return;\n    }\n\n    for (const line of newLines.split(newlineRegex)) {\n      RubyGemsOrgDatasource.processLine(line);\n    }\n    lastSync = new Date();\n  }\n\n  private static processLine(line: string): void {\n    let split: string[] | undefined;\n    let pkg: string | undefined;\n    let versions: string | undefined;\n    try {\n      const l = line.trim();\n      if (!l.length || l.startsWith('created_at:') || l === '---') {\n        return;\n      }\n      split = l.split(' ');\n      [pkg, versions] = split;\n      pkg = RubyGemsOrgDatasource.copystr(pkg);\n      packageReleases[pkg] = packageReleases[pkg] || [];\n      const lineVersions = versions.split(',').map((version) => version.trim());\n      for (const lineVersion of lineVersions) {\n        if (lineVersion.startsWith('-')) {\n          const deletedVersion = lineVersion.slice(1);\n          logger.trace({ pkg, deletedVersion }, 'Rubygems: Deleting version');\n          packageReleases[pkg] = packageReleases[pkg].filter(\n            (version) => version !== deletedVersion\n          );\n        } else {\n          packageReleases[pkg].push(RubyGemsOrgDatasource.copystr(lineVersion));\n        }\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn(\n        { err, line, split, pkg, versions },\n        'Rubygems line parsing error'\n      );\n    }\n  }\n\n  private static isDataStale(): boolean {\n    return getElapsedMinutes(lastSync) >= 5;\n  }\n\n  private updateRubyGemsVersionsPromise: Promise<void> | null = null;\n\n  async syncVersions(): Promise<void> {\n    if (RubyGemsOrgDatasource.isDataStale()) {\n      this.updateRubyGemsVersionsPromise =\n        this.updateRubyGemsVersionsPromise ?? this.updateRubyGemsVersions();\n      await this.updateRubyGemsVersionsPromise;\n      this.updateRubyGemsVersionsPromise = null;\n    }\n  }\n}\n"]}