{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/github-releases/index.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: types (#7154)\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport hasha from 'hasha';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { GithubHttp } from '../../../util/http/github';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { Datasource } from '../datasource';\nimport type {\n  DigestConfig,\n  GetReleasesConfig,\n  Release,\n  ReleaseResult,\n} from '../types';\nimport { CacheableGithubReleases } from './cache';\nimport { getApiBaseUrl, getSourceUrl } from './common';\nimport type { DigestAsset, GithubRelease, GithubReleaseAsset } from './types';\n\nexport const cacheNamespace = 'datasource-github-releases';\n\nfunction inferHashAlg(digest: string): string {\n  switch (digest.length) {\n    case 64:\n      return 'sha256';\n    default:\n    case 96:\n      return 'sha512';\n  }\n}\n\nexport class GithubReleasesDatasource extends Datasource {\n  static id = 'github-releases';\n\n  override readonly defaultRegistryUrls = ['https://github.com'];\n\n  override http: GithubHttp;\n\n  private releasesCache: CacheableGithubReleases;\n\n  constructor(id = GithubReleasesDatasource.id) {\n    super(id);\n    this.http = new GithubHttp(id);\n    this.releasesCache = new CacheableGithubReleases(this.http);\n  }\n\n  async findDigestFile(\n    release: GithubRelease,\n    digest: string\n  ): Promise<DigestAsset | null> {\n    const smallAssets = release.assets.filter(\n      (a: GithubReleaseAsset) => a.size < 5 * 1024\n    );\n    for (const asset of smallAssets) {\n      const res = await this.http.get(asset.browser_download_url);\n      for (const line of res.body.split(newlineRegex)) {\n        const [lineDigest, lineFn] = line.split(regEx(/\\s+/), 2);\n        if (lineDigest === digest) {\n          return {\n            assetName: asset.name,\n            digestedFileName: lineFn,\n            currentVersion: release.tag_name,\n            currentDigest: lineDigest,\n          };\n        }\n      }\n    }\n    return null;\n  }\n\n  @cache({\n    ttlMinutes: 1440,\n    namespace: 'datasource-github-releases',\n    key: (asset: GithubReleaseAsset, algorithm: string) =>\n      `${asset.browser_download_url}:${algorithm}:assetDigest`,\n  })\n  async downloadAndDigest(\n    asset: GithubReleaseAsset,\n    algorithm: string\n  ): Promise<string> {\n    const res = this.http.stream(asset.browser_download_url);\n    const digest = await hasha.fromStream(res, { algorithm });\n    return digest;\n  }\n\n  async findAssetWithDigest(\n    release: GithubRelease,\n    digest: string\n  ): Promise<DigestAsset | null> {\n    const algorithm = inferHashAlg(digest);\n    const assetsBySize = release.assets.sort(\n      (a: GithubReleaseAsset, b: GithubReleaseAsset) => {\n        if (a.size < b.size) {\n          return -1;\n        }\n        if (a.size > b.size) {\n          return 1;\n        }\n        return 0;\n      }\n    );\n\n    for (const asset of assetsBySize) {\n      const assetDigest = await this.downloadAndDigest(asset, algorithm);\n      if (assetDigest === digest) {\n        return {\n          assetName: asset.name,\n          currentVersion: release.tag_name,\n          currentDigest: assetDigest,\n        };\n      }\n    }\n    return null;\n  }\n\n  /** Identify the asset associated with a known digest. */\n  async findDigestAsset(\n    release: GithubRelease,\n    digest: string\n  ): Promise<DigestAsset | null> {\n    const digestFile = await this.findDigestFile(release, digest);\n    if (digestFile) {\n      return digestFile;\n    }\n\n    const asset = await this.findAssetWithDigest(release, digest);\n    return asset;\n  }\n\n  /** Given a digest asset, find the equivalent digest in a different release. */\n  async mapDigestAssetToRelease(\n    digestAsset: DigestAsset,\n    release: GithubRelease\n  ): Promise<string | null> {\n    const current = digestAsset.currentVersion.replace(regEx(/^v/), '');\n    const next = release.tag_name.replace(regEx(/^v/), '');\n    const releaseChecksumAssetName = digestAsset.assetName.replace(\n      current,\n      next\n    );\n    const releaseAsset = release.assets.find(\n      (a: GithubReleaseAsset) => a.name === releaseChecksumAssetName\n    );\n    if (!releaseAsset) {\n      return null;\n    }\n    if (digestAsset.digestedFileName) {\n      const releaseFilename = digestAsset.digestedFileName.replace(\n        current,\n        next\n      );\n      const res = await this.http.get(releaseAsset.browser_download_url);\n      for (const line of res.body.split(newlineRegex)) {\n        const [lineDigest, lineFn] = line.split(regEx(/\\s+/), 2);\n        if (lineFn === releaseFilename) {\n          return lineDigest;\n        }\n      }\n    } else {\n      const algorithm = inferHashAlg(digestAsset.currentDigest);\n      const newDigest = await this.downloadAndDigest(releaseAsset, algorithm);\n      return newDigest;\n    }\n    return null;\n  }\n\n  @cache({\n    ttlMinutes: 1440,\n    namespace: 'datasource-github-releases',\n    key: (\n      {\n        packageName: repo,\n        currentValue,\n        currentDigest,\n        registryUrl,\n      }: DigestConfig,\n      newValue?: string\n    ) =>\n      `${registryUrl}:${repo}:${currentValue}:${currentDigest}:${newValue}:digest`,\n  })\n  /**\n   * github.getDigest\n   *\n   * The `newValue` supplied here should be a valid tag for the GitHub release.\n   * Requires `currentValue` and `currentDigest`.\n   *\n   * There may be many assets attached to the release. This function will:\n   *  - Identify the asset pinned by `currentDigest` in the `currentValue` release\n   *     - Download small release assets, parse as checksum manifests (e.g. `SHASUMS.txt`).\n   *     - Download individual assets until `currentDigest` is encountered. This is limited to sha256 and sha512.\n   *  - Map the hashed asset to `newValue` and return the updated digest as a string\n   */\n  override async getDigest(\n    {\n      packageName: repo,\n      currentValue,\n      currentDigest,\n      registryUrl,\n    }: DigestConfig,\n    newValue: string\n  ): Promise<string | null> {\n    logger.debug(\n      { repo, currentValue, currentDigest, registryUrl, newValue },\n      'getDigest'\n    );\n    if (!currentDigest) {\n      return null;\n    }\n    if (!currentValue) {\n      return currentDigest;\n    }\n\n    const apiBaseUrl = getApiBaseUrl(registryUrl);\n    const { body: currentRelease } = await this.http.getJson<GithubRelease>(\n      `${apiBaseUrl}repos/${repo}/releases/tags/${currentValue}`\n    );\n    const digestAsset = await this.findDigestAsset(\n      currentRelease,\n      currentDigest\n    );\n    let newDigest: string | null;\n    if (!digestAsset || newValue === currentValue) {\n      newDigest = currentDigest;\n    } else {\n      const { body: newRelease } = await this.http.getJson<GithubRelease>(\n        `${apiBaseUrl}repos/${repo}/releases/tags/${newValue}`\n      );\n      newDigest = await this.mapDigestAssetToRelease(digestAsset, newRelease);\n    }\n    return newDigest;\n  }\n\n  /**\n   * github.getReleases\n   *\n   * This function can be used to fetch releases with a customisable versioning (e.g. semver) and with releases.\n   *\n   * This function will:\n   *  - Fetch all releases\n   *  - Sanitize the versions if desired (e.g. strip out leading 'v')\n   *  - Return a dependency object containing sourceUrl string and releases array\n   */\n  async getReleases(config: GetReleasesConfig): Promise<ReleaseResult> {\n    const releases = await this.releasesCache.getItems(config);\n    return {\n      sourceUrl: getSourceUrl(config.packageName, config.registryUrl),\n      releases: releases.map((item) => {\n        const { version, releaseTimestamp, isStable } = item;\n        const result: Release = {\n          version,\n          gitRef: version,\n          releaseTimestamp,\n        };\n        if (isStable !== undefined) {\n          result.isStable = isStable;\n        }\n        return result;\n      }),\n    };\n  }\n}\n"]}