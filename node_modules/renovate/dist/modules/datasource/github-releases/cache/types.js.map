{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../lib/modules/datasource/github-releases/cache/types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Every `AbstractGithubDatasourceCache` implementation\n * should have `graphqlQuery` that uses parameters\n * defined this interface.\n */\nexport interface GithubQueryParams {\n  owner: string;\n  name: string;\n  cursor: string | null;\n  count: number;\n}\n\n/**\n * Every `AbstractGithubDatasourceCache` implementation\n * should have `graphqlQuery` that resembles the structure\n * of this interface.\n */\nexport interface QueryResponse<T = unknown> {\n  repository: {\n    payload: {\n      nodes: T[];\n      pageInfo: {\n        hasNextPage: boolean;\n        endCursor: string;\n      };\n    };\n  };\n}\n\n/**\n * Base interface meant to be extended by all implementations.\n * Must have `version` and `releaseTimestamp` fields.\n */\nexport interface StoredItemBase {\n  /** The values of `version` field meant to be unique. */\n  version: string;\n\n  /** The `releaseTimestamp` field meant to be ISO-encoded date. */\n  releaseTimestamp: string;\n}\n\n/**\n * The data structure stored in the package cache.\n */\nexport interface GithubDatasourceCache<StoredItem extends StoredItemBase> {\n  items: Record<string, StoredItem>;\n\n  /** Cache full reset decision is based on `createdAt` value. */\n  createdAt: string;\n\n  /** Cache soft updates are performed depending on `updatedAt` value. */\n  updatedAt: string;\n\n  /** Latest release timestamp (`releaseTimestamp`) of all releases. */\n  lastReleasedAt?: string;\n}\n\n/**\n * The configuration for cache.\n */\nexport interface CacheOptions {\n  /**\n   * How many minutes to wait until next cache update\n   */\n  updateAfterMinutes?: number;\n\n  /**\n   * If package was released recently, we assume higher\n   * probability of having one more release soon.\n   *\n   * In this case, we use `updateAfterMinutesFresh` option.\n   */\n  packageFreshDays?: number;\n\n  /**\n   * If package was released recently, we assume higher\n   * probability of having one more release soon.\n   *\n   * In this case, this option will be used\n   * instead of `updateAfterMinutes`.\n   *\n   * Fresh period is configured via `freshDays` option.\n   */\n  updateAfterMinutesFresh?: number;\n\n  /**\n   * How many days to wait until full cache reset (for single package).\n   */\n  resetAfterDays?: number;\n\n  /**\n   * Delays cache reset by some random amount of minutes,\n   * in order to stabilize load during mass cache reset.\n   */\n  resetDeltaMinutes?: number;\n\n  /**\n   * How many days ago the package should be published to be considered as stable.\n   * Since this period is expired, it won't be refreshed via soft updates anymore.\n   */\n  unstableDays?: number;\n\n  /**\n   * How many items per page to obtain per page during initial fetch (i.e. pre-fetch)\n   */\n  itemsPerPrefetchPage?: number;\n\n  /**\n   * How many pages to fetch (at most) during the initial fetch (i.e. pre-fetch)\n   */\n  maxPrefetchPages?: number;\n\n  /**\n   * How many items per page to obtain per page during the soft update\n   */\n  itemsPerUpdatePage?: number;\n\n  /**\n   * How many pages to fetch (at most) during the soft update\n   */\n  maxUpdatePages?: number;\n}\n\nexport interface ChangelogRelease {\n  date: string | Date;\n  version: string;\n}\n"]}