{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/modules/datasource/github-releases/cache/index.ts"],"names":[],"mappings":";;;AACA,6CAA6D;AAGhD,QAAA,KAAK,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;CAyBpB,CAAC;AAqBF,MAAa,uBAAwB,SAAQ,0CAG5C;IAIC,YAAY,IAAgB,EAAE,OAAqB,EAAE;QACnD,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAJpB,YAAO,GAAG,oCAAoC,CAAC;QAC/C,iBAAY,GAAG,aAAK,CAAC;IAIrB,CAAC;IAED,aAAa,CAAC,IAAoB;QAChC,MAAM,EACJ,OAAO,EACP,gBAAgB,EAChB,OAAO,EACP,YAAY,EACZ,GAAG,EACH,EAAE,EACF,IAAI,EACJ,WAAW,GACZ,GAAG,IAAI,CAAC;QAET,IAAI,OAAO,EAAE;YACX,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAkB;YAC5B,OAAO;YACP,gBAAgB;YAChB,GAAG;YACH,EAAE;YACF,IAAI;YACJ,WAAW;SACZ,CAAC;QAEF,IAAI,YAAY,EAAE;YAChB,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;SACzB;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA1CD,0DA0CC","sourcesContent":["import type { GithubHttp } from '../../../../util/http/github';\nimport { AbstractGithubDatasourceCache } from './cache-base';\nimport type { CacheOptions, StoredItemBase } from './types';\n\nexport const query = `\nquery ($owner: String!, $name: String!, $cursor: String, $count: Int!) {\n  repository(owner: $owner, name: $name) {\n    payload: releases(\n      first: $count\n      after: $cursor\n      orderBy: {field: CREATED_AT, direction: DESC}\n    ) {\n      nodes {\n        version: tagName\n        releaseTimestamp: publishedAt\n        isDraft\n        isPrerelease\n        url\n        id: databaseId\n        name\n        description\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n}\n`;\n\nexport interface FetchedRelease {\n  version: string;\n  releaseTimestamp: string;\n  isDraft: boolean;\n  isPrerelease: boolean;\n  url: string;\n  id: number;\n  name: string;\n  description: string;\n}\n\nexport interface StoredRelease extends StoredItemBase {\n  isStable?: boolean;\n  url: string;\n  id: number;\n  name: string;\n  description: string;\n}\n\nexport class CacheableGithubReleases extends AbstractGithubDatasourceCache<\n  StoredRelease,\n  FetchedRelease\n> {\n  cacheNs = 'github-datasource-graphql-releases';\n  graphqlQuery = query;\n\n  constructor(http: GithubHttp, opts: CacheOptions = {}) {\n    super(http, opts);\n  }\n\n  coerceFetched(item: FetchedRelease): StoredRelease | null {\n    const {\n      version,\n      releaseTimestamp,\n      isDraft,\n      isPrerelease,\n      url,\n      id,\n      name,\n      description,\n    } = item;\n\n    if (isDraft) {\n      return null;\n    }\n\n    const result: StoredRelease = {\n      version,\n      releaseTimestamp,\n      url,\n      id,\n      name,\n      description,\n    };\n\n    if (isPrerelease) {\n      result.isStable = false;\n    }\n\n    return result;\n  }\n}\n"]}