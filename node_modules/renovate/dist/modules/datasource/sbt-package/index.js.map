{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/sbt-package/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { XmlDocument } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport { Http } from '../../../util/http';\nimport { regEx } from '../../../util/regex';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport { detectPlatform } from '../../platform/util';\nimport * as ivyVersioning from '../../versioning/ivy';\nimport { compare } from '../../versioning/maven/compare';\nimport { MavenDatasource } from '../maven';\nimport { MAVEN_REPO } from '../maven/common';\nimport { downloadHttpProtocol } from '../maven/util';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport {\n  getLatestVersion,\n  normalizeRootRelativeUrls,\n  parseIndexDir,\n} from './util';\n\nexport class SbtPackageDatasource extends MavenDatasource {\n  static override id = 'sbt-package';\n\n  override readonly defaultRegistryUrls = [MAVEN_REPO];\n\n  override readonly defaultVersioning = ivyVersioning.id;\n\n  override readonly registryStrategy = 'hunt';\n\n  constructor(id = SbtPackageDatasource.id) {\n    super(id);\n    this.http = new Http('sbt');\n  }\n\n  async getArtifactSubdirs(\n    searchRoot: string,\n    artifact: string,\n    scalaVersion: string\n  ): Promise<string[] | null> {\n    const pkgUrl = ensureTrailingSlash(searchRoot);\n    const { body: indexContent } = await downloadHttpProtocol(\n      this.http,\n      pkgUrl\n    );\n    if (indexContent) {\n      const parseSubdirs = (content: string): string[] =>\n        parseIndexDir(content, (x) => {\n          if (x === artifact) {\n            return true;\n          }\n          if (x.startsWith(`${artifact}_native`)) {\n            return false;\n          }\n          if (x.startsWith(`${artifact}_sjs`)) {\n            return false;\n          }\n          return x.startsWith(`${artifact}_`);\n        });\n      const normalizedContent = normalizeRootRelativeUrls(indexContent, pkgUrl);\n      let artifactSubdirs = parseSubdirs(normalizedContent);\n      if (\n        scalaVersion &&\n        artifactSubdirs.includes(`${artifact}_${scalaVersion}`)\n      ) {\n        artifactSubdirs = [`${artifact}_${scalaVersion}`];\n      }\n      return artifactSubdirs;\n    }\n\n    return null;\n  }\n\n  async getPackageReleases(\n    searchRoot: string,\n    artifactSubdirs: string[] | null\n  ): Promise<string[] | null> {\n    if (artifactSubdirs) {\n      const releases: string[] = [];\n      const parseReleases = (content: string): string[] =>\n        parseIndexDir(content, (x) => !regEx(/^\\.+$/).test(x));\n      for (const searchSubdir of artifactSubdirs) {\n        const pkgUrl = ensureTrailingSlash(`${searchRoot}/${searchSubdir}`);\n        const { body: content } = await downloadHttpProtocol(this.http, pkgUrl);\n        if (content) {\n          const normalizedContent = normalizeRootRelativeUrls(content, pkgUrl);\n          const subdirReleases = parseReleases(normalizedContent);\n          subdirReleases.forEach((x) => releases.push(x));\n        }\n      }\n      if (releases.length) {\n        return [...new Set(releases)].sort(compare);\n      }\n    }\n\n    return null;\n  }\n\n  async getUrls(\n    searchRoot: string,\n    artifactDirs: string[] | null,\n    version: string | null\n  ): Promise<Partial<ReleaseResult>> {\n    const result: Partial<ReleaseResult> = {};\n\n    if (!artifactDirs?.length) {\n      return result;\n    }\n\n    if (!version) {\n      return result;\n    }\n\n    for (const artifactDir of artifactDirs) {\n      const [artifact] = artifactDir.split('_');\n      const pomFileNames = [\n        `${artifactDir}-${version}.pom`,\n        `${artifact}-${version}.pom`,\n      ];\n\n      for (const pomFileName of pomFileNames) {\n        const pomUrl = `${searchRoot}/${artifactDir}/${version}/${pomFileName}`;\n        const { body: content } = await downloadHttpProtocol(this.http, pomUrl);\n\n        if (content) {\n          const pomXml = new XmlDocument(content);\n\n          const homepage = pomXml.valueWithPath('url');\n          if (homepage) {\n            result.homepage = homepage;\n          }\n\n          const sourceUrl = pomXml.valueWithPath('scm.url');\n          if (sourceUrl) {\n            result.sourceUrl = sourceUrl\n              .replace(regEx(/^scm:/), '')\n              .replace(regEx(/^git:/), '')\n              .replace(regEx(/^git@github.com:/), 'https://github.com/')\n              .replace(regEx(/\\.git$/), '');\n          }\n\n          return result;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  override async getReleases(\n    config: GetReleasesConfig\n  ): Promise<ReleaseResult | null> {\n    const { packageName, registryUrl } = config;\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n\n    const platform = detectPlatform(registryUrl);\n    if (platform === 'gitlab') {\n      const mavenReleases = await super.getReleases(config);\n      return mavenReleases;\n    }\n\n    const [groupId, artifactId] = packageName.split(':');\n    const groupIdSplit = groupId.split('.');\n    const artifactIdSplit = artifactId.split('_');\n    const [artifact, scalaVersion] = artifactIdSplit;\n\n    const repoRoot = ensureTrailingSlash(registryUrl);\n    const searchRoots: string[] = [];\n    // Optimize lookup order\n    searchRoots.push(`${repoRoot}${groupIdSplit.join('/')}`);\n    searchRoots.push(`${repoRoot}${groupIdSplit.join('.')}`);\n\n    for (let idx = 0; idx < searchRoots.length; idx += 1) {\n      const searchRoot = searchRoots[idx];\n      const artifactSubdirs = await this.getArtifactSubdirs(\n        searchRoot,\n        artifact,\n        scalaVersion\n      );\n      const versions = await this.getPackageReleases(\n        searchRoot,\n        artifactSubdirs\n      );\n      const latestVersion = getLatestVersion(versions);\n      const urls = await this.getUrls(\n        searchRoot,\n        artifactSubdirs,\n        latestVersion\n      );\n\n      const dependencyUrl = searchRoot;\n\n      if (versions) {\n        return {\n          ...urls,\n          dependencyUrl,\n          releases: versions.map((v) => ({ version: v })),\n        };\n      }\n    }\n\n    logger.debug(\n      `No versions found for ${packageName} in ${searchRoots.length} repositories`\n    );\n    return null;\n  }\n}\n"]}