{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/dart/index.ts"],"names":[],"mappings":";;;AACA,8CAA2C;AAI3C,MAAa,cAAe,SAAQ,uBAAU;IAG5C;QACE,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAGT,0BAAqB,GAAG,KAAK,CAAC;QAE9B,wBAAmB,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAJtE,CAAC;IAMD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,qBAAqB;QACrB,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QACD,IAAI,MAAM,GAAyB,IAAI,CAAC;QACxC,MAAM,MAAM,GAAG,GAAG,WAAW,gBAAgB,WAAW,EAAE,CAAC;QAE3D,IAAI,GAAG,GAAoC,IAAI,CAAC;QAChD,IAAI;YACF,GAAG,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAa,MAAM,CAAC,CAAC;SACnD;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,MAAM,IAAI,GAAG,GAAG,EAAE,IAAI,CAAC;QACvB,IAAI,IAAI,EAAE;YACR,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;YAClC,MAAM,QAAQ,GAAG,QAAQ;gBACvB,EAAE,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC;gBACvC,EAAE,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;gBACjC,OAAO;gBACP,gBAAgB,EAAE,SAAS;aAC5B,CAAC,CAAC,CAAC;YACN,IAAI,QAAQ,IAAI,MAAM,EAAE;gBACtB,MAAM,GAAG,EAAE,QAAQ,EAAE,CAAC;gBAEtB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAC/B,IAAI,OAAO,EAAE;oBACX,IAAI,OAAO,CAAC,QAAQ,EAAE;wBACpB,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;qBACpC;oBAED,IAAI,OAAO,CAAC,UAAU,EAAE;wBACtB,MAAM,CAAC,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;qBACvC;iBACF;aACF;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;;AAtDH,wCAuDC;AAtDiB,iBAAE,GAAG,MAAM,CAAC","sourcesContent":["import type { HttpResponse } from '../../../util/http/types';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { DartResult } from './types';\n\nexport class DartDatasource extends Datasource {\n  static readonly id = 'dart';\n\n  constructor() {\n    super(DartDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://pub.dartlang.org/'];\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n    let result: ReleaseResult | null = null;\n    const pkgUrl = `${registryUrl}api/packages/${packageName}`;\n\n    let raw: HttpResponse<DartResult> | null = null;\n    try {\n      raw = await this.http.getJson<DartResult>(pkgUrl);\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    const body = raw?.body;\n    if (body) {\n      const { versions, latest } = body;\n      const releases = versions\n        ?.filter(({ retracted }) => !retracted)\n        ?.map(({ version, published }) => ({\n          version,\n          releaseTimestamp: published,\n        }));\n      if (releases && latest) {\n        result = { releases };\n\n        const pubspec = latest.pubspec;\n        if (pubspec) {\n          if (pubspec.homepage) {\n            result.homepage = pubspec.homepage;\n          }\n\n          if (pubspec.repository) {\n            result.sourceUrl = pubspec.repository;\n          }\n        }\n      }\n    }\n    return result;\n  }\n}\n"]}