{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/cpan/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { joinUrlParts } from '../../../util/url';\nimport * as perlVersioning from '../../versioning/perl';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport type { MetaCpanApiFile, MetaCpanApiFileSearchResult } from './types';\n\nexport class CpanDatasource extends Datasource {\n  static readonly id = 'cpan';\n\n  constructor() {\n    super(CpanDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://fastapi.metacpan.org/'];\n\n  override readonly defaultVersioning = perlVersioning.id;\n\n  @cache({\n    namespace: `datasource-${CpanDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => `${packageName}`,\n  })\n  override async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n\n    let result: ReleaseResult | null = null;\n    const searchUrl = joinUrlParts(registryUrl, 'v1/file/_search');\n\n    let hits: MetaCpanApiFile[] | null = null;\n    try {\n      const body = {\n        query: {\n          filtered: {\n            query: { match_all: {} },\n            filter: {\n              and: [\n                { term: { 'module.name': packageName } },\n                { exists: { field: 'module.associated_pod' } },\n              ],\n            },\n          },\n        },\n        _source: [\n          'module.name',\n          'module.version',\n          'distribution',\n          'date',\n          'deprecated',\n          'maturity',\n        ],\n        sort: [{ date: 'desc' }],\n      };\n      const res = await this.http.postJson<MetaCpanApiFileSearchResult>(\n        searchUrl,\n        { body }\n      );\n      hits = res.body?.hits?.hits?.map(({ _source }) => _source);\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    let latestDistribution: string | null = null;\n    if (hits) {\n      const releases: Release[] = [];\n      for (const hit of hits) {\n        const {\n          module,\n          distribution,\n          date: releaseTimestamp,\n          deprecated: isDeprecated,\n          maturity,\n        } = hit;\n        const version = module.find(\n          ({ name }) => name === packageName\n        )?.version;\n        if (version) {\n          // https://metacpan.org/pod/CPAN::DistnameInfo#maturity\n          const isStable = maturity === 'released';\n          releases.push({\n            isDeprecated,\n            isStable,\n            releaseTimestamp,\n            version,\n          });\n\n          if (!latestDistribution) {\n            latestDistribution = distribution;\n          }\n        }\n      }\n      if (releases.length > 0 && latestDistribution) {\n        result = {\n          releases,\n          changelogUrl: `https://metacpan.org/dist/${latestDistribution}/changes`,\n          homepage: `https://metacpan.org/pod/${packageName}`,\n        };\n      }\n    }\n    return result;\n  }\n}\n"]}