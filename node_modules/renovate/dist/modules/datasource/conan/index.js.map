{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/conan/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { GithubHttp } from '../../../util/http/github';\nimport { ensureTrailingSlash, joinUrlParts } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { conanDatasourceRegex, datasource, defaultRegistryUrl } from './common';\nimport type { ConanJSON, ConanYAML } from './types';\n\nexport class ConanDatasource extends Datasource {\n  static readonly id = datasource;\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly caching = true;\n\n  override readonly registryStrategy = 'merge';\n\n  githubHttp: GithubHttp;\n\n  constructor(id = ConanDatasource.id) {\n    super(id);\n    this.githubHttp = new GithubHttp(id);\n  }\n\n  async getConanCenterReleases(\n    depName: string,\n    userAndChannel: string\n  ): Promise<ReleaseResult | null> {\n    if (userAndChannel && userAndChannel !== '@_/_') {\n      logger.debug(\n        { depName, userAndChannel },\n        'User/channel not supported for Conan Center lookups'\n      );\n      return null;\n    }\n    const url = `https://api.github.com/repos/conan-io/conan-center-index/contents/recipes/${depName}/config.yml`;\n    const res = await this.githubHttp.get(url, {\n      headers: { accept: 'application/vnd.github.v3.raw' },\n    });\n    const doc = load(res.body, {\n      json: true,\n    }) as ConanYAML;\n    return {\n      releases: Object.keys(doc?.versions ?? {}).map((version) => ({\n        version,\n      })),\n    };\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#7154)\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `${registryUrl}:${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const depName = packageName.split('/')[0];\n    const userAndChannel = '@' + packageName.split('@')[1];\n    if (\n      is.string(registryUrl) &&\n      ensureTrailingSlash(registryUrl) === defaultRegistryUrl\n    ) {\n      return this.getConanCenterReleases(depName, userAndChannel);\n    }\n\n    logger.trace({ depName, registryUrl }, 'Looking up conan api dependency');\n    if (registryUrl) {\n      const url = ensureTrailingSlash(registryUrl);\n      const lookupUrl = joinUrlParts(url, `v2/conans/search?q=${depName}`);\n\n      try {\n        const rep = await this.http.getJson<ConanJSON>(lookupUrl);\n        const versions = rep?.body;\n        if (versions) {\n          logger.trace({ lookupUrl }, 'Got conan api result');\n          const dep: ReleaseResult = { releases: [] };\n\n          for (const resultString of Object.values(versions.results ?? {})) {\n            const fromMatch = conanDatasourceRegex.exec(resultString);\n            if (fromMatch?.groups?.version && fromMatch?.groups?.userChannel) {\n              const version = fromMatch.groups.version;\n              if (fromMatch.groups.userChannel === userAndChannel) {\n                const result: Release = {\n                  version,\n                };\n                dep.releases.push(result);\n              }\n            }\n          }\n          return dep;\n        }\n      } catch (err) {\n        this.handleGenericErrors(err);\n      }\n    }\n\n    return null;\n  }\n}\n"]}