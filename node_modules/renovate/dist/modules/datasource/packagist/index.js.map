{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/packagist/index.ts"],"names":[],"mappings":";;;;AAAA,sDAAsB;AACtB,0DAAyB;AACzB,4CAAyC;AACzC,mFAA8E;AAC9E,kFAA4D;AAC5D,qEAA8D;AAC9D,4EAAsD;AAEtD,+CAA4C;AAC5C,2CAAsE;AACtE,sFAAgE;AAChE,8CAA2C;AAU3C,MAAa,mBAAoB,SAAQ,uBAAU;IAGjD;QACE,KAAK,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QAGd,wBAAmB,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAEhD,sBAAiB,GAAG,kBAAkB,CAAC,EAAE,CAAC;QAE1C,qBAAgB,GAAG,MAAM,CAAC;IAN5C,CAAC;IAQe,WAAW,CAAC,EAC1B,WAAW,EACX,WAAW,GACO;QAClB,eAAM,CAAC,KAAK,CAAC,eAAe,WAAW,GAAG,CAAC,CAAC;QAC5C,qBAAqB;QACrB,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACtD,CAAC;IAED,mGAAmG;IAC3F,MAAM,CAAC,WAAW,CAAC,GAAW;QACpC,IAAI,IAAI,GAAgB,EAAE,CAAC;QAC3B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC;YAC5C,QAAQ,EAAE,mBAAmB,CAAC,EAAE;YAChC,GAAG;SACJ,CAAC,CAAC;QACH,IAAI,QAAQ,IAAI,QAAQ,EAAE;YACxB,IAAI,GAAG,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;SACxC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,MAAc;QAC1C,MAAM,GAAG,GAAG,aAAG,CAAC,OAAO,CAAC,IAAA,yBAAmB,EAAC,MAAM,CAAC,EAAE,eAAe,CAAC,CAAC;QACtE,MAAM,IAAI,GAAG,mBAAmB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAClD,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAc,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACnE,MAAM,IAAI,GAAiB;YACzB,gBAAgB,EAAE,EAAE;YACpB,QAAQ,EAAE,GAAG,CAAC,QAAQ;SACvB,CAAC;QACF,IAAI,GAAG,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,KAAK,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACtD,MAAM,IAAI,GAAG;oBACX,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;oBACvC,MAAM,EAAE,GAAG,CAAC,MAAM;iBACnB,CAAC;gBACF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC/B;SACF;QACD,IAAI,GAAG,CAAC,eAAe,CAAC,EAAE;YACxB,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,eAAe,CAAC,CAAC;SAC1C;QACD,IAAI,GAAG,CAAC,oBAAoB,CAAC,EAAE;YAC7B,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC,oBAAoB,CAAC,CAAC;SACnD;QACD,IAAI,GAAG,CAAC,mBAAmB,CAAC,EAAE;YAC5B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAChB,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,EAAE;gBACjE,MAAM,IAAI,GAAG;oBACX,GAAG;oBACH,MAAM,EAAE,GAAG,CAAC,MAAM;iBACnB,CAAC;gBACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;SACF;QACD,IAAI,GAAG,CAAC,SAAS,EAAE;YACjB,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBACtD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;aACzC;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,MAAc;QAC5C,MAAM,IAAI,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrD,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC;IAC1D,CAAC;IAEO,MAAM,CAAC,mBAAmB,CAChC,MAAc,EACd,OAAqB;QAErB,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QAChC,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC/C,MAAM,GAAG,GAAG,GAAG,MAAM,IAAI,QAAQ,EAAE,CAAC;QACpC,OAAO,GAAG,CAAC;IACb,CAAC;IAUD,KAAK,CAAC,gBAAgB,CACpB,MAAc,EACd,OAAqB;QAErB,MAAM,GAAG,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACrE,MAAM,IAAI,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrD,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CACrD,GAAG,EACH,IAAI,CACL,CAAC;QACF,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,MAAM,CAAC,kBAAkB,CAAC,QAAsB;QACtD,MAAM,GAAG,GAAkB,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;QAC5C,qBAAqB;QACrB,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,GAAG,CAAC;SACZ;QACD,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YACnD,gDAAgD;YAChD,MAAM,OAAO,GAAI,QAAgB,CAAC,OAAO,CAAC,CAAC;YAC3C,MAAM,aAAa,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC;YACjD,GAAG,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC;YAChD,IAAI,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE;gBACvB,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;aACpC;YACD,OAAO;gBACL,OAAO,EAAE,aAAa,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,IAAI,CAAC,EAAE,EAAE,CAAC;gBAC/C,MAAM,EAAE,aAAa;gBACrB,gBAAgB,EAAE,OAAO,CAAC,IAAI;aAC/B,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;IAMD,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACxD,iCAAiC;QACjC,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,EACJ,QAAQ,EACR,YAAY,EACZ,gBAAgB,EAChB,KAAK,EACL,aAAa,EACb,gBAAgB,GACjB,GAAG,YAAY,CAAC;QACjB,IAAI,KAAK,EAAE;YACT,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CACrB,CAAC,IAAI,EAAE,EAAE,CAAC,GAA2B,EAAE,CACrC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CACtC,CAAC;YACF,MAAM,aAAa,GAAG,MAAM,IAAA,eAAI,EAAC,KAAK,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;YAC5D,KAAK,MAAM,GAAG,IAAI,aAAa,EAAE;gBAC/B,KAAK,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;oBACvD,gBAAgB,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;iBACrC;aACF;SACF;QACD,MAAM,gBAAgB,GAAkC,EAAE,CAAC;QAC3D,IAAI,aAAa,EAAE;YACjB,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE;gBAChC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACtD,IAAI,GAAG,CAAC,QAAQ,EAAE;oBAChB,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;wBACrD,MAAM,GAAG,GAAG,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;wBACxD,gBAAgB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;qBAC7B;iBACF;aACF;SACF;QACD,MAAM,WAAW,GAAgB;YAC/B,QAAQ;YACR,YAAY;YACZ,gBAAgB;YAChB,gBAAgB;YAChB,gBAAgB;SACjB,CAAC;QACF,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,IAAY;QACnC,MAAM,cAAc,GAAG,0BAA0B,CAAC;QAClD,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,GAAG,CACzC,cAAc,EACd,IAAI,CACL,CAAC;QACF,qBAAqB;QACrB,IAAI,YAAY,EAAE;YAChB,OAAO,YAAY,CAAC;SACrB;QACD,IAAI,GAAG,GAAyB,IAAI,CAAC;QACrC,MAAM,MAAM,GAAG,uBAAuB,CAAC;QACvC,MAAM,MAAM,GAAG;YACb,IAAA,kBAAY,EAAC,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC;YACxC,IAAA,kBAAY,EAAC,MAAM,EAAE,OAAO,IAAI,WAAW,CAAC;SAC7C,CAAC;QACF,0BAA0B;QAC1B,IAAI,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAM,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACxE,GAAG,GAAG;YACJ,GAAG,GAAG;YACN,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAM,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;SACjE,CAAC;QACF,IAAI,GAAG,EAAE;YACP,GAAG,GAAG,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;YAClD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;SAC9B;QACD,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,MAAM,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,EAAE,GAAG,EAAE,YAAY,CAAC,CAAC;QAChE,OAAO,GAAG,CAAC;IACb,CAAC;IAEO,KAAK,CAAC,aAAa,CACzB,MAAc,EACd,IAAY;QAEZ,IAAI;YACF,IAAI,MAAM,KAAK,uBAAuB,EAAE;gBACtC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBAC5D,OAAO,eAAe,CAAC;aACxB;YACD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACtD,iCAAiC;YACjC,IAAI,CAAC,WAAW,EAAE;gBAChB,OAAO,IAAI,CAAC;aACb;YACD,MAAM,EACJ,QAAQ,EACR,YAAY,EACZ,gBAAgB,EAChB,gBAAgB,EAChB,gBAAgB,GACjB,GAAG,WAAW,CAAC;YAChB,IAAI,QAAQ,EAAE,CAAC,IAAI,CAAC,EAAE;gBACpB,MAAM,GAAG,GAAG,mBAAmB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;gBACnE,OAAO,GAAG,CAAC;aACZ;YACD,IAAI,gBAAgB,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC5B,OAAO,gBAAgB,CAAC,IAAI,CAAC,CAAC;aAC/B;YACD,IAAI,MAAc,CAAC;YACnB,IAAI,IAAI,IAAI,gBAAgB,EAAE;gBAC5B,MAAM,GAAG,aAAG,CAAC,OAAO,CAClB,MAAM,EACN,YAAa;qBACV,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC;qBAC1B,OAAO,CAAC,QAAQ,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAC7C,CAAC;aACH;iBAAM,IAAI,gBAAgB,EAAE;gBAC3B,MAAM,GAAG,aAAG,CAAC,OAAO,CAClB,MAAM,EACN,gBAAgB,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAC5C,CAAC;aACH;iBAAM;gBACL,OAAO,IAAI,CAAC;aACb;YACD,MAAM,IAAI,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YACrD,0BAA0B;YAC1B,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAM,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI;iBAC/D,QAAQ,CAAC,IAAI,CAAC,CAAC;YAClB,MAAM,GAAG,GAAG,mBAAmB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAC7D,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;YAC7B,OAAO,GAAG,CAAC;SACZ;QAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;YACvC,IAAI,GAAG,CAAC,IAAI,KAAK,eAAe,EAAE;gBAChC,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW,EAAE;oBACzD,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;iBAClC;gBACD,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,EAAE;oBACnE,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;iBAClC;aACF;YACD,MAAM,GAAG,CAAC;SACX;IACH,CAAC;;AA5Re,sBAAE,GAAG,WAAW,CAAC;AAsGjC;IARC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAmB,CAAC,EAAE,eAAe;QAC9D,GAAG,EAAE,CAAC,MAAc,EAAE,OAAqB,EAAE,EAAE,CAC7C,mBAAmB,CAAC,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC;QAC1D,SAAS,EAAE,CAAC,MAAc,EAAE,EAAE,CAC5B,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,MAAM,CAAC;QAC/C,UAAU,EAAE,IAAI;KACjB,CAAC;2DAYD;AA6BD;IAJC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAmB,CAAC,EAAE,EAAE;QACjD,GAAG,EAAE,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM;KAChC,CAAC;yDAgDD;AA9LH,kDA8RC","sourcesContent":["import URL from 'url';\nimport pAll from 'p-all';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport * as packageCache from '../../../util/cache/package';\nimport { cache } from '../../../util/cache/package/decorator';\nimport * as hostRules from '../../../util/host-rules';\nimport type { HttpOptions } from '../../../util/http/types';\nimport { regEx } from '../../../util/regex';\nimport { ensureTrailingSlash, joinUrlParts } from '../../../util/url';\nimport * as composerVersioning from '../../versioning/composer';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type {\n  AllPackages,\n  PackageMeta,\n  PackagistFile,\n  RegistryFile,\n  RegistryMeta,\n} from './types';\n\nexport class PackagistDatasource extends Datasource {\n  static readonly id = 'packagist';\n\n  constructor() {\n    super(PackagistDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = ['https://packagist.org'];\n\n  override readonly defaultVersioning = composerVersioning.id;\n\n  override readonly registryStrategy = 'hunt';\n\n  public override getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    logger.trace(`getReleases(${packageName})`);\n    // istanbul ignore if\n    if (!registryUrl) {\n      return Promise.resolve(null);\n    }\n    return this.packageLookup(registryUrl, packageName);\n  }\n\n  // We calculate auth at this datasource layer so that we can know whether it's safe to cache or not\n  private static getHostOpts(url: string): HttpOptions {\n    let opts: HttpOptions = {};\n    const { username, password } = hostRules.find({\n      hostType: PackagistDatasource.id,\n      url,\n    });\n    if (username && password) {\n      opts = { ...opts, username, password };\n    }\n    return opts;\n  }\n\n  private async getRegistryMeta(regUrl: string): Promise<RegistryMeta | null> {\n    const url = URL.resolve(ensureTrailingSlash(regUrl), 'packages.json');\n    const opts = PackagistDatasource.getHostOpts(url);\n    const res = (await this.http.getJson<PackageMeta>(url, opts)).body;\n    const meta: RegistryMeta = {\n      providerPackages: {},\n      packages: res.packages,\n    };\n    if (res.includes) {\n      meta.includesFiles = [];\n      for (const [name, val] of Object.entries(res.includes)) {\n        const file = {\n          key: name.replace(val.sha256, '%hash%'),\n          sha256: val.sha256,\n        };\n        meta.includesFiles.push(file);\n      }\n    }\n    if (res['providers-url']) {\n      meta.providersUrl = res['providers-url'];\n    }\n    if (res['providers-lazy-url']) {\n      meta.providersLazyUrl = res['providers-lazy-url'];\n    }\n    if (res['provider-includes']) {\n      meta.files = [];\n      for (const [key, val] of Object.entries(res['provider-includes'])) {\n        const file = {\n          key,\n          sha256: val.sha256,\n        };\n        meta.files.push(file);\n      }\n    }\n    if (res.providers) {\n      for (const [key, val] of Object.entries(res.providers)) {\n        meta.providerPackages[key] = val.sha256;\n      }\n    }\n    return meta;\n  }\n\n  private static isPrivatePackage(regUrl: string): boolean {\n    const opts = PackagistDatasource.getHostOpts(regUrl);\n    return !!opts.password || !!opts.headers?.authorization;\n  }\n\n  private static getPackagistFileUrl(\n    regUrl: string,\n    regFile: RegistryFile\n  ): string {\n    const { key, sha256 } = regFile;\n    const fileName = key.replace('%hash%', sha256);\n    const url = `${regUrl}/${fileName}`;\n    return url;\n  }\n\n  @cache({\n    namespace: `datasource-${PackagistDatasource.id}-public-files`,\n    key: (regUrl: string, regFile: RegistryFile) =>\n      PackagistDatasource.getPackagistFileUrl(regUrl, regFile),\n    cacheable: (regUrl: string) =>\n      !PackagistDatasource.isPrivatePackage(regUrl),\n    ttlMinutes: 1440,\n  })\n  async getPackagistFile(\n    regUrl: string,\n    regFile: RegistryFile\n  ): Promise<PackagistFile> {\n    const url = PackagistDatasource.getPackagistFileUrl(regUrl, regFile);\n    const opts = PackagistDatasource.getHostOpts(regUrl);\n    const { body: packagistFile } = await this.http.getJson<PackagistFile>(\n      url,\n      opts\n    );\n    return packagistFile;\n  }\n\n  private static extractDepReleases(versions: RegistryFile): ReleaseResult {\n    const dep: ReleaseResult = { releases: [] };\n    // istanbul ignore if\n    if (!versions) {\n      return dep;\n    }\n    dep.releases = Object.keys(versions).map((version) => {\n      // TODO: fix function parameter type: `versions`\n      const release = (versions as any)[version];\n      const parsedVersion = release.version ?? version;\n      dep.homepage = release.homepage || dep.homepage;\n      if (release.source?.url) {\n        dep.sourceUrl = release.source.url;\n      }\n      return {\n        version: parsedVersion.replace(regEx(/^v/), ''),\n        gitRef: parsedVersion,\n        releaseTimestamp: release.time,\n      };\n    });\n    return dep;\n  }\n\n  @cache({\n    namespace: `datasource-${PackagistDatasource.id}`,\n    key: (regUrl: string) => regUrl,\n  })\n  async getAllPackages(regUrl: string): Promise<AllPackages | null> {\n    const registryMeta = await this.getRegistryMeta(regUrl);\n    // istanbul ignore if: needs test\n    if (!registryMeta) {\n      return null;\n    }\n\n    const {\n      packages,\n      providersUrl,\n      providersLazyUrl,\n      files,\n      includesFiles,\n      providerPackages,\n    } = registryMeta;\n    if (files) {\n      const queue = files.map(\n        (file) => (): Promise<PackagistFile> =>\n          this.getPackagistFile(regUrl, file)\n      );\n      const resolvedFiles = await pAll(queue, { concurrency: 5 });\n      for (const res of resolvedFiles) {\n        for (const [name, val] of Object.entries(res.providers)) {\n          providerPackages[name] = val.sha256;\n        }\n      }\n    }\n    const includesPackages: Record<string, ReleaseResult> = {};\n    if (includesFiles) {\n      for (const file of includesFiles) {\n        const res = await this.getPackagistFile(regUrl, file);\n        if (res.packages) {\n          for (const [key, val] of Object.entries(res.packages)) {\n            const dep = PackagistDatasource.extractDepReleases(val);\n            includesPackages[key] = dep;\n          }\n        }\n      }\n    }\n    const allPackages: AllPackages = {\n      packages,\n      providersUrl,\n      providersLazyUrl,\n      providerPackages,\n      includesPackages,\n    };\n    return allPackages;\n  }\n\n  async packagistOrgLookup(name: string): Promise<ReleaseResult | null> {\n    const cacheNamespace = 'datasource-packagist-org';\n    const cachedResult = await packageCache.get<ReleaseResult>(\n      cacheNamespace,\n      name\n    );\n    // istanbul ignore if\n    if (cachedResult) {\n      return cachedResult;\n    }\n    let dep: ReleaseResult | null = null;\n    const regUrl = 'https://packagist.org';\n    const pkgUrl = [\n      joinUrlParts(regUrl, `/p2/${name}.json`),\n      joinUrlParts(regUrl, `/p2/${name}~dev.json`),\n    ];\n    // TODO: fix types (#9610)\n    let res = (await this.http.getJson<any>(pkgUrl[0])).body.packages[name];\n    res = [\n      ...res,\n      ...(await this.http.getJson<any>(pkgUrl[1])).body.packages[name],\n    ];\n    if (res) {\n      dep = PackagistDatasource.extractDepReleases(res);\n      logger.trace({ dep }, 'dep');\n    }\n    const cacheMinutes = 10;\n    await packageCache.set(cacheNamespace, name, dep, cacheMinutes);\n    return dep;\n  }\n\n  private async packageLookup(\n    regUrl: string,\n    name: string\n  ): Promise<ReleaseResult | null> {\n    try {\n      if (regUrl === 'https://packagist.org') {\n        const packagistResult = await this.packagistOrgLookup(name);\n        return packagistResult;\n      }\n      const allPackages = await this.getAllPackages(regUrl);\n      // istanbul ignore if: needs test\n      if (!allPackages) {\n        return null;\n      }\n      const {\n        packages,\n        providersUrl,\n        providersLazyUrl,\n        providerPackages,\n        includesPackages,\n      } = allPackages;\n      if (packages?.[name]) {\n        const dep = PackagistDatasource.extractDepReleases(packages[name]);\n        return dep;\n      }\n      if (includesPackages?.[name]) {\n        return includesPackages[name];\n      }\n      let pkgUrl: string;\n      if (name in providerPackages) {\n        pkgUrl = URL.resolve(\n          regUrl,\n          providersUrl!\n            .replace('%package%', name)\n            .replace('%hash%', providerPackages[name])\n        );\n      } else if (providersLazyUrl) {\n        pkgUrl = URL.resolve(\n          regUrl,\n          providersLazyUrl.replace('%package%', name)\n        );\n      } else {\n        return null;\n      }\n      const opts = PackagistDatasource.getHostOpts(regUrl);\n      // TODO: fix types (#9610)\n      const versions = (await this.http.getJson<any>(pkgUrl, opts)).body\n        .packages[name];\n      const dep = PackagistDatasource.extractDepReleases(versions);\n      logger.trace({ dep }, 'dep');\n      return dep;\n    } catch (err) /* istanbul ignore next */ {\n      if (err.host === 'packagist.org') {\n        if (err.code === 'ECONNRESET' || err.code === 'ETIMEDOUT') {\n          throw new ExternalHostError(err);\n        }\n        if (err.statusCode && err.statusCode >= 500 && err.statusCode < 600) {\n          throw new ExternalHostError(err);\n        }\n      }\n      throw err;\n    }\n  }\n}\n"]}