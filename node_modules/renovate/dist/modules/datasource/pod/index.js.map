{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/pod/index.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport { HOST_DISABLED } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { cache } from '../../../util/cache/package/decorator';\nimport type { HttpError } from '../../../util/http';\nimport { GithubHttp } from '../../../util/http/github';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { Datasource } from '../datasource';\nimport { massageGithubUrl } from '../metadata';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\n\n// eslint-disable-next-line typescript-enum/no-enum, typescript-enum/no-const-enum\nconst enum URLFormatOptions {\n  WithShardWithSpec,\n  WithShardWithoutSpec,\n  WithSpecsWithoutShard,\n  WithoutSpecsWithoutShard,\n}\n\nfunction shardParts(packageName: string): string[] {\n  return crypto\n    .createHash('md5')\n    .update(packageName)\n    .digest('hex')\n    .slice(0, 3)\n    .split('');\n}\n\nconst githubRegex = regEx(\n  /(?<hostURL>(^https:\\/\\/[a-zA-z0-9-.]+))\\/(?<account>[^/]+)\\/(?<repo>[^/]+?)(\\.git|\\/.*)?$/\n);\n\nfunction releasesGithubUrl(\n  packageName: string,\n  opts: {\n    hostURL: string;\n    account: string;\n    repo: string;\n    useShard: boolean;\n    useSpecs: boolean;\n  }\n): string {\n  const { hostURL, account, repo, useShard, useSpecs } = opts;\n  const prefix =\n    hostURL && hostURL !== 'https://github.com'\n      ? `${hostURL}/api/v3/repos`\n      : 'https://api.github.com/repos';\n  const shard = shardParts(packageName).join('/');\n  // `Specs` in the pods repo URL is a new requirement for legacy support also allow pod repo URL without `Specs`\n  const packageNamePath = useSpecs ? `Specs/${packageName}` : packageName;\n  const shardPath = useSpecs\n    ? `Specs/${shard}/${packageName}`\n    : `${shard}/${packageName}`;\n  const suffix = useShard ? shardPath : packageNamePath;\n  return `${prefix}/${account}/${repo}/contents/${suffix}`;\n}\n\nfunction handleError(packageName: string, err: HttpError): void {\n  const errorData = { packageName, err };\n\n  const statusCode = err.response?.statusCode ?? 0;\n  if (statusCode === 429 || (statusCode >= 500 && statusCode < 600)) {\n    logger.warn({ packageName, err }, `CocoaPods registry failure`);\n    throw new ExternalHostError(err);\n  }\n\n  if (statusCode === 401) {\n    logger.debug(errorData, 'Authorization error');\n  } else if (statusCode === 404) {\n    logger.debug(errorData, 'Package lookup error');\n  } else if (err.message === HOST_DISABLED) {\n    // istanbul ignore next\n    logger.trace(errorData, 'Host disabled');\n  } else {\n    logger.warn(errorData, 'CocoaPods lookup failure: Unknown error');\n  }\n}\n\nfunction isDefaultRepo(url: string): boolean {\n  const match = githubRegex.exec(url);\n  if (match) {\n    const { account, repo } = match.groups ?? {};\n    return (\n      account.toLowerCase() === 'cocoapods' && repo.toLowerCase() === 'specs'\n    ); // https://github.com/CocoaPods/Specs.git\n  }\n  return false;\n}\n\nfunction releasesCDNUrl(packageName: string, registryUrl: string): string {\n  const shard = shardParts(packageName).join('_');\n  return `${registryUrl}/all_pods_versions_${shard}.txt`;\n}\n\nexport class PodDatasource extends Datasource {\n  static readonly id = 'pod';\n\n  override readonly defaultRegistryUrls = ['https://cdn.cocoapods.org'];\n\n  override readonly registryStrategy = 'hunt';\n\n  githubHttp: GithubHttp;\n\n  constructor() {\n    super(PodDatasource.id);\n    this.githubHttp = new GithubHttp(PodDatasource.id);\n  }\n\n  private async requestCDN(\n    url: string,\n    packageName: string\n  ): Promise<string | null> {\n    try {\n      const resp = await this.http.get(url);\n      if (resp?.body) {\n        return resp.body;\n      }\n    } catch (err) {\n      handleError(packageName, err);\n    }\n\n    return null;\n  }\n\n  private async requestGithub<T = unknown>(\n    url: string,\n    packageName: string\n  ): Promise<T | null> {\n    try {\n      const resp = await this.githubHttp.getJson<T>(url);\n      if (resp?.body) {\n        return resp.body;\n      }\n    } catch (err) {\n      handleError(packageName, err);\n    }\n\n    return null;\n  }\n\n  private async getReleasesFromGithub(\n    packageName: string,\n    opts: { hostURL: string; account: string; repo: string },\n    useShard = true,\n    useSpecs = true,\n    urlFormatOptions = URLFormatOptions.WithShardWithSpec\n  ): Promise<ReleaseResult | null> {\n    const url = releasesGithubUrl(packageName, { ...opts, useShard, useSpecs });\n    const resp = await this.requestGithub<{ name: string }[]>(url, packageName);\n    if (resp) {\n      const releases = resp.map(({ name }) => ({ version: name }));\n      return { releases };\n    }\n\n    // iterating through enum to support different url formats\n    switch (urlFormatOptions) {\n      case URLFormatOptions.WithShardWithSpec:\n        return this.getReleasesFromGithub(\n          packageName,\n          opts,\n          true,\n          false,\n          URLFormatOptions.WithShardWithoutSpec\n        );\n      case URLFormatOptions.WithShardWithoutSpec:\n        return this.getReleasesFromGithub(\n          packageName,\n          opts,\n          false,\n          true,\n          URLFormatOptions.WithSpecsWithoutShard\n        );\n      case URLFormatOptions.WithSpecsWithoutShard:\n        return this.getReleasesFromGithub(\n          packageName,\n          opts,\n          false,\n          false,\n          URLFormatOptions.WithoutSpecsWithoutShard\n        );\n      case URLFormatOptions.WithoutSpecsWithoutShard:\n      default:\n        return null;\n    }\n  }\n\n  private async getReleasesFromCDN(\n    packageName: string,\n    registryUrl: string\n  ): Promise<ReleaseResult | null> {\n    const url = releasesCDNUrl(packageName, registryUrl);\n    const resp = await this.requestCDN(url, packageName);\n    if (resp) {\n      const lines = resp.split(newlineRegex);\n      for (let idx = 0; idx < lines.length; idx += 1) {\n        const line = lines[idx];\n        const [name, ...versions] = line.split('/');\n        if (name === packageName.replace(regEx(/\\/.*$/), '')) {\n          const releases = versions.map((version) => ({ version }));\n          return { releases };\n        }\n      }\n    }\n    return null;\n  }\n\n  @cache({\n    ttlMinutes: 30,\n    namespace: `datasource-${PodDatasource.id}`,\n    key: ({ packageName, registryUrl }: GetReleasesConfig) =>\n      // TODO: types (#7154)\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `${registryUrl}:${packageName}`,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n\n    const podName = packageName.replace(regEx(/\\/.*$/), '');\n    let baseUrl = registryUrl.replace(regEx(/\\/+$/), '');\n    // In order to not abuse github API limits, query CDN instead\n    if (isDefaultRepo(baseUrl)) {\n      [baseUrl] = this.defaultRegistryUrls;\n    }\n\n    let result: ReleaseResult | null = null;\n    const match = githubRegex.exec(baseUrl);\n    if (match) {\n      baseUrl = massageGithubUrl(baseUrl);\n      const { hostURL, account, repo } = match?.groups ?? {};\n      const opts = { hostURL, account, repo };\n      result = await this.getReleasesFromGithub(podName, opts);\n    } else {\n      result = await this.getReleasesFromCDN(podName, baseUrl);\n    }\n\n    return result;\n  }\n}\n"]}