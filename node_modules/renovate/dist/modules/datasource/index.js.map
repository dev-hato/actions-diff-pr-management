{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/modules/datasource/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { dequal } from 'dequal';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../../util/cache/memory';\nimport * as packageCache from '../../util/cache/package';\nimport { clone } from '../../util/clone';\nimport { regEx } from '../../util/regex';\nimport { trimTrailingSlash } from '../../util/url';\nimport * as allVersioning from '../versioning';\nimport datasources from './api';\nimport { addMetaData } from './metadata';\nimport { setNpmrc } from './npm';\nimport { resolveRegistryUrl } from './npm/npmrc';\nimport type {\n  DatasourceApi,\n  DigestConfig,\n  GetDigestInputConfig,\n  GetPkgReleasesConfig,\n  GetReleasesConfig,\n  ReleaseResult,\n} from './types';\n\nexport * from './types';\nexport { isGetPkgReleasesConfig } from './common';\n\nexport const getDatasources = (): Map<string, DatasourceApi> => datasources;\nexport const getDatasourceList = (): string[] => Array.from(datasources.keys());\n\nconst cacheNamespace = 'datasource-releases';\n\nfunction getDatasourceFor(datasource: string): DatasourceApi | null {\n  return datasources.get(datasource) ?? null;\n}\n\ntype GetReleasesInternalConfig = GetReleasesConfig & GetPkgReleasesConfig;\n\n// TODO: fix error Type\nfunction logError(datasource: string, packageName: string, err: any): void {\n  const { statusCode, code: errCode, url } = err;\n  if (statusCode === 404) {\n    logger.debug({ datasource, packageName, url }, 'Datasource 404');\n  } else if (statusCode === 401 || statusCode === 403) {\n    logger.debug({ datasource, packageName, url }, 'Datasource unauthorized');\n  } else if (errCode) {\n    logger.debug(\n      { datasource, packageName, url, errCode },\n      'Datasource connection error'\n    );\n  } else {\n    logger.debug({ datasource, packageName, err }, 'Datasource unknown error');\n  }\n}\n\nasync function getRegistryReleases(\n  datasource: DatasourceApi,\n  config: GetReleasesConfig,\n  registryUrl: string\n): Promise<ReleaseResult | null> {\n  const cacheKey = `${datasource.id} ${registryUrl} ${config.packageName}`;\n  if (datasource.caching) {\n    const cachedResult = await packageCache.get<ReleaseResult>(\n      cacheNamespace,\n      cacheKey\n    );\n    // istanbul ignore if\n    if (cachedResult) {\n      logger.trace({ cacheKey }, 'Returning cached datasource response');\n      return cachedResult;\n    }\n  }\n  const res = await datasource.getReleases({ ...config, registryUrl });\n  if (res?.releases.length) {\n    res.registryUrl ??= registryUrl;\n  }\n  // cache non-null responses unless marked as private\n  if (datasource.caching && res && !res.isPrivate) {\n    logger.trace({ cacheKey }, 'Caching datasource response');\n    const cacheMinutes = 15;\n    await packageCache.set(cacheNamespace, cacheKey, res, cacheMinutes);\n  }\n  return res;\n}\n\nfunction firstRegistry(\n  config: GetReleasesInternalConfig,\n  datasource: DatasourceApi,\n  registryUrls: string[]\n): Promise<ReleaseResult | null> {\n  if (registryUrls.length > 1) {\n    logger.warn(\n      { datasource: datasource.id, depName: config.depName, registryUrls },\n      'Excess registryUrls found for datasource lookup - using first configured only'\n    );\n  }\n  const registryUrl = registryUrls[0];\n  return getRegistryReleases(datasource, config, registryUrl);\n}\n\nasync function huntRegistries(\n  config: GetReleasesInternalConfig,\n  datasource: DatasourceApi,\n  registryUrls: string[]\n): Promise<ReleaseResult | null> {\n  let res: ReleaseResult | null = null;\n  let caughtError: Error | undefined;\n  for (const registryUrl of registryUrls) {\n    try {\n      res = await getRegistryReleases(datasource, config, registryUrl);\n      if (res) {\n        break;\n      }\n    } catch (err) {\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      // We'll always save the last-thrown error\n      caughtError = err;\n      logger.trace({ err }, 'datasource hunt failure');\n    }\n  }\n  if (res) {\n    return res;\n  }\n  if (caughtError) {\n    throw caughtError;\n  }\n  return null;\n}\n\nasync function mergeRegistries(\n  config: GetReleasesInternalConfig,\n  datasource: DatasourceApi,\n  registryUrls: string[]\n): Promise<ReleaseResult | null> {\n  let combinedRes: ReleaseResult | undefined;\n  let caughtError: Error | undefined;\n  for (const registryUrl of registryUrls) {\n    try {\n      const res = await getRegistryReleases(datasource, config, registryUrl);\n      if (res) {\n        if (combinedRes) {\n          for (const existingRelease of combinedRes.releases || []) {\n            existingRelease.registryUrl = combinedRes.registryUrl;\n          }\n          for (const additionalRelease of res.releases || []) {\n            additionalRelease.registryUrl = res.registryUrl;\n          }\n          combinedRes = { ...res, ...combinedRes };\n          delete combinedRes.registryUrl;\n          combinedRes.releases = [...combinedRes.releases, ...res.releases];\n        } else {\n          combinedRes = res;\n        }\n      }\n    } catch (err) {\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      // We'll always save the last-thrown error\n      caughtError = err;\n      logger.trace({ err }, 'datasource merge failure');\n    }\n  }\n  // De-duplicate releases\n  if (combinedRes?.releases?.length) {\n    const seenVersions = new Set<string>();\n    combinedRes.releases = combinedRes.releases.filter((release) => {\n      if (seenVersions.has(release.version)) {\n        return false;\n      }\n      seenVersions.add(release.version);\n      return true;\n    });\n  }\n  if (combinedRes) {\n    return combinedRes;\n  }\n  if (caughtError) {\n    throw caughtError;\n  }\n  return null;\n}\n\nfunction massageRegistryUrls(registryUrls: string[]): string[] {\n  return registryUrls.filter(Boolean).map(trimTrailingSlash);\n}\n\nfunction resolveRegistryUrls(\n  datasource: DatasourceApi,\n  defaultRegistryUrls: string[] | undefined,\n  registryUrls: string[] | undefined,\n  additionalRegistryUrls: string[] | undefined\n): string[] {\n  if (!datasource.customRegistrySupport) {\n    if (\n      is.nonEmptyArray(registryUrls) ||\n      is.nonEmptyArray(defaultRegistryUrls) ||\n      is.nonEmptyArray(additionalRegistryUrls)\n    ) {\n      logger.warn(\n        {\n          datasource: datasource.id,\n          registryUrls,\n          defaultRegistryUrls,\n          additionalRegistryUrls,\n        },\n        'Custom registries are not allowed for this datasource and will be ignored'\n      );\n    }\n    return is.function_(datasource.defaultRegistryUrls)\n      ? datasource.defaultRegistryUrls()\n      : datasource.defaultRegistryUrls ?? [];\n  }\n  const customUrls = registryUrls?.filter(Boolean);\n  let resolvedUrls: string[] = [];\n  if (is.nonEmptyArray(customUrls)) {\n    resolvedUrls = [...customUrls];\n  } else if (is.nonEmptyArray(defaultRegistryUrls)) {\n    resolvedUrls = [...defaultRegistryUrls];\n    resolvedUrls = resolvedUrls.concat(additionalRegistryUrls ?? []);\n  } else if (is.function_(datasource.defaultRegistryUrls)) {\n    resolvedUrls = [...datasource.defaultRegistryUrls()];\n    resolvedUrls = resolvedUrls.concat(additionalRegistryUrls ?? []);\n  } else if (is.nonEmptyArray(datasource.defaultRegistryUrls)) {\n    resolvedUrls = [...datasource.defaultRegistryUrls];\n    resolvedUrls = resolvedUrls.concat(additionalRegistryUrls ?? []);\n  }\n  return massageRegistryUrls(resolvedUrls);\n}\n\nexport function getDefaultVersioning(\n  datasourceName: string | undefined\n): string {\n  if (!datasourceName) {\n    return 'semver';\n  }\n  const datasource = getDatasourceFor(datasourceName);\n  // istanbul ignore if: wrong regex manager config?\n  if (!datasource) {\n    logger.warn({ datasourceName }, 'Missing datasource!');\n  }\n  return datasource?.defaultVersioning ?? 'semver';\n}\n\nfunction applyReplacements(\n  config: GetReleasesInternalConfig\n): Pick<ReleaseResult, 'replacementName' | 'replacementVersion'> | undefined {\n  if (config.replacementName && config.replacementVersion) {\n    return {\n      replacementName: config.replacementName,\n      replacementVersion: config.replacementVersion,\n    };\n  }\n  return undefined;\n}\n\nasync function fetchReleases(\n  config: GetReleasesInternalConfig\n): Promise<ReleaseResult | null> {\n  const { datasource: datasourceName } = config;\n  let { registryUrls } = config;\n  // istanbul ignore if: need test\n  if (!datasourceName || getDatasourceFor(datasourceName) === undefined) {\n    logger.warn('Unknown datasource: ' + datasourceName);\n    return null;\n  }\n  if (datasourceName === 'npm') {\n    if (is.string(config.npmrc)) {\n      setNpmrc(config.npmrc);\n    }\n    if (!is.nonEmptyArray(registryUrls)) {\n      registryUrls = [resolveRegistryUrl(config.packageName)];\n    }\n  }\n  const datasource = getDatasourceFor(datasourceName);\n  // istanbul ignore if: needs test\n  if (!datasource) {\n    return null;\n  }\n  registryUrls = resolveRegistryUrls(\n    datasource,\n    config.defaultRegistryUrls,\n    registryUrls,\n    config.additionalRegistryUrls\n  );\n  let dep: ReleaseResult | null = null;\n  const registryStrategy = datasource.registryStrategy ?? 'hunt';\n  try {\n    if (is.nonEmptyArray(registryUrls)) {\n      if (registryStrategy === 'first') {\n        dep = await firstRegistry(config, datasource, registryUrls);\n      } else if (registryStrategy === 'hunt') {\n        dep = await huntRegistries(config, datasource, registryUrls);\n      } else if (registryStrategy === 'merge') {\n        dep = await mergeRegistries(config, datasource, registryUrls);\n      }\n    } else {\n      dep = await datasource.getReleases(config);\n    }\n  } catch (err) {\n    if (err.message === HOST_DISABLED || err.err?.message === HOST_DISABLED) {\n      return null;\n    }\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logError(datasource.id, config.packageName, err);\n  }\n  if (!dep || dequal(dep, { releases: [] })) {\n    return null;\n  }\n  addMetaData(dep, datasourceName, config.packageName);\n  dep = { ...dep, ...applyReplacements(config) };\n  return dep;\n}\n\nfunction getRawReleases(\n  config: GetReleasesInternalConfig\n): Promise<ReleaseResult | null> {\n  const { datasource, packageName, registryUrls } = config;\n  const cacheKey = `${cacheNamespace}${datasource}${packageName}${String(\n    registryUrls\n  )}`;\n  // By returning a Promise and reusing it, we should only fetch each package at most once\n  const cachedResult = memCache.get<Promise<ReleaseResult | null>>(cacheKey);\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const promisedRes = fetchReleases(config);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport async function getPkgReleases(\n  config: GetPkgReleasesConfig\n): Promise<ReleaseResult | null> {\n  if (!config.datasource) {\n    logger.warn('No datasource found');\n    return null;\n  }\n  const packageName = config.packageName ?? config.depName;\n  if (!packageName) {\n    logger.error({ config }, 'Datasource getReleases without packageName');\n    return null;\n  }\n  let res: ReleaseResult;\n  try {\n    res = clone(\n      await getRawReleases({\n        ...config,\n        packageName,\n      })\n    );\n  } catch (e) /* istanbul ignore next */ {\n    if (e instanceof ExternalHostError) {\n      e.hostType = config.datasource;\n      e.packageName = packageName;\n    }\n    throw e;\n  }\n  if (!res) {\n    return res;\n  }\n  if (config.extractVersion) {\n    const extractVersionRegEx = regEx(config.extractVersion);\n    res.releases = res.releases\n      .map((release) => {\n        const version = extractVersionRegEx.exec(release.version)?.groups\n          ?.version;\n        if (version) {\n          return { ...release, version }; // overwrite version\n        }\n        return null; // filter out any we can't extract\n      })\n      .filter(is.truthy);\n  }\n  // Use the datasource's default versioning if none is configured\n  const versioning =\n    config.versioning ?? getDefaultVersioning(config.datasource);\n  const version = allVersioning.get(versioning);\n\n  // Filter and sort valid versions\n  res.releases = res.releases\n    .filter((release) => version.isVersion(release.version))\n    .sort((a, b) => version.sortVersions(a.version, b.version));\n\n  // Filter versions for uniqueness\n  res.releases = res.releases.filter(\n    (filterRelease, filterIndex) =>\n      res.releases.findIndex(\n        (findRelease) => findRelease.version === filterRelease.version\n      ) === filterIndex\n  );\n  // Filter releases for compatibility\n  for (const [constraintName, constraintValue] of Object.entries(\n    config.constraints ?? {}\n  )) {\n    // Currently we only support if the constraint is a plain version\n    // TODO: Support range/range compatibility filtering #8476\n    if (version.isVersion(constraintValue)) {\n      res.releases = res.releases.filter((release) => {\n        const constraint = release.constraints?.[constraintName];\n        if (!is.nonEmptyArray(constraint)) {\n          // A release with no constraints is OK\n          return true;\n        }\n        return constraint.some(\n          // If any of the release's constraints match, then it's OK\n          (releaseConstraint) =>\n            !releaseConstraint ||\n            version.matches(constraintValue, releaseConstraint)\n        );\n      });\n    }\n  }\n  // Strip constraints from releases result\n  res.releases.forEach((release) => {\n    delete release.constraints;\n  });\n  return res;\n}\n\nexport function supportsDigests(datasource: string | undefined): boolean {\n  const ds = !!datasource && getDatasourceFor(datasource);\n  return !!ds && 'getDigest' in ds;\n}\n\nfunction getDigestConfig(\n  datasource: DatasourceApi,\n  config: GetDigestInputConfig\n): DigestConfig {\n  const { currentValue, currentDigest } = config;\n  const packageName = config.packageName ?? config.depName;\n  const [registryUrl] = resolveRegistryUrls(\n    datasource,\n    config.defaultRegistryUrls,\n    config.registryUrls,\n    config.additionalRegistryUrls\n  );\n  return { packageName, registryUrl, currentValue, currentDigest };\n}\n\nexport function getDigest(\n  config: GetDigestInputConfig,\n  value?: string\n): Promise<string | null> {\n  const datasource = getDatasourceFor(config.datasource);\n  // istanbul ignore if: need test\n  if (!datasource || !('getDigest' in datasource)) {\n    return Promise.resolve(null);\n  }\n  const digestConfig = getDigestConfig(datasource, config);\n  return datasource.getDigest!(digestConfig, value);\n}\n\nexport function getDefaultConfig(\n  datasource: string\n): Promise<Record<string, unknown>> {\n  const loadedDatasource = getDatasourceFor(datasource);\n  return Promise.resolve<Record<string, unknown>>(\n    loadedDatasource?.defaultConfig ?? Object.create({})\n  );\n}\n"]}