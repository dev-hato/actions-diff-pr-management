{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/terraform-module/base.ts"],"names":[],"mappings":";;;;AAAA,mFAA8E;AAC9E,qEAA8D;AAE9D,2CAAwD;AACxD,8CAA2C;AAG3C,2DAA2D;AAC3D,MAAsB,mBAAoB,SAAQ,uBAAU;IAS1D,KAAK,CAAC,kCAAkC,CACtC,WAAmB;QAEnB,MAAM,YAAY,GAAG,mBAAmB,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACtE,MAAM,gBAAgB,GAAG,CACvB,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAyB,YAAY,CAAC,CAC9D,CAAC,IAAI,CAAC;QACP,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAEO,MAAM,CAAC,eAAe,CAAC,WAAmB;QAChD,OAAO,GAAG,IAAA,yBAAmB,EAAC,WAAW,CAAC,4BAA4B,CAAC;IACzE,CAAC;IAEQ,oBAAoB,CAAC,GAAc;QAC1C,MAAM,YAAY,GAAG,CAAC,WAAW,CAAC,CAAC;QACnC,qBAAqB;QACrB,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACnC,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;SAClC;QACD,qBAAqB;QACrB,IAAI,GAAG,CAAC,QAAQ,EAAE,UAAU,KAAK,GAAG,EAAE;YACpC,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;SAClC;IACH,CAAC;;AAhCM,sBAAE,GAAG,WAAW,CAAC;AAQxB;IANC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAmB,CAAC,EAAE,EAAE;QACjD,GAAG,EAAE,CAAC,WAAmB,EAAE,EAAE,CAC3B,mBAAmB,CAAC,eAAe,CAAC,WAAW,CAAC;QAClD,UAAU,EAAE,IAAI;KACjB,CAAC;6EASD;AAjBH,kDAkCC","sourcesContent":["import { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { cache } from '../../../util/cache/package/decorator';\nimport type { HttpError } from '../../../util/http';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { ServiceDiscoveryResult } from './types';\n\n// TODO: extract to a separate directory structure (#10532)\nexport abstract class TerraformDatasource extends Datasource {\n  static id = 'terraform';\n\n  @cache({\n    namespace: `datasource-${TerraformDatasource.id}`,\n    key: (registryUrl: string) =>\n      TerraformDatasource.getDiscoveryUrl(registryUrl),\n    ttlMinutes: 1440,\n  })\n  async getTerraformServiceDiscoveryResult(\n    registryUrl: string\n  ): Promise<ServiceDiscoveryResult> {\n    const discoveryURL = TerraformDatasource.getDiscoveryUrl(registryUrl);\n    const serviceDiscovery = (\n      await this.http.getJson<ServiceDiscoveryResult>(discoveryURL)\n    ).body;\n    return serviceDiscovery;\n  }\n\n  private static getDiscoveryUrl(registryUrl: string): string {\n    return `${ensureTrailingSlash(registryUrl)}.well-known/terraform.json`;\n  }\n\n  override handleSpecificErrors(err: HttpError): void {\n    const failureCodes = ['EAI_AGAIN'];\n    // istanbul ignore if\n    if (failureCodes.includes(err.code)) {\n      throw new ExternalHostError(err);\n    }\n    // istanbul ignore if\n    if (err.response?.statusCode === 503) {\n      throw new ExternalHostError(err);\n    }\n  }\n}\n"]}