{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/sbt-plugin/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { Http } from '../../../util/http';\nimport { regEx } from '../../../util/regex';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport * as ivyVersioning from '../../versioning/ivy';\nimport { compare } from '../../versioning/maven/compare';\nimport { downloadHttpProtocol } from '../maven/util';\nimport { SbtPackageDatasource } from '../sbt-package';\nimport { getLatestVersion, parseIndexDir } from '../sbt-package/util';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\n\nexport const SBT_PLUGINS_REPO =\n  'https://dl.bintray.com/sbt/sbt-plugin-releases';\n\nexport const defaultRegistryUrls = [SBT_PLUGINS_REPO];\n\nexport class SbtPluginDatasource extends SbtPackageDatasource {\n  static override readonly id = 'sbt-plugin';\n\n  override readonly defaultRegistryUrls = defaultRegistryUrls;\n\n  override readonly registryStrategy = 'hunt';\n\n  override readonly defaultVersioning = ivyVersioning.id;\n\n  constructor() {\n    super(SbtPluginDatasource.id);\n    this.http = new Http('sbt');\n  }\n\n  async resolvePluginReleases(\n    rootUrl: string,\n    artifact: string,\n    scalaVersion: string\n  ): Promise<string[] | null> {\n    const searchRoot = `${rootUrl}/${artifact}`;\n    const parse = (content: string): string[] =>\n      parseIndexDir(content, (x) => !regEx(/^\\.+$/).test(x));\n    const { body: indexContent } = await downloadHttpProtocol(\n      this.http,\n      ensureTrailingSlash(searchRoot)\n    );\n    if (indexContent) {\n      const releases: string[] = [];\n      const scalaVersionItems = parse(indexContent);\n      const scalaVersions = scalaVersionItems.map((x) =>\n        x.replace(regEx(/^scala_/), '')\n      );\n      const searchVersions = scalaVersions.includes(scalaVersion)\n        ? [scalaVersion]\n        : scalaVersions;\n      for (const searchVersion of searchVersions) {\n        const searchSubRoot = `${searchRoot}/scala_${searchVersion}`;\n        const { body: subRootContent } = await downloadHttpProtocol(\n          this.http,\n          ensureTrailingSlash(searchSubRoot)\n        );\n        if (subRootContent) {\n          const sbtVersionItems = parse(subRootContent);\n          for (const sbtItem of sbtVersionItems) {\n            const releasesRoot = `${searchSubRoot}/${sbtItem}`;\n            const { body: releasesIndexContent } = await downloadHttpProtocol(\n              this.http,\n              ensureTrailingSlash(releasesRoot)\n            );\n            if (releasesIndexContent) {\n              const releasesParsed = parse(releasesIndexContent);\n              releasesParsed.forEach((x) => releases.push(x));\n            }\n          }\n        }\n      }\n      if (releases.length) {\n        return [...new Set(releases)].sort(compare);\n      }\n    }\n    return null;\n  }\n\n  override async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n\n    const [groupId, artifactId] = packageName.split(':');\n    const groupIdSplit = groupId.split('.');\n    const artifactIdSplit = artifactId.split('_');\n    const [artifact, scalaVersion] = artifactIdSplit;\n\n    const repoRoot = ensureTrailingSlash(registryUrl);\n    const searchRoots: string[] = [];\n    // Optimize lookup order\n    searchRoots.push(`${repoRoot}${groupIdSplit.join('.')}`);\n    searchRoots.push(`${repoRoot}${groupIdSplit.join('/')}`);\n\n    for (let idx = 0; idx < searchRoots.length; idx += 1) {\n      const searchRoot = searchRoots[idx];\n      let versions = await this.resolvePluginReleases(\n        searchRoot,\n        artifact,\n        scalaVersion\n      );\n      let urls = {};\n\n      if (!versions?.length) {\n        const artifactSubdirs = await this.getArtifactSubdirs(\n          searchRoot,\n          artifact,\n          scalaVersion\n        );\n        versions = await this.getPackageReleases(searchRoot, artifactSubdirs);\n        const latestVersion = getLatestVersion(versions);\n        urls = await this.getUrls(searchRoot, artifactSubdirs, latestVersion);\n      }\n\n      const dependencyUrl = `${searchRoot}/${artifact}`;\n\n      if (versions) {\n        return {\n          ...urls,\n          dependencyUrl,\n          releases: versions.map((v) => ({ version: v })),\n        };\n      }\n    }\n\n    logger.debug(\n      `No versions found for ${packageName} in ${searchRoots.length} repositories`\n    );\n    return null;\n  }\n}\n"]}