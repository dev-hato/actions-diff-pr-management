{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/aws-machine-image/index.ts"],"names":[],"mappings":";;;;AAAA,oDAA8E;AAC9E,qEAA8D;AAC9D,6CAA0C;AAC1C,yGAAmF;AACnF,8CAA2C;AAG3C,MAAa,yBAA0B,SAAQ,uBAAU;IA4BvD;QACE,KAAK,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC;QA1BpB,sBAAiB,GAAG,4BAA4B,CAAC,EAAE,CAAC;QAEpD,YAAO,GAAG,IAAI,CAAC;QAEf,kBAAa,GAAG;YAChC,oGAAoG;YACpG,kBAAkB,EAAE,qBAAqB;YACzC,aAAa,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;YAClC,iBAAiB,EAAE;gBACjB,KAAK,EAAE,uBAAuB;aAC/B;YACD,MAAM,EAAE;gBACN,4FAA4F;gBAC5F,kBAAkB,EAAE,oBAAoB;gBACxC,aAAa,EAAE,CAAC,OAAO,CAAC;gBACxB,iBAAiB,EAAE;oBACjB,KAAK,EAAE,uBAAuB;iBAC/B;aACF;SACF,CAAC;QAQA,IAAI,CAAC,GAAG,GAAG,IAAI,WAAI,CAAC,GAAG,EAAE,CAAC,IAAI,sBAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7C,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACxB,CAAC;IAOD,KAAK,CAAC,yBAAyB,CAC7B,mBAA2B;QAE3B,MAAM,GAAG,GAAG,IAAI,kCAAqB,CAAC;YACpC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;SACzC,CAAC,CAAC;QACH,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3D,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,IAAI,EAAE,CAAC;QACpD,OAAO,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YACnD,MAAM,GAAG,GAAG,MAAM,CAAC,YAAY;gBAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC;gBACjC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC;YAEjC,MAAM,GAAG,GAAG,MAAM,CAAC,YAAY;gBAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC;gBACjC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC;YACjC,OAAO,GAAG,GAAG,GAAG,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IAOQ,KAAK,CAAC,SAAS,CACtB,EAAE,WAAW,EAAE,mBAAmB,EAAqB,EACvD,QAAiB;QAEjB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,CAAC;QACzE,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,QAAQ,EAAE;YACZ,MAAM,sBAAsB,GAAG,MAAM,CAAC,MAAM,CAC1C,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,KAAK,QAAQ,CACtC,CAAC;YACF,IAAI,sBAAsB,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvC,OAAO,CACL,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,0BAA0B,CAAC,IAAI,CAClE,CAAC;aACH;YACD,OAAO,IAAI,CAAC;SACb;QAED,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,EAAE,WAAW,EAAE,mBAAmB,EAAE,CAAC,CAAC;QACzE,OAAO,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,SAAS,IAAI,0BAA0B,CAAC,IAAI,CAAC;IAC1E,CAAC;IAMD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EAAE,mBAAmB,GACd;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,CAAC;QACzE,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9C,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QACD,OAAO;YACL,QAAQ,EAAE;gBACR;oBACE,OAAO,EAAE,WAAW,CAAC,OAAO;oBAC5B,gBAAgB,EAAE,WAAW,CAAC,YAAY;oBAC1C,YAAY,EACV,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;wBAC9D,IAAI,CAAC,GAAG;oBACV,SAAS,EAAE,WAAW,CAAC,IAAI;iBAC5B;aACF;SACF,CAAC;IACJ,CAAC;;AAhHe,4BAAE,GAAG,mBAAmB,CAAC;AAsCzC;IALC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,yBAAyB,CAAC,EAAE,EAAE;QACvD,GAAG,EAAE,CAAC,mBAA2B,EAAE,EAAE,CACnC,6BAA6B,mBAAmB,EAAE;KACrD,CAAC;0EAmBD;AAOD;IALC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,yBAAyB,CAAC,EAAE,EAAE;QACvD,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,QAAgB,EAAE,EAAE,CAC5D,aAAa,WAAW,IAAI,QAAQ,IAAI,EAAE,EAAE;KAC/C,CAAC;0DAwBD;AAMD;IAJC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,yBAAyB,CAAC,EAAE,EAAE;QACvD,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,eAAe,WAAW,EAAE;KAC1E,CAAC;4DAqBD;AAjHH,8DAkHC","sourcesContent":["import { DescribeImagesCommand, EC2Client, Image } from '@aws-sdk/client-ec2';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { Lazy } from '../../../util/lazy';\nimport * as amazonMachineImageVersioning from '../../versioning/aws-machine-image';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\n\nexport class AwsMachineImageDataSource extends Datasource {\n  static readonly id = 'aws-machine-image';\n\n  override readonly defaultVersioning = amazonMachineImageVersioning.id;\n\n  override readonly caching = true;\n\n  override readonly defaultConfig = {\n    // Because AMIs don't follow any versioning scheme, we override commitMessageExtra to remove the 'v'\n    commitMessageExtra: 'to {{{newVersion}}}',\n    prBodyColumns: ['Change', 'Image'],\n    prBodyDefinitions: {\n      Image: '```{{{newDigest}}}```',\n    },\n    digest: {\n      // Because newDigestShort will allways be 'amazon-' we override to print the name of the AMI\n      commitMessageExtra: 'to {{{newDigest}}}',\n      prBodyColumns: ['Image'],\n      prBodyDefinitions: {\n        Image: '```{{{newDigest}}}```',\n      },\n    },\n  };\n\n  private readonly ec2: Lazy<EC2Client>;\n\n  private readonly now: number;\n\n  constructor() {\n    super(AwsMachineImageDataSource.id);\n    this.ec2 = new Lazy(() => new EC2Client({}));\n    this.now = Date.now();\n  }\n\n  @cache({\n    namespace: `datasource-${AwsMachineImageDataSource.id}`,\n    key: (serializedAmiFilter: string) =>\n      `getSortedAwsMachineImages:${serializedAmiFilter}`,\n  })\n  async getSortedAwsMachineImages(\n    serializedAmiFilter: string\n  ): Promise<Image[]> {\n    const cmd = new DescribeImagesCommand({\n      Filters: JSON.parse(serializedAmiFilter),\n    });\n    const matchingImages = await this.ec2.getValue().send(cmd);\n    matchingImages.Images = matchingImages.Images ?? [];\n    return matchingImages.Images.sort((image1, image2) => {\n      const ts1 = image1.CreationDate\n        ? Date.parse(image1.CreationDate)\n        : /* istanbul ignore next */ 0;\n\n      const ts2 = image2.CreationDate\n        ? Date.parse(image2.CreationDate)\n        : /* istanbul ignore next */ 0;\n      return ts1 - ts2;\n    });\n  }\n\n  @cache({\n    namespace: `datasource-${AwsMachineImageDataSource.id}`,\n    key: ({ packageName }: GetReleasesConfig, newValue: string) =>\n      `getDigest:${packageName}:${newValue ?? ''}`,\n  })\n  override async getDigest(\n    { packageName: serializedAmiFilter }: GetReleasesConfig,\n    newValue?: string\n  ): Promise<string | null> {\n    const images = await this.getSortedAwsMachineImages(serializedAmiFilter);\n    if (images.length < 1) {\n      return null;\n    }\n\n    if (newValue) {\n      const newValueMatchingImages = images.filter(\n        (image) => image.ImageId === newValue\n      );\n      if (newValueMatchingImages.length === 1) {\n        return (\n          newValueMatchingImages[0].Name ?? /* istanbul ignore next */ null\n        );\n      }\n      return null;\n    }\n\n    const res = await this.getReleases({ packageName: serializedAmiFilter });\n    return res?.releases?.[0]?.newDigest ?? /* istanbul ignore next */ null;\n  }\n\n  @cache({\n    namespace: `datasource-${AwsMachineImageDataSource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => `getReleases:${packageName}`,\n  })\n  async getReleases({\n    packageName: serializedAmiFilter,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const images = await this.getSortedAwsMachineImages(serializedAmiFilter);\n    const latestImage = images[images.length - 1];\n    if (!latestImage?.ImageId) {\n      return null;\n    }\n    return {\n      releases: [\n        {\n          version: latestImage.ImageId,\n          releaseTimestamp: latestImage.CreationDate,\n          isDeprecated:\n            Date.parse(latestImage.DeprecationTime ?? this.now.toString()) <\n            this.now,\n          newDigest: latestImage.Name,\n        },\n      ],\n    };\n  }\n}\n"]}