{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/pypi/index.ts"],"names":[],"mappings":"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","sourcesContent":["import url from 'url';\nimport changelogFilenameRegex from 'changelog-filename-regex';\nimport { logger } from '../../../logger';\nimport { parse } from '../../../util/html';\nimport { regEx } from '../../../util/regex';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport * as pep440 from '../../versioning/pep440';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { isGitHubRepo } from './common';\nimport type { PypiJSON, PypiJSONRelease, Releases } from './types';\n\nexport class PypiDatasource extends Datasource {\n  static readonly id = 'pypi';\n\n  constructor() {\n    super(PypiDatasource.id);\n  }\n\n  override readonly caching = true;\n\n  override readonly customRegistrySupport = true;\n\n  override readonly defaultRegistryUrls = [\n    process.env.PIP_INDEX_URL ?? 'https://pypi.org/pypi/',\n  ];\n\n  override readonly defaultVersioning = pep440.id;\n\n  override readonly registryStrategy = 'merge';\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    let dependency: ReleaseResult | null = null;\n    // TODO: null check (#7154)\n    const hostUrl = ensureTrailingSlash(\n      registryUrl!.replace('https://pypi.org/simple', 'https://pypi.org/pypi')\n    );\n    const normalizedLookupName = PypiDatasource.normalizeName(packageName);\n\n    // not all simple indexes use this identifier, but most do\n    if (hostUrl.endsWith('/simple/') || hostUrl.endsWith('/+simple/')) {\n      logger.trace(\n        { packageName, hostUrl },\n        'Looking up pypi simple dependency'\n      );\n      dependency = await this.getSimpleDependency(\n        normalizedLookupName,\n        hostUrl\n      );\n    } else {\n      logger.trace({ packageName, hostUrl }, 'Looking up pypi api dependency');\n      try {\n        // we need to resolve early here so we can catch any 404s and fallback to a simple lookup\n        dependency = await this.getDependency(normalizedLookupName, hostUrl);\n      } catch (err) {\n        if (err.statusCode !== 404) {\n          throw err;\n        }\n\n        // error contacting json-style api -- attempt to fallback to a simple-style api\n        logger.trace(\n          { packageName, hostUrl },\n          'Looking up pypi simple dependency via fallback'\n        );\n        dependency = await this.getSimpleDependency(\n          normalizedLookupName,\n          hostUrl\n        );\n      }\n    }\n    return dependency;\n  }\n\n  private static normalizeName(input: string): string {\n    return input.toLowerCase().replace(regEx(/_/g), '-');\n  }\n\n  private static normalizeNameForUrlLookup(input: string): string {\n    return input.toLowerCase().replace(regEx(/(_|\\.|-)+/g), '-');\n  }\n\n  private async getDependency(\n    packageName: string,\n    hostUrl: string\n  ): Promise<ReleaseResult | null> {\n    const lookupUrl = url.resolve(\n      hostUrl,\n      `${PypiDatasource.normalizeNameForUrlLookup(packageName)}/json`\n    );\n    const dependency: ReleaseResult = { releases: [] };\n    logger.trace({ lookupUrl }, 'Pypi api got lookup');\n    const rep = await this.http.getJson<PypiJSON>(lookupUrl);\n    const dep = rep?.body;\n    if (!dep) {\n      logger.trace({ dependency: packageName }, 'pip package not found');\n      return null;\n    }\n    if (rep.authorization) {\n      dependency.isPrivate = true;\n    }\n    logger.trace({ lookupUrl }, 'Got pypi api result');\n\n    if (dep.info?.home_page) {\n      dependency.homepage = dep.info.home_page;\n      if (isGitHubRepo(dep.info.home_page)) {\n        dependency.sourceUrl = dep.info.home_page.replace(\n          'http://',\n          'https://'\n        );\n      }\n    }\n\n    if (dep.info?.project_urls) {\n      for (const [name, projectUrl] of Object.entries(dep.info.project_urls)) {\n        const lower = name.toLowerCase();\n\n        if (\n          !dependency.sourceUrl &&\n          (lower.startsWith('repo') ||\n            lower === 'code' ||\n            lower === 'source' ||\n            isGitHubRepo(projectUrl))\n        ) {\n          dependency.sourceUrl = projectUrl;\n        }\n\n        if (\n          !dependency.changelogUrl &&\n          ([\n            'changelog',\n            'change log',\n            'changes',\n            'release notes',\n            'news',\n            \"what's new\",\n          ].includes(lower) ||\n            changelogFilenameRegex.exec(lower))\n        ) {\n          // from https://github.com/pypa/warehouse/blob/418c7511dc367fb410c71be139545d0134ccb0df/warehouse/templates/packaging/detail.html#L24\n          dependency.changelogUrl = projectUrl;\n        }\n      }\n    }\n\n    if (dep.releases) {\n      const versions = Object.keys(dep.releases);\n      dependency.releases = versions.map((version) => {\n        const releases = dep.releases?.[version] ?? [];\n        const { upload_time: releaseTimestamp } = releases[0] || {};\n        const isDeprecated = releases.some(({ yanked }) => yanked);\n        const result: Release = {\n          version,\n          releaseTimestamp,\n        };\n        if (isDeprecated) {\n          result.isDeprecated = isDeprecated;\n        }\n        // There may be multiple releases with different requires_python, so we return all in an array\n        result.constraints = {\n          // TODO: string[] isn't allowed here\n          python: releases.map(({ requires_python }) => requires_python) as any,\n        };\n        return result;\n      });\n    }\n    return dependency;\n  }\n\n  private static extractVersionFromLinkText(\n    text: string,\n    packageName: string\n  ): string | null {\n    // source packages\n    const srcText = PypiDatasource.normalizeName(text);\n    const srcPrefix = `${packageName}-`;\n    const srcSuffix = '.tar.gz';\n    if (srcText.startsWith(srcPrefix) && srcText.endsWith(srcSuffix)) {\n      return srcText.replace(srcPrefix, '').replace(regEx(/\\.tar\\.gz$/), '');\n    }\n\n    // pep-0427 wheel packages\n    //  {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl.\n    // Also match the current wheel spec\n    // https://packaging.python.org/en/latest/specifications/binary-distribution-format/#escaping-and-unicode\n    // where any of -_. characters in {distribution} are replaced with _\n    const wheelText = text.toLowerCase();\n    const wheelPrefixWithPeriod =\n      packageName.replace(regEx(/[^\\w\\d.]+/g), '_') + '-';\n    const wheelPrefixWithoutPeriod =\n      packageName.replace(regEx(/[^\\w\\d]+/g), '_') + '-';\n    const wheelSuffix = '.whl';\n    if (\n      (wheelText.startsWith(wheelPrefixWithPeriod) ||\n        wheelText.startsWith(wheelPrefixWithoutPeriod)) &&\n      wheelText.endsWith(wheelSuffix) &&\n      wheelText.split('-').length > 2\n    ) {\n      return wheelText.split('-')[1];\n    }\n\n    return null;\n  }\n\n  private static cleanSimpleHtml(html: string): string {\n    return (\n      html\n        .replace(regEx(/<\\/?pre>/), '')\n        // Certain simple repositories like artifactory don't escape > and <\n        .replace(\n          regEx(/data-requires-python=\"([^\"]*?)>([^\"]*?)\"/g),\n          'data-requires-python=\"$1&gt;$2\"'\n        )\n        .replace(\n          regEx(/data-requires-python=\"([^\"]*?)<([^\"]*?)\"/g),\n          'data-requires-python=\"$1&lt;$2\"'\n        )\n    );\n  }\n\n  private async getSimpleDependency(\n    packageName: string,\n    hostUrl: string\n  ): Promise<ReleaseResult | null> {\n    const lookupUrl = url.resolve(\n      hostUrl,\n      ensureTrailingSlash(PypiDatasource.normalizeNameForUrlLookup(packageName))\n    );\n    const dependency: ReleaseResult = { releases: [] };\n    const response = await this.http.get(lookupUrl);\n    const dep = response?.body;\n    if (!dep) {\n      logger.trace({ dependency: packageName }, 'pip package not found');\n      return null;\n    }\n    if (response.authorization) {\n      dependency.isPrivate = true;\n    }\n    const root = parse(PypiDatasource.cleanSimpleHtml(dep));\n    const links = root.querySelectorAll('a');\n    const releases: Releases = {};\n    for (const link of Array.from(links)) {\n      const version = PypiDatasource.extractVersionFromLinkText(\n        link.text,\n        packageName\n      );\n      if (version) {\n        const release: PypiJSONRelease = {\n          yanked: link.hasAttribute('data-yanked'),\n        };\n        const requiresPython = link.getAttribute('data-requires-python');\n        if (requiresPython) {\n          release.requires_python = requiresPython;\n        }\n        if (!releases[version]) {\n          releases[version] = [];\n        }\n        releases[version].push(release);\n      }\n    }\n    const versions = Object.keys(releases);\n    dependency.releases = versions.map((version) => {\n      const versionReleases = releases[version] ?? [];\n      const isDeprecated = versionReleases.some(({ yanked }) => yanked);\n      const result: Release = { version };\n      if (isDeprecated) {\n        result.isDeprecated = isDeprecated;\n      }\n      // There may be multiple releases with different requires_python, so we return all in an array\n      result.constraints = {\n        // TODO: string[] isn't allowed here\n        python: versionReleases.map(\n          ({ requires_python }) => requires_python\n        ) as any,\n      };\n      return result;\n    });\n    return dependency;\n  }\n}\n"]}