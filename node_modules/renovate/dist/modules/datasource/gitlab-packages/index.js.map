{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/gitlab-packages/index.ts"],"names":[],"mappings":";;;;AAAA,qEAA8D;AAC9D,sDAAuD;AACvD,2CAAiD;AACjD,8CAA2C;AAE3C,qCAAsC;AAGtC,oEAAoE;AAEpE,MAAa,wBAAyB,SAAQ,uBAAU;IAWtD;QACE,KAAK,CAAC,mBAAU,CAAC,CAAC;QAPX,YAAO,GAAG,IAAI,CAAC;QAEf,0BAAqB,GAAG,IAAI,CAAC;QAE7B,wBAAmB,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAIpD,IAAI,CAAC,IAAI,GAAG,IAAI,mBAAU,CAAC,mBAAU,CAAC,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,sBAAsB,CAC3B,WAAmB,EACnB,WAAmB,EACnB,WAAmB;QAEnB,MAAM,kBAAkB,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAC3D,MAAM,kBAAkB,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAE3D,OAAO,IAAA,kBAAY,EACjB,WAAW,EACX,iBAAiB,EACjB,kBAAkB,EAClB,yBAAyB,kBAAkB,eAAe,CAC3D,CAAC;IACJ,CAAC;IASD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,qBAAqB;QACrB,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAE7D,MAAM,MAAM,GAAG,wBAAwB,CAAC,sBAAsB,CAC5D,WAAW,EACX,WAAW,EACX,WAAW,CACZ,CAAC;QAEF,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,IAAI,QAAyB,CAAC;QAC9B,IAAI;YACF,QAAQ,GAAG,CACT,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAkB,MAAM,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CACrE,CAAC,IAAI,CAAC;YAEP,MAAM,CAAC,QAAQ,GAAG,QAAQ;gBACxB,sHAAsH;gBACtH,4FAA4F;iBAC3F,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC;iBACrC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;gBACjC,OAAO;gBACP,gBAAgB,EAAE,UAAU;aAC7B,CAAC,CAAC,CAAC;SACP;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,OAAO,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IACjD,CAAC;;AA9Ee,2BAAE,GAAG,mBAAU,CAAC;AAsChC;IAPC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAU,EAAE;QACrC,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE;QACvD,sBAAsB;QACtB,4EAA4E;QAC5E,GAAG,WAAW,IAAI,WAAW,EAAE;KAClC,CAAC;2DAyCD;AA/EH,4DAgFC","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { GitlabHttp } from '../../../util/http/gitlab';\nimport { joinUrlParts } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { datasource } from './common';\nimport type { GitlabPackage } from './types';\n\n// Gitlab Packages API: https://docs.gitlab.com/ee/api/packages.html\n\nexport class GitlabPackagesDatasource extends Datasource {\n  static readonly id = datasource;\n\n  protected override http: GitlabHttp;\n\n  override caching = true;\n\n  override customRegistrySupport = true;\n\n  override defaultRegistryUrls = ['https://gitlab.com'];\n\n  constructor() {\n    super(datasource);\n    this.http = new GitlabHttp(datasource);\n  }\n\n  static getGitlabPackageApiUrl(\n    registryUrl: string,\n    projectName: string,\n    packageName: string\n  ): string {\n    const projectNameEncoded = encodeURIComponent(projectName);\n    const packageNameEncoded = encodeURIComponent(packageName);\n\n    return joinUrlParts(\n      registryUrl,\n      `api/v4/projects`,\n      projectNameEncoded,\n      `packages?package_name=${packageNameEncoded}&per_page=100`\n    );\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#7154)\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `${registryUrl}-${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n\n    const [projectPart, packagePart] = packageName.split(':', 2);\n\n    const apiUrl = GitlabPackagesDatasource.getGitlabPackageApiUrl(\n      registryUrl,\n      projectPart,\n      packagePart\n    );\n\n    const result: ReleaseResult = {\n      releases: [],\n    };\n\n    let response: GitlabPackage[];\n    try {\n      response = (\n        await this.http.getJson<GitlabPackage[]>(apiUrl, { paginate: true })\n      ).body;\n\n      result.releases = response\n        // Setting the package_name option when calling the GitLab API isn't enough to filter information about other packages\n        // because this option is only implemented on GitLab > 12.9 and it only does a fuzzy search.\n        .filter((r) => r.name === packagePart)\n        .map(({ version, created_at }) => ({\n          version,\n          releaseTimestamp: created_at,\n        }));\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases?.length ? result : null;\n  }\n}\n"]}