{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/nuget/index.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AACzC,gFAA0D;AAC1D,8CAA2C;AAE3C,qCAA4C;AAC5C,iDAA2B;AAC3B,iDAA2B;AAE3B,uEAAuE;AAC1D,QAAA,mBAAmB,GAAG,CAAC,qCAAqC,CAAC,CAAC;AAE3E,MAAa,eAAgB,SAAQ,uBAAU;IAS7C;QACE,KAAK,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAPV,wBAAmB,GAAG,2BAAmB,CAAC;QAE1C,sBAAiB,GAAG,eAAe,CAAC,EAAE,CAAC;QAEvC,qBAAgB,GAAG,OAAO,CAAC;IAI7C,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,eAAM,CAAC,KAAK,CAAC,qBAAqB,WAAW,GAAG,CAAC,CAAC;QAClD,qBAAqB;QACrB,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,IAAA,yBAAgB,EAAC,WAAW,CAAC,CAAC;QACnE,IAAI,eAAe,KAAK,CAAC,EAAE;YACzB,OAAO,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;SACxD;QACD,IAAI,eAAe,KAAK,CAAC,EAAE;YACzB,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC7D,IAAI,QAAQ,EAAE;gBACZ,OAAO,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;aAClE;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;AAjCH,0CAkCC;AAjCiB,kBAAE,GAAG,OAAO,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport * as nugetVersioning from '../../versioning/nuget';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { parseRegistryUrl } from './common';\nimport * as v2 from './v2';\nimport * as v3 from './v3';\n\n// https://api.nuget.org/v3/index.json is a default official nuget feed\nexport const defaultRegistryUrls = ['https://api.nuget.org/v3/index.json'];\n\nexport class NugetDatasource extends Datasource {\n  static readonly id = 'nuget';\n\n  override readonly defaultRegistryUrls = defaultRegistryUrls;\n\n  override readonly defaultVersioning = nugetVersioning.id;\n\n  override readonly registryStrategy = 'merge';\n\n  constructor() {\n    super(NugetDatasource.id);\n  }\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    logger.trace(`nuget.getReleases(${packageName})`);\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n    const { feedUrl, protocolVersion } = parseRegistryUrl(registryUrl);\n    if (protocolVersion === 2) {\n      return v2.getReleases(this.http, feedUrl, packageName);\n    }\n    if (protocolVersion === 3) {\n      const queryUrl = await v3.getResourceUrl(this.http, feedUrl);\n      if (queryUrl) {\n        return v3.getReleases(this.http, feedUrl, queryUrl, packageName);\n      }\n    }\n    return null;\n  }\n}\n"]}