{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/node/index.ts"],"names":[],"mappings":";;;;AAAA,qEAA8D;AAC9D,2CAAiD;AACjD,gDAAyD;AACzD,8CAA2C;AAE3C,qCAA0D;AAG1D,MAAa,cAAe,SAAQ,uBAAU;IAG5C;QACE,KAAK,CAAC,mBAAU,CAAC,CAAC;QAGF,0BAAqB,GAAG,KAAK,CAAC;QAE9B,wBAAmB,GAAG,CAAC,2BAAkB,CAAC,CAAC;QAE3C,sBAAiB,GAAG,SAAU,CAAC;QAE/B,YAAO,GAAG,IAAI,CAAC;IARjC,CAAC;IAgBD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,GACO;QAClB,qBAAqB;QACrB,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,oBAAoB;YAC9B,SAAS,EAAE,gCAAgC;YAC3C,WAAW;YACX,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,IAAI;YACF,MAAM,IAAI,GAAG,CACX,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CACrB,IAAA,kBAAY,EAAC,WAAW,EAAE,YAAY,CAAC,CACxC,CACF,CAAC,IAAI,CAAC;YACP,MAAM,CAAC,QAAQ,CAAC,IAAI,CAClB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;gBACvC,OAAO;gBACP,gBAAgB,EAAE,IAAI;gBACtB,QAAQ,EAAE,GAAG,KAAK,KAAK;aACxB,CAAC,CAAC,CACJ,CAAC;SACH;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;;AAnDe,iBAAE,GAAG,mBAAU,CAAC;AAoBhC;IANC,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAU,EAAE;QACrC,sBAAsB;QACtB,4EAA4E;QAC5E,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,GAAG,WAAW,EAAE;KAC9D,CAAC;iDAgCD;AApDH,wCAqDC","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { joinUrlParts } from '../../../util/url';\nimport { id as versioning } from '../../versioning/node';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { datasource, defaultRegistryUrl } from './common';\nimport type { NodeRelease } from './types';\n\nexport class NodeDatasource extends Datasource {\n  static readonly id = datasource;\n\n  constructor() {\n    super(datasource);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly defaultVersioning = versioning;\n\n  override readonly caching = true;\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    key: ({ registryUrl }: GetReleasesConfig) => `${registryUrl}`,\n  })\n  async getReleases({\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n    const result: ReleaseResult = {\n      homepage: 'https://nodejs.org',\n      sourceUrl: 'https://github.com/nodejs/node',\n      registryUrl,\n      releases: [],\n    };\n    try {\n      const resp = (\n        await this.http.getJson<NodeRelease[]>(\n          joinUrlParts(registryUrl, 'index.json')\n        )\n      ).body;\n      result.releases.push(\n        ...resp.map(({ version, date, lts }) => ({\n          version,\n          releaseTimestamp: date,\n          isStable: lts !== false,\n        }))\n      );\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}