{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/flutter-version/index.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAC5C,8CAA2C;AAI9B,QAAA,kBAAkB,GAAG,IAAA,aAAK,EAAC,iBAAiB,CAAC,CAAC;AAE3D,MAAa,wBAAyB,SAAQ,uBAAU;IAGtD;QACE,KAAK,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;QAGnB,0BAAqB,GAAG,KAAK,CAAC;QAE9B,wBAAmB,GAAG,CAAC,gCAAgC,CAAC,CAAC;QAEzD,YAAO,GAAG,IAAI,CAAC;IANjC,CAAC;IAQD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,GACO;QAClB,qBAAqB;QACrB,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,qBAAqB;YAC/B,SAAS,EAAE,oCAAoC;YAC/C,WAAW;YACX,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,IAAI;YACF,MAAM,IAAI,GAAG,CACX,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CACrB,GAAG,WAAW,qDAAqD,CACpE,CACF,CAAC,IAAI,CAAC;YACP,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ;gBAC7B,4EAA4E;gBAC5E,qDAAqD;iBACpD,MAAM,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC/B,IAAI,0BAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBACpC,OAAO,OAAO,KAAK,QAAQ,CAAC;iBAC7B;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,CAAC;iBACD,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;gBAC5C,OAAO;gBACP,gBAAgB,EAAE,YAAY;gBAC9B,QAAQ,EAAE,OAAO,KAAK,QAAQ;aAC/B,CAAC,CAAC,CAAC;SACP;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/B;QAED,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;;AAnDH,4DAoDC;AAnDiB,2BAAE,GAAG,iBAAiB,CAAC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { FlutterResponse } from './types';\n\nexport const stableVersionRegex = regEx(/^\\d+\\.\\d+\\.\\d+$/);\n\nexport class FlutterVersionDatasource extends Datasource {\n  static readonly id = 'flutter-version';\n\n  constructor() {\n    super(FlutterVersionDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://storage.googleapis.com'];\n\n  override readonly caching = true;\n\n  async getReleases({\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n    const result: ReleaseResult = {\n      homepage: 'https://flutter.dev',\n      sourceUrl: 'https://github.com/flutter/flutter',\n      registryUrl,\n      releases: [],\n    };\n    try {\n      const resp = (\n        await this.http.getJson<FlutterResponse>(\n          `${registryUrl}/flutter_infra_release/releases/releases_linux.json`\n        )\n      ).body;\n      result.releases = resp.releases\n        // The API response contains a stable version being released as a non-stable\n        // release. And so we filter out these releases here.\n        .filter(({ version, channel }) => {\n          if (stableVersionRegex.test(version)) {\n            return channel === 'stable';\n          }\n          return true;\n        })\n        .map(({ version, release_date, channel }) => ({\n          version,\n          releaseTimestamp: release_date,\n          isStable: channel === 'stable',\n        }));\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}