{"version":3,"file":"releases-direct.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/go/releases-direct.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { regEx } from '../../../util/regex';\nimport { BitBucketTagsDatasource } from '../bitbucket-tags';\nimport { Datasource } from '../datasource';\nimport { GithubTagsDatasource } from '../github-tags';\nimport { GitlabTagsDatasource } from '../gitlab-tags';\nimport type { DatasourceApi, GetReleasesConfig, ReleaseResult } from '../types';\nimport { BaseGoDatasource } from './base';\nimport { getSourceUrl } from './common';\n\nexport class GoDirectDatasource extends Datasource {\n  static readonly id = 'go-direct';\n\n  github: GithubTagsDatasource;\n  gitlab: DatasourceApi;\n  bitbucket: DatasourceApi;\n\n  constructor() {\n    super(GoDirectDatasource.id);\n    this.github = new GithubTagsDatasource();\n    this.gitlab = new GitlabTagsDatasource();\n    this.bitbucket = new BitBucketTagsDatasource();\n  }\n\n  /**\n   * go.getReleases\n   *\n   * This datasource resolves a go module URL into its source repository\n   *  and then fetch it if it is on GitHub.\n   *\n   * This function will:\n   *  - Determine the source URL for the module\n   *  - Call the respective getReleases in github/gitlab to retrieve the tags\n   *  - Filter module tags according to the module path\n   */\n  @cache({\n    namespace: `datasource-${GoDirectDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => packageName,\n  })\n  async getReleases(config: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const { packageName } = config;\n\n    let res: ReleaseResult | null = null;\n\n    logger.trace(`go.getReleases(${packageName})`);\n    const source = await BaseGoDatasource.getDatasource(packageName);\n\n    if (!source) {\n      logger.info(\n        { packageName },\n        'Unsupported go host - cannot look up versions'\n      );\n      return null;\n    }\n\n    switch (source.datasource) {\n      case GithubTagsDatasource.id: {\n        res = await this.github.getReleases(source);\n        break;\n      }\n      case GitlabTagsDatasource.id: {\n        res = await this.gitlab.getReleases(source);\n        break;\n      }\n      case BitBucketTagsDatasource.id: {\n        res = await this.bitbucket.getReleases(source);\n        break;\n      }\n      /* istanbul ignore next: can never happen, makes lint happy */\n      default: {\n        return null;\n      }\n    }\n\n    // istanbul ignore if\n    if (!res) {\n      return null;\n    }\n\n    const sourceUrl = getSourceUrl(source);\n\n    /**\n     * github.com/org/mod/submodule should be tagged as submodule/va.b.c\n     * and that tag should be used instead of just va.b.c, although for compatibility\n     * the old behaviour stays the same.\n     */\n    const nameParts = packageName.replace(regEx(/\\/v\\d+$/), '').split('/');\n    logger.trace({ nameParts, releases: res.releases }, 'go.getReleases');\n\n    // If it has more than 3 parts it's a submodule or subgroup (gitlab only)\n    if (nameParts.length > 3) {\n      const prefix = nameParts.slice(3, nameParts.length).join('/');\n      logger.trace(`go.getReleases.prefix:${prefix}`);\n\n      // Filter the releases so that we only get the ones that are for this submodule\n      // Also trim the submodule prefix from the version number\n      const submodReleases = res.releases\n        .filter((release) => release.version?.startsWith(prefix))\n        .map((release) => {\n          const r2 = release;\n          r2.version = r2.version.replace(`${prefix}/`, '');\n          return r2;\n        });\n      logger.trace({ submodReleases }, 'go.getReleases');\n\n      // If not from gitlab -> no subgroups -> must be submodule\n      // If from gitlab and directory one level above has tags -> has to be submodule, since groups can't have tags\n      // If not, it's simply a repo in a subfolder, and the normal tags are used.\n      if (\n        !(source.datasource === GitlabTagsDatasource.id) ||\n        (source.datasource === GitlabTagsDatasource.id && submodReleases.length)\n      ) {\n        return {\n          sourceUrl,\n          releases: submodReleases,\n        };\n      }\n    }\n\n    if (res.releases) {\n      res.releases = res.releases.filter((release) =>\n        release.version?.startsWith('v')\n      );\n    }\n\n    return { ...res, sourceUrl };\n  }\n}\n"]}