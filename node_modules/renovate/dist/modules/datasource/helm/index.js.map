{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/helm/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport type { HttpResponse } from '../../../util/http/types';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport * as helmVersioning from '../../versioning/helm';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { findSourceUrl } from './common';\nimport type { HelmRepository, HelmRepositoryData } from './types';\n\nexport class HelmDatasource extends Datasource {\n  static readonly id = 'helm';\n\n  constructor() {\n    super(HelmDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = ['https://charts.helm.sh/stable'];\n\n  override readonly defaultConfig = {\n    commitMessageTopic: 'Helm release {{depName}}',\n    group: {\n      commitMessageTopic: '{{{groupName}}} Helm releases',\n    },\n  };\n\n  override readonly defaultVersioning = helmVersioning.id;\n\n  @cache({\n    namespace: `datasource-${HelmDatasource.id}`,\n    key: (helmRepository: string) => helmRepository,\n  })\n  async getRepositoryData(\n    helmRepository: string\n  ): Promise<HelmRepositoryData | null> {\n    let res: HttpResponse<string>;\n    try {\n      res = await this.http.get('index.yaml', {\n        baseUrl: ensureTrailingSlash(helmRepository),\n      });\n      if (!res || !res.body) {\n        logger.warn(\n          { helmRepository },\n          `Received invalid response from helm repository`\n        );\n        return null;\n      }\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n    try {\n      const doc = load(res.body, {\n        json: true,\n      }) as HelmRepository;\n      if (!is.plainObject<HelmRepository>(doc)) {\n        logger.warn(\n          { helmRepository },\n          `Failed to parse index.yaml from helm repository`\n        );\n        return null;\n      }\n      const result: HelmRepositoryData = {};\n      for (const [name, releases] of Object.entries(doc.entries)) {\n        const latestRelease = releases[0];\n        const { sourceUrl, sourceDirectory } = findSourceUrl(latestRelease);\n        result[name] = {\n          homepage: latestRelease.home,\n          sourceUrl,\n          sourceDirectory,\n          releases: releases.map((release) => ({\n            version: release.version,\n            releaseTimestamp: release.created ?? null,\n          })),\n        };\n      }\n\n      return result;\n    } catch (err) {\n      logger.debug(\n        { helmRepository, err },\n        `Failed to parse index.yaml from helm repository`\n      );\n      return null;\n    }\n  }\n\n  async getReleases({\n    packageName,\n    registryUrl: helmRepository,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!helmRepository) {\n      return null;\n    }\n\n    const repositoryData = await this.getRepositoryData(helmRepository);\n    if (!repositoryData) {\n      logger.debug(`Missing repo data from ${helmRepository}`);\n      return null;\n    }\n    const releases = repositoryData[packageName];\n    if (!releases) {\n      logger.debug(\n        { dependency: packageName },\n        `Entry ${packageName} doesn't exist in index.yaml from ${helmRepository}`\n      );\n      return null;\n    }\n    return releases;\n  }\n}\n"]}