{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/helm/common.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAG5C,MAAM,SAAS,GAAG,IAAA,aAAK,EAAC,2BAA2B,CAAC,CAAC;AACrD,MAAM,SAAS,GAAG,IAAA,aAAK,EACrB,0FAA0F,CAC3F,CAAC;AACF,MAAM,aAAa,GAAG,IAAA,aAAK,EACzB,oDAAoD,CACrD,CAAC;AAEF,SAAgB,aAAa,CAAC,OAAoB;IAChD,2BAA2B;IAC3B,MAAM,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,IAAI,YAAY,EAAE;QAChB,OAAO,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;KACvC;IAED,IAAI,OAAO,CAAC,IAAI,EAAE;QAChB,MAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpD,IAAI,cAAc,EAAE,MAAM,IAAI,SAAS,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE;YACzE,OAAO;gBACL,SAAS,EAAE,cAAc,CAAC,MAAM,CAAC,GAAG;gBACpC,eAAe,EAAE,cAAc,CAAC,MAAM,CAAC,IAAI;aAC5C,CAAC;SACH;KACF;IAED,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE;QAC5B,OAAO,EAAE,CAAC;KACX;IAED,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE;QACjC,MAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,cAAc,EAAE,MAAM,IAAI,SAAS,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE;YACzE,OAAO;gBACL,SAAS,EAAE,cAAc,CAAC,MAAM,CAAC,GAAG;gBACpC,eAAe,EAAE,cAAc,CAAC,MAAM,CAAC,IAAI;aAC5C,CAAC;SACH;KACF;IAED,WAAW;IACX,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;AAC3C,CAAC;AAjCD,sCAiCC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport type { HelmRelease, RepoSource } from './types';\n\nconst chartRepo = regEx(/charts?|helm|helm-charts/i);\nconst githubUrl = regEx(\n  /^(?<url>https:\\/\\/github\\.com\\/[^/]+\\/(?<repo>[^/]+))(:?\\/|\\/tree\\/[^/]+\\/(?<path>.+))?$/\n);\nconst githubRelease = regEx(\n  /^(https:\\/\\/github\\.com\\/[^/]+\\/[^/]+)\\/releases\\//\n);\n\nexport function findSourceUrl(release: HelmRelease): RepoSource {\n  // it's a github release :)\n  const releaseMatch = githubRelease.exec(release.urls[0]);\n  if (releaseMatch) {\n    return { sourceUrl: releaseMatch[1] };\n  }\n\n  if (release.home) {\n    const githubUrlMatch = githubUrl.exec(release.home);\n    if (githubUrlMatch?.groups && chartRepo.test(githubUrlMatch?.groups.repo)) {\n      return {\n        sourceUrl: githubUrlMatch.groups.url,\n        sourceDirectory: githubUrlMatch.groups.path,\n      };\n    }\n  }\n\n  if (!release.sources?.length) {\n    return {};\n  }\n\n  for (const url of release.sources) {\n    const githubUrlMatch = githubUrl.exec(url);\n    if (githubUrlMatch?.groups && chartRepo.test(githubUrlMatch?.groups.repo)) {\n      return {\n        sourceUrl: githubUrlMatch.groups.url,\n        sourceDirectory: githubUrlMatch.groups.path,\n      };\n    }\n  }\n\n  // fallback\n  return { sourceUrl: release.sources[0] };\n}\n"]}