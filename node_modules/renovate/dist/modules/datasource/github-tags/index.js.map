{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/github-tags/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { GithubReleasesDatasource } from '../github-releases';\nimport { getApiBaseUrl, getSourceUrl } from '../github-releases/common';\nimport type {\n  DigestConfig,\n  GetReleasesConfig,\n  Release,\n  ReleaseResult,\n} from '../types';\nimport { CacheableGithubTags } from './cache';\n\nexport class GithubTagsDatasource extends GithubReleasesDatasource {\n  static override readonly id = 'github-tags';\n\n  private tagsCache: CacheableGithubTags;\n\n  constructor() {\n    super(GithubTagsDatasource.id);\n    this.tagsCache = new CacheableGithubTags(this.http);\n  }\n\n  async getTagCommit(\n    registryUrl: string | undefined,\n    packageName: string,\n    tag: string\n  ): Promise<string | null> {\n    let result: string | null = null;\n    const tagReleases = await this.tagsCache.getItems({\n      packageName,\n      registryUrl,\n    });\n    const tagRelease = tagReleases.find(({ version }) => version === tag);\n    if (tagRelease) {\n      result = tagRelease.hash;\n    }\n    return result;\n  }\n\n  @cache({\n    ttlMinutes: 10,\n    namespace: `datasource-${GithubTagsDatasource.id}`,\n    key: (registryUrl: string, githubRepo: string) =>\n      `${registryUrl}:${githubRepo}:commit`,\n  })\n  async getCommit(\n    registryUrl: string | undefined,\n    githubRepo: string\n  ): Promise<string | null> {\n    const apiBaseUrl = getApiBaseUrl(registryUrl);\n    let digest: string | null = null;\n    try {\n      const url = `${apiBaseUrl}repos/${githubRepo}/commits?per_page=1`;\n      const res = await this.http.getJson<{ sha: string }[]>(url);\n      digest = res.body[0].sha;\n    } catch (err) {\n      logger.debug(\n        { githubRepo: githubRepo, err, registryUrl },\n        'Error getting latest commit from GitHub repo'\n      );\n    }\n    return digest;\n  }\n\n  /**\n   * github.getDigest\n   *\n   * The `newValue` supplied here should be a valid tag for the docker image.\n   *\n   * Returns the latest commit hash for the repository.\n   */\n  override getDigest(\n    { packageName: repo, registryUrl }: Partial<DigestConfig>,\n    newValue?: string\n  ): Promise<string | null> {\n    return newValue\n      ? this.getTagCommit(registryUrl, repo!, newValue)\n      : this.getCommit(registryUrl, repo!);\n  }\n\n  override async getReleases(\n    config: GetReleasesConfig\n  ): Promise<ReleaseResult> {\n    const tagReleases = await this.tagsCache.getItems(config);\n\n    const tagsResult: ReleaseResult = {\n      sourceUrl: getSourceUrl(config.packageName, config.registryUrl),\n      releases: tagReleases.map((item) => ({ ...item, gitRef: item.version })),\n    };\n\n    try {\n      // Fetch additional data from releases endpoint when possible\n      const releasesResult = await super.getReleases(config);\n      type PartialRelease = Omit<Release, 'version'>;\n\n      const releaseByVersion: Record<string, PartialRelease> = {};\n      releasesResult?.releases?.forEach((release) => {\n        const { version, ...value } = release;\n        releaseByVersion[version] = value;\n      });\n\n      const mergedReleases: Release[] = [];\n      tagsResult.releases.forEach((tag) => {\n        const release = releaseByVersion[tag.version];\n        mergedReleases.push({ ...release, ...tag });\n      });\n\n      tagsResult.releases = mergedReleases;\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug({ err }, `Error fetching additional info for GitHub tags`);\n    }\n\n    return tagsResult;\n  }\n}\n"]}