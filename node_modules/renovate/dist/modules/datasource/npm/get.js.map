{"version":3,"file":"get.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/npm/get.ts"],"names":[],"mappings":"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","sourcesContent":["import url from 'url';\nimport is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport * as packageCache from '../../../util/cache/package';\nimport type { Http } from '../../../util/http';\nimport { joinUrlParts } from '../../../util/url';\nimport { id } from './common';\nimport type { NpmDependency, NpmRelease, NpmResponse } from './types';\n\nlet memcache: Record<string, string> = {};\n\nexport function resetMemCache(): void {\n  logger.debug('resetMemCache()');\n  memcache = {};\n}\n\nexport function resetCache(): void {\n  resetMemCache();\n}\n\ninterface PackageSource {\n  sourceUrl?: string;\n  sourceDirectory?: string;\n}\n\nfunction getPackageSource(repository: any): PackageSource {\n  const res: PackageSource = {};\n  if (repository) {\n    if (is.nonEmptyString(repository)) {\n      res.sourceUrl = repository;\n    } else if (is.nonEmptyString(repository.url)) {\n      res.sourceUrl = repository.url;\n    }\n    if (is.nonEmptyString(repository.directory)) {\n      res.sourceDirectory = repository.directory;\n    }\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const sourceUrlCopy = `${res.sourceUrl}`;\n    const sourceUrlSplit: string[] = sourceUrlCopy.split('/');\n    if (sourceUrlSplit.length > 7 && sourceUrlSplit[2] === 'github.com') {\n      // Massage the repository URL for non-compliant strings for github (see issue #4610)\n      // Remove the non-compliant segments of path, so the URL looks like \"<scheme>://<domain>/<vendor>/<repo>\"\n      // and add directory to the repository\n      res.sourceUrl = sourceUrlSplit.slice(0, 5).join('/');\n      res.sourceDirectory ||= sourceUrlSplit\n        .slice(7, sourceUrlSplit.length)\n        .join('/');\n    }\n  }\n  return res;\n}\n\nexport async function getDependency(\n  http: Http,\n  registryUrl: string,\n  packageName: string\n): Promise<NpmDependency | null> {\n  logger.trace(`npm.getDependency(${packageName})`);\n\n  // This is our datastore cache and is cleared at the end of each repo, i.e. we never requery/revalidate during a \"run\"\n  if (memcache[packageName]) {\n    logger.trace('Returning cached result');\n    return JSON.parse(memcache[packageName]) as NpmDependency;\n  }\n\n  const packageUrl = joinUrlParts(registryUrl, packageName.replace('/', '%2F'));\n\n  // Now check the persistent cache\n  const cacheNamespace = 'datasource-npm';\n  const cachedResult = await packageCache.get<NpmDependency>(\n    cacheNamespace,\n    packageUrl\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const uri = url.parse(packageUrl);\n\n  try {\n    const raw = await http.getJson<NpmResponse>(packageUrl);\n    const res = raw.body;\n    if (!res.versions || !Object.keys(res.versions).length) {\n      // Registry returned a 200 OK but with no versions\n      logger.debug({ dependency: packageName }, 'No versions returned');\n      return null;\n    }\n\n    const latestVersion = res.versions[res['dist-tags']?.latest ?? ''];\n    res.repository ??= latestVersion?.repository;\n    res.homepage ??= latestVersion?.homepage;\n\n    const { sourceUrl, sourceDirectory } = getPackageSource(res.repository);\n\n    // Simplify response before caching and returning\n    const dep: NpmDependency = {\n      name: res.name,\n      homepage: res.homepage,\n      sourceUrl,\n      sourceDirectory,\n      versions: {},\n      releases: [],\n      'dist-tags': res['dist-tags'],\n      registryUrl,\n    };\n\n    if (latestVersion?.deprecated) {\n      dep.deprecationMessage = `On registry \\`${registryUrl}\\`, the \"latest\" version of dependency \\`${packageName}\\` has the following deprecation notice:\\n\\n\\`${latestVersion.deprecated}\\`\\n\\nMarking the latest version of an npm package as deprecated results in the entire package being considered deprecated, so contact the package author you think this is a mistake.`;\n      dep.deprecationSource = id;\n    }\n    dep.releases = Object.keys(res.versions).map((version) => {\n      const release: NpmRelease = {\n        version,\n        gitRef: res.versions?.[version].gitHead,\n        dependencies: res.versions?.[version].dependencies,\n        devDependencies: res.versions?.[version].devDependencies,\n      };\n      if (res.time?.[version]) {\n        release.releaseTimestamp = res.time[version];\n      }\n      if (res.versions?.[version].deprecated) {\n        release.isDeprecated = true;\n      }\n      const source = getPackageSource(res.versions?.[version].repository);\n      if (source.sourceUrl && source.sourceUrl !== dep.sourceUrl) {\n        release.sourceUrl = source.sourceUrl;\n      }\n      if (\n        source.sourceDirectory &&\n        source.sourceDirectory !== dep.sourceDirectory\n      ) {\n        release.sourceDirectory = source.sourceDirectory;\n      }\n      return release;\n    });\n    logger.trace({ dep }, 'dep');\n    // serialize first before saving\n    memcache[packageName] = JSON.stringify(dep);\n    const cacheMinutes = process.env.RENOVATE_CACHE_NPM_MINUTES\n      ? parseInt(process.env.RENOVATE_CACHE_NPM_MINUTES, 10)\n      : 15;\n    // TODO: use dynamic detection of public repos instead of a static list (#9587)\n    const whitelistedPublicScopes = [\n      '@graphql-codegen',\n      '@storybook',\n      '@types',\n      '@typescript-eslint',\n    ];\n    if (\n      !raw.authorization &&\n      (whitelistedPublicScopes.includes(packageName.split('/')[0]) ||\n        !packageName.startsWith('@'))\n    ) {\n      await packageCache.set(cacheNamespace, packageUrl, dep, cacheMinutes);\n    }\n    return dep;\n  } catch (err) {\n    if (err.statusCode === 401 || err.statusCode === 403) {\n      logger.debug(\n        {\n          packageUrl,\n          err,\n          statusCode: err.statusCode,\n          packageName,\n        },\n        `Dependency lookup failure: unauthorized`\n      );\n      return null;\n    }\n    if (err.statusCode === 402) {\n      logger.debug(\n        {\n          packageUrl,\n          err,\n          statusCode: err.statusCode,\n          packageName,\n        },\n        `Dependency lookup failure: payment required`\n      );\n      return null;\n    }\n    if (err.statusCode === 404 || err.code === 'ENOTFOUND') {\n      logger.debug(\n        { err, packageName },\n        `Dependency lookup failure: not found`\n      );\n      return null;\n    }\n    if (uri.host === 'registry.npmjs.org') {\n      // istanbul ignore if\n      if (err.name === 'ParseError' && err.body) {\n        err.body = 'err.body deleted by Renovate';\n      }\n      throw new ExternalHostError(err);\n    }\n    logger.debug({ err }, 'Unknown npm lookup error');\n    return null;\n  }\n}\n"]}