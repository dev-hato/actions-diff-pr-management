{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/modules/manager/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProgrammingLanguage } from '../../constants';\nimport type { RangeStrategy } from '../../types';\nimport managers from './api';\nimport type {\n  ExtractConfig,\n  GlobalManagerConfig,\n  ManagerApi,\n  PackageFile,\n  RangeConfig,\n  Result,\n} from './types';\nexport { hashMap } from './fingerprint.generated';\nconst managerList = Array.from(managers.keys());\n\nconst languageList = Object.values(ProgrammingLanguage);\n\nexport function get<T extends keyof ManagerApi>(\n  manager: string,\n  name: T\n): ManagerApi[T] | undefined {\n  return managers.get(manager)?.[name];\n}\nexport const getLanguageList = (): string[] => languageList;\nexport const getManagerList = (): string[] => managerList;\nexport const getManagers = (): Map<string, ManagerApi> => managers;\n\nexport async function detectAllGlobalConfig(): Promise<GlobalManagerConfig> {\n  let config: GlobalManagerConfig = {};\n  for (const managerName of managerList) {\n    const manager = managers.get(managerName)!;\n    if (manager.detectGlobalConfig) {\n      // This should use mergeChildConfig once more than one manager is supported, but introduces a cyclic dependency\n      config = { ...config, ...(await manager.detectGlobalConfig()) };\n    }\n  }\n  return config;\n}\n\nexport async function extractAllPackageFiles(\n  manager: string,\n  config: ExtractConfig,\n  files: string[]\n): Promise<PackageFile[] | null> {\n  if (!managers.has(manager)) {\n    return null;\n  }\n  const m = managers.get(manager)!;\n  if (m.extractAllPackageFiles) {\n    const res = await m.extractAllPackageFiles(config, files);\n    // istanbul ignore if\n    if (!res) {\n      return null;\n    }\n    return res;\n  }\n  return null;\n}\n\nexport function extractPackageFile(\n  manager: string,\n  content: string,\n  fileName: string,\n  config: ExtractConfig\n): Result<PackageFile | null> {\n  if (!managers.has(manager)) {\n    return null;\n  }\n  const m = managers.get(manager)!;\n  return m.extractPackageFile\n    ? m.extractPackageFile(content, fileName, config)\n    : null;\n}\n\nexport function getRangeStrategy(config: RangeConfig): RangeStrategy | null {\n  const { manager, rangeStrategy } = config;\n  if (!manager || !managers.has(manager)) {\n    return null;\n  }\n  const m = managers.get(manager)!;\n  if (m.getRangeStrategy) {\n    // Use manager's own function if it exists\n    const managerRangeStrategy = m.getRangeStrategy(config);\n    if (managerRangeStrategy === 'in-range-only') {\n      return 'update-lockfile';\n    }\n    return managerRangeStrategy;\n  }\n  if (rangeStrategy === 'auto') {\n    // default to 'replace' for auto\n    return 'replace';\n  }\n  if (rangeStrategy === 'in-range-only') {\n    return 'update-lockfile';\n  }\n\n  return config.rangeStrategy;\n}\n"]}