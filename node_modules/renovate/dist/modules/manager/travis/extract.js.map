{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/travis/extract.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,qCAA+B;AAC/B,4CAAyC;AACzC,8DAAoE;AAIpE,SAAgB,kBAAkB,CAAC,OAAe;IAChD,IAAI,GAAe,CAAC;IACpB,IAAI;QACF,GAAG,GAAG,IAAA,cAAI,EAAC,OAAO,EAAE;YAClB,IAAI,EAAE,IAAI;SACX,CAAe,CAAC;KAClB;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,mCAAmC,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;KACb;IACD,IAAI,IAAI,GAAwB,EAAE,CAAC;IACnC,IAAI,GAAG,IAAI,YAAE,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;QAChC,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YACxC,OAAO,EAAE,MAAM;YACf,UAAU,EAAE,kCAAoB,CAAC,EAAE;YACnC,WAAW,EAAE,aAAa;YAC1B,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE;SACtC,CAAC,CAAC,CAAC;KACL;IAED,2BAA2B;IAC3B,IAAI,cAA8C,CAAC;IACnD,IAAI,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE;QACtB,cAAc,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;KACnC;SAAM,IAAI,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE;QAC/B,cAAc,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;KACrC;IAED,IAAI,CAAC,YAAE,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;QAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;KACtC;IAED,KAAK,MAAM,IAAI,IAAI,cAAc,EAAE;QACjC,IAAI,IAAI,EAAE,OAAO,EAAE;YACjB,IAAI,YAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBAC1B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;oBACpC,IAAI,CAAC,IAAI,CAAC;wBACR,OAAO,EAAE,MAAM;wBACf,UAAU,EAAE,kCAAoB,CAAC,EAAE;wBACnC,WAAW,EAAE,aAAa;wBAC1B,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE;qBACtC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;iBAAM,IAAI,YAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBAClC,IAAI,CAAC,IAAI,CAAC;oBACR,OAAO,EAAE,MAAM;oBACf,UAAU,EAAE,kCAAoB,CAAC,EAAE;oBACnC,WAAW,EAAE,aAAa;oBAC1B,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;iBACtC,CAAC,CAAC;aACJ;SACF;KACF;IAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AA1DD,gDA0DC","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { TravisMatrixItem, TravisYaml } from './types';\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  let doc: TravisYaml;\n  try {\n    doc = load(content, {\n      json: true,\n    }) as TravisYaml;\n  } catch (err) {\n    logger.warn({ err, content }, 'Failed to parse .travis.yml file.');\n    return null;\n  }\n  let deps: PackageDependency[] = [];\n  if (doc && is.array(doc.node_js)) {\n    deps = doc.node_js.map((currentValue) => ({\n      depName: 'node',\n      datasource: GithubTagsDatasource.id,\n      packageName: 'nodejs/node',\n      currentValue: currentValue.toString(),\n    }));\n  }\n\n  // Handle the matrix syntax\n  let matrix_include: TravisMatrixItem[] | undefined;\n  if (doc?.jobs?.include) {\n    matrix_include = doc.jobs.include;\n  } else if (doc?.matrix?.include) {\n    matrix_include = doc.matrix.include;\n  }\n\n  if (!is.array(matrix_include)) {\n    return deps.length ? { deps } : null;\n  }\n\n  for (const item of matrix_include) {\n    if (item?.node_js) {\n      if (is.array(item.node_js)) {\n        item.node_js.forEach((currentValue) => {\n          deps.push({\n            depName: 'node',\n            datasource: GithubTagsDatasource.id,\n            packageName: 'nodejs/node',\n            currentValue: currentValue.toString(),\n          });\n        });\n      } else if (is.string(item.node_js)) {\n        deps.push({\n          depName: 'node',\n          datasource: GithubTagsDatasource.id,\n          packageName: 'nodejs/node',\n          currentValue: item.node_js.toString(),\n        });\n      }\n    }\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}