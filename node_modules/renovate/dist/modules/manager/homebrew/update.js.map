{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../lib/modules/manager/homebrew/update.ts"],"names":[],"mappings":";;;;AAAA,sBAAsB;AACtB,qEAAqE;AACrE,0DAA0B;AAC1B,4DAA4B;AAC5B,4CAAyC;AACzC,6CAA0C;AAE1C,uCAAyC;AACzC,iCAAuD;AAEvD,MAAM,IAAI,GAAG,IAAI,WAAI,CAAC,UAAU,CAAC,CAAC;AAElC,SAAS,UAAU,CACjB,GAAW,EACX,OAAe,EACf,MAAc,EACd,MAAc;IAEd,IAAI,CAAC,GAAG,GAAG,CAAC;IACZ,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC;IAClB,CAAC,GAAG,IAAA,WAAI,EAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,cAAO,EAAC,CAAC,CAAC,CAAC,CAAC;IACxC,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,EAAE;QAC9B,OAAO,IAAI,CAAC;KACb;IACD,CAAC,IAAI,CAAC,CAAC;IACP,MAAM,UAAU,GACd,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACzE,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAS,iBAAiB,CACxB,OAAe,EACf,MAAc,EACd,MAAc;IAEd,MAAM,SAAS,GAAG,eAAe,CAAC;IAClC,MAAM,YAAY,GAAG,IAAA,qBAAc,EAAC,OAAO,CAAC,CAAC;IAC7C,IAAI,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACvC,IAAI,IAAA,cAAO,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;QAC5B,CAAC,IAAI,CAAC,CAAC;KACR;IACD,MAAM,WAAW,GAAG,UAAU,CAAC,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAChE,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAS,SAAS,CAChB,OAAe,EACf,MAAc,EACd,MAAc;IAEd,MAAM,SAAS,GAAG,eAAe,CAAC;IAClC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,IAAA,cAAO,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;QACvB,CAAC,IAAI,CAAC,CAAC;KACR;IACD,IAAI,UAAU,GAAG,UAAU,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACxD,MAAM,WAAW,GAAG,iBAAiB,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/D,IAAI,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE;QAC/B,OAAO,IAAI,CAAC;KACb;IACD,OAAO,UAAU,IAAI,IAAA,qBAAc,EAAC,UAAU,CAAC,KAAK,WAAW,EAAE;QAC/D,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC;QAClB,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC5C,IAAI,IAAA,cAAO,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;YACvB,CAAC,IAAI,CAAC,CAAC;SACR;QACD,UAAU,GAAG,UAAU,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;KACrD;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAS,aAAa,CACpB,GAAW,EACX,OAAe,EACf,SAAiB,EACjB,SAAiB;IAEjB,IAAI,CAAC,GAAG,GAAG,CAAC;IACZ,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC;IACrB,CAAC,GAAG,IAAA,WAAI,EAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,cAAO,EAAC,CAAC,CAAC,CAAC,CAAC;IACxC,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,EAAE;QAC9B,OAAO,IAAI,CAAC;KACb;IACD,CAAC,IAAI,CAAC,CAAC;IACP,MAAM,UAAU,GACd,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;QACvB,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACrD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAS,oBAAoB,CAC3B,OAAe,EACf,SAAiB,EACjB,SAAiB;IAEjB,MAAM,YAAY,GAAG,kBAAkB,CAAC;IACxC,MAAM,YAAY,GAAG,IAAA,qBAAc,EAAC,OAAO,CAAC,CAAC;IAC7C,IAAI,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IAC1C,IAAI,IAAA,cAAO,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;QAC5B,CAAC,IAAI,CAAC,CAAC;KACR;IACD,MAAM,WAAW,GAAG,aAAa,CAAC,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACzE,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAS,YAAY,CACnB,OAAe,EACf,SAAiB,EACjB,SAAiB;IAEjB,MAAM,YAAY,GAAG,kBAAkB,CAAC;IACxC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACrC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,IAAI,IAAA,cAAO,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;QACvB,CAAC,IAAI,CAAC,CAAC;KACR;IACD,IAAI,UAAU,GAAG,aAAa,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACjE,MAAM,WAAW,GAAG,oBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACxE,IAAI,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE;QAC/B,OAAO,IAAI,CAAC;KACb;IACD,OAAO,UAAU,IAAI,IAAA,qBAAc,EAAC,UAAU,CAAC,KAAK,WAAW,EAAE;QAC/D,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC;QACrB,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,IAAA,cAAO,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;YACvB,CAAC,IAAI,CAAC,CAAC;SACR;QACD,UAAU,GAAG,aAAa,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KAC9D;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,yBAAyB;AAClB,KAAK,UAAU,gBAAgB,CAAC,EACrC,WAAW,EACX,OAAO,GACgB;IACvB,eAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACnC;;OAEG;IACH,IAAI,MAAc,CAAC;IACnB,gBAAgB;IAChB,sEAAsE;IACtE,8EAA8E;IAC9E,MAAM,gBAAgB,GAAG,IAAA,sBAAY,EAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IAChE,IAAI,CAAC,gBAAgB,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;QAC7C,eAAM,CAAC,KAAK,CACV,yDAAyD,OAAO,CAAC,OAAO,EAAE,CAC3E,CAAC;QACF,OAAO,WAAW,CAAC;KACpB;IACD,IAAI,SAAiB,CAAC;IACtB,IAAI;QACF,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACtD,MAAM,GAAG,sBAAsB,SAAS,IAAI,QAAQ,sBAClD,OAAO,CAAC,QACV,IAAI,QAAQ,IAAI,MAAM,CAAC,gBAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC;QACjE,SAAS,GAAG,MAAM,eAAK,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YACtD,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;KACJ;IAAC,OAAO,QAAQ,EAAE;QACjB,eAAM,CAAC,KAAK,CACV,2CAA2C,OAAO,CAAC,OAAO,2BAA2B,CACtF,CAAC;QACF,IAAI;YACF,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACxD,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YACtD,MAAM,GAAG,sBAAsB,SAAS,IAAI,QAAQ,YAAY,OAAO,CAAC,QAAQ,SAAS,CAAC;YAC1F,SAAS,GAAG,MAAM,eAAK,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;gBACtD,SAAS,EAAE,QAAQ;aACpB,CAAC,CAAC;SACJ;QAAC,OAAO,QAAQ,EAAE;YACjB,eAAM,CAAC,KAAK,CACV,2CAA2C,OAAO,CAAC,OAAO,kBAAkB,CAC7E,CAAC;YACF,OAAO,WAAW,CAAC;SACpB;KACF;IACD,uBAAuB;IACvB,IAAI,CAAC,SAAS,EAAE;QACd,eAAM,CAAC,KAAK,CACV,qCAAqC,OAAO,CAAC,OAAO,kBAAkB,CACvE,CAAC;QACF,OAAO,WAAW,CAAC;KACpB;IACD,MAAM,gBAAgB,GAAG,IAAA,sBAAY,EAAC,MAAM,CAAC,CAAC;IAC9C,IAAI,CAAC,gBAAgB,EAAE;QACrB,eAAM,CAAC,KAAK,CAAC,uCAAuC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACvE,OAAO,WAAW,CAAC;KACpB;IACD,IAAI,OAAO,CAAC,QAAQ,KAAK,gBAAgB,CAAC,YAAY,EAAE;QACtD,eAAM,CAAC,KAAK,CAAC,uCAAuC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACvE,OAAO,WAAW,CAAC;KACpB;IACD,IAAI,UAAU,GAAG,SAAS,CAAC,WAAW,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACzE,IAAI,CAAC,UAAU,EAAE;QACf,eAAM,CAAC,KAAK,CAAC,uCAAuC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACvE,OAAO,WAAW,CAAC;KACpB;IACD,UAAU,GAAG,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC7E,IAAI,CAAC,UAAU,EAAE;QACf,eAAM,CAAC,KAAK,CAAC,0CAA0C,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1E,OAAO,WAAW,CAAC;KACpB;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AA1ED,4CA0EC","sourcesContent":["// TODO: types (#7154)\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport hasha from 'hasha';\nimport semver from 'semver';\nimport { logger } from '../../../logger';\nimport { Http } from '../../../util/http';\nimport type { UpdateDependencyConfig } from '../types';\nimport { parseUrlPath } from './extract';\nimport { isSpace, removeComments, skip } from './util';\n\nconst http = new Http('homebrew');\n\nfunction replaceUrl(\n  idx: number,\n  content: string,\n  oldUrl: string,\n  newUrl: string\n): string | null {\n  let i = idx;\n  i += 'url'.length;\n  i = skip(i, content, (c) => isSpace(c));\n  const chr = content[i];\n  if (chr !== '\"' && chr !== \"'\") {\n    return null;\n  }\n  i += 1;\n  const newContent =\n    content.substring(0, i) + content.substring(i).replace(oldUrl, newUrl);\n  return newContent;\n}\n\nfunction getUrlTestContent(\n  content: string,\n  oldUrl: string,\n  newUrl: string\n): string | null {\n  const urlRegExp = /(^|\\s)url(\\s)/;\n  const cleanContent = removeComments(content);\n  let j = cleanContent.search(urlRegExp);\n  if (isSpace(cleanContent[j])) {\n    j += 1;\n  }\n  const testContent = replaceUrl(j, cleanContent, oldUrl, newUrl);\n  return testContent;\n}\n\nfunction updateUrl(\n  content: string,\n  oldUrl: string,\n  newUrl: string\n): string | null {\n  const urlRegExp = /(^|\\s)url(\\s)/;\n  let i = content.search(urlRegExp);\n  if (i === -1) {\n    return null;\n  }\n  if (isSpace(content[i])) {\n    i += 1;\n  }\n  let newContent = replaceUrl(i, content, oldUrl, newUrl);\n  const testContent = getUrlTestContent(content, oldUrl, newUrl);\n  if (!newContent || !testContent) {\n    return null;\n  }\n  while (newContent && removeComments(newContent) !== testContent) {\n    i += 'url'.length;\n    i += content.substring(i).search(urlRegExp);\n    if (isSpace(content[i])) {\n      i += 1;\n    }\n    newContent = replaceUrl(i, content, oldUrl, newUrl);\n  }\n  return newContent;\n}\n\nfunction replaceSha256(\n  idx: number,\n  content: string,\n  oldSha256: string,\n  newSha256: string\n): string | null {\n  let i = idx;\n  i += 'sha256'.length;\n  i = skip(i, content, (c) => isSpace(c));\n  const chr = content[i];\n  if (chr !== '\"' && chr !== \"'\") {\n    return null;\n  }\n  i += 1;\n  const newContent =\n    content.substring(0, i) +\n    content.substring(i).replace(oldSha256, newSha256);\n  return newContent;\n}\n\nfunction getSha256TestContent(\n  content: string,\n  oldSha256: string,\n  newSha256: string\n): string | null {\n  const sha256RegExp = /(^|\\s)sha256(\\s)/;\n  const cleanContent = removeComments(content);\n  let j = cleanContent.search(sha256RegExp);\n  if (isSpace(cleanContent[j])) {\n    j += 1;\n  }\n  const testContent = replaceSha256(j, cleanContent, oldSha256, newSha256);\n  return testContent;\n}\n\nfunction updateSha256(\n  content: string,\n  oldSha256: string,\n  newSha256: string\n): string | null {\n  const sha256RegExp = /(^|\\s)sha256(\\s)/;\n  let i = content.search(sha256RegExp);\n  if (i === -1) {\n    return null;\n  }\n  if (isSpace(content[i])) {\n    i += 1;\n  }\n  let newContent = replaceSha256(i, content, oldSha256, newSha256);\n  const testContent = getSha256TestContent(content, oldSha256, newSha256);\n  if (!newContent || !testContent) {\n    return null;\n  }\n  while (newContent && removeComments(newContent) !== testContent) {\n    i += 'sha256'.length;\n    i += content.substring(i).search(sha256RegExp);\n    if (isSpace(content[i])) {\n      i += 1;\n    }\n    newContent = replaceSha256(i, content, oldSha256, newSha256);\n  }\n  return newContent;\n}\n\n// TODO: Refactor (#9591)\nexport async function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): Promise<string> {\n  logger.trace('updateDependency()');\n  /*\n    1. Update url field 2. Update sha256 field\n   */\n  let newUrl: string;\n  // Example urls:\n  // \"https://github.com/bazelbuild/bazel-watcher/archive/v0.8.2.tar.gz\"\n  // \"https://github.com/aide/aide/releases/download/v0.16.1/aide-0.16.1.tar.gz\"\n  const oldParsedUrlPath = parseUrlPath(upgrade.managerData?.url);\n  if (!oldParsedUrlPath || !upgrade.managerData) {\n    logger.debug(\n      `Failed to update - upgrade.managerData.url is invalid ${upgrade.depName}`\n    );\n    return fileContent;\n  }\n  let newSha256: string;\n  try {\n    const ownerName = String(upgrade.managerData.ownerName);\n    const repoName = String(upgrade.managerData.repoName);\n    newUrl = `https://github.com/${ownerName}/${repoName}/releases/download/${\n      upgrade.newValue\n    }/${repoName}-${String(semver.coerce(upgrade.newValue))}.tar.gz`;\n    newSha256 = await hasha.fromStream(http.stream(newUrl), {\n      algorithm: 'sha256',\n    });\n  } catch (errOuter) {\n    logger.debug(\n      `Failed to download release download for ${upgrade.depName} - trying archive instead`\n    );\n    try {\n      const ownerName = String(upgrade.managerData.ownerName);\n      const repoName = String(upgrade.managerData.repoName);\n      newUrl = `https://github.com/${ownerName}/${repoName}/archive/${upgrade.newValue}.tar.gz`;\n      newSha256 = await hasha.fromStream(http.stream(newUrl), {\n        algorithm: 'sha256',\n      });\n    } catch (errInner) {\n      logger.debug(\n        `Failed to download archive download for ${upgrade.depName} - update failed`\n      );\n      return fileContent;\n    }\n  }\n  // istanbul ignore next\n  if (!newSha256) {\n    logger.debug(\n      `Failed to generate new sha256 for ${upgrade.depName} - update failed`\n    );\n    return fileContent;\n  }\n  const newParsedUrlPath = parseUrlPath(newUrl);\n  if (!newParsedUrlPath) {\n    logger.debug(`Failed to update url for dependency ${upgrade.depName}`);\n    return fileContent;\n  }\n  if (upgrade.newValue !== newParsedUrlPath.currentValue) {\n    logger.debug(`Failed to update url for dependency ${upgrade.depName}`);\n    return fileContent;\n  }\n  let newContent = updateUrl(fileContent, upgrade.managerData.url, newUrl);\n  if (!newContent) {\n    logger.debug(`Failed to update url for dependency ${upgrade.depName}`);\n    return fileContent;\n  }\n  newContent = updateSha256(newContent, upgrade.managerData.sha256, newSha256);\n  if (!newContent) {\n    logger.debug(`Failed to update sha256 for dependency ${upgrade.depName}`);\n    return fileContent;\n  }\n  return newContent;\n}\n"]}