{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bazel/update.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: types (#7154)\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport hasha from 'hasha';\nimport { logger } from '../../../logger';\nimport * as packageCache from '../../../util/cache/package';\nimport { Http } from '../../../util/http';\nimport { regEx } from '../../../util/regex';\nimport type { UpdateDependencyConfig } from '../types';\nimport type { BazelManagerData } from './types';\n\nconst http = new Http('bazel');\n\nfunction updateWithNewVersion(\n  content: string,\n  currentValue: string,\n  newValue: string\n): string {\n  // istanbul ignore if\n  if (currentValue === newValue) {\n    return content;\n  }\n  const replaceFrom = currentValue.replace(regEx(/^v/), '');\n  const replaceTo = newValue.replace(regEx(/^v/), '');\n  let newContent = content;\n  do {\n    newContent = newContent.replace(replaceFrom, replaceTo);\n  } while (newContent.includes(replaceFrom));\n  return newContent;\n}\n\nfunction extractUrl(flattened: string): string[] | null {\n  const urlMatch = regEx(/url=\"(.*?)\"/).exec(flattened);\n  if (!urlMatch) {\n    logger.debug('Cannot locate urls in new definition');\n    return null;\n  }\n  return [urlMatch[1]];\n}\n\nfunction extractUrls(content: string): string[] | null {\n  const flattened = content.replace(regEx(/\\n/g), '').replace(regEx(/\\s/g), '');\n  const urlsMatch = regEx(/urls?=\\[.*?\\]/).exec(flattened);\n  if (!urlsMatch) {\n    return extractUrl(flattened);\n  }\n  const urls = urlsMatch[0]\n    .replace(regEx(/urls?=\\[/), '')\n    .replace(regEx(/,?\\]$/), '')\n    .split(',')\n    .map((url) => url.replace(regEx(/\"/g), ''));\n  return urls;\n}\n\nasync function getHashFromUrl(url: string): Promise<string | null> {\n  const cacheNamespace = 'url-sha256';\n  const cachedResult = await packageCache.get<string | null>(\n    cacheNamespace,\n    url\n  );\n  /* istanbul ignore next line */\n  if (cachedResult) {\n    return cachedResult;\n  }\n  try {\n    const hash = await hasha.fromStream(http.stream(url), {\n      algorithm: 'sha256',\n    });\n    const cacheMinutes = 3 * 24 * 60; // 3 days\n    await packageCache.set(cacheNamespace, url, hash, cacheMinutes);\n    return hash;\n  } catch (err) /* istanbul ignore next */ {\n    return null;\n  }\n}\n\nasync function getHashFromUrls(urls: string[]): Promise<string | null> {\n  const hashes = (\n    await Promise.all(urls.map((url) => getHashFromUrl(url)))\n  ).filter(Boolean);\n  const distinctHashes = [...new Set(hashes)];\n  if (!distinctHashes.length) {\n    logger.debug({ hashes, urls }, 'Could not calculate hash for URLs');\n    return null;\n  }\n  // istanbul ignore if\n  if (distinctHashes.length > 1) {\n    logger.warn({ urls }, 'Found multiple hashes for single def');\n  }\n  return distinctHashes[0];\n}\n\nfunction setNewHash(content: string, hash: string): string {\n  return content.replace(regEx(/(sha256\\s*=\\s*)\"[^\"]+\"/), `$1\"${hash}\"`);\n}\n\nexport async function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig<BazelManagerData>): Promise<string | null> {\n  try {\n    logger.debug(\n      `bazel.updateDependency(): ${upgrade.newValue ?? upgrade.newDigest}`\n    );\n    let newDef: string | undefined;\n    if (upgrade.depType === 'container_pull' && upgrade.managerData?.def) {\n      newDef = upgrade.managerData.def\n        .replace(regEx(/(tag\\s*=\\s*)\"[^\"]+\"/), `$1\"${upgrade.newValue}\"`)\n        .replace(regEx(/(digest\\s*=\\s*)\"[^\"]+\"/), `$1\"${upgrade.newDigest}\"`);\n    }\n    if (\n      (upgrade.depType === 'git_repository' ||\n        upgrade.depType === 'go_repository') &&\n      upgrade.managerData?.def\n    ) {\n      newDef = upgrade.managerData.def\n        .replace(regEx(/(tag\\s*=\\s*)\"[^\"]+\"/), `$1\"${upgrade.newValue}\"`)\n        .replace(regEx(/(commit\\s*=\\s*)\"[^\"]+\"/), `$1\"${upgrade.newDigest}\"`);\n      if (upgrade.currentDigest && upgrade.updateType !== 'digest') {\n        newDef = newDef.replace(\n          regEx(/(commit\\s*=\\s*)\"[^\"]+\".*?\\n/),\n          `$1\"${upgrade.newDigest}\",  # ${upgrade.newValue}\\n`\n        );\n      }\n    } else if (\n      (upgrade.depType === 'http_archive' || upgrade.depType === 'http_file') &&\n      upgrade.managerData?.def &&\n      (upgrade.currentValue || upgrade.currentDigest) &&\n      (upgrade.newValue ?? upgrade.newDigest)\n    ) {\n      newDef = updateWithNewVersion(\n        upgrade.managerData.def,\n        (upgrade.currentValue ?? upgrade.currentDigest)!,\n        (upgrade.newValue ?? upgrade.newDigest)!\n      );\n      const massages = {\n        'bazel-skylib.': 'bazel_skylib-',\n        '/bazel-gazelle/releases/download/0':\n          '/bazel-gazelle/releases/download/v0',\n        '/bazel-gazelle-0': '/bazel-gazelle-v0',\n        '/rules_go/releases/download/0': '/rules_go/releases/download/v0',\n        '/rules_go-0': '/rules_go-v0',\n      };\n      for (const [from, to] of Object.entries(massages)) {\n        newDef = newDef.replace(from, to);\n      }\n      const urls = extractUrls(newDef);\n      if (!urls?.length) {\n        logger.debug({ newDef }, 'urls is empty');\n        return null;\n      }\n      const hash = await getHashFromUrls(urls);\n      if (!hash) {\n        return null;\n      }\n      logger.debug({ hash }, 'Calculated hash');\n      newDef = setNewHash(newDef, hash);\n    }\n    logger.debug({ oldDef: upgrade.managerData?.def, newDef });\n\n    // istanbul ignore if: needs test\n    if (!newDef) {\n      return null;\n    }\n\n    let existingRegExStr = `${upgrade.depType}\\\\([^\\\\)]+name\\\\s*=\\\\s*\"${upgrade.depName}\"(.*\\\\n)+?\\\\s*\\\\)`;\n    if (newDef.endsWith('\\n')) {\n      existingRegExStr += '\\n';\n    }\n    const existingDef = regEx(existingRegExStr);\n    // istanbul ignore if\n    if (!existingDef.test(fileContent)) {\n      logger.debug('Cannot match existing string');\n      return null;\n    }\n    return fileContent.replace(existingDef, newDef);\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'Error setting new bazel WORKSPACE version');\n    return null;\n  }\n}\n"]}