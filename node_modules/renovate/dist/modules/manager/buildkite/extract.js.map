{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/buildkite/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport type { SkipReason } from '../../../types';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport { isVersion } from '../../versioning/semver';\nimport type { PackageDependency, PackageFile } from '../types';\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  try {\n    const lines = content.split(newlineRegex);\n\n    for (const line of lines) {\n      // Search each line for plugin names\n      const depLineMatch = regEx(\n        /^\\s*(?:-\\s+(?:\\?\\s+)?)?(?<depName>[^#\\s]+)#(?<currentValue>[^:]+)/\n      ).exec(line);\n\n      if (depLineMatch?.groups) {\n        const { depName, currentValue } = depLineMatch.groups;\n        logger.trace('depLineMatch');\n        let skipReason: SkipReason | undefined;\n        let repo: string | undefined;\n        logger.debug({ depName }, 'Found BuildKite plugin');\n        // Plugins may simply be git repos. If so, we need to parse out the registry.\n        const gitPluginMatch = regEx(\n          /(ssh:\\/\\/git@|https:\\/\\/)(?<registry>[^/]+)\\/(?<gitPluginName>.*)/\n        ).exec(depName);\n        if (gitPluginMatch?.groups) {\n          logger.debug('Examining git plugin');\n          const { registry, gitPluginName } = gitPluginMatch.groups;\n          const gitDepName = gitPluginName.replace(regEx('\\\\.git$'), '');\n          const dep: PackageDependency = {\n            depName: gitDepName,\n            currentValue: currentValue,\n            registryUrls: ['https://' + registry],\n            datasource: GithubTagsDatasource.id,\n          };\n          deps.push(dep);\n          continue;\n        } else if (isVersion(currentValue)) {\n          const splitName = depName.split('/');\n          if (splitName.length === 1) {\n            repo = `buildkite-plugins/${depName}-buildkite-plugin`;\n          } else if (splitName.length === 2) {\n            repo = `${depName}-buildkite-plugin`;\n          } else {\n            logger.warn(\n              { dependency: depName },\n              'Something is wrong with BuildKite plugin name'\n            );\n            skipReason = 'invalid-dependency-specification';\n          }\n        } else {\n          logger.debug({ currentValue }, 'Skipping non-pinned current version');\n          skipReason = 'invalid-version';\n        }\n        const dep: PackageDependency = {\n          depName,\n          currentValue,\n          skipReason,\n        };\n        if (repo) {\n          dep.datasource = GithubTagsDatasource.id;\n          dep.packageName = repo;\n        }\n        deps.push(dep);\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting BuildKite plugins');\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n\n  return { deps };\n}\n"]}