{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/docker-compose/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageFile } from '../types';\nimport type { DockerComposeConfig } from './types';\n\nclass LineMapper {\n  private imageLines: { line: string; lineNumber: number; used: boolean }[];\n\n  constructor(content: string, filter: RegExp) {\n    this.imageLines = [...content.split(newlineRegex).entries()]\n      .filter((entry) => filter.test(entry[1]))\n      .map(([lineNumber, line]) => ({ lineNumber, line, used: false }));\n  }\n\n  pluckLineNumber(imageName: string | undefined): number | null {\n    const lineMeta = this.imageLines.find(\n      ({ line, used }) => !used && imageName && line.includes(imageName)\n    );\n    // istanbul ignore if\n    if (!lineMeta) {\n      return null;\n    }\n    lineMeta.used = true; // unset plucked lines so duplicates are skipped\n    return lineMeta.lineNumber;\n  }\n}\n\nexport function extractPackageFile(\n  content: string,\n  fileName?: string\n): PackageFile | null {\n  logger.debug('docker-compose.extractPackageFile()');\n  let config: DockerComposeConfig;\n  try {\n    // TODO: fix me (#9610)\n    config = load(content, { json: true }) as DockerComposeConfig;\n    if (!config) {\n      logger.debug(\n        { fileName },\n        'Null config when parsing Docker Compose content'\n      );\n      return null;\n    }\n    if (typeof config !== 'object') {\n      logger.debug(\n        { fileName, type: typeof config },\n        'Unexpected type for Docker Compose content'\n      );\n      return null;\n    }\n  } catch (err) {\n    logger.debug({ err }, 'err');\n    logger.debug({ fileName }, 'Parsing Docker Compose config YAML');\n    return null;\n  }\n  try {\n    const lineMapper = new LineMapper(content, regEx(/^\\s*image:/));\n\n    // docker-compose v1 places the services at the top level,\n    // docker-compose v2+ places the services within a 'services' key\n    // since docker-compose spec version 1.27, the 'version' key has\n    // become optional and can no longer be used to differentiate\n    // between v1 and v2.\n    const services = config.services ?? config;\n\n    // Image name/tags for services are only eligible for update if they don't\n    // use variables and if the image is not built locally\n    const deps = Object.values(services || {})\n      .filter((service) => is.string(service?.image) && !service?.build)\n      .map((service) => {\n        const dep = getDep(service.image);\n        const lineNumber = lineMapper.pluckLineNumber(service.image);\n        // istanbul ignore if\n        if (!lineNumber) {\n          return null;\n        }\n        return dep;\n      })\n      .filter(is.truthy);\n\n    logger.trace({ deps }, 'Docker Compose image');\n    return { deps };\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn(\n      { fileName, content, err },\n      'Error extracting Docker Compose file'\n    );\n    return null;\n  }\n}\n"]}