{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/batect/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport upath from 'upath';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { id as dockerVersioning } from '../../versioning/docker';\nimport { id as semverVersioning } from '../../versioning/semver';\nimport { getDep } from '../dockerfile/extract';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport type {\n  BatectConfig,\n  BatectFileInclude,\n  BatectGitInclude,\n  BatectInclude,\n  ExtractionResult,\n} from './types';\n\nfunction loadConfig(content: string): BatectConfig {\n  const config = load(content);\n\n  if (typeof config !== 'object') {\n    throw new Error(\n      `Configuration file does not contain a YAML object (it is ${typeof config}).`\n    );\n  }\n\n  return config as BatectConfig;\n}\n\nfunction extractImages(config: BatectConfig): string[] {\n  if (config.containers === undefined) {\n    return [];\n  }\n\n  return Object.values(config.containers)\n    .map((container) => container.image)\n    .filter(is.string);\n}\n\nfunction createImageDependency(tag: string): PackageDependency {\n  return {\n    ...getDep(tag),\n    versioning: dockerVersioning,\n  };\n}\n\nfunction extractImageDependencies(config: BatectConfig): PackageDependency[] {\n  const images = extractImages(config);\n  const deps = images.map((image) => createImageDependency(image));\n\n  logger.trace({ deps }, 'Loaded images from Batect configuration file');\n\n  return deps;\n}\n\nfunction includeIsGitInclude(\n  include: BatectInclude\n): include is BatectGitInclude {\n  return typeof include === 'object' && include.type === 'git';\n}\n\nfunction extractGitBundles(config: BatectConfig): BatectGitInclude[] {\n  if (config.include === undefined) {\n    return [];\n  }\n\n  return config.include.filter(includeIsGitInclude);\n}\n\nfunction createBundleDependency(bundle: BatectGitInclude): PackageDependency {\n  return {\n    depName: bundle.repo,\n    currentValue: bundle.ref,\n    versioning: semverVersioning,\n    datasource: GitTagsDatasource.id,\n    commitMessageTopic: 'bundle {{depName}}',\n  };\n}\n\nfunction extractBundleDependencies(config: BatectConfig): PackageDependency[] {\n  const bundles = extractGitBundles(config);\n  const deps = bundles.map((bundle) => createBundleDependency(bundle));\n\n  logger.trace({ deps }, 'Loaded bundles from Batect configuration file');\n\n  return deps;\n}\n\nfunction includeIsStringFileInclude(include: BatectInclude): include is string {\n  return typeof include === 'string';\n}\n\nfunction includeIsObjectFileInclude(\n  include: BatectInclude\n): include is BatectFileInclude {\n  return typeof include === 'object' && include.type === 'file';\n}\n\nfunction extractReferencedConfigFiles(\n  config: BatectConfig,\n  fileName: string\n): string[] {\n  if (config.include === undefined) {\n    return [];\n  }\n\n  const dirName = upath.dirname(fileName);\n\n  const paths = [\n    ...config.include.filter(includeIsStringFileInclude),\n    ...config.include\n      .filter(includeIsObjectFileInclude)\n      .map((include) => include.path),\n  ].filter((p) => p !== undefined && p !== null);\n\n  return paths.map((p) => upath.join(dirName, p));\n}\n\nexport function extractPackageFile(\n  content: string,\n  fileName: string\n): ExtractionResult | null {\n  logger.debug({ fileName }, 'batect.extractPackageFile()');\n\n  try {\n    const config = loadConfig(content);\n    const deps = [\n      ...extractImageDependencies(config),\n      ...extractBundleDependencies(config),\n    ];\n\n    const referencedConfigFiles = extractReferencedConfigFiles(\n      config,\n      fileName\n    );\n\n    return { deps, referencedConfigFiles };\n  } catch (err) {\n    logger.warn(\n      { err, fileName },\n      'Extracting dependencies from Batect configuration file failed'\n    );\n\n    return null;\n  }\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  const filesToExamine = new Set<string>(packageFiles);\n  const filesAlreadyExamined = new Set<string>();\n  const results: PackageFile[] = [];\n\n  while (filesToExamine.size > 0) {\n    const packageFile = filesToExamine.values().next().value;\n    filesToExamine.delete(packageFile);\n    filesAlreadyExamined.add(packageFile);\n\n    const content = await readLocalFile(packageFile, 'utf8');\n    // TODO #7154\n    const result = extractPackageFile(content!, packageFile);\n\n    if (result !== null) {\n      result.referencedConfigFiles.forEach((f) => {\n        if (!filesAlreadyExamined.has(f) && !filesToExamine.has(f)) {\n          filesToExamine.add(f);\n        }\n      });\n\n      results.push({\n        packageFile,\n        deps: result.deps,\n      });\n    }\n  }\n\n  return results;\n}\n"]}