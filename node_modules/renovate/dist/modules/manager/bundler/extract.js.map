{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bundler/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { RubyVersionDatasource } from '../../datasource/ruby-version';\nimport { RubyGemsDatasource } from '../../datasource/rubygems';\nimport type { PackageDependency, PackageFile } from '../types';\nimport { delimiters, extractRubyVersion } from './common';\nimport { extractLockFileEntries } from './locked-version';\n\nfunction formatContent(input: string): string {\n  return input.replace(regEx(/^ {2}/), '') + '\\n'; //remove leading witespace and add a new line at the end\n}\n\nexport async function extractPackageFile(\n  content: string,\n  fileName?: string\n): Promise<PackageFile | null> {\n  const res: PackageFile = {\n    registryUrls: [],\n    deps: [],\n  };\n  const lines = content.split(newlineRegex);\n  for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n    const line = lines[lineNumber];\n    let sourceMatch: RegExpMatchArray | null = null;\n    for (const delimiter of delimiters) {\n      sourceMatch =\n        sourceMatch ??\n        regEx(`^source ${delimiter}([^${delimiter}]+)${delimiter}\\\\s*$`).exec(\n          line\n        );\n    }\n    if (sourceMatch) {\n      res.registryUrls?.push(sourceMatch[1]);\n    }\n\n    const rubyMatch = extractRubyVersion(line);\n    if (rubyMatch) {\n      res.deps.push({\n        depName: 'ruby',\n        currentValue: rubyMatch,\n        datasource: RubyVersionDatasource.id,\n        registryUrls: null,\n      });\n    }\n\n    const gemMatchRegex = regEx(\n      `^\\\\s*gem\\\\s+(['\"])(?<depName>[^'\"]+)(['\"])(\\\\s*,\\\\s*(?<currentValue>(['\"])[^'\"]+['\"](\\\\s*,\\\\s*['\"][^'\"]+['\"])?))?`\n    );\n    const gemMatch = gemMatchRegex.exec(line);\n    if (gemMatch) {\n      const dep: PackageDependency = {\n        depName: gemMatch.groups?.depName,\n        managerData: { lineNumber },\n      };\n      if (gemMatch.groups?.currentValue) {\n        const currentValue = gemMatch.groups.currentValue;\n        dep.currentValue = regEx(/\\s*,\\s*/).test(currentValue)\n          ? currentValue\n          : currentValue.slice(1, -1);\n      }\n      dep.datasource = RubyGemsDatasource.id;\n      res.deps.push(dep);\n    }\n    const groupMatch = regEx(/^group\\s+(.*?)\\s+do/).exec(line);\n    if (groupMatch) {\n      const depTypes = groupMatch[1]\n        .split(',')\n        .map((group) => group.trim())\n        .map((group) => group.replace(regEx(/^:/), ''));\n      const groupLineNumber = lineNumber;\n      let groupContent = '';\n      let groupLine = '';\n      while (lineNumber < lines.length && groupLine !== 'end') {\n        lineNumber += 1;\n        groupLine = lines[lineNumber];\n        if (groupLine !== 'end') {\n          groupContent += formatContent(groupLine || '');\n        }\n      }\n      const groupRes = await extractPackageFile(groupContent);\n      if (groupRes) {\n        res.deps = res.deps.concat(\n          groupRes.deps.map((dep) => ({\n            ...dep,\n            depTypes,\n            managerData: {\n              lineNumber:\n                Number(dep.managerData?.lineNumber) + groupLineNumber + 1,\n            },\n          }))\n        );\n      }\n    }\n    for (const delimiter of delimiters) {\n      const sourceBlockMatch = regEx(\n        `^source\\\\s+${delimiter}(.*?)${delimiter}\\\\s+do`\n      ).exec(line);\n      if (sourceBlockMatch) {\n        const repositoryUrl = sourceBlockMatch[1];\n        const sourceLineNumber = lineNumber;\n        let sourceContent = '';\n        let sourceLine = '';\n        while (lineNumber < lines.length && sourceLine.trim() !== 'end') {\n          lineNumber += 1;\n          sourceLine = lines[lineNumber];\n          // istanbul ignore if\n          if (sourceLine === null || sourceLine === undefined) {\n            logger.info({ content, fileName }, 'Undefined sourceLine');\n            sourceLine = 'end';\n          }\n          if (sourceLine !== 'end') {\n            sourceContent += formatContent(sourceLine);\n          }\n        }\n        const sourceRes = await extractPackageFile(sourceContent);\n        if (sourceRes) {\n          res.deps = res.deps.concat(\n            sourceRes.deps.map((dep) => ({\n              ...dep,\n              registryUrls: [repositoryUrl],\n              managerData: {\n                lineNumber:\n                  Number(dep.managerData?.lineNumber) + sourceLineNumber + 1,\n              },\n            }))\n          );\n        }\n      }\n    }\n    const platformsMatch = regEx(/^platforms\\s+(.*?)\\s+do/).test(line);\n    if (platformsMatch) {\n      const platformsLineNumber = lineNumber;\n      let platformsContent = '';\n      let platformsLine = '';\n      while (lineNumber < lines.length && platformsLine !== 'end') {\n        lineNumber += 1;\n        platformsLine = lines[lineNumber];\n        if (platformsLine !== 'end') {\n          platformsContent += formatContent(platformsLine);\n        }\n      }\n      const platformsRes = await extractPackageFile(platformsContent);\n      if (platformsRes) {\n        res.deps = res.deps.concat(\n          platformsRes.deps.map((dep) => ({\n            ...dep,\n            managerData: {\n              lineNumber:\n                Number(dep.managerData?.lineNumber) + platformsLineNumber + 1,\n            },\n          }))\n        );\n      }\n    }\n    const ifMatch = regEx(/^if\\s+(.*?)/).test(line);\n    if (ifMatch) {\n      const ifLineNumber = lineNumber;\n      let ifContent = '';\n      let ifLine = '';\n      while (lineNumber < lines.length && ifLine !== 'end') {\n        lineNumber += 1;\n        ifLine = lines[lineNumber];\n        if (ifLine !== 'end') {\n          ifContent += formatContent(ifLine);\n        }\n      }\n      const ifRes = await extractPackageFile(ifContent);\n      if (ifRes) {\n        res.deps = res.deps.concat(\n          ifRes.deps.map((dep) => ({\n            ...dep,\n            managerData: {\n              lineNumber:\n                Number(dep.managerData?.lineNumber) + ifLineNumber + 1,\n            },\n          }))\n        );\n      }\n    }\n  }\n  if (!res.deps.length && !res.registryUrls?.length) {\n    return null;\n  }\n\n  if (fileName) {\n    const gemfileLock = fileName + '.lock';\n    const lockContent = await readLocalFile(gemfileLock, 'utf8');\n    if (lockContent) {\n      logger.debug({ packageFile: fileName }, 'Found Gemfile.lock file');\n      res.lockFiles = [gemfileLock];\n      const lockedEntries = extractLockFileEntries(lockContent);\n      for (const dep of res.deps) {\n        // TODO: types (#7154)\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const lockedDepValue = lockedEntries.get(`${dep.depName}`);\n        if (lockedDepValue) {\n          dep.lockedVersion = lockedDepValue;\n        }\n      }\n    }\n  }\n  return res;\n}\n"]}