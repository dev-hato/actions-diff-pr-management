{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bundler/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { lt } from '@renovatebot/ruby-semver';\nimport is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport {\n  BUNDLER_INVALID_CREDENTIALS,\n  TEMPORARY_ERROR,\n} from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport type { HostRule } from '../../../types';\nimport * as memCache from '../../../util/cache/memory';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  ensureCacheDir,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { getRepoStatus } from '../../../util/git';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { addSecretForSanitizing } from '../../../util/sanitize';\nimport { isValid } from '../../versioning/ruby';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport { getBundlerConstraint, getRubyConstraint } from './common';\nimport {\n  findAllAuthenticatable,\n  getAuthenticationHeaderValue,\n} from './host-rules';\n\nconst hostConfigVariablePrefix = 'BUNDLE_';\n\nfunction buildBundleHostVariable(hostRule: HostRule): Record<string, string> {\n  if (!hostRule.resolvedHost || hostRule.resolvedHost.includes('-')) {\n    return {};\n  }\n  const varName = hostConfigVariablePrefix.concat(\n    hostRule.resolvedHost\n      .split('.')\n      .map((term) => term.toUpperCase())\n      .join('__')\n  );\n  return {\n    [varName]: `${getAuthenticationHeaderValue(hostRule)}`,\n  };\n}\n\nconst resolvedPkgRegex = regEx(\n  /(?<pkg>\\S+)(?:\\s*\\([^)]+\\)\\s*)? was resolved to/\n);\n\nfunction getResolvedPackages(input: string): string[] {\n  const lines = input.split(newlineRegex);\n  const result: string[] = [];\n  for (const line of lines) {\n    const resolveMatchGroups = line.match(resolvedPkgRegex)?.groups;\n    if (resolveMatchGroups) {\n      const { pkg } = resolveMatchGroups;\n      result.push(pkg);\n    }\n  }\n\n  return [...new Set(result)];\n}\n\nexport async function updateArtifacts(\n  updateArtifact: UpdateArtifact,\n  recursionLimit = 10\n): Promise<UpdateArtifactsResult[] | null> {\n  const { packageFileName, updatedDeps, newPackageFileContent, config } =\n    updateArtifact;\n  logger.debug(`bundler.updateArtifacts(${packageFileName})`);\n  const existingError = memCache.get<string>('bundlerArtifactsError');\n  // istanbul ignore if\n  if (existingError) {\n    logger.debug('Aborting Bundler artifacts due to previous failed attempt');\n    throw new Error(existingError);\n  }\n  const lockFileName = `${packageFileName}.lock`;\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug('No Gemfile.lock found');\n    return null;\n  }\n\n  const args = [\n    config.postUpdateOptions?.includes('bundlerConservative') &&\n      '--conservative',\n    '--update',\n  ].filter(is.nonEmptyString);\n\n  const updatedDepNames = updatedDeps\n    .map(({ depName }) => depName)\n    .filter(is.nonEmptyStringAndNotWhitespace);\n\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n\n    let cmd: string;\n\n    if (config.isLockFileMaintenance) {\n      cmd = 'bundler lock --update';\n    } else {\n      cmd = `bundler lock ${args.join(' ')} ${updatedDepNames\n        .filter((dep) => dep !== 'ruby')\n        .map(quote)\n        .join(' ')}`;\n    }\n\n    const bundlerHostRules = findAllAuthenticatable({\n      hostType: 'rubygems',\n    });\n\n    const bundlerHostRulesVariables = bundlerHostRules.reduce(\n      (variables, hostRule) => ({\n        ...variables,\n        ...buildBundleHostVariable(hostRule),\n      }),\n      {} as Record<string, string>\n    );\n\n    // Detect hosts with a hyphen '-' in the url.\n    // Those cannot be added with environment variables but need to be added\n    // with the bundler config\n    const bundlerHostRulesAuthCommands: string[] = bundlerHostRules.reduce(\n      (authCommands: string[], hostRule) => {\n        if (hostRule.resolvedHost?.includes('-')) {\n          // TODO: fix me, hostrules can missing all auth\n          const creds = getAuthenticationHeaderValue(hostRule);\n          authCommands.push(`${hostRule.resolvedHost} ${creds}`);\n          // sanitize the authentication\n          addSecretForSanitizing(creds);\n        }\n        return authCommands;\n      },\n      []\n    );\n\n    const bundler = getBundlerConstraint(\n      updateArtifact,\n      existingLockFileContent\n    );\n    const preCommands = ['ruby --version'];\n\n    // Bundler < 2 has a different config option syntax than >= 2\n    if (\n      bundlerHostRulesAuthCommands &&\n      bundler &&\n      isValid(bundler) &&\n      lt(bundler, '2')\n    ) {\n      preCommands.push(\n        ...bundlerHostRulesAuthCommands.map(\n          (authCommand) => `bundler config --local ${authCommand}`\n        )\n      );\n    } else if (bundlerHostRulesAuthCommands) {\n      preCommands.push(\n        ...bundlerHostRulesAuthCommands.map(\n          (authCommand) => `bundler config set --local ${authCommand}`\n        )\n      );\n    }\n\n    const execOptions: ExecOptions = {\n      cwdFile: packageFileName,\n      extraEnv: {\n        ...bundlerHostRulesVariables,\n        GEM_HOME: await ensureCacheDir('bundler'),\n      },\n      docker: {\n        image: 'ruby',\n        tagScheme: 'ruby',\n        tagConstraint: await getRubyConstraint(updateArtifact),\n      },\n      toolConstraints: [\n        {\n          toolName: 'bundler',\n          constraint: bundler,\n        },\n      ],\n      preCommands,\n    };\n    await exec(cmd, execOptions);\n\n    const status = await getRepoStatus();\n    if (!status.modified.includes(lockFileName)) {\n      return null;\n    }\n    logger.debug('Returning updated Gemfile.lock');\n    const lockFileContent = await readLocalFile(lockFileName);\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: lockFileContent,\n        },\n      },\n    ];\n  } catch (err) {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    const output = `${String(err.stdout)}\\n${String(err.stderr)}`;\n    if (\n      err.message.includes('fatal: Could not parse object') ||\n      output.includes('but that version could not be found')\n    ) {\n      return [\n        {\n          artifactError: {\n            lockFile: lockFileName,\n            stderr: output,\n          },\n        },\n      ];\n    }\n    if (\n      err.stdout?.includes('Please supply credentials for this source') ||\n      err.stderr?.includes('Authentication is required') ||\n      err.stderr?.includes(\n        'Please make sure you have the correct access rights'\n      )\n    ) {\n      logger.debug(\n        { err },\n        'Gemfile.lock update failed due to missing credentials - skipping branch'\n      );\n      // Do not generate these PRs because we don't yet support Bundler authentication\n      memCache.set('bundlerArtifactsError', BUNDLER_INVALID_CREDENTIALS);\n      throw new Error(BUNDLER_INVALID_CREDENTIALS);\n    }\n    const resolveMatches: string[] = getResolvedPackages(output).filter(\n      (depName) => !updatedDepNames.includes(depName)\n    );\n    if (\n      recursionLimit > 0 &&\n      resolveMatches.length &&\n      !config.isLockFileMaintenance\n    ) {\n      logger.debug(\n        { resolveMatches, updatedDeps },\n        'Found new resolve matches - reattempting recursively'\n      );\n      const newUpdatedDeps = [\n        ...new Set([\n          ...updatedDeps,\n          ...resolveMatches.map((match) => ({ depName: match })),\n        ]),\n      ];\n      return updateArtifacts(\n        {\n          packageFileName,\n          updatedDeps: newUpdatedDeps,\n          newPackageFileContent,\n          config,\n        },\n        recursionLimit - 1\n      );\n    }\n\n    logger.info({ err }, 'Gemfile.lock update failed due to an unknown reason');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: `${String(err.stdout)}\\n${String(err.stderr)}`,\n        },\n      },\n    ];\n  }\n}\n"]}