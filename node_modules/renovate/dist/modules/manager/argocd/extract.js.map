{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/argocd/extract.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,qCAAkC;AAClC,4CAAyC;AACzC,wDAA8D;AAC9D,gDAAuD;AAGvD,iCAAuC;AAEvC,SAAS,gBAAgB,CACvB,UAAiC;IAEjC,IAAI,MAAyB,CAAC;IAC9B,QAAQ,UAAU,CAAC,IAAI,EAAE;QACvB,KAAK,aAAa;YAChB,MAAM,GAAG,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC;YAClC,MAAM;QACR,KAAK,gBAAgB;YACnB,MAAM,GAAG,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC;YAClD,MAAM;KACT;IAED,IACE,CAAC,MAAM;QACP,CAAC,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC;QAClC,CAAC,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,cAAc,CAAC,EACzC;QACA,OAAO,IAAI,CAAC;KACb;IAED,uDAAuD;IACvD,IAAI,MAAM,CAAC,KAAK,EAAE;QAChB,OAAO;YACL,OAAO,EAAE,MAAM,CAAC,KAAK;YACrB,YAAY,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC;YAC9B,YAAY,EAAE,MAAM,CAAC,cAAc;YACnC,UAAU,EAAE,qBAAc,CAAC,EAAE;SAC9B,CAAC;KACH;IACD,OAAO;QACL,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,YAAY,EAAE,MAAM,CAAC,cAAc;QACnC,UAAU,EAAE,4BAAiB,CAAC,EAAE;KACjC,CAAC;AACJ,CAAC;AAED,SAAgB,kBAAkB,CAChC,OAAe,EACf,QAAgB,EAChB,OAAuB;IAEvB,uEAAuE;IACvE,IAAI,oBAAa,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;QACzC,OAAO,IAAI,CAAC;KACb;IAED,IAAI,WAAoC,CAAC;IACzC,IAAI;QACF,WAAW,GAAG,IAAA,iBAAO,EAAC,OAAO,CAA4B,CAAC;KAC3D;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,oCAAoC,CAAC,CAAC;QACtE,OAAO,IAAI,CAAC;KACb;IAED,MAAM,IAAI,GAAG,WAAW;SACrB,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;SACjD,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC,CAAC;IAErB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC;AAvBD,gDAuBC","sourcesContent":["import is from '@sindresorhus/is';\nimport { loadAll } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { HelmDatasource } from '../../datasource/helm';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport type { ApplicationDefinition, ApplicationSource } from './types';\nimport { fileTestRegex } from './util';\n\nfunction createDependency(\n  definition: ApplicationDefinition\n): PackageDependency | null {\n  let source: ApplicationSource;\n  switch (definition.kind) {\n    case 'Application':\n      source = definition?.spec?.source;\n      break;\n    case 'ApplicationSet':\n      source = definition?.spec?.template?.spec?.source;\n      break;\n  }\n\n  if (\n    !source ||\n    !is.nonEmptyString(source.repoURL) ||\n    !is.nonEmptyString(source.targetRevision)\n  ) {\n    return null;\n  }\n\n  // a chart variable is defined this is helm declaration\n  if (source.chart) {\n    return {\n      depName: source.chart,\n      registryUrls: [source.repoURL],\n      currentValue: source.targetRevision,\n      datasource: HelmDatasource.id,\n    };\n  }\n  return {\n    depName: source.repoURL,\n    currentValue: source.targetRevision,\n    datasource: GitTagsDatasource.id,\n  };\n}\n\nexport function extractPackageFile(\n  content: string,\n  fileName: string,\n  _config?: ExtractConfig\n): PackageFile | null {\n  // check for argo reference. API version for the kind attribute is used\n  if (fileTestRegex.test(content) === false) {\n    return null;\n  }\n\n  let definitions: ApplicationDefinition[];\n  try {\n    definitions = loadAll(content) as ApplicationDefinition[];\n  } catch (err) {\n    logger.debug({ err, fileName }, 'Failed to parse ArgoCD definition.');\n    return null;\n  }\n\n  const deps = definitions\n    .map((definition) => createDependency(definition))\n    .filter(is.truthy);\n\n  return deps.length ? { deps } : null;\n}\n"]}