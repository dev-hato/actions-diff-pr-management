{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/sbt/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { newlineRegex, regEx } from '../../../util/regex';\nimport { MavenDatasource } from '../../datasource/maven';\nimport { MAVEN_REPO } from '../../datasource/maven/common';\nimport { SbtPackageDatasource } from '../../datasource/sbt-package';\nimport {\n  SbtPluginDatasource,\n  defaultRegistryUrls as sbtPluginDefaultRegistries,\n} from '../../datasource/sbt-plugin';\nimport { get } from '../../versioning';\nimport * as mavenVersioning from '../../versioning/maven';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { ParseContext, ParseOptions } from './types';\n\nconst stripComment = (str: string): string =>\n  str.replace(regEx(/(^|\\s+)\\/\\/.*$/), '');\n\nconst isSingleLineDep = (str: string): boolean =>\n  regEx(/^\\s*(libraryDependencies|dependencyOverrides)\\s*\\+=\\s*/).test(str);\n\nconst isDepsBegin = (str: string): boolean =>\n  regEx(/^\\s*(libraryDependencies|dependencyOverrides)\\s*\\+\\+=\\s*/).test(str);\n\nconst isPluginDep = (str: string): boolean =>\n  regEx(/^\\s*addSbtPlugin\\s*\\(.*\\)\\s*$/).test(str);\n\nconst isStringLiteral = (str: string): boolean => regEx(/^\"[^\"]*\"$/).test(str);\n\nconst isScalaVersion = (str: string): boolean =>\n  regEx(/^\\s*(?:ThisBuild\\s*\\/\\s*)?scalaVersion\\s*:=\\s*\"[^\"]*\"[\\s,]*$/).test(\n    str\n  );\n\nconst getScalaVersion = (str: string): string =>\n  str\n    .replace(regEx(/^\\s*(?:ThisBuild\\s*\\/\\s*)?scalaVersion\\s*:=\\s*\"/), '')\n    .replace(regEx(/\"[\\s,]*$/), '');\n\nconst isPackageFileVersion = (str: string): boolean =>\n  regEx(/^(version\\s*:=\\s*).*$/).test(str);\n\nconst getPackageFileVersion = (str: string): string =>\n  str\n    .replace(regEx(/^\\s*version\\s*:=\\s*/), '')\n    .replace(regEx(/[\\s,]*$/), '')\n    .replace(regEx(/\"/g), '');\n\n/*\n  https://www.scala-sbt.org/release/docs/Cross-Build.html#Publishing+conventions\n */\nconst normalizeScalaVersion = (str: string): string => {\n  // istanbul ignore if\n  if (!str) {\n    return str;\n  }\n  const versioning = get(mavenVersioning.id);\n  if (versioning.isVersion(str)) {\n    // Do not normalize unstable versions\n    if (!versioning.isStable(str)) {\n      return str;\n    }\n    // Do not normalize versions prior to 2.10\n    if (!versioning.isGreaterThan(str, '2.10.0')) {\n      return str;\n    }\n  }\n  if (regEx(/^\\d+\\.\\d+\\.\\d+$/).test(str)) {\n    return str.replace(regEx(/^(\\d+)\\.(\\d+)\\.\\d+$/), '$1.$2');\n  }\n  // istanbul ignore next\n  return str;\n};\n\nconst isScalaVersionVariable = (str: string): boolean =>\n  regEx(\n    /^\\s*(?:ThisBuild\\s*\\/\\s*)?scalaVersion\\s*:=\\s*[_a-zA-Z][_a-zA-Z0-9]*[\\s,]*$/\n  ).test(str);\n\nconst getScalaVersionVariable = (str: string): string =>\n  str\n    .replace(regEx(/^\\s*(?:ThisBuild\\s*\\/\\s*)?scalaVersion\\s*:=\\s*/), '')\n    .replace(regEx(/[\\s,]*$/), '');\n\nconst isResolver = (str: string): boolean =>\n  regEx(\n    /^\\s*(resolvers\\s*\\+\\+?=\\s*((Seq|List|Stream)\\()?)?\"[^\"]*\"\\s*at\\s*\"[^\"]*\"[\\s,)]*$/\n  ).test(str);\nconst getResolverUrl = (str: string): string =>\n  str\n    .replace(\n      regEx(\n        /^\\s*(resolvers\\s*\\+\\+?=\\s*((Seq|List|Stream)\\()?)?\"[^\"]*\"\\s*at\\s*\"/\n      ),\n      ''\n    )\n    .replace(regEx(/\"[\\s,)]*$/), '');\n\nconst isVarDependency = (str: string): boolean =>\n  regEx(\n    /^\\s*(private\\s*)?(lazy\\s*)?val\\s[_a-zA-Z][_a-zA-Z0-9]*\\s*=.*(%%?).*%.*/\n  ).test(str);\n\nconst isVarDef = (str: string): boolean =>\n  regEx(\n    /^\\s*(private\\s*)?(lazy\\s*)?val\\s+[_a-zA-Z][_a-zA-Z0-9]*\\s*=\\s*\"[^\"]*\"\\s*$/\n  ).test(str);\n\nconst isVarSeqSingleLine = (str: string): boolean =>\n  regEx(\n    /^\\s*(private\\s*)?(lazy\\s*)?val\\s+[_a-zA-Z][_a-zA-Z0-9]*\\s*=\\s*(Seq|List|Stream)\\(.*\\).*\\s*$/\n  ).test(str);\n\nconst isVarSeqMultipleLine = (str: string): boolean =>\n  regEx(\n    /^\\s*(private\\s*)?(lazy\\s*)?val\\s+[_a-zA-Z][_a-zA-Z0-9]*\\s*=\\s*(Seq|List|Stream)\\(.*[^)]*.*$/\n  ).test(str);\n\nconst getVarName = (str: string): string =>\n  str\n    .replace(regEx(/^\\s*(private\\s*)?(lazy\\s*)?val\\s+/), '')\n    .replace(regEx(/\\s*=\\s*\"[^\"]*\"\\s*$/), '');\n\nconst isVarName = (str: string): boolean =>\n  regEx(/^[_a-zA-Z][_a-zA-Z0-9]*$/).test(str);\n\nconst getVarInfo = (str: string, ctx: ParseContext): { val: string } => {\n  const rightPart = str.replace(\n    regEx(/^\\s*(private\\s*)?(lazy\\s*)?val\\s+[_a-zA-Z][_a-zA-Z0-9]*\\s*=\\s*\"/),\n    ''\n  );\n  const val = rightPart.replace(regEx(/\"\\s*$/), '');\n  return { val };\n};\n\nfunction parseDepExpr(\n  expr: string,\n  ctx: ParseContext\n): PackageDependency | null {\n  const { scalaVersion, variables } = ctx;\n  let { depType } = ctx;\n\n  const isValidToken = (str: string): boolean =>\n    isStringLiteral(str) || (isVarName(str) && !!variables[str]);\n\n  const resolveToken = (str: string): string =>\n    isStringLiteral(str)\n      ? str.replace(regEx(/^\"/), '').replace(regEx(/\"$/), '')\n      : variables[str].val;\n\n  const tokens = expr\n    .trim()\n    .split(regEx(/(\"[^\"]*\")/g))\n    .map((x) => (regEx(/\"[^\"]*\"/).test(x) ? x : x.replace(regEx(/[()]+/g), '')))\n    .join('')\n    .split(regEx(/\\s*(%%?)\\s*|\\s*classifier\\s*/));\n\n  const [\n    rawGroupId,\n    groupOp,\n    rawArtifactId,\n    artifactOp,\n    rawVersion,\n    scopeOp,\n    rawScope,\n  ] = tokens;\n\n  if (!rawGroupId) {\n    return null;\n  }\n  if (!isValidToken(rawGroupId)) {\n    return null;\n  }\n\n  if (!rawArtifactId) {\n    return null;\n  }\n  if (!isValidToken(rawArtifactId)) {\n    return null;\n  }\n  if (artifactOp !== '%') {\n    return null;\n  }\n\n  if (!rawVersion) {\n    return null;\n  }\n  if (!isValidToken(rawVersion)) {\n    return null;\n  }\n\n  if (scopeOp && scopeOp !== '%') {\n    return null;\n  }\n\n  const groupId = resolveToken(rawGroupId);\n  const depName = `${groupId}:${resolveToken(rawArtifactId)}`;\n  const artifactId =\n    groupOp === '%%' && scalaVersion\n      ? `${resolveToken(rawArtifactId)}_${scalaVersion}`\n      : resolveToken(rawArtifactId);\n  const packageName = `${groupId}:${artifactId}`;\n  const currentValue = resolveToken(rawVersion);\n\n  if (!depType && rawScope) {\n    depType = rawScope.replace(regEx(/^\"/), '').replace(regEx(/\"$/), '');\n  }\n\n  const result: PackageDependency = {\n    depName,\n    packageName,\n    currentValue,\n  };\n\n  if (variables[rawVersion]) {\n    result.groupName = `${rawVersion}`;\n  }\n\n  if (depType) {\n    result.depType = depType;\n  }\n\n  return result;\n}\n\nfunction parseSbtLine(\n  acc: PackageFile & ParseOptions,\n  line: string,\n  lineIndex: number,\n  lines: string[]\n): PackageFile & ParseOptions {\n  const { deps, registryUrls = [], variables = {} } = acc;\n\n  let { isMultiDeps, scalaVersion, packageFileVersion } = acc;\n\n  const ctx: ParseContext = {\n    scalaVersion,\n    variables,\n  };\n\n  let dep: PackageDependency | null = null;\n  let scalaVersionVariable: string | null = null;\n  if (line !== '') {\n    if (isScalaVersion(line)) {\n      isMultiDeps = false;\n      const rawScalaVersion = getScalaVersion(line);\n      scalaVersion = normalizeScalaVersion(rawScalaVersion);\n      dep = {\n        datasource: MavenDatasource.id,\n        depName: 'scala',\n        packageName: 'org.scala-lang:scala-library',\n        currentValue: rawScalaVersion,\n        separateMinorPatch: true,\n      };\n    } else if (isScalaVersionVariable(line)) {\n      isMultiDeps = false;\n      scalaVersionVariable = getScalaVersionVariable(line);\n    } else if (isPackageFileVersion(line)) {\n      packageFileVersion = getPackageFileVersion(line);\n    } else if (isResolver(line)) {\n      isMultiDeps = false;\n      const url = getResolverUrl(line);\n      registryUrls.push(url);\n    } else if (isVarSeqSingleLine(line)) {\n      isMultiDeps = false;\n      const depExpr = line\n        .replace(regEx(/^.*(Seq|List|Stream)\\(\\s*/), '')\n        .replace(regEx(/\\).*$/), '');\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n      });\n    } else if (isVarSeqMultipleLine(line)) {\n      isMultiDeps = true;\n      const depExpr = line.replace(regEx(/^.*(Seq|List|Stream)\\(\\s*/), '');\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n      });\n    } else if (isVarDef(line)) {\n      variables[getVarName(line)] = getVarInfo(line, ctx);\n    } else if (isVarDependency(line)) {\n      isMultiDeps = false;\n      const depExpr = line.replace(\n        regEx(/^\\s*(private\\s*)?(lazy\\s*)?val\\s[_a-zA-Z][_a-zA-Z0-9]*\\s*=\\s*/),\n        ''\n      );\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n      });\n    } else if (isSingleLineDep(line)) {\n      isMultiDeps = false;\n      const depExpr = line.replace(regEx(/^.*\\+=\\s*/), '');\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n      });\n    } else if (isPluginDep(line)) {\n      isMultiDeps = false;\n      const rightPart = line.replace(regEx(/^\\s*addSbtPlugin\\s*\\(/), '');\n      const depExpr = rightPart.replace(regEx(/\\)\\s*$/), '');\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n        depType: 'plugin',\n      });\n    } else if (isDepsBegin(line)) {\n      isMultiDeps = true;\n    } else if (isMultiDeps) {\n      const rightPart = line.replace(regEx(/^[\\s,]*/), '');\n      const depExpr = rightPart.replace(regEx(/[\\s,]*$/), '');\n      dep = parseDepExpr(depExpr, {\n        ...ctx,\n      });\n    }\n  }\n\n  if (dep) {\n    if (!dep.datasource) {\n      if (dep.depType === 'plugin') {\n        dep.datasource = SbtPluginDatasource.id;\n        dep.registryUrls = [...registryUrls, ...sbtPluginDefaultRegistries];\n      } else {\n        dep.datasource = SbtPackageDatasource.id;\n      }\n    }\n    deps.push({\n      registryUrls,\n      ...dep,\n    });\n  }\n\n  if (lineIndex + 1 < lines.length) {\n    return {\n      ...acc,\n      isMultiDeps,\n      scalaVersion:\n        scalaVersion ||\n        (scalaVersionVariable &&\n          variables[scalaVersionVariable] &&\n          normalizeScalaVersion(variables[scalaVersionVariable].val)),\n      packageFileVersion,\n    };\n  }\n\n  return {\n    deps,\n    packageFileVersion,\n  };\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  if (!content) {\n    return null;\n  }\n  const equalsToNewLineRe = regEx(/=\\s*\\n/, 'gm');\n  const goodContentForParsing = content.replace(equalsToNewLineRe, '=');\n  const lines = goodContentForParsing.split(newlineRegex).map(stripComment);\n\n  const acc: PackageFile & ParseOptions = {\n    registryUrls: [MAVEN_REPO],\n    deps: [],\n    isMultiDeps: false,\n    scalaVersion: null,\n    variables: {},\n  };\n\n  // TODO: needs major refactoring?\n  const res = lines.reduce(parseSbtLine, acc);\n  return res.deps.length ? res : null;\n}\n"]}