{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmv3/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { DockerDatasource } from '../../datasource/docker';\nimport type { PackageDependency } from '../types';\nimport type { ChartDefinition, Repository } from './types';\n\nexport function parseRepository(\n  depName: string,\n  repositoryURL: string\n): PackageDependency {\n  const res: PackageDependency = {};\n\n  try {\n    const url = new URL(repositoryURL);\n    switch (url.protocol) {\n      case 'oci:':\n        res.datasource = DockerDatasource.id;\n        res.packageName = `${repositoryURL.replace('oci://', '')}/${depName}`;\n        break;\n      case 'file:':\n        res.skipReason = 'local-dependency';\n        break;\n      default:\n        res.registryUrls = [repositoryURL];\n    }\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing url');\n    res.skipReason = 'invalid-url';\n  }\n  return res;\n}\n\n/**\n * Resolves alias in repository string.\n *\n * @param repository to be resolved string\n * @param registryAliases Records containing registryAliases as key and to be resolved URLs as values\n *\n * @returns  resolved alias. If repository does not contain an alias the repository string will be returned. Should it contain an alias which can not be resolved using `registryAliases`, null will be returned\n */\nexport function resolveAlias(\n  repository: string,\n  registryAliases: Record<string, string>\n): string | null {\n  if (!isAlias(repository)) {\n    return repository;\n  }\n\n  const repoWithPrefixRemoved = repository.slice(repository[0] === '@' ? 1 : 6);\n  const alias = registryAliases[repoWithPrefixRemoved];\n  if (alias) {\n    return alias;\n  }\n  return null;\n}\n\nexport function getRepositories(definitions: ChartDefinition[]): Repository[] {\n  const repositoryList = definitions\n    .flatMap((value) => value.dependencies)\n    .filter((dependency) => dependency.repository) // only keep non-local references --> if no repository is defined the chart will be searched in charts/<name>\n    .filter((dependency) => !isAlias(dependency.repository)) // do not add registryAliases\n    .filter((dependency) => !dependency.repository.startsWith('file:')) // skip repositories which are locally referenced\n    .map((dependency) => {\n      // remove additional keys to prevent interference at deduplication\n      return {\n        name: dependency.name,\n        repository: dependency.repository,\n      };\n    });\n  const dedup = new Set();\n  return repositoryList.filter((el) => {\n    const duplicate = dedup.has(el.repository);\n    dedup.add(el.repository);\n    return !duplicate;\n  });\n}\n\nexport function isAlias(repository: string): boolean {\n  if (!repository) {\n    return false;\n  }\n  return repository.startsWith('@') || repository.startsWith('alias:');\n}\n\nexport function isOCIRegistry(repository: Repository): boolean {\n  return repository.repository.startsWith('oci://');\n}\n\nexport function aliasRecordToRepositories(\n  registryAliases: Record<string, string>\n): Repository[] {\n  return Object.entries(registryAliases).map(([alias, url]) => {\n    return {\n      name: alias,\n      repository: url,\n    };\n  });\n}\n"]}