{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmv3/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import yaml from 'js-yaml';\nimport { quote } from 'shlex';\nimport upath from 'upath';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions, ToolConstraint } from '../../../util/exec/types';\nimport {\n  getParentDir,\n  getSiblingFileName,\n  privateCacheDir,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport * as hostRules from '../../../util/host-rules';\nimport { DockerDatasource } from '../../datasource/docker';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport type { ChartDefinition, Repository, RepositoryRule } from './types';\nimport {\n  aliasRecordToRepositories,\n  getRepositories,\n  isOCIRegistry,\n} from './utils';\n\nasync function helmCommands(\n  execOptions: ExecOptions,\n  manifestPath: string,\n  repositories: Repository[]\n): Promise<void> {\n  const cmd: string[] = [];\n  // set cache and config files to a path in privateCacheDir to prevent file and credential leakage\n  const helmConfigParameters = [\n    `--registry-config ${upath.join(privateCacheDir(), 'registry.json')}`,\n    `--repository-config ${upath.join(privateCacheDir(), 'repositories.yaml')}`,\n    `--repository-cache ${upath.join(privateCacheDir(), 'repositories')}`,\n  ];\n\n  // get OCI registries and detect host rules\n  const registries: RepositoryRule[] = repositories\n    .filter(isOCIRegistry)\n    .map((value) => {\n      return {\n        ...value,\n        repository: value.repository.replace('oci://', ''),\n        hostRule: hostRules.find({\n          url: value.repository.replace('oci://', 'https://'), //TODO we need to replace this, as oci:// will not be accepted as protocol\n          hostType: DockerDatasource.id,\n        }),\n      };\n    });\n\n  // if credentials for the registry have been found, log into it\n  registries.forEach((value) => {\n    const { username, password } = value.hostRule;\n    const parameters = [...helmConfigParameters];\n    if (username && password) {\n      parameters.push(`--username ${quote(username)}`);\n      parameters.push(`--password ${quote(password)}`);\n\n      cmd.push(\n        `helm registry login ${parameters.join(' ')} ${value.repository}`\n      );\n    }\n  });\n\n  // find classic Chart repositories and fitting host rules\n  const classicRepositories: RepositoryRule[] = repositories\n    .filter((repository) => !isOCIRegistry(repository))\n    .map((value) => {\n      return {\n        ...value,\n        hostRule: hostRules.find({\n          url: value.repository,\n        }),\n      };\n    });\n\n  // add helm repos if an alias or credentials for the url are defined\n  classicRepositories.forEach((value) => {\n    const { username, password } = value.hostRule;\n    const parameters = [...helmConfigParameters];\n    const isPrivateRepo = username && password;\n    if (isPrivateRepo) {\n      parameters.push(`--username ${quote(username)}`);\n      parameters.push(`--password ${quote(password)}`);\n    }\n\n    cmd.push(\n      `helm repo add ${value.name} ${parameters.join(' ')} ${value.repository}`\n    );\n  });\n\n  cmd.push(\n    `helm dependency update ${helmConfigParameters.join(' ')} ${quote(\n      getParentDir(manifestPath)\n    )}`\n  );\n\n  await exec(cmd, execOptions);\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`helmv3.updateArtifacts(${packageFileName})`);\n\n  const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';\n\n  if (\n    !isLockFileMaintenance &&\n    (updatedDeps === undefined || updatedDeps.length < 1)\n  ) {\n    logger.debug('No updated helmv3 deps - returning null');\n    return null;\n  }\n\n  const lockFileName = getSiblingFileName(packageFileName, 'Chart.lock');\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug('No Chart.lock found');\n    return null;\n  }\n  try {\n    // get repositories and registries defined in the package file\n    const packages = yaml.load(newPackageFileContent) as ChartDefinition; //TODO #9610\n    const locks = yaml.load(existingLockFileContent) as ChartDefinition; //TODO #9610\n\n    const chartDefinitions: ChartDefinition[] = [];\n    // prioritize registryAlias naming for Helm repositories\n    if (config.registryAliases) {\n      chartDefinitions.push({\n        dependencies: aliasRecordToRepositories(config.registryAliases),\n      });\n    }\n    chartDefinitions.push(packages, locks);\n\n    const repositories = getRepositories(chartDefinitions);\n\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    logger.debug('Updating ' + lockFileName);\n    const helmToolConstraint: ToolConstraint = {\n      toolName: 'helm',\n      constraint: config.constraints?.helm,\n    };\n\n    const execOptions: ExecOptions = {\n      docker: {\n        image: 'sidecar',\n      },\n      extraEnv: {\n        HELM_EXPERIMENTAL_OCI: '1',\n      },\n      toolConstraints: [helmToolConstraint],\n    };\n    await helmCommands(execOptions, packageFileName, repositories);\n    logger.debug('Returning updated Chart.lock');\n    const newHelmLockContent = await readLocalFile(lockFileName, 'utf8');\n    if (existingLockFileContent === newHelmLockContent) {\n      logger.debug('Chart.lock is unchanged');\n      return null;\n    }\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: newHelmLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, 'Failed to update Helm lock file');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}