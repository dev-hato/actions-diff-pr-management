{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gitlabci-include/extract.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,qCAA+B;AAC/B,mDAAsD;AACtD,4CAAyC;AACzC,+CAA4C;AAC5C,8DAAoE;AACpE,6CAAyD;AAGzD,SAAS,yBAAyB,CAAC,UAIlC;IACC,MAAM,GAAG,GAAsB;QAC7B,UAAU,EAAE,kCAAoB,CAAC,EAAE;QACnC,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,OAAO,EAAE,YAAY;KACtB,CAAC;IACF,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE;QACnB,GAAG,CAAC,UAAU,GAAG,iBAAiB,CAAC;QACnC,OAAO,GAAG,CAAC;KACZ;IACD,GAAG,CAAC,YAAY,GAAG,UAAU,CAAC,GAAG,CAAC;IAClC,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAgB,kBAAkB,CAAC,OAAe;IAChD,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,qBAAY,CAAC,GAAG,EAAE,CAAC;IAClD,IAAI;QACF,uBAAuB;QACvB,MAAM,GAAG,GAAQ,IAAA,cAAI,EAAC,IAAA,4BAAoB,EAAC,OAAO,CAAC,EAAE;YACnD,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QACH,IAAI,QAAQ,CAAC;QACb,IAAI,GAAG,EAAE,OAAO,IAAI,YAAE,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACzC,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC;SACxB;aAAM;YACL,QAAQ,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAC1B;QACD,KAAK,MAAM,UAAU,IAAI,QAAQ,EAAE;YACjC,IAAI,UAAU,EAAE,IAAI,IAAI,UAAU,CAAC,OAAO,EAAE;gBAC1C,MAAM,GAAG,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;gBAClD,IAAI,QAAQ,KAAK,QAAQ,IAAI,QAAQ,EAAE;oBACrC,GAAG,CAAC,YAAY,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBAClE;gBACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAChB;SACF;KACF;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,IAAI,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,gBAAgB,CAAC,EAAE;YAC3C,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,8CAA8C,CAAC,CAAC;SACvE;aAAM;YACL,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,qCAAqC,CAAC,CAAC;SAC7D;KACF;IACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AAlCD,gDAkCC","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { GitlabTagsDatasource } from '../../datasource/gitlab-tags';\nimport { replaceReferenceTags } from '../gitlabci/utils';\nimport type { PackageDependency, PackageFile } from '../types';\n\nfunction extractDepFromIncludeFile(includeObj: {\n  file: any;\n  project: string;\n  ref: string;\n}): PackageDependency {\n  const dep: PackageDependency = {\n    datasource: GitlabTagsDatasource.id,\n    depName: includeObj.project,\n    depType: 'repository',\n  };\n  if (!includeObj.ref) {\n    dep.skipReason = 'unknown-version';\n    return dep;\n  }\n  dep.currentValue = includeObj.ref;\n  return dep;\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  const { platform, endpoint } = GlobalConfig.get();\n  try {\n    // TODO: fix me (#9610)\n    const doc: any = load(replaceReferenceTags(content), {\n      json: true,\n    });\n    let includes;\n    if (doc?.include && is.array(doc.include)) {\n      includes = doc.include;\n    } else {\n      includes = [doc.include];\n    }\n    for (const includeObj of includes) {\n      if (includeObj?.file && includeObj.project) {\n        const dep = extractDepFromIncludeFile(includeObj);\n        if (platform === 'gitlab' && endpoint) {\n          dep.registryUrls = [endpoint.replace(regEx(/\\/api\\/v4\\/?/), '')];\n        }\n        deps.push(dep);\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.stack?.startsWith('YAMLException:')) {\n      logger.debug({ err }, 'YAML exception extracting GitLab CI includes');\n    } else {\n      logger.warn({ err }, 'Error extracting GitLab CI includes');\n    }\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}