{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/mix/extract.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,yCAA6E;AAC7E,+CAA0D;AAC1D,8CAAqD;AAGrD,MAAM,gBAAgB,GAAG,IAAA,aAAK,EAAC,kBAAkB,CAAC,CAAC;AACnD,MAAM,cAAc,GAAG,IAAA,aAAK,EAC1B,4HAA4H,CAC7H,CAAC;AAEK,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,QAAgB;IAEhB,eAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IACzC,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,oBAAY,CAAC,CAAC;IAE/C,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,CAAC,MAAM,EAAE,UAAU,IAAI,CAAC,EAAE;QACxE,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE;YAClD,eAAM,CAAC,KAAK,CAAC,+BAA+B,UAAU,EAAE,CAAC,CAAC;YAC1D,IAAI,SAAS,GAAG,EAAE,CAAC;YACnB,GAAG;gBACD,SAAS,IAAI,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC3C,UAAU,IAAI,CAAC,CAAC;aACjB,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAClD,IAAI,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC;YAC5D,OAAO,cAAc,EAAE;gBACrB,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,GACvD,cAAc,CAAC;gBAEjB,MAAM,GAAG,GAAsB;oBAC7B,OAAO;oBACP,YAAY;iBACb,CAAC;gBAEF,GAAG,CAAC,UAAU,GAAG,UAAU,IAAI,mBAAa,CAAC,EAAE,CAAC;gBAEhD,IAAI,GAAG,CAAC,UAAU,KAAK,mBAAa,CAAC,EAAE,EAAE;oBACvC,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;oBAChC,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC;iBAC3B;gBAED,IAAI,YAAY,EAAE;oBAChB,GAAG,CAAC,WAAW,IAAI,GAAG,GAAG,YAAY,CAAC;iBACvC;gBAED,IAAI,GAAG,CAAC,UAAU,KAAK,mBAAa,CAAC,EAAE,EAAE;oBACvC,GAAG,CAAC,UAAU,GAAG,mBAAmB,CAAC;iBACtC;gBAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACf,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC;aACzD;SACF;KACF;IACD,MAAM,GAAG,GAAgB,EAAE,IAAI,EAAE,CAAC;IAClC,MAAM,YAAY,GAChB,CAAC,MAAM,IAAA,6BAAwB,EAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,IAAI,UAAU,CAAC;IACvE,qBAAqB;IACrB,IAAI,MAAM,IAAA,oBAAe,EAAC,YAAY,CAAC,EAAE;QACvC,GAAG,CAAC,SAAS,GAAG,CAAC,YAAY,CAAC,CAAC;KAChC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAtDD,gDAsDC","sourcesContent":["import { logger } from '../../../logger';\nimport { findLocalSiblingOrParent, localPathExists } from '../../../util/fs';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { HexDatasource } from '../../datasource/hex';\nimport type { PackageDependency, PackageFile } from '../types';\n\nconst depSectionRegExp = regEx(/defp\\s+deps.*do/g);\nconst depMatchRegExp = regEx(\n  /{:(?<depName>\\w+),\\s*(?<datasource>[^:\"]+)?:?\\s*\"(?<currentValue>[^\"]+)\",?\\s*(?:organization: \"(?<organization>.*)\")?.*}/gm\n);\n\nexport async function extractPackageFile(\n  content: string,\n  fileName: string\n): Promise<PackageFile | null> {\n  logger.trace('mix.extractPackageFile()');\n  const deps: PackageDependency[] = [];\n  const contentArr = content.split(newlineRegex);\n\n  for (let lineNumber = 0; lineNumber < contentArr.length; lineNumber += 1) {\n    if (contentArr[lineNumber].match(depSectionRegExp)) {\n      logger.trace(`Matched dep section on line ${lineNumber}`);\n      let depBuffer = '';\n      do {\n        depBuffer += contentArr[lineNumber] + '\\n';\n        lineNumber += 1;\n      } while (!contentArr[lineNumber].includes('end'));\n      let depMatchGroups = depMatchRegExp.exec(depBuffer)?.groups;\n      while (depMatchGroups) {\n        const { depName, datasource, currentValue, organization } =\n          depMatchGroups;\n\n        const dep: PackageDependency = {\n          depName,\n          currentValue,\n        };\n\n        dep.datasource = datasource || HexDatasource.id;\n\n        if (dep.datasource === HexDatasource.id) {\n          dep.currentValue = currentValue;\n          dep.packageName = depName;\n        }\n\n        if (organization) {\n          dep.packageName += ':' + organization;\n        }\n\n        if (dep.datasource !== HexDatasource.id) {\n          dep.skipReason = 'non-hex-dep-types';\n        }\n\n        deps.push(dep);\n        depMatchGroups = depMatchRegExp.exec(depBuffer)?.groups;\n      }\n    }\n  }\n  const res: PackageFile = { deps };\n  const lockFileName =\n    (await findLocalSiblingOrParent(fileName, 'mix.lock')) ?? 'mix.lock';\n  // istanbul ignore if\n  if (await localPathExists(lockFileName)) {\n    res.lockFiles = [lockFileName];\n  }\n  return res;\n}\n"]}