{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/mix/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  findLocalSiblingOrParent,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport * as hostRules from '../../../util/host-rules';\n\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\n\nconst hexRepoUrl = 'https://hex.pm/';\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`mix.getArtifacts(${packageFileName})`);\n  if (updatedDeps.length < 1) {\n    logger.debug('No updated mix deps - returning null');\n    return null;\n  }\n\n  const lockFileName =\n    (await findLocalSiblingOrParent(packageFileName, 'mix.lock')) ?? 'mix.lock';\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n  } catch (err) {\n    logger.warn({ err }, 'mix.exs could not be written');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug('No mix.lock found');\n    return null;\n  }\n\n  const organizations = new Set<string>();\n\n  for (const { packageName } of updatedDeps) {\n    if (packageName) {\n      const [, organization] = packageName.split(':');\n\n      if (organization) {\n        organizations.add(organization);\n      }\n    }\n  }\n\n  const preCommands = Array.from(organizations).reduce((acc, organization) => {\n    const url = `${hexRepoUrl}api/repos/${organization}/`;\n    const { token } = hostRules.find({ url });\n\n    if (token) {\n      logger.debug(`Authenticating to hex organization ${organization}`);\n      const authCommand = `mix hex.organization auth ${organization} --key ${token}`;\n      return [...acc, authCommand];\n    }\n\n    return acc;\n  }, [] as string[]);\n\n  const execOptions: ExecOptions = {\n    cwdFile: packageFileName,\n    docker: {\n      image: 'sidecar',\n    },\n    toolConstraints: [\n      {\n        toolName: 'erlang',\n        // https://hexdocs.pm/elixir/1.13.4/compatibility-and-deprecations.html#compatibility-between-elixir-and-erlang-otp\n        constraint: '^24',\n      },\n      {\n        toolName: 'elixir',\n      },\n    ],\n    preCommands,\n  };\n  const command = [\n    'mix',\n    'deps.update',\n    ...updatedDeps\n      .map((dep) => dep.depName)\n      .filter(is.string)\n      .map((dep) => quote(dep)),\n  ].join(' ');\n\n  try {\n    await exec(command, execOptions);\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n\n    logger.debug(\n      { err, message: err.message, command },\n      'Failed to update Mix lock file'\n    );\n\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n\n  const newMixLockContent = await readLocalFile(lockFileName, 'utf8');\n  if (existingLockFileContent === newMixLockContent) {\n    logger.debug('mix.lock is unchanged');\n    return null;\n  }\n  logger.debug('Returning updated mix.lock');\n  return [\n    {\n      file: {\n        type: 'addition',\n        path: lockFileName,\n        contents: newMixLockContent,\n      },\n    },\n  ];\n}\n"]}