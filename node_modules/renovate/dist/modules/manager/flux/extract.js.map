{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/flux/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { loadAll } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport { GithubReleasesDatasource } from '../../datasource/github-releases';\nimport { HelmDatasource } from '../../datasource/helm';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport { isSystemManifest } from './common';\nimport type { FluxManifest, FluxResource, ResourceFluxManifest } from './types';\n\nfunction readManifest(content: string, file: string): FluxManifest | null {\n  if (isSystemManifest(file)) {\n    const versionMatch = regEx(\n      /#\\s*Flux\\s+Version:\\s*(\\S+)(?:\\s*#\\s*Components:\\s*([A-Za-z,-]+))?/\n    ).exec(content);\n    if (!versionMatch) {\n      return null;\n    }\n    return {\n      kind: 'system',\n      file: file,\n      version: versionMatch[1],\n      components: versionMatch[2],\n    };\n  }\n\n  const manifest: FluxManifest = {\n    kind: 'resource',\n    file: file,\n    releases: [],\n    repositories: [],\n  };\n  let resources: FluxResource[];\n  try {\n    resources = loadAll(content, null, { json: true }) as FluxResource[];\n  } catch (err) {\n    logger.debug({ err }, 'Failed to parse Flux manifest');\n    return null;\n  }\n\n  // It's possible there are other non-Flux HelmRelease/HelmRepository CRs out there, so we filter based on apiVersion.\n  for (const resource of resources) {\n    switch (resource?.kind) {\n      case 'HelmRelease':\n        if (\n          resource.apiVersion?.startsWith('helm.toolkit.fluxcd.io/') &&\n          resource.spec?.chart?.spec?.chart\n        ) {\n          manifest.releases.push(resource);\n        }\n        break;\n      case 'HelmRepository':\n        if (\n          resource.apiVersion?.startsWith('source.toolkit.fluxcd.io/') &&\n          resource.metadata?.name &&\n          resource.metadata.namespace &&\n          resource.spec?.url\n        ) {\n          manifest.repositories.push(resource);\n        }\n        break;\n    }\n  }\n\n  return manifest;\n}\n\nfunction resolveManifest(\n  manifest: FluxManifest,\n  context: FluxManifest[]\n): PackageDependency[] | null {\n  const resourceManifests = context.filter(\n    (manifest) => manifest.kind === 'resource'\n  ) as ResourceFluxManifest[];\n  const repositories = resourceManifests.flatMap(\n    (manifest) => manifest.repositories\n  );\n  let res: PackageDependency[] | null = null;\n  switch (manifest.kind) {\n    case 'system':\n      res = [\n        {\n          depName: 'fluxcd/flux2',\n          datasource: GithubReleasesDatasource.id,\n          currentValue: manifest.version,\n          managerData: {\n            components: manifest.components,\n          },\n        },\n      ];\n      break;\n    case 'resource':\n      res = manifest.releases.map((release) => {\n        const dep: PackageDependency = {\n          depName: release.spec.chart.spec.chart,\n          currentValue: release.spec.chart.spec.version,\n          datasource: HelmDatasource.id,\n        };\n\n        const matchingRepositories = repositories.filter(\n          (rep) =>\n            rep.kind === release.spec.chart.spec.sourceRef?.kind &&\n            rep.metadata.name === release.spec.chart.spec.sourceRef.name &&\n            rep.metadata.namespace ===\n              (release.spec.chart.spec.sourceRef.namespace ??\n                release.metadata?.namespace)\n        );\n        if (matchingRepositories.length) {\n          dep.registryUrls = matchingRepositories.map((repo) => repo.spec.url);\n        } else {\n          dep.skipReason = 'unknown-registry';\n        }\n\n        return dep;\n      });\n      break;\n  }\n\n  return res;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string\n): PackageFile | null {\n  const manifest = readManifest(content, packageFile);\n  if (!manifest) {\n    return null;\n  }\n  const deps = resolveManifest(manifest, [manifest]);\n  return deps?.length ? { deps: deps } : null;\n}\n\nexport async function extractAllPackageFiles(\n  _config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  const manifests: FluxManifest[] = [];\n  const results: PackageFile[] = [];\n\n  for (const file of packageFiles) {\n    const content = await readLocalFile(file, 'utf8');\n    // TODO #7154\n    const manifest = readManifest(content!, file);\n    if (manifest) {\n      manifests.push(manifest);\n    }\n  }\n\n  for (const manifest of manifests) {\n    const deps = resolveManifest(manifest, manifests);\n    if (deps?.length) {\n      results.push({\n        packageFile: manifest.file,\n        deps: deps,\n      });\n    }\n  }\n\n  return results.length ? results : null;\n}\n"]}