{"version":3,"file":"required-providers.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terraform/required-providers.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAE5C,qCAAoD;AAEpD,2CAAuD;AAEvD,iCAAiD;AAEpC,QAAA,4BAA4B,GAAG,IAAA,aAAK,EAAC,4BAA4B,CAAC,CAAC;AAEhF,SAAS,YAAY,CACnB,OAAe,EACf,KAAe,EACf,GAAsB;IAEtB,IAAI,UAAU,GAAG,OAAO,CAAC;IACzB,IAAI,IAAY,CAAC;IACjB,GAAG;QACD,UAAU,IAAI,CAAC,CAAC;QAChB,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QACzB,MAAM,OAAO,GAAG,8BAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE,MAAM,EAAE;YACnB,QAAQ,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE;gBAC1B,KAAK,QAAQ;oBACX,aAAa;oBACb,GAAG,CAAC,WAAY,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;oBAC/C,MAAM;gBAER,KAAK,SAAS;oBACZ,GAAG,CAAC,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;oBACxC,MAAM;gBAER,0BAA0B;gBAC1B;oBACE,MAAM;aACT;SACF;KACF,QAAQ,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;IAC9B,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAgB,iCAAiC,CAC/C,YAAoB,EACpB,KAAe;IAEf,IAAI,UAAU,GAAG,YAAY,CAAC;IAC9B,IAAI,IAAY,CAAC;IACjB,MAAM,IAAI,GAA8C,EAAE,CAAC;IAC3D,GAAG;QACD,MAAM,GAAG,GAA4C;YACnD,WAAW,EAAE;gBACX,uBAAuB,EAAE,iCAAwB,CAAC,kBAAkB;aACrE;SACF,CAAC;QAEF,UAAU,IAAI,CAAC,CAAC;QAChB,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QACzB,MAAM,OAAO,GAAG,8BAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE,MAAM,EAAE;YACnB,GAAG,CAAC,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;YACxC,aAAa;YACb,GAAG,CAAC,WAAY,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;YACjD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;aAAM;YACL,MAAM,SAAS,GAAG,oCAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE1D,IAAI,SAAS,EAAE,MAAM,EAAE;gBACrB,aAAa;gBACb,GAAG,CAAC,WAAY,CAAC,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;gBACnD,UAAU,GAAG,YAAY,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;gBAClD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAChB;SACF;KACF,QAAQ,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;IAC9B,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;AAC5C,CAAC;AAlCD,8EAkCC;AAED,SAAgB,gCAAgC,CAC9C,GAAsB,EACtB,KAAqB;IAErB,IAAA,oCAAwB,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACrC,GAAG,CAAC,OAAO,GAAG,mBAAmB,CAAC;AACpC,CAAC;AAND,4EAMC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport type { PackageDependency } from '../types';\nimport { TerraformDependencyTypes } from './common';\nimport type { ProviderLock } from './lockfile/types';\nimport { analyzeTerraformProvider } from './providers';\nimport type { ExtractionResult, TerraformManagerData } from './types';\nimport { keyValueExtractionRegex } from './util';\n\nexport const providerBlockExtractionRegex = regEx(/^\\s*(?<key>[^\\s]+)\\s+=\\s+{/);\n\nfunction extractBlock(\n  lineNum: number,\n  lines: string[],\n  dep: PackageDependency\n): number {\n  let lineNumber = lineNum;\n  let line: string;\n  do {\n    lineNumber += 1;\n    line = lines[lineNumber];\n    const kvMatch = keyValueExtractionRegex.exec(line);\n    if (kvMatch?.groups) {\n      switch (kvMatch.groups.key) {\n        case 'source':\n          // TODO #7154\n          dep.managerData!.source = kvMatch.groups.value;\n          break;\n\n        case 'version':\n          dep.currentValue = kvMatch.groups.value;\n          break;\n\n        /* istanbul ignore next */\n        default:\n          break;\n      }\n    }\n  } while (line.trim() !== '}');\n  return lineNumber;\n}\n\nexport function extractTerraformRequiredProviders(\n  startingLine: number,\n  lines: string[]\n): ExtractionResult {\n  let lineNumber = startingLine;\n  let line: string;\n  const deps: PackageDependency<TerraformManagerData>[] = [];\n  do {\n    const dep: PackageDependency<TerraformManagerData> = {\n      managerData: {\n        terraformDependencyType: TerraformDependencyTypes.required_providers,\n      },\n    };\n\n    lineNumber += 1;\n    line = lines[lineNumber];\n    const kvMatch = keyValueExtractionRegex.exec(line);\n    if (kvMatch?.groups) {\n      dep.currentValue = kvMatch.groups.value;\n      // TODO #7154\n      dep.managerData!.moduleName = kvMatch.groups.key;\n      deps.push(dep);\n    } else {\n      const nameMatch = providerBlockExtractionRegex.exec(line);\n\n      if (nameMatch?.groups) {\n        // TODO #7154\n        dep.managerData!.moduleName = nameMatch.groups.key;\n        lineNumber = extractBlock(lineNumber, lines, dep);\n        deps.push(dep);\n      }\n    }\n  } while (line.trim() !== '}');\n  return { lineNumber, dependencies: deps };\n}\n\nexport function analyzeTerraformRequiredProvider(\n  dep: PackageDependency,\n  locks: ProviderLock[]\n): void {\n  analyzeTerraformProvider(dep, locks);\n  dep.depType = `required_provider`;\n}\n"]}