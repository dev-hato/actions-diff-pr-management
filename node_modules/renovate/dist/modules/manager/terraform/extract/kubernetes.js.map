{"version":3,"file":"kubernetes.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/terraform/extract/kubernetes.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,+CAA4C;AAC5C,kDAA+C;AAE/C,sCAAqD;AAErD,kCAAkD;AAElD,SAAgB,kCAAkC,CAChD,YAAoB,EACpB,KAAe,EACf,YAAoB;IAEpB,IAAI,UAAU,GAAG,YAAY,CAAC;IAC9B,MAAM,IAAI,GAA6C,EAAE,CAAC;IAE1D;;;OAGG;IACH,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC;IACrB,GAAG;QACD,qBAAqB;QACrB,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,eAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACpD;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QAE/B,uBAAuB;QACvB,IAAI,YAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACnB,qIAAqI;YACrI,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;YAC7D,MAAM,cAAc,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;YAC/D,YAAY,GAAG,YAAY,GAAG,YAAY,GAAG,cAAc,CAAC;YAE5D,IAAI,IAAI,CAAC,KAAK,CAAC,IAAA,aAAK,EAAC,qCAAqC,CAAC,CAAC,EAAE;gBAC5D,WAAW,GAAG,YAAY,CAAC;aAC5B;iBAAM,IAAI,YAAY,GAAG,WAAW,EAAE;gBACrC,WAAW,GAAG,CAAC,CAAC,CAAC;aAClB;YAED,MAAM,WAAW,GAAwB;gBACvC,uBAAuB,EAAE,iCAAwB,CAAC,QAAQ;gBAC1D,YAAY;aACb,CAAC;YACF,MAAM,GAAG,GAA2C;gBAClD,WAAW;aACZ,CAAC;YAEF,MAAM,OAAO,GAAG,8BAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,OAAO,EAAE,MAAM,IAAI,WAAW,GAAG,CAAC,EAAE;gBACtC,QAAQ,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE;oBAC1B,KAAK,OAAO;wBACV,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;wBACvD,WAAW,CAAC,UAAU,GAAG,UAAU,CAAC;wBACpC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACf,MAAM;oBACR;wBACE,0BAA0B;wBAC1B,MAAM;iBACT;aACF;SACF;aAAM;YACL,8BAA8B;YAC9B,YAAY,GAAG,CAAC,CAAC;YACjB,WAAW,GAAG,CAAC,CAAC,CAAC;SAClB;QACD,UAAU,IAAI,CAAC,CAAC;KACjB,QAAQ,YAAY,KAAK,CAAC,EAAE;IAE7B,4EAA4E;IAC5E,UAAU,IAAI,CAAC,CAAC;IAChB,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;AAC5C,CAAC;AAnED,gFAmEC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../logger';\nimport { regEx } from '../../../../util/regex';\nimport type { PackageDependency } from '../../types';\nimport { TerraformDependencyTypes } from '../common';\nimport type { ExtractionResult, ResourceManagerData } from '../types';\nimport { keyValueExtractionRegex } from '../util';\n\nexport function extractTerraformKubernetesResource(\n  startingLine: number,\n  lines: string[],\n  resourceType: string\n): ExtractionResult {\n  let lineNumber = startingLine;\n  const deps: PackageDependency<ResourceManagerData>[] = [];\n\n  /**\n   * Iterates over all lines of the resource to extract the relevant key value pairs,\n   * e.g. the chart name for helm charts or the terraform_version for tfe_workspace\n   */\n  let braceCounter = 0;\n  let inContainer = -1;\n  do {\n    // istanbul ignore if\n    if (lineNumber > lines.length - 1) {\n      logger.debug(`Malformed Terraform file detected.`);\n    }\n\n    const line = lines[lineNumber];\n\n    // istanbul ignore else\n    if (is.string(line)) {\n      // `{` will be counted with +1 and `}` with -1. Therefore if we reach braceCounter == 0. We have found the end of the terraform block\n      const openBrackets = (line.match(regEx(/\\{/g)) ?? []).length;\n      const closedBrackets = (line.match(regEx(/\\}/g)) ?? []).length;\n      braceCounter = braceCounter + openBrackets - closedBrackets;\n\n      if (line.match(regEx(/^\\s*(?:init_)?container(?:\\s*\\{|$)/s))) {\n        inContainer = braceCounter;\n      } else if (braceCounter < inContainer) {\n        inContainer = -1;\n      }\n\n      const managerData: ResourceManagerData = {\n        terraformDependencyType: TerraformDependencyTypes.resource,\n        resourceType,\n      };\n      const dep: PackageDependency<ResourceManagerData> = {\n        managerData,\n      };\n\n      const kvMatch = keyValueExtractionRegex.exec(line);\n      if (kvMatch?.groups && inContainer > 0) {\n        switch (kvMatch.groups.key) {\n          case 'image':\n            managerData[kvMatch.groups.key] = kvMatch.groups.value;\n            managerData.sourceLine = lineNumber;\n            deps.push(dep);\n            break;\n          default:\n            /* istanbul ignore next */\n            break;\n        }\n      }\n    } else {\n      // stop - something went wrong\n      braceCounter = 0;\n      inContainer = -1;\n    }\n    lineNumber += 1;\n  } while (braceCounter !== 0);\n\n  // remove last lineNumber addition to not skip a line after the last bracket\n  lineNumber -= 1;\n  return { lineNumber, dependencies: deps };\n}\n"]}