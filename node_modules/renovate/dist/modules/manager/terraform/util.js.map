{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terraform/util.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAC5C,4EAAkF;AAElF,qCAAoD;AAGvC,QAAA,uBAAuB,GAAG,IAAA,aAAK,EAC1C,gDAAgD,CACjD,CAAC;AACW,QAAA,2BAA2B,GAAG,IAAA,aAAK,EAC9C,yDAAyD,CAC1D,CAAC;AAEF,SAAgB,0BAA0B,CACxC,KAAa;IAEb,QAAQ,KAAK,EAAE;QACb,KAAK,QAAQ,CAAC,CAAC;YACb,OAAO,iCAAwB,CAAC,MAAM,CAAC;SACxC;QACD,KAAK,UAAU,CAAC,CAAC;YACf,OAAO,iCAAwB,CAAC,QAAQ,CAAC;SAC1C;QACD,KAAK,oBAAoB,CAAC,CAAC;YACzB,OAAO,iCAAwB,CAAC,kBAAkB,CAAC;SACpD;QACD,KAAK,UAAU,CAAC,CAAC;YACf,OAAO,iCAAwB,CAAC,QAAQ,CAAC;SAC1C;QACD,KAAK,WAAW,CAAC,CAAC;YAChB,OAAO,iCAAwB,CAAC,iBAAiB,CAAC;SACnD;QACD,OAAO,CAAC,CAAC;YACP,OAAO,iCAAwB,CAAC,OAAO,CAAC;SACzC;KACF;AACH,CAAC;AAvBD,gEAuBC;AAED,SAAgB,2BAA2B,CACzC,OAAe,EACf,SAAmB;IAEnB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5D,CAAC;AALD,kEAKC;AAED,MAAM,eAAe,GAAG,IAAA,aAAK,EAAC,kBAAkB,CAAC,CAAC;AAClD,SAAgB,mBAAmB,CAAC,IAAY;IAC9C,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,OAAO,CAAC,CAAC,KAAK,CAAC;AACjB,CAAC;AAHD,kDAGC;AAED,SAAgB,yBAAyB,CAAC,GAAsB;IAC9D,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE;QACpB,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC;KAC/B;IAED,aAAa;IACb,IAAI,CAAC,GAAG,CAAC,WAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACnC,GAAG,CAAC,WAAW,GAAG,aAAa,GAAG,CAAC,WAAY,EAAE,CAAC;KACnD;IAED,sCAAsC;IACtC,aAAa;IACb,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAY,CAAC,WAAW,EAAE,CAAC;AACnD,CAAC;AAbD,8DAaC;AAED,SAAgB,gBAAgB,CAC9B,GAAsB,EACtB,KAAqB;IAErB,MAAM,cAAc,GAAG,GAAG,CAAC,YAAY;QACrC,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,gDAA2B,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACvD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAC1B,CAAC,IAAI,EAAE,EAAE,CACP,IAAI,CAAC,WAAW,KAAK,GAAG,CAAC,WAAW;QACpC,IAAI,CAAC,WAAW,KAAK,cAAc,CACtC,CAAC;IACF,IAAI,SAAS,EAAE;QACb,OAAO,SAAS,CAAC,OAAO,CAAC;KAC1B;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAhBD,4CAgBC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport { TerraformProviderDatasource } from '../../datasource/terraform-provider';\nimport type { PackageDependency } from '../types';\nimport { TerraformDependencyTypes } from './common';\nimport type { ProviderLock } from './lockfile/types';\n\nexport const keyValueExtractionRegex = regEx(\n  /^\\s*(?<key>[^\\s]+)\\s+=\\s+\"(?<value>[^\"]+)\"\\s*$/\n);\nexport const resourceTypeExtractionRegex = regEx(\n  /^\\s*resource\\s+\"(?<type>[^\\s]+)\"\\s+\"(?<name>[^\"]+)\"\\s*{/\n);\n\nexport function getTerraformDependencyType(\n  value: string\n): TerraformDependencyTypes {\n  switch (value) {\n    case 'module': {\n      return TerraformDependencyTypes.module;\n    }\n    case 'provider': {\n      return TerraformDependencyTypes.provider;\n    }\n    case 'required_providers': {\n      return TerraformDependencyTypes.required_providers;\n    }\n    case 'resource': {\n      return TerraformDependencyTypes.resource;\n    }\n    case 'terraform': {\n      return TerraformDependencyTypes.terraform_version;\n    }\n    default: {\n      return TerraformDependencyTypes.unknown;\n    }\n  }\n}\n\nexport function checkFileContainsDependency(\n  content: string,\n  checkList: string[]\n): boolean {\n  return checkList.some((check) => content.includes(check));\n}\n\nconst pathStringRegex = regEx(/(.|..)?(\\/[^/])+/);\nexport function checkIfStringIsPath(path: string): boolean {\n  const match = pathStringRegex.exec(path);\n  return !!match;\n}\n\nexport function massageProviderLookupName(dep: PackageDependency): void {\n  if (!dep.packageName) {\n    dep.packageName = dep.depName;\n  }\n\n  // TODO #7154\n  if (!dep.packageName!.includes('/')) {\n    dep.packageName = `hashicorp/${dep.packageName!}`;\n  }\n\n  // handle cases like `Telmate/proxmox`\n  // TODO #7154\n  dep.packageName = dep.packageName!.toLowerCase();\n}\n\nexport function getLockedVersion(\n  dep: PackageDependency,\n  locks: ProviderLock[]\n): string | undefined {\n  const depRegistryUrl = dep.registryUrls\n    ? dep.registryUrls[0]\n    : TerraformProviderDatasource.defaultRegistryUrls[0];\n  const foundLock = locks.find(\n    (lock) =>\n      lock.packageName === dep.packageName &&\n      lock.registryUrl === depRegistryUrl\n  );\n  if (foundLock) {\n    return foundLock.version;\n  }\n  return undefined;\n}\n"]}