{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terraform/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport { TerraformDependencyTypes } from './common';\nimport type { ProviderLock } from './lockfile/types';\nimport { extractLocks, findLockFile, readLockFile } from './lockfile/util';\nimport { analyseTerraformModule, extractTerraformModule } from './modules';\nimport {\n  analyzeTerraformProvider,\n  extractTerraformProvider,\n} from './providers';\nimport {\n  analyzeTerraformRequiredProvider,\n  extractTerraformRequiredProviders,\n} from './required-providers';\nimport {\n  analyseTerraformVersion,\n  extractTerraformRequiredVersion,\n} from './required-version';\nimport {\n  analyseTerraformResource,\n  extractTerraformResource,\n} from './resources';\nimport type { ExtractionResult, TerraformManagerData } from './types';\nimport {\n  checkFileContainsDependency,\n  getTerraformDependencyType,\n} from './util';\n\nconst dependencyBlockExtractionRegex = regEx(\n  /^\\s*(?<type>[a-z_]+)\\s+(\"(?<packageName>[^\"]+)\"\\s+)?(\"(?<terraformName>[^\"]+)\"\\s+)?{\\s*$/\n);\nconst contentCheckList = [\n  'module \"',\n  'provider \"',\n  '\"docker_',\n  '\"kubernetes_',\n  'required_providers ',\n  ' \"helm_release\" ',\n  ' \"docker_image\" ',\n  'required_version',\n  'terraform_version', // part of tfe_workspace\n];\n\nexport async function extractPackageFile(\n  content: string,\n  fileName: string,\n  config: ExtractConfig\n): Promise<PackageFile | null> {\n  logger.trace({ content }, 'terraform.extractPackageFile()');\n  if (!checkFileContainsDependency(content, contentCheckList)) {\n    logger.trace(\n      { fileName },\n      'preflight content check has not found any relevant content'\n    );\n    return null;\n  }\n  let deps: PackageDependency<TerraformManagerData>[] = [];\n  try {\n    const lines = content.split(newlineRegex);\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      const line = lines[lineNumber];\n      const terraformDependency = dependencyBlockExtractionRegex.exec(line);\n      if (terraformDependency?.groups) {\n        logger.trace(\n          `Matched ${terraformDependency.groups.type} on line ${lineNumber}`\n        );\n        const tfDepType = getTerraformDependencyType(\n          terraformDependency.groups.type\n        );\n        let result: ExtractionResult | null = null;\n        switch (tfDepType) {\n          case TerraformDependencyTypes.required_providers: {\n            result = extractTerraformRequiredProviders(lineNumber, lines);\n            break;\n          }\n          case TerraformDependencyTypes.provider: {\n            result = extractTerraformProvider(\n              lineNumber,\n              lines,\n              terraformDependency.groups.packageName\n            );\n            break;\n          }\n          case TerraformDependencyTypes.module: {\n            result = extractTerraformModule(\n              lineNumber,\n              lines,\n              terraformDependency.groups.packageName\n            );\n            break;\n          }\n          case TerraformDependencyTypes.resource: {\n            result = extractTerraformResource(lineNumber, lines);\n            break;\n          }\n          case TerraformDependencyTypes.terraform_version: {\n            result = extractTerraformRequiredVersion(lineNumber, lines);\n            break;\n          }\n          /* istanbul ignore next */\n          default:\n            logger.trace(\n              `Could not identify TerraformDependencyType ${terraformDependency.groups.type} on line ${lineNumber}.`\n            );\n            break;\n        }\n        if (result) {\n          lineNumber = result.lineNumber;\n          deps = deps.concat(result.dependencies);\n          result = null;\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting terraform plugins');\n  }\n\n  const locks: ProviderLock[] = [];\n  const lockFilePath = findLockFile(fileName);\n  if (lockFilePath) {\n    const lockFileContent = await readLockFile(lockFilePath);\n    if (lockFileContent) {\n      const extractedLocks = extractLocks(lockFileContent);\n      if (is.nonEmptyArray(extractedLocks)) {\n        locks.push(...extractedLocks);\n      }\n    }\n  }\n\n  deps.forEach((dep) => {\n    switch (dep.managerData?.terraformDependencyType) {\n      case TerraformDependencyTypes.required_providers:\n        analyzeTerraformRequiredProvider(dep, locks);\n        break;\n      case TerraformDependencyTypes.provider:\n        analyzeTerraformProvider(dep, locks);\n        break;\n      case TerraformDependencyTypes.module:\n        analyseTerraformModule(dep);\n        break;\n      case TerraformDependencyTypes.resource:\n        analyseTerraformResource(dep);\n        break;\n      case TerraformDependencyTypes.terraform_version:\n        analyseTerraformVersion(dep);\n        break;\n      /* istanbul ignore next */\n      default:\n    }\n\n    delete dep.managerData;\n  });\n  if (deps.some((dep) => dep.skipReason !== 'local')) {\n    return { deps };\n  }\n  return null;\n}\n"]}