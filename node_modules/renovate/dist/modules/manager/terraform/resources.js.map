{"version":3,"file":"resources.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terraform/resources.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { HelmDatasource } from '../../datasource/helm';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency } from '../types';\nimport { TerraformDependencyTypes, TerraformResourceTypes } from './common';\nimport { extractTerraformKubernetesResource } from './extract/kubernetes';\nimport { analyseTerraformVersion } from './required-version';\nimport type { ExtractionResult, ResourceManagerData } from './types';\nimport {\n  checkIfStringIsPath,\n  keyValueExtractionRegex,\n  resourceTypeExtractionRegex,\n} from './util';\n\nfunction applyDockerDependency(\n  dep: PackageDependency<ResourceManagerData>,\n  value: string\n): void {\n  const dockerDep = getDep(value);\n  Object.assign(dep, dockerDep);\n}\n\nexport function extractTerraformResource(\n  startingLine: number,\n  lines: string[]\n): ExtractionResult {\n  let lineNumber = startingLine;\n  const line = lines[lineNumber];\n  const deps: PackageDependency<ResourceManagerData>[] = [];\n  const managerData: ResourceManagerData = {\n    terraformDependencyType: TerraformDependencyTypes.resource,\n  };\n  const dep: PackageDependency<ResourceManagerData> = {\n    managerData,\n  };\n\n  const typeMatch = resourceTypeExtractionRegex.exec(line);\n\n  // Sets the resourceType, e.g., 'resource \"helm_release\" \"test_release\"' -> helm_release\n  const resourceType = typeMatch?.groups?.type;\n\n  const isKnownType =\n    resourceType &&\n    Object.keys(TerraformResourceTypes).some((key) => {\n      return TerraformResourceTypes[key].includes(resourceType);\n    });\n\n  if (isKnownType && resourceType.startsWith('kubernetes_')) {\n    return extractTerraformKubernetesResource(\n      startingLine,\n      lines,\n      resourceType\n    );\n  }\n\n  managerData.resourceType = isKnownType\n    ? resourceType\n    : TerraformResourceTypes.unknown[0];\n\n  /**\n   * Iterates over all lines of the resource to extract the relevant key value pairs,\n   * e.g. the chart name for helm charts or the terraform_version for tfe_workspace\n   */\n  let braceCounter = 0;\n  do {\n    // istanbul ignore if\n    if (lineNumber > lines.length - 1) {\n      logger.debug(`Malformed Terraform file detected.`);\n    }\n\n    const line = lines[lineNumber];\n\n    // istanbul ignore else\n    if (is.string(line)) {\n      // `{` will be counted with +1 and `}` with -1. Therefore if we reach braceCounter == 0. We have found the end of the terraform block\n      const openBrackets = (line.match(regEx(/\\{/g)) ?? []).length;\n      const closedBrackets = (line.match(regEx(/\\}/g)) ?? []).length;\n      braceCounter = braceCounter + openBrackets - closedBrackets;\n\n      const kvMatch = keyValueExtractionRegex.exec(line);\n      if (kvMatch?.groups) {\n        switch (kvMatch.groups.key) {\n          case 'chart':\n          case 'image':\n          case 'name':\n          case 'repository':\n            managerData[kvMatch.groups.key] = kvMatch.groups.value;\n            break;\n          case 'version':\n          case 'terraform_version':\n            dep.currentValue = kvMatch.groups.value;\n            break;\n          default:\n            /* istanbul ignore next */\n            break;\n        }\n      }\n    } else {\n      // stop - something went wrong\n      braceCounter = 0;\n    }\n    lineNumber += 1;\n  } while (braceCounter !== 0);\n  deps.push(dep);\n\n  // remove last lineNumber addition to not skip a line after the last bracket\n  lineNumber -= 1;\n  return { lineNumber, dependencies: deps };\n}\n\nexport function analyseTerraformResource(\n  dep: PackageDependency<ResourceManagerData>\n): void {\n  switch (dep.managerData?.resourceType) {\n    case TerraformResourceTypes.generic_image_resource.find(\n      (key) => key === dep.managerData?.resourceType\n    ):\n      if (dep.managerData.image) {\n        applyDockerDependency(dep, dep.managerData.image);\n        dep.depType = dep.managerData.resourceType;\n      } else {\n        dep.skipReason = 'invalid-dependency-specification';\n      }\n      break;\n\n    case TerraformResourceTypes.docker_image[0]:\n      if (dep.managerData.name) {\n        applyDockerDependency(dep, dep.managerData.name);\n        dep.depType = 'docker_image';\n      } else {\n        dep.skipReason = 'invalid-dependency-specification';\n      }\n      break;\n\n    case TerraformResourceTypes.helm_release[0]:\n      if (!dep.managerData.chart) {\n        dep.skipReason = 'invalid-name';\n      } else if (checkIfStringIsPath(dep.managerData.chart)) {\n        dep.skipReason = 'local-chart';\n      }\n      dep.depType = 'helm_release';\n      // TODO #7154\n      dep.registryUrls = [dep.managerData.repository!];\n      dep.depName = dep.managerData.chart;\n      dep.datasource = HelmDatasource.id;\n      break;\n\n    case TerraformResourceTypes.tfe_workspace[0]:\n      if (dep.currentValue) {\n        analyseTerraformVersion(dep);\n        dep.depType = 'tfe_workspace';\n      } else {\n        dep.skipReason = 'no-version';\n      }\n      break;\n\n    default:\n      dep.skipReason = 'invalid-value';\n      break;\n  }\n}\n"]}