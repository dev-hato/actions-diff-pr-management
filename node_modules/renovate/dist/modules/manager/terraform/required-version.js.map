{"version":3,"file":"required-version.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terraform/required-version.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,+CAA4C;AAC5C,sEAA4E;AAE5E,qCAAoD;AAEpD,iCAAiD;AAEjD,SAAgB,+BAA+B,CAC7C,YAAoB,EACpB,KAAe;IAEf,MAAM,IAAI,GAA8C,EAAE,CAAC;IAC3D,IAAI,UAAU,GAAG,YAAY,CAAC;IAC9B,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,GAAG;QACD,qBAAqB;QACrB,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,eAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACpD;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QAC/B,oIAAoI;QACpI,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;QAC7D,MAAM,cAAc,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;QAC/D,YAAY,GAAG,YAAY,GAAG,YAAY,GAAG,cAAc,CAAC;QAE5D,MAAM,OAAO,GAAG,8BAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,OAAO,EAAE,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,GAAG,KAAK,kBAAkB,EAAE;YAChE,MAAM,GAAG,GAA4C;gBACnD,YAAY,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK;gBAClC,UAAU;gBACV,WAAW,EAAE;oBACX,uBAAuB,EAAE,iCAAwB,CAAC,iBAAiB;iBACpE;aACF,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACf,gFAAgF;YAChF,uGAAuG;YACvG,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;SACzD;QAED,UAAU,IAAI,CAAC,CAAC;KACjB,QAAQ,YAAY,KAAK,CAAC,EAAE;IAC7B,OAAO,IAAI,CAAC;AACd,CAAC;AArCD,0EAqCC;AAED,SAAgB,uBAAuB,CAAC,GAAsB;IAC5D,GAAG,CAAC,OAAO,GAAG,kBAAkB,CAAC;IACjC,GAAG,CAAC,UAAU,GAAG,0CAAwB,CAAC,EAAE,CAAC;IAC7C,GAAG,CAAC,OAAO,GAAG,qBAAqB,CAAC;IACpC,GAAG,CAAC,cAAc,GAAG,kBAAkB,CAAC;AAC1C,CAAC;AALD,0DAKC","sourcesContent":["import { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { GithubReleasesDatasource } from '../../datasource/github-releases';\nimport type { PackageDependency } from '../types';\nimport { TerraformDependencyTypes } from './common';\nimport type { ExtractionResult, TerraformManagerData } from './types';\nimport { keyValueExtractionRegex } from './util';\n\nexport function extractTerraformRequiredVersion(\n  startingLine: number,\n  lines: string[]\n): ExtractionResult | null {\n  const deps: PackageDependency<TerraformManagerData>[] = [];\n  let lineNumber = startingLine;\n  let braceCounter = 0;\n  do {\n    // istanbul ignore if\n    if (lineNumber > lines.length - 1) {\n      logger.debug(`Malformed Terraform file detected.`);\n    }\n\n    const line = lines[lineNumber];\n    // `{` will be counted wit +1 and `}` with -1. Therefore if we reach braceCounter == 0. We have found the end of the terraform block\n    const openBrackets = (line.match(regEx(/\\{/g)) ?? []).length;\n    const closedBrackets = (line.match(regEx(/\\}/g)) ?? []).length;\n    braceCounter = braceCounter + openBrackets - closedBrackets;\n\n    const kvMatch = keyValueExtractionRegex.exec(line);\n    if (kvMatch?.groups && kvMatch.groups.key === 'required_version') {\n      const dep: PackageDependency<TerraformManagerData> = {\n        currentValue: kvMatch.groups.value,\n        lineNumber,\n        managerData: {\n          terraformDependencyType: TerraformDependencyTypes.terraform_version,\n        },\n      };\n      deps.push(dep);\n      // returning starting line as required_providers are also in the terraform block\n      // if we would return the position of the required_version line we would potentially skip the providers\n      return { lineNumber: startingLine, dependencies: deps };\n    }\n\n    lineNumber += 1;\n  } while (braceCounter !== 0);\n  return null;\n}\n\nexport function analyseTerraformVersion(dep: PackageDependency): void {\n  dep.depType = 'required_version';\n  dep.datasource = GithubReleasesDatasource.id;\n  dep.depName = 'hashicorp/terraform';\n  dep.extractVersion = 'v(?<version>.*)$';\n}\n"]}