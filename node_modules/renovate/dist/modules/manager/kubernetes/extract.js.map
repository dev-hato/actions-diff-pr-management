{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/kubernetes/extract.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,qCAAkC;AAClC,4CAAyC;AACzC,+CAA0D;AAC1D,mDAA+C;AAI/C,SAAgB,kBAAkB,CAChC,OAAe,EACf,QAAgB;IAEhB,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;IAEhD,MAAM,oBAAoB,GACxB,IAAA,aAAK,EAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;QACxC,IAAA,aAAK,EAAC,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,IAAI,CAAC,oBAAoB,EAAE;QACzB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,IAAI,GAAwB;QAChC,GAAG,aAAa,CAAC,OAAO,CAAC;QACzB,GAAG,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC;KAClC,CAAC;IAEF,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC;AAnBD,gDAmBC;AAED,SAAS,aAAa,CAAC,OAAe;IACpC,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC,oBAAY,CAAC,EAAE;QAC9C,MAAM,KAAK,GAAG,IAAA,aAAK,EAAC,0CAA0C,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3E,IAAI,KAAK,EAAE;YACT,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC;YAChC,eAAM,CAAC,KAAK,CACV;gBACE,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,YAAY,EAAE,GAAG,CAAC,YAAY;gBAC9B,aAAa,EAAE,GAAG,CAAC,aAAa;aACjC,EACD,kBAAkB,CACnB,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AACjE,CAAC;AAED,SAAS,WAAW,CAAC,OAAe,EAAE,QAAgB;IACpD,IAAI,GAA0C,CAAC;IAE/C,IAAI;QACF,GAAG,GAAG,IAAA,iBAAO,EAAC,OAAO,CAA8B,CAAC;KACrD;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,sCAAsC,CAAC,CAAC;QACxE,OAAO,EAAE,CAAC;KACX;IAED,OAAO,GAAG;SACP,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC;SACjB,MAAM,CACL,CAAC,CAAC,EAAE,EAAE,CACJ,YAAE,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC;QACzC,YAAE,CAAC,8BAA8B,CAAC,CAAC,CAAC,UAAU,CAAC,CAClD;SACA,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;QACvB,OAAO,EAAE,aAAa,CAAC,IAAI;QAC3B,YAAY,EAAE,aAAa,CAAC,UAAU;KACvC,CAAC,CAAC,CAAC;AACR,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { loadAll } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { KubernetesConfiguration } from './types';\n\nexport function extractPackageFile(\n  content: string,\n  fileName: string\n): PackageFile | null {\n  logger.trace('kubernetes.extractPackageFile()');\n\n  const isKubernetesManifest =\n    regEx(/\\s*apiVersion\\s*:/).test(content) &&\n    regEx(/\\s*kind\\s*:/).test(content);\n  if (!isKubernetesManifest) {\n    return null;\n  }\n\n  const deps: PackageDependency[] = [\n    ...extractImages(content),\n    ...extractApis(content, fileName),\n  ];\n\n  return deps.length ? { deps } : null;\n}\n\nfunction extractImages(content: string): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n\n  for (const line of content.split(newlineRegex)) {\n    const match = regEx(/^\\s*-?\\s*image:\\s*'?\"?([^\\s'\"]+)'?\"?\\s*$/).exec(line);\n    if (match) {\n      const currentFrom = match[1];\n      const dep = getDep(currentFrom);\n      logger.debug(\n        {\n          depName: dep.depName,\n          currentValue: dep.currentValue,\n          currentDigest: dep.currentDigest,\n        },\n        'Kubernetes image'\n      );\n      deps.push(dep);\n    }\n  }\n\n  return deps.filter((dep) => !dep.currentValue?.includes('${'));\n}\n\nfunction extractApis(content: string, fileName: string): PackageDependency[] {\n  let doc: KubernetesConfiguration[] | undefined;\n\n  try {\n    doc = loadAll(content) as KubernetesConfiguration[];\n  } catch (err) {\n    logger.debug({ err, fileName }, 'Failed to parse Kubernetes manifest.');\n    return [];\n  }\n\n  return doc\n    .filter(is.truthy)\n    .filter(\n      (m) =>\n        is.nonEmptyStringAndNotWhitespace(m.kind) &&\n        is.nonEmptyStringAndNotWhitespace(m.apiVersion)\n    )\n    .map((configuration) => ({\n      depName: configuration.kind,\n      currentValue: configuration.apiVersion,\n    }));\n}\n"]}