{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/ansible/extract.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AACzC,+CAA0D;AAC1D,kFAA4D;AAC5D,mDAA+C;AAG/C,SAAgB,kBAAkB,CAAC,OAAe;IAChD,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAC7C,IAAI,IAAI,GAAwB,EAAE,CAAC;IACnC,MAAM,EAAE,GAAG,IAAA,aAAK,EAAC,qCAAqC,CAAC,CAAC;IACxD,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC,oBAAY,CAAC,EAAE;QAC9C,MAAM,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,KAAK,EAAE;YACT,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC;YAChC,eAAM,CAAC,KAAK,CACV;gBACE,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,YAAY,EAAE,GAAG,CAAC,YAAY;gBAC9B,aAAa,EAAE,GAAG,CAAC,aAAa;aACjC,EACD,6BAA6B,CAC9B,CAAC;YACF,GAAG,CAAC,UAAU,GAAG,gBAAgB,CAAC,EAAE,CAAC;YACrC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;IACD,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/D,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AA1BD,gDA0BC","sourcesContent":["import { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport * as dockerVersioning from '../../versioning/docker';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFile } from '../types';\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  logger.trace('ansible.extractPackageFile()');\n  let deps: PackageDependency[] = [];\n  const re = regEx(/^\\s*image:\\s*'?\"?([^\\s'\"]+)'?\"?\\s*$/);\n  for (const line of content.split(newlineRegex)) {\n    const match = re.exec(line);\n    if (match) {\n      const currentFrom = match[1];\n      const dep = getDep(currentFrom);\n      logger.debug(\n        {\n          depName: dep.depName,\n          currentValue: dep.currentValue,\n          currentDigest: dep.currentDigest,\n        },\n        'Docker image inside ansible'\n      );\n      dep.versioning = dockerVersioning.id;\n      deps.push(dep);\n    }\n  }\n  deps = deps.filter((dep) => !dep.currentValue?.includes('${'));\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}