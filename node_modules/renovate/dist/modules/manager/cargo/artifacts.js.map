{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cargo/artifacts.ts"],"names":[],"mappings":";;;AAAA,iCAA8B;AAC9B,sEAAoE;AACpE,4CAAyC;AACzC,6CAA0C;AAE1C,yCAI0B;AAG1B,KAAK,UAAU,WAAW,CACxB,YAAoB,EACpB,qBAA8B;IAE9B,IAAI,GAAG,GAAG,gCAAgC,IAAA,aAAK,EAAC,YAAY,CAAC,EAAE,CAAC;IAChE,4EAA4E;IAC5E,kFAAkF;IAClF,IAAI,CAAC,qBAAqB,EAAE;QAC1B,GAAG,IAAI,cAAc,CAAC;KACvB;IAED,MAAM,WAAW,GAAgB;QAC/B,MAAM,EAAE;YACN,KAAK,EAAE,MAAM;SACd;KACF,CAAC;IACF,MAAM,IAAA,WAAI,EAAC,GAAG,EAAE,WAAW,CAAC,CAAC;AAC/B,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,EACpC,eAAe,EACf,WAAW,EACX,qBAAqB,EACrB,MAAM,GACS;IACf,eAAM,CAAC,KAAK,CAAC,yBAAyB,eAAe,GAAG,CAAC,CAAC;IAE1D,MAAM,qBAAqB,GAAG,MAAM,CAAC,UAAU,KAAK,qBAAqB,CAAC;IAE1E,IACE,CAAC,qBAAqB;QACtB,CAAC,WAAW,KAAK,SAAS,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,EACrD;QACA,eAAM,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC;KACb;IAED,sEAAsE;IACtE,sEAAsE;IACtE,sBAAsB;IACtB,MAAM,YAAY,GAAG,MAAM,IAAA,6BAAwB,EACjD,eAAe,EACf,YAAY,CACb,CAAC;IACF,MAAM,uBAAuB,GAAG,YAAY;QAC1C,CAAC,CAAC,MAAM,IAAA,kBAAa,EAAC,YAAY,CAAC;QACnC,CAAC,CAAC,IAAI,CAAC;IACT,IAAI,CAAC,uBAAuB,IAAI,CAAC,YAAY,EAAE;QAC7C,eAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC;KACb;IACD,IAAI;QACF,MAAM,IAAA,mBAAc,EAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;QAC7D,eAAM,CAAC,KAAK,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC;QACzC,MAAM,WAAW,CAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;QAC1D,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC7C,MAAM,mBAAmB,GAAG,MAAM,IAAA,kBAAa,EAAC,YAAY,CAAC,CAAC;QAC9D,IAAI,uBAAuB,KAAK,mBAAmB,EAAE;YACnD,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;YACxC,OAAO,IAAI,CAAC;SACb;QACD,OAAO;YACL;gBACE,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,YAAY;oBAClB,QAAQ,EAAE,mBAAmB;iBAC9B;aACF;SACF,CAAC;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,qBAAqB;QACrB,IAAI,GAAG,CAAC,OAAO,KAAK,gCAAe,EAAE;YACnC,MAAM,GAAG,CAAC;SACX;QACD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;QAC1D,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,GAAG,CAAC,OAAO;iBACpB;aACF;SACF,CAAC;KACH;AACH,CAAC;AAlED,0CAkEC","sourcesContent":["import { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  findLocalSiblingOrParent,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\n\nasync function cargoUpdate(\n  manifestPath: string,\n  isLockFileMaintenance: boolean\n): Promise<void> {\n  let cmd = `cargo update --manifest-path ${quote(manifestPath)}`;\n  // If we're updating a specific crate, `cargo-update` requires `--workspace`\n  // for more information, see: https://github.com/renovatebot/renovate/issues/12332\n  if (!isLockFileMaintenance) {\n    cmd += ` --workspace`;\n  }\n\n  const execOptions: ExecOptions = {\n    docker: {\n      image: 'rust',\n    },\n  };\n  await exec(cmd, execOptions);\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`cargo.updateArtifacts(${packageFileName})`);\n\n  const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';\n\n  if (\n    !isLockFileMaintenance &&\n    (updatedDeps === undefined || updatedDeps.length < 1)\n  ) {\n    logger.debug('No updated cargo deps - returning null');\n    return null;\n  }\n\n  // For standalone package crates, the `Cargo.lock` will be in the same\n  // directory as `Cargo.toml` (ie. a sibling). For cargo workspaces, it\n  // will be further up.\n  const lockFileName = await findLocalSiblingOrParent(\n    packageFileName,\n    'Cargo.lock'\n  );\n  const existingLockFileContent = lockFileName\n    ? await readLocalFile(lockFileName)\n    : null;\n  if (!existingLockFileContent || !lockFileName) {\n    logger.debug('No Cargo.lock found');\n    return null;\n  }\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    logger.debug('Updating ' + lockFileName);\n    await cargoUpdate(packageFileName, isLockFileMaintenance);\n    logger.debug('Returning updated Cargo.lock');\n    const newCargoLockContent = await readLocalFile(lockFileName);\n    if (existingLockFileContent === newCargoLockContent) {\n      logger.debug('Cargo.lock is unchanged');\n      return null;\n    }\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: newCargoLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, 'Failed to update Cargo lock file');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}