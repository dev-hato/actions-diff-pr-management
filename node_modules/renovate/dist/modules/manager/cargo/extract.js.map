{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cargo/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { parse } from '@iarna/toml';\nimport { logger } from '../../../logger';\nimport type { SkipReason } from '../../../types';\nimport { findLocalSiblingOrParent, readLocalFile } from '../../../util/fs';\nimport { CrateDatasource } from '../../datasource/crate';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport type {\n  CargoConfig,\n  CargoManifest,\n  CargoRegistries,\n  CargoSection,\n} from './types';\n\nfunction extractFromSection(\n  parsedContent: CargoSection,\n  section: keyof CargoSection,\n  cargoRegistries: CargoRegistries,\n  target?: string\n): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n  const sectionContent = parsedContent[section];\n  if (!sectionContent) {\n    return [];\n  }\n  Object.keys(sectionContent).forEach((depName) => {\n    let skipReason: SkipReason | undefined;\n    let currentValue = sectionContent[depName];\n    let nestedVersion = false;\n    let registryUrls: string[] | undefined;\n    let packageName: string | undefined;\n\n    if (typeof currentValue !== 'string') {\n      const version = currentValue.version;\n      const path = currentValue.path;\n      const git = currentValue.git;\n      const registryName = currentValue.registry;\n\n      packageName = currentValue.package;\n\n      if (version) {\n        currentValue = version;\n        nestedVersion = true;\n        if (registryName) {\n          const registryUrl = cargoRegistries[registryName];\n          if (registryUrl) {\n            registryUrls = [registryUrl];\n          } else {\n            skipReason = 'unknown-registry';\n          }\n        }\n        if (path) {\n          skipReason = 'path-dependency';\n        }\n        if (git) {\n          skipReason = 'git-dependency';\n        }\n      } else if (path) {\n        currentValue = '';\n        skipReason = 'path-dependency';\n      } else if (git) {\n        currentValue = '';\n        skipReason = 'git-dependency';\n      } else {\n        currentValue = '';\n        skipReason = 'invalid-dependency-specification';\n      }\n    }\n    const dep: PackageDependency = {\n      depName,\n      depType: section,\n      currentValue: currentValue as any,\n      managerData: { nestedVersion },\n      datasource: CrateDatasource.id,\n    };\n    if (registryUrls) {\n      dep.registryUrls = registryUrls;\n    }\n    if (skipReason) {\n      dep.skipReason = skipReason;\n    }\n    if (target) {\n      dep.target = target;\n    }\n    if (packageName) {\n      dep.packageName = packageName;\n    }\n    deps.push(dep);\n  });\n  return deps;\n}\n\n/** Reads `.cargo/config.toml`, or, if not found, `.cargo/config` */\nasync function readCargoConfig(): Promise<CargoConfig | null> {\n  for (const configName of ['config.toml', 'config']) {\n    const path = `.cargo/${configName}`;\n    const payload = await readLocalFile(path, 'utf8');\n    if (payload) {\n      try {\n        return parse(payload) as CargoConfig;\n      } catch (err) {\n        logger.debug({ err }, `Error parsing ${path}`);\n      }\n      break;\n    }\n  }\n\n  logger.debug('Neither .cargo/config nor .cargo/config.toml found');\n  return null;\n}\n\n/** Extracts a map of cargo registries from a CargoConfig */\nfunction extractCargoRegistries(config: CargoConfig | null): CargoRegistries {\n  const result: CargoRegistries = {};\n  if (!config?.registries) {\n    return result;\n  }\n\n  const { registries } = config;\n\n  for (const registryName of Object.keys(registries)) {\n    const registry = registries[registryName];\n    if (registry.index) {\n      result[registryName] = registry.index;\n    } else {\n      logger.debug({ registryName }, 'cargo registry is missing index');\n    }\n  }\n\n  return result;\n}\n\nexport async function extractPackageFile(\n  content: string,\n  fileName: string,\n  _config?: ExtractConfig\n): Promise<PackageFile | null> {\n  logger.trace(`cargo.extractPackageFile(${fileName})`);\n\n  const cargoConfig = await readCargoConfig();\n  const cargoRegistries = extractCargoRegistries(cargoConfig);\n\n  let cargoManifest: CargoManifest;\n  try {\n    cargoManifest = parse(content);\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing Cargo.toml file');\n    return null;\n  }\n  /*\n    There are the following sections in Cargo.toml:\n    [dependencies]\n    [dev-dependencies]\n    [build-dependencies]\n    [target.*.dependencies]\n  */\n  const targetSection = cargoManifest.target;\n  // An array of all dependencies in the target section\n  let targetDeps: PackageDependency[] = [];\n  if (targetSection) {\n    const targets = Object.keys(targetSection);\n    targets.forEach((target) => {\n      const targetContent = targetSection[target];\n      // Dependencies for `${target}`\n      const deps = [\n        ...extractFromSection(\n          targetContent,\n          'dependencies',\n          cargoRegistries,\n          target\n        ),\n        ...extractFromSection(\n          targetContent,\n          'dev-dependencies',\n          cargoRegistries,\n          target\n        ),\n        ...extractFromSection(\n          targetContent,\n          'build-dependencies',\n          cargoRegistries,\n          target\n        ),\n      ];\n      targetDeps = targetDeps.concat(deps);\n    });\n  }\n  const deps = [\n    ...extractFromSection(cargoManifest, 'dependencies', cargoRegistries),\n    ...extractFromSection(cargoManifest, 'dev-dependencies', cargoRegistries),\n    ...extractFromSection(cargoManifest, 'build-dependencies', cargoRegistries),\n    ...targetDeps,\n  ];\n  if (!deps.length) {\n    return null;\n  }\n  const lockFileName = await findLocalSiblingOrParent(fileName, 'Cargo.lock');\n  const res: PackageFile = { deps };\n  // istanbul ignore if\n  if (lockFileName) {\n    res.lockFiles = [lockFileName];\n  }\n  return res;\n}\n"]}