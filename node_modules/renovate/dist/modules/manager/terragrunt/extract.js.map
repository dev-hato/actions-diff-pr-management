{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terragrunt/extract.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,+CAA0D;AAE1D,qCAAqD;AACrD,uCAA6E;AAE7E,iCAGgB;AAEhB,MAAM,8BAA8B,GAAG,IAAA,aAAK,EAAC,8BAA8B,CAAC,CAAC;AAC7E,MAAM,gBAAgB,GAAG,CAAC,aAAa,CAAC,CAAC;AAEzC,SAAgB,kBAAkB,CAAC,OAAe;IAChD,eAAM,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,EAAE,iCAAiC,CAAC,CAAC;IAC7D,IAAI,CAAC,IAAA,kCAA2B,EAAC,OAAO,EAAE,gBAAgB,CAAC,EAAE;QAC3D,OAAO,IAAI,CAAC;KACb;IACD,IAAI,IAAI,GAA8C,EAAE,CAAC;IACzD,IAAI;QACF,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,oBAAY,CAAC,CAAC;QAC1C,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE,UAAU,IAAI,CAAC,EAAE;YACnE,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,MAAM,oBAAoB,GAAG,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,IAAI,oBAAoB,EAAE,MAAM,EAAE;gBAChC,eAAM,CAAC,KAAK,CACV,WAAW,oBAAoB,CAAC,MAAM,CAAC,IAAI,YAAY,UAAU,EAAE,CACpE,CAAC;gBACF,MAAM,SAAS,GAAG,IAAA,kCAA2B,EAC3C,oBAAoB,CAAC,MAAM,CAAC,IAAI,CACjC,CAAC;gBACF,IAAI,MAAM,GAA4B,IAAI,CAAC;gBAC3C,QAAQ,SAAS,EAAE;oBACjB,KAAK,kCAAyB,CAAC,UAAU,CAAC,CAAC;wBACzC,MAAM,GAAG,IAAA,iCAAuB,EAAC,UAAU,EAAE,KAAK,CAAC,CAAC;wBACpD,MAAM;qBACP;oBACD,0BAA0B;oBAC1B;wBACE,eAAM,CAAC,KAAK,CACV,+CAA+C,oBAAoB,CAAC,MAAM,CAAC,IAAI,YAAY,UAAU,GAAG,CACzG,CAAC;wBACF,MAAM;iBACT;gBACD,IAAI,MAAM,EAAE;oBACV,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;oBAC/B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;oBACxC,MAAM,GAAG,IAAI,CAAC;iBACf;aACF;SACF;KACF;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,qCAAqC,CAAC,CAAC;KAC7D;IACD,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACnB,aAAa;QACb,QAAQ,GAAG,CAAC,WAAY,CAAC,wBAAwB,EAAE;YACjD,KAAK,kCAAyB,CAAC,UAAU;gBACvC,IAAA,iCAAuB,EAAC,GAAG,CAAC,CAAC;gBAC7B,MAAM;YACR,0BAA0B;YAC1B,QAAQ;SACT;QAED,OAAO,GAAG,CAAC,WAAW,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AAtDD,gDAsDC","sourcesContent":["import { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { PackageDependency, PackageFile } from '../types';\nimport { TerragruntDependencyTypes } from './common';\nimport { analyseTerragruntModule, extractTerragruntModule } from './modules';\nimport type { ExtractionResult, TerraformManagerData } from './types';\nimport {\n  checkFileContainsDependency,\n  getTerragruntDependencyType,\n} from './util';\n\nconst dependencyBlockExtractionRegex = regEx(/^\\s*(?<type>[a-z_]+)\\s+{\\s*$/);\nconst contentCheckList = ['terraform {'];\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  logger.trace({ content }, 'terragrunt.extractPackageFile()');\n  if (!checkFileContainsDependency(content, contentCheckList)) {\n    return null;\n  }\n  let deps: PackageDependency<TerraformManagerData>[] = [];\n  try {\n    const lines = content.split(newlineRegex);\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      const line = lines[lineNumber];\n      const terragruntDependency = dependencyBlockExtractionRegex.exec(line);\n      if (terragruntDependency?.groups) {\n        logger.trace(\n          `Matched ${terragruntDependency.groups.type} on line ${lineNumber}`\n        );\n        const tfDepType = getTerragruntDependencyType(\n          terragruntDependency.groups.type\n        );\n        let result: ExtractionResult | null = null;\n        switch (tfDepType) {\n          case TerragruntDependencyTypes.terragrunt: {\n            result = extractTerragruntModule(lineNumber, lines);\n            break;\n          }\n          /* istanbul ignore next */\n          default:\n            logger.trace(\n              `Could not identify TerragruntDependencyType ${terragruntDependency.groups.type} on line ${lineNumber}.`\n            );\n            break;\n        }\n        if (result) {\n          lineNumber = result.lineNumber;\n          deps = deps.concat(result.dependencies);\n          result = null;\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting terragrunt plugins');\n  }\n  deps.forEach((dep) => {\n    // TODO #7154\n    switch (dep.managerData!.terragruntDependencyType) {\n      case TerragruntDependencyTypes.terragrunt:\n        analyseTerragruntModule(dep);\n        break;\n      /* istanbul ignore next */\n      default:\n    }\n\n    delete dep.managerData;\n  });\n  return { deps };\n}\n"]}