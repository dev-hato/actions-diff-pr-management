{"version":3,"file":"modules.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terragrunt/modules.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport { TerraformModuleDatasource } from '../../datasource/terraform-module';\nimport type { PackageDependency } from '../types';\nimport { TerragruntDependencyTypes } from './common';\nimport { extractTerragruntProvider } from './providers';\nimport type { ExtractionResult, TerraformManagerData } from './types';\n\nexport const githubRefMatchRegex = regEx(\n  /github\\.com([/:])(?<project>[^/]+\\/[a-z0-9-_.]+).*\\?ref=(?<tag>.*)$/i\n);\nexport const gitTagsRefMatchRegex = regEx(\n  /(?:git::)?(?<url>(?:http|https|ssh):\\/\\/(?:.*@)?(?<path>.*.*\\/(?<project>.*\\/.*)))\\?ref=(?<tag>.*)$/\n);\nconst hostnameMatchRegex = regEx(/^(?<hostname>([\\w|\\d]+\\.)+[\\w|\\d]+)/);\n\nexport function extractTerragruntModule(\n  startingLine: number,\n  lines: string[]\n): ExtractionResult {\n  const moduleName = 'terragrunt';\n  const result = extractTerragruntProvider(startingLine, lines, moduleName);\n  result.dependencies.forEach((dep) => {\n    // TODO #7154\n    dep.managerData!.terragruntDependencyType =\n      TerragruntDependencyTypes.terragrunt;\n  });\n  return result;\n}\n\nexport function analyseTerragruntModule(\n  dep: PackageDependency<TerraformManagerData>\n): void {\n  // TODO #7154\n  const source = dep.managerData!.source;\n  const githubRefMatch = githubRefMatchRegex.exec(source ?? '');\n  const gitTagsRefMatch = gitTagsRefMatchRegex.exec(source ?? '');\n\n  if (githubRefMatch?.groups) {\n    dep.depType = 'github';\n    dep.packageName = githubRefMatch.groups.project.replace(\n      regEx(/\\.git$/),\n      ''\n    );\n    dep.depName = 'github.com/' + dep.packageName;\n    dep.currentValue = githubRefMatch.groups.tag;\n    dep.datasource = GithubTagsDatasource.id;\n  } else if (gitTagsRefMatch?.groups) {\n    dep.depType = 'gitTags';\n    if (gitTagsRefMatch.groups.path.includes('//')) {\n      logger.debug('Terragrunt module contains subdirectory');\n      dep.depName = gitTagsRefMatch.groups.path.split('//')[0];\n      const tempLookupName = gitTagsRefMatch.groups.url.split('//');\n      dep.packageName = tempLookupName[0] + '//' + tempLookupName[1];\n    } else {\n      dep.depName = gitTagsRefMatch.groups.path.replace('.git', '');\n      dep.packageName = gitTagsRefMatch.groups.url;\n    }\n    dep.currentValue = gitTagsRefMatch.groups.tag;\n    dep.datasource = GitTagsDatasource.id;\n  } else if (source) {\n    const moduleParts = source.split('//')[0].split('/');\n    if (moduleParts[0] === '..') {\n      dep.skipReason = 'local';\n    } else if (moduleParts.length >= 3) {\n      const hostnameMatch = hostnameMatchRegex.exec(source);\n      if (hostnameMatch?.groups) {\n        dep.registryUrls = [`https://${hostnameMatch.groups.hostname}`];\n      }\n      dep.depType = 'terragrunt';\n      dep.depName = moduleParts.join('/');\n      dep.datasource = TerraformModuleDatasource.id;\n    }\n  } else {\n    logger.debug({ dep }, 'terragrunt dep has no source');\n    dep.skipReason = 'no-source';\n  }\n}\n"]}