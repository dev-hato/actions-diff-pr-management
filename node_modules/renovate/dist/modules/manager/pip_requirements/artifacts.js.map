{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pip_requirements/artifacts.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,sEAAoE;AACpE,4CAAyC;AACzC,6CAA0C;AAE1C,yCAAiD;AACjD,+CAA0D;AAGnD,KAAK,UAAU,eAAe,CAAC,EACpC,eAAe,EACf,WAAW,EACX,qBAAqB,EACrB,MAAM,GACS;IACf,eAAM,CAAC,KAAK,CAAC,oCAAoC,eAAe,GAAG,CAAC,CAAC;IACrE,IAAI,CAAC,YAAE,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE;QAClC,eAAM,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC;KACb;IACD,IAAI;QACF,MAAM,GAAG,GAAa,EAAE,CAAC;QACzB,MAAM,gBAAgB,GAAG,qBAAqB,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3E,MAAM,KAAK,GAAG,gBAAgB;aAC3B,KAAK,CAAC,oBAAY,CAAC;aACnB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAC9B,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE;YAC7B,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CACzB,CAAC,IAAI,EAAE,EAAE;YACP,sBAAsB;YACtB,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,OAAQ,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CACnE,CAAC;YACF,IAAI,QAAQ,EAAE;gBACZ,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7C,GAAG,CAAC,IAAI,CAAC,UAAU,aAAa,OAAO,eAAe,EAAE,CAAC,CAAC;aAC3D;SACF;QACD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;YACf,eAAM,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;YACtD,OAAO,IAAI,CAAC;SACb;QACD,MAAM,WAAW,GAAgB;YAC/B,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE;gBACN,KAAK,EAAE,QAAQ;aAChB;YACD,WAAW,EAAE,CAAC,oBAAoB,CAAC;SACpC,CAAC;QACF,MAAM,IAAA,WAAI,EAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAC7B,MAAM,UAAU,GAAG,MAAM,IAAA,kBAAa,EAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QAChE,IAAI,UAAU,KAAK,qBAAqB,EAAE;YACxC,eAAM,CAAC,KAAK,CAAC,GAAG,eAAe,eAAe,CAAC,CAAC;YAChD,OAAO,IAAI,CAAC;SACb;QACD,eAAM,CAAC,KAAK,CAAC,qBAAqB,eAAe,EAAE,CAAC,CAAC;QACrD,OAAO;YACL;gBACE,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,eAAe;oBACrB,QAAQ,EAAE,UAAU;iBACrB;aACF;SACF,CAAC;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,qBAAqB;QACrB,IAAI,GAAG,CAAC,OAAO,KAAK,gCAAe,EAAE;YACnC,MAAM,GAAG,CAAC;SACX;QACD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,oBAAoB,eAAe,OAAO,CAAC,CAAC;QAClE,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,eAAe;oBACzB,MAAM,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;iBACvD;aACF;SACF,CAAC;KACH;AACH,CAAC;AAtED,0CAsEC","sourcesContent":["import is from '@sindresorhus/is';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport { readLocalFile } from '../../../util/fs';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`pip_requirements.updateArtifacts(${packageFileName})`);\n  if (!is.nonEmptyArray(updatedDeps)) {\n    logger.debug('No updated pip_requirements deps - returning null');\n    return null;\n  }\n  try {\n    const cmd: string[] = [];\n    const rewrittenContent = newPackageFileContent.replace(regEx(/\\\\\\n/g), '');\n    const lines = rewrittenContent\n      .split(newlineRegex)\n      .map((line) => line.trim());\n    for (const dep of updatedDeps) {\n      const hashLine = lines.find(\n        (line) =>\n          // TODO: types (#7154)\n          line.startsWith(`${dep.depName!}==`) && line.includes('--hash=')\n      );\n      if (hashLine) {\n        const depConstraint = hashLine.split(' ')[0];\n        cmd.push(`hashin ${depConstraint} -r ${packageFileName}`);\n      }\n    }\n    if (!cmd.length) {\n      logger.debug('No hashin commands to run - returning');\n      return null;\n    }\n    const execOptions: ExecOptions = {\n      cwdFile: '.',\n      docker: {\n        image: 'python',\n      },\n      preCommands: ['pip install hashin'],\n    };\n    await exec(cmd, execOptions);\n    const newContent = await readLocalFile(packageFileName, 'utf8');\n    if (newContent === newPackageFileContent) {\n      logger.debug(`${packageFileName} is unchanged`);\n      return null;\n    }\n    logger.debug(`Returning updated ${packageFileName}`);\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: packageFileName,\n          contents: newContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, `Failed to update ${packageFileName} file`);\n    return [\n      {\n        artifactError: {\n          lockFile: packageFileName,\n          stderr: `${String(err.stdout)}\\n${String(err.stderr)}`,\n        },\n      },\n    ];\n  }\n}\n"]}