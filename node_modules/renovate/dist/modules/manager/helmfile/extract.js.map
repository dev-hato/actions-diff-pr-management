{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmfile/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { loadAll } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { DockerDatasource } from '../../datasource/docker';\nimport { HelmDatasource } from '../../datasource/helm';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport type { Doc } from './types';\n\nconst isValidChartName = (name: string | undefined): boolean =>\n  !!name && !regEx(/[!@#$%^&*(),.?\":{}/|<>A-Z]/).test(name);\n\nfunction extractYaml(content: string): string {\n  // regex remove go templated ({{ . }}) values\n  return content.replace(/(^|:)\\s*{{.+}}\\s*$/gm, '$1');\n}\n\nexport function extractPackageFile(\n  content: string,\n  fileName: string,\n  config: ExtractConfig\n): PackageFile | null {\n  let deps: PackageDependency[] = [];\n  let docs: Doc[];\n  const registryAliases: Record<string, string> = {};\n  try {\n    docs = loadAll(extractYaml(content), null, { json: true }) as Doc[];\n  } catch (err) {\n    logger.debug({ err, fileName }, 'Failed to parse helmfile helmfile.yaml');\n    return null;\n  }\n  for (const doc of docs) {\n    if (!(doc && is.array(doc.releases))) {\n      continue;\n    }\n\n    if (doc.repositories) {\n      for (let i = 0; i < doc.repositories.length; i += 1) {\n        registryAliases[doc.repositories[i].name] = doc.repositories[i].url;\n      }\n    }\n    logger.debug({ registryAliases }, 'repositories discovered.');\n\n    deps = doc.releases.map((dep) => {\n      let depName = dep.chart;\n      let repoName: string | null = null;\n\n      if (!is.string(dep.chart)) {\n        return {\n          depName: dep.name,\n          skipReason: 'invalid-name',\n        };\n      }\n\n      // If starts with ./ is for sure a local path\n      if (dep.chart.startsWith('./')) {\n        return {\n          depName: dep.name,\n          skipReason: 'local-chart',\n        };\n      }\n\n      if (is.number(dep.version)) {\n        dep.version = String(dep.version);\n      }\n\n      if (dep.chart.includes('/')) {\n        const v = dep.chart.split('/');\n        repoName = v.shift()!;\n        depName = v.join('/');\n      } else {\n        repoName = dep.chart;\n      }\n\n      if (!is.string(dep.version)) {\n        return {\n          depName,\n          skipReason: 'invalid-version',\n        };\n      }\n\n      const res: PackageDependency = {\n        depName,\n        currentValue: dep.version,\n        registryUrls: [registryAliases[repoName]]\n          .concat([config.registryAliases?.[repoName]] as string[])\n          .filter(is.string),\n      };\n\n      // in case of OCI repository, we need a PackageDependency with a DockerDatasource and a packageName\n      const repository = doc.repositories?.find(\n        (repo) => repo.name === repoName\n      );\n      if (repository?.oci) {\n        res.datasource = DockerDatasource.id;\n        res.packageName = registryAliases[repoName] + '/' + depName;\n      }\n\n      // By definition on helm the chart name should be lowercase letter + number + -\n      // However helmfile support templating of that field\n      if (!isValidChartName(res.depName)) {\n        res.skipReason = 'unsupported-chart-type';\n      }\n\n      // Skip in case we cannot locate the registry\n      if (is.emptyArray(res.registryUrls)) {\n        res.skipReason = 'unknown-registry';\n      }\n\n      return res;\n    });\n  }\n\n  return deps.length ? { deps, datasource: HelmDatasource.id } : null;\n}\n"]}