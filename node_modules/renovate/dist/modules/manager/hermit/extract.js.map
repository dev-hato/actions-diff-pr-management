{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/hermit/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import minimatch from 'minimatch';\nimport upath from 'upath';\nimport { logger } from '../../../logger';\nimport { readLocalDirectory } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport { HermitDatasource } from '../../datasource/hermit';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { HermitListItem } from './types';\n\nconst pkgReferenceRegex = regEx(`(?<packageName>.*?)-(?<version>[0-9]{1}.*)`);\n\n/**\n * extractPackageFile scans the folder of the package files\n * and looking for .{packageName}-{version}.pkg\n */\nexport async function extractPackageFile(\n  content: string,\n  filename: string\n): Promise<PackageFile | null> {\n  logger.trace('hermit.extractPackageFile()');\n  const dependencies = [] as PackageDependency[];\n  const packages = await listHermitPackages(filename);\n\n  if (!packages?.length) {\n    return null;\n  }\n\n  for (const p of packages) {\n    // version of a hermit package is either a Version or a Channel\n    // Channel will prepend with @ to distinguish from normal version\n    const version = p.Version === '' ? `@${p.Channel}` : p.Version;\n\n    const dep: PackageDependency = {\n      datasource: HermitDatasource.id,\n      depName: p.Name,\n      currentValue: version,\n    };\n\n    dependencies.push(dep);\n  }\n\n  return { deps: dependencies };\n}\n\n/**\n * listHermitPackages will fetch all installed packages from the bin folder\n */\nasync function listHermitPackages(\n  hermitFile: string\n): Promise<HermitListItem[] | null> {\n  logger.trace('hermit.listHermitPackages()');\n  const hermitFolder = upath.dirname(hermitFile);\n\n  let files: string[] = [];\n\n  try {\n    files = await readLocalDirectory(hermitFolder);\n  } catch (e) {\n    logger.debug(\n      { hermitFolder, err: e },\n      'error listing hermit package references'\n    );\n    return null;\n  }\n\n  logger.trace({ files, hermitFolder }, 'files for hermit package list');\n\n  const out = [] as HermitListItem[];\n\n  for (const f of files) {\n    if (!minimatch(f, '.*.pkg')) {\n      continue;\n    }\n\n    const fileName = f\n      .replace(`${hermitFolder}/`, '')\n      .substring(1)\n      .replace(/\\.pkg$/, '');\n    const channelParts = fileName.split('@');\n\n    if (channelParts.length > 1) {\n      out.push({\n        Name: channelParts[0],\n        Channel: channelParts[1],\n        Version: '',\n      });\n    }\n\n    const groups = pkgReferenceRegex.exec(fileName)?.groups;\n    if (!groups) {\n      logger.debug(\n        { fileName },\n        'invalid hermit package reference file name found'\n      );\n      continue;\n    }\n\n    out.push({\n      Name: groups.packageName,\n      Version: groups.version,\n      Channel: '',\n    });\n  }\n\n  return out;\n}\n"]}