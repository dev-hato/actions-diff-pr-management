{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bitbucket-pipelines/extract.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,+CAA0D;AAC1D,mDAA+C;AAG/C,MAAM,SAAS,GAAG,IAAA,aAAK,EAAC,6CAA6C,CAAC,CAAC;AACvE,MAAM,gBAAgB,GAAG,IAAA,aAAK,EAAC,+CAA+C,CAAC,CAAC;AAEhF,SAAgB,kBAAkB,CAAC,OAAe;IAChD,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,IAAI;QACF,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,oBAAY,CAAC,CAAC;QAC1C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,SAAS,EAAE;gBACb,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAEhD,MAAM,GAAG,GAAsB;oBAC7B,OAAO;oBACP,YAAY;oBACZ,UAAU,EAAE,gBAAgB;iBAC7B,CAAC;gBAEF,eAAM,CAAC,KAAK,CACV;oBACE,OAAO,EAAE,GAAG,CAAC,OAAO;oBACpB,YAAY,EAAE,GAAG,CAAC,YAAY;iBAC/B,EACD,gBAAgB,CACjB,CAAC;gBACF,GAAG,CAAC,OAAO,GAAG,gBAAgB,CAAC;gBAC/B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAChB;YAED,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrD,IAAI,gBAAgB,EAAE;gBACpB,MAAM,WAAW,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC;gBAEhC,eAAM,CAAC,KAAK,CACV;oBACE,OAAO,EAAE,GAAG,CAAC,OAAO;oBACpB,YAAY,EAAE,GAAG,CAAC,YAAY;oBAC9B,aAAa,EAAE,GAAG,CAAC,aAAa;iBACjC,EACD,cAAc,CACf,CAAC;gBACF,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC;gBACvB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAChB;SACF;KACF;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,+CAA+C,CAAC,CAAC;KACvE;IACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AApDD,gDAoDC","sourcesContent":["import { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFile } from '../types';\n\nconst pipeRegex = regEx(`^\\\\s*-\\\\s?pipe:\\\\s*'?\"?([^\\\\s'\"]+)'?\"?\\\\s*$`);\nconst dockerImageRegex = regEx(`^\\\\s*-?\\\\s?image:\\\\s*'?\"?([^\\\\s'\"]+)'?\"?\\\\s*$`);\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n\n  try {\n    const lines = content.split(newlineRegex);\n    for (const line of lines) {\n      const pipeMatch = pipeRegex.exec(line);\n      if (pipeMatch) {\n        const pipe = pipeMatch[1];\n        const [depName, currentValue] = pipe.split(':');\n\n        const dep: PackageDependency = {\n          depName,\n          currentValue,\n          datasource: 'bitbucket-tags',\n        };\n\n        logger.trace(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n          },\n          'Bitbucket pipe'\n        );\n        dep.depType = 'bitbucket-tags';\n        deps.push(dep);\n      }\n\n      const dockerImageMatch = dockerImageRegex.exec(line);\n      if (dockerImageMatch) {\n        const currentFrom = dockerImageMatch[1];\n        const dep = getDep(currentFrom);\n\n        logger.trace(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Docker image'\n        );\n        dep.depType = 'docker';\n        deps.push(dep);\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting Bitbucket Pipes dependencies');\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}