{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gradle-wrapper/utils.ts"],"names":[],"mappings":";;;;AAAA,oDAAoB;AACpB,mDAAsD;AACtD,4CAAyC;AACzC,yCAAiE;AACjE,+CAA0D;AAC1D,6EAAuD;AAG1C,QAAA,QAAQ,GAAG;IACtB,WAAW,EACT,qHAAqH;CACxH,CAAC;AAEF,uBAAuB;AACvB,SAAgB,qBAAqB;IACnC,IACE,YAAE,CAAC,QAAQ,EAAE,KAAK,OAAO;QACzB,qBAAY,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,QAAQ,EAC7C;QACA,OAAO,aAAa,CAAC;KACtB;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AARD,sDAQC;AAEM,KAAK,UAAU,oBAAoB,CACxC,WAAmB,EACnB,IAAmB;IAEnB,MAAM,WAAW,GAAG,qBAAqB,EAAE,CAAC;IAC5C,MAAM,WAAW,GAAG,MAAM,IAAA,kBAAa,EAAC,WAAW,CAAC,CAAC;IACrD,qBAAqB;IACrB,IAAI,WAAW,EAAE,MAAM,EAAE,KAAK,IAAI,EAAE;QAClC,0CAA0C;QAC1C,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;YAClC,8DAA8D;YAC9D,MAAM,IAAA,mBAAc,EAAC,WAAW,EAAE,WAAW,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;SAC7D;QACD,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,OAAO,WAAW,CAAC;SACpB;QACD,OAAO,GAAG,WAAW,IAAI,IAAI,EAAE,CAAC;KACjC;IACD,8BAA8B;IAC9B,OAAO,IAAI,CAAC;AACd,CAAC;AApBD,oDAoBC;AAED;;;;;GAKG;AACH,SAAgB,iBAAiB,CAC/B,aAAwC;IAExC,MAAM,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9E,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,EAAE;QACvB,OAAO,SAAS,CAAC;KAClB;IACD,sCAAsC;IACtC,IAAI,KAAK,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;QACnC,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAZD,8CAYC;AAED,kCAAkC;AAClC,MAAM,sBAAsB,GAAG,IAAA,aAAK,EAClC,qHAAqH,CACtH,CAAC;AAEF,SAAgB,oBAAoB,CAClC,WAAmB;IAEnB,MAAM,KAAK,GAAG,WAAW,EAAE,KAAK,CAAC,oBAAY,CAAC,IAAI,EAAE,CAAC;IAErD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,MAAM,oBAAoB,GAAG,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE/D,IAAI,oBAAoB,EAAE,MAAM,EAAE;YAChC,OAAO;gBACL,GAAG,EAAE,oBAAoB,CAAC,MAAM,CAAC,GAAG;gBACpC,OAAO,EAAE,oBAAoB,CAAC,MAAM,CAAC,OAAO;aAC7C,CAAC;SACH;KACF;IACD,eAAM,CAAC,KAAK,CACV,yFAAyF,CAC1F,CAAC;IAEF,OAAO,IAAI,CAAC;AACd,CAAC;AApBD,oDAoBC","sourcesContent":["import os from 'os';\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { chmodLocalFile, statLocalFile } from '../../../util/fs';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport gradleVersioning from '../../versioning/gradle';\nimport type { GradleVersionExtract } from './types';\n\nexport const extraEnv = {\n  GRADLE_OPTS:\n    '-Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true -Dorg.gradle.daemon=false -Dorg.gradle.caching=false',\n};\n\n// istanbul ignore next\nexport function gradleWrapperFileName(): string {\n  if (\n    os.platform() === 'win32' &&\n    GlobalConfig.get('binarySource') !== 'docker'\n  ) {\n    return 'gradlew.bat';\n  }\n  return './gradlew';\n}\n\nexport async function prepareGradleCommand(\n  gradlewName: string,\n  args: string | null\n): Promise<string | null> {\n  const gradlewFile = gradleWrapperFileName();\n  const gradlewStat = await statLocalFile(gradlewFile);\n  // istanbul ignore if\n  if (gradlewStat?.isFile() === true) {\n    // if the file is not executable by others\n    if ((gradlewStat.mode & 0o1) === 0) {\n      // add the execution permission to the owner, group and others\n      await chmodLocalFile(gradlewName, gradlewStat.mode | 0o111);\n    }\n    if (args === null) {\n      return gradlewName;\n    }\n    return `${gradlewName} ${args}`;\n  }\n  /* eslint-enable no-bitwise */\n  return null;\n}\n\n/**\n * Find compatible java version for gradle.\n * see https://docs.gradle.org/current/userguide/compatibility.html\n * @param gradleVersion current gradle version\n * @returns A Java semver range\n */\nexport function getJavaConstraint(\n  gradleVersion: string | null | undefined\n): string | null {\n  const major = gradleVersion ? gradleVersioning.getMajor(gradleVersion) : null;\n  if (major && major >= 7) {\n    return '^16.0.0';\n  }\n  // first public gradle version was 2.0\n  if (major && major > 0 && major < 5) {\n    return '^8.0.0';\n  }\n  return '^11.0.0';\n}\n\n// https://regex101.com/r/IcOs7P/1\nconst DISTRIBUTION_URL_REGEX = regEx(\n  '^(?:distributionUrl\\\\s*=\\\\s*)(?<url>\\\\S*-(?<version>\\\\d+\\\\.\\\\d+(?:\\\\.\\\\d+)?(?:-\\\\w+)*)-(?<type>bin|all)\\\\.zip)\\\\s*$'\n);\n\nexport function extractGradleVersion(\n  fileContent: string\n): GradleVersionExtract | null {\n  const lines = fileContent?.split(newlineRegex) ?? [];\n\n  for (const line of lines) {\n    const distributionUrlMatch = DISTRIBUTION_URL_REGEX.exec(line);\n\n    if (distributionUrlMatch?.groups) {\n      return {\n        url: distributionUrlMatch.groups.url,\n        version: distributionUrlMatch.groups.version,\n      };\n    }\n  }\n  logger.debug(\n    'Gradle wrapper version and url could not be extracted from properties - skipping update'\n  );\n\n  return null;\n}\n"]}