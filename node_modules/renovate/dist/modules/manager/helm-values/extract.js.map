{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helm-values/extract.ts"],"names":[],"mappings":";;;AAAA,qCAA+B;AAC/B,4CAAyC;AACzC,oDAAiE;AACjE,mDAA+C;AAG/C,iCAGgB;AAEhB,SAAS,UAAU,CAAC,EAClB,QAAQ,EACR,UAAU,EACV,GAAG,GAKJ;IACC,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,GAAG,QAAQ,GAAG,UAAU,IAAI,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;IAC7D,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC;IACxB,GAAG,CAAC,UAAU,GAAG,WAAgB,CAAC;IAClC,GAAG,CAAC,yBAAyB;QAC3B,oDAAoD,CAAC;IACvD,OAAO,GAAG,CAAC;AACb,CAAC;AAED;;;;GAIG;AACH,SAAS,gBAAgB,CACvB,aAAkE,EAClE,mBAA6C;IAE7C,IAAI,CAAC,aAAa,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QACvD,OAAO,mBAAmB,CAAC;KAC5B;IAED,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QACrD,IAAI,IAAA,uCAAgC,EAAC,GAAG,EAAE,KAAK,CAAC,EAAE;YAChD,MAAM,WAAW,GAAG,KAAK,CAAC;YAE1B,IAAI,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;YACpC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1C,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,OAAO,EAAE,CAAC;YACxD,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;SACrE;aAAM,IAAI,IAAA,mCAA4B,EAAC,GAAG,EAAE,KAAK,CAAC,EAAE;YACnD,mBAAmB,CAAC,IAAI,CAAC,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,CAAC;SACzC;aAAM;YACL,gBAAgB,CAAC,KAAgC,EAAE,mBAAmB,CAAC,CAAC;SACzE;IACH,CAAC,CAAC,CAAC;IACH,OAAO,mBAAmB,CAAC;AAC7B,CAAC;AAED,SAAgB,kBAAkB,CAAC,OAAe;IAChD,IAAI,aAAkE,CAAC;IACvE,IAAI;QACF,yEAAyE;QACzE,iFAAiF;QACjF,uBAAuB;QACvB,aAAa,GAAG,IAAA,cAAI,EAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAQ,CAAC;KACtD;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;KACb;IACD,IAAI;QACF,MAAM,IAAI,GAAG,gBAAgB,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;QACjD,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,EAAE,IAAI,EAAE,CAAC;SACjB;KACF;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,0CAA0C,CAAC,CAAC;KAClE;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AApBD,gDAoBC","sourcesContent":["import { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { id as dockerVersioning } from '../../versioning/docker';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { HelmDockerImageDependency } from './types';\nimport {\n  matchesHelmValuesDockerHeuristic,\n  matchesHelmValuesInlineImage,\n} from './util';\n\nfunction getHelmDep({\n  registry,\n  repository,\n  tag,\n}: {\n  registry: string;\n  repository: string;\n  tag: string;\n}): PackageDependency {\n  const dep = getDep(`${registry}${repository}:${tag}`, false);\n  dep.replaceString = tag;\n  dep.versioning = dockerVersioning;\n  dep.autoReplaceStringTemplate =\n    '{{newValue}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n  return dep;\n}\n\n/**\n * Recursively find all supported dependencies in the yaml object.\n *\n * @param parsedContent\n */\nfunction findDependencies(\n  parsedContent: Record<string, unknown> | HelmDockerImageDependency,\n  packageDependencies: Array<PackageDependency>\n): Array<PackageDependency> {\n  if (!parsedContent || typeof parsedContent !== 'object') {\n    return packageDependencies;\n  }\n\n  Object.entries(parsedContent).forEach(([key, value]) => {\n    if (matchesHelmValuesDockerHeuristic(key, value)) {\n      const currentItem = value;\n\n      let registry = currentItem.registry;\n      registry = registry ? `${registry}/` : '';\n      const repository = String(currentItem.repository);\n      const tag = `${currentItem.tag ?? currentItem.version}`;\n      packageDependencies.push(getHelmDep({ repository, tag, registry }));\n    } else if (matchesHelmValuesInlineImage(key, value)) {\n      packageDependencies.push(getDep(value));\n    } else {\n      findDependencies(value as Record<string, unknown>, packageDependencies);\n    }\n  });\n  return packageDependencies;\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  let parsedContent: Record<string, unknown> | HelmDockerImageDependency;\n  try {\n    // a parser that allows extracting line numbers would be preferable, with\n    // the current approach we need to match anything we find again during the update\n    // TODO: fix me (#9610)\n    parsedContent = load(content, { json: true }) as any;\n  } catch (err) {\n    logger.debug({ err }, 'Failed to parse helm-values YAML');\n    return null;\n  }\n  try {\n    const deps = findDependencies(parsedContent, []);\n    if (deps.length) {\n      return { deps };\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error parsing helm-values parsed content');\n  }\n  return null;\n}\n"]}