{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/poetry/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { parse } from '@iarna/toml';\nimport is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport type { HostRule } from '../../../types';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions, ToolConstraint } from '../../../util/exec/types';\nimport {\n  deleteLocalFile,\n  getSiblingFileName,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { find } from '../../../util/host-rules';\nimport { regEx } from '../../../util/regex';\nimport { PypiDatasource } from '../../datasource/pypi';\nimport { dependencyPattern } from '../pip_requirements/extract';\nimport type {\n  UpdateArtifact,\n  UpdateArtifactsConfig,\n  UpdateArtifactsResult,\n} from '../types';\nimport type { PoetryFile, PoetryLock, PoetrySource } from './types';\n\nfunction getPythonConstraint(\n  existingLockFileContent: string,\n  config: UpdateArtifactsConfig\n): string | undefined | null {\n  const { constraints = {} } = config;\n  const { python } = constraints;\n\n  if (python) {\n    logger.debug('Using python constraint from config');\n    return python;\n  }\n  try {\n    const data = parse(existingLockFileContent) as PoetryLock;\n    if (is.string(data?.metadata?.['python-versions'])) {\n      return data?.metadata?.['python-versions'];\n    }\n  } catch (err) {\n    // Do nothing\n  }\n  return undefined;\n}\n\nconst pkgValRegex = regEx(`^${dependencyPattern}$`);\n\nfunction getPoetryRequirement(pyProjectContent: string): string | null {\n  try {\n    const pyproject: PoetryFile = parse(pyProjectContent);\n    // https://python-poetry.org/docs/pyproject/#poetry-and-pep-517\n    const buildBackend = pyproject['build-system']?.['build-backend'];\n    if (\n      (buildBackend === 'poetry.masonry.api' ||\n        buildBackend === 'poetry.core.masonry.api') &&\n      is.nonEmptyArray(pyproject['build-system']?.requires)\n    ) {\n      for (const requirement of pyproject['build-system']!.requires) {\n        if (is.nonEmptyString(requirement)) {\n          const pkgValMatch = pkgValRegex.exec(requirement);\n          if (pkgValMatch) {\n            const [, depName, , currVal] = pkgValMatch;\n            if (\n              (depName === 'poetry' || depName === 'poetry_core') &&\n              currVal\n            ) {\n              return currVal.trim();\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing pyproject.toml file');\n  }\n  return null;\n}\n\nfunction getPoetrySources(content: string, fileName: string): PoetrySource[] {\n  let pyprojectFile: PoetryFile;\n  try {\n    pyprojectFile = parse(content);\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing pyproject.toml file');\n    return [];\n  }\n  if (!pyprojectFile.tool?.poetry) {\n    logger.debug(`{$fileName} contains no poetry section`);\n    return [];\n  }\n\n  const sources = pyprojectFile.tool?.poetry?.source ?? [];\n  const sourceArray: PoetrySource[] = [];\n  for (const source of sources) {\n    if (source.name && source.url) {\n      sourceArray.push({ name: source.name, url: source.url });\n    }\n  }\n  return sourceArray;\n}\n\nfunction getMatchingHostRule(source: PoetrySource): HostRule {\n  const scopedMatch = find({ hostType: PypiDatasource.id, url: source.url });\n  return is.nonEmptyObject(scopedMatch)\n    ? scopedMatch\n    : find({ url: source.url });\n}\n\nfunction getSourceCredentialVars(\n  pyprojectContent: string,\n  packageFileName: string\n): Record<string, string> {\n  const poetrySources = getPoetrySources(pyprojectContent, packageFileName);\n  const envVars: Record<string, string> = {};\n\n  for (const source of poetrySources) {\n    const matchingHostRule = getMatchingHostRule(source);\n    const formattedSourceName = source.name\n      .replace(regEx(/(\\.|-)+/g), '_')\n      .toUpperCase();\n    if (matchingHostRule.username) {\n      envVars[`POETRY_HTTP_BASIC_${formattedSourceName}_USERNAME`] =\n        matchingHostRule.username;\n    }\n    if (matchingHostRule.password) {\n      envVars[`POETRY_HTTP_BASIC_${formattedSourceName}_PASSWORD`] =\n        matchingHostRule.password;\n    }\n  }\n  return envVars;\n}\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`poetry.updateArtifacts(${packageFileName})`);\n  const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';\n\n  if (!is.nonEmptyArray(updatedDeps) && !isLockFileMaintenance) {\n    logger.debug('No updated poetry deps - returning null');\n    return null;\n  }\n  // Try poetry.lock first\n  let lockFileName = getSiblingFileName(packageFileName, 'poetry.lock');\n  let existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    // Try pyproject.lock next\n    lockFileName = getSiblingFileName(packageFileName, 'pyproject.lock');\n    existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n    if (!existingLockFileContent) {\n      logger.debug(`No lock file found`);\n      return null;\n    }\n  }\n  logger.debug(`Updating ${lockFileName}`);\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    const cmd: string[] = [];\n    if (isLockFileMaintenance) {\n      await deleteLocalFile(lockFileName);\n      cmd.push('poetry update --lock --no-interaction');\n    } else {\n      cmd.push(\n        `poetry update --lock --no-interaction ${updatedDeps\n          .map((dep) => dep.depName)\n          .filter(is.string)\n          .map((dep) => quote(dep))\n          .join(' ')}`\n      );\n    }\n    const tagConstraint = getPythonConstraint(existingLockFileContent, config);\n    const constraint =\n      config.constraints?.poetry ?? getPoetryRequirement(newPackageFileContent);\n    const extraEnv = getSourceCredentialVars(\n      newPackageFileContent,\n      packageFileName\n    );\n    const toolConstraint: ToolConstraint = {\n      toolName: 'poetry',\n      constraint,\n    };\n\n    const execOptions: ExecOptions = {\n      cwdFile: packageFileName,\n      extraEnv,\n      docker: {\n        image: 'python',\n        tagConstraint,\n        tagScheme: 'poetry',\n      },\n      toolConstraints: [toolConstraint],\n    };\n    await exec(cmd, execOptions);\n    const newPoetryLockContent = await readLocalFile(lockFileName, 'utf8');\n    if (existingLockFileContent === newPoetryLockContent) {\n      logger.debug(`${lockFileName} is unchanged`);\n      return null;\n    }\n    logger.debug(`Returning updated ${lockFileName}`);\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: newPoetryLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, `Failed to update ${lockFileName} file`);\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: `${String(err.stdout)}\\n${String(err.stderr)}`,\n        },\n      },\n    ];\n  }\n}\n"]}