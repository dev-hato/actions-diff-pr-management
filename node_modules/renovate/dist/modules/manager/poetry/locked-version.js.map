{"version":3,"file":"locked-version.js","sourceRoot":"","sources":["../../../../lib/modules/manager/poetry/locked-version.ts"],"names":[],"mappings":";;;AAAA,sCAAoC;AACpC,4CAAyC;AAGzC,SAAgB,sBAAsB,CACpC,eAAuB;IAEvB,IAAI,cAAc,GAAe,EAAE,CAAC;IACpC,IAAI;QACF,cAAc,GAAG,IAAA,YAAK,EAAC,eAAe,CAAC,CAAC;KACzC;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,gCAAgC,CAAC,CAAC;KACzD;IAED,MAAM,eAAe,GAA2B,EAAE,CAAC;IACnD,IAAI,cAAc,EAAE,OAAO,EAAE;QAC3B,oCAAoC;QACpC,KAAK,MAAM,aAAa,IAAI,cAAc,CAAC,OAAO,EAAE;YAClD,IAAI,aAAa,CAAC,IAAI,IAAI,aAAa,CAAC,OAAO,EAAE;gBAC/C,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,OAAO,CAAC;aAC7D;SACF;KACF;IACD,OAAO,eAAe,CAAC;AACzB,CAAC;AApBD,wDAoBC","sourcesContent":["import { parse } from '@iarna/toml';\nimport { logger } from '../../../logger';\nimport type { PoetryLock } from './types';\n\nexport function extractLockFileEntries(\n  lockFileContent: string\n): Record<string, string> {\n  let poetryLockfile: PoetryLock = {};\n  try {\n    poetryLockfile = parse(lockFileContent);\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing poetry.lock file');\n  }\n\n  const lockfileMapping: Record<string, string> = {};\n  if (poetryLockfile?.package) {\n    // Create a package->version mapping\n    for (const poetryPackage of poetryLockfile.package) {\n      if (poetryPackage.name && poetryPackage.version) {\n        lockfileMapping[poetryPackage.name] = poetryPackage.version;\n      }\n    }\n  }\n  return lockfileMapping;\n}\n"]}