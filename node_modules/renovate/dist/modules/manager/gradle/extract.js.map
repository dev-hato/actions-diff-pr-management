{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gradle/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import upath from 'upath';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { MavenDatasource } from '../../datasource/maven';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport { parseCatalog } from './extract/catalog';\nimport { parseGradle, parseProps } from './parser';\nimport type {\n  GradleManagerData,\n  PackageVariables,\n  VariableRegistry,\n} from './types';\nimport {\n  getVars,\n  isPropsFile,\n  isTOMLFile,\n  reorderFiles,\n  toAbsolutePath,\n} from './utils';\n\nconst datasource = MavenDatasource.id;\n\n// Enables reverse sorting in generateBranchConfig()\n//\n// Required for grouped dependencies to be upgraded\n// correctly in single branch.\n//\n// https://github.com/renovatebot/renovate/issues/8224\nfunction elevateFileReplacePositionField(\n  deps: PackageDependency<GradleManagerData>[]\n): PackageDependency<GradleManagerData>[] {\n  return deps.map((dep) => ({\n    ...dep,\n    fileReplacePosition: dep?.managerData?.fileReplacePosition,\n  }));\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  const extractedDeps: PackageDependency<GradleManagerData>[] = [];\n  const registry: VariableRegistry = {};\n  const packageFilesByName: Record<string, PackageFile> = {};\n  const registryUrls: string[] = [];\n  const reorderedFiles = reorderFiles(packageFiles);\n  for (const packageFile of reorderedFiles) {\n    packageFilesByName[packageFile] = {\n      packageFile,\n      datasource,\n      deps: [],\n    };\n\n    try {\n      // TODO #7154\n      const content = (await readLocalFile(packageFile, 'utf8'))!;\n      const dir = upath.dirname(toAbsolutePath(packageFile));\n\n      const updateVars = (newVars: PackageVariables): void => {\n        const oldVars = registry[dir] || {};\n        registry[dir] = { ...oldVars, ...newVars };\n      };\n\n      if (isPropsFile(packageFile)) {\n        const { vars, deps } = parseProps(content, packageFile);\n        updateVars(vars);\n        extractedDeps.push(...deps);\n      } else if (isTOMLFile(packageFile)) {\n        const updatesFromCatalog = parseCatalog(packageFile, content);\n        extractedDeps.push(...updatesFromCatalog);\n      } else {\n        const vars = getVars(registry, dir);\n        const {\n          deps,\n          urls,\n          vars: gradleVars,\n        } = await parseGradle(content, vars, packageFile);\n        urls.forEach((url) => {\n          if (!registryUrls.includes(url)) {\n            registryUrls.push(url);\n          }\n        });\n        registry[dir] = { ...registry[dir], ...gradleVars };\n        updateVars(gradleVars);\n        extractedDeps.push(...deps);\n      }\n    } catch (err) {\n      logger.warn(\n        { err, config, packageFile },\n        `Failed to process Gradle file`\n      );\n    }\n  }\n\n  if (!extractedDeps.length) {\n    return null;\n  }\n\n  elevateFileReplacePositionField(extractedDeps).forEach((dep) => {\n    const key = dep.managerData?.packageFile;\n    // istanbul ignore else\n    if (key) {\n      let pkgFile = packageFilesByName[key];\n      if (!pkgFile) {\n        pkgFile = {\n          packageFile: key,\n          datasource,\n          deps: [],\n        } as PackageFile;\n      }\n\n      dep.registryUrls = [\n        ...new Set([...registryUrls, ...(dep.registryUrls ?? [])]),\n      ];\n\n      if (!dep.depType) {\n        dep.depType = key.startsWith('buildSrc')\n          ? 'devDependencies'\n          : 'dependencies';\n      }\n\n      const depAlreadyInPkgFile = pkgFile.deps.some(\n        (item) =>\n          item.depName === dep.depName &&\n          item.managerData?.fileReplacePosition ===\n            dep.managerData?.fileReplacePosition\n      );\n      if (!depAlreadyInPkgFile) {\n        pkgFile.deps.push(dep);\n      }\n\n      packageFilesByName[key] = pkgFile;\n    } else {\n      logger.warn({ dep }, `Failed to process Gradle dependency`);\n    }\n  });\n\n  const result = Object.values(packageFilesByName);\n  return result;\n}\n"]}