{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gradle/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { PackageDependency } from '../types';\nimport type { TokenType } from './common';\n\nexport interface GradleManagerData {\n  fileReplacePosition?: number;\n  packageFile?: string;\n}\n\nexport interface VariableData extends GradleManagerData {\n  key: string;\n  value: string;\n}\n\nexport type PackageVariables = Record<string, VariableData>;\nexport type VariableRegistry = Record<string, PackageVariables>;\n\nexport interface Token {\n  type: TokenType;\n  value: string;\n  offset: number;\n}\n\nexport interface StringInterpolation extends Token {\n  type: TokenType.StringInterpolation;\n  children: Token[]; // Tokens inside double-quoted string that are subject of interpolation\n  isComplete: boolean; // True if token has parsed completely\n  isValid: boolean; // False if string contains something unprocessable\n}\n\n// Matcher on single token\nexport interface SyntaxMatcher {\n  matchType: TokenType | TokenType[];\n  matchValue?: string | string[];\n  lookahead?: boolean;\n  tokenMapKey?: string;\n}\n\nexport type TokenMap = Record<string, Token>;\n\nexport interface SyntaxHandlerInput {\n  packageFile?: string;\n  variables: PackageVariables;\n  tokenMap: TokenMap;\n}\n\nexport type SyntaxHandlerOutput = {\n  deps?: PackageDependency<GradleManagerData>[];\n  vars?: PackageVariables;\n  urls?: string[];\n  scriptFile?: string | null;\n} | null;\n\nexport interface SyntaxMatchConfig {\n  matchers: SyntaxMatcher[];\n  handler: (_: SyntaxHandlerInput) => SyntaxHandlerOutput;\n}\n\nexport interface MatchConfig {\n  tokens: Token[];\n  variables: PackageVariables;\n  packageFile?: string;\n}\n\nexport interface ParseGradleResult {\n  deps: PackageDependency<GradleManagerData>[];\n  urls: string[];\n  vars: PackageVariables;\n}\n\nexport interface GradleCatalog {\n  versions?: Record<string, GradleVersionPointerTarget>;\n  libraries?: Record<\n    string,\n    GradleCatalogModuleDescriptor | GradleCatalogArtifactDescriptor | string\n  >;\n  plugins?: Record<string, GradleCatalogPluginDescriptor | string>;\n}\n\nexport interface GradleCatalogModuleDescriptor {\n  module: string;\n  version?: GradleVersionCatalogVersion;\n}\n\nexport interface GradleCatalogArtifactDescriptor {\n  name: string;\n  group: string;\n  version?: GradleVersionCatalogVersion;\n}\n\nexport interface GradleCatalogPluginDescriptor {\n  id: string;\n  version: GradleVersionCatalogVersion;\n}\n\nexport interface VersionPointer {\n  ref: string;\n}\n\n/**\n * Rich version declarations in Gradle version catalogs\n *\n * @see https://docs.gradle.org/current/userguide/rich_versions.html\n * @see https://docs.gradle.org/current/userguide/platforms.html#sub::toml-dependencies-format\n */\nexport interface RichVersion {\n  require?: string;\n  strictly?: string;\n  prefer?: string;\n  reject?: string[];\n  rejectAll?: boolean;\n}\n\n// references cannot themselves be references\nexport type GradleVersionPointerTarget = string | RichVersion;\nexport type GradleVersionCatalogVersion = string | VersionPointer | RichVersion;\n"]}