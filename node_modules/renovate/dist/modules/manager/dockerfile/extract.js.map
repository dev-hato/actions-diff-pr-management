{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/dockerfile/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { escapeRegExp, newlineRegex, regEx } from '../../../util/regex';\nimport { DockerDatasource } from '../../datasource/docker';\nimport * as debianVersioning from '../../versioning/debian';\nimport * as ubuntuVersioning from '../../versioning/ubuntu';\nimport type { PackageDependency, PackageFile } from '../types';\n\nconst variableMarker = '$';\n\nexport function extractVariables(image: string): Record<string, string> {\n  const variables: Record<string, string> = {};\n  const variableRegex = regEx(\n    /(?<fullvariable>\\\\?\\$(?<simplearg>\\w+)|\\\\?\\${(?<complexarg>\\w+)(?::.+?)?}+)/gi\n  );\n\n  let match: RegExpExecArray | null;\n  do {\n    match = variableRegex.exec(image);\n    if (match?.groups?.fullvariable) {\n      variables[match.groups.fullvariable] =\n        match.groups?.simplearg || match.groups?.complexarg;\n    }\n  } while (match);\n\n  return variables;\n}\n\nfunction getAutoReplaceTemplate(dep: PackageDependency): string | undefined {\n  let template = dep.replaceString;\n\n  if (dep.currentValue) {\n    let placeholder = '{{#if newValue}}{{newValue}}{{/if}}';\n    if (!dep.currentDigest) {\n      placeholder += '{{#if newDigest}}@{{newDigest}}{{/if}}';\n    }\n    template = template?.replace(dep.currentValue, placeholder);\n  }\n\n  if (dep.currentDigest) {\n    template = template?.replace(\n      dep.currentDigest,\n      '{{#if newDigest}}{{newDigest}}{{/if}}'\n    );\n  }\n\n  return template;\n}\n\nfunction processDepForAutoReplace(\n  dep: PackageDependency,\n  lineNumberRanges: number[][],\n  lines: string[],\n  linefeed: string\n): void {\n  const lineNumberRangesToReplace: number[][] = [];\n  for (const lineNumberRange of lineNumberRanges) {\n    for (const lineNumber of lineNumberRange) {\n      if (\n        (dep.currentValue && lines[lineNumber].includes(dep.currentValue)) ||\n        (dep.currentDigest && lines[lineNumber].includes(dep.currentDigest))\n      ) {\n        lineNumberRangesToReplace.push(lineNumberRange);\n      }\n    }\n  }\n\n  lineNumberRangesToReplace.sort((a, b) => {\n    return a[0] - b[0];\n  });\n\n  const minLine = lineNumberRangesToReplace[0]?.[0];\n  const maxLine =\n    lineNumberRangesToReplace[lineNumberRangesToReplace.length - 1]?.[1];\n  if (\n    lineNumberRanges.length === 1 ||\n    minLine === undefined ||\n    maxLine === undefined\n  ) {\n    return;\n  }\n\n  const unfoldedLineNumbers = Array.from(\n    { length: maxLine - minLine + 1 },\n    (_v, k) => k + minLine\n  );\n\n  dep.replaceString = unfoldedLineNumbers\n    .map((lineNumber) => lines[lineNumber])\n    .join(linefeed);\n\n  dep.autoReplaceStringTemplate = getAutoReplaceTemplate(dep);\n}\n\nexport function splitImageParts(currentFrom: string): PackageDependency {\n  let isVariable = false;\n  let cleanedCurrentFrom = currentFrom;\n\n  // Check if we have a variable in format of \"${VARIABLE:-<image>:<defaultVal>@<digest>}\"\n  // If so, remove everything except the image, defaultVal and digest.\n  if (cleanedCurrentFrom?.includes(variableMarker)) {\n    const defaultValueRegex = regEx(/^\\${.+?:-\"?(?<value>.*?)\"?}$/);\n    const defaultValueMatch =\n      defaultValueRegex.exec(cleanedCurrentFrom)?.groups;\n    if (defaultValueMatch?.value) {\n      isVariable = true;\n      cleanedCurrentFrom = defaultValueMatch.value;\n    }\n\n    if (cleanedCurrentFrom?.includes(variableMarker)) {\n      // If cleanedCurrentFrom contains a variable, after cleaning, e.g. \"$REGISTRY/alpine\", we do not support this.\n      return {\n        skipReason: 'contains-variable',\n      };\n    }\n  }\n\n  const [currentDepTag, currentDigest] = cleanedCurrentFrom.split('@');\n  const depTagSplit = currentDepTag.split(':');\n  let depName: string;\n  let currentValue: string | undefined;\n  if (\n    depTagSplit.length === 1 ||\n    depTagSplit[depTagSplit.length - 1].includes('/')\n  ) {\n    depName = currentDepTag;\n  } else {\n    currentValue = depTagSplit.pop();\n    depName = depTagSplit.join(':');\n  }\n\n  const dep: PackageDependency = {\n    depName,\n    currentValue,\n    currentDigest,\n  };\n\n  if (isVariable) {\n    dep.replaceString = cleanedCurrentFrom;\n\n    if (!dep.currentValue) {\n      delete dep.currentValue;\n    }\n\n    if (!dep.currentDigest) {\n      delete dep.currentDigest;\n    }\n  }\n\n  return dep;\n}\n\nconst quayRegex = regEx(/^quay\\.io(?::[1-9][0-9]{0,4})?/i);\n\nexport function getDep(\n  currentFrom: string | null | undefined,\n  specifyReplaceString = true,\n  registryAliases?: Record<string, string>\n): PackageDependency {\n  if (!is.string(currentFrom)) {\n    return {\n      skipReason: 'invalid-value',\n    };\n  }\n\n  // Resolve registry aliases first so that we don't need special casing later on:\n  for (const [name, value] of Object.entries(registryAliases ?? {})) {\n    const escapedName = escapeRegExp(name);\n    const groups = regEx(`(?<prefix>${escapedName})/(?<depName>.+)`).exec(\n      currentFrom\n    )?.groups;\n    if (groups) {\n      const dep = {\n        ...getDep(`${value}/${groups.depName}`),\n        replaceString: currentFrom,\n      };\n      dep.autoReplaceStringTemplate = getAutoReplaceTemplate(dep)!;\n      return dep;\n    }\n  }\n\n  const dep = splitImageParts(currentFrom);\n  if (specifyReplaceString) {\n    if (!dep.replaceString) {\n      dep.replaceString = currentFrom;\n    }\n    dep.autoReplaceStringTemplate =\n      '{{depName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n  }\n  dep.datasource = DockerDatasource.id;\n\n  // Pretty up special prefixes\n  if (dep.depName) {\n    const specialPrefixes = ['amd64', 'arm64', 'library'];\n    for (const prefix of specialPrefixes) {\n      if (dep.depName.startsWith(`${prefix}/`)) {\n        dep.packageName = dep.depName;\n        dep.depName = dep.depName.replace(`${prefix}/`, '');\n        if (specifyReplaceString) {\n          dep.autoReplaceStringTemplate =\n            '{{packageName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n        }\n      }\n    }\n  }\n\n  if (dep.depName === 'ubuntu') {\n    dep.versioning = ubuntuVersioning.id;\n  }\n\n  if (dep.depName === 'debian') {\n    dep.versioning = debianVersioning.id;\n  }\n\n  // Don't display quay.io ports\n  if (dep.depName && quayRegex.test(dep.depName)) {\n    const depName = dep.depName.replace(quayRegex, 'quay.io');\n    if (depName !== dep.depName) {\n      dep.packageName = dep.depName;\n      dep.depName = depName;\n      dep.autoReplaceStringTemplate =\n        '{{packageName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n    }\n  }\n\n  return dep;\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  const stageNames: string[] = [];\n  const args: Record<string, string> = {};\n  const argsLines: Record<string, number[]> = {};\n\n  let escapeChar = '\\\\\\\\';\n  let lookForEscapeChar = true;\n\n  const lineFeed = content.indexOf('\\r\\n') >= 0 ? '\\r\\n' : '\\n';\n  const lines = content.split(newlineRegex);\n  for (let lineNumber = 0; lineNumber < lines.length; ) {\n    const lineNumberInstrStart = lineNumber;\n    let instruction = lines[lineNumber];\n\n    if (lookForEscapeChar) {\n      const directivesMatch = regEx(\n        /^[ \\t]*#[ \\t]*(?<directive>syntax|escape)[ \\t]*=[ \\t]*(?<escapeChar>\\S)/i\n      ).exec(instruction);\n      if (!directivesMatch) {\n        lookForEscapeChar = false;\n      } else if (directivesMatch.groups?.directive.toLowerCase() === 'escape') {\n        if (directivesMatch.groups?.escapeChar === '`') {\n          escapeChar = '`';\n        }\n        lookForEscapeChar = false;\n      }\n    }\n\n    const lineContinuationRegex = regEx(escapeChar + '[ \\\\t]*$|^[ \\\\t]*#', 'm');\n    let lineLookahead = instruction;\n    while (\n      !lookForEscapeChar &&\n      !instruction.trimStart().startsWith('#') &&\n      lineContinuationRegex.test(lineLookahead)\n    ) {\n      lineLookahead = lines[++lineNumber] || '';\n      instruction += '\\n' + lineLookahead;\n    }\n\n    const argRegex = regEx(\n      '^[ \\\\t]*ARG(?:' +\n        escapeChar +\n        '[ \\\\t]*\\\\r?\\\\n| |\\\\t|#.*?\\\\r?\\\\n)+(?<name>\\\\S+)[ =](?<value>.*)',\n      'im'\n    );\n    const argMatch = argRegex.exec(instruction);\n    if (argMatch?.groups?.name) {\n      argsLines[argMatch.groups.name] = [lineNumberInstrStart, lineNumber];\n      let argMatchValue = argMatch.groups?.value;\n\n      if (\n        argMatchValue.charAt(0) === '\"' &&\n        argMatchValue.charAt(argMatchValue.length - 1) === '\"'\n      ) {\n        argMatchValue = argMatchValue.slice(1, -1);\n      }\n\n      args[argMatch.groups.name] = argMatchValue || '';\n    }\n\n    const fromRegex = new RegExp(\n      '^[ \\\\t]*FROM(?:' +\n        escapeChar +\n        '[ \\\\t]*\\\\r?\\\\n| |\\\\t|#.*?\\\\r?\\\\n|--platform=\\\\S+)+(?<image>\\\\S+)(?:(?:' +\n        escapeChar +\n        '[ \\\\t]*\\\\r?\\\\n| |\\\\t|#.*?\\\\r?\\\\n)+as[ \\\\t]+(?<name>\\\\S+))?',\n      'im'\n    ); // TODO #12875 complex for re2 has too many not supported groups\n    const fromMatch = instruction.match(fromRegex);\n    if (fromMatch?.groups?.image) {\n      let fromImage = fromMatch.groups.image;\n      const lineNumberRanges: number[][] = [[lineNumberInstrStart, lineNumber]];\n\n      if (fromImage.includes(variableMarker)) {\n        const variables = extractVariables(fromImage);\n        for (const [fullVariable, argName] of Object.entries(variables)) {\n          const resolvedArgValue = args[argName];\n          if (resolvedArgValue || resolvedArgValue === '') {\n            fromImage = fromImage.replace(fullVariable, resolvedArgValue);\n            lineNumberRanges.push(argsLines[argName]);\n          }\n        }\n      }\n\n      if (fromMatch.groups?.name) {\n        logger.debug(\n          `Found a multistage build stage name: ${fromMatch.groups.name}`\n        );\n        stageNames.push(fromMatch.groups.name);\n      }\n      if (fromImage === 'scratch') {\n        logger.debug('Skipping scratch');\n      } else if (fromImage && stageNames.includes(fromImage)) {\n        logger.debug({ image: fromImage }, 'Skipping alias FROM');\n      } else {\n        const dep = getDep(fromImage);\n        processDepForAutoReplace(dep, lineNumberRanges, lines, lineFeed);\n        logger.trace(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Dockerfile FROM'\n        );\n        deps.push(dep);\n      }\n    }\n\n    const copyFromRegex = new RegExp(\n      '^[ \\\\t]*COPY(?:' +\n        escapeChar +\n        '[ \\\\t]*\\\\r?\\\\n| |\\\\t|#.*?\\\\r?\\\\n|--[a-z]+=[a-zA-Z0-9_.:-]+?)+--from=(?<image>\\\\S+)',\n      'im'\n    ); // TODO #12875 complex for re2 has too many not supported groups\n    const copyFromMatch = instruction.match(copyFromRegex);\n    if (copyFromMatch?.groups?.image) {\n      if (stageNames.includes(copyFromMatch.groups.image)) {\n        logger.debug(\n          { image: copyFromMatch.groups.image },\n          'Skipping alias COPY --from'\n        );\n      } else if (Number.isNaN(Number(copyFromMatch.groups.image))) {\n        const dep = getDep(copyFromMatch.groups.image);\n        const lineNumberRanges: number[][] = [\n          [lineNumberInstrStart, lineNumber],\n        ];\n        processDepForAutoReplace(dep, lineNumberRanges, lines, lineFeed);\n        logger.debug(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Dockerfile COPY --from'\n        );\n        deps.push(dep);\n      } else {\n        logger.debug(\n          { image: copyFromMatch.groups.image },\n          'Skipping index reference COPY --from'\n        );\n      }\n    }\n\n    lineNumber += 1;\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n  for (const d of deps) {\n    d.depType = 'stage';\n  }\n  deps[deps.length - 1].depType = 'final';\n  return { deps };\n}\n"]}