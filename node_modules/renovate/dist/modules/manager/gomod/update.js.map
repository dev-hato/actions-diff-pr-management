{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gomod/update.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: types (#7154)\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { UpdateDependencyConfig } from '../types';\n\nfunction getDepNameWithNoVersion(depName: string): string {\n  let depNameNoVersion = depName.split('/').slice(0, 3).join('/');\n  if (depNameNoVersion.startsWith('gopkg.in')) {\n    depNameNoVersion = depNameNoVersion.replace(regEx(/\\.v\\d+$/), '');\n  }\n  return depNameNoVersion;\n}\n\nexport function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): string | null {\n  try {\n    logger.debug(`gomod.updateDependency: ${upgrade.newValue}`);\n    const { depName, depType, updateType } = upgrade;\n    if (updateType === 'replacement') {\n      logger.warn('gomod manager does not support replacement updates yet');\n      return null;\n    }\n    // istanbul ignore if: should never happen\n    if (!depName || !upgrade.managerData) {\n      return null;\n    }\n    const depNameNoVersion = getDepNameWithNoVersion(depName);\n    const lines = fileContent.split(newlineRegex);\n    const lineToChange = lines[upgrade.managerData.lineNumber];\n    if (\n      !lineToChange.includes(depNameNoVersion) &&\n      !lineToChange.includes('rethinkdb/rethinkdb-go.v5')\n    ) {\n      logger.debug(\n        { lineToChange, depName },\n        \"go.mod current line doesn't contain dependency\"\n      );\n      return null;\n    }\n    let updateLineExp: RegExp | undefined;\n\n    if (depType === 'golang') {\n      updateLineExp = regEx(/(?<depPart>go)(?<divider>\\s+)[^\\s]+/);\n    }\n    if (depType === 'replace') {\n      updateLineExp = regEx(\n        /^(?<depPart>replace\\s+[^\\s]+[\\s]+[=][>]+\\s+)(?<divider>[^\\s]+\\s+)[^\\s]+/\n      );\n    } else if (depType === 'require') {\n      if (upgrade.managerData.multiLine) {\n        updateLineExp = regEx(/^(?<depPart>\\s+[^\\s]+)(?<divider>\\s+)[^\\s]+/);\n      } else {\n        updateLineExp = regEx(\n          /^(?<depPart>require\\s+[^\\s]+)(?<divider>\\s+)[^\\s]+/\n        );\n      }\n    }\n    if (updateLineExp && !updateLineExp.test(lineToChange)) {\n      logger.debug('No image line found');\n      return null;\n    }\n    let newLine: string;\n    if (upgrade.updateType === 'digest') {\n      const newDigestRightSized = upgrade.newDigest!.substring(\n        0,\n        upgrade.currentDigest!.length\n      );\n      if (lineToChange.includes(newDigestRightSized)) {\n        return fileContent;\n      }\n      logger.debug(\n        { depName, lineToChange, newDigestRightSized },\n        'gomod: need to update digest'\n      );\n      newLine = lineToChange.replace(\n        // TODO: can be undefined? (#7154)\n        updateLineExp!,\n        `$<depPart>$<divider>${newDigestRightSized}`\n      );\n    } else {\n      newLine = lineToChange.replace(\n        // TODO: can be undefined? (#7154)\n        updateLineExp!,\n        `$<depPart>$<divider>${upgrade.newValue}`\n      );\n    }\n    if (upgrade.updateType === 'major') {\n      logger.debug({ depName }, 'gomod: major update');\n      if (depName.startsWith('gopkg.in/')) {\n        const oldV = depName.split('.').pop();\n        newLine = newLine.replace(`.${oldV}`, `.v${upgrade.newMajor}`);\n        // Package renames - I couldn't think of a better place to do this\n        newLine = newLine.replace(\n          'gorethink/gorethink.v5',\n          'rethinkdb/rethinkdb-go.v5'\n        );\n      } else if (\n        upgrade.newMajor! > 1 &&\n        !newLine.includes(`/v${upgrade.newMajor}`)\n      ) {\n        if (depName === depNameNoVersion) {\n          // If package currently has no version, pin to latest one.\n          newLine = newLine.replace(depName, `${depName}/v${upgrade.newMajor}`);\n        } else {\n          // Replace version\n          const [oldV] = upgrade.currentValue!.split('.');\n          newLine = newLine.replace(\n            regEx(`/${oldV}(\\\\s+)`, undefined, false),\n            `/v${upgrade.newMajor}$1`\n          );\n        }\n      }\n    }\n    if (lineToChange.endsWith('+incompatible')) {\n      let toAdd = '+incompatible';\n\n      if (upgrade.updateType === 'major' && upgrade.newMajor! >= 2) {\n        toAdd = '';\n      }\n      newLine += toAdd;\n    }\n    if (newLine === lineToChange) {\n      logger.debug('No changes necessary');\n      return fileContent;\n    }\n    lines[upgrade.managerData.lineNumber] = newLine;\n    return lines.join('\\n');\n  } catch (err) {\n    logger.debug({ err }, 'Error setting new go.mod version');\n    return null;\n  }\n}\n"]}