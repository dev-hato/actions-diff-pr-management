{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gomod/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { GoDatasource } from '../../datasource/go';\nimport { GolangVersionDatasource } from '../../datasource/golang-version';\nimport { isVersion } from '../../versioning/semver';\nimport type { PackageDependency, PackageFile } from '../types';\n\nfunction getDep(\n  lineNumber: number,\n  match: RegExpMatchArray,\n  type: string\n): PackageDependency {\n  const [, , currentValue] = match;\n  let [, depName] = match;\n  depName = depName.replace(regEx(/\"/g), '');\n  const dep: PackageDependency = {\n    managerData: {\n      lineNumber,\n    },\n    depName,\n    depType: type,\n    currentValue,\n  };\n  if (isVersion(currentValue)) {\n    dep.datasource = GoDatasource.id;\n  } else {\n    dep.skipReason = 'unsupported-version';\n  }\n  const digestMatch = regEx(/v0\\.0.0-\\d{14}-([a-f0-9]{12})/).exec(currentValue);\n  if (digestMatch) {\n    [, dep.currentDigest] = digestMatch;\n    dep.digestOneAndOnly = true;\n  }\n  return dep;\n}\n\nfunction getGoDep(lineNumber: number, goVer: string): PackageDependency {\n  return {\n    managerData: {\n      lineNumber,\n    },\n    depName: 'go',\n    depType: 'golang',\n    currentValue: goVer,\n    datasource: GolangVersionDatasource.id,\n    versioning: 'npm',\n    rangeStrategy: 'replace',\n  };\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  logger.trace({ content }, 'gomod.extractPackageFile()');\n  const constraints: Record<string, any> = {};\n  const deps: PackageDependency[] = [];\n  try {\n    const lines = content.split(newlineRegex);\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      let line = lines[lineNumber];\n      const goVer = line.startsWith('go ') ? line.replace('go ', '') : null;\n      if (goVer && semver.validRange(goVer)) {\n        const dep = getGoDep(lineNumber, goVer);\n        deps.push(dep);\n        constraints.go = line.replace('go ', '^');\n      }\n      const replaceMatch = regEx(\n        /^replace\\s+[^\\s]+[\\s]+[=][>]\\s+([^\\s]+)\\s+([^\\s]+)/\n      ).exec(line);\n      if (replaceMatch) {\n        const dep = getDep(lineNumber, replaceMatch, 'replace');\n        deps.push(dep);\n      }\n      const requireMatch = regEx(/^require\\s+([^\\s]+)\\s+([^\\s]+)/).exec(line);\n      if (requireMatch && !line.endsWith('// indirect')) {\n        logger.trace({ lineNumber }, `require line: \"${line}\"`);\n        const dep = getDep(lineNumber, requireMatch, 'require');\n        deps.push(dep);\n      }\n      if (line.trim() === 'require (') {\n        logger.trace(`Matched multi-line require on line ${lineNumber}`);\n        do {\n          lineNumber += 1;\n          line = lines[lineNumber];\n          const multiMatch = regEx(/^\\s+([^\\s]+)\\s+([^\\s]+)/).exec(line);\n          logger.trace(`reqLine: \"${line}\"`);\n          if (multiMatch && !line.endsWith('// indirect')) {\n            logger.trace({ lineNumber }, `require line: \"${line}\"`);\n            const dep = getDep(lineNumber, multiMatch, 'require');\n            dep.managerData!.multiLine = true;\n            deps.push(dep);\n          } else if (line.trim() !== ')') {\n            logger.trace(`No multi-line match: ${line}`);\n          }\n        } while (line.trim() !== ')');\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting go modules');\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { constraints, deps };\n}\n"]}