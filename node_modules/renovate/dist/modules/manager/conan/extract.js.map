{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/conan/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\nimport type { PackageDependency, PackageFile } from '../types';\n\nconst regex = regEx(\n  `(?<name>[-_a-z0-9]+)/(?<version>[^@\\n{*\"']+)(?<userChannel>@[-_a-zA-Z0-9]+/[^\\n.{*\"' ]+)?`\n);\n\nfunction setDepType(content: string, originalType: string): string {\n  let depType = originalType;\n  if (content.includes('python_requires')) {\n    depType = 'python_requires';\n  } else if (content.includes('build_require')) {\n    depType = 'build_requires';\n  } else if (content.includes('requires')) {\n    depType = 'requires';\n  }\n  return depType;\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  // only process sections where requirements are defined\n  const sections = content.split(/def |\\n\\[/).filter(\n    (part) =>\n      part.includes('python_requires') || // only matches python_requires\n      part.includes('build_require') || // matches [build_requires], build_requirements(), and build_requires\n      part.includes('require') // matches [requires], requirements(), and requires\n  );\n\n  const deps: PackageDependency[] = [];\n  for (const section of sections) {\n    let depType = setDepType(section, 'requires');\n    const rawLines = section.split('\\n').filter(is.nonEmptyString);\n\n    for (const rawline of rawLines) {\n      // don't process after a comment\n      const sanitizedLine = rawline.split('#')[0].split('//')[0];\n      if (sanitizedLine) {\n        depType = setDepType(sanitizedLine, depType);\n        // extract all dependencies from each line\n        const lines = sanitizedLine.split(/[\"'],/);\n        for (const line of lines) {\n          const matches = regex.exec(line.trim());\n          if (matches?.groups) {\n            let dep: PackageDependency = {};\n            const depName = matches.groups?.name;\n            const currentValue = matches.groups?.version.trim();\n\n            let replaceString = `${depName}/${currentValue}`;\n            // conan uses @_/_ as a placeholder for no userChannel\n            let userAndChannel = '@_/_';\n\n            if (matches.groups.userChannel) {\n              userAndChannel = matches.groups.userChannel;\n              replaceString = `${depName}/${currentValue}${userAndChannel}`;\n            }\n            const packageName = `${depName}/${currentValue}${userAndChannel}`;\n\n            dep = {\n              ...dep,\n              depName,\n              packageName,\n              currentValue,\n              replaceString,\n              depType,\n            };\n            deps.push(dep);\n          }\n        }\n      }\n    }\n  }\n\n  return deps.length ? { deps } : null;\n}\n"]}