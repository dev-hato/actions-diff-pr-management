{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/composer/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { PackagistDatasource } from '../../datasource/packagist';\nimport { api as semverComposer } from '../../versioning/composer';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type {\n  ComposerConfig,\n  ComposerLock,\n  ComposerManagerData,\n  ComposerRepositories,\n  Repo,\n} from './types';\n\n/**\n * The regUrl is expected to be a base URL. GitLab composer repository installation guide specifies\n * to use a base URL containing packages.json. Composer still works in this scenario by determining\n * whether to add / remove packages.json from the URL.\n *\n * See https://github.com/composer/composer/blob/750a92b4b7aecda0e5b2f9b963f1cb1421900675/src/Composer/Repository/ComposerRepository.php#L815\n */\nfunction transformRegUrl(url: string): string {\n  return url.replace(regEx(/(\\/packages\\.json)$/), '');\n}\n\n/**\n * Parse the repositories field from a composer.json\n *\n * Entries with type vcs or git will be added to repositories,\n * other entries will be added to registryUrls\n */\nfunction parseRepositories(\n  repoJson: ComposerRepositories,\n  repositories: Record<string, Repo>,\n  registryUrls: string[]\n): void {\n  try {\n    let packagist = true;\n    Object.entries(repoJson).forEach(([key, repo]) => {\n      if (is.object(repo)) {\n        const name = is.array(repoJson) ? repo.name : key;\n\n        switch (repo.type) {\n          case 'vcs':\n          case 'git':\n            repositories[name!] = repo;\n            break;\n          case 'composer':\n            registryUrls.push(transformRegUrl(repo.url));\n            break;\n          case 'package':\n            logger.debug(\n              { url: repo.url },\n              'type package is not supported yet'\n            );\n        }\n        if (repo.packagist === false || repo['packagist.org'] === false) {\n          packagist = false;\n        }\n      } // istanbul ignore else: invalid repo\n      else if (['packagist', 'packagist.org'].includes(key) && repo === false) {\n        packagist = false;\n      }\n    });\n    if (packagist) {\n      registryUrls.push('https://packagist.org');\n    } else {\n      logger.debug('Disabling packagist.org');\n    }\n  } catch (e) /* istanbul ignore next */ {\n    logger.debug(\n      { repositories: repoJson },\n      'Error parsing composer.json repositories config'\n    );\n  }\n}\n\nexport async function extractPackageFile(\n  content: string,\n  fileName: string\n): Promise<PackageFile | null> {\n  logger.trace(`composer.extractPackageFile(${fileName})`);\n  let composerJson: ComposerConfig;\n  try {\n    composerJson = JSON.parse(content);\n  } catch (err) {\n    logger.debug({ fileName }, 'Invalid JSON');\n    return null;\n  }\n  const repositories: Record<string, Repo> = {};\n  const registryUrls: string[] = [];\n  const res: PackageFile = { deps: [] };\n\n  // handle lockfile\n  const lockfilePath = fileName.replace(regEx(/\\.json$/), '.lock');\n  const lockContents = await readLocalFile(lockfilePath, 'utf8');\n  let lockParsed: ComposerLock | undefined;\n  if (lockContents) {\n    logger.debug({ packageFile: fileName }, 'Found composer lock file');\n    res.lockFiles = [lockfilePath];\n    try {\n      lockParsed = JSON.parse(lockContents) as ComposerLock;\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn({ err }, 'Error processing composer.lock');\n    }\n  }\n\n  // handle composer.json repositories\n  if (composerJson.repositories) {\n    parseRepositories(composerJson.repositories, repositories, registryUrls);\n  }\n  if (registryUrls.length !== 0) {\n    res.registryUrls = registryUrls;\n  }\n\n  const deps: PackageDependency[] = [];\n  const depTypes: ('require' | 'require-dev')[] = ['require', 'require-dev'];\n  for (const depType of depTypes) {\n    if (composerJson[depType]) {\n      try {\n        for (const [depName, version] of Object.entries(\n          composerJson[depType]!\n        )) {\n          const currentValue = version.trim();\n          // Default datasource and packageName\n          let datasource = PackagistDatasource.id;\n          let packageName = depName;\n\n          // Check custom repositories by type\n          if (repositories[depName]) {\n            switch (repositories[depName].type) {\n              case 'vcs':\n              case 'git':\n                datasource = GitTagsDatasource.id;\n                packageName = repositories[depName].url;\n                break;\n            }\n          }\n          const dep: PackageDependency = {\n            depType,\n            depName,\n            currentValue,\n            datasource,\n          };\n          if (depName !== packageName) {\n            dep.packageName = packageName;\n          }\n          if (!depName.includes('/')) {\n            dep.skipReason = 'unsupported';\n          }\n          if (lockParsed) {\n            const lockField =\n              depType === 'require'\n                ? 'packages'\n                : /* istanbul ignore next */ 'packages-dev';\n            const lockedDep = lockParsed[lockField]?.find(\n              (item) => item.name === dep.depName\n            );\n            if (lockedDep && semverComposer.isVersion(lockedDep.version)) {\n              dep.lockedVersion = lockedDep.version.replace(regEx(/^v/i), '');\n            }\n          }\n          deps.push(dep);\n        }\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug({ fileName, depType, err }, 'Error parsing composer.json');\n        return null;\n      }\n    }\n  }\n  if (!deps.length) {\n    return null;\n  }\n  res.deps = deps;\n  if (is.string(composerJson.type)) {\n    const managerData: ComposerManagerData = {\n      composerJsonType: composerJson.type,\n    };\n    res.managerData = managerData;\n  }\n  return res;\n}\n"]}