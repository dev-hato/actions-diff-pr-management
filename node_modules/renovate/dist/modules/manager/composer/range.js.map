{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../../lib/modules/manager/composer/range.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AAKzC,SAAgB,gBAAgB,CAAC,MAAmB;IAClD,MAAM,EACJ,WAAW,GAAG,EAAE,EAChB,OAAO,EACP,OAAO,EACP,YAAY,EACZ,aAAa,GACd,GAAG,MAAM,CAAC;IACX,MAAM,EAAE,gBAAgB,EAAE,GAAG,WAAkC,CAAC;IAChE,MAAM,cAAc,GAAG,YAAY,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IACtD,IAAI,aAAa,KAAK,MAAM,IAAI,cAAc,EAAE;QAC9C,eAAM,CAAC,KAAK,CACV,EAAE,YAAY,EAAE,EAChB,sDAAsD,CACvD,CAAC;QACF,OAAO,OAAO,CAAC;KAChB;IACD,IAAI,aAAa,KAAK,MAAM,EAAE;QAC5B,OAAO,aAAa,CAAC;KACtB;IACD,IAAI,OAAO,KAAK,aAAa,EAAE;QAC7B,8BAA8B;QAC9B,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAC7D,OAAO,KAAK,CAAC;KACd;IACD,MAAM,KAAK,GACT,gBAAgB;QAChB,CAAC;YACC,SAAS;YACT,aAAa;YACb,iBAAiB;YACjB,gBAAgB;YAChB,qBAAqB;SACtB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IAC/B,IAAI,KAAK,IAAI,OAAO,KAAK,SAAS,EAAE;QAClC,0CAA0C;QAC1C,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAC7D,OAAO,KAAK,CAAC;KACd;IACD,IACE,cAAc;QACd,CAAC,gBAAgB,IAAI,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,EACxE;QACA,OAAO,OAAO,CAAC;KAChB;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AA9CD,4CA8CC","sourcesContent":["import { logger } from '../../../logger';\nimport type { RangeStrategy } from '../../../types';\nimport type { RangeConfig } from '../types';\nimport type { ComposerManagerData } from './types';\n\nexport function getRangeStrategy(config: RangeConfig): RangeStrategy {\n  const {\n    managerData = {},\n    depType,\n    depName,\n    currentValue,\n    rangeStrategy,\n  } = config;\n  const { composerJsonType } = managerData as ComposerManagerData;\n  const isComplexRange = currentValue?.includes(' || ');\n  if (rangeStrategy === 'bump' && isComplexRange) {\n    logger.debug(\n      { currentValue },\n      'Replacing bump strategy for complex range with widen'\n    );\n    return 'widen';\n  }\n  if (rangeStrategy !== 'auto') {\n    return rangeStrategy;\n  }\n  if (depType === 'require-dev') {\n    // Always pin dev dependencies\n    logger.trace({ dependency: depName }, 'Pinning require-dev');\n    return 'pin';\n  }\n  const isApp =\n    composerJsonType &&\n    ![\n      'library',\n      'metapackage',\n      'composer-plugin',\n      'symfony-bundle',\n      'typo3-cms-extension',\n    ].includes(composerJsonType);\n  if (isApp && depType === 'require') {\n    // Pin dependencies if it's an app/project\n    logger.trace({ dependency: depName }, 'Pinning app require');\n    return 'pin';\n  }\n  if (\n    isComplexRange ||\n    (composerJsonType && ['typo3-cms-extension'].includes(composerJsonType))\n  ) {\n    return 'widen';\n  }\n  return 'replace';\n}\n"]}