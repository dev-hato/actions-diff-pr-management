{"version":3,"file":"package-tree.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nuget/package-tree.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport Graph from 'graph-data-structure';\nimport minimatch from 'minimatch';\nimport upath from 'upath';\nimport { logger } from '../../../logger';\nimport { getFileList } from '../../../util/git';\nimport { readFileAsXmlDocument } from './util';\n\nexport const NUGET_CENTRAL_FILE = 'Directory.Packages.props';\nexport const MSBUILD_CENTRAL_FILE = 'Packages.props';\n\n/**\n * Get all package files at any level of ancestry that depend on packageFileName\n */\nexport async function getDependentPackageFiles(\n  packageFileName: string,\n  isCentralManament = false\n): Promise<string[]> {\n  const packageFiles = await getAllPackageFiles();\n  const graph: ReturnType<typeof Graph> = Graph();\n\n  if (isCentralManament) {\n    graph.addNode(packageFileName);\n  }\n\n  const parentDir =\n    packageFileName === NUGET_CENTRAL_FILE ||\n    packageFileName === MSBUILD_CENTRAL_FILE\n      ? ''\n      : upath.dirname(packageFileName);\n\n  for (const f of packageFiles) {\n    graph.addNode(f);\n\n    if (isCentralManament && upath.dirname(f).startsWith(parentDir)) {\n      graph.addEdge(packageFileName, f);\n    }\n  }\n\n  for (const f of packageFiles) {\n    const doc = await readFileAsXmlDocument(f);\n    if (!doc) {\n      continue;\n    }\n\n    const projectReferenceAttributes = doc\n      .childrenNamed('ItemGroup')\n      .map((ig) => ig.childrenNamed('ProjectReference'))\n      .flat()\n      .map((pf) => pf.attr['Include'])\n      .filter(is.nonEmptyString);\n\n    const projectReferences = projectReferenceAttributes.map((a) =>\n      upath.normalize(a)\n    );\n    const normalizedRelativeProjectReferences = projectReferences.map((r) =>\n      reframeRelativePathToRootOfRepo(f, r)\n    );\n\n    for (const ref of normalizedRelativeProjectReferences) {\n      graph.addEdge(ref, f);\n    }\n\n    if (graph.hasCycle()) {\n      throw new Error('Circular reference detected in NuGet package files');\n    }\n  }\n\n  const dependents = recursivelyGetDependentPackageFiles(\n    packageFileName,\n    graph\n  );\n\n  // deduplicate\n  return Array.from(new Set(dependents.reverse())).reverse();\n}\n\n/**\n * Traverse graph and find dependent package files at any level of ancestry\n */\nfunction recursivelyGetDependentPackageFiles(\n  packageFileName: string,\n  graph: ReturnType<typeof Graph>\n): string[] {\n  const dependents = graph.adjacent(packageFileName);\n\n  if (dependents.length === 0) {\n    return [];\n  }\n\n  return dependents.concat(\n    dependents.map((d) => recursivelyGetDependentPackageFiles(d, graph)).flat()\n  );\n}\n\n/**\n * Take the path relative from a project file, and make it relative from the root of the repo\n */\nfunction reframeRelativePathToRootOfRepo(\n  dependentProjectRelativePath: string,\n  projectReference: string\n): string {\n  const virtualRepoRoot = '/';\n  const absoluteDependentProjectPath = upath.resolve(\n    virtualRepoRoot,\n    dependentProjectRelativePath\n  );\n  const absoluteProjectReferencePath = upath.resolve(\n    upath.dirname(absoluteDependentProjectPath),\n    projectReference\n  );\n  const relativeProjectReferencePath = upath.relative(\n    virtualRepoRoot,\n    absoluteProjectReferencePath\n  );\n\n  return relativeProjectReferencePath;\n}\n\n/**\n * Get a list of package files in localDir\n */\nasync function getAllPackageFiles(): Promise<string[]> {\n  const allFiles = await getFileList();\n  const filteredPackageFiles = allFiles.filter(\n    minimatch.filter('*.{cs,vb,fs}proj', { matchBase: true, nocase: true })\n  );\n\n  logger.trace({ filteredPackageFiles }, 'Found package files');\n\n  return filteredPackageFiles;\n}\n"]}