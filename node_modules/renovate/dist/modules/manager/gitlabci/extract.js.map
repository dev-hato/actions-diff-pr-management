{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gitlabci/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\nimport type { GitlabPipeline, Image, Job, Services } from './types';\nimport { getGitlabDep, replaceReferenceTags } from './utils';\n\nexport function extractFromImage(\n  image: Image | undefined,\n  registryAliases?: Record<string, string>\n): PackageDependency | null {\n  if (is.undefined(image)) {\n    return null;\n  }\n  let dep: PackageDependency | null = null;\n  if (is.string(image)) {\n    dep = getGitlabDep(image, registryAliases);\n    dep.depType = 'image';\n  } else if (is.string(image?.name)) {\n    dep = getGitlabDep(image.name, registryAliases);\n    dep.depType = 'image-name';\n  }\n  return dep;\n}\n\nexport function extractFromServices(\n  services: Services | undefined,\n  registryAliases?: Record<string, string>\n): PackageDependency[] {\n  if (is.undefined(services)) {\n    return [];\n  }\n  const deps: PackageDependency[] = [];\n  for (const service of services) {\n    if (is.string(service)) {\n      const dep = getGitlabDep(service, registryAliases);\n      dep.depType = 'service-image';\n      deps.push(dep);\n    } else if (is.string(service?.name)) {\n      const dep = getGitlabDep(service.name, registryAliases);\n      dep.depType = 'service-image';\n      deps.push(dep);\n    }\n  }\n  return deps;\n}\n\nexport function extractFromJob(\n  job: Job | undefined,\n  registryAliases?: Record<string, string>\n): PackageDependency[] {\n  if (is.undefined(job)) {\n    return [];\n  }\n  const deps: PackageDependency[] = [];\n  if (is.object(job)) {\n    const { image, services } = { ...job };\n    if (is.object(image) || is.string(image)) {\n      const dep = extractFromImage(image, registryAliases);\n      if (dep) {\n        deps.push(dep);\n      }\n    }\n    if (is.array(services)) {\n      deps.push(...extractFromServices(services, registryAliases));\n    }\n  }\n  return deps;\n}\n\nexport function extractPackageFile(\n  content: string,\n  _fileName: string,\n  config: ExtractConfig\n): PackageFile | null {\n  let deps: PackageDependency[] = [];\n  try {\n    const doc = load(replaceReferenceTags(content), {\n      json: true,\n    }) as Record<string, Image | Services | Job>;\n    if (is.object(doc)) {\n      for (const [property, value] of Object.entries(doc)) {\n        switch (property) {\n          case 'image':\n            {\n              const dep = extractFromImage(\n                value as Image,\n                config.registryAliases\n              );\n              if (dep) {\n                deps.push(dep);\n              }\n            }\n            break;\n\n          case 'services':\n            deps.push(\n              ...extractFromServices(value as Services, config.registryAliases)\n            );\n            break;\n\n          default:\n            deps.push(...extractFromJob(value as Job, config.registryAliases));\n            break;\n        }\n      }\n      deps = deps.filter(is.truthy);\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting GitLab CI dependencies');\n  }\n\n  return deps.length ? { deps } : null;\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  const filesToExamine = [...packageFiles];\n  const seen = new Set<string>(packageFiles);\n  const results: PackageFile[] = [];\n\n  // extract all includes from the files\n  while (filesToExamine.length > 0) {\n    const file = filesToExamine.pop()!;\n\n    const content = await readLocalFile(file, 'utf8');\n    if (!content) {\n      logger.debug({ file }, 'Empty or non existent gitlabci file');\n\n      continue;\n    }\n    let doc: GitlabPipeline;\n    try {\n      doc = load(replaceReferenceTags(content), {\n        json: true,\n      }) as GitlabPipeline;\n    } catch (err) {\n      logger.warn({ err, file }, 'Error extracting GitLab CI dependencies');\n      continue;\n    }\n\n    if (is.array(doc?.include)) {\n      for (const includeObj of doc.include) {\n        if (is.string(includeObj.local)) {\n          const fileObj = includeObj.local.replace(regEx(/^\\//), '');\n          if (!seen.has(fileObj)) {\n            seen.add(fileObj);\n            filesToExamine.push(fileObj);\n          }\n        }\n      }\n    } else if (is.string(doc?.include)) {\n      const fileObj = doc.include.replace(regEx(/^\\//), '');\n      if (!seen.has(fileObj)) {\n        seen.add(fileObj);\n        filesToExamine.push(fileObj);\n      }\n    }\n\n    const result = extractPackageFile(content, file, config);\n    if (result !== null) {\n      results.push({\n        packageFile: file,\n        deps: result.deps,\n      });\n    }\n  }\n\n  logger.trace(\n    { packageFiles, files: filesToExamine.entries() },\n    'extracted all GitLab CI files'\n  );\n\n  if (!results.length) {\n    return null;\n  }\n\n  return results;\n}\n"]}