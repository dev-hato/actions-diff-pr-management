{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cocoapods/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { getSiblingFileName, localPathExists } from '../../../util/fs';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport { GitlabTagsDatasource } from '../../datasource/gitlab-tags';\nimport { PodDatasource } from '../../datasource/pod';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { ParsedLine } from './types';\n\nconst regexMappings = [\n  regEx(`^\\\\s*pod\\\\s+(['\"])(?<spec>[^'\"/]+)(\\\\/(?<subspec>[^'\"]+))?(['\"])`),\n  regEx(\n    `^\\\\s*pod\\\\s+(['\"])[^'\"]+(['\"])\\\\s*,\\\\s*(['\"])(?<currentValue>[^'\"]+)(['\"])\\\\s*$`\n  ),\n  regEx(`,\\\\s*:git\\\\s*=>\\\\s*(['\"])(?<git>[^'\"]+)(['\"])`),\n  regEx(`,\\\\s*:tag\\\\s*=>\\\\s*(['\"])(?<tag>[^'\"]+)(['\"])`),\n  regEx(`,\\\\s*:path\\\\s*=>\\\\s*(['\"])(?<path>[^'\"]+)(['\"])`),\n  regEx(`^\\\\s*source\\\\s*(['\"])(?<source>[^'\"]+)(['\"])`),\n];\n\nexport function parseLine(line: string): ParsedLine {\n  let result: ParsedLine = {};\n  if (!line) {\n    return result;\n  }\n  for (const regex of Object.values(regexMappings)) {\n    const match = regex.exec(line.replace(regEx(/#.*$/), ''));\n    if (match?.groups) {\n      result = { ...result, ...match.groups };\n    }\n  }\n\n  if (result.spec) {\n    const depName = result.subspec\n      ? `${result.spec}/${result.subspec}`\n      : result.spec;\n    const groupName = result.spec;\n    if (depName) {\n      result.depName = depName;\n    }\n    if (groupName) {\n      result.groupName = groupName;\n    }\n    delete result.spec;\n    delete result.subspec;\n  }\n\n  return result;\n}\n\nexport function gitDep(parsedLine: ParsedLine): PackageDependency | null {\n  const { depName, git, tag } = parsedLine;\n\n  const platformMatch = regEx(\n    /[@/](?<platform>github|gitlab)\\.com[:/](?<account>[^/]+)\\/(?<repo>[^/]+)/\n  ).exec(git ?? '');\n\n  if (platformMatch?.groups) {\n    const { account, repo, platform } = platformMatch.groups;\n    if (account && repo) {\n      const datasource =\n        platform === 'github'\n          ? GithubTagsDatasource.id\n          : GitlabTagsDatasource.id;\n      return {\n        datasource,\n        depName,\n        packageName: `${account}/${repo.replace(regEx(/\\.git$/), '')}`,\n        currentValue: tag,\n      };\n    }\n  }\n\n  return {\n    datasource: GitTagsDatasource.id,\n    depName,\n    packageName: git,\n    currentValue: tag,\n  };\n}\n\nexport async function extractPackageFile(\n  content: string,\n  fileName: string\n): Promise<PackageFile | null> {\n  logger.trace('cocoapods.extractPackageFile()');\n  const deps: PackageDependency[] = [];\n  const lines: string[] = content.split(newlineRegex);\n\n  const registryUrls: string[] = [];\n\n  for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n    const line = lines[lineNumber];\n    const parsedLine = parseLine(line);\n    const {\n      depName,\n      groupName,\n      currentValue,\n      git,\n      tag,\n      path,\n      source,\n    }: ParsedLine = parsedLine;\n\n    if (source) {\n      registryUrls.push(source.replace(regEx(/\\/*$/), ''));\n    }\n\n    if (depName) {\n      const managerData = { lineNumber };\n      let dep: PackageDependency = {\n        depName,\n        groupName,\n        skipReason: 'unknown-version',\n      };\n\n      if (currentValue) {\n        dep = {\n          depName,\n          groupName,\n          datasource: PodDatasource.id,\n          currentValue,\n          managerData,\n          registryUrls,\n        };\n      } else if (git) {\n        if (tag) {\n          dep = { ...gitDep(parsedLine), managerData };\n        } else {\n          dep = {\n            depName,\n            groupName,\n            skipReason: 'git-dependency',\n          };\n        }\n      } else if (path) {\n        dep = {\n          depName,\n          groupName,\n          skipReason: 'path-dependency',\n        };\n      }\n\n      deps.push(dep);\n    }\n  }\n  const res: PackageFile = { deps };\n  const lockFile = getSiblingFileName(fileName, 'Podfile.lock');\n  // istanbul ignore if\n  if (await localPathExists(lockFile)) {\n    res.lockFiles = [lockFile];\n  }\n  return res;\n}\n"]}