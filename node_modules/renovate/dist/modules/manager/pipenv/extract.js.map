{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pipenv/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import toml from '@iarna/toml';\nimport { RANGE_PATTERN } from '@renovatebot/pep440';\nimport is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport type { SkipReason } from '../../../types';\nimport { localPathExists } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport { PypiDatasource } from '../../datasource/pypi';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { PipFile } from './types';\n\n// based on https://www.python.org/dev/peps/pep-0508/#names\nconst packageRegex = regEx(/^([A-Z0-9]|[A-Z0-9][A-Z0-9._-]*[A-Z0-9])$/i);\nconst rangePattern: string = RANGE_PATTERN;\n\nconst specifierPartPattern = `\\\\s*${rangePattern.replace(\n  regEx(/\\?<\\w+>/g),\n  '?:'\n)}\\\\s*`;\nconst specifierPattern = `${specifierPartPattern}(?:,${specifierPartPattern})*`;\nconst specifierRegex = regEx(`^${specifierPattern}$`);\nfunction extractFromSection(\n  pipfile: PipFile,\n  section: 'packages' | 'dev-packages'\n): PackageDependency[] {\n  const pipfileSection = pipfile[section];\n  if (!pipfileSection) {\n    return [];\n  }\n\n  const deps = Object.entries(pipfileSection)\n    .map((x) => {\n      const [depName, requirements] = x;\n      let currentValue: string | undefined;\n      let nestedVersion = false;\n      let skipReason: SkipReason | undefined;\n      if (requirements.git) {\n        skipReason = 'git-dependency';\n      } else if (requirements.file) {\n        skipReason = 'file-dependency';\n      } else if (requirements.path) {\n        skipReason = 'local-dependency';\n      } else if (requirements.version) {\n        currentValue = requirements.version;\n        nestedVersion = true;\n      } else if (is.object(requirements)) {\n        skipReason = 'any-version';\n      } else {\n        currentValue = requirements;\n      }\n      if (currentValue === '*') {\n        skipReason = 'any-version';\n      }\n      if (!skipReason) {\n        const packageMatches = packageRegex.exec(depName);\n        if (!packageMatches) {\n          logger.debug(\n            `Skipping dependency with malformed package name \"${depName}\".`\n          );\n          skipReason = 'invalid-name';\n        }\n        // validated above\n        const specifierMatches = specifierRegex.exec(currentValue!);\n        if (!specifierMatches) {\n          logger.debug(\n            `Skipping dependency with malformed version specifier \"${currentValue!}\".`\n          );\n          skipReason = 'invalid-version';\n        }\n      }\n      const dep: PackageDependency = {\n        depType: section,\n        depName,\n        managerData: {},\n      };\n      if (currentValue) {\n        dep.currentValue = currentValue;\n      }\n      if (skipReason) {\n        dep.skipReason = skipReason;\n      } else {\n        dep.datasource = PypiDatasource.id;\n      }\n      if (nestedVersion) {\n        // TODO #7154\n        dep.managerData!.nestedVersion = nestedVersion;\n      }\n      if (requirements.index) {\n        if (is.array(pipfile.source)) {\n          const source = pipfile.source.find(\n            (item) => item.name === requirements.index\n          );\n          if (source) {\n            dep.registryUrls = [source.url];\n          }\n        }\n      }\n      return dep;\n    })\n    .filter(Boolean);\n  return deps;\n}\n\nexport async function extractPackageFile(\n  content: string,\n  fileName: string\n): Promise<PackageFile | null> {\n  logger.debug('pipenv.extractPackageFile()');\n\n  let pipfile: PipFile;\n  try {\n    // TODO: fix type (#9610)\n    pipfile = toml.parse(content) as any;\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing Pipfile');\n    return null;\n  }\n  const res: PackageFile = { deps: [] };\n  if (pipfile.source) {\n    res.registryUrls = pipfile.source.map((source) => source.url);\n  }\n\n  res.deps = [\n    ...extractFromSection(pipfile, 'packages'),\n    ...extractFromSection(pipfile, 'dev-packages'),\n  ];\n  if (!res.deps.length) {\n    return null;\n  }\n\n  const constraints: Record<string, any> = {};\n\n  if (is.nonEmptyString(pipfile.requires?.python_version)) {\n    constraints.python = `== ${pipfile.requires!.python_version}.*`;\n  } else if (is.nonEmptyString(pipfile.requires?.python_full_version)) {\n    constraints.python = `== ${pipfile.requires!.python_full_version}`;\n  }\n\n  if (is.nonEmptyString(pipfile.packages?.pipenv)) {\n    constraints.pipenv = pipfile.packages!.pipenv;\n  } else if (is.nonEmptyString(pipfile['dev-packages']?.pipenv)) {\n    constraints.pipenv = pipfile['dev-packages']!.pipenv;\n  }\n\n  const lockFileName = fileName + '.lock';\n  if (await localPathExists(lockFileName)) {\n    res.lockFiles = [lockFileName];\n  }\n\n  res.constraints = constraints;\n  return res;\n}\n"]}