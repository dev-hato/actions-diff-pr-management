{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/meteor/extract.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,+CAA4C;AAC5C,8CAAqD;AAGrD,SAAgB,kBAAkB,CAAC,OAAe;IAChD,IAAI,IAAI,GAAwB,EAAE,CAAC;IACnC,MAAM,UAAU,GAAG,IAAA,aAAK,EAAC,iCAAiC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1E,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,IAAI,CAAC;KACb;IACD,IAAI;QACF,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC;aACjB,OAAO,CAAC,IAAA,aAAK,EAAC,mBAAmB,CAAC,EAAE,EAAE,CAAC;aACvC,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;aACxB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC;aAC3B,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAA,aAAK,EAAC,OAAO,CAAC,CAAC,CAAC;aACvC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACX,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,GAAG,GAAG,CAAC;YACpC,qBAAqB;YACrB,IAAI,CAAC,CAAC,OAAO,IAAI,YAAY,CAAC,EAAE;gBAC9B,eAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,8BAA8B,CAAC,CAAC;aAC1D;YACD,OAAO;gBACL,OAAO;gBACP,YAAY;gBACZ,UAAU,EAAE,mBAAa,CAAC,EAAE;aAC7B,CAAC;QACJ,CAAC,CAAC;aACD,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;KACrD;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,mCAAmC,CAAC,CAAC;KAC/D;IACD,qBAAqB;IACrB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AAlCD,gDAkCC","sourcesContent":["import { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { NpmDatasource } from '../../datasource/npm';\nimport type { PackageDependency, PackageFile } from '../types';\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  let deps: PackageDependency[] = [];\n  const npmDepends = regEx(/\\nNpm\\.depends\\({([\\s\\S]*?)}\\);/).exec(content);\n  if (!npmDepends) {\n    return null;\n  }\n  try {\n    deps = npmDepends[1]\n      .replace(regEx(/(\\s|\\\\n|\\\\t|'|\")/g), '')\n      .split(',')\n      .map((dep) => dep.trim())\n      .filter((dep) => dep.length)\n      .map((dep) => dep.split(regEx(/:(.*)/)))\n      .map((arr) => {\n        const [depName, currentValue] = arr;\n        // istanbul ignore if\n        if (!(depName && currentValue)) {\n          logger.warn({ content }, 'Incomplete npm.depends match');\n        }\n        return {\n          depName,\n          currentValue,\n          datasource: NpmDatasource.id,\n        };\n      })\n      .filter((dep) => dep.depName && dep.currentValue);\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ content }, 'Failed to parse meteor package.js');\n  }\n  // istanbul ignore if\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}