{"version":3,"file":"yarn.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/extract/yarn.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,wCAAuD;AACvD,8CAA6C;AAC7C,+CAA4C;AAC5C,4CAI6B;AAGtB,KAAK,UAAU,WAAW,CAAC,QAAgB;IAChD,aAAa;IACb,MAAM,WAAW,GAAG,CAAC,MAAM,IAAA,kBAAa,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAE,CAAC;IAC7D,IAAI;QACF,MAAM,MAAM,GAAG,IAAA,mBAAS,EAAC,WAAW,CAAC,CAAC;QACtC,MAAM,cAAc,GAA2B,EAAE,CAAC;QAClD,IAAI,eAAmC,CAAC;QAExC,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC/C,IAAI,GAAG,KAAK,YAAY,EAAE;gBACxB,SAAS;gBACT,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;aAC9C;iBAAM;gBACL,KAAK,MAAM,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,kBAAW,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;oBAClE,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBACvD,MAAM,EAAE,QAAQ,EAAE,GAAG,kBAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBAEnD,eAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;oBAC9C,cAAc,CAAC,WAAW,GAAG,GAAG,GAAG,QAAQ,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;iBACpE;aACF;SACF;QACD,OAAO;YACL,OAAO,EAAE,CAAC,CAAC,YAAY,IAAI,MAAM,CAAC;YAClC,eAAe;YACf,cAAc;SACf,CAAC;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,sCAAsC,CAAC,CAAC;QACxE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;KAC9C;AACH,CAAC;AAhCD,kCAgCC;AAED,SAAgB,mBAAmB,CAAC,SAAiB;IACnD,MAAM,IAAI,GAAG,IAAA,mBAAS,EAAC,SAAS,CAAC,CAAC;IAClC,MAAM,KAAK,GAAG;QACZ,IAAI,CAAC,WAAW,IAAI,eAAe;QACnC,UAAU;QACV,SAAS;QACT,iBAAiB;KAClB,CAAC;IACF,IAAI,gBAAS,CAAC,uBAAuB,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,KAAK,EAAE;QACvE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,kBAAkB,CAAC,CAAC;KACpD;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAZD,kDAYC;AAEM,KAAK,UAAU,aAAa,CAAC,aAAqB;IACvD,MAAM,SAAS,GAAG,MAAM,IAAA,kBAAa,EAAC,aAAa,EAAE,MAAM,CAAC,CAAC;IAC7D,IAAI,YAAE,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;QACxB,MAAM,KAAK,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAC7C,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;YACrB,IAAI,MAAM,IAAA,oBAAe,EAAC,IAAA,uBAAkB,EAAC,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE;gBAC/D,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,EAAE,CAAC,CAAC;gBACnD,OAAO,IAAI,CAAC;aACb;SACF;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAZD,sCAYC","sourcesContent":["import is from '@sindresorhus/is';\nimport { miscUtils, structUtils } from '@yarnpkg/core';\nimport { parseSyml } from '@yarnpkg/parsers';\nimport { logger } from '../../../../logger';\nimport {\n  getSiblingFileName,\n  localPathExists,\n  readLocalFile,\n} from '../../../../util/fs';\nimport type { LockFile } from './types';\n\nexport async function getYarnLock(filePath: string): Promise<LockFile> {\n  // TODO #7154\n  const yarnLockRaw = (await readLocalFile(filePath, 'utf8'))!;\n  try {\n    const parsed = parseSyml(yarnLockRaw);\n    const lockedVersions: Record<string, string> = {};\n    let lockfileVersion: number | undefined;\n\n    for (const [key, val] of Object.entries(parsed)) {\n      if (key === '__metadata') {\n        // yarn 2\n        lockfileVersion = parseInt(val.cacheKey, 10);\n      } else {\n        for (const entry of key.split(', ')) {\n          const { scope, name, range } = structUtils.parseDescriptor(entry);\n          const packageName = scope ? `@${scope}/${name}` : name;\n          const { selector } = structUtils.parseRange(range);\n\n          logger.trace({ entry, version: val.version });\n          lockedVersions[packageName + '@' + selector] = parsed[key].version;\n        }\n      }\n    }\n    return {\n      isYarn1: !('__metadata' in parsed),\n      lockfileVersion,\n      lockedVersions,\n    };\n  } catch (err) {\n    logger.debug({ filePath, err }, 'Warning: Exception parsing yarn.lock');\n    return { isYarn1: true, lockedVersions: {} };\n  }\n}\n\nexport function getZeroInstallPaths(yarnrcYml: string): string[] {\n  const conf = parseSyml(yarnrcYml);\n  const paths = [\n    conf.cacheFolder || './.yarn/cache',\n    '.pnp.cjs',\n    '.pnp.js',\n    '.pnp.loader.mjs',\n  ];\n  if (miscUtils.tryParseOptionalBoolean(conf.pnpEnableInlining) === false) {\n    paths.push(conf.pnpDataPath || './.pnp.data.json');\n  }\n  return paths;\n}\n\nexport async function isZeroInstall(yarnrcYmlPath: string): Promise<boolean> {\n  const yarnrcYml = await readLocalFile(yarnrcYmlPath, 'utf8');\n  if (is.string(yarnrcYml)) {\n    const paths = getZeroInstallPaths(yarnrcYml);\n    for (const p of paths) {\n      if (await localPathExists(getSiblingFileName(yarnrcYmlPath, p))) {\n        logger.debug(`Detected Yarn zero-install in ${p}`);\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"]}