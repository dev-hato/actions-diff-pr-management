{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../lib/modules/manager/npm/update/locked-dependency/yarn-lock/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseSyml } from '@yarnpkg/parsers';\nimport { logger } from '../../../../../../logger';\nimport { api as semver } from '../../../../../versioning/npm';\nimport type { UpdateLockedConfig, UpdateLockedResult } from '../../../../types';\nimport { getLockedDependencies } from './get-locked';\nimport { replaceConstraintVersion } from './replace';\nimport type { YarnLock, YarnLockEntryUpdate } from './types';\n\nexport function updateLockedDependency(\n  config: UpdateLockedConfig\n): UpdateLockedResult {\n  const { depName, currentVersion, newVersion, lockFile, lockFileContent } =\n    config;\n  logger.debug(\n    // TODO: types (#7154)\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    `npm.updateLockedDependency: ${depName}@${currentVersion} -> ${newVersion} [${lockFile}]`\n  );\n  let yarnLock: YarnLock;\n  try {\n    // TODO #7154\n    yarnLock = parseSyml(lockFileContent!);\n  } catch (err) {\n    logger.warn({ err }, 'Failed to parse yarn files');\n    return { status: 'update-failed' };\n  }\n  if ('__metadata' in yarnLock) {\n    logger.debug('Yarn 2+ unsupported');\n    return { status: 'unsupported' };\n  }\n  try {\n    const lockedDeps = getLockedDependencies(\n      yarnLock,\n      depName,\n      // TODO #7154\n      currentVersion!\n    );\n    if (!lockedDeps.length) {\n      const newLockedDeps = getLockedDependencies(\n        yarnLock,\n        depName,\n        newVersion\n      );\n      if (newLockedDeps.length) {\n        logger.debug(\n          // TODO: types (#7154)\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          `${depName}@${currentVersion} not found in ${lockFile} but ${depName}@${newVersion} was - looks like it's already updated`\n        );\n        return { status: 'already-updated' };\n      }\n      logger.debug(\n        // TODO: types (#7154)\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        `${depName}@${currentVersion} not found in ${lockFile} - cannot update`\n      );\n      return { status: 'update-failed' };\n    }\n    logger.debug(\n      `Found matching dependencies with length ${lockedDeps.length}`\n    );\n    const updateLockedDeps: YarnLockEntryUpdate[] = [];\n    for (const lockedDep of lockedDeps) {\n      if (semver.matches(newVersion, lockedDep.constraint)) {\n        logger.debug(\n          `Dependency ${depName} can be updated from ${newVersion} to ${newVersion} in range ${lockedDep.constraint}`\n        );\n        updateLockedDeps.push({ ...lockedDep, newVersion });\n        continue;\n      }\n      logger.debug(\n        `Dependency ${depName} cannot be updated from ${newVersion} to ${newVersion} in range ${lockedDep.constraint}`\n      );\n      return { status: 'update-failed' };\n    }\n    // TODO #7154\n    let newLockFileContent = lockFileContent!;\n    for (const dependency of updateLockedDeps) {\n      const { depName, constraint, newVersion } = dependency;\n      newLockFileContent = replaceConstraintVersion(\n        newLockFileContent,\n        depName,\n        constraint,\n        newVersion\n      );\n    }\n    // istanbul ignore if: cannot test\n    if (newLockFileContent === lockFileContent) {\n      logger.debug('Failed to make any changes to lock file');\n      return { status: 'update-failed' };\n    }\n    return { status: 'updated', files: { [lockFile]: newLockFileContent } };\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, 'updateLockedDependency() error');\n    return { status: 'update-failed' };\n  }\n}\n"]}