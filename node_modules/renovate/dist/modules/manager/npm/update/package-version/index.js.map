{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../lib/modules/manager/npm/update/package-version/index.ts"],"names":[],"mappings":";;;;AAAA,4DAA6C;AAC7C,kDAA+C;AAC/C,qDAAkD;AAGlD,SAAgB,kBAAkB,CAChC,OAAe,EACf,YAAoB,EACpB,WAAiC;IAEjC,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,YAAY,EAAE,EAC7B,iDAAiD,CAClD,CAAC;IACF,sBAAsB;IACtB,IAAI,YAA2B,CAAC;IAChC,IAAI,aAAa,GAAG,OAAO,CAAC;IAC5B,IAAI;QACF,IAAI,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YACrC,MAAM,aAAa,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YACzD,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC1C,YAAY;gBACV,aAAa,CAAC,YAAY,EAAE,CAAC,aAAa,CAAC;oBAC3C,aAAa,CAAC,eAAe,EAAE,CAAC,aAAa,CAAC;oBAC9C,aAAa,CAAC,oBAAoB,EAAE,CAAC,aAAa,CAAC;oBACnD,aAAa,CAAC,gBAAgB,EAAE,CAAC,aAAa,CAAC,CAAC;YAClD,IAAI,CAAC,YAAY,EAAE;gBACjB,eAAM,CAAC,IAAI,CAAC,wCAAwC,GAAG,aAAa,CAAC,CAAC;gBACtE,OAAO,EAAE,aAAa,EAAE,CAAC;aAC1B;SACF;aAAM;YACL,YAAY,GAAG,gBAAM,CAAC,GAAG,CAAC,YAAY,EAAE,WAA0B,CAAC,CAAC;SACrE;QACD,eAAM,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC;QAC/B,aAAa,GAAG,OAAO,CAAC,OAAO,CAC7B,IAAA,aAAK,EAAC,kCAAkC,CAAC,EACzC,aAAa,YAAa,EAAE,CAC7B,CAAC;QACF,IAAI,aAAa,KAAK,OAAO,EAAE;YAC7B,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC5C;aAAM;YACL,eAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAC7C;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,IAAI,CACT;YACE,OAAO;YACP,YAAY;YACZ,WAAW;SACZ,EACD,uBAAuB,CACxB,CAAC;KACH;IACD,OAAO,EAAE,aAAa,EAAE,CAAC;AAC3B,CAAC;AAjDD,gDAiDC","sourcesContent":["import semver, { ReleaseType } from 'semver';\nimport { logger } from '../../../../../logger';\nimport { regEx } from '../../../../../util/regex';\nimport type { BumpPackageVersionResult } from '../../../types';\n\nexport function bumpPackageVersion(\n  content: string,\n  currentValue: string,\n  bumpVersion: ReleaseType | string\n): BumpPackageVersionResult {\n  logger.debug(\n    { bumpVersion, currentValue },\n    'Checking if we should bump package.json version'\n  );\n  // TODO: types (#7154)\n  let newPjVersion: string | null;\n  let bumpedContent = content;\n  try {\n    if (bumpVersion.startsWith('mirror:')) {\n      const mirrorPackage = bumpVersion.replace('mirror:', '');\n      const parsedContent = JSON.parse(content);\n      newPjVersion =\n        parsedContent.dependencies?.[mirrorPackage] ??\n        parsedContent.devDependencies?.[mirrorPackage] ??\n        parsedContent.optionalDependencies?.[mirrorPackage] ??\n        parsedContent.peerDependencies?.[mirrorPackage];\n      if (!newPjVersion) {\n        logger.warn('bumpVersion mirror package not found: ' + mirrorPackage);\n        return { bumpedContent };\n      }\n    } else {\n      newPjVersion = semver.inc(currentValue, bumpVersion as ReleaseType);\n    }\n    logger.debug({ newPjVersion });\n    bumpedContent = content.replace(\n      regEx(`(?<version>\"version\":\\\\s*\")[^\"]*`),\n      `$<version>${newPjVersion!}`\n    );\n    if (bumpedContent === content) {\n      logger.debug('Version was already bumped');\n    } else {\n      logger.debug('Bumped package.json version');\n    }\n  } catch (err) {\n    logger.warn(\n      {\n        content,\n        currentValue,\n        bumpVersion,\n      },\n      'Failed to bumpVersion'\n    );\n  }\n  return { bumpedContent };\n}\n"]}