{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/droneci/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFile } from '../types';\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  try {\n    const lines = content.split(newlineRegex);\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      const line = lines[lineNumber];\n\n      const firstLineMatch = regEx(\n        /^(?<leading>\\s* image:\\s*)(?<replaceString>['\"](?<currentFrom>[^\\s'\"]+)\\\\)$/\n      ).exec(line);\n\n      if (firstLineMatch?.groups) {\n        let currentFrom = firstLineMatch.groups.currentFrom;\n        let replaceString = firstLineMatch.groups.replaceString;\n\n        for (let i = lineNumber + 1; i < lines.length; i += 1) {\n          const internalLine = lines[i];\n          const middleLineMatch = regEx(\n            /^(?<replaceString>\\s*(?<currentFrom>[^\\s'\"]+)\\\\)$/\n          ).exec(internalLine);\n          if (middleLineMatch?.groups) {\n            currentFrom += middleLineMatch.groups.currentFrom;\n            replaceString += '\\n' + middleLineMatch.groups.replaceString;\n          } else {\n            const finalLineMatch = regEx(\n              /^(?<replaceString>\\s*(?<currentFrom>[^\\s'\"]+)['\"])$/\n            ).exec(internalLine);\n            if (finalLineMatch?.groups) {\n              currentFrom += finalLineMatch.groups.currentFrom;\n              replaceString += '\\n' + finalLineMatch.groups.replaceString;\n\n              const dep = getDep(currentFrom);\n              dep.depType = 'docker';\n              dep.replaceString = replaceString;\n              if (dep.autoReplaceStringTemplate) {\n                const d = '@{{newDigest}}';\n                const c = firstLineMatch.groups.leading.length + 1;\n                const nd = `\\\\\\n${' '.repeat(c)}${d}`;\n                const replaced = dep.autoReplaceStringTemplate.replace(d, nd);\n                dep.autoReplaceStringTemplate = `\"${replaced}\"`;\n              }\n              deps.push(dep);\n            }\n            break;\n          }\n        }\n      } else {\n        const match = regEx(\n          /^\\s* image:\\s*'?\"?(?<currentFrom>[^\\s'\"]+)'?\"?\\s*$/\n        ).exec(line);\n        if (match?.groups) {\n          const dep = getDep(match.groups.currentFrom);\n          dep.depType = 'docker';\n          deps.push(dep);\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error extracting DroneCI images');\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}