{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/jsonnet-bundler/extract.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,+CAA4C;AAI5C,MAAM,MAAM,GAAG,IAAA,aAAK,EAClB,+EAA+E,CAChF,CAAC;AAEF,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB;IAEnB,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,sCAAsC,CAAC,CAAC;IAEtE,IAAI,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;QACjC,OAAO,IAAI,CAAC;KACb;IAED,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,IAAI,WAAwB,CAAC;IAC7B,IAAI;QACF,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAgB,CAAC;KAClD;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,cAAc,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;KACb;IAED,KAAK,MAAM,UAAU,IAAI,WAAW,CAAC,YAAY,IAAI,EAAE,EAAE;QACvD,MAAM,GAAG,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAC1C,IAAI,GAAG,EAAE;YACP,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;IAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IAED,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AA/BD,gDA+BC;AAED,SAAS,iBAAiB,CAAC,UAAsB;IAC/C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE;QAC1B,OAAO,IAAI,CAAC;KACb;IAED,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAExD,OAAO;QACL,OAAO,EACL,UAAU,CAAC,IAAI,IAAI,KAAK,EAAE,MAAM,EAAE,OAAO,IAAI,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM;QAC3E,WAAW,EAAE,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM;QACzC,YAAY,EAAE,UAAU,CAAC,OAAO;QAChC,WAAW,EAAE,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE;KACtD,CAAC;AACJ,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { Dependency, JsonnetFile } from './types';\n\nconst gitUrl = regEx(\n  /(ssh:\\/\\/git@|https:\\/\\/)([\\w.]+)\\/([\\w:/\\-~]*)\\/(?<depName>[\\w:/-]+)(\\.git)?/\n);\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string\n): PackageFile | null {\n  logger.trace({ packageFile }, 'jsonnet-bundler.extractPackageFile()');\n\n  if (packageFile.match(/vendor\\//)) {\n    return null;\n  }\n\n  const deps: PackageDependency[] = [];\n  let jsonnetFile: JsonnetFile;\n  try {\n    jsonnetFile = JSON.parse(content) as JsonnetFile;\n  } catch (err) {\n    logger.debug({ packageFile }, 'Invalid JSON');\n    return null;\n  }\n\n  for (const dependency of jsonnetFile.dependencies ?? []) {\n    const dep = extractDependency(dependency);\n    if (dep) {\n      deps.push(dep);\n    }\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n\n  return { deps };\n}\n\nfunction extractDependency(dependency: Dependency): PackageDependency | null {\n  if (!dependency.source.git) {\n    return null;\n  }\n\n  const match = gitUrl.exec(dependency.source.git.remote);\n\n  return {\n    depName:\n      dependency.name ?? match?.groups?.depName ?? dependency.source.git.remote,\n    packageName: dependency.source.git.remote,\n    currentValue: dependency.version,\n    managerData: { subdir: dependency.source.git.subdir },\n  };\n}\n"]}