{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/azure-pipelines/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { load } from 'js-yaml';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { AzurePipelines, Container, Repository } from './types';\n\nconst AzurePipelinesTaskRegex = regEx(/^(?<name>[^@]+)@(?<version>.*)$/);\n\nexport function extractRepository(\n  repository: Repository\n): PackageDependency | null {\n  if (repository.type !== 'github') {\n    return null;\n  }\n\n  if (!repository.ref?.startsWith('refs/tags/')) {\n    return null;\n  }\n\n  return {\n    autoReplaceStringTemplate: 'refs/tags/{{newValue}}',\n    currentValue: repository.ref.replace('refs/tags/', ''),\n    datasource: GitTagsDatasource.id,\n    depName: repository.name,\n    depType: 'gitTags',\n    packageName: `https://github.com/${repository.name}.git`,\n    replaceString: repository.ref,\n  };\n}\n\nexport function extractContainer(\n  container: Container\n): PackageDependency | null {\n  if (!container.image) {\n    return null;\n  }\n\n  const dep = getDep(container.image);\n  logger.debug(\n    {\n      depName: dep.depName,\n      currentValue: dep.currentValue,\n      currentDigest: dep.currentDigest,\n    },\n    'Azure pipelines docker image'\n  );\n  dep.depType = 'docker';\n\n  return dep;\n}\n\nexport function extractAzurePipelinesTasks(\n  task: string\n): PackageDependency | null {\n  const match = AzurePipelinesTaskRegex.exec(task);\n  if (match?.groups) {\n    return {\n      depName: match.groups.name,\n      currentValue: match.groups.version,\n    };\n  }\n  return null;\n}\n\nexport function parseAzurePipelines(\n  content: string,\n  filename: string\n): AzurePipelines | null {\n  let pkg: AzurePipelines | null = null;\n  try {\n    pkg = load(content, { json: true }) as AzurePipelines;\n  } catch (err) /* istanbul ignore next */ {\n    logger.info({ filename, err }, 'Error parsing azure-pipelines content');\n    return null;\n  }\n\n  return pkg;\n}\n\nexport function extractPackageFile(\n  content: string,\n  filename: string\n): PackageFile | null {\n  logger.trace(`azurePipelines.extractPackageFile(${filename})`);\n  const deps: PackageDependency[] = [];\n\n  const pkg = parseAzurePipelines(content, filename);\n  if (!pkg) {\n    return null;\n  }\n\n  for (const repository of pkg.resources?.repositories ?? []) {\n    const dep = extractRepository(repository);\n    if (dep) {\n      deps.push(dep);\n    }\n  }\n\n  for (const container of pkg.resources?.containers ?? []) {\n    const dep = extractContainer(container);\n    if (dep) {\n      deps.push(dep);\n    }\n  }\n\n  for (const { jobs } of pkg.stages ?? []) {\n    for (const { steps } of jobs ?? []) {\n      for (const step of steps ?? []) {\n        const task = extractAzurePipelinesTasks(step.task);\n        if (task) {\n          deps.push(task);\n        }\n      }\n    }\n  }\n\n  for (const { steps } of pkg.jobs ?? []) {\n    for (const step of steps ?? []) {\n      const task = extractAzurePipelinesTasks(step.task);\n      if (task) {\n        deps.push(task);\n      }\n    }\n  }\n\n  for (const step of pkg.steps ?? []) {\n    const task = extractAzurePipelinesTasks(step.task);\n    if (task) {\n      deps.push(task);\n    }\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}