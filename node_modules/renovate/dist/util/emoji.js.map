{"version":3,"file":"emoji.js","sourceRoot":"","sources":["../../lib/util/emoji.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport mathiasBynensEmojiRegex from 'emoji-regex';\nimport {\n  fromCodepointToUnicode,\n  fromHexcodeToCodepoint,\n  fromUnicodeToHexcode,\n} from 'emojibase';\nimport emojibaseEmojiRegex from 'emojibase-regex/emoji.js';\nimport SHORTCODE_REGEX from 'emojibase-regex/shortcode.js';\nimport type { RenovateConfig } from '../config/types';\nimport dataFiles from '../data-files.generated';\nimport { regEx } from './regex';\n\nlet unicodeEmoji = true;\n\nlet mappingsInitialized = false;\nconst shortCodesByHex = new Map<string, string>();\nconst hexCodesByShort = new Map<string, string>();\n\nfunction lazyInitMappings(): void {\n  if (!mappingsInitialized) {\n    const table: Record<string, string | string[]> = JSON.parse(\n      dataFiles.get('node_modules/emojibase-data/en/shortcodes/github.json')!\n    );\n    for (const [hex, val] of Object.entries(table)) {\n      const shortCodes: string[] = is.array<string>(val) ? val : [val];\n      shortCodesByHex.set(hex, `:${shortCodes[0]}:`);\n      shortCodes.forEach((shortCode) => {\n        hexCodesByShort.set(`:${shortCode}:`, hex);\n      });\n    }\n    mappingsInitialized = true;\n  }\n}\n\nexport function setEmojiConfig(config: RenovateConfig): void {\n  unicodeEmoji = !!config.unicodeEmoji;\n}\n\nconst shortCodeRegex = regEx(SHORTCODE_REGEX.source, 'g');\n\nexport function emojify(text: string): string {\n  if (!unicodeEmoji) {\n    return text;\n  }\n  lazyInitMappings();\n  return text.replace(shortCodeRegex, (shortCode) => {\n    const hexCode = hexCodesByShort.get(shortCode);\n    return hexCode\n      ? fromCodepointToUnicode(fromHexcodeToCodepoint(hexCode))\n      : shortCode;\n  });\n}\n\nconst emojiRegexSrc = [emojibaseEmojiRegex, mathiasBynensEmojiRegex()].map(\n  ({ source }) => source\n);\nconst emojiRegex = new RegExp(`(?:${emojiRegexSrc.join('|')})`, 'g'); // TODO #12875 cannot figure it out\nconst excludedModifiers = new Set([\n  '20E3',\n  '200D',\n  'FE0E',\n  'FE0F',\n  '1F3FB',\n  '1F3FC',\n  '1F3FD',\n  '1F3FE',\n  '1F3FF',\n  '1F9B0',\n  '1F9B1',\n  '1F9B2',\n  '1F9B3',\n]);\n\nexport function stripHexCode(input: string): string {\n  return input\n    .split('-')\n    .filter((modifier) => !excludedModifiers.has(modifier))\n    .join('-');\n}\n\nexport function unemojify(text: string): string {\n  if (unicodeEmoji) {\n    return text;\n  }\n  lazyInitMappings();\n  return text.replace(emojiRegex, (emoji) => {\n    const hexCode = stripHexCode(fromUnicodeToHexcode(emoji));\n    const shortCode = shortCodesByHex.get(hexCode);\n    return shortCode ?? 'ï¿½';\n  });\n}\n\nfunction stripEmoji(emoji: string): string {\n  const hexCode = stripHexCode(fromUnicodeToHexcode(emoji));\n  const codePoint = fromHexcodeToCodepoint(hexCode);\n  const result = fromCodepointToUnicode(codePoint);\n  return result;\n}\n\nexport function stripEmojis(input: string): string {\n  return input.replace(emojiRegex, stripEmoji);\n}\n"]}