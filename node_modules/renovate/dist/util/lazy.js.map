{"version":3,"file":"lazy.js","sourceRoot":"","sources":["../../lib/util/lazy.ts"],"names":[],"mappings":";;;AAUA,MAAa,IAAI;IAGf,YAA6B,QAAiB;QAAjB,aAAQ,GAAR,QAAQ,CAAS;IAAG,CAAC;IAElD,QAAQ;QACN,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,QAAQ;QACN,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,MAAM,EAAE;YACV,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC7B,OAAO,MAAM,CAAC,KAAK,CAAC;aACrB;YAED,MAAM,MAAM,CAAC,GAAG,CAAC;SAClB;QAED,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;IAC7B,CAAC;IAEO,YAAY;QAClB,IAAI;YACF,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC9B,IAAI,CAAC,OAAO,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAC1C,OAAO,KAAK,CAAC;SACd;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,OAAO,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;YACtC,MAAM,GAAG,CAAC;SACX;IACH,CAAC;CACF;AAhCD,oBAgCC","sourcesContent":["interface ValueResult<T> {\n  type: 'success';\n  value: T;\n}\n\ninterface ErrorResult {\n  type: 'error';\n  err: Error;\n}\n\nexport class Lazy<T> {\n  private _result?: ValueResult<T> | ErrorResult;\n\n  constructor(private readonly executor: () => T) {}\n\n  hasValue(): boolean {\n    return !!this._result;\n  }\n\n  getValue(): T {\n    const result = this._result;\n    if (result) {\n      if (result.type === 'success') {\n        return result.value;\n      }\n\n      throw result.err;\n    }\n\n    return this.realizeValue();\n  }\n\n  private realizeValue(): T {\n    try {\n      const value = this.executor();\n      this._result = { type: 'success', value };\n      return value;\n    } catch (err) {\n      this._result = { type: 'error', err };\n      throw err;\n    }\n  }\n}\n"]}