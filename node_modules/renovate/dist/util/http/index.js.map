{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/http/index.ts"],"names":[],"mappings":"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","sourcesContent":["import merge from 'deepmerge';\nimport got, { Options, RequestError, Response } from 'got';\nimport hasha from 'hasha';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { pkg } from '../../expose.cjs';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../cache/memory';\nimport { clone } from '../clone';\nimport { resolveBaseUrl } from '../url';\nimport { applyAuthorization, removeAuthorization } from './auth';\nimport { hooks } from './hooks';\nimport { applyHostRules } from './host-rules';\nimport { getQueue } from './queue';\nimport type {\n  GotJSONOptions,\n  GotOptions,\n  HttpOptions,\n  HttpPostOptions,\n  HttpResponse,\n  InternalHttpOptions,\n  RequestStats,\n} from './types';\n// TODO: refactor code to remove this (#9651)\nimport './legacy';\n\nexport { RequestError as HttpError };\n\nfunction cloneResponse<T extends Buffer | string | any>(\n  response: HttpResponse<T>\n): HttpResponse<T> {\n  const { body, statusCode, headers } = response;\n  // clone body and headers so that the cached result doesn't get accidentally mutated\n  // Don't use json clone for buffers\n  return {\n    statusCode,\n    body: body instanceof Buffer ? (body.slice() as T) : clone<T>(body),\n    headers: clone(headers),\n    authorization: !!response.authorization,\n  };\n}\n\nfunction applyDefaultHeaders(options: Options): void {\n  const renovateVersion = pkg.version;\n  options.headers = {\n    ...options.headers,\n    'user-agent':\n      process.env.RENOVATE_USER_AGENT ??\n      `RenovateBot/${renovateVersion} (https://github.com/renovatebot/renovate)`,\n  };\n}\n\n// Note on types:\n// options.requestType can be either 'json' or 'buffer', but `T` should be\n// `Buffer` in the latter case.\n// We don't declare overload signatures because it's immediately wrapped by\n// `request`.\nasync function gotRoutine<T>(\n  url: string,\n  options: GotOptions,\n  requestStats: Omit<RequestStats, 'duration' | 'statusCode'>\n): Promise<Response<T>> {\n  logger.trace({ url, options }, 'got request');\n\n  let duration = 0;\n  let statusCode = 0;\n\n  try {\n    // Cheat the TS compiler using `as` to pick a specific overload.\n    // Otherwise it doesn't typecheck.\n    const resp = await got<T>(url, { ...options, hooks } as GotJSONOptions);\n    statusCode = resp.statusCode;\n    duration =\n      resp.timings.phases.total ??\n      /* istanbul ignore next: can't be tested */ 0;\n    return resp;\n  } catch (error) {\n    if (error instanceof RequestError) {\n      statusCode =\n        error.response?.statusCode ??\n        /* istanbul ignore next: can't be tested */ 0;\n      duration =\n        error.timings?.phases.total ??\n        /* istanbul ignore next: can't be tested */ 0;\n    }\n\n    throw error;\n  } finally {\n    const httpRequests = memCache.get<RequestStats[]>('http-requests') || [];\n    httpRequests.push({ ...requestStats, duration, statusCode });\n    memCache.set('http-requests', httpRequests);\n  }\n}\n\nexport class Http<GetOptions = HttpOptions, PostOptions = HttpPostOptions> {\n  private options?: GotOptions;\n\n  constructor(private hostType: string, options: HttpOptions = {}) {\n    this.options = merge<GotOptions>(options, { context: { hostType } });\n  }\n\n  protected async request<T>(\n    requestUrl: string | URL,\n    httpOptions: InternalHttpOptions = {}\n  ): Promise<HttpResponse<T>> {\n    let url = requestUrl.toString();\n    if (httpOptions?.baseUrl) {\n      url = resolveBaseUrl(httpOptions.baseUrl, url);\n    }\n\n    let options: GotOptions = merge<GotOptions>(\n      {\n        method: 'get',\n        ...this.options,\n        hostType: this.hostType,\n      },\n      httpOptions\n    );\n\n    if (process.env.NODE_ENV === 'test') {\n      options.retry = 0;\n    }\n    options.hooks = {\n      beforeRedirect: [removeAuthorization],\n    };\n\n    applyDefaultHeaders(options);\n\n    options = applyHostRules(url, options);\n    if (options.enabled === false) {\n      logger.debug({ url }, 'Host is disabled - rejecting request');\n      throw new Error(HOST_DISABLED);\n    }\n    options = applyAuthorization(options);\n\n    // use sha512: https://www.npmjs.com/package/hasha#algorithm\n    const cacheKey = hasha([\n      'got-',\n      JSON.stringify({\n        url,\n        headers: options.headers,\n        method: options.method,\n      }),\n    ]);\n    let resPromise;\n\n    // Cache GET requests unless useCache=false\n    if (\n      (options.method === 'get' || options.method === 'head') &&\n      options.useCache !== false\n    ) {\n      resPromise = memCache.get(cacheKey);\n    }\n\n    // istanbul ignore else: no cache tests\n    if (!resPromise) {\n      const startTime = Date.now();\n      const queueTask = (): Promise<Response<T>> => {\n        const queueDuration = Date.now() - startTime;\n        return gotRoutine(url, options, {\n          method: options.method ?? 'get',\n          url,\n          queueDuration,\n        });\n      };\n      const queue = getQueue(url);\n      resPromise = queue?.add(queueTask) ?? queueTask();\n      if (options.method === 'get' || options.method === 'head') {\n        memCache.set(cacheKey, resPromise); // always set if it's a get or a head\n      }\n    }\n\n    try {\n      const res = await resPromise;\n      res.authorization = !!options?.headers?.authorization;\n      return cloneResponse(res);\n    } catch (err) {\n      const { abortOnError, abortIgnoreStatusCodes } = options;\n      if (abortOnError && !abortIgnoreStatusCodes?.includes(err.statusCode)) {\n        throw new ExternalHostError(err);\n      }\n      throw err;\n    }\n  }\n\n  get(url: string, options: HttpOptions = {}): Promise<HttpResponse> {\n    return this.request<string>(url, options);\n  }\n\n  head(url: string, options: HttpOptions = {}): Promise<HttpResponse> {\n    return this.request<string>(url, { ...options, method: 'head' });\n  }\n\n  protected requestBuffer(\n    url: string | URL,\n    httpOptions?: InternalHttpOptions\n  ): Promise<HttpResponse<Buffer> | null> {\n    return this.request<Buffer>(url, {\n      ...httpOptions,\n      responseType: 'buffer',\n    });\n  }\n\n  getBuffer(\n    url: string,\n    options: HttpOptions = {}\n  ): Promise<HttpResponse<Buffer> | null> {\n    return this.requestBuffer(url, options);\n  }\n\n  private async requestJson<T = unknown>(\n    url: string,\n    options: InternalHttpOptions\n  ): Promise<HttpResponse<T>> {\n    const { body, ...jsonOptions } = options;\n    if (body) {\n      jsonOptions.json = body;\n    }\n    const res = await this.request<T>(url, {\n      ...jsonOptions,\n      responseType: 'json',\n    });\n    return { ...res, body: res.body };\n  }\n\n  getJson<T = unknown>(\n    url: string,\n    options?: GetOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options });\n  }\n\n  headJson<T = unknown>(\n    url: string,\n    options?: GetOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'head' });\n  }\n\n  postJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'post' });\n  }\n\n  putJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'put' });\n  }\n\n  patchJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'patch' });\n  }\n\n  deleteJson<T = unknown>(\n    url: string,\n    options?: PostOptions\n  ): Promise<HttpResponse<T>> {\n    return this.requestJson<T>(url, { ...options, method: 'delete' });\n  }\n\n  stream(url: string, options?: HttpOptions): NodeJS.ReadableStream {\n    // TODO: fix types (#7154)\n    let combinedOptions: any = {\n      method: 'get',\n      ...this.options,\n      hostType: this.hostType,\n      ...options,\n    };\n\n    let resolvedUrl = url;\n    // istanbul ignore else: needs test\n    if (options?.baseUrl) {\n      resolvedUrl = resolveBaseUrl(options.baseUrl, url);\n    }\n\n    applyDefaultHeaders(combinedOptions);\n    combinedOptions = applyHostRules(resolvedUrl, combinedOptions);\n    if (combinedOptions.enabled === false) {\n      throw new Error(HOST_DISABLED);\n    }\n    combinedOptions = applyAuthorization(combinedOptions);\n\n    return got.stream(resolvedUrl, combinedOptions);\n  }\n}\n"]}