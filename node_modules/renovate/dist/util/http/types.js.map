{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/util/http/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { IncomingHttpHeaders } from 'http';\nimport type {\n  OptionsOfBufferResponseBody,\n  OptionsOfJSONResponseBody,\n} from 'got';\n\nexport type GotContextOptions = {\n  authType?: string;\n} & Record<string, unknown>;\n\n// TODO: Move options to context\nexport type GotOptions = GotBufferOptions | GotJSONOptions;\nexport type GotBufferOptions = OptionsOfBufferResponseBody & GotExtraOptions;\nexport type GotJSONOptions = OptionsOfJSONResponseBody & GotExtraOptions;\n\nexport type GotExtraOptions = {\n  abortOnError?: boolean;\n  abortIgnoreStatusCodes?: number[];\n  token?: string;\n  hostType?: string;\n  enabled?: boolean;\n  useCache?: boolean;\n  noAuth?: boolean;\n  context?: GotContextOptions;\n};\n\nexport interface RequestStats {\n  method: string;\n  url: string;\n  duration: number;\n  queueDuration: number;\n  statusCode: number;\n}\n\nexport type OutgoingHttpHeaders = Record<string, string | string[] | undefined>;\n\nexport interface GraphqlVariables {\n  [k: string]: unknown;\n}\n\nexport interface GraphqlOptions {\n  variables?: GraphqlVariables;\n  paginate?: boolean;\n  count?: number;\n  limit?: number;\n  cursor?: string | null;\n  acceptHeader?: string;\n}\n\nexport interface HttpOptions {\n  body?: any;\n  username?: string;\n  password?: string;\n  baseUrl?: string;\n  headers?: OutgoingHttpHeaders;\n\n  /**\n   * Do not use authentication\n   */\n  noAuth?: boolean;\n\n  throwHttpErrors?: boolean;\n\n  token?: string;\n  useCache?: boolean;\n}\n\nexport interface HttpPostOptions extends HttpOptions {\n  body: unknown;\n}\n\nexport interface InternalHttpOptions extends HttpOptions {\n  json?: Record<string, unknown>;\n  responseType?: 'json' | 'buffer';\n  method?: 'get' | 'post' | 'put' | 'patch' | 'delete' | 'head';\n}\n\nexport interface HttpHeaders extends IncomingHttpHeaders {\n  link?: string | undefined;\n}\n\nexport interface HttpResponse<T = string> {\n  statusCode: number;\n  body: T;\n  headers: HttpHeaders;\n  authorization?: boolean;\n}\n"]}