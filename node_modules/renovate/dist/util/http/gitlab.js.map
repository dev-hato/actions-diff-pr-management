{"version":3,"file":"gitlab.js","sourceRoot":"","sources":["../../../lib/util/http/gitlab.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { PlatformId } from '../../constants';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { parseLinkHeader, parseUrl } from '../url';\nimport type { HttpOptions, HttpResponse, InternalHttpOptions } from './types';\nimport { Http } from '.';\n\nlet baseUrl = 'https://gitlab.com/api/v4/';\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\nexport interface GitlabHttpOptions extends HttpOptions {\n  paginate?: boolean;\n}\n\nexport class GitlabHttp extends Http<GitlabHttpOptions, GitlabHttpOptions> {\n  constructor(type: string = PlatformId.Gitlab, options?: GitlabHttpOptions) {\n    super(type, options);\n  }\n\n  protected override async request<T>(\n    url: string | URL,\n    options?: InternalHttpOptions & GitlabHttpOptions\n  ): Promise<HttpResponse<T>> {\n    const opts = {\n      baseUrl,\n      ...options,\n      throwHttpErrors: true,\n    };\n\n    try {\n      const result = await super.request<T>(url, opts);\n      if (opts.paginate && is.array(result.body)) {\n        // Check if result is paginated\n        try {\n          const linkHeader = parseLinkHeader(result.headers.link);\n          const nextUrl = linkHeader?.next?.url\n            ? parseUrl(linkHeader.next.url)\n            : null;\n          if (nextUrl) {\n            if (process.env.GITLAB_IGNORE_REPO_URL) {\n              const defaultEndpoint = new URL(baseUrl);\n              nextUrl.protocol = defaultEndpoint.protocol;\n              nextUrl.host = defaultEndpoint.host;\n            }\n\n            const nextResult = await this.request<T>(nextUrl, opts);\n            if (is.array(nextResult.body)) {\n              result.body.push(...nextResult.body);\n            }\n          }\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn({ err }, 'Pagination error');\n        }\n      }\n      return result;\n    } catch (err) {\n      if (err.statusCode === 404) {\n        logger.trace({ err }, 'GitLab 404');\n        logger.debug({ url: err.url }, 'GitLab API 404');\n        throw err;\n      }\n      logger.debug({ err }, 'Gitlab API error');\n      if (\n        err.statusCode === 429 ||\n        (err.statusCode >= 500 && err.statusCode < 600)\n      ) {\n        throw new ExternalHostError(err, PlatformId.Gitlab);\n      }\n      const platformFailureCodes = [\n        'EAI_AGAIN',\n        'ECONNRESET',\n        'ETIMEDOUT',\n        'UNABLE_TO_VERIFY_LEAF_SIGNATURE',\n      ];\n      if (platformFailureCodes.includes(err.code)) {\n        throw new ExternalHostError(err, PlatformId.Gitlab);\n      }\n      if (err.name === 'ParseError') {\n        throw new ExternalHostError(err, PlatformId.Gitlab);\n      }\n      throw err;\n    }\n  }\n}\n"]}