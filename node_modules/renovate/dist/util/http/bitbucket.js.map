{"version":3,"file":"bitbucket.js","sourceRoot":"","sources":["../../../lib/util/http/bitbucket.ts"],"names":[],"mappings":";;;AAAA,+CAA6C;AAE7C,wBAAyB;AAEzB,IAAI,OAAO,GAAG,4BAA4B,CAAC;AAEpC,MAAM,UAAU,GAAG,CAAC,GAAW,EAAQ,EAAE;IAC9C,OAAO,GAAG,GAAG,CAAC;AAChB,CAAC,CAAC;AAFW,QAAA,UAAU,cAErB;AAEF,MAAa,aAAc,SAAQ,OAAI;IACrC,YAAY,OAAe,sBAAU,CAAC,SAAS,EAAE,OAAqB;QACpE,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvB,CAAC;IAEkB,OAAO,CACxB,GAAiB,EACjB,OAA6B;QAE7B,MAAM,IAAI,GAAG,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC;QACrC,OAAO,KAAK,CAAC,OAAO,CAAI,GAAG,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;CACF;AAZD,sCAYC","sourcesContent":["import { PlatformId } from '../../constants';\nimport type { HttpOptions, HttpResponse, InternalHttpOptions } from './types';\nimport { Http } from '.';\n\nlet baseUrl = 'https://api.bitbucket.org/';\n\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\nexport class BitbucketHttp extends Http {\n  constructor(type: string = PlatformId.Bitbucket, options?: HttpOptions) {\n    super(type, options);\n  }\n\n  protected override request<T>(\n    url: string | URL,\n    options?: InternalHttpOptions\n  ): Promise<HttpResponse<T>> {\n    const opts = { baseUrl, ...options };\n    return super.request<T>(url, opts);\n  }\n}\n"]}