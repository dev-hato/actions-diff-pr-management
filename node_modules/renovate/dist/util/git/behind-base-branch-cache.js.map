{"version":3,"file":"behind-base-branch-cache.js","sourceRoot":"","sources":["../../../lib/util/git/behind-base-branch-cache.ts"],"names":[],"mappings":";;;AAAA,oDAA+C;AAE/C,0HAA0H;AAC1H,qHAAqH;AACrH,SAAgB,yBAAyB,CACvC,UAAkB,EAClB,oBAA4B;IAE5B,MAAM,KAAK,GAAG,IAAA,qBAAQ,GAAE,CAAC;IACzB,MAAM,EAAE,QAAQ,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC;IAChC,MAAM,YAAY,GAAG,QAAQ,EAAE,IAAI,CACjC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,KAAK,UAAU,CAC7C,CAAC;IAEF,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE;QAC5B,OAAO,IAAI,CAAC;KACb;IAED,OAAO,oBAAoB,KAAK,YAAY,CAAC,SAAS,CAAC;AACzD,CAAC;AAfD,8DAeC","sourcesContent":["import { getCache } from '../cache/repository';\n\n// Compare cached parent Sha of a branch to the fetched base-branch sha to determine whether the branch is behind the base\n// Since cache is updated after each run, this will be sufficient to determine whether a branch is behind its parent.\nexport function getCachedBehindBaseResult(\n  branchName: string,\n  currentBaseBranchSha: string\n): boolean | null {\n  const cache = getCache();\n  const { branches = [] } = cache;\n  const cachedBranch = branches?.find(\n    (branch) => branch.branchName === branchName\n  );\n\n  if (!cachedBranch?.parentSha) {\n    return null;\n  }\n\n  return currentBaseBranchSha !== cachedBranch.parentSha;\n}\n"]}