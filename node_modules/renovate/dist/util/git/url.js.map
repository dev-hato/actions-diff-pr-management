{"version":3,"file":"url.js","sourceRoot":"","sources":["../../../lib/util/git/url.ts"],"names":[],"mappings":";;;;AAAA,0EAAwC;AACxC,yCAAsC;AACtC,iEAA2C;AAC3C,oCAAiC;AAEjC,SAAgB,UAAU,CAAC,GAAW,EAAE,KAAc;IACpD,MAAM,SAAS,GAAG,IAAA,uBAAW,EAAC,GAAG,CAAC,CAAC;IAEnC,SAAS,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;IAE9B,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,UAAU,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QACzD,CAAC,CAAC,SAAS,CAAC,QAAQ;QACpB,CAAC,CAAC,OAAO,CAAC;IACZ,OAAO,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACtC,CAAC;AATD,gCASC;AAED,SAAgB,qBAAqB,CAAC,GAAW,EAAE,QAAiB;IAClE,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEnD,IAAI,QAAQ,EAAE,KAAK,EAAE;QACnB,eAAM,CAAC,KAAK,CAAC,iCAAiC,GAAG,EAAE,CAAC,CAAC;QAErD,OAAO,UAAU,CAAC,GAAG,EAAE,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;KAC5D;IAED,IAAI,QAAQ,EAAE,QAAQ,IAAI,QAAQ,EAAE,QAAQ,EAAE;QAC5C,eAAM,CAAC,KAAK,CAAC,iDAAiD,GAAG,EAAE,CAAC,CAAC;QACrE,MAAM,eAAe,GAAG,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9D,MAAM,eAAe,GAAG,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAE9D,OAAO,UAAU,CAAC,GAAG,EAAE,GAAG,eAAe,IAAI,eAAe,EAAE,CAAC,CAAC;KACjE;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAlBD,sDAkBC","sourcesContent":["import GitUrlParse from 'git-url-parse';\nimport { logger } from '../../logger';\nimport * as hostRules from '../host-rules';\nimport { regEx } from '../regex';\n\nexport function getHttpUrl(url: string, token?: string): string {\n  const parsedUrl = GitUrlParse(url);\n\n  parsedUrl.token = token ?? '';\n\n  const protocol = regEx(/^https?$/).exec(parsedUrl.protocol)\n    ? parsedUrl.protocol\n    : 'https';\n  return parsedUrl.toString(protocol);\n}\n\nexport function getRemoteUrlWithToken(url: string, hostType?: string): string {\n  const hostRule = hostRules.find({ url, hostType });\n\n  if (hostRule?.token) {\n    logger.debug(`Found hostRules token for url ${url}`);\n\n    return getHttpUrl(url, encodeURIComponent(hostRule.token));\n  }\n\n  if (hostRule?.username && hostRule?.password) {\n    logger.debug(`Found hostRules username and password for url ${url}`);\n    const encodedUsername = encodeURIComponent(hostRule.username);\n    const encodedPassword = encodeURIComponent(hostRule.password);\n\n    return getHttpUrl(url, `${encodedUsername}:${encodedPassword}`);\n  }\n\n  return url;\n}\n"]}