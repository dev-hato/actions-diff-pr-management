{"version":3,"file":"conflicts-cache.js","sourceRoot":"","sources":["../../../lib/util/git/conflicts-cache.ts"],"names":[],"mappings":";;;AAAA,oDAA+C;AAE/C,SAAgB,uBAAuB,CACrC,gBAAwB,EACxB,eAAuB,EACvB,gBAAwB,EACxB,eAAuB;IAEvB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAA,qBAAQ,GAAE,CAAC;IACpC,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,qBAAqB,GAAG,YAAY,CAAC,gBAAgB,CAAC,CAAC;IAC7D,IAAI,qBAAqB,EAAE,eAAe,KAAK,eAAe,EAAE;QAC9D,OAAO,IAAI,CAAC;KACb;IAED,MAAM,oBAAoB,GACxB,qBAAqB,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACzD,IAAI,oBAAoB,EAAE,eAAe,KAAK,eAAe,EAAE;QAC7D,OAAO,IAAI,CAAC;KACb;IAED,OAAO,oBAAoB,CAAC,YAAY,CAAC;AAC3C,CAAC;AAvBD,0DAuBC;AAED,SAAgB,uBAAuB,CACrC,gBAAwB,EACxB,eAAuB,EACvB,gBAAwB,EACxB,eAAuB,EACvB,YAAqB;IAErB,MAAM,KAAK,GAAG,IAAA,qBAAQ,GAAE,CAAC;IACzB,KAAK,CAAC,YAAY,KAAlB,KAAK,CAAC,YAAY,GAAK,EAAE,EAAC;IAC1B,MAAM,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;IAE/B,IAAI,qBAAqB,GAAG,YAAY,CAAC,gBAAgB,CAAC,CAAC;IAC3D,IAAI,qBAAqB,EAAE,eAAe,KAAK,eAAe,EAAE;QAC9D,YAAY,CAAC,gBAAgB,CAAC,GAAG;YAC/B,eAAe;YACf,cAAc,EAAE,EAAE;SACnB,CAAC;QACF,qBAAqB,GAAG,YAAY,CAAC,gBAAgB,CAAC,CAAC;KACxD;IAED,MAAM,oBAAoB,GACxB,qBAAqB,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACzD,IAAI,oBAAoB,EAAE,eAAe,KAAK,eAAe,EAAE;QAC7D,qBAAqB,CAAC,cAAc,CAAC,gBAAgB,CAAC,GAAG;YACvD,eAAe;YACf,YAAY;SACb,CAAC;KACH;AACH,CAAC;AA5BD,0DA4BC","sourcesContent":["import { getCache } from '../cache/repository';\n\nexport function getCachedConflictResult(\n  targetBranchName: string,\n  targetBranchSha: string,\n  sourceBranchName: string,\n  sourceBranchSha: string\n): boolean | null {\n  const { gitConflicts } = getCache();\n  if (!gitConflicts) {\n    return null;\n  }\n\n  const targetBranchConflicts = gitConflicts[targetBranchName];\n  if (targetBranchConflicts?.targetBranchSha !== targetBranchSha) {\n    return null;\n  }\n\n  const sourceBranchConflict =\n    targetBranchConflicts.sourceBranches[sourceBranchName];\n  if (sourceBranchConflict?.sourceBranchSha !== sourceBranchSha) {\n    return null;\n  }\n\n  return sourceBranchConflict.isConflicted;\n}\n\nexport function setCachedConflictResult(\n  targetBranchName: string,\n  targetBranchSha: string,\n  sourceBranchName: string,\n  sourceBranchSha: string,\n  isConflicted: boolean\n): void {\n  const cache = getCache();\n  cache.gitConflicts ??= {};\n  const { gitConflicts } = cache;\n\n  let targetBranchConflicts = gitConflicts[targetBranchName];\n  if (targetBranchConflicts?.targetBranchSha !== targetBranchSha) {\n    gitConflicts[targetBranchName] = {\n      targetBranchSha,\n      sourceBranches: {},\n    };\n    targetBranchConflicts = gitConflicts[targetBranchName];\n  }\n\n  const sourceBranchConflict =\n    targetBranchConflicts.sourceBranches[sourceBranchName];\n  if (sourceBranchConflict?.sourceBranchSha !== sourceBranchSha) {\n    targetBranchConflicts.sourceBranches[sourceBranchName] = {\n      sourceBranchSha,\n      isConflicted,\n    };\n  }\n}\n"]}