{"version":3,"file":"author.js","sourceRoot":"","sources":["../../../lib/util/git/author.ts"],"names":[],"mappings":";;;;AAAA,8EAAoC;AACpC,yCAAsC;AACtC,oCAAiC;AAGjC,SAAgB,cAAc,CAAC,KAAa;IAC1C,IAAI,MAAM,GAAqB,IAAI,CAAC;IACpC,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,IAAI,CAAC;KACb;IACD,IAAI;QACF,MAAM,GAAG,yBAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,MAAM,EAAE;YACV,OAAO,MAAM,CAAC;SACf;QACD,IAAI,aAAiC,CAAC;QACtC,IAAI,gBAAgB,GAAG,KAAK,CAAC;QAC7B,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC9C,2CAA2C;YAC3C,aAAa,GAAG,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;SAC7D;QACD,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC5B,mCAAmC;YACnC,aAAa,GAAG,CAAC,aAAa,IAAI,KAAK,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAChE,gBAAgB,GAAG,IAAI,CAAC;SACzB;QACD,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,MAAM,GAAG,yBAAK,CAAC,eAAe,CAAC,aAAa,CAAwB,CAAC;QAC3E,IAAI,MAAM,EAAE,OAAO,EAAE;YACnB,MAAM,GAAG;gBACP,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,EAAE,EAAE,CAAC;gBACpD,OAAO,EAAE,MAAM,CAAC,OAAO;aACxB,CAAC;YACF,IAAI,gBAAgB,EAAE;gBACpB,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;aACzD;YACD,OAAO,MAAM,CAAC;SACf;KACF;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,iCAAiC,CAAC,CAAC;KAC1D;IACD,UAAU;IACV,OAAO,IAAI,CAAC;AACd,CAAC;AAxCD,wCAwCC","sourcesContent":["import addrs from 'email-addresses';\nimport { logger } from '../../logger';\nimport { regEx } from '../regex';\nimport type { GitAuthor } from './types';\n\nexport function parseGitAuthor(input: string): GitAuthor | null {\n  let result: GitAuthor | null = null;\n  if (!input) {\n    return null;\n  }\n  try {\n    result = addrs.parseOneAddress(input);\n    if (result) {\n      return result;\n    }\n    let massagedInput: string | undefined;\n    let massagedBotEmail = false;\n    if (input.includes('<') && input.includes('>')) {\n      // try wrapping the name part in quotations\n      massagedInput = '\"' + input.replace(regEx(/(\\s?<)/), '\"$1');\n    }\n    if (input.includes('[bot]@')) {\n      // invalid github app/bot addresses\n      massagedInput = (massagedInput ?? input).replace('[bot]@', '@');\n      massagedBotEmail = true;\n    }\n    if (!massagedInput) {\n      return null;\n    }\n    const parsed = addrs.parseOneAddress(massagedInput) as addrs.ParsedMailbox;\n    if (parsed?.address) {\n      result = {\n        name: parsed.name ?? input.replace(regEx(/@.*/), ''),\n        address: parsed.address,\n      };\n      if (massagedBotEmail) {\n        result.address = result.address?.replace('@', '[bot]@');\n      }\n      return result;\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'Unknown error parsing gitAuthor');\n  }\n  // give up\n  return null;\n}\n"]}