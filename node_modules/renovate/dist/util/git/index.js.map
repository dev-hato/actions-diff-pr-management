{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/git/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport is from '@sindresorhus/is';\nimport delay from 'delay';\nimport fs from 'fs-extra';\n// TODO: check if bug is fixed (#7154)\n// eslint-disable-next-line import/no-named-as-default\nimport simpleGit, {\n  Options,\n  ResetMode,\n  SimpleGit,\n  TaskOptions,\n} from 'simple-git';\nimport upath from 'upath';\nimport { configFileNames } from '../../config/app-strings';\nimport { GlobalConfig } from '../../config/global';\nimport type { RenovateConfig } from '../../config/types';\nimport {\n  CONFIG_VALIDATION,\n  INVALID_PATH,\n  REPOSITORY_CHANGED,\n  REPOSITORY_DISABLED,\n  REPOSITORY_EMPTY,\n  SYSTEM_INSUFFICIENT_DISK_SPACE,\n  TEMPORARY_ERROR,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { api as semverCoerced } from '../../modules/versioning/semver-coerced';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport type { GitProtocol } from '../../types/git';\nimport { Limit, incLimitedValue } from '../../workers/global/limits';\nimport { newlineRegex, regEx } from '../regex';\nimport { parseGitAuthor } from './author';\nimport { getCachedBehindBaseResult } from './behind-base-branch-cache';\nimport { getNoVerify, simpleGitConfig } from './config';\nimport {\n  getCachedConflictResult,\n  setCachedConflictResult,\n} from './conflicts-cache';\nimport { checkForPlatformFailure, handleCommitError } from './error';\nimport {\n  getCachedModifiedResult,\n  setCachedModifiedResult,\n} from './modified-cache';\nimport { getCachedBranchParentShaResult } from './parent-sha-cache';\nimport { configSigningKey, writePrivateKey } from './private-key';\nimport type {\n  CommitFilesConfig,\n  CommitResult,\n  CommitSha,\n  LocalConfig,\n  StatusResult,\n  StorageConfig,\n  TreeItem,\n} from './types';\n\nexport { setNoVerify } from './config';\nexport { setPrivateKey } from './private-key';\n\n// Retry parameters\nconst retryCount = 5;\nconst delaySeconds = 3;\nconst delayFactor = 2;\n\n// A generic wrapper for simpleGit.* calls to make them more fault-tolerant\nexport async function gitRetry<T>(gitFunc: () => Promise<T>): Promise<T> {\n  let round = 0;\n  let lastError: Error | undefined;\n\n  while (round <= retryCount) {\n    if (round > 0) {\n      logger.debug(`gitRetry round ${round}`);\n    }\n    try {\n      const res = await gitFunc();\n      if (round > 1) {\n        logger.debug('Successful retry of git function');\n      }\n      return res;\n    } catch (err) {\n      lastError = err;\n      logger.debug({ err }, `Git function thrown`);\n      // Try to transform the Error to ExternalHostError\n      const errChecked = checkForPlatformFailure(err);\n      if (errChecked instanceof ExternalHostError) {\n        logger.debug(\n          { err: errChecked },\n          `ExternalHostError thrown in round ${\n            round + 1\n          } of ${retryCount} - retrying in the next round`\n        );\n      } else {\n        throw err;\n      }\n    }\n\n    const nextDelay = delayFactor ^ ((round - 1) * delaySeconds);\n    logger.trace({ nextDelay }, `Delay next round`);\n    await delay(1000 * nextDelay);\n\n    round++;\n  }\n\n  throw lastError;\n}\n\nfunction localName(branchName: string): string {\n  return branchName.replace(regEx(/^origin\\//), '');\n}\n\nasync function isDirectory(dir: string): Promise<boolean> {\n  try {\n    return (await fs.stat(dir)).isDirectory();\n  } catch (err) {\n    return false;\n  }\n}\n\nasync function getDefaultBranch(git: SimpleGit): Promise<string> {\n  // see https://stackoverflow.com/a/62352647/3005034\n  try {\n    let res = await git.raw(['rev-parse', '--abbrev-ref', 'origin/HEAD']);\n    // istanbul ignore if\n    if (!res) {\n      logger.debug('Could not determine default branch using git rev-parse');\n      const headPrefix = 'HEAD branch: ';\n      res = (await git.raw(['remote', 'show', 'origin']))\n        .split('\\n')\n        .map((line) => line.trim())\n        .find((line) => line.startsWith(headPrefix))!\n        .replace(headPrefix, '');\n    }\n    return res.replace('origin/', '').trim();\n  } catch (err) /* istanbul ignore next */ {\n    const errChecked = checkForPlatformFailure(err);\n    if (errChecked) {\n      throw errChecked;\n    }\n    if (\n      err.message.startsWith(\n        'fatal: ref refs/remotes/origin/HEAD is not a symbolic ref'\n      )\n    ) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    // istanbul ignore if\n    if (err.message.includes(\"fatal: ambiguous argument 'origin/HEAD'\")) {\n      logger.warn({ err }, 'Error getting default branch');\n      throw new Error(TEMPORARY_ERROR);\n    }\n    throw err;\n  }\n}\n\nlet config: LocalConfig = {} as any;\n\n// TODO: can be undefined\nlet git: SimpleGit;\nlet gitInitialized: boolean;\n\nlet privateKeySet = false;\n\nexport const GIT_MINIMUM_VERSION = '2.33.0'; // git show-current\n\nexport async function validateGitVersion(): Promise<boolean> {\n  let version: string | undefined;\n  const globalGit = simpleGit();\n  try {\n    const raw = await globalGit.raw(['--version']);\n    for (const section of raw.split(/\\s+/)) {\n      if (semverCoerced.isVersion(section)) {\n        version = section;\n        break;\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, 'Error fetching git version');\n    return false;\n  }\n  // istanbul ignore if\n  if (\n    !(\n      version &&\n      (semverCoerced.equals(version, GIT_MINIMUM_VERSION) ||\n        semverCoerced.isGreaterThan(version, GIT_MINIMUM_VERSION))\n    )\n  ) {\n    logger.error(\n      { detectedVersion: version, minimumVersion: GIT_MINIMUM_VERSION },\n      'Git version needs upgrading'\n    );\n    return false;\n  }\n  logger.debug(`Found valid git version: ${version}`);\n  return true;\n}\n\nasync function fetchBranchCommits(): Promise<void> {\n  config.branchCommits = {};\n  const opts = ['ls-remote', '--heads', config.url];\n  if (config.extraCloneOpts) {\n    Object.entries(config.extraCloneOpts).forEach((e) =>\n      // TODO: types (#7154)\n      opts.unshift(e[0], `${e[1]!}`)\n    );\n  }\n  try {\n    (await gitRetry(() => git.raw(opts)))\n      .split(newlineRegex)\n      .filter(Boolean)\n      .map((line) => line.trim().split(regEx(/\\s+/)))\n      .forEach(([sha, ref]) => {\n        config.branchCommits[ref.replace('refs/heads/', '')] = sha;\n      });\n  } catch (err) /* istanbul ignore next */ {\n    const errChecked = checkForPlatformFailure(err);\n    if (errChecked) {\n      throw errChecked;\n    }\n    logger.debug({ err }, 'git error');\n    if (err.message?.includes('Please ask the owner to check their account')) {\n      throw new Error(REPOSITORY_DISABLED);\n    }\n    throw err;\n  }\n}\n\nexport async function initRepo(args: StorageConfig): Promise<void> {\n  config = { ...args } as any;\n  config.ignoredAuthors = [];\n  config.additionalBranches = [];\n  config.branchIsModified = {};\n  const { localDir } = GlobalConfig.get();\n  git = simpleGit(localDir, simpleGitConfig());\n  gitInitialized = false;\n  await fetchBranchCommits();\n}\n\nasync function resetToBranch(branchName: string): Promise<void> {\n  logger.debug(`resetToBranch(${branchName})`);\n  await git.raw(['reset', '--hard']);\n  await gitRetry(() => git.checkout(branchName));\n  await git.raw(['reset', '--hard', 'origin/' + branchName]);\n  await git.raw(['clean', '-fd']);\n}\n\n// istanbul ignore next\nexport async function resetToCommit(commit: string): Promise<void> {\n  logger.debug(`resetToCommit(${commit})`);\n  await git.raw(['reset', '--hard', commit]);\n}\n\nasync function deleteLocalBranch(branchName: string): Promise<void> {\n  await git.branch(['-D', branchName]);\n}\n\nasync function cleanLocalBranches(): Promise<void> {\n  const existingBranches = (await git.raw(['branch']))\n    .split(newlineRegex)\n    .map((branch) => branch.trim())\n    .filter((branch) => branch.length)\n    .filter((branch) => !branch.startsWith('* '));\n  logger.debug({ existingBranches });\n  for (const branchName of existingBranches) {\n    await deleteLocalBranch(branchName);\n  }\n}\n\nexport function setGitAuthor(gitAuthor: string | undefined): void {\n  const gitAuthorParsed = parseGitAuthor(\n    gitAuthor ?? 'Renovate Bot <renovate@whitesourcesoftware.com>'\n  );\n  if (!gitAuthorParsed) {\n    const error = new Error(CONFIG_VALIDATION);\n    error.validationSource = 'None';\n    error.validationError = 'Invalid gitAuthor';\n    error.validationMessage = `gitAuthor is not parsed as valid RFC5322 format: ${gitAuthor!}`;\n    throw error;\n  }\n  config.gitAuthorName = gitAuthorParsed.name;\n  config.gitAuthorEmail = gitAuthorParsed.address;\n}\n\nexport async function writeGitAuthor(): Promise<void> {\n  const { gitAuthorName, gitAuthorEmail, writeGitDone } = config;\n  // istanbul ignore if\n  if (writeGitDone) {\n    return;\n  }\n  config.writeGitDone = true;\n  try {\n    if (gitAuthorName) {\n      logger.debug({ gitAuthorName }, 'Setting git author name');\n      await git.addConfig('user.name', gitAuthorName);\n    }\n    if (gitAuthorEmail) {\n      logger.debug({ gitAuthorEmail }, 'Setting git author email');\n      await git.addConfig('user.email', gitAuthorEmail);\n    }\n  } catch (err) /* istanbul ignore next */ {\n    const errChecked = checkForPlatformFailure(err);\n    if (errChecked) {\n      throw errChecked;\n    }\n    logger.debug(\n      { err, gitAuthorName, gitAuthorEmail },\n      'Error setting git author config'\n    );\n    throw new Error(TEMPORARY_ERROR);\n  }\n}\n\nexport function setUserRepoConfig({\n  gitIgnoredAuthors,\n  gitAuthor,\n}: RenovateConfig): void {\n  config.ignoredAuthors = gitIgnoredAuthors ?? [];\n  setGitAuthor(gitAuthor);\n}\n\nexport async function getSubmodules(): Promise<string[]> {\n  try {\n    return (\n      (await git.raw([\n        'config',\n        '--file',\n        '.gitmodules',\n        '--get-regexp',\n        '\\\\.path',\n      ])) || ''\n    )\n      .trim()\n      .split(regEx(/[\\n\\s]/))\n      .filter((_e: string, i: number) => i % 2);\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error getting submodules');\n    return [];\n  }\n}\n\nexport async function syncGit(): Promise<void> {\n  if (gitInitialized) {\n    return;\n  }\n  gitInitialized = true;\n  const localDir = GlobalConfig.get('localDir')!;\n  logger.debug(`Initializing git repository into ${localDir}`);\n  const gitHead = upath.join(localDir, '.git/HEAD');\n  let clone = true;\n\n  if (await fs.pathExists(gitHead)) {\n    try {\n      await git.raw(['remote', 'set-url', 'origin', config.url]);\n      await resetToBranch(await getDefaultBranch(git));\n      const fetchStart = Date.now();\n      await gitRetry(() => git.pull());\n      await gitRetry(() => git.fetch());\n      config.currentBranch =\n        config.currentBranch || (await getDefaultBranch(git));\n      await resetToBranch(config.currentBranch);\n      await cleanLocalBranches();\n      await gitRetry(() => git.raw(['remote', 'prune', 'origin']));\n      const durationMs = Math.round(Date.now() - fetchStart);\n      logger.info({ durationMs }, 'git fetch completed');\n      clone = false;\n    } catch (err) /* istanbul ignore next */ {\n      if (err.message === REPOSITORY_EMPTY) {\n        throw err;\n      }\n      logger.info({ err }, 'git fetch error');\n    }\n  }\n  if (clone) {\n    const cloneStart = Date.now();\n    try {\n      const opts: string[] = [];\n      if (config.fullClone) {\n        logger.debug('Performing full clone');\n      } else {\n        logger.debug('Performing blobless clone');\n        opts.push('--filter=blob:none');\n      }\n      if (config.extraCloneOpts) {\n        Object.entries(config.extraCloneOpts).forEach((e) =>\n          // TODO: types (#7154)\n          opts.push(e[0], `${e[1]!}`)\n        );\n      }\n      const emptyDirAndClone = async (): Promise<void> => {\n        await fs.emptyDir(localDir);\n        await git.clone(config.url, '.', opts);\n      };\n      await gitRetry(() => emptyDirAndClone());\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug({ err }, 'git clone error');\n      if (err.message?.includes('No space left on device')) {\n        throw new Error(SYSTEM_INSUFFICIENT_DISK_SPACE);\n      }\n      if (err.message === REPOSITORY_EMPTY) {\n        throw err;\n      }\n      throw new ExternalHostError(err, 'git');\n    }\n    const durationMs = Math.round(Date.now() - cloneStart);\n    logger.debug({ durationMs }, 'git clone completed');\n  }\n  try {\n    config.currentBranchSha = (await git.raw(['rev-parse', 'HEAD'])).trim();\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message?.includes('fatal: not a git repository')) {\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    throw err;\n  }\n  if (config.cloneSubmodules) {\n    const submodules = await getSubmodules();\n    for (const submodule of submodules) {\n      try {\n        logger.debug(`Cloning git submodule at ${submodule}`);\n        await gitRetry(() => git.submoduleUpdate(['--init', submodule]));\n      } catch (err) {\n        logger.warn(\n          { err },\n          `Unable to initialise git submodule at ${submodule}`\n        );\n      }\n    }\n  }\n  try {\n    const latestCommit = (await git.log({ n: 1 })).latest;\n    logger.debug({ latestCommit }, 'latest repository commit');\n  } catch (err) /* istanbul ignore next */ {\n    const errChecked = checkForPlatformFailure(err);\n    if (errChecked) {\n      throw errChecked;\n    }\n    if (err.message.includes('does not have any commits yet')) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    logger.warn({ err }, 'Cannot retrieve latest commit');\n  }\n  config.currentBranch = config.currentBranch || (await getDefaultBranch(git));\n}\n\n// istanbul ignore next\nexport async function getRepoStatus(path?: string): Promise<StatusResult> {\n  if (is.string(path)) {\n    const { localDir } = GlobalConfig.get();\n    const localPath = upath.resolve(localDir, path);\n    if (!localPath.startsWith(upath.resolve(localDir))) {\n      logger.warn(\n        { localPath, localDir },\n        'Preventing access to file outside the local directory'\n      );\n      throw new Error(INVALID_PATH);\n    }\n  }\n\n  await syncGit();\n  return git.status(path ? [path] : []);\n}\n\nexport function branchExists(branchName: string): boolean {\n  return !!config.branchCommits[branchName];\n}\n\n// Return the commit SHA for a branch\nexport function getBranchCommit(branchName: string): CommitSha | null {\n  return config.branchCommits[branchName] || null;\n}\n\n// Return the parent commit SHA for a branch\nexport async function getBranchParentSha(\n  branchName: string\n): Promise<CommitSha | null> {\n  const branchSha = getBranchCommit(branchName);\n  let parentSha = getCachedBranchParentShaResult(branchName, branchSha);\n  if (parentSha !== null) {\n    return parentSha;\n  }\n\n  try {\n    // TODO: branchSha can be null (#7154)\n    parentSha = await git.revparse([`${branchSha!}^`]);\n    return parentSha;\n  } catch (err) {\n    logger.debug({ err }, 'Error getting branch parent sha');\n    return null;\n  }\n}\n\nexport async function getCommitMessages(): Promise<string[]> {\n  await syncGit();\n  logger.debug('getCommitMessages');\n  const res = await git.log({\n    n: 10,\n    format: { message: '%s' },\n  });\n  return res.all.map((commit) => commit.message);\n}\n\nexport async function checkoutBranch(branchName: string): Promise<CommitSha> {\n  logger.debug(`Setting current branch to ${branchName}`);\n  await syncGit();\n  try {\n    config.currentBranch = branchName;\n    config.currentBranchSha = (\n      await git.raw(['rev-parse', 'origin/' + branchName])\n    ).trim();\n    await gitRetry(() => git.checkout(['-f', branchName, '--']));\n    const latestCommitDate = (await git.log({ n: 1 }))?.latest?.date;\n    if (latestCommitDate) {\n      logger.debug({ branchName, latestCommitDate }, 'latest commit');\n    }\n    await git.reset(ResetMode.HARD);\n    return config.currentBranchSha;\n  } catch (err) /* istanbul ignore next */ {\n    const errChecked = checkForPlatformFailure(err);\n    if (errChecked) {\n      throw errChecked;\n    }\n    if (err.message?.includes('fatal: ambiguous argument')) {\n      logger.warn({ err }, 'Failed to checkout branch');\n      throw new Error(TEMPORARY_ERROR);\n    }\n    throw err;\n  }\n}\n\nexport async function getFileList(): Promise<string[]> {\n  await syncGit();\n  const branch = config.currentBranch;\n  let files: string;\n  try {\n    files = await git.raw(['ls-tree', '-r', branch]);\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message?.includes('fatal: Not a valid object name')) {\n      logger.debug(\n        { err },\n        'Branch not found when checking branch list - aborting'\n      );\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    throw err;\n  }\n  // istanbul ignore if\n  if (!files) {\n    return [];\n  }\n  // submodules are starting with `160000 commit`\n  return files\n    .split(newlineRegex)\n    .filter(is.string)\n    .filter((line) => line.startsWith('100'))\n    .map((line) => line.split(regEx(/\\t/)).pop()!);\n}\n\nexport function getBranchList(): string[] {\n  return Object.keys(config.branchCommits);\n}\n\nexport async function isBranchBehindBase(branchName: string): Promise<boolean> {\n  const { currentBranchSha } = config;\n\n  let isBehind = getCachedBehindBaseResult(branchName, currentBranchSha);\n  if (isBehind !== null) {\n    return isBehind;\n  }\n\n  await syncGit();\n  try {\n    const { currentBranchSha, currentBranch } = config;\n    const branches = await git.branch([\n      '--remotes',\n      '--verbose',\n      '--contains',\n      config.currentBranchSha,\n    ]);\n    isBehind = !branches.all.map(localName).includes(branchName);\n    logger.debug(\n      { isBehind, currentBranch, currentBranchSha },\n      `isBranchBehindBase=${isBehind}`\n    );\n    return isBehind;\n  } catch (err) /* istanbul ignore next */ {\n    const errChecked = checkForPlatformFailure(err);\n    if (errChecked) {\n      throw errChecked;\n    }\n    throw err;\n  }\n}\n\nexport async function isBranchModified(branchName: string): Promise<boolean> {\n  if (!branchExists(branchName)) {\n    logger.debug(\n      { branchName },\n      'Branch does not exist - cannot check isModified'\n    );\n    return false;\n  }\n  // First check local config\n  if (config.branchIsModified[branchName] !== undefined) {\n    return config.branchIsModified[branchName];\n  }\n  // Second check repoCache\n  const isModified = getCachedModifiedResult(\n    branchName,\n    config.branchCommits[branchName]\n  );\n  if (isModified !== null) {\n    return (config.branchIsModified[branchName] = isModified);\n  }\n\n  await syncGit();\n  // Retrieve the author of the most recent commit\n  let lastAuthor: string | undefined;\n  try {\n    lastAuthor = (\n      await git.raw([\n        'log',\n        '-1',\n        '--pretty=format:%ae',\n        `origin/${branchName}`,\n        '--',\n      ])\n    ).trim();\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message?.includes('fatal: bad revision')) {\n      logger.debug(\n        { err },\n        'Remote branch not found when checking last commit author - aborting run'\n      );\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    logger.warn({ err }, 'Error checking last author for isBranchModified');\n  }\n  const { gitAuthorEmail } = config;\n  if (\n    lastAuthor === gitAuthorEmail ||\n    config.ignoredAuthors.some((ignoredAuthor) => lastAuthor === ignoredAuthor)\n  ) {\n    // author matches - branch has not been modified\n    logger.debug({ branchName }, 'Branch has not been modified');\n    config.branchIsModified[branchName] = false;\n    setCachedModifiedResult(\n      branchName,\n      config.branchCommits[branchName],\n      false\n    );\n    return false;\n  }\n  logger.debug(\n    { branchName, lastAuthor, gitAuthorEmail },\n    'Last commit author does not match git author email - branch has been modified'\n  );\n  config.branchIsModified[branchName] = true;\n  setCachedModifiedResult(branchName, config.branchCommits[branchName], true);\n  return true;\n}\n\nexport async function isBranchConflicted(\n  baseBranch: string,\n  branch: string\n): Promise<boolean> {\n  logger.debug(`isBranchConflicted(${baseBranch}, ${branch})`);\n\n  const baseBranchSha = getBranchCommit(baseBranch);\n  const branchSha = getBranchCommit(branch);\n  if (!baseBranchSha || !branchSha) {\n    logger.warn(\n      { baseBranch, branch },\n      'isBranchConflicted: branch does not exist'\n    );\n    return true;\n  }\n\n  const cachedResult = getCachedConflictResult(\n    baseBranch,\n    baseBranchSha,\n    branch,\n    branchSha\n  );\n  if (is.boolean(cachedResult)) {\n    logger.debug(\n      `Using cached result ${cachedResult} for isBranchConflicted(${baseBranch}, ${branch})`\n    );\n    return cachedResult;\n  }\n\n  let result = false;\n  await syncGit();\n  await writeGitAuthor();\n\n  const origBranch = config.currentBranch;\n  try {\n    await git.reset(ResetMode.HARD);\n    if (origBranch !== baseBranch) {\n      await git.checkout(baseBranch);\n    }\n    await git.merge(['--no-commit', '--no-ff', `origin/${branch}`]);\n  } catch (err) {\n    result = true;\n    // istanbul ignore if: not easily testable\n    if (!err?.git?.conflicts?.length) {\n      logger.debug(\n        { baseBranch, branch, err },\n        'isBranchConflicted: unknown error'\n      );\n    }\n  } finally {\n    try {\n      await git.merge(['--abort']);\n      if (origBranch !== baseBranch) {\n        await git.checkout(origBranch);\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug(\n        { baseBranch, branch, err },\n        'isBranchConflicted: cleanup error'\n      );\n    }\n  }\n\n  setCachedConflictResult(baseBranch, baseBranchSha, branch, branchSha, result);\n  return result;\n}\n\nexport async function deleteBranch(branchName: string): Promise<void> {\n  await syncGit();\n  try {\n    await gitRetry(() => git.raw(['push', '--delete', 'origin', branchName]));\n    logger.debug({ branchName }, 'Deleted remote branch');\n  } catch (err) /* istanbul ignore next */ {\n    const errChecked = checkForPlatformFailure(err);\n    if (errChecked) {\n      throw errChecked;\n    }\n    logger.debug({ branchName }, 'No remote branch to delete');\n  }\n  try {\n    await deleteLocalBranch(branchName);\n    // istanbul ignore next\n    logger.debug({ branchName }, 'Deleted local branch');\n  } catch (err) {\n    const errChecked = checkForPlatformFailure(err);\n    // istanbul ignore if\n    if (errChecked) {\n      throw errChecked;\n    }\n    logger.debug({ branchName }, 'No local branch to delete');\n  }\n  delete config.branchCommits[branchName];\n}\n\nexport async function mergeBranch(branchName: string): Promise<void> {\n  let status: StatusResult | undefined;\n  try {\n    await syncGit();\n    await git.reset(ResetMode.HARD);\n    await gitRetry(() =>\n      git.checkout(['-B', branchName, 'origin/' + branchName])\n    );\n    await gitRetry(() =>\n      git.checkout([\n        '-B',\n        config.currentBranch,\n        'origin/' + config.currentBranch,\n      ])\n    );\n    status = await git.status();\n    await gitRetry(() => git.merge(['--ff-only', branchName]));\n    await gitRetry(() => git.push('origin', config.currentBranch));\n    incLimitedValue(Limit.Commits);\n  } catch (err) {\n    logger.debug(\n      {\n        baseBranch: config.currentBranch,\n        baseSha: config.currentBranchSha,\n        branchName,\n        branchSha: getBranchCommit(branchName),\n        status,\n        err,\n      },\n      'mergeBranch error'\n    );\n    throw err;\n  }\n}\n\nexport async function getBranchLastCommitTime(\n  branchName: string\n): Promise<Date> {\n  await syncGit();\n  try {\n    const time = await git.show(['-s', '--format=%ai', 'origin/' + branchName]);\n    return new Date(Date.parse(time));\n  } catch (err) {\n    const errChecked = checkForPlatformFailure(err);\n    // istanbul ignore if\n    if (errChecked) {\n      throw errChecked;\n    }\n    return new Date();\n  }\n}\n\nexport async function getBranchFiles(\n  branchName: string\n): Promise<string[] | null> {\n  await syncGit();\n  try {\n    const diff = await gitRetry(() =>\n      git.diffSummary([`origin/${branchName}`, `origin/${branchName}^`])\n    );\n    return diff.files.map((file) => file.file);\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'getBranchFiles error');\n    const errChecked = checkForPlatformFailure(err);\n    if (errChecked) {\n      throw errChecked;\n    }\n    return null;\n  }\n}\n\nexport async function getFile(\n  filePath: string,\n  branchName?: string\n): Promise<string | null> {\n  await syncGit();\n  try {\n    const content = await git.show([\n      'origin/' + (branchName ?? config.currentBranch) + ':' + filePath,\n    ]);\n    return content;\n  } catch (err) {\n    const errChecked = checkForPlatformFailure(err);\n    // istanbul ignore if\n    if (errChecked) {\n      throw errChecked;\n    }\n    return null;\n  }\n}\n\nexport async function hasDiff(branchName: string): Promise<boolean> {\n  await syncGit();\n  try {\n    return (await gitRetry(() => git.diff(['HEAD', branchName]))) !== '';\n  } catch (err) {\n    return true;\n  }\n}\n\nasync function handleCommitAuth(localDir: string): Promise<void> {\n  if (!privateKeySet) {\n    await writePrivateKey();\n    privateKeySet = true;\n  }\n  await configSigningKey(localDir);\n  await writeGitAuthor();\n}\n\n/**\n *\n * Prepare local branch with commit\n *\n * 0. Hard reset\n * 1. Creates local branch with `origin/` prefix\n * 2. Perform `git add` (respecting mode) and `git remove` for each file\n * 3. Perform commit\n * 4. Check whether resulting commit is empty or not (due to .gitignore)\n * 5. If not empty, return commit info for further processing\n *\n */\nexport async function prepareCommit({\n  branchName,\n  files,\n  message,\n  force = false,\n}: CommitFilesConfig): Promise<CommitResult | null> {\n  const localDir = GlobalConfig.get('localDir')!;\n  await syncGit();\n  logger.debug(`Preparing files for committing to branch ${branchName}`);\n  await handleCommitAuth(localDir);\n  try {\n    await git.reset(ResetMode.HARD);\n    await git.raw(['clean', '-fd']);\n    const parentCommitSha = config.currentBranchSha;\n    await gitRetry(() =>\n      git.checkout(['-B', branchName, 'origin/' + config.currentBranch])\n    );\n    const deletedFiles: string[] = [];\n    const addedModifiedFiles: string[] = [];\n    const ignoredFiles: string[] = [];\n    for (const file of files) {\n      const fileName = file.path;\n      if (file.type === 'deletion') {\n        try {\n          await git.rm([fileName]);\n          deletedFiles.push(fileName);\n        } catch (err) /* istanbul ignore next */ {\n          const errChecked = checkForPlatformFailure(err);\n          if (errChecked) {\n            throw errChecked;\n          }\n          logger.trace({ err, fileName }, 'Cannot delete file');\n          ignoredFiles.push(fileName);\n        }\n      } else {\n        if (await isDirectory(upath.join(localDir, fileName))) {\n          // This is usually a git submodule update\n          logger.trace({ fileName }, 'Adding directory commit');\n        } else if (file.contents === null) {\n          continue;\n        } else {\n          let contents: Buffer;\n          // istanbul ignore else\n          if (typeof file.contents === 'string') {\n            contents = Buffer.from(file.contents);\n          } else {\n            contents = file.contents;\n          }\n          // some file systems including Windows don't support the mode\n          // so the index should be manually updated after adding the file\n          if (file.isSymlink) {\n            await fs.symlink(file.contents, upath.join(localDir, fileName));\n          } else {\n            await fs.outputFile(upath.join(localDir, fileName), contents, {\n              mode: file.isExecutable ? 0o777 : 0o666,\n            });\n          }\n        }\n        try {\n          // istanbul ignore next\n          const addParams =\n            fileName === configFileNames[0] ? ['-f', fileName] : fileName;\n          await git.add(addParams);\n          if (file.isExecutable) {\n            await git.raw(['update-index', '--chmod=+x', fileName]);\n          }\n          addedModifiedFiles.push(fileName);\n        } catch (err) /* istanbul ignore next */ {\n          if (\n            !err.message.includes(\n              'The following paths are ignored by one of your .gitignore files'\n            )\n          ) {\n            throw err;\n          }\n          logger.debug({ fileName }, 'Cannot commit ignored file');\n          ignoredFiles.push(file.path);\n        }\n      }\n    }\n\n    const commitOptions: Options = {};\n    if (getNoVerify().includes('commit')) {\n      commitOptions['--no-verify'] = null;\n    }\n\n    const commitRes = await git.commit(message, [], commitOptions);\n    if (\n      commitRes.summary &&\n      commitRes.summary.changes === 0 &&\n      commitRes.summary.insertions === 0 &&\n      commitRes.summary.deletions === 0\n    ) {\n      logger.warn({ commitRes }, 'Detected empty commit - aborting git push');\n      return null;\n    }\n    logger.debug(\n      { deletedFiles, ignoredFiles, result: commitRes },\n      `git commit`\n    );\n    if (!force && !(await hasDiff(`origin/${branchName}`))) {\n      logger.debug(\n        { branchName, deletedFiles, addedModifiedFiles, ignoredFiles },\n        'No file changes detected. Skipping commit'\n      );\n      return null;\n    }\n\n    const commitSha = (await git.revparse([branchName])).trim();\n    const result: CommitResult = {\n      parentCommitSha,\n      commitSha,\n      files: files.filter((fileChange) => {\n        if (fileChange.type === 'deletion') {\n          return deletedFiles.includes(fileChange.path);\n        }\n        return addedModifiedFiles.includes(fileChange.path);\n      }),\n    };\n\n    return result;\n  } catch (err) /* istanbul ignore next */ {\n    return handleCommitError(files, branchName, err);\n  }\n}\n\nexport async function pushCommit({\n  branchName,\n  files,\n}: CommitFilesConfig): Promise<boolean> {\n  await syncGit();\n  logger.debug(`Pushing branch ${branchName}`);\n  let result = false;\n  try {\n    const pushOptions: TaskOptions = {\n      '--force-with-lease': null,\n      '-u': null,\n    };\n    if (getNoVerify().includes('push')) {\n      pushOptions['--no-verify'] = null;\n    }\n\n    const pushRes = await gitRetry(() =>\n      git.push('origin', `${branchName}:${branchName}`, pushOptions)\n    );\n    delete pushRes.repo;\n    logger.debug({ result: pushRes }, 'git push');\n    incLimitedValue(Limit.Commits);\n    result = true;\n  } catch (err) /* istanbul ignore next */ {\n    handleCommitError(files, branchName, err);\n  }\n  return result;\n}\n\nexport async function fetchCommit({\n  branchName,\n  files,\n}: CommitFilesConfig): Promise<CommitSha | null> {\n  await syncGit();\n  logger.debug(`Fetching branch ${branchName}`);\n  try {\n    const ref = `refs/heads/${branchName}:refs/remotes/origin/${branchName}`;\n    await gitRetry(() => git.pull(['origin', ref, '--force']));\n    const commit = (await git.revparse([branchName])).trim();\n    config.branchCommits[branchName] = commit;\n    config.branchIsModified[branchName] = false;\n    return commit;\n  } catch (err) /* istanbul ignore next */ {\n    return handleCommitError(files, branchName, err);\n  }\n}\n\nexport async function commitFiles(\n  commitConfig: CommitFilesConfig\n): Promise<CommitSha | null> {\n  try {\n    const commitResult = await prepareCommit(commitConfig);\n    if (commitResult) {\n      const pushResult = await pushCommit(commitConfig);\n      if (pushResult) {\n        const { branchName } = commitConfig;\n        const { commitSha } = commitResult;\n        config.branchCommits[branchName] = commitSha;\n        config.branchIsModified[branchName] = false;\n        return commitSha;\n      }\n    }\n    return null;\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message.includes('[rejected] (stale info)')) {\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    throw err;\n  }\n}\n\nexport function getUrl({\n  protocol,\n  auth,\n  hostname,\n  host,\n  repository,\n}: {\n  protocol?: GitProtocol;\n  auth?: string;\n  hostname?: string;\n  host?: string;\n  repository: string;\n}): string {\n  if (protocol === 'ssh') {\n    // TODO: types (#7154)\n    return `git@${hostname!}:${repository}.git`;\n  }\n  return URL.format({\n    protocol: protocol ?? 'https',\n    auth,\n    hostname,\n    host,\n    pathname: repository + '.git',\n  });\n}\n\nlet remoteRefsExist = false;\n\n/**\n *\n * Non-branch refs allow us to store git objects without triggering CI pipelines.\n * It's useful for API-based branch rebasing.\n *\n * @see https://stackoverflow.com/questions/63866947/pushing-git-non-branch-references-to-a-remote/63868286\n *\n */\nexport async function pushCommitToRenovateRef(\n  commitSha: string,\n  refName: string,\n  section = 'branches'\n): Promise<void> {\n  const fullRefName = `refs/renovate/${section}/${refName}`;\n  await git.raw(['update-ref', fullRefName, commitSha]);\n  await git.push(['--force', 'origin', fullRefName]);\n  remoteRefsExist = true;\n}\n\n/**\n *\n * Removes all remote \"refs/renovate/*\" refs in two steps:\n *\n * Step 1: list refs\n *\n *   $ git ls-remote origin \"refs/renovate/*\"\n *\n *   > cca38e9ea6d10946bdb2d0ca5a52c205783897aa        refs/renovate/foo\n *   > 29ac154936c880068994e17eb7f12da7fdca70e5        refs/renovate/bar\n *   > 3fafaddc339894b6d4f97595940fd91af71d0355        refs/renovate/baz\n *   > ...\n *\n * Step 2:\n *\n *   $ git push --delete origin refs/renovate/foo refs/renovate/bar refs/renovate/baz\n *\n */\nexport async function clearRenovateRefs(): Promise<void> {\n  if (!gitInitialized || !remoteRefsExist) {\n    return;\n  }\n\n  logger.debug(`Cleaning up Renovate refs: refs/renovate/*`);\n  const renovateRefs: string[] = [];\n  const obsoleteRefs: string[] = [];\n\n  try {\n    const rawOutput = await git.listRemote([config.url, 'refs/renovate/*']);\n    const refs = rawOutput\n      .split(newlineRegex)\n      .map((line) => line.replace(regEx(/[0-9a-f]+\\s+/i), '').trim())\n      .filter((line) => line.startsWith('refs/renovate/'));\n    renovateRefs.push(...refs);\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, `Renovate refs cleanup error`);\n  }\n\n  const nonSectionedRefs = renovateRefs.filter((ref) => {\n    return ref.split('/').length === 3;\n  });\n  obsoleteRefs.push(...nonSectionedRefs);\n\n  const renovateBranchRefs = renovateRefs.filter((ref) =>\n    ref.startsWith('refs/renovate/branches/')\n  );\n  obsoleteRefs.push(...renovateBranchRefs);\n\n  if (obsoleteRefs.length) {\n    const pushOpts = ['--delete', 'origin', ...obsoleteRefs];\n    await git.push(pushOpts);\n  }\n\n  remoteRefsExist = false;\n}\n\nconst treeItemRegex = regEx(\n  /^(?<mode>\\d{6})\\s+(?<type>blob|tree|commit)\\s+(?<sha>[0-9a-f]{40})\\s+(?<path>.*)$/\n);\n\nconst treeShaRegex = regEx(/tree\\s+(?<treeSha>[0-9a-f]{40})\\s*/);\n\n/**\n *\n * Obtain top-level items of commit tree.\n * We don't need subtree items, so here are 2 steps only.\n *\n * Step 1: commit SHA -> tree SHA\n *\n *   $ git cat-file -p <commit-sha>\n *\n *   > tree <tree-sha>\n *   > parent 59b8b0e79319b7dc38f7a29d618628f3b44c2fd7\n *   > ...\n *\n * Step 2: tree SHA -> tree items (top-level)\n *\n *   $ git cat-file -p <tree-sha>\n *\n *   > 040000 tree 389400684d1f004960addc752be13097fe85d776    src\n *   > ...\n *   > 100644 blob 7d2edde437ad4e7bceb70dbfe70e93350d99c98b    package.json\n *\n */\nexport async function listCommitTree(commitSha: string): Promise<TreeItem[]> {\n  const commitOutput = await git.catFile(['-p', commitSha]);\n  const { treeSha } =\n    treeShaRegex.exec(commitOutput)?.groups ??\n    /* istanbul ignore next: will never happen */ {};\n  const contents = await git.catFile(['-p', treeSha]);\n  const lines = contents.split(newlineRegex);\n  const result: TreeItem[] = [];\n  for (const line of lines) {\n    const matchGroups = treeItemRegex.exec(line)?.groups;\n    if (matchGroups) {\n      const { path, mode, type, sha } = matchGroups;\n      result.push({ path, mode, type, sha });\n    }\n  }\n  return result;\n}\n"]}