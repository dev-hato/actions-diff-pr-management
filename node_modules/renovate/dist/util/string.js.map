{"version":3,"file":"string.js","sourceRoot":"","sources":["../../lib/util/string.ts"],"names":[],"mappings":";;;AAAA,sCAAmC;AAEnC,+DAA+D;AAC/D,SAAgB,OAAO,CACrB,OAAe,EACf,KAAa,EACb,KAAa;IAEb,OAAO,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC;AAClE,CAAC;AAND,0BAMC;AAED,gEAAgE;AAChE,SAAgB,SAAS,CACvB,OAAe,EACf,KAAa,EACb,SAAiB,EACjB,SAAiB;IAEjB,eAAM,CAAC,KAAK,CAAC,aAAa,SAAS,SAAS,SAAS,aAAa,KAAK,EAAE,CAAC,CAAC;IAC3E,OAAO,CACL,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC;QAC3B,SAAS;QACT,OAAO,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,CAC5C,CAAC;AACJ,CAAC;AAZD,8BAYC;AAED;;GAEG;AACH,SAAgB,QAAQ,CAAC,KAAa;IACpC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC/C,CAAC;AAFD,4BAEC;AAED;;GAEG;AACH,SAAgB,UAAU,CAAC,KAAa;IACtC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;AACjD,CAAC;AAFD,gCAEC;AAED,SAAgB,aAAa,CAC3B,OAAe,EACf,KAAa,EACb,QAAkB;IAElB,OAAO,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,KAAK,CAAC;AAC7C,CAAC;AAND,sCAMC","sourcesContent":["import { logger } from '../logger';\n\n// Return true if the match string is found at index in content\nexport function matchAt(\n  content: string,\n  index: number,\n  match: string\n): boolean {\n  return content.substring(index, index + match.length) === match;\n}\n\n// Replace oldString with newString at location index of content\nexport function replaceAt(\n  content: string,\n  index: number,\n  oldString: string,\n  newString: string\n): string {\n  logger.trace(`Replacing ${oldString} with ${newString} at index ${index}`);\n  return (\n    content.substring(0, index) +\n    newString +\n    content.substring(index + oldString.length)\n  );\n}\n\n/**\n * Converts from utf-8 string to base64-encoded string\n */\nexport function toBase64(input: string): string {\n  return Buffer.from(input).toString('base64');\n}\n\n/**\n * Converts from base64-encoded string to utf-8 string\n */\nexport function fromBase64(input: string): string {\n  return Buffer.from(input, 'base64').toString();\n}\n\nexport function uniqueStrings(\n  element: string,\n  index: number,\n  elements: string[]\n): boolean {\n  return elements.indexOf(element) === index;\n}\n"]}