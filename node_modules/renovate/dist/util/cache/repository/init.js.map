{"version":3,"file":"init.js","sourceRoot":"","sources":["../../../../lib/util/cache/repository/init.ts"],"names":[],"mappings":";;;AAAA,mDAAsD;AAEtD,wCAA8C;AAC9C,wBAAyC;AAEzC;;GAEG;AACI,KAAK,UAAU,aAAa,CAAC,MAAsB;IACxD,IAAA,aAAU,GAAE,CAAC;IAEb,MAAM,EAAE,QAAQ,EAAE,GAAG,qBAAY,CAAC,GAAG,EAAE,CAAC;IACxC,MAAM,EAAE,UAAU,EAAE,eAAe,EAAE,GAAG,MAAM,CAAC;IAE/C,IAAI,eAAe,KAAK,UAAU,IAAI,CAAC,QAAQ,IAAI,CAAC,UAAU,EAAE;QAC9D,OAAO;KACR;IAED,IAAI,eAAe,KAAK,SAAS,EAAE;QACjC,MAAM,UAAU,GAAG,IAAI,sBAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC5D,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;QACxB,IAAA,WAAQ,EAAC,UAAU,CAAC,CAAC;QACrB,OAAO;KACR;IAED,IAAI,eAAe,KAAK,OAAO,EAAE;QAC/B,MAAM,UAAU,GAAG,IAAI,sBAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC5D,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;QACxB,IAAA,WAAQ,EAAC,UAAU,CAAC,CAAC;QACrB,OAAO;KACR;AACH,CAAC;AAvBD,sCAuBC","sourcesContent":["import { GlobalConfig } from '../../../config/global';\nimport type { RenovateConfig } from '../../../config/types';\nimport { LocalRepoCache } from './impl/local';\nimport { resetCache, setCache } from '.';\n\n/**\n * Extracted to separate file in order to avoid circular module dependencies.\n */\nexport async function initRepoCache(config: RenovateConfig): Promise<void> {\n  resetCache();\n\n  const { platform } = GlobalConfig.get();\n  const { repository, repositoryCache } = config;\n\n  if (repositoryCache === 'disabled' || !platform || !repository) {\n    return;\n  }\n\n  if (repositoryCache === 'enabled') {\n    const localCache = new LocalRepoCache(platform, repository);\n    await localCache.load();\n    setCache(localCache);\n    return;\n  }\n\n  if (repositoryCache === 'reset') {\n    const localCache = new LocalRepoCache(platform, repository);\n    await localCache.save();\n    setCache(localCache);\n    return;\n  }\n}\n"]}