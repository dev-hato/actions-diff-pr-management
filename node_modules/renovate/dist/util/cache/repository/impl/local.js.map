{"version":3,"file":"local.js","sourceRoot":"","sources":["../../../../../lib/util/cache/repository/impl/local.ts"],"names":[],"mappings":"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","sourcesContent":["import { promisify } from 'util';\nimport zlib from 'zlib';\nimport hasha from 'hasha';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../../../config/global';\nimport { logger } from '../../../../logger';\nimport { outputCacheFile, readCacheFile } from '../../../fs';\nimport {\n  CACHE_REVISION,\n  isValidRev10,\n  isValidRev11,\n  isValidRev12,\n} from '../common';\nimport type { RepoCacheRecord } from '../types';\nimport { RepoCacheBase } from './base';\n\nconst compress = promisify(zlib.brotliCompress);\nconst decompress = promisify(zlib.brotliDecompress);\n\nexport class LocalRepoCache extends RepoCacheBase {\n  private oldHash: string | null = null;\n\n  constructor(private platform: string, private repository: string) {\n    super();\n  }\n\n  public getCacheFileName(): string {\n    const cacheDir = GlobalConfig.get('cacheDir');\n    const repoCachePath = '/renovate/repository/';\n    const platform = this.platform;\n    const fileName = `${this.repository}.json`;\n    return upath.join(cacheDir, repoCachePath, platform, fileName);\n  }\n\n  override async load(): Promise<void> {\n    const cacheFileName = this.getCacheFileName();\n    try {\n      const cacheFileName = this.getCacheFileName();\n      const rawCache = await readCacheFile(cacheFileName, 'utf8');\n      const oldCache = JSON.parse(rawCache);\n\n      if (isValidRev12(oldCache, this.repository)) {\n        const compressed = Buffer.from(oldCache.payload, 'base64');\n        const uncompressed = await decompress(compressed);\n        const jsonStr = uncompressed.toString('utf8');\n        this.data = JSON.parse(jsonStr);\n        this.oldHash = oldCache.hash;\n        logger.debug('Repository cache is valid');\n        return;\n      }\n\n      if (isValidRev11(oldCache, this.repository)) {\n        this.data = oldCache.data;\n        logger.debug('Repository cache is migrated from 11 revision');\n        return;\n      }\n\n      if (isValidRev10(oldCache, this.repository)) {\n        delete oldCache.repository;\n        delete oldCache.revision;\n        this.data = oldCache;\n        logger.debug('Repository cache is migrated from 10 revision');\n        return;\n      }\n\n      logger.debug('Repository cache is invalid');\n    } catch (err) {\n      logger.debug({ cacheFileName }, 'Repository cache not found');\n    }\n  }\n\n  override async save(): Promise<void> {\n    const cacheFileName = this.getCacheFileName();\n    const revision = CACHE_REVISION;\n    const repository = this.repository;\n    const data = this.getData();\n    const jsonStr = JSON.stringify(data);\n    const hash = await hasha.async(jsonStr, { algorithm: 'sha256' });\n    if (hash !== this.oldHash) {\n      const compressed = await compress(jsonStr);\n      const payload = compressed.toString('base64');\n      const record: RepoCacheRecord = { revision, repository, payload, hash };\n      await outputCacheFile(cacheFileName, JSON.stringify(record));\n    }\n  }\n}\n"]}