{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../lib/util/cache/package/file.ts"],"names":[],"mappings":";;;;AAAA,8DAA8B;AAC9B,iCAAiC;AACjC,0DAA0B;AAC1B,4CAAyC;AAEzC,SAAS,MAAM,CAAC,SAAiB,EAAE,GAAW;IAC5C,OAAO,GAAG,SAAS,IAAI,GAAG,EAAE,CAAC;AAC/B,CAAC;AAED,IAAI,aAAqB,CAAC;AAE1B,KAAK,UAAU,EAAE,CAAC,SAAiB,EAAE,GAAW;IAC9C,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,sBAAsB,CAAC,CAAC;IACzD,MAAM,iBAAO,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,EAAE,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;AAChE,CAAC;AAEM,KAAK,UAAU,GAAG,CACvB,SAAiB,EACjB,GAAW;IAEX,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,SAAS,CAAC;KAClB;IACD,IAAI;QACF,MAAM,GAAG,GAAG,MAAM,iBAAO,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;QACrE,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACpD,IAAI,WAAW,EAAE;YACf,IAAI,gBAAQ,CAAC,KAAK,EAAE,GAAG,gBAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;gBAC3D,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,wBAAwB,CAAC,CAAC;gBAC3D,OAAO,WAAW,CAAC,KAAK,CAAC;aAC1B;YACD,MAAM,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;SAC1B;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;KAChD;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AArBD,kBAqBC;AAEM,KAAK,UAAU,GAAG,CACvB,SAAiB,EACjB,GAAW,EACX,KAAc,EACd,UAAU,GAAG,CAAC;IAEd,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO;KACR;IACD,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,qBAAqB,CAAC,CAAC;IACpE,MAAM,iBAAO,CAAC,GAAG,CACf,aAAa,EACb,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EACtB,IAAI,CAAC,SAAS,CAAC;QACb,KAAK;QACL,MAAM,EAAE,gBAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;KACvD,CAAC,CACH,CAAC;AACJ,CAAC;AAlBD,kBAkBC;AAED,SAAgB,IAAI,CAAC,QAAgB;IACnC,aAAa,GAAG,eAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;IACpE,eAAM,CAAC,KAAK,CAAC,4CAA4C,GAAG,aAAa,CAAC,CAAC;AAC7E,CAAC;AAHD,oBAGC","sourcesContent":["import cacache from 'cacache';\nimport { DateTime } from 'luxon';\nimport upath from 'upath';\nimport { logger } from '../../../logger';\n\nfunction getKey(namespace: string, key: string): string {\n  return `${namespace}-${key}`;\n}\n\nlet cacheFileName: string;\n\nasync function rm(namespace: string, key: string): Promise<void> {\n  logger.trace({ namespace, key }, 'Removing cache entry');\n  await cacache.rm.entry(cacheFileName, getKey(namespace, key));\n}\n\nexport async function get<T = never>(\n  namespace: string,\n  key: string\n): Promise<T | undefined> {\n  if (!cacheFileName) {\n    return undefined;\n  }\n  try {\n    const res = await cacache.get(cacheFileName, getKey(namespace, key));\n    const cachedValue = JSON.parse(res.data.toString());\n    if (cachedValue) {\n      if (DateTime.local() < DateTime.fromISO(cachedValue.expiry)) {\n        logger.trace({ namespace, key }, 'Returning cached value');\n        return cachedValue.value;\n      }\n      await rm(namespace, key);\n    }\n  } catch (err) {\n    logger.trace({ namespace, key }, 'Cache miss');\n  }\n  return undefined;\n}\n\nexport async function set(\n  namespace: string,\n  key: string,\n  value: unknown,\n  ttlMinutes = 5\n): Promise<void> {\n  if (!cacheFileName) {\n    return;\n  }\n  logger.trace({ namespace, key, ttlMinutes }, 'Saving cached value');\n  await cacache.put(\n    cacheFileName,\n    getKey(namespace, key),\n    JSON.stringify({\n      value,\n      expiry: DateTime.local().plus({ minutes: ttlMinutes }),\n    })\n  );\n}\n\nexport function init(cacheDir: string): void {\n  cacheFileName = upath.join(cacheDir, '/renovate/renovate-cache-v1');\n  logger.debug('Initializing Renovate internal cache into ' + cacheFileName);\n}\n"]}