{"version":3,"file":"editor-config.js","sourceRoot":"","sources":["../../../lib/util/json-writer/editor-config.ts"],"names":[],"mappings":";;;;AAAA,+CAAiD;AACjD,0DAA0B;AAC1B,gDAAmD;AAEnD,yDAAqD;AAErD,MAAa,YAAY;IAChB,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAgB;QAChD,MAAM,EAAE,QAAQ,EAAE,GAAG,qBAAY,CAAC,GAAG,EAAE,CAAC;QACxC,MAAM,UAAU,GAAG,MAAM,IAAA,oBAAK,EAAC,eAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QAE/D,OAAO;YACL,eAAe,EAAE,YAAY,CAAC,kBAAkB,CAAC,UAAU,CAAC;YAC5D,eAAe,EAAE,YAAY,CAAC,kBAAkB,CAAC,UAAU,CAAC;SAC7D,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,kBAAkB,CAC/B,UAAsB;QAEtB,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,UAAU,CAAC;QAEjD,IAAI,WAAW,KAAK,KAAK,EAAE;YACzB,OAAO,kCAAe,CAAC,GAAG,CAAC;SAC5B;QAED,IAAI,WAAW,KAAK,OAAO,EAAE;YAC3B,OAAO,kCAAe,CAAC,KAAK,CAAC;SAC9B;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,MAAM,CAAC,kBAAkB,CAC/B,UAAsB;QAEtB,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAElD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;YAC7D,OAAO,UAAU,CAAC;SACnB;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAtCD,oCAsCC","sourcesContent":["import { KnownProps, parse } from 'editorconfig';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../config/global';\nimport type { CodeFormat } from './code-format';\nimport { IndentationType } from './indentation-type';\n\nexport class EditorConfig {\n  public static async getCodeFormat(fileName: string): Promise<CodeFormat> {\n    const { localDir } = GlobalConfig.get();\n    const knownProps = await parse(upath.join(localDir, fileName));\n\n    return {\n      indentationSize: EditorConfig.getIndentationSize(knownProps),\n      indentationType: EditorConfig.getIndentationType(knownProps),\n    };\n  }\n\n  private static getIndentationType(\n    knownProps: KnownProps\n  ): IndentationType | undefined {\n    const { indent_style: indentStyle } = knownProps;\n\n    if (indentStyle === 'tab') {\n      return IndentationType.Tab;\n    }\n\n    if (indentStyle === 'space') {\n      return IndentationType.Space;\n    }\n\n    return undefined;\n  }\n\n  private static getIndentationSize(\n    knownProps: KnownProps\n  ): number | undefined {\n    const indentSize = Number(knownProps.indent_size);\n\n    if (!Number.isNaN(indentSize) && Number.isInteger(indentSize)) {\n      return indentSize;\n    }\n\n    return undefined;\n  }\n}\n"]}