{"version":3,"file":"package-rules.js","sourceRoot":"","sources":["../../lib/util/package-rules.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport minimatch from 'minimatch';\nimport slugify from 'slugify';\nimport { mergeChildConfig } from '../config';\nimport type { PackageRule, PackageRuleInputConfig } from '../config/types';\nimport { logger } from '../logger';\nimport * as allVersioning from '../modules/versioning';\nimport { configRegexPredicate, regEx } from './regex';\n\nfunction matchesRule(\n  inputConfig: PackageRuleInputConfig,\n  packageRule: PackageRule\n): boolean {\n  const {\n    versioning,\n    packageFile,\n    lockFiles,\n    depType,\n    depTypes,\n    depName,\n    currentValue,\n    currentVersion,\n    lockedVersion,\n    updateType,\n    isBump,\n    sourceUrl,\n    language,\n    baseBranch,\n    manager,\n    datasource,\n  } = inputConfig;\n  const unconstrainedValue = !!lockedVersion && is.undefined(currentValue);\n  // Setting empty arrays simplifies our logic later\n  const matchFiles = packageRule.matchFiles ?? [];\n  const matchPaths = packageRule.matchPaths ?? [];\n  const matchLanguages = packageRule.matchLanguages ?? [];\n  const matchBaseBranches = packageRule.matchBaseBranches ?? [];\n  const matchManagers = packageRule.matchManagers ?? [];\n  const matchDatasources = packageRule.matchDatasources ?? [];\n  const matchDepTypes = packageRule.matchDepTypes ?? [];\n  const matchPackageNames = packageRule.matchPackageNames ?? [];\n  let matchPackagePatterns = packageRule.matchPackagePatterns ?? [];\n  const matchPackagePrefixes = packageRule.matchPackagePrefixes ?? [];\n  const excludePackageNames = packageRule.excludePackageNames ?? [];\n  const excludePackagePatterns = packageRule.excludePackagePatterns ?? [];\n  const excludePackagePrefixes = packageRule.excludePackagePrefixes ?? [];\n  const matchSourceUrlPrefixes = packageRule.matchSourceUrlPrefixes ?? [];\n  const matchSourceUrls = packageRule.matchSourceUrls ?? [];\n  const matchCurrentVersion = packageRule.matchCurrentVersion ?? null;\n  const matchUpdateTypes = packageRule.matchUpdateTypes ?? [];\n  let positiveMatch = false;\n  // Massage a positive patterns patch if an exclude one is present\n  if (\n    (excludePackageNames.length ||\n      excludePackagePatterns.length ||\n      excludePackagePrefixes.length) &&\n    !(\n      matchPackageNames.length ||\n      matchPackagePatterns.length ||\n      matchPackagePrefixes.length\n    )\n  ) {\n    matchPackagePatterns = ['.*'];\n  }\n  if (matchFiles.length) {\n    const isMatch = matchFiles.some(\n      (fileName) =>\n        packageFile === fileName ||\n        (is.array(lockFiles) && lockFiles?.includes(fileName))\n    );\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchPaths.length && packageFile) {\n    const isMatch = matchPaths.some(\n      (rulePath) =>\n        packageFile.includes(rulePath) ||\n        minimatch(packageFile, rulePath, { dot: true })\n    );\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchDepTypes.length) {\n    const isMatch =\n      (depType && matchDepTypes.includes(depType)) ||\n      depTypes?.some((dt) => matchDepTypes.includes(dt));\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchLanguages.length) {\n    if (!language) {\n      return false;\n    }\n    const isMatch = matchLanguages.includes(language);\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchBaseBranches.length) {\n    if (!baseBranch) {\n      return false;\n    }\n    const isMatch = matchBaseBranches.some((matchBaseBranch): boolean => {\n      const isAllowedPred = configRegexPredicate(matchBaseBranch);\n      if (isAllowedPred) {\n        return isAllowedPred(baseBranch);\n      }\n      return matchBaseBranch === baseBranch;\n    });\n\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchManagers.length) {\n    if (!manager) {\n      return false;\n    }\n    const isMatch = matchManagers.includes(manager);\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchDatasources.length) {\n    if (!datasource) {\n      return false;\n    }\n    const isMatch = matchDatasources.includes(datasource);\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchUpdateTypes.length) {\n    const isMatch =\n      (updateType && matchUpdateTypes.includes(updateType)) ||\n      (isBump && matchUpdateTypes.includes('bump'));\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (\n    matchPackageNames.length ||\n    matchPackagePatterns.length ||\n    matchPackagePrefixes.length\n  ) {\n    if (!depName) {\n      return false;\n    }\n    let isMatch = matchPackageNames.includes(depName);\n    // name match is \"or\" so we check patterns if we didn't match names\n    if (!isMatch) {\n      for (const packagePattern of matchPackagePatterns) {\n        const packageRegex = regEx(\n          packagePattern === '^*$' || packagePattern === '*'\n            ? '.*'\n            : packagePattern\n        );\n        if (packageRegex.test(depName)) {\n          logger.trace(`${depName} matches against ${String(packageRegex)}`);\n          isMatch = true;\n        }\n      }\n    }\n    // prefix match is also \"or\"\n    if (!isMatch && matchPackagePrefixes.length) {\n      isMatch = matchPackagePrefixes.some((prefix) =>\n        depName.startsWith(prefix)\n      );\n    }\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (excludePackageNames.length) {\n    const isMatch = depName && excludePackageNames.includes(depName);\n    if (isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (depName && excludePackagePatterns.length) {\n    let isMatch = false;\n    for (const pattern of excludePackagePatterns) {\n      const packageRegex = regEx(\n        pattern === '^*$' || pattern === '*' ? '.*' : pattern\n      );\n      if (packageRegex.test(depName)) {\n        logger.trace(`${depName} matches against ${String(packageRegex)}`);\n        isMatch = true;\n      }\n    }\n    if (isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (depName && excludePackagePrefixes.length) {\n    const isMatch = excludePackagePrefixes.some((prefix) =>\n      depName.startsWith(prefix)\n    );\n    if (isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchSourceUrlPrefixes.length) {\n    const upperCaseSourceUrl = sourceUrl?.toUpperCase();\n    const isMatch = matchSourceUrlPrefixes.some((prefix) =>\n      upperCaseSourceUrl?.startsWith(prefix.toUpperCase())\n    );\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchSourceUrls.length) {\n    const upperCaseSourceUrl = sourceUrl?.toUpperCase();\n    const isMatch = matchSourceUrls.some(\n      (url) => upperCaseSourceUrl === url.toUpperCase()\n    );\n    if (!isMatch) {\n      return false;\n    }\n    positiveMatch = true;\n  }\n  if (matchCurrentVersion) {\n    const version = allVersioning.get(versioning);\n    const matchCurrentVersionStr = matchCurrentVersion.toString();\n    const matchCurrentVersionPred = configRegexPredicate(\n      matchCurrentVersionStr\n    );\n    if (matchCurrentVersionPred) {\n      if (\n        !unconstrainedValue &&\n        (!currentValue || !matchCurrentVersionPred(currentValue))\n      ) {\n        return false;\n      }\n      positiveMatch = true;\n    } else if (version.isVersion(matchCurrentVersionStr)) {\n      let isMatch = false;\n      try {\n        isMatch =\n          unconstrainedValue ||\n          !!(\n            currentValue &&\n            version.matches(matchCurrentVersionStr, currentValue)\n          );\n      } catch (err) {\n        // Do nothing\n      }\n      if (!isMatch) {\n        return false;\n      }\n      positiveMatch = true;\n    } else {\n      const compareVersion =\n        currentValue && version.isVersion(currentValue)\n          ? currentValue // it's a version so we can match against it\n          : lockedVersion ?? currentVersion; // need to match against this currentVersion, if available\n      if (compareVersion) {\n        // istanbul ignore next\n        if (version.isVersion(compareVersion)) {\n          const isMatch = version.matches(compareVersion, matchCurrentVersion);\n          // istanbul ignore if\n          if (!isMatch) {\n            return false;\n          }\n          positiveMatch = true;\n        } else {\n          return false;\n        }\n      } else {\n        logger.debug(\n          { matchCurrentVersionStr, currentValue },\n          'Could not find a version to compare'\n        );\n        return false;\n      }\n    }\n  }\n  return positiveMatch;\n}\n\nexport function applyPackageRules<T extends PackageRuleInputConfig>(\n  inputConfig: T\n): T {\n  let config = { ...inputConfig };\n  const packageRules = config.packageRules ?? [];\n  logger.trace(\n    { dependency: config.depName, packageRules },\n    `Checking against ${packageRules.length} packageRules`\n  );\n  packageRules.forEach((packageRule) => {\n    // This rule is considered matched if there was at least one positive match and no negative matches\n    if (matchesRule(config, packageRule)) {\n      // Package rule config overrides any existing config\n      const toApply = { ...packageRule };\n      if (config.groupSlug && packageRule.groupName && !packageRule.groupSlug) {\n        // Need to apply groupSlug otherwise the existing one will take precedence\n        toApply.groupSlug = slugify(packageRule.groupName, {\n          lower: true,\n        });\n      }\n      config = mergeChildConfig(config, toApply);\n      delete config.matchPackageNames;\n      delete config.matchPackagePatterns;\n      delete config.matchPackagePrefixes;\n      delete config.excludePackageNames;\n      delete config.excludePackagePatterns;\n      delete config.excludePackagePrefixes;\n      delete config.matchDepTypes;\n      delete config.matchCurrentVersion;\n    }\n  });\n  return config;\n}\n"]}