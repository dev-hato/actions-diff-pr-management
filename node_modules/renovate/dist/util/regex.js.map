{"version":3,"file":"regex.js","sourceRoot":"","sources":["../../lib/util/regex.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { CONFIG_VALIDATION } from '../constants/error-messages';\nimport { re2 } from '../expose.cjs';\n\nimport { logger } from '../logger';\n\nlet RegEx: RegExpConstructor;\n\nconst cache = new Map<string, RegExp>();\n\ntry {\n  const RE2 = re2();\n  // Test if native is working\n  new RE2('.*').exec('test');\n  logger.debug('Using RE2 as regex engine');\n  RegEx = RE2;\n} catch (err) {\n  logger.warn({ err }, 'RE2 not usable, falling back to RegExp');\n  RegEx = RegExp;\n}\n\nexport function regEx(\n  pattern: string | RegExp,\n  flags?: string | undefined,\n  useCache = true\n): RegExp {\n  const key = flags ? `${pattern.toString()}:${flags}` : pattern.toString();\n  if (useCache) {\n    const cachedResult = cache.get(key);\n    if (cachedResult) {\n      return cachedResult;\n    }\n  }\n  try {\n    const instance = new RegEx(pattern, flags);\n    if (useCache) {\n      cache.set(key, instance);\n    }\n    return instance;\n  } catch (err) {\n    const error = new Error(CONFIG_VALIDATION);\n    error.validationSource = pattern.toString();\n    error.validationError = `Invalid regular expression: ${pattern.toString()}`;\n    throw error;\n  }\n}\n\nexport function escapeRegExp(input: string): string {\n  return input.replace(regEx(/[.*+\\-?^${}()|[\\]\\\\]/g), '\\\\$&'); // $& means the whole matched string\n}\n\nexport const newlineRegex = regEx(/\\r?\\n/);\n\nconst configValStart = regEx(/^!?\\//);\nconst configValEnd = regEx(/\\/$/);\n\nexport function isConfigRegex(input: unknown): input is string {\n  return (\n    is.string(input) && configValStart.test(input) && configValEnd.test(input)\n  );\n}\n\nfunction parseConfigRegex(input: string): RegExp | null {\n  try {\n    const regexString = input\n      .replace(configValStart, '')\n      .replace(configValEnd, '');\n    return regEx(regexString);\n  } catch (err) {\n    // no-op\n  }\n  return null;\n}\n\ntype ConfigRegexPredicate = (s: string) => boolean;\n\nexport function configRegexPredicate(\n  input: string\n): ConfigRegexPredicate | null {\n  if (isConfigRegex(input)) {\n    const configRegex = parseConfigRegex(input);\n    if (configRegex) {\n      const isPositive = !input.startsWith('!');\n      return (x: string): boolean => {\n        const res = configRegex.test(x);\n        return isPositive ? res : !res;\n      };\n    }\n  }\n  return null;\n}\n"]}