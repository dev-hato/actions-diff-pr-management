{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/merge-confidence/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { UpdateType } from '../../config/types';\nimport { logger } from '../../logger';\nimport * as memCache from '../cache/memory';\nimport * as packageCache from '../cache/package';\nimport * as hostRules from '../host-rules';\nimport { Http } from '../http';\n\nconst http = new Http('merge-confidence');\n\nconst MERGE_CONFIDENCE = ['low', 'neutral', 'high', 'very high'];\ntype MergeConfidenceTuple = typeof MERGE_CONFIDENCE;\nexport type MergeConfidence = MergeConfidenceTuple[number];\n\nexport const confidenceLevels: Record<MergeConfidence, number> = {\n  low: -1,\n  neutral: 0,\n  high: 1,\n  'very high': 2,\n};\n\nexport function isActiveConfidenceLevel(confidence: string): boolean {\n  return confidence !== 'low' && MERGE_CONFIDENCE.includes(confidence);\n}\n\nexport function satisfiesConfidenceLevel(\n  confidence: MergeConfidence,\n  minimumConfidence: MergeConfidence\n): boolean {\n  return confidenceLevels[confidence] >= confidenceLevels[minimumConfidence];\n}\n\nconst updateTypeConfidenceMapping: Record<UpdateType, MergeConfidence | null> =\n  {\n    pin: 'high',\n    digest: 'neutral',\n    pinDigest: 'high',\n    bump: 'neutral',\n    lockFileMaintenance: 'neutral',\n    lockfileUpdate: 'neutral',\n    rollback: 'neutral',\n    replacement: 'neutral',\n    major: null,\n    minor: null,\n    patch: null,\n  };\n\nexport async function getMergeConfidenceLevel(\n  datasource: string,\n  depName: string,\n  currentVersion: string,\n  newVersion: string,\n  updateType: UpdateType\n): Promise<MergeConfidence> {\n  if (!(currentVersion && newVersion && updateType)) {\n    return 'neutral';\n  }\n  const mappedConfidence = updateTypeConfidenceMapping[updateType];\n  if (mappedConfidence) {\n    return mappedConfidence;\n  }\n  const { token } = hostRules.find({\n    hostType: 'merge-confidence',\n    url: 'https://badges.renovateapi.com',\n  });\n  if (!token) {\n    logger.warn('No Merge Confidence API token found');\n    return 'neutral';\n  }\n  // istanbul ignore if\n  if (memCache.get('merge-confidence-invalid-token')) {\n    return 'neutral';\n  }\n  const url = `https://badges.renovateapi.com/packages/${datasource}/${depName}/${newVersion}/confidence.api/${currentVersion}`;\n  const cachedResult = await packageCache.get('merge-confidence', token + url);\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let confidence = 'neutral';\n  try {\n    const res = (await http.getJson<{ confidence: MergeConfidence }>(url)).body;\n    if (MERGE_CONFIDENCE.includes(res.confidence)) {\n      confidence = res.confidence;\n    }\n  } catch (err) {\n    logger.debug({ err }, 'Error fetching merge confidence');\n    if (err.statusCode === 403) {\n      memCache.set('merge-confidence-invalid-token', true);\n      logger.warn('Merge Confidence API token rejected');\n    }\n  }\n  await packageCache.set('merge-confidence', token + url, confidence, 60);\n  return confidence;\n}\n"]}