{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/template/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport handlebars from 'handlebars';\nimport { GlobalConfig } from '../../config/global';\nimport { logger } from '../../logger';\nimport { clone } from '../clone';\n\nhandlebars.registerHelper('encodeURIComponent', encodeURIComponent);\n\nhandlebars.registerHelper('stringToPrettyJSON', (input: string): string =>\n  JSON.stringify(JSON.parse(input), null, 2)\n);\n\n// istanbul ignore next\nhandlebars.registerHelper(\n  'replace',\n  (find, replace, context) =>\n    (context || '').replace(new RegExp(find, 'g'), replace) // TODO #12873\n);\n\nhandlebars.registerHelper('lowercase', (str: string) => str?.toLowerCase());\n\nhandlebars.registerHelper('containsString', (str, subStr) =>\n  str?.includes(subStr)\n);\n\nhandlebars.registerHelper({\n  and(...args) {\n    // Need to remove the 'options', as last parameter\n    // https://handlebarsjs.com/api-reference/helpers.html\n    args.pop();\n    return args.every(Boolean);\n  },\n  or(...args) {\n    // Need to remove the 'options', as last parameter\n    // https://handlebarsjs.com/api-reference/helpers.html\n    args.pop();\n    return args.some(Boolean);\n  },\n});\n\nexport const exposedConfigOptions = [\n  'additionalBranchPrefix',\n  'addLabels',\n  'branchName',\n  'branchPrefix',\n  'branchTopic',\n  'commitMessage',\n  'commitMessageAction',\n  'commitMessageExtra',\n  'commitMessagePrefix',\n  'commitMessageSuffix',\n  'commitMessageTopic',\n  'gitAuthor',\n  'group',\n  'groupName',\n  'groupSlug',\n  'labels',\n  'prBodyColumns',\n  'prBodyDefinitions',\n  'prBodyNotes',\n  'prTitle',\n  'semanticCommitScope',\n  'semanticCommitType',\n  'separateMajorMinor',\n  'separateMinorPatch',\n];\n\nexport const allowedFields = {\n  baseBranch: 'The baseBranch for this branch/PR',\n  body: 'The body of the release notes',\n  currentValue: 'The extracted current value of the dependency being updated',\n  currentVersion:\n    'The version that would be currently installed. For example, if currentValue is ^3.0.0 then currentVersion might be 3.1.0.',\n  currentDigest: 'The extracted current digest of the dependency being updated',\n  currentDigestShort:\n    'The extracted current short digest of the dependency being updated',\n  datasource: 'The datasource used to look up the upgrade',\n  depName: 'The name of the dependency being updated',\n  depNameLinked:\n    'The dependency name already linked to its home page using markdown',\n  depNameSanitized:\n    'The depName field sanitized for use in branches after removing spaces and special characters',\n  depType: 'The dependency type (if extracted - manager-dependent)',\n  displayFrom: 'The current value, formatted for display',\n  displayPending: 'Latest pending update, if internalChecksFilter is in use',\n  displayTo: 'The to value, formatted for display',\n  hasReleaseNotes: 'true if the upgrade has release notes',\n  isLockfileUpdate: 'true if the branch is a lock file update',\n  isMajor: 'true if the upgrade is major',\n  isPatch: 'true if the upgrade is a patch upgrade',\n  isPin: 'true if the upgrade is pinning dependencies',\n  isPinDigest: 'true if the upgrade is pinning digests',\n  isRollback: 'true if the upgrade is a rollback PR',\n  isReplacement: 'true if the upgrade is a replacement',\n  isRange: 'true if the new value is a range',\n  isSingleVersion:\n    'true if the upgrade is to a single version rather than a range',\n  logJSON: 'ChangeLogResult object for the upgrade',\n  manager: 'The (package) manager which detected the dependency',\n  newDigest: 'The new digest value',\n  newDigestShort:\n    'A shorted version of newDigest, for use when the full digest is too long to be conveniently displayed',\n  newMajor:\n    'The major version of the new version. e.g. \"3\" if the new version if \"3.1.0\"',\n  newMinor:\n    'The minor version of the new version. e.g. \"1\" if the new version if \"3.1.0\"',\n  newName:\n    'The name of the new dependency that replaces the current deprecated dependency',\n  newValue:\n    'The new value in the upgrade. Can be a range or version e.g. \"^3.0.0\" or \"3.1.0\"',\n  newVersion: 'The new version in the upgrade, e.g. \"3.1.0\"',\n  packageFile: 'The filename that the dependency was found in',\n  packageFileDir:\n    'The directory with full path where the packageFile was found',\n  packageName: 'The full name that was used to look up the dependency',\n  parentDir:\n    'The name of the directory that the dependency was found in, without full path',\n  platform: 'VCS platform in use, e.g. \"github\", \"gitlab\", etc.',\n  prettyDepType: 'Massaged depType',\n  project: 'ChangeLogProject object',\n  recreateClosed: 'If true, this PR will be recreated if closed',\n  references: 'A list of references for the upgrade',\n  releases: 'An array of releases for an upgrade',\n  releaseNotes: 'A ChangeLogNotes object for the release',\n  repository: 'The current repository',\n  semanticPrefix: 'The fully generated semantic prefix for commit messages',\n  sourceRepo: 'The repository in the sourceUrl, if present',\n  sourceRepoName: 'The repository name in the sourceUrl, if present',\n  sourceRepoOrg: 'The repository organization in the sourceUrl, if present',\n  sourceRepoSlug: 'The slugified pathname of the sourceUrl, if present',\n  sourceUrl: 'The source URL for the package',\n  updateType:\n    'One of digest, pin, rollback, patch, minor, major, replacement, pinDigest',\n  upgrades: 'An array of upgrade objects in the branch',\n  url: 'The url of the release notes',\n  version: 'The version number of the changelog',\n  versioning: 'The versioning scheme in use',\n  versions: 'An array of ChangeLogRelease objects in the upgrade',\n};\n\nconst prBodyFields = [\n  'header',\n  'table',\n  'notes',\n  'changelogs',\n  'hasWarningsErrors',\n  'errors',\n  'warnings',\n  'configDescription',\n  'controls',\n  'footer',\n];\n\nconst handlebarsUtilityFields = ['else'];\n\nconst allowedFieldsList = Object.keys(allowedFields)\n  .concat(exposedConfigOptions)\n  .concat(prBodyFields)\n  .concat(handlebarsUtilityFields);\n\ntype CompileInput = Record<string, unknown>;\n\ntype FilteredObject = Record<string, CompileInput | CompileInput[] | unknown>;\n\nfunction getFilteredObject(input: CompileInput): FilteredObject {\n  const obj = clone(input);\n  const res: FilteredObject = {};\n  const allAllowed = [\n    ...Object.keys(allowedFields),\n    ...exposedConfigOptions,\n  ].sort();\n  for (const field of allAllowed) {\n    const value = obj[field];\n    if (is.array(value)) {\n      res[field] = value\n        .filter(is.plainObject)\n        .map((element) => getFilteredObject(element as CompileInput));\n    } else if (is.plainObject(value)) {\n      res[field] = getFilteredObject(value);\n    } else if (!is.undefined(value)) {\n      res[field] = value;\n    }\n  }\n  return res;\n}\n\nconst templateRegex = /{{(#(if|unless) )?([a-zA-Z]+)}}/g; // TODO #12873\n\nexport function compile(\n  template: string,\n  input: CompileInput,\n  filterFields = true\n): string {\n  const data = { ...GlobalConfig.get(), ...input };\n  const filteredInput = filterFields ? getFilteredObject(data) : data;\n  logger.trace({ template, filteredInput }, 'Compiling template');\n  if (filterFields) {\n    const matches = template.matchAll(templateRegex);\n    for (const match of matches) {\n      const varName = match[3];\n      if (!allowedFieldsList.includes(varName)) {\n        logger.info(\n          { varName, template },\n          'Disallowed variable name in template'\n        );\n      }\n    }\n  }\n  return handlebars.compile(template)(filteredInput);\n}\n"]}