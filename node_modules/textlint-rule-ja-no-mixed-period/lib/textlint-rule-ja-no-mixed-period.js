// LICENSE : MIT
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RuleHelper = require("textlint-rule-helper").RuleHelper;

var japaneseRegExp = /(?:[々〇〻\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])/;
/***
 * 典型的な句点のパターン
 * これは`periodMark`と交換しても違和感がないものを登録
 * @type {RegExp}
 */

var classicPeriodMarkPattern = /[。\.]/;

var checkEndsWithPeriod = require("check-ends-with-period");

var defaultOptions = {
  // 優先する句点文字
  periodMark: "。",
  // 句点文字として許可する文字列の配列
  // 例外として許可したい文字列を設定する
  // `periodMark`に指定したものは自動的に許可リストに加わる
  allowPeriodMarks: [],
  // 末尾に絵文字を置くことを許可するか
  allowEmojiAtEnd: false,
  // 句点で終わって無い場合に`periodMark`を--fix時に追加するかどうか
  // デフォルトでは自動的に追加しない
  forceAppendPeriod: false,
  // [Note] このオプションは標準外なので隠しオプション扱い
  // [Warning] このオプションはsemverの範囲外なのでいつでも壊れる可能性がある
  // 脚注はチェック対象から外すかどうか(実質Re:View向け)
  // デフォルトでは脚注構文(Re:View)は無視する
  checkFootnote: false
};

var reporter = function reporter(context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var Syntax = context.Syntax,
      RuleError = context.RuleError,
      report = context.report,
      fixer = context.fixer,
      getSource = context.getSource;
  var helper = new RuleHelper(context); // 優先する句点記号

  var preferPeriodMark = options.periodMark || defaultOptions.periodMark; // 優先する句点記号は常に句点として許可される

  var allowPeriodMarks = (options.allowPeriodMarks || defaultOptions.allowPeriodMarks).concat(preferPeriodMark);
  var allowEmojiAtEnd = options.allowEmojiAtEnd !== undefined ? options.allowEmojiAtEnd : defaultOptions.allowEmojiAtEnd;
  var forceAppendPeriod = options.forceAppendPeriod !== undefined ? options.forceAppendPeriod : defaultOptions.forceAppendPeriod; // [Note] Un-document option

  var checkFootnote = options.checkFootnote !== undefined ? options.checkFootnote : defaultOptions.checkFootnote; // 脚注のNode Typeを定義(TxtASTの定義外)

  var FootnoteNodes = [// https://github.com/orangain/textlint-plugin-review
  "Footnote", // https://github.com/textlint/textlint/blob/master/packages/%40textlint/markdown-to-ast/src/mapping/markdown-syntax-map.js
  // 実際にはmarkdown-to-astではこれはParagraphを含まないInlineNodeなのであまり意味はない
  "Definition"];
  var ignoredNodeTypes = [Syntax.ListItem, Syntax.Link, Syntax.Code, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis].concat(checkFootnote ? [] : FootnoteNodes);
  return _defineProperty({}, Syntax.Paragraph, function (node) {
    if (helper.isChildNode(node, ignoredNodeTypes)) {
      return;
    }

    var lastNode = node.children[node.children.length - 1];

    if (lastNode === undefined || lastNode.type !== Syntax.Str) {
      return;
    }

    var lastStrText = getSource(lastNode);

    if (lastStrText.length === 0) {
      return;
    } // 日本語が含まれていない文章は無視する


    if (!japaneseRegExp.test(lastStrText)) {
      return;
    }

    var _checkEndsWithPeriod = checkEndsWithPeriod(lastStrText, {
      periodMarks: allowPeriodMarks,
      allowEmoji: allowEmojiAtEnd
    }),
        valid = _checkEndsWithPeriod.valid,
        periodMark = _checkEndsWithPeriod.periodMark,
        index = _checkEndsWithPeriod.index; // 問題が無い場合は何もしない


    if (valid) {
      return;
    } // 文末がスペースである場合はスペースを削除する


    if (/\s/.test(periodMark)) {
      report(lastNode, new RuleError("\u6587\u672B\u304C\"".concat(preferPeriodMark, "\"\u3067\u7D42\u308F\u3063\u3066\u3044\u307E\u305B\u3093\u3002\u672B\u5C3E\u306B\u4E0D\u8981\u306A\u30B9\u30DA\u30FC\u30B9\u304C\u3042\u308A\u307E\u3059\u3002"), {
        index: index,
        fix: fixer.replaceTextRange([index, index + periodMark.length], "")
      }));
      return;
    } // 典型的なパターンは自動的に`preferPeriodMark`に置き換える
    // 例) "." であるなら "。"に変換


    if (classicPeriodMarkPattern.test(periodMark)) {
      report(lastNode, new RuleError("\u6587\u672B\u304C\"".concat(preferPeriodMark, "\"\u3067\u7D42\u308F\u3063\u3066\u3044\u307E\u305B\u3093\u3002"), {
        index: index,
        fix: fixer.replaceTextRange([index, index + preferPeriodMark.length], preferPeriodMark)
      }));
    } else {
      // 句点を忘れているパターン
      if (forceAppendPeriod) {
        // `forceAppendPeriod`のオプションがtrueならば、自動で句点を追加する。
        report(lastNode, new RuleError("\u6587\u672B\u304C\"".concat(preferPeriodMark, "\"\u3067\u7D42\u308F\u3063\u3066\u3044\u307E\u305B\u3093\u3002"), {
          index: index,
          fix: fixer.replaceTextRange([index + 1, index + 1], preferPeriodMark)
        }));
      } else {
        report(lastNode, new RuleError("\u6587\u672B\u304C\"".concat(preferPeriodMark, "\"\u3067\u7D42\u308F\u3063\u3066\u3044\u307E\u305B\u3093\u3002"), {
          index: index
        }));
      }
    }
  });
};

module.exports = {
  linter: reporter,
  fixer: reporter
};
//# sourceMappingURL=textlint-rule-ja-no-mixed-period.js.map