{"version":3,"sources":["../src/period.js"],"names":["find","require","endWith","emojiRegExp","exceptionMarkRegExp","module","exports","checkPeriodAtText","lineText","periodMarks","allowExceptionMark","allowEmoji","characters","index","length","periodMark","test","valid","matchMark","mark","indexOf"],"mappings":"AAAA;AACA;;;;AACA,IAAMA,OAAOC,QAAQ,YAAR,CAAb;AACA,IAAMC,UAAUD,QAAQ,UAAR,CAAhB;AACA,IAAME,cAAcF,QAAQ,aAAR,GAApB;AACA,IAAMG,sBAAsB,aAA5B;AACA;;;;;;;;AAQAC,OAAOC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,QAA3B,EAIT;AAAA,mFAAJ,EAAI;AAAA,gCAHJC,WAGI;AAAA,QAHJA,WAGI,oCAHU,CAAC,GAAD,EAAM,GAAN,CAGV;AAAA,qCAFJC,kBAEI;AAAA,QAFJA,kBAEI,yCAFiB,IAEjB;AAAA,+BADJC,UACI;AAAA,QADJA,UACI,mCADS,KACT;;AACJ;AACA,QAAMC,0CAAiBJ,QAAjB,EAAN;AACA,QAAMK,QAAQD,WAAWE,MAAX,GAAoB,CAAlC;AACA,QAAMC,aAAaH,WAAWC,KAAX,CAAnB;AACA,QAAI,KAAKG,IAAL,CAAUD,UAAV,CAAJ,EAA2B;AACvB,eAAO;AACHE,mBAAO,KADJ;AAEHF,kCAFG;AAGHF;AAHG,SAAP;AAKH;AACD;AACA;AACA;AACA;AACA;AACA,QAAIH,sBAAsBN,oBAAoBY,IAApB,CAAyBD,UAAzB,CAA1B,EAAgE;AAC5D,eAAO;AACHE,mBAAO,IADJ;AAEHF,kCAFG;AAGHF;AAHG,SAAP;AAKH;AACD,QAAIF,cAAcR,YAAYa,IAAZ,CAAiBD,UAAjB,CAAlB,EAAgD;AAC5C,eAAO;AACHE,mBAAO,IADJ;AAEHF,kCAFG;AAGHF;AAHG,SAAP;AAKH;AACD,QAAMK,YAAYlB,KAAKS,WAAL,EAAkB,UAACU,IAAD,EAAU;AAC1C,eAAOjB,QAAQM,QAAR,EAAkBW,IAAlB,CAAP;AACH,KAFiB,CAAlB;AAGA,QAAIV,YAAYW,OAAZ,CAAoBL,UAApB,MAAoC,CAAC,CAAzC,EAA4C;AACxC,eAAO;AACHE,mBAAO,IADJ;AAEHF,wBAAYG,SAFT;AAGHL,mBAAOL,SAASM,MAAT,GAAkBI,UAAUJ;AAHhC,SAAP;AAKH;AACD,WAAO;AACHG,eAAO,KADJ;AAEHF,8BAFG;AAGHF;AAHG,KAAP;AAKH,CAlDD","file":"period.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nconst find = require(\"array-find\");\nconst endWith = require(\"end-with\");\nconst emojiRegExp = require(\"emoji-regex\")();\nconst exceptionMarkRegExp = /[!?！？\\)）」』]/;\n/**\n *\n * @param {string} lineText\n * @param {string[]} periodMarks\n * @param {boolean} allowExceptionMark\n * @param {boolean} allowEmoji\n * @returns {{valid: boolean, periodMark: string, index: number}}\n */\nmodule.exports = function checkPeriodAtText(lineText, {\n    periodMarks = [\"。\", \".\"],\n    allowExceptionMark = true,\n    allowEmoji = false,\n} = {}) {\n    // サロゲートペアを考慮した文字列長・文字アクセス\n    const characters = [...lineText];\n    const index = characters.length - 1;\n    const periodMark = characters[index];\n    if (/\\s/.test(periodMark)) {\n        return {\n            valid: false,\n            periodMark,\n            index\n        };\n    }\n    // 末尾の\"文字\"が句点以外で末尾に使われる文字であるときは無視する\n    // 例外: 感嘆符\n    // 例外: 「」 () （）『』\n    // http://ncode.syosetu.com/n8977bb/12/\n    // https://ja.wikipedia.org/wiki/%E7%B5%82%E6%AD%A2%E7%AC%A6\n    if (allowExceptionMark && exceptionMarkRegExp.test(periodMark)) {\n        return {\n            valid: true,\n            periodMark,\n            index\n        };\n    }\n    if (allowEmoji && emojiRegExp.test(periodMark)) {\n        return {\n            valid: true,\n            periodMark,\n            index\n        };\n    }\n    const matchMark = find(periodMarks, (mark) => {\n        return endWith(lineText, mark);\n    });\n    if (periodMarks.indexOf(periodMark) !== -1) {\n        return {\n            valid: true,\n            periodMark: matchMark,\n            index: lineText.length - matchMark.length\n        };\n    }\n    return {\n        valid: false,\n        periodMark,\n        index\n    };\n};"]}