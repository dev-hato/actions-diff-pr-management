// MIT © 2017 azu
"use strict";

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    } else {
        return Array.from(arr);
    }
}

var find = require("array-find");
var endWith = require("end-with");
var emojiRegExp = require("emoji-regex")();
var exceptionMarkRegExp = /[!?！？\)）」』]/;
/**
 *
 * @param {string} lineText
 * @param {string[]} periodMarks
 * @param {boolean} allowExceptionMark
 * @param {boolean} allowEmoji
 * @returns {{valid: boolean, periodMark: string, index: number}}
 */
module.exports = function checkPeriodAtText(lineText) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$periodMarks = _ref.periodMarks,
        periodMarks = _ref$periodMarks === undefined ? ["。", "."] : _ref$periodMarks,
        _ref$allowExceptionMa = _ref.allowExceptionMark,
        allowExceptionMark = _ref$allowExceptionMa === undefined ? true : _ref$allowExceptionMa,
        _ref$allowEmoji = _ref.allowEmoji,
        allowEmoji = _ref$allowEmoji === undefined ? false : _ref$allowEmoji;

    // サロゲートペアを考慮した文字列長・文字アクセス
    var characters = [].concat(_toConsumableArray(lineText));
    var index = characters.length - 1;
    var periodMark = characters[index];
    if (/\s/.test(periodMark)) {
        return {
            valid: false,
            periodMark: periodMark,
            index: index
        };
    }
    // 末尾の"文字"が句点以外で末尾に使われる文字であるときは無視する
    // 例外: 感嘆符
    // 例外: 「」 () （）『』
    // http://ncode.syosetu.com/n8977bb/12/
    // https://ja.wikipedia.org/wiki/%E7%B5%82%E6%AD%A2%E7%AC%A6
    if (allowExceptionMark && exceptionMarkRegExp.test(periodMark)) {
        return {
            valid: true,
            periodMark: periodMark,
            index: index
        };
    }
    if (allowEmoji && emojiRegExp.test(periodMark)) {
        return {
            valid: true,
            periodMark: periodMark,
            index: index
        };
    }
    var matchMark = find(periodMarks, function(mark) {
        return endWith(lineText, mark);
    });
    if (periodMarks.indexOf(periodMark) !== -1) {
        return {
            valid: true,
            periodMark: matchMark,
            index: lineText.length - matchMark.length
        };
    }
    return {
        valid: false,
        periodMark: periodMark,
        index: index
    };
};
//# sourceMappingURL=period.js.map
