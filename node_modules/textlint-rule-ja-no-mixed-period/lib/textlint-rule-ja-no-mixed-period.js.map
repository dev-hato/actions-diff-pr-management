{"version":3,"sources":["../src/textlint-rule-ja-no-mixed-period.js"],"names":["RuleHelper","require","japaneseRegExp","classicPeriodMarkPattern","checkEndsWithPeriod","defaultOptions","periodMark","allowPeriodMarks","allowEmojiAtEnd","forceAppendPeriod","checkFootnote","reporter","context","options","Syntax","RuleError","report","fixer","getSource","helper","preferPeriodMark","concat","undefined","FootnoteNodes","ignoredNodeTypes","ListItem","Link","Code","Image","BlockQuote","Emphasis","Paragraph","node","isChildNode","lastNode","children","length","type","Str","lastStrText","test","periodMarks","allowEmoji","valid","index","fix","replaceTextRange","module","exports","linter"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst RuleHelper = require(\"textlint-rule-helper\").RuleHelper;\nconst japaneseRegExp = /(?:[々〇〻\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])/;\n/***\n * 典型的な句点のパターン\n * これは`periodMark`と交換しても違和感がないものを登録\n * @type {RegExp}\n */\nconst classicPeriodMarkPattern = /[。\\.]/;\nconst checkEndsWithPeriod = require(\"check-ends-with-period\");\nconst defaultOptions = {\n    // 優先する句点文字\n    periodMark: \"。\",\n    // 句点文字として許可する文字列の配列\n    // 例外として許可したい文字列を設定する\n    // `periodMark`に指定したものは自動的に許可リストに加わる\n    allowPeriodMarks: [],\n    // 末尾に絵文字を置くことを許可するか\n    allowEmojiAtEnd: false,\n    // 句点で終わって無い場合に`periodMark`を--fix時に追加するかどうか\n    // デフォルトでは自動的に追加しない\n    forceAppendPeriod: false,\n    // [Note] このオプションは標準外なので隠しオプション扱い\n    // [Warning] このオプションはsemverの範囲外なのでいつでも壊れる可能性がある\n    // 脚注はチェック対象から外すかどうか(実質Re:View向け)\n    // デフォルトでは脚注構文(Re:View)は無視する\n    checkFootnote: false\n};\nconst reporter = (context, options = {}) => {\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    const helper = new RuleHelper(context);\n    // 優先する句点記号\n    const preferPeriodMark = options.periodMark || defaultOptions.periodMark;\n    // 優先する句点記号は常に句点として許可される\n    const allowPeriodMarks = (options.allowPeriodMarks || defaultOptions.allowPeriodMarks).concat(preferPeriodMark);\n    const allowEmojiAtEnd =\n        options.allowEmojiAtEnd !== undefined ? options.allowEmojiAtEnd : defaultOptions.allowEmojiAtEnd;\n    const forceAppendPeriod =\n        options.forceAppendPeriod !== undefined ? options.forceAppendPeriod : defaultOptions.forceAppendPeriod;\n    // [Note] Un-document option\n    const checkFootnote = options.checkFootnote !== undefined ? options.checkFootnote : defaultOptions.checkFootnote;\n    // 脚注のNode Typeを定義(TxtASTの定義外)\n    const FootnoteNodes = [\n        // https://github.com/orangain/textlint-plugin-review\n        \"Footnote\",\n        // https://github.com/textlint/textlint/blob/master/packages/%40textlint/markdown-to-ast/src/mapping/markdown-syntax-map.js\n        // 実際にはmarkdown-to-astではこれはParagraphを含まないInlineNodeなのであまり意味はない\n        \"Definition\"\n    ];\n    const ignoredNodeTypes = [\n        Syntax.ListItem,\n        Syntax.Link,\n        Syntax.Code,\n        Syntax.Image,\n        Syntax.BlockQuote,\n        Syntax.Emphasis\n    ].concat(checkFootnote ? [] : FootnoteNodes);\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, ignoredNodeTypes)) {\n                return;\n            }\n            const lastNode = node.children[node.children.length - 1];\n            if (lastNode === undefined || lastNode.type !== Syntax.Str) {\n                return;\n            }\n            const lastStrText = getSource(lastNode);\n            if (lastStrText.length === 0) {\n                return;\n            }\n            // 日本語が含まれていない文章は無視する\n            if (!japaneseRegExp.test(lastStrText)) {\n                return;\n            }\n            const { valid, periodMark, index } = checkEndsWithPeriod(lastStrText, {\n                periodMarks: allowPeriodMarks,\n                allowEmoji: allowEmojiAtEnd\n            });\n            // 問題が無い場合は何もしない\n            if (valid) {\n                return;\n            }\n            // 文末がスペースである場合はスペースを削除する\n            if (/\\s/.test(periodMark)) {\n                report(\n                    lastNode,\n                    new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。末尾に不要なスペースがあります。`, {\n                        index,\n                        fix: fixer.replaceTextRange([index, index + periodMark.length], \"\")\n                    })\n                );\n                return;\n            }\n            // 典型的なパターンは自動的に`preferPeriodMark`に置き換える\n            // 例) \".\" であるなら \"。\"に変換\n            if (classicPeriodMarkPattern.test(periodMark)) {\n                report(\n                    lastNode,\n                    new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。`, {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + preferPeriodMark.length], preferPeriodMark)\n                    })\n                );\n            } else {\n                // 句点を忘れているパターン\n                if (forceAppendPeriod) {\n                    // `forceAppendPeriod`のオプションがtrueならば、自動で句点を追加する。\n                    report(\n                        lastNode,\n                        new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。`, {\n                            index: index,\n                            fix: fixer.replaceTextRange([index + 1, index + 1], preferPeriodMark)\n                        })\n                    );\n                } else {\n                    report(\n                        lastNode,\n                        new RuleError(`文末が\"${preferPeriodMark}\"で終わっていません。`, {\n                            index: index\n                        })\n                    );\n                }\n            }\n        }\n    };\n};\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"file":"textlint-rule-ja-no-mixed-period.js"}