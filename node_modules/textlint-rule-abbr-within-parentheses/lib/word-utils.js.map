{"version":3,"sources":["../src/word-utils.js"],"names":["module","exports","isAllCapitals","word","test","expandOneWordToAcronym","CapitalWord","acronym","charAt","restWord","slice","lastCapitalChar","i","length","char","expandWordsToAcronym","words","reduce"],"mappings":";;AAAAA,OAAOC,OAAP,CAAeC,aAAf,GAA+B,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AACxD,WAAO,YAAWC,IAAX,CAAgBD,IAAhB;AAAP;AACH,CAFD;;AAIA,IAAIE,yBAAyB,SAASA,sBAAT,CAAgCC,WAAhC,EAA6C;AACtE,QAAIC,UAAUD,YAAYE,MAAZ,CAAmB,CAAnB,CAAd;AACA,QAAIC,WAAWH,YAAYI,KAAZ,CAAkB,CAAlB,CAAf;AACA,QAAIC,kBAAkB,IAAtB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,SAASI,MAA7B,EAAqCD,GAArC,EAA0C;AACtC,YAAME,OAAOL,SAASD,MAAT,CAAgBI,CAAhB,CAAb;AACA,YAAI,QAAQR,IAAR,CAAaU,IAAb,CAAJ,EAAwB;AACpBH,8BAAkBG,IAAlB;AACH,SAFD,MAEO;AACH,gBAAIH,eAAJ,EAAqB;AACjBJ,2BAAWI,eAAX;AACAA,kCAAkB,IAAlB;AACH;AACJ;AACJ;AACD,WAAOJ,OAAP;AACH,CAhBD;AAiBA;;;;;AAKAP,OAAOC,OAAP,CAAeI,sBAAf,GAAwCA,sBAAxC;;AAEA;;;;;;;AAOA,IAAIU,uBAAuB,SAASA,oBAAT,CAA8BC,KAA9B,EAAqC;AAC5D,QAAIA,MAAMH,MAAN,KAAiB,CAArB,EAAwB;AACpB,eAAOR,uBAAuBW,MAAM,CAAN,CAAvB,CAAP;AACH;AACD;AACA,WAAOA,MAAMC,MAAN,CAAa,UAACV,OAAD,EAAUJ,IAAV,EAAmB;AACnCI,mBAAWJ,KAAKK,MAAL,CAAY,CAAZ,CAAX;AACA,eAAOD,OAAP;AACH,KAHM,EAGJ,EAHI,CAAP;AAIH,CATD;AAUAP,OAAOC,OAAP,CAAec,oBAAf,GAAsCA,oBAAtC","file":"word-utils.js","sourcesContent":["module.exports.isAllCapitals = function isAllCapitals(word) {\n    return /^[A-Z]+$/.test(word);\n};\n\nlet expandOneWordToAcronym = function expandOneWordToAcronym(CapitalWord) {\n    let acronym = CapitalWord.charAt(0);\n    let restWord = CapitalWord.slice(1);\n    let lastCapitalChar = null;\n    for (let i = 0; i < restWord.length; i++) {\n        const char = restWord.charAt(i);\n        if (/[A-Z]/.test(char)) {\n            lastCapitalChar = char;\n        } else {\n            if (lastCapitalChar) {\n                acronym += lastCapitalChar;\n                lastCapitalChar = null;\n            }\n        }\n    }\n    return acronym;\n};\n/**\n * Capital Word to Acronym\n * @param {string} CapitalWord\n * @returns {string} return Acronym\n */\nmodule.exports.expandOneWordToAcronym = expandOneWordToAcronym;\n\n/*\n * create Acronym from words.\n * @param words\n * @returns {string}\n * @example XMLHttpRequest -> XHR\n * @example World Health Organization -> WHO\n */\nlet expandWordsToAcronym = function expandWordsToAcronym(words) {\n    if (words.length === 1) {\n        return expandOneWordToAcronym(words[0]);\n    }\n    // World Health Organization -> WHO\n    return words.reduce((acronym, word) => {\n        acronym += word.charAt(0);\n        return acronym;\n    }, \"\");\n};\nmodule.exports.expandWordsToAcronym = expandWordsToAcronym;"]}