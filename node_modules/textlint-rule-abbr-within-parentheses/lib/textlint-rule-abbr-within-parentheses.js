// MIT © 2017 azu
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require("./word-utils"),
    expandWordsToAcronym = _require.expandWordsToAcronym;

var matchCaptureGroupAll = require("match-index").matchCaptureGroupAll;

/**
 * Match
 *
 * ABC(any string)
 * ---|------------
 * $1$2   $3     $4
 * @type {RegExp}
 */
var AbbreviationsWithoutPattern = /([A-Z]+)([（(])(.*?)([）)])/g;
var reporter = function reporter(context) {
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        report = context.report,
        getSource = context.getSource,
        fixer = context.fixer;

    return _defineProperty({}, Syntax.Str, function (node) {
        var text = getSource(node);
        var captureGroups = matchCaptureGroupAll(text, AbbreviationsWithoutPattern);
        if (captureGroups.length !== 4) {
            return;
        }

        var _captureGroups = _slicedToArray(captureGroups, 4),
            abbr = _captureGroups[0],
            startPair = _captureGroups[1],
            word = _captureGroups[2],
            endPair = _captureGroups[3];

        var actualAbbr = expandWordsToAcronym(word.text.split(/\s-/));
        if (abbr.text === actualAbbr) {
            var fixed = fixer.replaceTextRange([abbr.index, endPair.index + endPair.text.length], "" + word.text + startPair.text + abbr.text + endPair.text);
            report(node, new RuleError("Abbreviation should be within parentheses.", {
                index: abbr.index,
                fix: fixed
            }));
        }
    });
};

module.exports = {
    linter: reporter,
    fixer: reporter
};
//# sourceMappingURL=textlint-rule-abbr-within-parentheses.js.map