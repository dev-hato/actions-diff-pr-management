{"version":3,"sources":["../src/textlint-rule-abbr-within-parentheses.js"],"names":["require","expandWordsToAcronym","matchCaptureGroupAll","AbbreviationsWithoutPattern","reporter","context","Syntax","RuleError","report","getSource","fixer","Str","node","text","captureGroups","length","abbr","startPair","word","endPair","actualAbbr","split","fixed","replaceTextRange","index","fix","module","exports","linter"],"mappings":"AAAA;AACA;;;;;;eACiCA,QAAQ,cAAR,C;IAAzBC,oB,YAAAA,oB;;AAER,IAAMC,uBAAuBF,QAAQ,aAAR,EAAuBE,oBAApD;;AAEA;;;;;;;;AAQA,IAAMC,8BAA8B,4BAApC;AACA,IAAMC,WAAW,SAAXA,QAAW,CAASC,OAAT,EAAkB;AAAA,QACvBC,MADuB,GACyBD,OADzB,CACvBC,MADuB;AAAA,QACfC,SADe,GACyBF,OADzB,CACfE,SADe;AAAA,QACJC,MADI,GACyBH,OADzB,CACJG,MADI;AAAA,QACIC,SADJ,GACyBJ,OADzB,CACII,SADJ;AAAA,QACeC,KADf,GACyBL,OADzB,CACeK,KADf;;AAE/B,+BACKJ,OAAOK,GADZ,YACiBC,IADjB,EACuB;AACf,YAAMC,OAAOJ,UAAUG,IAAV,CAAb;AACA,YAAME,gBAAgBZ,qBAAqBW,IAArB,EAA2BV,2BAA3B,CAAtB;AACA,YAAIW,cAAcC,MAAd,KAAyB,CAA7B,EAAgC;AAC5B;AACH;;AALc,4CAM0BD,aAN1B;AAAA,YAMRE,IANQ;AAAA,YAMFC,SANE;AAAA,YAMSC,IANT;AAAA,YAMeC,OANf;;AAOf,YAAMC,aAAanB,qBAAqBiB,KAAKL,IAAL,CAAUQ,KAAV,CAAgB,KAAhB,CAArB,CAAnB;AACA,YAAIL,KAAKH,IAAL,KAAcO,UAAlB,EAA8B;AAC1B,gBAAME,QAAQZ,MAAMa,gBAAN,CAAuB,CACjCP,KAAKQ,KAD4B,EAEjCL,QAAQK,KAAR,GAAgBL,QAAQN,IAAR,CAAaE,MAFI,CAAvB,OAGRG,KAAKL,IAHG,GAGII,UAAUJ,IAHd,GAGqBG,KAAKH,IAH1B,GAGiCM,QAAQN,IAHzC,CAAd;AAIAL,mBAAOI,IAAP,EAAa,IAAIL,SAAJ,CAAc,4CAAd,EAA4D;AACrEiB,uBAAOR,KAAKQ,KADyD;AAErEC,qBAAKH;AAFgE,aAA5D,CAAb;AAIH;AACJ,KAnBL;AAqBH,CAvBD;;AAyBAI,OAAOC,OAAP,GAAiB;AACbC,YAAQxB,QADK;AAEbM,WAAON;AAFM,CAAjB","file":"textlint-rule-abbr-within-parentheses.js","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nconst { expandWordsToAcronym } = require(\"./word-utils\");\n\nconst matchCaptureGroupAll = require(\"match-index\").matchCaptureGroupAll;\n\n/**\n * Match\n *\n * ABC(any string)\n * ---|------------\n * $1$2   $3     $4\n * @type {RegExp}\n */\nconst AbbreviationsWithoutPattern = /([A-Z]+)([（(])(.*?)([）)])/g;\nconst reporter = function(context) {\n    const { Syntax, RuleError, report, getSource, fixer } = context;\n    return {\n        [Syntax.Str](node) {\n            const text = getSource(node);\n            const captureGroups = matchCaptureGroupAll(text, AbbreviationsWithoutPattern);\n            if (captureGroups.length !== 4) {\n                return;\n            }\n            const [abbr, startPair, word, endPair] = captureGroups;\n            const actualAbbr = expandWordsToAcronym(word.text.split(/\\s-/));\n            if (abbr.text === actualAbbr) {\n                const fixed = fixer.replaceTextRange([\n                    abbr.index,\n                    endPair.index + endPair.text.length\n                ], `${word.text}${startPair.text}${abbr.text}${endPair.text}`);\n                report(node, new RuleError(\"Abbreviation should be within parentheses.\", {\n                    index: abbr.index,\n                    fix: fixed\n                }))\n            }\n        }\n    }\n};\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};"]}