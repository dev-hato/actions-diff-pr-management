// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.restoreToSurfaceFromKey = exports.createKeyFromKey = exports.concatJoishiTokens = exports.create読点Matcher = exports.is括弧Token = exports.is助詞Token = void 0;

// 助詞どうか
var is助詞Token = token => {
  // 結合しているtokenは助詞助詞のようになってるため先頭一致で見る
  return token && /^助詞/.test(token.pos);
};

exports.is助詞Token = is助詞Token;

var is括弧Token = token => {
  return token && token.pos === "記号" && (token.pos_detail_1 === "括弧開" || token.pos_detail_1 === "括弧閉");
};
/**
 * 読点を判定する関数を返す
 * 注意: 名詞や記号ではないトークンは読点として扱えない
 * @param commaCharacters
 */


exports.is括弧Token = is括弧Token;

var create読点Matcher = commaCharacters => {
  return function is読点Token(token) {
    return commaCharacters.includes(token.surface_form) && ( // 、や, は名詞扱いの場合がある(0.1.2で記号となる)
    token.pos === "名詞" || // ，は記号 && 読点となる(surface_formを優先するために pos_detail_1/読点 のチェックを省く)
    token.pos === "記号");
  };
};
/**
 * aTokenの_extraKeyに結合したkeyを追加する
 * @param {Object} aToken
 * @param {Object} bToken
 * @returns {Object}
 */


exports.create読点Matcher = create読点Matcher;

var concatToken = (aToken, bToken) => {
  aToken.surface_form += bToken.surface_form;
  aToken.pos += bToken.pos;
  aToken.pos_detail_1 += bToken.surface_form;
  return aToken;
};
/**
 * 助詞+助詞 というように連続しているtokenを結合し直したtokenの配列を返す
 * @param {Array} tokens
 * @returns {Array}
 */


var concatJoishiTokens = tokens => {
  var newTokens = [];
  tokens.forEach(token => {
    var prevToken = newTokens[newTokens.length - 1];

    if (is助詞Token(token) && is助詞Token(prevToken)) {
      newTokens[newTokens.length - 1] = concatToken(prevToken, token);
    } else {
      newTokens.push(token);
    }
  });
  return newTokens;
}; // 助詞tokenから品詞細分類1までを元にしたkeyを作る
// http://www.unixuser.org/~euske/doc/postag/index.html#chasen
// http://chasen.naist.jp/snapshot/ipadic/ipadic/doc/ipadic-ja.pdf


exports.concatJoishiTokens = concatJoishiTokens;

var createKeyFromKey = token => {
  // e.g.) "は:助詞.係助詞.*.*"
  // "しようとすると" と には次の違いある
  // と	助詞	格助詞	一般 *
  // と	助詞	接続助詞	*	*
  return "".concat(token.surface_form, ":").concat(token.pos, ".").concat(token.pos_detail_1, ".").concat(token.pos_detail_2, ".").concat(token.pos_detail_3);
}; // keyからsurfaceを取り出す


exports.createKeyFromKey = createKeyFromKey;

var restoreToSurfaceFromKey = key => {
  return key.split(":")[0];
};

exports.restoreToSurfaceFromKey = restoreToSurfaceFromKey;
//# sourceMappingURL=token-utils.js.map