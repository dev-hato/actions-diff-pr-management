{"version":3,"sources":["../src/token-utils.ts"],"names":["is助詞Token","token","test","pos","is括弧Token","pos_detail_1","create読点Matcher","commaCharacters","is読点Token","includes","surface_form","concatToken","aToken","bToken","concatJoishiTokens","tokens","newTokens","forEach","prevToken","length","push","createKeyFromKey","pos_detail_2","pos_detail_3","restoreToSurfaceFromKey","key","split"],"mappings":"AAAA;AACA;;;;;;;AAIA;AACO,IAAMA,SAAS,GAAIC,KAAD,IAA0B;AAC/C;AACA,SAAOA,KAAK,IAAI,MAAMC,IAAN,CAAWD,KAAK,CAACE,GAAjB,CAAhB;AACH,CAHM;;;;AAKA,IAAMC,SAAS,GAAIH,KAAD,IAA0B;AAC/C,SAAOA,KAAK,IAAIA,KAAK,CAACE,GAAN,KAAc,IAAvB,KAAgCF,KAAK,CAACI,YAAN,KAAuB,KAAvB,IAAgCJ,KAAK,CAACI,YAAN,KAAuB,KAAvF,CAAP;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;;;;;AACO,IAAMC,eAAe,GAAIC,eAAD,IAA+B;AAC1D,SAAO,SAASC,SAAT,CAAmBP,KAAnB,EAAyC;AAC5C,WACIM,eAAe,CAACE,QAAhB,CAAyBR,KAAK,CAACS,YAA/B,OACA;AACCT,IAAAA,KAAK,CAACE,GAAN,KAAc,IAAd,IACG;AACAF,IAAAA,KAAK,CAACE,GAAN,KAAc,IAJlB,CADJ;AAOH,GARD;AASH,CAVM;AAWP;AACA;AACA;AACA;AACA;AACA;;;;;AACA,IAAMQ,WAAW,GAAG,CAACC,MAAD,EAAwBC,MAAxB,KAAkD;AAClED,EAAAA,MAAM,CAACF,YAAP,IAAuBG,MAAM,CAACH,YAA9B;AACAE,EAAAA,MAAM,CAACT,GAAP,IAAcU,MAAM,CAACV,GAArB;AACAS,EAAAA,MAAM,CAACP,YAAP,IAAuBQ,MAAM,CAACH,YAA9B;AACA,SAAOE,MAAP;AACH,CALD;AAMA;AACA;AACA;AACA;AACA;;;AACO,IAAME,kBAAkB,GAAIC,MAAD,IAA6B;AAC3D,MAAMC,SAA0B,GAAG,EAAnC;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAgBhB,KAAD,IAAW;AACtB,QAAMiB,SAAS,GAAGF,SAAS,CAACA,SAAS,CAACG,MAAV,GAAmB,CAApB,CAA3B;;AACA,QAAInB,SAAS,CAACC,KAAD,CAAT,IAAoBD,SAAS,CAACkB,SAAD,CAAjC,EAA8C;AAC1CF,MAAAA,SAAS,CAACA,SAAS,CAACG,MAAV,GAAmB,CAApB,CAAT,GAAkCR,WAAW,CAACO,SAAD,EAAYjB,KAAZ,CAA7C;AACH,KAFD,MAEO;AACHe,MAAAA,SAAS,CAACI,IAAV,CAAenB,KAAf;AACH;AACJ,GAPD;AAQA,SAAOe,SAAP;AACH,CAXM,C,CAYP;AACA;AACA;;;;;AACO,IAAMK,gBAAgB,GAAIpB,KAAD,IAA0B;AACtD;AACA;AACA;AACA;AACA,mBAAUA,KAAK,CAACS,YAAhB,cAAgCT,KAAK,CAACE,GAAtC,cAA6CF,KAAK,CAACI,YAAnD,cAAmEJ,KAAK,CAACqB,YAAzE,cAAyFrB,KAAK,CAACsB,YAA/F;AACH,CANM,C,CAOP;;;;;AACO,IAAMC,uBAAuB,GAAIC,GAAD,IAAiB;AACpD,SAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAP;AACH,CAFM","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n\nimport { KuromojiToken } from \"kuromojin\";\n\n// 助詞どうか\nexport const is助詞Token = (token: KuromojiToken) => {\n    // 結合しているtokenは助詞助詞のようになってるため先頭一致で見る\n    return token && /^助詞/.test(token.pos);\n};\n\nexport const is括弧Token = (token: KuromojiToken) => {\n    return token && token.pos === \"記号\" && (token.pos_detail_1 === \"括弧開\" || token.pos_detail_1 === \"括弧閉\");\n};\n\n/**\n * 読点を判定する関数を返す\n * 注意: 名詞や記号ではないトークンは読点として扱えない\n * @param commaCharacters\n */\nexport const create読点Matcher = (commaCharacters: string[]) => {\n    return function is読点Token(token: KuromojiToken) {\n        return (\n            commaCharacters.includes(token.surface_form) &&\n            // 、や, は名詞扱いの場合がある(0.1.2で記号となる)\n            (token.pos === \"名詞\" ||\n                // ，は記号 && 読点となる(surface_formを優先するために pos_detail_1/読点 のチェックを省く)\n                token.pos === \"記号\")\n        );\n    };\n};\n/**\n * aTokenの_extraKeyに結合したkeyを追加する\n * @param {Object} aToken\n * @param {Object} bToken\n * @returns {Object}\n */\nconst concatToken = (aToken: KuromojiToken, bToken: KuromojiToken) => {\n    aToken.surface_form += bToken.surface_form;\n    aToken.pos += bToken.pos;\n    aToken.pos_detail_1 += bToken.surface_form;\n    return aToken;\n};\n/**\n * 助詞+助詞 というように連続しているtokenを結合し直したtokenの配列を返す\n * @param {Array} tokens\n * @returns {Array}\n */\nexport const concatJoishiTokens = (tokens: KuromojiToken[]) => {\n    const newTokens: KuromojiToken[] = [];\n    tokens.forEach((token) => {\n        const prevToken = newTokens[newTokens.length - 1];\n        if (is助詞Token(token) && is助詞Token(prevToken)) {\n            newTokens[newTokens.length - 1] = concatToken(prevToken, token);\n        } else {\n            newTokens.push(token);\n        }\n    });\n    return newTokens;\n};\n// 助詞tokenから品詞細分類1までを元にしたkeyを作る\n// http://www.unixuser.org/~euske/doc/postag/index.html#chasen\n// http://chasen.naist.jp/snapshot/ipadic/ipadic/doc/ipadic-ja.pdf\nexport const createKeyFromKey = (token: KuromojiToken) => {\n    // e.g.) \"は:助詞.係助詞.*.*\"\n    // \"しようとすると\" と には次の違いある\n    // と\t助詞\t格助詞\t一般 *\n    // と\t助詞\t接続助詞\t*\t*\n    return `${token.surface_form}:${token.pos}.${token.pos_detail_1}.${token.pos_detail_2}.${token.pos_detail_3}`;\n};\n// keyからsurfaceを取り出す\nexport const restoreToSurfaceFromKey = (key: string) => {\n    return key.split(\":\")[0];\n};\n"],"file":"token-utils.js"}