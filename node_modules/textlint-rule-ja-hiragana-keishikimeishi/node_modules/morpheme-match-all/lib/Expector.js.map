{"version":3,"sources":["../src/Expector.js"],"names":["createTokenMatcher","require","assert","Expector","dict","Array","isArray","matcher","actualToken"],"mappings":"AAAA;AACA;;;;;;;;;;AACA,IAAMA,qBAAqBC,QAAQ,gBAAR,CAA3B;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;;IACqBE,Q;AACjB;;;AAGA,sBAAYC,IAAZ,EAAkB;AAAA;;AACdF,eAAOG,MAAMC,OAAN,CAAcF,KAAK,QAAL,CAAd,CAAP,wCAAwEA,IAAxE;AACA,aAAKG,OAAL,GAAeP,mBAAmBI,KAAK,QAAL,CAAnB,CAAf;AACA,aAAKA,IAAL,GAAYA,IAAZ;AACH;;AAED;;;;;;;;;8BAKMI,W,EAAa;AACf,mBAAO,KAAKD,OAAL,CAAaC,WAAb,CAAP;AACH;;;;;;kBAjBgBL,Q","file":"Expector.js","sourcesContent":["// MIT Â© 2016 azu\n\"use strict\";\nconst createTokenMatcher = require(\"morpheme-match\");\nconst assert = require(\"assert\");\nexport default class Expector {\n    /**\n     * @param {ExpectedDictionary} dict\n     */\n    constructor(dict) {\n        assert(Array.isArray(dict[\"tokens\"]), `\"tokens\" property is required. ${dict}`);\n        this.matcher = createTokenMatcher(dict[\"tokens\"]);\n        this.dict = dict;\n    }\n\n    /**\n     * match and return results\n     * @param {Object} actualToken\n     * @returns {{match: boolean, tokens: Object[]}}\n     */\n    match(actualToken) {\n        return this.matcher(actualToken);\n    }\n}"]}